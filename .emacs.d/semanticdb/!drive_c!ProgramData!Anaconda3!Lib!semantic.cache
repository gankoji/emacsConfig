;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
csv.py - read/write/investigate CSV files
\"\"\"" code nil nil [2 51])
            ("re" include nil nil [53 62])
            ("_csv" include nil nil [63 339])
            ("_csv" include nil nil [340 376])
            ("collections" include nil nil [378 413])
            ("io" include nil nil [414 437])
            ("__all__" variable nil nil [439 805])
            ("Dialect" type
               (:documentation "Describe a CSV dialect.

    This must be subclassed (see csv.excel).  Valid attributes are:
    delimiter, quotechar, escapechar, doublequote, skipinitialspace,
    lineterminator, quoting.

    "
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [1033 1043])
                    ("_valid" variable nil (reparse-symbol indented_block_body) [1048 1062])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [1086 1102])
                    ("quotechar" variable nil (reparse-symbol indented_block_body) [1107 1123])
                    ("escapechar" variable nil (reparse-symbol indented_block_body) [1128 1145])
                    ("doublequote" variable nil (reparse-symbol indented_block_body) [1150 1168])
                    ("skipinitialspace" variable nil (reparse-symbol indented_block_body) [1173 1196])
                    ("lineterminator" variable nil (reparse-symbol indented_block_body) [1201 1222])
                    ("quoting" variable nil (reparse-symbol indented_block_body) [1227 1241])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1275 1336])
                            ("self" code nil (reparse-symbol indented_block_body) [1344 1360]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1260 1264]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1247 1361])
                    ("_validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1380 1384]))                          )
                        (reparse-symbol indented_block_body) [1366 1544]))                  
                :type "class")
                nil [807 1544])
            ("excel" type
               (:documentation "Describe the usual properties of Excel-generated CSV files."
                :superclasses ("Dialect")
                :members 
                  ( ("delimiter" variable nil (reparse-symbol indented_block_body) [1641 1656])
                    ("quotechar" variable nil (reparse-symbol indented_block_body) [1661 1676])
                    ("doublequote" variable nil (reparse-symbol indented_block_body) [1681 1699])
                    ("skipinitialspace" variable nil (reparse-symbol indented_block_body) [1704 1728])
                    ("lineterminator" variable nil (reparse-symbol indented_block_body) [1733 1756])
                    ("quoting" variable nil (reparse-symbol indented_block_body) [1761 1784]))                  
                :type "class")
                nil [1545 1785])
            ("register_dialect" code nil nil [1785 1817])
            ("excel_tab" type
               (:documentation "Describe the usual properties of Excel-generated TAB-delimited files."
                :superclasses ("excel")
                :members 
                  ( ("delimiter" variable nil (reparse-symbol indented_block_body) [1927 1943]))                  
                :type "class")
                nil [1819 1944])
            ("register_dialect" code nil nil [1944 1984])
            ("unix_dialect" type
               (:documentation "Describe the usual properties of Unix-generated CSV files."
                :superclasses ("Dialect")
                :members 
                  ( ("delimiter" variable nil (reparse-symbol indented_block_body) [2088 2103])
                    ("quotechar" variable nil (reparse-symbol indented_block_body) [2108 2123])
                    ("doublequote" variable nil (reparse-symbol indented_block_body) [2128 2146])
                    ("skipinitialspace" variable nil (reparse-symbol indented_block_body) [2151 2175])
                    ("lineterminator" variable nil (reparse-symbol indented_block_body) [2180 2201])
                    ("quoting" variable nil (reparse-symbol indented_block_body) [2206 2225]))                  
                :type "class")
                nil [1986 2226])
            ("register_dialect" code nil nil [2226 2264])
            ("DictReader" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2414 2443])
                            ("self" variable nil (reparse-symbol indented_block_body) [2482 2504])
                            ("self" variable nil (reparse-symbol indented_block_body) [2547 2569])
                            ("self" variable nil (reparse-symbol indented_block_body) [2618 2665])
                            ("self" variable nil (reparse-symbol indented_block_body) [2674 2696])
                            ("self" variable nil (reparse-symbol indented_block_body) [2705 2722]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2302 2306])
                            ("f" variable nil (reparse-symbol function_parameters) [2308 2309])
                            ("fieldnames" variable nil (reparse-symbol function_parameters) [2311 2321])
                            ("restkey" variable nil (reparse-symbol function_parameters) [2328 2335])
                            ("restval" variable nil (reparse-symbol function_parameters) [2342 2349])
                            ("dialect" variable nil (reparse-symbol function_parameters) [2373 2380])
                            ("args" variable nil (reparse-symbol function_parameters) [2390 2395])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2397 2403]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2289 2723])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          )
                        (reparse-symbol indented_block_body) [2728 2768])
                    ("fieldnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2802 2806]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2773 3048])
                    ("fieldnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3091 3095])
                            ("value" variable nil (reparse-symbol function_parameters) [3097 3102]))                          
                        :decorators 
                          ( ("fieldnames.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3053 3138])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3156 3160]))                          )
                        (reparse-symbol indented_block_body) [3143 3847]))                  
                :type "class")
                nil [2267 3847])
            ("DictWriter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3997 4025])
                            ("self" variable nil (reparse-symbol indented_block_body) [4065 4087])
                            ("if" code nil (reparse-symbol indented_block_body) [4131 4305])
                            ("self" variable nil (reparse-symbol indented_block_body) [4313 4345])
                            ("self" variable nil (reparse-symbol indented_block_body) [4354 4401]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3884 3888])
                            ("f" variable nil (reparse-symbol function_parameters) [3890 3891])
                            ("fieldnames" variable nil (reparse-symbol function_parameters) [3893 3903])
                            ("restval" variable nil (reparse-symbol function_parameters) [3905 3912])
                            ("extrasaction" variable nil (reparse-symbol function_parameters) [3917 3929])
                            ("dialect" variable nil (reparse-symbol function_parameters) [3956 3963])
                            ("args" variable nil (reparse-symbol function_parameters) [3973 3978])
                            ("kwds" variable nil (reparse-symbol function_parameters) [3980 3986]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3871 4402])
                    ("writeheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4423 4427]))                          )
                        (reparse-symbol indented_block_body) [4407 4521])
                    ("_dict_to_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4544 4548])
                            ("rowdict" variable nil (reparse-symbol function_parameters) [4550 4557]))                          )
                        (reparse-symbol indented_block_body) [4526 4920])
                    ("writerow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4938 4942])
                            ("rowdict" variable nil (reparse-symbol function_parameters) [4944 4951]))                          )
                        (reparse-symbol indented_block_body) [4925 5019])
                    ("writerows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5038 5042])
                            ("rowdicts" variable nil (reparse-symbol function_parameters) [5044 5052]))                          )
                        (reparse-symbol indented_block_body) [5024 5127]))                  
                :type "class")
                nil [3849 5127])
            ("try" code nil nil [5198 5253])
            ("Sniffer" type
               (:members 
                  ( ("'''
    \"Sniffs\" the format of a CSV file (i.e. delimiter, quotechar)
    Returns a Dialect object.
    '''" code nil (reparse-symbol indented_block_body) [5273 5380])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5473 5516]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5398 5402]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5385 5517])
                    ("sniff" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5533 5537])
                            ("sample" variable nil (reparse-symbol function_parameters) [5539 5545])
                            ("delimiters" variable nil (reparse-symbol function_parameters) [5547 5557]))                          
                        :documentation "
        Returns a dialect (or None) corresponding to the sample
        ")
                        (reparse-symbol indented_block_body) [5523 6467])
                    ("_guess_quote_and_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6504 6508])
                            ("data" variable nil (reparse-symbol function_parameters) [6510 6514])
                            ("delimiters" variable nil (reparse-symbol function_parameters) [6516 6526]))                          
                        :documentation "
        Looks for text enclosed between two identical quotes
        (the probable quotechar) which are preceded and followed
        by the same character (the probable delimiter).
        For example:
                         ,'some text',
        The quote with the most wins, same with the delimiter.
        If there is no quotechar the delimiter can't be determined
        this way.
        ")
                        (reparse-symbol indented_block_body) [6473 9348])
                    ("_guess_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9375 9379])
                            ("data" variable nil (reparse-symbol function_parameters) [9381 9385])
                            ("delimiters" variable nil (reparse-symbol function_parameters) [9387 9397]))                          
                        :documentation "
        The delimiter /should/ occur the same number of times on
        each row. However, due to malformed data, it may not. We don't want
        an all or nothing approach, so we allow for small variations in this
        number.
          1) build a table of the frequency of each character on every line.
          2) build a table of frequencies of this frequency (meta-frequency?),
             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,
             7 times in 2 rows'
          3) use the mode of the meta-frequency to determine the /expected/
             frequency for that character
          4) find out how often the character actually meets that goal
          5) the character that best meets its goal is the delimiter
        For performance reasons, the data is evaluated in chunks, so it can
        try and evaluate the smallest portion of the data possible, evaluating
        additional chunks as necessary.
        ")
                        (reparse-symbol indented_block_body) [9354 13632])
                    ("has_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13653 13657])
                            ("sample" variable nil (reparse-symbol function_parameters) [13659 13665]))                          )
                        (reparse-symbol indented_block_body) [13638 16181]))                  
                :type "class")
                nil [5254 16181]))          
      :file "csv.py"
      :pointmax 16181
      :fsize 16180
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 1512 . 1544) (NEWLINE 1457 . 1458) (COLON 1456 . 1457) (TRY 1395 . 1398) (AS 1452 . 1454)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode digits.
    \\D       Matches any non-digit character; equivalent to [^\\d].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode whitespace characters.
    \\S       Matches any non-whitespace character; equivalent to [^\\s].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
             in bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the
             range of Unicode alphanumeric characters (letters plus digits
             plus underscore).
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match     Match a regular expression pattern to the beginning of a string.
    fullmatch Match a regular expression pattern to all of a string.
    search    Search a string for the presence of a pattern.
    sub       Substitute occurrences of a pattern found in a string.
    subn      Same as sub, but also return the number of substitutions made.
    split     Split a string by the occurrences of a pattern.
    findall   Find all occurrences of a pattern in a string.
    finditer  Return an iterator yielding a match object for each match.
    compile   Compile a pattern into a RegexObject.
    purge     Clear the regular expression cache.
    escape    Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D
                   match the corresponding ASCII character categories
                   (rather than the whole Unicode categories, which is the
                   default).
                   For bytes patterns, this flag is the only available
                   behaviour and needn't be specified.
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     For compatibility only. Ignored for string patterns (it
                   is the default), and forbidden for bytes patterns.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 6492])
            ("enum" include nil nil [6494 6505])
            ("sre_compile" include nil nil [6506 6524])
            ("sre_parse" include nil nil [6525 6541])
            ("functools" include nil nil [6542 6558])
            ("try" code nil nil [6559 6622])
            ("__all__" variable nil nil [6640 6916])
            ("__version__" variable nil nil [6918 6939])
            ("RegexFlag" type
               (:superclasses ("enum.IntFlag")
                :members 
                  ( ("ASCII" variable nil (reparse-symbol indented_block_body) [6976 7010])
                    ("IGNORECASE" variable nil (reparse-symbol indented_block_body) [7039 7083])
                    ("LOCALE" variable nil (reparse-symbol indented_block_body) [7102 7138])
                    ("UNICODE" variable nil (reparse-symbol indented_block_body) [7173 7211])
                    ("MULTILINE" variable nil (reparse-symbol indented_block_body) [7242 7284])
                    ("DOTALL" variable nil (reparse-symbol indented_block_body) [7321 7357])
                    ("VERBOSE" variable nil (reparse-symbol indented_block_body) [7387 7425])
                    ("A" variable nil (reparse-symbol indented_block_body) [7463 7472])
                    ("I" variable nil (reparse-symbol indented_block_body) [7477 7491])
                    ("L" variable nil (reparse-symbol indented_block_body) [7496 7506])
                    ("U" variable nil (reparse-symbol indented_block_body) [7511 7522])
                    ("M" variable nil (reparse-symbol indented_block_body) [7527 7540])
                    ("S" variable nil (reparse-symbol indented_block_body) [7545 7555])
                    ("X" variable nil (reparse-symbol indented_block_body) [7560 7571])
                    ("TEMPLATE" variable nil (reparse-symbol indented_block_body) [7633 7673])
                    ("T" variable nil (reparse-symbol indented_block_body) [7701 7713])
                    ("DEBUG" variable nil (reparse-symbol indented_block_body) [7718 7752]))                  
                :type "class")
                nil [6941 7786])
            ("globals" code nil nil [7786 7825])
            ("error" variable nil nil [7843 7868])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7971 7978])
                    ("string" variable nil (reparse-symbol function_parameters) [7980 7986])
                    ("flags" variable nil (reparse-symbol function_parameters) [7988 7993]))                  )
                nil [7961 8172])
            ("fullmatch" function
               (:documentation "Try to apply the pattern to all of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8187 8194])
                    ("string" variable nil (reparse-symbol function_parameters) [8196 8202])
                    ("flags" variable nil (reparse-symbol function_parameters) [8204 8209]))                  )
                nil [8173 8386])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8398 8405])
                    ("string" variable nil (reparse-symbol function_parameters) [8407 8413])
                    ("flags" variable nil (reparse-symbol function_parameters) [8415 8420]))                  )
                nil [8387 8603])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8612 8619])
                    ("repl" variable nil (reparse-symbol function_parameters) [8621 8625])
                    ("string" variable nil (reparse-symbol function_parameters) [8627 8633])
                    ("count" variable nil (reparse-symbol function_parameters) [8635 8640])
                    ("flags" variable nil (reparse-symbol function_parameters) [8644 8649]))                  )
                nil [8604 9072])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [9082 9089])
                    ("repl" variable nil (reparse-symbol function_parameters) [9091 9095])
                    ("string" variable nil (reparse-symbol function_parameters) [9097 9103])
                    ("count" variable nil (reparse-symbol function_parameters) [9105 9110])
                    ("flags" variable nil (reparse-symbol function_parameters) [9114 9119]))                  )
                nil [9073 9672])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings.  If
    capturing parentheses are used in pattern, then the text of all
    groups in the pattern are also returned as part of the resulting
    list.  If maxsplit is nonzero, at most maxsplit splits occur,
    and the remainder of the string is returned as the final element
    of the list."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [9683 9690])
                    ("string" variable nil (reparse-symbol function_parameters) [9692 9698])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9700 9708])
                    ("flags" variable nil (reparse-symbol function_parameters) [9712 9717]))                  )
                nil [9673 10202])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more capturing groups are present in the pattern, return
    a list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [10215 10222])
                    ("string" variable nil (reparse-symbol function_parameters) [10224 10230])
                    ("flags" variable nil (reparse-symbol function_parameters) [10232 10237]))                  )
                nil [10203 10579])
            ("finditer" function
               (:documentation "Return an iterator over all non-overlapping matches in the
    string.  For each match, the iterator returns a match object.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [10593 10600])
                    ("string" variable nil (reparse-symbol function_parameters) [10602 10608])
                    ("flags" variable nil (reparse-symbol function_parameters) [10610 10615]))                  )
                nil [10580 10855])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [10868 10875])
                ("flags" variable nil (reparse-symbol function_parameters) [10877 10882]))              ) nil [10856 10995])
            ("purge" function nil nil [10996 11102])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [11116 11123])
                ("flags" variable nil (reparse-symbol function_parameters) [11125 11130]))              ) nil [11103 11234])
            ("_alphanum_str" variable nil nil [11235 11333])
            ("_alphanum_bytes" variable nil nil [11334 11435])
            ("escape" function
               (:documentation "
    Escape all the characters in pattern except ASCII letters, numbers and '_'.
    "
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [11448 11455]))                  )
                nil [11437 12236])
            ("_cache" variable nil nil [12321 12332])
            ("_pattern_type" variable nil nil [12334 12382])
            ("_MAXCACHE" variable nil nil [12384 12399])
            ("_compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [12413 12420])
                ("flags" variable nil (reparse-symbol function_parameters) [12422 12427]))              ) nil [12400 13334])
            ("" code nil nil [13355 13366])
            ("_compile_repl" function (:arguments 
              ( ("repl" variable nil (reparse-symbol function_parameters) [13385 13389])
                ("pattern" variable nil (reparse-symbol function_parameters) [13391 13398]))              ) nil [13367 13496])
            ("_expand" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [13509 13516])
                ("match" variable nil (reparse-symbol function_parameters) [13518 13523])
                ("template" variable nil (reparse-symbol function_parameters) [13525 13533]))              ) nil [13497 13698])
            ("_subx" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [13709 13716])
                ("template" variable nil (reparse-symbol function_parameters) [13718 13726]))              ) nil [13699 14060])
            ("copyreg" include nil nil [14093 14107])
            ("_pickle" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [14121 14122]))              ) nil [14109 14167])
            ("copyreg" code nil nil [14168 14216])
            ("Scanner" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("sre_constants" include nil (reparse-symbol indented_block_body) [14417 14461])
                            ("self" variable nil (reparse-symbol indented_block_body) [14470 14492])
                            ("p" variable nil (reparse-symbol indented_block_body) [14551 14557])
                            ("s" variable nil (reparse-symbol indented_block_body) [14566 14589])
                            ("s" variable nil (reparse-symbol indented_block_body) [14598 14613])
                            ("for" code nil (reparse-symbol indented_block_body) [14622 14864])
                            ("p" variable nil (reparse-symbol indented_block_body) [14872 14922])
                            ("self" variable nil (reparse-symbol indented_block_body) [14931 14968]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14384 14388])
                            ("lexicon" variable nil (reparse-symbol function_parameters) [14390 14397])
                            ("flags" variable nil (reparse-symbol function_parameters) [14399 14404]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14371 14969])
                    ("scan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14982 14986])
                            ("string" variable nil (reparse-symbol function_parameters) [14988 14994]))                          )
                        (reparse-symbol indented_block_body) [14973 15553]))                  
                :type "class")
                nil [14352 15553]))          
      :file "re.py"
      :pointmax 15553
      :fsize 15552
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
\"\"\"" code nil nil [1 1480])
            ("__author__" variable nil nil [1524 1861])
            ("__all__" variable nil nil [1863 2181])
            ("_io" include nil nil [2184 2194])
            ("abc" include nil nil [2195 2205])
            ("" code nil nil [2223 2473])
            ("OpenWrapper" variable nil nil [2475 2497])
            ("UnsupportedOperation" variable nil nil [2573 2611])
            ("SEEK_SET" variable nil nil [2626 2638])
            ("SEEK_CUR" variable nil nil [2639 2651])
            ("SEEK_END" variable nil nil [2652 2664])
            ("IOBase" type
               (:superclasses ("_io._IOBase" "abc.ABCMeta")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [2864 2893]))                  
                :type "class")
                nil [2810 2894])
            ("RawIOBase" type
               (:superclasses ("_io._RawIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [2940 2972]))                  
                :type "class")
                nil [2895 2973])
            ("BufferedIOBase" type
               (:superclasses ("_io._BufferedIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [3029 3066]))                  
                :type "class")
                nil [2974 3067])
            ("TextIOBase" type
               (:superclasses ("_io._TextIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [3115 3148]))                  
                :type "class")
                nil [3068 3149])
            ("RawIOBase" code nil nil [3150 3176])
            ("for" code nil nil [3178 3315])
            ("for" code nil nil [3316 3387])
            ("del" code nil nil [3387 3396])
            ("try" code nil nil [3398 3518]))          
      :file "io.py"
      :pointmax 3518
      :fsize 3517
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 2836 . 2845) (ASSIGN 2845 . 2846)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("sys" include nil nil [1 11])
            ("types" include nil nil [12 69])
            ("functools" include nil nil [70 98])
            ("operator" include nil nil [99 131])
            ("try" code nil nil [181 287])
            ("__all__" variable nil nil [289 402])
            ("_is_descriptor" function
               (:documentation "Returns True if obj is a descriptor, False otherwise."
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [424 427]))                  )
                nil [405 625])
            ("_is_dunder" function
               (:documentation "Returns True if a __dunder__ name, False otherwise."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [642 646]))                  )
                nil [627 852])
            ("_is_sunder" function
               (:documentation "Returns True if a _sunder_ name, False otherwise."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [869 873]))                  )
                nil [854 1074])
            ("_make_class_unpicklable" function
               (:documentation "Make the given class un-picklable."
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [1103 1106]))                  )
                nil [1075 1332])
            ("_auto_null" variable nil nil [1333 1354])
            ("auto" type
               (:documentation "
    Instances are replaced with an appropriate value in Enum class suites.
    "
                :members 
                  ( ("value" variable nil (reparse-symbol indented_block_body) [1462 1480]))                  
                :type "class")
                nil [1355 1481])
            ("_EnumDict" type
               (:documentation "Track enum member order and ensure member names are not reused.

    EnumMeta will use the names found in self._member_names as the
    enumeration member names.

    "
                :superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [1716 1734])
                            ("self" variable nil (reparse-symbol indented_block_body) [1743 1766])
                            ("self" variable nil (reparse-symbol indented_block_body) [1775 1797]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1701 1705]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1688 1798])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1819 1823])
                            ("key" variable nil (reparse-symbol function_parameters) [1825 1828])
                            ("value" variable nil (reparse-symbol function_parameters) [1830 1835]))                          
                        :documentation "Changes anything not dundered or not a descriptor.

        If an enum member name is used twice, an error is raised; duplicate
        values are not checked for.

        Single underscore (sunder) names are reserved.

        ")
                        (reparse-symbol indented_block_body) [1803 3269]))                  
                :type "class")
                nil [1483 3269])
            ("Enum" variable nil nil [3500 3511])
            ("EnumMeta" type
               (:documentation "Metaclass for Enum"
                :superclasses ("type")
                :members 
                  ( ("__prepare__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("metacls" variable nil (reparse-symbol function_parameters) [3602 3609])
                            ("cls" variable nil (reparse-symbol function_parameters) [3611 3614])
                            ("bases" variable nil (reparse-symbol function_parameters) [3616 3621]))                          )
                        (reparse-symbol indented_block_body) [3569 3982])
                    ("__new__" function (:arguments 
                      ( ("metacls" variable nil (reparse-symbol function_parameters) [3999 4006])
                        ("cls" variable nil (reparse-symbol function_parameters) [4008 4011])
                        ("bases" variable nil (reparse-symbol function_parameters) [4013 4018])
                        ("classdict" variable nil (reparse-symbol function_parameters) [4020 4029]))                      ) (reparse-symbol indented_block_body) [3987 10534])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10552 10556]))                          
                        :documentation "
        classes/types should always be True.
        ")
                        (reparse-symbol indented_block_body) [10539 10648])
                    ("__call__" function
                       (:documentation "Either returns an existing member, or creates a new enum class.

        This method is used both when an enum class is given a value to match
        to an enumeration member (i.e. Color(3)) and for the functional API
        (i.e. Color = Enum('Color', names='RED GREEN BLUE')).

        When used for the functional API:

        `value` will be the name of the new class.

        `names` should be either a string of white-space/comma delimited names
        (values will start at `start`), or an iterator/mapping of name, value pairs.

        `module` should be set to the module this class is being created in;
        if it is not set, an attempt to find that module will be made, but if
        it fails the class will not be picklable.

        `qualname` should be set to the actual location this class can be found
        at in its module; by default it is set to the global scope.  If this is
        not correct, unpickling will fail in some circumstances.

        `type`, if set, will be mixed in as the first base class.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10666 10669])
                            ("value" variable nil (reparse-symbol function_parameters) [10671 10676])
                            ("names" variable nil (reparse-symbol function_parameters) [10678 10683])
                            ("module" variable nil (reparse-symbol function_parameters) [10693 10699])
                            ("qualname" variable nil (reparse-symbol function_parameters) [10706 10714])
                            ("type" variable nil (reparse-symbol function_parameters) [10721 10725])
                            ("start" variable nil (reparse-symbol function_parameters) [10732 10737]))                          )
                        (reparse-symbol indented_block_body) [10653 12066])
                    ("__contains__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [12088 12091])
                        ("member" variable nil (reparse-symbol function_parameters) [12093 12099]))                      ) (reparse-symbol indented_block_body) [12071 12179])
                    ("__delattr__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [12200 12203])
                        ("attr" variable nil (reparse-symbol function_parameters) [12205 12209]))                      ) (reparse-symbol indented_block_body) [12184 12486])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12503 12507]))                          )
                        (reparse-symbol indented_block_body) [12491 12619])
                    ("__getattr__" function
                       (:documentation "Return the enum member matching `name`

        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12640 12643])
                            ("name" variable nil (reparse-symbol function_parameters) [12645 12649]))                          )
                        (reparse-symbol indented_block_body) [12624 13173])
                    ("__getitem__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [13194 13197])
                        ("name" variable nil (reparse-symbol function_parameters) [13199 13203]))                      ) (reparse-symbol indented_block_body) [13178 13244])
                    ("__iter__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [13262 13265]))                      ) (reparse-symbol indented_block_body) [13249 13339])
                    ("__len__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [13356 13359]))                      ) (reparse-symbol indented_block_body) [13344 13401])
                    ("__members__" function
                       (:documentation "Returns a mapping of member name->value.

        This mapping lists all enum members, including aliases. Note that this
        is a read-only view of the internal mapping.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13436 13439]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13406 13690])
                    ("__repr__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [13708 13711]))                      ) (reparse-symbol indented_block_body) [13695 13756])
                    ("__reversed__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [13778 13781]))                      ) (reparse-symbol indented_block_body) [13761 13865])
                    ("__setattr__" function
                       (:documentation "Block attempts to reassign Enum members.

        A simple assignment to the class namespace only changes one of the
        several possible ways to get an Enum member from the Enum class,
        resulting in an inconsistent Enumeration.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13886 13889])
                            ("name" variable nil (reparse-symbol function_parameters) [13891 13895])
                            ("value" variable nil (reparse-symbol function_parameters) [13897 13902]))                          )
                        (reparse-symbol indented_block_body) [13870 14360])
                    ("_create_" function
                       (:documentation "Convenience method to create a new Enum class.

        `names` can be:

        * A string containing member names, separated either with spaces or
          commas.  Values are incremented by 1 from `start`.
        * An iterable of member names.  Values are incremented by 1 from `start`.
        * An iterable of (member name, value) pairs.
        * A mapping of member name -> value pairs.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14378 14381])
                            ("class_name" variable nil (reparse-symbol function_parameters) [14383 14393])
                            ("names" variable nil (reparse-symbol function_parameters) [14395 14400])
                            ("module" variable nil (reparse-symbol function_parameters) [14410 14416])
                            ("qualname" variable nil (reparse-symbol function_parameters) [14423 14431])
                            ("type" variable nil (reparse-symbol function_parameters) [14438 14442])
                            ("start" variable nil (reparse-symbol function_parameters) [14449 14454]))                          )
                        (reparse-symbol indented_block_body) [14365 16529])
                    ("_get_mixins_" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bases" variable nil (reparse-symbol function_parameters) [16569 16574]))                          
                        :documentation "Returns the type for creating enum members, and the first inherited
        enum class.

        bases: the tuple of bases that was given to __new__

        ")
                        (reparse-symbol indented_block_body) [16534 18328])
                    ("_find_new_" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("classdict" variable nil (reparse-symbol function_parameters) [18366 18375])
                            ("member_type" variable nil (reparse-symbol function_parameters) [18377 18388])
                            ("first_enum" variable nil (reparse-symbol function_parameters) [18390 18400]))                          
                        :documentation "Returns the __new__ to be used for creating the enum members.

        classdict: the class dictionary given to __new__
        member_type: the data type whose __new__ will be used by default
        first_enum: enumeration to check for an overriding __new__

        ")
                        (reparse-symbol indented_block_body) [18333 20096]))                  
                :type "class")
                nil [3514 20096])
            ("Enum" type
               (:documentation "Generic enumeration.

    Derive from this class to define new enumerations.

    "
                :superclasses ("EnumMeta")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [20239 20242])
                        ("value" variable nil (reparse-symbol function_parameters) [20244 20249]))                      ) (reparse-symbol indented_block_body) [20227 21098])
                    ("_generate_next_value_" function (:arguments 
                      ( ("name" variable nil (reparse-symbol function_parameters) [21129 21133])
                        ("start" variable nil (reparse-symbol function_parameters) [21135 21140])
                        ("count" variable nil (reparse-symbol function_parameters) [21142 21147])
                        ("last_values" variable nil (reparse-symbol function_parameters) [21149 21160]))                      ) (reparse-symbol indented_block_body) [21103 21357])
                    ("_missing_" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [21393 21396])
                            ("value" variable nil (reparse-symbol function_parameters) [21398 21403]))                          )
                        (reparse-symbol indented_block_body) [21362 21479])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21497 21501]))                          )
                        (reparse-symbol indented_block_body) [21484 21605])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21622 21626]))                          )
                        (reparse-symbol indented_block_body) [21610 21693])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21710 21714]))                          )
                        (reparse-symbol indented_block_body) [21698 22001])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22021 22025])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [22027 22038]))                          )
                        (reparse-symbol indented_block_body) [22006 22490])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22508 22512]))                          )
                        (reparse-symbol indented_block_body) [22495 22548])
                    ("__reduce_ex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22571 22575])
                            ("proto" variable nil (reparse-symbol function_parameters) [22577 22582]))                          )
                        (reparse-symbol indented_block_body) [22553 22633])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("DynamicClassAttribute" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23073 23077]))                          
                        :documentation "The name of the Enum member.")
                        (reparse-symbol indented_block_body) [23037 23150])
                    ("value" function
                       (:parent "dummy"
                        :decorators 
                          ( ("DynamicClassAttribute" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23192 23196]))                          
                        :documentation "The value of the Enum member.")
                        (reparse-symbol indented_block_body) [23155 23271])
                    ("_convert" function
                       (:documentation "
        Create a new Enum subclass that replaces a collection of global constants
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23306 23309])
                            ("name" variable nil (reparse-symbol function_parameters) [23311 23315])
                            ("module" variable nil (reparse-symbol function_parameters) [23317 23323])
                            ("filter" variable nil (reparse-symbol function_parameters) [23325 23331])
                            ("source" variable nil (reparse-symbol function_parameters) [23333 23339]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23276 24812]))                  
                :type "class")
                nil [20098 24812])
            ("IntEnum" type
               (:documentation "Enum where members are also (and must be) ints"
                :superclasses ("int" "Enum")
                :type "class")
                nil [24814 24897])
            ("_reduce_ex_by_name" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [24922 24926])
                    ("proto" variable nil (reparse-symbol function_parameters) [24928 24933]))                  )
                nil [24899 24957])
            ("Flag" type
               (:documentation "Support for flags"
                :superclasses ("Enum")
                :members 
                  ( ("_generate_next_value_" function
                       (:documentation "
        Generate the next value when not given.

        name: the name of the member
        start: the initital start value or None
        count: the number of existing members
        last_value: the last value assigned or None
        "
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [25035 25039])
                            ("start" variable nil (reparse-symbol function_parameters) [25041 25046])
                            ("count" variable nil (reparse-symbol function_parameters) [25048 25053])
                            ("last_values" variable nil (reparse-symbol function_parameters) [25055 25066]))                          )
                        (reparse-symbol indented_block_body) [25009 25681])
                    ("_missing_" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [25717 25720])
                            ("value" variable nil (reparse-symbol function_parameters) [25722 25727]))                          )
                        (reparse-symbol indented_block_body) [25686 25979])
                    ("_create_pseudo_member_" function
                       (:documentation "
        Create a composite member iff value contains only members.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26028 26031])
                            ("value" variable nil (reparse-symbol function_parameters) [26033 26038]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25984 26847])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26869 26873])
                            ("other" variable nil (reparse-symbol function_parameters) [26875 26880]))                          )
                        (reparse-symbol indented_block_body) [26852 27028])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27046 27050]))                          )
                        (reparse-symbol indented_block_body) [27033 27438])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27455 27459]))                          )
                        (reparse-symbol indented_block_body) [27443 27945])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27963 27967]))                          )
                        (reparse-symbol indented_block_body) [27950 28004])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28020 28024])
                            ("other" variable nil (reparse-symbol function_parameters) [28026 28031]))                          )
                        (reparse-symbol indented_block_body) [28009 28178])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28195 28199])
                            ("other" variable nil (reparse-symbol function_parameters) [28201 28206]))                          )
                        (reparse-symbol indented_block_body) [28183 28353])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28370 28374])
                            ("other" variable nil (reparse-symbol function_parameters) [28376 28381]))                          )
                        (reparse-symbol indented_block_body) [28358 28528])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28548 28552]))                          )
                        (reparse-symbol indented_block_body) [28533 28892]))                  
                :type "class")
                nil [24958 28892])
            ("IntFlag" type
               (:documentation "Support for integer-based Flags"
                :superclasses ("int" "Flag")
                :members 
                  ( ("_missing_" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28998 29001])
                            ("value" variable nil (reparse-symbol function_parameters) [29003 29008]))                          )
                        (reparse-symbol indented_block_body) [28967 29208])
                    ("_create_pseudo_member_" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [29257 29260])
                            ("value" variable nil (reparse-symbol function_parameters) [29262 29267]))                          )
                        (reparse-symbol indented_block_body) [29213 30503])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30519 30523])
                            ("other" variable nil (reparse-symbol function_parameters) [30525 30530]))                          )
                        (reparse-symbol indented_block_body) [30508 30724])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30741 30745])
                            ("other" variable nil (reparse-symbol function_parameters) [30747 30752]))                          )
                        (reparse-symbol indented_block_body) [30729 30922])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30939 30943])
                            ("other" variable nil (reparse-symbol function_parameters) [30945 30950]))                          )
                        (reparse-symbol indented_block_body) [30927 31120])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [31125 31141])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [31146 31164])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [31169 31187])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31208 31212]))                          )
                        (reparse-symbol indented_block_body) [31193 31284]))                  
                :type "class")
                nil [28894 31284])
            ("_high_bit" function
               (:documentation "returns index of highest bit, or -1 if value is zero or negative"
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [31300 31305]))                  )
                nil [31286 31417])
            ("unique" function
               (:documentation "Class decorator for enumerations ensuring unique member values."
                :arguments 
                  ( ("enumeration" variable nil (reparse-symbol function_parameters) [31429 31440]))                  )
                nil [31418 31940])
            ("_decompose" function
               (:documentation "Extract all members from the value."
                :arguments 
                  ( ("flag" variable nil (reparse-symbol function_parameters) [31956 31960])
                    ("value" variable nil (reparse-symbol function_parameters) [31962 31967]))                  )
                nil [31941 33355])
            ("_power_of_two" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [33374 33379]))              ) nil [33356 33463]))          
      :file "enum.py"
      :pointmax 33463
      :fsize 33462
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((RAISE 25583 . 25588) (FROM 25638 . 25642) (NEWLINE 25647 . 25648) (RETURN 25359 . 25365) (IF 25372 . 25374) (ELSE 25393 . 25397) (NAME 20109 . 20118) (ASSIGN 20118 . 20119) (INDENT_BLOCK 16269 . 16290) (NEWLINE 16268 . 16269) (COLON 16267 . 16268) (TRY 16144 . 16147) (AS 16261 . 16263) (NAME 14919 . 14924) (IF 14935 . 14937) (ELSE 14951 . 14955) (MULT 14407 . 14408) (COMMA 14408 . 14409) (RAISE 13136 . 13141) (FROM 13163 . 13167) (NEWLINE 13172 . 13173) (MULT 10690 . 10691) (COMMA 10691 . 10692)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("_sre" include nil nil [264 275])
            ("sre_parse" include nil nil [276 292])
            ("sre_constants" include nil nil [293 320])
            ("assert" code nil nil [322 371])
            ("_LITERAL_CODES" variable nil nil [373 412])
            ("_REPEATING_CODES" variable nil nil [413 464])
            ("_SUCCESS_CODES" variable nil nil [465 500])
            ("_ASSERT_CODES" variable nil nil [501 537])
            ("_equivalences" variable nil nil [601 2045])
            ("_ignorecase_fixes" variable nil nil [2123 2232])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [2247 2251])
                ("pattern" variable nil (reparse-symbol function_parameters) [2253 2260])
                ("flags" variable nil (reparse-symbol function_parameters) [2262 2267]))              ) nil [2234 7918])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [7940 7947])
                ("flags" variable nil (reparse-symbol function_parameters) [7949 7954])
                ("code" variable nil (reparse-symbol function_parameters) [7956 7960])
                ("fixup" variable nil (reparse-symbol function_parameters) [7962 7967])
                ("fixes" variable nil (reparse-symbol function_parameters) [7974 7979]))              ) nil [7919 8790])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8813 8820])
                ("fixup" variable nil (reparse-symbol function_parameters) [8822 8827])
                ("fixes" variable nil (reparse-symbol function_parameters) [8829 8834]))              ) nil [8791 13240])
            ("_CODEBITS" code nil nil [13241 13270])
            ("MAXCODE" code nil nil [13271 13301])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [13349 13353])
                ("_CODEBITS" variable nil (reparse-symbol function_parameters) [13355 13364])
                ("_int" variable nil (reparse-symbol function_parameters) [13376 13380]))              ) nil [13334 13521])
            ("_bytes_to_codes" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [13542 13543]))              ) nil [13522 13722])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [13735 13737]))              ) nil [13723 13866])
            ("_generate_overlap_table" function
               (:documentation "
    Generate an overlap table for the following prefix.
    An overlap table is a table of the same size as the prefix which
    informs about the potential self-overlap for each index in the prefix:
    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]
    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with
      prefix[0:k]
    "
                :arguments 
                  ( ("prefix" variable nil (reparse-symbol function_parameters) [13895 13901]))                  )
                nil [13867 14581])
            ("_get_literal_prefix" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [14606 14613]))              ) nil [14582 15456])
            ("_get_charset_prefix" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [15481 15488]))              ) nil [15457 16730])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [16749 16753])
                ("pattern" variable nil (reparse-symbol function_parameters) [16755 16762])
                ("flags" variable nil (reparse-symbol function_parameters) [16764 16769]))              ) nil [16731 18447])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [18461 18464]))              ) nil [18448 18508])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [18519 18520])
                ("flags" variable nil (reparse-symbol function_parameters) [18522 18527]))              ) nil [18509 18745])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [18758 18759])
                ("flags" variable nil (reparse-symbol function_parameters) [18761 18766]))              ) nil [18746 19302]))          
      :file "sre_compile.py"
      :pointmax 19302
      :fsize 19338
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sre_constants" include nil nil [345 372])
            ("SPECIAL_CHARS" variable nil nil [374 405])
            ("REPEAT_CHARS" variable nil nil [406 427])
            ("DIGITS" variable nil nil [429 461])
            ("OCTDIGITS" variable nil nil [463 496])
            ("HEXDIGITS" variable nil nil [497 544])
            ("ASCIILETTERS" variable nil nil [545 625])
            ("WHITESPACE" variable nil nil [627 664])
            ("_REPEATCODES" variable nil nil [666 716])
            ("_UNITCODES" variable nil nil [717 789])
            ("ESCAPES" variable nil nil [791 1067])
            ("CATEGORIES" variable nil nil [1069 1545])
            ("FLAGS" variable nil nil [1547 1814])
            ("GLOBAL_FLAGS" variable nil nil [1816 1937])
            ("Verbose" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1969 1973]))                  
                :type "class")
                nil [1939 1974])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2085 2099])
                            ("self" variable nil (reparse-symbol indented_block_body) [2108 2127])
                            ("self" variable nil (reparse-symbol indented_block_body) [2136 2161])
                            ("self" variable nil (reparse-symbol indented_block_body) [2181 2209]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2070 2074]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2057 2210])
                    ("groups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2239 2243]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2214 2283])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2301 2305])
                            ("name" variable nil (reparse-symbol function_parameters) [2307 2311]))                          )
                        (reparse-symbol indented_block_body) [2287 2771])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2790 2794])
                            ("gid" variable nil (reparse-symbol function_parameters) [2796 2799])
                            ("p" variable nil (reparse-symbol function_parameters) [2801 2802]))                          )
                        (reparse-symbol indented_block_body) [2775 2850])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2869 2873])
                            ("gid" variable nil (reparse-symbol function_parameters) [2875 2878]))                          )
                        (reparse-symbol indented_block_body) [2854 2952])
                    ("checklookbehindgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2982 2986])
                            ("gid" variable nil (reparse-symbol function_parameters) [2988 2991])
                            ("source" variable nil (reparse-symbol function_parameters) [2993 2999]))                          )
                        (reparse-symbol indented_block_body) [2957 3342]))                  
                :type "class")
                nil [1975 3342])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3454 3476])
                            ("if" code nil (reparse-symbol indented_block_body) [3485 3524])
                            ("self" variable nil (reparse-symbol indented_block_body) [3532 3548])
                            ("self" variable nil (reparse-symbol indented_block_body) [3557 3574]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3419 3423])
                            ("pattern" variable nil (reparse-symbol function_parameters) [3425 3432])
                            ("data" variable nil (reparse-symbol function_parameters) [3434 3438]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3406 3575])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3588 3592])
                            ("level" variable nil (reparse-symbol function_parameters) [3594 3599]))                          )
                        (reparse-symbol indented_block_body) [3579 4986])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5003 5007]))                          )
                        (reparse-symbol indented_block_body) [4990 5041])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5057 5061]))                          )
                        (reparse-symbol indented_block_body) [5045 5094])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5114 5118])
                            ("index" variable nil (reparse-symbol function_parameters) [5120 5125]))                          )
                        (reparse-symbol indented_block_body) [5098 5157])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5177 5181])
                            ("index" variable nil (reparse-symbol function_parameters) [5183 5188]))                          )
                        (reparse-symbol indented_block_body) [5161 5322])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5342 5346])
                            ("index" variable nil (reparse-symbol function_parameters) [5348 5353])
                            ("code" variable nil (reparse-symbol function_parameters) [5355 5359]))                          )
                        (reparse-symbol indented_block_body) [5326 5394])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5409 5413])
                            ("index" variable nil (reparse-symbol function_parameters) [5415 5420])
                            ("code" variable nil (reparse-symbol function_parameters) [5422 5426]))                          )
                        (reparse-symbol indented_block_body) [5398 5467])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5482 5486])
                            ("code" variable nil (reparse-symbol function_parameters) [5488 5492]))                          )
                        (reparse-symbol indented_block_body) [5471 5526])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5543 5547]))                          )
                        (reparse-symbol indented_block_body) [5530 7125]))                  
                :type "class")
                nil [3343 7125])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7183 7220])
                            ("self" variable nil (reparse-symbol indented_block_body) [7229 7249])
                            ("if" code nil (reparse-symbol indented_block_body) [7258 7321])
                            ("self" variable nil (reparse-symbol indented_block_body) [7329 7357])
                            ("self" variable nil (reparse-symbol indented_block_body) [7366 7380])
                            ("self" variable nil (reparse-symbol indented_block_body) [7389 7405])
                            ("self" code nil (reparse-symbol indented_block_body) [7414 7427]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7160 7164])
                            ("string" variable nil (reparse-symbol function_parameters) [7166 7172]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7147 7428])
                    ("subpattern" code nil (reparse-symbol indented_block_body) [29565 29575]))                  
                :type "class")
                nil [7126 29576])
            ("_parse_flags" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [29594 29600])
                ("state" variable nil (reparse-symbol function_parameters) [29602 29607])
                ("char" variable nil (reparse-symbol function_parameters) [29609 29613]))              ) nil [29577 31183])
            ("fix_flags" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [31198 31201])
                ("flags" variable nil (reparse-symbol function_parameters) [31203 31208]))              ) nil [31184 31889])
            ("parse" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [31900 31903])
                ("flags" variable nil (reparse-symbol function_parameters) [31905 31910])
                ("pattern" variable nil (reparse-symbol function_parameters) [31914 31921]))              ) nil [31890 32770])
            ("parse_template" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [32790 32796])
                ("pattern" variable nil (reparse-symbol function_parameters) [32798 32805]))              ) nil [32771 36537]))          
      :file "sre_parse.py"
      :pointmax 36537
      :fsize 36536
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 30805 . 30808) (IF 30826 . 30828) (ELSE 30844 . 30848) (NAME 30434 . 30437) (IF 30455 . 30457) (ELSE 30473 . 30477) (NAME 29974 . 29977) (IF 29995 . 29997) (ELSE 30013 . 30017)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("__all__" variable nil nil [446 648])
            ("try" code nil nil [650 718])
            ("abc" include nil nil [718 749])
            ("collections" include nil nil [750 784])
            ("types" include nil nil [785 819])
            ("weakref" include nil nil [820 857])
            ("reprlib" include nil nil [858 892])
            ("try" code nil nil [893 1115])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [1435 1552])
            ("WRAPPER_UPDATES" variable nil nil [1553 1584])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [1604 1611])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [1632 1639])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1660 1668])
                    ("updated" variable nil (reparse-symbol function_parameters) [1711 1718]))                  )
                nil [1585 2802])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [2813 2820])
                    ("assigned" variable nil (reparse-symbol function_parameters) [2832 2840])
                    ("updated" variable nil (reparse-symbol function_parameters) [2874 2881]))                  )
                nil [2803 3415])
            ("_gt_from_lt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [3915 3919])
                    ("other" variable nil (reparse-symbol function_parameters) [3921 3926])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [3928 3942]))                  )
                nil [3899 4179])
            ("_le_from_lt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4196 4200])
                    ("other" variable nil (reparse-symbol function_parameters) [4202 4207])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4209 4223]))                  )
                nil [4180 4390])
            ("_ge_from_lt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4407 4411])
                    ("other" variable nil (reparse-symbol function_parameters) [4413 4418])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4420 4434]))                  )
                nil [4391 4641])
            ("_ge_from_le" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4658 4662])
                    ("other" variable nil (reparse-symbol function_parameters) [4664 4669])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4671 4685]))                  )
                nil [4642 4922])
            ("_lt_from_le" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [4939 4943])
                    ("other" variable nil (reparse-symbol function_parameters) [4945 4950])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [4952 4966]))                  )
                nil [4923 5196])
            ("_gt_from_le" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5213 5217])
                    ("other" variable nil (reparse-symbol function_parameters) [5219 5224])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5226 5240]))                  )
                nil [5197 5447])
            ("_lt_from_gt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5464 5468])
                    ("other" variable nil (reparse-symbol function_parameters) [5470 5475])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5477 5491]))                  )
                nil [5448 5728])
            ("_ge_from_gt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5745 5749])
                    ("other" variable nil (reparse-symbol function_parameters) [5751 5756])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5758 5772]))                  )
                nil [5729 5939])
            ("_le_from_gt" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [5956 5960])
                    ("other" variable nil (reparse-symbol function_parameters) [5962 5967])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [5969 5983]))                  )
                nil [5940 6190])
            ("_le_from_ge" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [6207 6211])
                    ("other" variable nil (reparse-symbol function_parameters) [6213 6218])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6220 6234]))                  )
                nil [6191 6471])
            ("_gt_from_ge" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [6488 6492])
                    ("other" variable nil (reparse-symbol function_parameters) [6494 6499])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6501 6515]))                  )
                nil [6472 6745])
            ("_lt_from_ge" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [6762 6766])
                    ("other" variable nil (reparse-symbol function_parameters) [6768 6773])
                    ("NotImplemented" variable nil (reparse-symbol function_parameters) [6775 6789]))                  )
                nil [6746 6996])
            ("_convert" variable nil nil [6997 7494])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [7515 7518]))                  )
                nil [7496 8094])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [8310 8315]))                  )
                nil [8295 8937])
            ("try" code nil nil [8938 9010])
            ("partial" type
               (:documentation "New function with partial application of the given arguments
    and keywords.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9369 9434])
                    ("__new__" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [9452 9457])
                        ("keywords" variable nil (reparse-symbol function_parameters) [9459 9469]))                      ) (reparse-symbol indented_block_body) [9440 10211])
                    ("__call__" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [10229 10234])
                        ("keywords" variable nil (reparse-symbol function_parameters) [10236 10246]))                      ) (reparse-symbol indented_block_body) [10216 10518])
                    ("" code nil (reparse-symbol indented_block_body) [10538 10540])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10558 10562]))                          )
                        (reparse-symbol indented_block_body) [10545 10918])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10938 10942]))                          )
                        (reparse-symbol indented_block_body) [10923 11070])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11092 11096])
                            ("state" variable nil (reparse-symbol function_parameters) [11098 11103]))                          )
                        (reparse-symbol indented_block_body) [11075 12007]))                  
                :type "class")
                nil [9255 12007])
            ("try" code nil nil [12008 12077])
            ("partialmethod" type
               (:documentation "Method descriptor with partial application of the given arguments
    and keywords.

    Supports wrapping existing descriptors and handles non-descriptor
    callables as instance methods.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [12391 12562])
                            ("if" code nil (reparse-symbol indented_block_body) [12721 13217]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12351 12355])
                            ("func" variable nil (reparse-symbol function_parameters) [12357 12361])
                            ("args" variable nil (reparse-symbol function_parameters) [12363 12368])
                            ("keywords" variable nil (reparse-symbol function_parameters) [12370 12380]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12338 13217])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13235 13239]))                          )
                        (reparse-symbol indented_block_body) [13222 13771])
                    ("_make_unbound_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13801 13805]))                          )
                        (reparse-symbol indented_block_body) [13776 14227])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14244 14248])
                            ("obj" variable nil (reparse-symbol function_parameters) [14250 14253])
                            ("cls" variable nil (reparse-symbol function_parameters) [14255 14258]))                          )
                        (reparse-symbol indented_block_body) [14232 15006])
                    ("__isabstractmethod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15050 15054]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15011 15122]))                  
                :type "class")
                nil [12099 15122])
            ("_CacheInfo" variable nil nil [15320 15399])
            ("_HashedSeq" type
               (:documentation " This class guarantees that hash() will be called no more than once
        per element.  This is important because the lru_cache() will hash
        the key multiple times on a cache miss.

    "
                :superclasses ("list")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15636 15659])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15709 15722])
                            ("self" variable nil (reparse-symbol indented_block_body) [15731 15757]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15678 15682])
                            ("tup" variable nil (reparse-symbol function_parameters) [15684 15687])
                            ("hash" variable nil (reparse-symbol function_parameters) [15689 15693]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15665 15758])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15776 15780]))                          )
                        (reparse-symbol indented_block_body) [15763 15813]))                  
                :type "class")
                nil [15401 15813])
            ("_make_key" function
               (:documentation "Make a cache key from optionally typed positional and keyword arguments

    The key is constructed in a way that is flat as possible rather than
    as a nested structure that would take more memory.

    If there is only a single argument and its data type is known to cache
    its hash value, then that argument is returned without a wrapper.  This
    saves space and improves lookup speed.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [15828 15832])
                    ("kwds" variable nil (reparse-symbol function_parameters) [15834 15838])
                    ("typed" variable nil (reparse-symbol function_parameters) [15840 15845])
                    ("kwd_mark" variable nil (reparse-symbol function_parameters) [15860 15868])
                    ("fasttypes" variable nil (reparse-symbol function_parameters) [15897 15906])
                    ("tuple" variable nil (reparse-symbol function_parameters) [15957 15962])
                    ("type" variable nil (reparse-symbol function_parameters) [15970 15974])
                    ("len" variable nil (reparse-symbol function_parameters) [15981 15984]))                  )
                nil [15814 16748])
            ("lru_cache" function
               (:documentation "Least-recently-used cache decorator.

    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.

    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.

    Arguments to the cached function must be hashable.

    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.

    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used

    "
                :arguments 
                  ( ("maxsize" variable nil (reparse-symbol function_parameters) [16763 16770])
                    ("typed" variable nil (reparse-symbol function_parameters) [16776 16781]))                  )
                nil [16749 18267])
            ("_lru_cache_wrapper" function (:arguments 
              ( ("user_function" variable nil (reparse-symbol function_parameters) [18291 18304])
                ("maxsize" variable nil (reparse-symbol function_parameters) [18306 18313])
                ("typed" variable nil (reparse-symbol function_parameters) [18315 18320])
                ("_CacheInfo" variable nil (reparse-symbol function_parameters) [18322 18332]))              ) nil [18268 23117])
            ("try" code nil nil [23118 23198])
            ("_c3_merge" function
               (:documentation "Merges MROs in *sequences* to a single MRO using the C3 algorithm.

    Adapted from http://www.python.org/download/releases/2.3/mro/.

    "
                :arguments 
                  ( ("sequences" variable nil (reparse-symbol function_parameters) [23443 23452]))                  )
                nil [23429 24341])
            ("_c3_mro" function
               (:documentation "Computes the method resolution order using extended C3 linearization.

    If no *abcs* are given, the algorithm works exactly like the built-in C3
    linearization used for method resolution.

    If given, *abcs* is a list of abstract base classes that should be inserted
    into the resulting MRO. Unrelated ABCs are ignored and don't end up in the
    result. The algorithm inserts ABCs where their functionality is introduced,
    i.e. issubclass(cls, abc) returns True for the class itself but returns
    False for all its direct base classes. Implicit ABCs for a given class
    (either registered or inferred from the presence of a special method like
    __len__) are inserted directly after the last ABC explicitly listed in the
    MRO of said class. If two implicit ABCs end up next to each other in the
    resulting MRO, their ordering depends on the order of types in *abcs*.

    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [24354 24357])
                    ("abcs" variable nil (reparse-symbol function_parameters) [24359 24363]))                  )
                nil [24342 26468])
            ("_compose_mro" function
               (:documentation "Calculates the method resolution order for a given class *cls*.

    Includes relevant abstract base classes (with their respective bases) from
    the *types* iterable. Uses a modified C3 linearization algorithm.

    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [26486 26489])
                    ("types" variable nil (reparse-symbol function_parameters) [26491 26496]))                  )
                nil [26469 28067])
            ("_find_impl" function
               (:documentation "Returns the best matching implementation from *registry* for type *cls*.

    Where there is no registered implementation for a specific type, its method
    resolution order is used to find a more generic implementation.

    Note: if *registry* does not contain an implementation for the base
    *object* type, this function may return None.

    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [28083 28086])
                    ("registry" variable nil (reparse-symbol function_parameters) [28088 28096]))                  )
                nil [28068 29100])
            ("singledispatch" function
               (:documentation "Single-dispatch generic function decorator.

    Transforms a function into a generic function, which can have different
    behaviours depending upon the type of its first argument. The decorated
    function acts as the default implementation, and additional
    implementations can be registered using the register() attribute of the
    generic function.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [29120 29124]))                  )
                nil [29101 31142]))          
      :file "functools.py"
      :pointmax 31142
      :fsize 31142
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 25544 . 25548) (IF 25562 . 25564) (ELSE 25570 . 25574) (NAME 13952 . 13963) (MULT 13965 . 13966) (NAME 10360 . 10364) (MULT 10366 . 10367) (NAME 9682 . 9685) (MULT 9693 . 9694)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 171])
            ("__all__" variable nil nil [173 281])
            ("dispatch_table" variable nil nil [283 302])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [315 322])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [324 339])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [341 355]))              ) nil [304 714])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [731 737]))              ) nil [715 826])
            ("try" code nil nil [885 1050])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1112 1115])
                ("base" variable nil (reparse-symbol function_parameters) [1117 1121])
                ("state" variable nil (reparse-symbol function_parameters) [1123 1128]))              ) nil [1093 1335])
            ("_HEAPTYPE" code nil nil [1336 1352])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1431 1435])
                    ("proto" variable nil (reparse-symbol function_parameters) [1437 1442]))                  )
                nil [1416 2378])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2433 2436])
                ("args" variable nil (reparse-symbol function_parameters) [2438 2443]))              ) nil [2418 2481])
            ("__newobj_ex__" function
               (:documentation "Used by pickle protocol 4, instead of __newobj__ to allow classes with
    keyword-only arguments to be pickled correctly.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2500 2503])
                    ("args" variable nil (reparse-symbol function_parameters) [2505 2509])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [2511 2517]))                  )
                nil [2482 2703])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2719 2722]))                  )
                nil [2704 4378])
            ("_extension_registry" variable nil nil [4860 4884])
            ("_inverted_registry" variable nil nil [4914 4937])
            ("_extension_cache" variable nil nil [4968 4989])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5165 5171])
                    ("name" variable nil (reparse-symbol function_parameters) [5173 5177])
                    ("code" variable nil (reparse-symbol function_parameters) [5179 5183]))                  )
                nil [5147 5894])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5916 5922])
                    ("name" variable nil (reparse-symbol function_parameters) [5924 5928])
                    ("code" variable nil (reparse-symbol function_parameters) [5930 5934]))                  )
                nil [5895 6354])
            ("clear_extension_cache" function nil nil [6355 6413]))          
      :file "copyreg.py"
      :pointmax 6834
      :fsize 6833
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("_weakrefset" include nil nil [161 192])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [214 221]))                  )
                nil [195 772])
            ("abstractclassmethod" type
               (:documentation "
    A decorator indicating abstract classmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractclassmethod
            def my_abstract_classmethod(cls, ...):
                ...

    'abstractclassmethod' is deprecated. Use 'classmethod' with
    'abstractmethod' instead.
    "
                :superclasses ("classmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1165 1192])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1236 1272])
                            ("super" code nil (reparse-symbol indented_block_body) [1281 1307]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1211 1215])
                            ("callable" variable nil (reparse-symbol function_parameters) [1217 1225]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1198 1308]))                  
                :type "class")
                nil [774 1308])
            ("abstractstaticmethod" type
               (:documentation "
    A decorator indicating abstract staticmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractstaticmethod
            def my_abstract_staticmethod(...):
                ...

    'abstractstaticmethod' is deprecated. Use 'staticmethod' with
    'abstractmethod' instead.
    "
                :superclasses ("staticmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1703 1730])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1774 1810])
                            ("super" code nil (reparse-symbol indented_block_body) [1819 1845]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1749 1753])
                            ("callable" variable nil (reparse-symbol function_parameters) [1755 1763]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1736 1846]))                  
                :type "class")
                nil [1310 1846])
            ("abstractproperty" type
               (:documentation "
    A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C(metaclass=ABCMeta):
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)

    'abstractproperty' is deprecated. Use 'property' with 'abstractmethod'
    instead.
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [2773 2800]))                  
                :type "class")
                nil [1848 2801])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [3741 3770])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [3788 3792])
                        ("name" variable nil (reparse-symbol function_parameters) [3794 3798])
                        ("bases" variable nil (reparse-symbol function_parameters) [3800 3805])
                        ("namespace" variable nil (reparse-symbol function_parameters) [3807 3816])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [3818 3826]))                      ) (reparse-symbol indented_block_body) [3776 4657])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC.

        Returns the subclass, to allow usage as a class decorator.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4675 4678])
                            ("subclass" variable nil (reparse-symbol function_parameters) [4680 4688]))                          )
                        (reparse-symbol indented_block_body) [4662 5488])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5512 5515])
                            ("file" variable nil (reparse-symbol function_parameters) [5517 5521]))                          )
                        (reparse-symbol indented_block_body) [5493 5933])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5960 5963])
                            ("instance" variable nil (reparse-symbol function_parameters) [5965 5973]))                          )
                        (reparse-symbol indented_block_body) [5938 6592])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6619 6622])
                            ("subclass" variable nil (reparse-symbol function_parameters) [6624 6632]))                          )
                        (reparse-symbol indented_block_body) [6597 8179]))                  
                :type "class")
                nil [2803 8179])
            ("ABC" type
               (:documentation "Helper class that provides a standard way to create an ABC using
    inheritance.
    "
                :superclasses ("ABCMeta")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [8312 8316]))                  
                :type "class")
                nil [8181 8317])
            ("get_cache_token" function (:documentation "Returns the current ABC cache token.

    The token is an opaque object (supporting equality testing) identifying the
    current version of the ABC cache for virtual subclasses. The token changes
    with every call to ``register()`` on any ABC.
    ") nil [8319 8649]))          
      :file "abc.py"
      :pointmax 8649
      :fsize 8648
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 8191 . 8200) (ASSIGN 8200 . 8201)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Define names for built-in types that aren't directly accessible as a builtin.
\"\"\"" code nil nil [1 86])
            ("sys" include nil nil [87 97])
            ("_f" function nil nil [352 367])
            ("FunctionType" variable nil nil [367 390])
            ("LambdaType" variable nil nil [391 422])
            ("CodeType" variable nil nil [454 482])
            ("MappingProxyType" variable nil nil [483 521])
            ("SimpleNamespace" variable nil nil [522 564])
            ("_g" function nil nil [566 588])
            ("GeneratorType" variable nil nil [588 614])
            ("_c" function nil nil [622 637])
            ("_c" variable nil nil [637 646])
            ("CoroutineType" variable nil nil [647 671])
            ("_c" code nil nil [672 682])
            ("_ag" function nil nil [717 738])
            ("_ag" variable nil nil [738 749])
            ("AsyncGeneratorType" variable nil nil [750 780])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [803 807]))                          )
                        (reparse-symbol indented_block_body) [796 815]))                  
                :type "class")
                nil [782 815])
            ("MethodType" variable nil nil [815 841])
            ("BuiltinFunctionType" variable nil nil [843 874])
            ("BuiltinMethodType" variable nil nil [875 910])
            ("ModuleType" variable nil nil [946 968])
            ("try" code nil nil [970 1125])
            ("GetSetDescriptorType" variable nil nil [1178 1228])
            ("MemberDescriptorType" variable nil nil [1229 1282])
            ("del" code nil nil [1284 1308])
            ("new_class" function
               (:documentation "Create a class object dynamically using the appropriate metaclass."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1428 1432])
                    ("bases" variable nil (reparse-symbol function_parameters) [1434 1439])
                    ("kwds" variable nil (reparse-symbol function_parameters) [1444 1448])
                    ("exec_body" variable nil (reparse-symbol function_parameters) [1455 1464]))                  )
                nil [1414 1696])
            ("prepare_class" function
               (:documentation "Call the __prepare__ method of the appropriate metaclass.

    Returns (metaclass, namespace, kwds) as a 3-tuple

    *metaclass* is the appropriate metaclass
    *namespace* is the prepared class namespace
    *kwds* is an updated copy of the passed in kwds argument with any
    'metaclass' entry removed. If no kwds argument is passed in, this will
    be an empty dict.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1715 1719])
                    ("bases" variable nil (reparse-symbol function_parameters) [1721 1726])
                    ("kwds" variable nil (reparse-symbol function_parameters) [1731 1735]))                  )
                nil [1697 2760])
            ("_calculate_meta" function
               (:documentation "Calculate the most derived metaclass."
                :arguments 
                  ( ("meta" variable nil (reparse-symbol function_parameters) [2781 2785])
                    ("bases" variable nil (reparse-symbol function_parameters) [2787 2792]))                  )
                nil [2761 3335])
            ("DynamicClassAttribute" type
               (:documentation "Route attribute access on a class to __getattr__.

    This is a descriptor, used to define attributes that act differently when
    accessed through an instance and through a class.  Instance access remains
    normal, but access to an attribute through a class will be routed to the
    class's __getattr__ method; this is done by raising AttributeError.

    This allows one to have properties active on an instance, and have virtual
    attributes on the class with the same name (see Enum for an example).

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3967 3983])
                            ("self" variable nil (reparse-symbol indented_block_body) [3992 4008])
                            ("self" variable nil (reparse-symbol indented_block_body) [4017 4033])
                            ("self" code nil (reparse-symbol indented_block_body) [4119 4153])
                            ("self" code nil (reparse-symbol indented_block_body) [4162 4194])
                            ("self" variable nil (reparse-symbol indented_block_body) [4242 4320]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3909 3913])
                            ("fget" variable nil (reparse-symbol function_parameters) [3915 3919])
                            ("fset" variable nil (reparse-symbol function_parameters) [3926 3930])
                            ("fdel" variable nil (reparse-symbol function_parameters) [3937 3941])
                            ("doc" variable nil (reparse-symbol function_parameters) [3948 3951]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3896 4321])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4338 4342])
                            ("instance" variable nil (reparse-symbol function_parameters) [4344 4352])
                            ("ownerclass" variable nil (reparse-symbol function_parameters) [4354 4364]))                          )
                        (reparse-symbol indented_block_body) [4326 4630])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4647 4651])
                            ("instance" variable nil (reparse-symbol function_parameters) [4653 4661])
                            ("value" variable nil (reparse-symbol function_parameters) [4663 4668]))                          )
                        (reparse-symbol indented_block_body) [4635 4792])
                    ("__delete__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4812 4816])
                            ("instance" variable nil (reparse-symbol function_parameters) [4818 4826]))                          )
                        (reparse-symbol indented_block_body) [4797 4946])
                    ("getter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4962 4966])
                            ("fget" variable nil (reparse-symbol function_parameters) [4968 4972]))                          )
                        (reparse-symbol indented_block_body) [4951 5185])
                    ("setter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5201 5205])
                            ("fset" variable nil (reparse-symbol function_parameters) [5207 5211]))                          )
                        (reparse-symbol indented_block_body) [5190 5356])
                    ("deleter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5373 5377])
                            ("fdel" variable nil (reparse-symbol function_parameters) [5379 5383]))                          )
                        (reparse-symbol indented_block_body) [5361 5528]))                  
                :type "class")
                nil [3336 5528])
            ("functools" include nil nil [5530 5560])
            ("collections.abc" include nil nil [5561 5603])
            ("_GeneratorWrapper" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5700 5720])
                            ("self" code nil (reparse-symbol indented_block_body) [5729 5774])
                            ("self" variable nil (reparse-symbol indented_block_body) [5783 5829])
                            ("self" variable nil (reparse-symbol indented_block_body) [5838 5892]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5680 5684])
                            ("gen" variable nil (reparse-symbol function_parameters) [5686 5689]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5667 5893])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5906 5910])
                            ("val" variable nil (reparse-symbol function_parameters) [5912 5915]))                          )
                        (reparse-symbol indented_block_body) [5897 5958])
                    ("throw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5972 5976])
                            ("tp" variable nil (reparse-symbol function_parameters) [5978 5980])
                            ("rest" variable nil (reparse-symbol function_parameters) [5982 5987]))                          )
                        (reparse-symbol indented_block_body) [5962 6037])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6051 6055]))                          )
                        (reparse-symbol indented_block_body) [6041 6096])
                    ("gi_code" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6126 6130]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6100 6171])
                    ("gi_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6202 6206]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6175 6248])
                    ("gi_running" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6281 6285]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6252 6329])
                    ("gi_yieldfrom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6364 6368]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6333 6414])
                    ("cr_code" variable nil (reparse-symbol indented_block_body) [6418 6435])
                    ("cr_frame" variable nil (reparse-symbol indented_block_body) [6440 6459])
                    ("cr_running" variable nil (reparse-symbol indented_block_body) [6464 6487])
                    ("cr_await" variable nil (reparse-symbol indented_block_body) [6492 6515])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6533 6537]))                          )
                        (reparse-symbol indented_block_body) [6520 6576])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6593 6597]))                          )
                        (reparse-symbol indented_block_body) [6580 6679])
                    ("__await__" variable nil (reparse-symbol indented_block_body) [6683 6703]))                  
                :type "class")
                nil [5605 6704])
            ("coroutine" function
               (:documentation "Convert regular generator function to a coroutine."
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [6719 6723]))                  )
                nil [6705 8820])
            ("__all__" variable nil nil [8822 8870]))          
      :file "types.py"
      :pointmax 8871
      :fsize 8870
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 4983 . 4987) (IF 5003 . 5005) (ELSE 5025 . 5029)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Operator Interface

This module exports a set of functions corresponding to the intrinsic
operators of Python.  For example, operator.add(x, y) is equivalent
to the expression x+y.  The function names are those used for special
methods; variants without leading and trailing '__' are also provided
for convenience.

This is the pure Python implementation of the module.
\"\"\"" code nil nil [1 378])
            ("__all__" variable nil nil [380 962])
            ("builtins" include nil nil [964 996])
            ("lt" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1088 1089])
                ("b" variable nil (reparse-symbol function_parameters) [1091 1092]))              ) nil [1081 1133])
            ("le" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1141 1142])
                ("b" variable nil (reparse-symbol function_parameters) [1144 1145]))              ) nil [1134 1188])
            ("eq" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1196 1197])
                ("b" variable nil (reparse-symbol function_parameters) [1199 1200]))              ) nil [1189 1243])
            ("ne" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1251 1252])
                ("b" variable nil (reparse-symbol function_parameters) [1254 1255]))              ) nil [1244 1298])
            ("ge" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1306 1307])
                ("b" variable nil (reparse-symbol function_parameters) [1309 1310]))              ) nil [1299 1353])
            ("gt" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1361 1362])
                ("b" variable nil (reparse-symbol function_parameters) [1364 1365]))              ) nil [1354 1406])
            ("not_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1498 1499]))              ) nil [1489 1540])
            ("truth" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1551 1552]))              ) nil [1541 1636])
            ("is_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1645 1646])
                ("b" variable nil (reparse-symbol function_parameters) [1648 1649]))              ) nil [1637 1692])
            ("is_not" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1704 1705])
                ("b" variable nil (reparse-symbol function_parameters) [1707 1708]))              ) nil [1693 1759])
            ("abs" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1850 1851]))              ) nil [1842 1895])
            ("add" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1904 1905])
                ("b" variable nil (reparse-symbol function_parameters) [1907 1908]))              ) nil [1896 1949])
            ("and_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [1959 1960])
                ("b" variable nil (reparse-symbol function_parameters) [1962 1963]))              ) nil [1950 2004])
            ("floordiv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2018 2019])
                ("b" variable nil (reparse-symbol function_parameters) [2021 2022]))              ) nil [2005 2065])
            ("index" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2076 2077]))              ) nil [2066 2134])
            ("inv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2143 2144]))              ) nil [2135 2179])
            ("invert" variable nil nil [2179 2191])
            ("lshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2204 2205])
                ("b" variable nil (reparse-symbol function_parameters) [2207 2208]))              ) nil [2193 2251])
            ("mod" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2260 2261])
                ("b" variable nil (reparse-symbol function_parameters) [2263 2264]))              ) nil [2252 2305])
            ("mul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2314 2315])
                ("b" variable nil (reparse-symbol function_parameters) [2317 2318]))              ) nil [2306 2359])
            ("matmul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2371 2372])
                ("b" variable nil (reparse-symbol function_parameters) [2374 2375]))              ) nil [2360 2416])
            ("neg" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2425 2426]))              ) nil [2417 2461])
            ("or_" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2470 2471])
                ("b" variable nil (reparse-symbol function_parameters) [2473 2474]))              ) nil [2462 2515])
            ("pos" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2524 2525]))              ) nil [2516 2560])
            ("pow" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2569 2570])
                ("b" variable nil (reparse-symbol function_parameters) [2572 2573]))              ) nil [2561 2616])
            ("rshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2628 2629])
                ("b" variable nil (reparse-symbol function_parameters) [2631 2632]))              ) nil [2617 2675])
            ("sub" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2684 2685])
                ("b" variable nil (reparse-symbol function_parameters) [2687 2688]))              ) nil [2676 2729])
            ("truediv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2742 2743])
                ("b" variable nil (reparse-symbol function_parameters) [2745 2746]))              ) nil [2730 2787])
            ("xor" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2796 2797])
                ("b" variable nil (reparse-symbol function_parameters) [2799 2800]))              ) nil [2788 2841])
            ("concat" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2935 2936])
                ("b" variable nil (reparse-symbol function_parameters) [2938 2939]))              ) nil [2924 3139])
            ("contains" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3153 3154])
                ("b" variable nil (reparse-symbol function_parameters) [3156 3157]))              ) nil [3140 3225])
            ("countOf" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3238 3239])
                ("b" variable nil (reparse-symbol function_parameters) [3241 3242]))              ) nil [3226 3382])
            ("delitem" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3395 3396])
                ("b" variable nil (reparse-symbol function_parameters) [3398 3399]))              ) nil [3383 3439])
            ("getitem" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3452 3453])
                ("b" variable nil (reparse-symbol function_parameters) [3455 3456]))              ) nil [3440 3495])
            ("indexOf" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3508 3509])
                ("b" variable nil (reparse-symbol function_parameters) [3511 3512]))              ) nil [3496 3700])
            ("setitem" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3713 3714])
                ("b" variable nil (reparse-symbol function_parameters) [3716 3717])
                ("c" variable nil (reparse-symbol function_parameters) [3719 3720]))              ) nil [3701 3760])
            ("length_hint" function
               (:documentation "
    Return an estimate of the number of items in obj.
    This is useful for presizing containers when building from an iterable.

    If the object supports len(), the result will be exact. Otherwise, it may
    over- or under-estimate by an arbitrary amount. The result will be an
    integer >= 0.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [3777 3780])
                    ("default" variable nil (reparse-symbol function_parameters) [3782 3789]))                  )
                nil [3761 4855])
            ("attrgetter" type
               (:documentation "
    Return a callable object that fetches the given attribute(s) from its operand.
    After f = attrgetter('name'), the call f(r) returns r.name.
    After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
    After h = attrgetter('name.first', 'name.last'), the call h(r) returns
    (r.name.first, r.name.last).
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5313 5344])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5392 5984]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5363 5367])
                            ("attr" variable nil (reparse-symbol function_parameters) [5369 5373])
                            ("attrs" variable nil (reparse-symbol function_parameters) [5375 5381]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5350 5984])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6002 6006])
                            ("obj" variable nil (reparse-symbol function_parameters) [6008 6011]))                          )
                        (reparse-symbol indented_block_body) [5989 6045])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6063 6067]))                          )
                        (reparse-symbol indented_block_body) [6050 6251])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6271 6275]))                          )
                        (reparse-symbol indented_block_body) [6256 6321]))                  
                :type "class")
                nil [4938 6321])
            ("itemgetter" type
               (:documentation "
    Return a callable object that fetches the given item(s) from its operand.
    After f = itemgetter(2), the call f(r) returns r[2].
    After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6571 6602])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6650 6961]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6621 6625])
                            ("item" variable nil (reparse-symbol function_parameters) [6627 6631])
                            ("items" variable nil (reparse-symbol function_parameters) [6633 6639]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6608 6961])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6979 6983])
                            ("obj" variable nil (reparse-symbol function_parameters) [6985 6988]))                          )
                        (reparse-symbol indented_block_body) [6966 7022])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7040 7044]))                          )
                        (reparse-symbol indented_block_body) [7027 7224])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7244 7248]))                          )
                        (reparse-symbol indented_block_body) [7229 7294]))                  
                :type "class")
                nil [6322 7294])
            ("methodcaller" type
               (:documentation "
    Return a callable object that calls the given method on its operand.
    After f = methodcaller('name'), the call f(r) returns r.name().
    After g = methodcaller('name', 'date', foo=1), the call g(r) returns
    r.name('date', foo=1).
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7576 7617])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7662 7791])
                            ("self" variable nil (reparse-symbol indented_block_body) [7799 7813])
                            ("self" variable nil (reparse-symbol indented_block_body) [7822 7842])
                            ("if" code nil (reparse-symbol indented_block_body) [7851 7947])
                            ("self" variable nil (reparse-symbol indented_block_body) [7955 7976])
                            ("self" variable nil (reparse-symbol indented_block_body) [7985 8006]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [7636 7641])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7643 7651]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7623 8007])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8025 8029])
                            ("obj" variable nil (reparse-symbol function_parameters) [8031 8034]))                          )
                        (reparse-symbol indented_block_body) [8012 8106])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8124 8128]))                          )
                        (reparse-symbol indented_block_body) [8111 8438])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8458 8462]))                          )
                        (reparse-symbol indented_block_body) [8443 8695]))                  
                :type "class")
                nil [7295 8695])
            ("iadd" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [8788 8789])
                ("b" variable nil (reparse-symbol function_parameters) [8791 8792]))              ) nil [8779 8841])
            ("iand" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [8851 8852])
                ("b" variable nil (reparse-symbol function_parameters) [8854 8855]))              ) nil [8842 8904])
            ("iconcat" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [8917 8918])
                ("b" variable nil (reparse-symbol function_parameters) [8920 8921]))              ) nil [8905 9129])
            ("ifloordiv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9144 9145])
                ("b" variable nil (reparse-symbol function_parameters) [9147 9148]))              ) nil [9130 9199])
            ("ilshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9212 9213])
                ("b" variable nil (reparse-symbol function_parameters) [9215 9216]))              ) nil [9200 9267])
            ("imod" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9277 9278])
                ("b" variable nil (reparse-symbol function_parameters) [9280 9281]))              ) nil [9268 9330])
            ("imul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9340 9341])
                ("b" variable nil (reparse-symbol function_parameters) [9343 9344]))              ) nil [9331 9393])
            ("imatmul" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9406 9407])
                ("b" variable nil (reparse-symbol function_parameters) [9409 9410]))              ) nil [9394 9459])
            ("ior" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9468 9469])
                ("b" variable nil (reparse-symbol function_parameters) [9471 9472]))              ) nil [9460 9521])
            ("ipow" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9531 9532])
                ("b" variable nil (reparse-symbol function_parameters) [9534 9535]))              ) nil [9522 9585])
            ("irshift" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9598 9599])
                ("b" variable nil (reparse-symbol function_parameters) [9601 9602]))              ) nil [9586 9653])
            ("isub" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9663 9664])
                ("b" variable nil (reparse-symbol function_parameters) [9666 9667]))              ) nil [9654 9716])
            ("itruediv" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9730 9731])
                ("b" variable nil (reparse-symbol function_parameters) [9733 9734]))              ) nil [9717 9783])
            ("ixor" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [9793 9794])
                ("b" variable nil (reparse-symbol function_parameters) [9796 9797]))              ) nil [9784 9846])
            ("try" code nil nil [9848 9950])
            ("__lt__" variable nil nil [10091 10102])
            ("__le__" variable nil nil [10103 10114])
            ("__eq__" variable nil nil [10115 10126])
            ("__ne__" variable nil nil [10127 10138])
            ("__ge__" variable nil nil [10139 10150])
            ("__gt__" variable nil nil [10151 10162])
            ("__not__" variable nil nil [10163 10177])
            ("__abs__" variable nil nil [10178 10191])
            ("__add__" variable nil nil [10192 10205])
            ("__and__" variable nil nil [10206 10220])
            ("__floordiv__" variable nil nil [10221 10244])
            ("__index__" variable nil nil [10245 10262])
            ("__inv__" variable nil nil [10263 10276])
            ("__invert__" variable nil nil [10277 10296])
            ("__lshift__" variable nil nil [10297 10316])
            ("__mod__" variable nil nil [10317 10330])
            ("__mul__" variable nil nil [10331 10344])
            ("__matmul__" variable nil nil [10345 10364])
            ("__neg__" variable nil nil [10365 10378])
            ("__or__" variable nil nil [10379 10391])
            ("__pos__" variable nil nil [10392 10405])
            ("__pow__" variable nil nil [10406 10419])
            ("__rshift__" variable nil nil [10420 10439])
            ("__sub__" variable nil nil [10440 10453])
            ("__truediv__" variable nil nil [10454 10475])
            ("__xor__" variable nil nil [10476 10489])
            ("__concat__" variable nil nil [10490 10509])
            ("__contains__" variable nil nil [10510 10533])
            ("__delitem__" variable nil nil [10534 10555])
            ("__getitem__" variable nil nil [10556 10577])
            ("__setitem__" variable nil nil [10578 10599])
            ("__iadd__" variable nil nil [10600 10615])
            ("__iand__" variable nil nil [10616 10631])
            ("__iconcat__" variable nil nil [10632 10653])
            ("__ifloordiv__" variable nil nil [10654 10679])
            ("__ilshift__" variable nil nil [10680 10701])
            ("__imod__" variable nil nil [10702 10717])
            ("__imul__" variable nil nil [10718 10733])
            ("__imatmul__" variable nil nil [10734 10755])
            ("__ior__" variable nil nil [10756 10769])
            ("__ipow__" variable nil nil [10770 10785])
            ("__irshift__" variable nil nil [10786 10807])
            ("__isub__" variable nil nil [10808 10823])
            ("__itruediv__" variable nil nil [10824 10847])
            ("__ixor__" variable nil nil [10848 10863]))          
      :file "operator.py"
      :pointmax 10864
      :fsize 10863
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 9439 . 9440) (AT 9441 . 9442) (ASSIGN 9442 . 9443) (RETURN 1608 . 1614) (IF 1620 . 1622) (ELSE 1625 . 1629)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("_sre" include nil nil [399 436])
            ("error" type
               (:documentation "Exception raised for invalid regular expressions.

    Attributes:

        msg: The unformatted error message
        pattern: The regular expression pattern
        pos: The index in the pattern where compilation failed (may be None)
        lineno: The line corresponding to pos (may be None)
        colno: The column corresponding to pos (may be None)
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [974 988])
                            ("self" variable nil (reparse-symbol indented_block_body) [997 1019])
                            ("self" variable nil (reparse-symbol indented_block_body) [1028 1042])
                            ("if" code nil (reparse-symbol indented_block_body) [1051 1565])
                            ("super" code nil (reparse-symbol indented_block_body) [1573 1594]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [930 934])
                            ("msg" variable nil (reparse-symbol function_parameters) [936 939])
                            ("pattern" variable nil (reparse-symbol function_parameters) [941 948])
                            ("pos" variable nil (reparse-symbol function_parameters) [955 958]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [917 1595]))                  
                :type "class")
                nil [516 1595])
            ("_NamedIntConstant" type
               (:superclasses ("int")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1643 1646])
                        ("value" variable nil (reparse-symbol function_parameters) [1648 1653])
                        ("name" variable nil (reparse-symbol function_parameters) [1655 1659]))                      ) (reparse-symbol indented_block_body) [1631 1772])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1789 1793]))                          )
                        (reparse-symbol indented_block_body) [1777 1821])
                    ("__repr__" variable nil (reparse-symbol indented_block_body) [1826 1844]))                  
                :type "class")
                nil [1597 1845])
            ("MAXREPEAT" variable nil nil [1846 1899])
            ("_makecodes" function (:arguments 
              ( ("names" variable nil (reparse-symbol function_parameters) [1916 1921]))              ) nil [1901 2106])
            ("OPCODES" variable nil nil [2184 2639])
            ("del" code nil nil [2640 2656])
            ("ATCODES" variable nil nil [2705 2938])
            ("CHCODES" variable nil nil [2953 3374])
            ("OP_IGNORE" variable nil nil [3425 3581])
            ("AT_MULTILINE" variable nil nil [3583 3662])
            ("AT_LOCALE" variable nil nil [3664 3754])
            ("AT_UNICODE" variable nil nil [3756 3847])
            ("CH_LOCALE" variable nil nil [3849 4203])
            ("CH_UNICODE" variable nil nil [4205 4584])
            ("SRE_FLAG_TEMPLATE" variable nil nil [4594 4615])
            ("SRE_FLAG_IGNORECASE" variable nil nil [4655 4678])
            ("SRE_FLAG_LOCALE" variable nil nil [4698 4717])
            ("SRE_FLAG_MULTILINE" variable nil nil [4741 4763])
            ("SRE_FLAG_DOTALL" variable nil nil [4799 4819])
            ("SRE_FLAG_UNICODE" variable nil nil [4854 4875])
            ("SRE_FLAG_VERBOSE" variable nil nil [4899 4920])
            ("SRE_FLAG_DEBUG" variable nil nil [4954 4974])
            ("SRE_FLAG_ASCII" variable nil nil [4987 5007])
            ("SRE_INFO_PREFIX" variable nil nil [5057 5076])
            ("SRE_INFO_LITERAL" variable nil nil [5090 5110])
            ("SRE_INFO_CHARSET" variable nil nil [5157 5177])
            ("if" code nil nil [5226 6822]))          
      :file "sre_constants.py"
      :pointmax 6822
      :fsize 6821
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
\"\"\"" code nil nil [1 130])
            ("" code nil nil [353 503])
            ("_weakrefset" include nil nil [505 553])
            ("collections" include nil nil [555 573])
            ("sys" include nil nil [625 635])
            ("itertools" include nil nil [636 652])
            ("ProxyTypes" variable nil nil [654 697])
            ("__all__" variable nil nil [699 938])
            ("WeakMethod" type
               (:documentation "
    A custom `weakref.ref` subclass which simulates a weak reference to
    a bound method, working around the lifetime problem of bound methods.
    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [1131 1193])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1211 1214])
                        ("meth" variable nil (reparse-symbol function_parameters) [1216 1220])
                        ("callback" variable nil (reparse-symbol function_parameters) [1222 1230]))                      ) (reparse-symbol indented_block_body) [1199 1961])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1979 1983]))                          )
                        (reparse-symbol indented_block_body) [1966 2157])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2173 2177])
                            ("other" variable nil (reparse-symbol function_parameters) [2179 2184]))                          )
                        (reparse-symbol indented_block_body) [2162 2420])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2436 2440])
                            ("other" variable nil (reparse-symbol function_parameters) [2442 2447]))                          )
                        (reparse-symbol indented_block_body) [2425 2685])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2690 2713]))                  
                :type "class")
                nil [941 2714])
            ("WeakValueDictionary" type
               (:documentation "Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    "
                :superclasses ("collections.MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [3263 3410])
                            ("args" variable nil (reparse-symbol indented_block_body) [3425 3436])
                            ("if" code nil (reparse-symbol indented_block_body) [3445 3543])
                            ("remove" function (:arguments 
                              ( ("wr" variable nil (reparse-symbol function_parameters) [3562 3564])
                                ("selfref" variable nil (reparse-symbol function_parameters) [3566 3573])
                                ("_atomic_removal" variable nil (reparse-symbol function_parameters) [3585 3600]))                              ) (reparse-symbol indented_block_body) [3551 3980])
                            ("self" variable nil (reparse-symbol indented_block_body) [3988 4009])
                            ("self" variable nil (reparse-symbol indented_block_body) [4057 4084])
                            ("self" variable nil (reparse-symbol indented_block_body) [4093 4116])
                            ("self" variable nil (reparse-symbol indented_block_body) [4125 4143])
                            ("self" code nil (reparse-symbol indented_block_body) [4152 4176]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [3241 3246])
                            ("kw" variable nil (reparse-symbol function_parameters) [3248 3252]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3228 4177])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4203 4207]))                          )
                        (reparse-symbol indented_block_body) [4182 4480])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4501 4505])
                            ("key" variable nil (reparse-symbol function_parameters) [4507 4510]))                          )
                        (reparse-symbol indented_block_body) [4485 4702])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4723 4727])
                            ("key" variable nil (reparse-symbol function_parameters) [4729 4732]))                          )
                        (reparse-symbol indented_block_body) [4707 4833])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4850 4854]))                          )
                        (reparse-symbol indented_block_body) [4838 4958])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4980 4984])
                            ("key" variable nil (reparse-symbol function_parameters) [4986 4989]))                          )
                        (reparse-symbol indented_block_body) [4963 5188])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5206 5210]))                          )
                        (reparse-symbol indented_block_body) [5193 5280])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5301 5305])
                            ("key" variable nil (reparse-symbol function_parameters) [5307 5310])
                            ("value" variable nil (reparse-symbol function_parameters) [5312 5317]))                          )
                        (reparse-symbol indented_block_body) [5285 5451])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5465 5469]))                          )
                        (reparse-symbol indented_block_body) [5456 5720])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [5725 5740])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5763 5767])
                            ("memo" variable nil (reparse-symbol function_parameters) [5769 5773]))                          )
                        (reparse-symbol indented_block_body) [5746 6069])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6082 6086])
                            ("key" variable nil (reparse-symbol function_parameters) [6088 6091])
                            ("default" variable nil (reparse-symbol function_parameters) [6093 6100]))                          )
                        (reparse-symbol indented_block_body) [6074 6453])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6468 6472]))                          )
                        (reparse-symbol indented_block_body) [6458 6716])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6730 6734]))                          )
                        (reparse-symbol indented_block_body) [6721 6953])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [6958 6973])
                    ("itervaluerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6997 7001]))                          
                        :documentation "Return an iterator that yields the weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [6979 7568])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7584 7588]))                          )
                        (reparse-symbol indented_block_body) [7573 7833])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7850 7854]))                          )
                        (reparse-symbol indented_block_body) [7838 8071])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8084 8088])
                            ("key" variable nil (reparse-symbol function_parameters) [8090 8093])
                            ("args" variable nil (reparse-symbol function_parameters) [8095 8100]))                          )
                        (reparse-symbol indented_block_body) [8076 8433])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8453 8457])
                            ("key" variable nil (reparse-symbol function_parameters) [8459 8462])
                            ("default" variable nil (reparse-symbol function_parameters) [8464 8471]))                          )
                        (reparse-symbol indented_block_body) [8438 8800])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [8816 8821])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [8823 8831]))                      ) (reparse-symbol indented_block_body) [8805 9516])
                    ("valuerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9535 9539]))                          
                        :documentation "Return a list of weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [9521 10050]))                  
                :type "class")
                nil [2716 10050])
            ("KeyedRef" type
               (:documentation "Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [10436 10454])
                    ("__new__" function (:arguments 
                      ( ("type" variable nil (reparse-symbol function_parameters) [10472 10476])
                        ("ob" variable nil (reparse-symbol function_parameters) [10478 10480])
                        ("callback" variable nil (reparse-symbol function_parameters) [10482 10490])
                        ("key" variable nil (reparse-symbol function_parameters) [10492 10495]))                      ) (reparse-symbol indented_block_body) [10460 10588])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [10640 10670]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10606 10610])
                            ("ob" variable nil (reparse-symbol function_parameters) [10612 10614])
                            ("callback" variable nil (reparse-symbol function_parameters) [10616 10624])
                            ("key" variable nil (reparse-symbol function_parameters) [10626 10629]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10593 10671]))                  
                :type "class")
                nil [10052 10671])
            ("WeakKeyDictionary" type
               (:documentation " Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    "
                :superclasses ("collections.MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11174 11188])
                            ("remove" function (:arguments 
                              ( ("k" variable nil (reparse-symbol function_parameters) [11208 11209])
                                ("selfref" variable nil (reparse-symbol function_parameters) [11211 11218]))                              ) (reparse-symbol indented_block_body) [11197 11441])
                            ("self" variable nil (reparse-symbol indented_block_body) [11449 11470])
                            ("self" variable nil (reparse-symbol indented_block_body) [11534 11561])
                            ("self" variable nil (reparse-symbol indented_block_body) [11570 11593])
                            ("self" variable nil (reparse-symbol indented_block_body) [11602 11625])
                            ("if" code nil (reparse-symbol indented_block_body) [11634 11685]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11148 11152])
                            ("dict" variable nil (reparse-symbol function_parameters) [11154 11158]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11135 11685])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11711 11715]))                          )
                        (reparse-symbol indented_block_body) [11690 12162])
                    ("_scrub_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12187 12191]))                          )
                        (reparse-symbol indented_block_body) [12167 12327])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12348 12352])
                            ("key" variable nil (reparse-symbol function_parameters) [12354 12357]))                          )
                        (reparse-symbol indented_block_body) [12332 12423])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12444 12448])
                            ("key" variable nil (reparse-symbol function_parameters) [12450 12453]))                          )
                        (reparse-symbol indented_block_body) [12428 12491])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12508 12512]))                          )
                        (reparse-symbol indented_block_body) [12496 12812])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12830 12834]))                          )
                        (reparse-symbol indented_block_body) [12817 12904])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12925 12929])
                            ("key" variable nil (reparse-symbol function_parameters) [12931 12934])
                            ("value" variable nil (reparse-symbol function_parameters) [12936 12941]))                          )
                        (reparse-symbol indented_block_body) [12909 12994])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13008 13012]))                          )
                        (reparse-symbol indented_block_body) [12999 13196])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [13201 13216])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13239 13243])
                            ("memo" variable nil (reparse-symbol function_parameters) [13245 13249]))                          )
                        (reparse-symbol indented_block_body) [13222 13480])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13493 13497])
                            ("key" variable nil (reparse-symbol function_parameters) [13499 13502])
                            ("default" variable nil (reparse-symbol function_parameters) [13504 13511]))                          )
                        (reparse-symbol indented_block_body) [13485 13566])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13588 13592])
                            ("key" variable nil (reparse-symbol function_parameters) [13594 13597]))                          )
                        (reparse-symbol indented_block_body) [13571 13721])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13736 13740]))                          )
                        (reparse-symbol indented_block_body) [13726 13927])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13941 13945]))                          )
                        (reparse-symbol indented_block_body) [13932 14110])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [14115 14130])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14147 14151]))                          )
                        (reparse-symbol indented_block_body) [14136 14307])
                    ("keyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14324 14328]))                          
                        :documentation "Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [14312 14755])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14772 14776]))                          )
                        (reparse-symbol indented_block_body) [14760 14959])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14972 14976])
                            ("key" variable nil (reparse-symbol function_parameters) [14978 14981])
                            ("args" variable nil (reparse-symbol function_parameters) [14983 14988]))                          )
                        (reparse-symbol indented_block_body) [14964 15068])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15088 15092])
                            ("key" variable nil (reparse-symbol function_parameters) [15094 15097])
                            ("default" variable nil (reparse-symbol function_parameters) [15099 15106]))                          )
                        (reparse-symbol indented_block_body) [15073 15182])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15198 15202])
                            ("dict" variable nil (reparse-symbol function_parameters) [15204 15208])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15215 15223]))                          )
                        (reparse-symbol indented_block_body) [15187 15508]))                  
                :type "class")
                nil [10673 15508])
            ("finalize" type
               (:documentation "Class for finalization of weakrefable objects

    finalize(obj, func, *args, **kwargs) returns a callable finalizer
    object which will be called when obj is garbage collected. The
    first time the finalizer is called it evaluates func(*arg, **kwargs)
    and returns the result. After this the finalizer is dead, and
    calling it just returns None.

    When the program exits any remaining finalizers for which the
    atexit attribute is true will be run in reverse order of creation.
    By default atexit is true.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [16268 16282])
                    ("_registry" variable nil (reparse-symbol indented_block_body) [16287 16301])
                    ("_shutdown" variable nil (reparse-symbol indented_block_body) [16306 16323])
                    ("_index_iter" variable nil (reparse-symbol indented_block_body) [16328 16359])
                    ("_dirty" variable nil (reparse-symbol indented_block_body) [16364 16378])
                    ("_registered_with_atexit" variable nil (reparse-symbol indented_block_body) [16383 16414])
                    ("_Info" type
                       (:members 
                          ( ("__slots__" variable nil (reparse-symbol indented_block_body) [16441 16509]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [16420 16510])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [16571 16854])
                            ("info" variable nil (reparse-symbol indented_block_body) [16862 16881])
                            ("info" variable nil (reparse-symbol indented_block_body) [16890 16919])
                            ("info" variable nil (reparse-symbol indented_block_body) [16928 16944])
                            ("info" variable nil (reparse-symbol indented_block_body) [16953 16969])
                            ("info" code nil (reparse-symbol indented_block_body) [16978 17006])
                            ("info" variable nil (reparse-symbol indented_block_body) [17015 17033])
                            ("info" variable nil (reparse-symbol indented_block_body) [17042 17077])
                            ("self" variable nil (reparse-symbol indented_block_body) [17086 17113])
                            ("finalize" variable nil (reparse-symbol indented_block_body) [17122 17144]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16528 16532])
                            ("obj" variable nil (reparse-symbol function_parameters) [16534 16537])
                            ("func" variable nil (reparse-symbol function_parameters) [16539 16543])
                            ("args" variable nil (reparse-symbol function_parameters) [16545 16550])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16552 16560]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16515 17145])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17163 17167])
                            ("_" variable nil (reparse-symbol function_parameters) [17169 17170]))                          
                        :documentation "If alive then mark as dead and return func(*args, **kwargs);
        otherwise return None")
                        (reparse-symbol indented_block_body) [17150 17433])
                    ("detach" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17449 17453]))                          
                        :documentation "If alive then mark as dead and return (obj, func, args, kwargs);
        otherwise return None")
                        (reparse-symbol indented_block_body) [17438 17772])
                    ("peek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17786 17790]))                          
                        :documentation "If alive then return (obj, func, args, kwargs);
        otherwise return None")
                        (reparse-symbol indented_block_body) [17777 18057])
                    ("alive" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18086 18090]))                          
                        :documentation "Whether finalizer is alive")
                        (reparse-symbol indented_block_body) [18062 18172])
                    ("atexit" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18202 18206]))                          
                        :documentation "Whether finalizer should be called at exit")
                        (reparse-symbol indented_block_body) [18177 18348])
                    ("atexit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18383 18387])
                            ("value" variable nil (reparse-symbol function_parameters) [18389 18394]))                          
                        :decorators 
                          ( ("atexit.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18353 18492])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18510 18514]))                          )
                        (reparse-symbol indented_block_body) [18497 18849])
                    ("_select_for_exit" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18892 18895]))                          )
                        (reparse-symbol indented_block_body) [18854 19108])
                    ("_exitfunc" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19144 19147]))                          )
                        (reparse-symbol indented_block_body) [19113 20467]))                  
                :type "class")
                nil [15510 20467]))          
      :file "weakref.py"
      :pointmax 20467
      :fsize 20466
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 9128 . 9132) (IF 9143 . 9145) (ELSE 9151 . 9155) (NAME 8995 . 8999) (MULT 9001 . 9002) (NAME 3418 . 3422) (MULT 3424 . 3425) (RAISE 1359 . 1364) (FROM 1468 . 1472) (NEWLINE 1477 . 1478)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Redo the builtin repr() (representation) but with limits on most sizes.\"\"\"" code nil nil [1 78])
            ("__all__" variable nil nil [80 124])
            ("builtins" include nil nil [126 141])
            ("itertools" include nil nil [142 170])
            ("try" code nil nil [171 270])
            ("recursive_repr" function (:arguments 
              ( ("fillvalue" variable nil (reparse-symbol function_parameters) [290 299]))              ) nil [271 1247])
            ("Repr" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1293 1310])
                            ("self" variable nil (reparse-symbol indented_block_body) [1319 1336])
                            ("self" variable nil (reparse-symbol indented_block_body) [1345 1361])
                            ("self" variable nil (reparse-symbol indented_block_body) [1370 1387])
                            ("self" variable nil (reparse-symbol indented_block_body) [1396 1412])
                            ("self" variable nil (reparse-symbol indented_block_body) [1421 1436])
                            ("self" variable nil (reparse-symbol indented_block_body) [1445 1466])
                            ("self" variable nil (reparse-symbol indented_block_body) [1475 1492])
                            ("self" variable nil (reparse-symbol indented_block_body) [1501 1520])
                            ("self" variable nil (reparse-symbol indented_block_body) [1529 1546])
                            ("self" variable nil (reparse-symbol indented_block_body) [1555 1573]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1278 1282]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1265 1574])
                    ("repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1588 1592])
                            ("x" variable nil (reparse-symbol function_parameters) [1594 1595]))                          )
                        (reparse-symbol indented_block_body) [1579 1642])
                    ("repr1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1657 1661])
                            ("x" variable nil (reparse-symbol function_parameters) [1663 1664])
                            ("level" variable nil (reparse-symbol function_parameters) [1666 1671]))                          )
                        (reparse-symbol indented_block_body) [1647 1985])
                    ("_repr_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2009 2013])
                            ("x" variable nil (reparse-symbol function_parameters) [2015 2016])
                            ("level" variable nil (reparse-symbol function_parameters) [2018 2023])
                            ("left" variable nil (reparse-symbol function_parameters) [2025 2029])
                            ("right" variable nil (reparse-symbol function_parameters) [2031 2036])
                            ("maxiter" variable nil (reparse-symbol function_parameters) [2038 2045])
                            ("trail" variable nil (reparse-symbol function_parameters) [2047 2052]))                          )
                        (reparse-symbol indented_block_body) [1990 2465])
                    ("repr_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2485 2489])
                            ("x" variable nil (reparse-symbol function_parameters) [2491 2492])
                            ("level" variable nil (reparse-symbol function_parameters) [2494 2499]))                          )
                        (reparse-symbol indented_block_body) [2470 2577])
                    ("repr_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2596 2600])
                            ("x" variable nil (reparse-symbol function_parameters) [2602 2603])
                            ("level" variable nil (reparse-symbol function_parameters) [2605 2610]))                          )
                        (reparse-symbol indented_block_body) [2582 2682])
                    ("repr_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2702 2706])
                            ("x" variable nil (reparse-symbol function_parameters) [2708 2709])
                            ("level" variable nil (reparse-symbol function_parameters) [2711 2716]))                          )
                        (reparse-symbol indented_block_body) [2687 2903])
                    ("repr_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2921 2925])
                            ("x" variable nil (reparse-symbol function_parameters) [2927 2928])
                            ("level" variable nil (reparse-symbol function_parameters) [2930 2935]))                          )
                        (reparse-symbol indented_block_body) [2908 3083])
                    ("repr_frozenset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3107 3111])
                            ("x" variable nil (reparse-symbol function_parameters) [3113 3114])
                            ("level" variable nil (reparse-symbol function_parameters) [3116 3121]))                          )
                        (reparse-symbol indented_block_body) [3088 3327])
                    ("repr_deque" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3347 3351])
                            ("x" variable nil (reparse-symbol function_parameters) [3353 3354])
                            ("level" variable nil (reparse-symbol function_parameters) [3356 3361]))                          )
                        (reparse-symbol indented_block_body) [3332 3441])
                    ("repr_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3460 3464])
                            ("x" variable nil (reparse-symbol function_parameters) [3466 3467])
                            ("level" variable nil (reparse-symbol function_parameters) [3469 3474]))                          )
                        (reparse-symbol indented_block_body) [3446 3958])
                    ("repr_str" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3976 3980])
                            ("x" variable nil (reparse-symbol function_parameters) [3982 3983])
                            ("level" variable nil (reparse-symbol function_parameters) [3985 3990]))                          )
                        (reparse-symbol indented_block_body) [3963 4278])
                    ("repr_int" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4296 4300])
                            ("x" variable nil (reparse-symbol function_parameters) [4302 4303])
                            ("level" variable nil (reparse-symbol function_parameters) [4305 4310]))                          )
                        (reparse-symbol indented_block_body) [4283 4557])
                    ("repr_instance" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4580 4584])
                            ("x" variable nil (reparse-symbol function_parameters) [4586 4587])
                            ("level" variable nil (reparse-symbol function_parameters) [4589 4594]))                          )
                        (reparse-symbol indented_block_body) [4562 5033]))                  
                :type "class")
                nil [1248 5033])
            ("_possibly_sorted" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5056 5057]))              ) nil [5035 5303])
            ("aRepr" variable nil nil [5304 5318])
            ("repr" variable nil nil [5319 5336]))          
      :file "reprlib.py"
      :pointmax 5337
      :fsize 5336
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [535 574]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [475 479])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [481 494]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [462 575])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [594 598]))                          )
                        (reparse-symbol indented_block_body) [580 715])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [733 737])
                            ("e" variable nil (reparse-symbol function_parameters) [739 740])
                            ("t" variable nil (reparse-symbol function_parameters) [742 743])
                            ("b" variable nil (reparse-symbol function_parameters) [745 746]))                          )
                        (reparse-symbol indented_block_body) [720 923]))                  
                :type "class")
                nil [195 923])
            ("WeakSet" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [983 1000])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1021 1025])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1027 1034]))                              ) (reparse-symbol indented_block_body) [1009 1267])
                            ("self" variable nil (reparse-symbol indented_block_body) [1275 1297])
                            ("self" variable nil (reparse-symbol indented_block_body) [1345 1372])
                            ("self" variable nil (reparse-symbol indented_block_body) [1381 1404])
                            ("if" code nil (reparse-symbol indented_block_body) [1413 1464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [957 961])
                            ("data" variable nil (reparse-symbol function_parameters) [963 967]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [944 1464])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1490 1494]))                          )
                        (reparse-symbol indented_block_body) [1469 1614])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1632 1636]))                          )
                        (reparse-symbol indented_block_body) [1619 1949])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1966 1970]))                          )
                        (reparse-symbol indented_block_body) [1954 2033])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2055 2059])
                            ("item" variable nil (reparse-symbol function_parameters) [2061 2065]))                          )
                        (reparse-symbol indented_block_body) [2038 2190])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2210 2214]))                          )
                        (reparse-symbol indented_block_body) [2195 2313])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2326 2330])
                            ("item" variable nil (reparse-symbol function_parameters) [2332 2336]))                          )
                        (reparse-symbol indented_block_body) [2318 2457])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2472 2476]))                          )
                        (reparse-symbol indented_block_body) [2462 2576])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2590 2594]))                          )
                        (reparse-symbol indented_block_body) [2581 2633])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2646 2650]))                          )
                        (reparse-symbol indented_block_body) [2638 2979])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2995 2999])
                            ("item" variable nil (reparse-symbol function_parameters) [3001 3005]))                          )
                        (reparse-symbol indented_block_body) [2984 3115])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3132 3136])
                            ("item" variable nil (reparse-symbol function_parameters) [3138 3142]))                          )
                        (reparse-symbol indented_block_body) [3120 3253])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3269 3273])
                            ("other" variable nil (reparse-symbol function_parameters) [3275 3280]))                          )
                        (reparse-symbol indented_block_body) [3258 3414])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3431 3435])
                            ("other" variable nil (reparse-symbol function_parameters) [3437 3442]))                          )
                        (reparse-symbol indented_block_body) [3419 3492])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3512 3516])
                            ("other" variable nil (reparse-symbol function_parameters) [3518 3523]))                          )
                        (reparse-symbol indented_block_body) [3497 3617])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3621 3641])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3669 3673])
                            ("other" variable nil (reparse-symbol function_parameters) [3675 3680]))                          )
                        (reparse-symbol indented_block_body) [3647 3712])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3729 3733])
                            ("other" variable nil (reparse-symbol function_parameters) [3735 3740]))                          )
                        (reparse-symbol indented_block_body) [3716 3973])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3995 3999])
                            ("other" variable nil (reparse-symbol function_parameters) [4001 4006]))                          )
                        (reparse-symbol indented_block_body) [3978 4079])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4083 4105])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4135 4139])
                            ("other" variable nil (reparse-symbol function_parameters) [4141 4146]))                          )
                        (reparse-symbol indented_block_body) [4111 4178])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4195 4199])
                            ("other" variable nil (reparse-symbol function_parameters) [4201 4206]))                          )
                        (reparse-symbol indented_block_body) [4182 4367])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4385 4389])
                            ("other" variable nil (reparse-symbol function_parameters) [4391 4396]))                          )
                        (reparse-symbol indented_block_body) [4372 4462])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4466 4483])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4500 4504])
                            ("other" variable nil (reparse-symbol function_parameters) [4506 4511]))                          )
                        (reparse-symbol indented_block_body) [4489 4574])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4594 4598])
                            ("other" variable nil (reparse-symbol function_parameters) [4600 4605]))                          )
                        (reparse-symbol indented_block_body) [4579 4673])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4677 4696])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4713 4717])
                            ("other" variable nil (reparse-symbol function_parameters) [4719 4724]))                          )
                        (reparse-symbol indented_block_body) [4702 4787])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4803 4807])
                            ("other" variable nil (reparse-symbol function_parameters) [4809 4814]))                          )
                        (reparse-symbol indented_block_body) [4792 4962])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4992 4996])
                            ("other" variable nil (reparse-symbol function_parameters) [4998 5003]))                          )
                        (reparse-symbol indented_block_body) [4967 5107])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5111 5141])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5179 5183])
                            ("other" variable nil (reparse-symbol function_parameters) [5185 5190]))                          )
                        (reparse-symbol indented_block_body) [5147 5222])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5239 5243])
                            ("other" variable nil (reparse-symbol function_parameters) [5245 5250]))                          )
                        (reparse-symbol indented_block_body) [5226 5507])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5522 5526])
                            ("other" variable nil (reparse-symbol function_parameters) [5528 5533]))                          )
                        (reparse-symbol indented_block_body) [5512 5603])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5607 5621])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5642 5646])
                            ("other" variable nil (reparse-symbol function_parameters) [5648 5653]))                          )
                        (reparse-symbol indented_block_body) [5627 5706]))                  
                :type "class")
                nil [925 5706]))          
      :file "_weakrefset.py"
      :pointmax 5706
      :fsize 5705
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

Unit tests are in test_collections.
\"\"\"" code nil nil [102 214])
            ("abc" include nil nil [216 255])
            ("sys" include nil nil [256 266])
            ("__all__" variable nil nil [268 717])
            ("__name__" variable nil nil [962 990])
            ("bytes_iterator" variable nil nil [1340 1372])
            ("bytearray_iterator" variable nil nil [1373 1417])
            ("dict_keyiterator" variable nil nil [1443 1483])
            ("dict_valueiterator" variable nil nil [1484 1528])
            ("dict_itemiterator" variable nil nil [1529 1571])
            ("list_iterator" variable nil nil [1572 1602])
            ("list_reverseiterator" variable nil nil [1603 1650])
            ("range_iterator" variable nil nil [1651 1688])
            ("longrange_iterator" variable nil nil [1689 1738])
            ("set_iterator" variable nil nil [1739 1771])
            ("str_iterator" variable nil nil [1772 1801])
            ("tuple_iterator" variable nil nil [1802 1833])
            ("zip_iterator" variable nil nil [1834 1866])
            ("dict_keys" variable nil nil [1879 1906])
            ("dict_values" variable nil nil [1907 1938])
            ("dict_items" variable nil nil [1939 1968])
            ("mappingproxy" variable nil nil [1980 2014])
            ("generator" variable nil nil [2015 2052])
            ("_coro" function nil nil [2075 2093])
            ("_coro" variable nil nil [2093 2108])
            ("coroutine" variable nil nil [2109 2132])
            ("_coro" code nil nil [2133 2146])
            ("del" code nil nil [2174 2183])
            ("_ag" function nil nil [2219 2236])
            ("_ag" variable nil nil [2236 2247])
            ("async_generator" variable nil nil [2248 2275])
            ("del" code nil nil [2276 2283])
            ("_check_methods" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [2331 2332])
                ("methods" variable nil (reparse-symbol function_parameters) [2334 2342]))              ) nil [2312 2626])
            ("Hashable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2667 2681])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2720 2724]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2687 2744])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2787 2790])
                            ("C" variable nil (reparse-symbol function_parameters) [2792 2793]))                          )
                        (reparse-symbol indented_block_body) [2749 2903]))                  
                :type "class")
                nil [2627 2903])
            ("Awaitable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2946 2960])
                    ("__await__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3000 3004]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2966 3021])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3064 3067])
                            ("C" variable nil (reparse-symbol function_parameters) [3069 3070]))                          )
                        (reparse-symbol indented_block_body) [3026 3182]))                  
                :type "class")
                nil [2905 3182])
            ("Coroutine" type
               (:superclasses ("Awaitable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3217 3231])
                    ("send" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3266 3270])
                            ("value" variable nil (reparse-symbol function_parameters) [3272 3277]))                          
                        :documentation "Send a value into the coroutine.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [3237 3422])
                    ("throw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3457 3461])
                            ("typ" variable nil (reparse-symbol function_parameters) [3463 3466])
                            ("val" variable nil (reparse-symbol function_parameters) [3468 3471])
                            ("tb" variable nil (reparse-symbol function_parameters) [3478 3480]))                          
                        :documentation "Raise an exception in the coroutine.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [3427 3793])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3808 3812]))                          
                        :documentation "Raise GeneratorExit inside coroutine.
        ")
                        (reparse-symbol indented_block_body) [3798 4071])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4114 4117])
                            ("C" variable nil (reparse-symbol function_parameters) [4119 4120]))                          )
                        (reparse-symbol indented_block_body) [4076 4258]))                  
                :type "class")
                nil [3184 4258])
            ("Coroutine" code nil nil [4260 4289])
            ("AsyncIterable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4337 4351])
                    ("__aiter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4391 4395]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4357 4429])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4472 4475])
                            ("C" variable nil (reparse-symbol function_parameters) [4477 4478]))                          )
                        (reparse-symbol indented_block_body) [4434 4594]))                  
                :type "class")
                nil [4292 4594])
            ("AsyncIterator" type
               (:superclasses ("AsyncIterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4637 4651])
                    ("__anext__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4697 4701]))                          
                        :documentation "Return the next item or raise StopAsyncIteration when exhausted.")
                        (reparse-symbol indented_block_body) [4683 4816])
                    ("__aiter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4835 4839]))                          )
                        (reparse-symbol indented_block_body) [4821 4862])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4905 4908])
                            ("C" variable nil (reparse-symbol function_parameters) [4910 4911]))                          )
                        (reparse-symbol indented_block_body) [4867 5040]))                  
                :type "class")
                nil [4596 5040])
            ("AsyncGenerator" type
               (:superclasses ("AsyncIterator")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5084 5098])
                    ("__anext__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5124 5128]))                          
                        :documentation "Return the next item from the asynchronous generator.
        When exhausted, raise StopAsyncIteration.
        ")
                        (reparse-symbol indented_block_body) [5110 5296])
                    ("asend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5337 5341])
                            ("value" variable nil (reparse-symbol function_parameters) [5343 5348]))                          
                        :documentation "Send a value into the asynchronous generator.
        Return next yielded value or raise StopAsyncIteration.
        ")
                        (reparse-symbol indented_block_body) [5327 5516])
                    ("athrow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5558 5562])
                            ("typ" variable nil (reparse-symbol function_parameters) [5564 5567])
                            ("val" variable nil (reparse-symbol function_parameters) [5569 5572])
                            ("tb" variable nil (reparse-symbol function_parameters) [5579 5581]))                          
                        :documentation "Raise an exception in the asynchronous generator.
        Return next yielded value or raise StopAsyncIteration.
        ")
                        (reparse-symbol indented_block_body) [5547 5912])
                    ("aclose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5934 5938]))                          
                        :documentation "Raise GeneratorExit inside coroutine.
        ")
                        (reparse-symbol indented_block_body) [5923 6222])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6265 6268])
                            ("C" variable nil (reparse-symbol function_parameters) [6270 6271]))                          )
                        (reparse-symbol indented_block_body) [6227 6464]))                  
                :type "class")
                nil [5042 6464])
            ("AsyncGenerator" code nil nil [6466 6506])
            ("Iterable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6549 6563])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6602 6606]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6569 6653])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6696 6699])
                            ("C" variable nil (reparse-symbol function_parameters) [6701 6702]))                          )
                        (reparse-symbol indented_block_body) [6658 6812]))                  
                :type "class")
                nil [6509 6812])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6845 6859])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6898 6902]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6865 7019])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7037 7041]))                          )
                        (reparse-symbol indented_block_body) [7024 7064])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7107 7110])
                            ("C" variable nil (reparse-symbol function_parameters) [7112 7113]))                          )
                        (reparse-symbol indented_block_body) [7069 7235]))                  
                :type "class")
                nil [6814 7235])
            ("Iterator" code nil nil [7236 7269])
            ("Iterator" code nil nil [7270 7307])
            ("Iterator" code nil nil [7346 7381])
            ("Iterator" code nil nil [7382 7419])
            ("Iterator" code nil nil [7420 7456])
            ("Iterator" code nil nil [7457 7489])
            ("Iterator" code nil nil [7490 7529])
            ("Iterator" code nil nil [7530 7563])
            ("Iterator" code nil nil [7564 7601])
            ("Iterator" code nil nil [7602 7633])
            ("Iterator" code nil nil [7634 7665])
            ("Iterator" code nil nil [7666 7699])
            ("Iterator" code nil nil [7700 7731])
            ("Reversible" type
               (:superclasses ("Iterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7767 7781])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7824 7828]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7787 7875])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7918 7921])
                            ("C" variable nil (reparse-symbol function_parameters) [7923 7924]))                          )
                        (reparse-symbol indented_block_body) [7880 8052]))                  
                :type "class")
                nil [7734 8052])
            ("Generator" type
               (:superclasses ("Iterator")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8086 8100])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8119 8123]))                          
                        :documentation "Return the next item from the generator.
        When exhausted, raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [8106 8266])
                    ("send" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8300 8304])
                            ("value" variable nil (reparse-symbol function_parameters) [8306 8311]))                          
                        :documentation "Send a value into the generator.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [8271 8456])
                    ("throw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8491 8495])
                            ("typ" variable nil (reparse-symbol function_parameters) [8497 8500])
                            ("val" variable nil (reparse-symbol function_parameters) [8502 8505])
                            ("tb" variable nil (reparse-symbol function_parameters) [8512 8514]))                          
                        :documentation "Raise an exception in the generator.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [8461 8827])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8842 8846]))                          
                        :documentation "Raise GeneratorExit inside generator.
        ")
                        (reparse-symbol indented_block_body) [8832 9105])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9148 9151])
                            ("C" variable nil (reparse-symbol function_parameters) [9153 9154]))                          )
                        (reparse-symbol indented_block_body) [9110 9337]))                  
                :type "class")
                nil [8054 9337])
            ("Generator" code nil nil [9338 9367])
            ("Sized" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9407 9421])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9459 9463]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9427 9483])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9526 9529])
                            ("C" variable nil (reparse-symbol function_parameters) [9531 9532]))                          )
                        (reparse-symbol indented_block_body) [9488 9638]))                  
                :type "class")
                nil [9370 9638])
            ("Container" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9681 9695])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9738 9742])
                            ("x" variable nil (reparse-symbol function_parameters) [9744 9745]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9701 9769])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9812 9815])
                            ("C" variable nil (reparse-symbol function_parameters) [9817 9818]))                          )
                        (reparse-symbol indented_block_body) [9774 9933]))                  
                :type "class")
                nil [9640 9933])
            ("Collection" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9985 9999])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10043 10046])
                            ("C" variable nil (reparse-symbol function_parameters) [10048 10049]))                          )
                        (reparse-symbol indented_block_body) [10005 10189]))                  
                :type "class")
                nil [9934 10189])
            ("Callable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [10230 10244])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10283 10287])
                            ("args" variable nil (reparse-symbol function_parameters) [10289 10294])
                            ("kwds" variable nil (reparse-symbol function_parameters) [10296 10302]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10250 10326])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10369 10372])
                            ("C" variable nil (reparse-symbol function_parameters) [10374 10375]))                          )
                        (reparse-symbol indented_block_body) [10331 10485]))                  
                :type "class")
                nil [10190 10485])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [10888 10902])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10919 10923])
                            ("other" variable nil (reparse-symbol function_parameters) [10925 10930]))                          )
                        (reparse-symbol indented_block_body) [10908 11175])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11191 11195])
                            ("other" variable nil (reparse-symbol function_parameters) [11197 11202]))                          )
                        (reparse-symbol indented_block_body) [11180 11339])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11355 11359])
                            ("other" variable nil (reparse-symbol function_parameters) [11361 11366]))                          )
                        (reparse-symbol indented_block_body) [11344 11503])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11519 11523])
                            ("other" variable nil (reparse-symbol function_parameters) [11525 11530]))                          )
                        (reparse-symbol indented_block_body) [11508 11775])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11791 11795])
                            ("other" variable nil (reparse-symbol function_parameters) [11797 11802]))                          )
                        (reparse-symbol indented_block_body) [11780 11940])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11981 11984])
                            ("it" variable nil (reparse-symbol function_parameters) [11986 11988]))                          )
                        (reparse-symbol indented_block_body) [11945 12217])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12234 12238])
                            ("other" variable nil (reparse-symbol function_parameters) [12240 12245]))                          )
                        (reparse-symbol indented_block_body) [12222 12404])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [12409 12427])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12448 12452])
                            ("other" variable nil (reparse-symbol function_parameters) [12454 12459]))                          )
                        (reparse-symbol indented_block_body) [12433 12629])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12645 12649])
                            ("other" variable nil (reparse-symbol function_parameters) [12651 12656]))                          )
                        (reparse-symbol indented_block_body) [12634 12833])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [12838 12854])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12872 12876])
                            ("other" variable nil (reparse-symbol function_parameters) [12878 12883]))                          )
                        (reparse-symbol indented_block_body) [12860 13175])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13193 13197])
                            ("other" variable nil (reparse-symbol function_parameters) [13199 13204]))                          )
                        (reparse-symbol indented_block_body) [13180 13496])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13513 13517])
                            ("other" variable nil (reparse-symbol function_parameters) [13519 13524]))                          )
                        (reparse-symbol indented_block_body) [13501 13746])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [13751 13769])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13785 13789]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [13775 14779]))                  
                :type "class")
                nil [10502 14779])
            ("Set" code nil nil [14780 14803])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15236 15250])
                    ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15284 15288])
                            ("value" variable nil (reparse-symbol function_parameters) [15290 15295]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [15256 15362])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15399 15403])
                            ("value" variable nil (reparse-symbol function_parameters) [15405 15410]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [15367 15518])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15534 15538])
                            ("value" variable nil (reparse-symbol function_parameters) [15540 15545]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [15523 15708])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15721 15725]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [15713 15965])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15980 15984]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [15970 16162])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16179 16183])
                            ("it" variable nil (reparse-symbol function_parameters) [16185 16187]))                          )
                        (reparse-symbol indented_block_body) [16167 16263])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16281 16285])
                            ("it" variable nil (reparse-symbol function_parameters) [16287 16289]))                          )
                        (reparse-symbol indented_block_body) [16268 16378])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16396 16400])
                            ("it" variable nil (reparse-symbol function_parameters) [16402 16404]))                          )
                        (reparse-symbol indented_block_body) [16383 16735])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16753 16757])
                            ("it" variable nil (reparse-symbol function_parameters) [16759 16761]))                          )
                        (reparse-symbol indented_block_body) [16740 16911]))                  
                :type "class")
                nil [14806 16911])
            ("MutableSet" code nil nil [16912 16936])
            ("Mapping" type
               (:superclasses ("Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [16990 17004])
                    ("\"\"\"A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    \"\"\"" code nil (reparse-symbol indented_block_body) [17010 17215])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17257 17261])
                            ("key" variable nil (reparse-symbol function_parameters) [17263 17266]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17221 17292])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17305 17309])
                            ("key" variable nil (reparse-symbol function_parameters) [17311 17314])
                            ("default" variable nil (reparse-symbol function_parameters) [17316 17323]))                          )
                        (reparse-symbol indented_block_body) [17297 17496])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17518 17522])
                            ("key" variable nil (reparse-symbol function_parameters) [17524 17527]))                          )
                        (reparse-symbol indented_block_body) [17501 17653])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17667 17671]))                          )
                        (reparse-symbol indented_block_body) [17658 17773])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17788 17792]))                          )
                        (reparse-symbol indented_block_body) [17778 17897])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17913 17917]))                          )
                        (reparse-symbol indented_block_body) [17902 18017])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18033 18037])
                            ("other" variable nil (reparse-symbol function_parameters) [18039 18044]))                          )
                        (reparse-symbol indented_block_body) [18022 18181])
                    ("__reversed__" variable nil (reparse-symbol indented_block_body) [18186 18205]))                  
                :type "class")
                nil [16958 18206])
            ("Mapping" code nil nil [18207 18237])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [18271 18294])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [18337 18360]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18313 18317])
                            ("mapping" variable nil (reparse-symbol function_parameters) [18319 18326]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18300 18361])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18378 18382]))                          )
                        (reparse-symbol indented_block_body) [18366 18419])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18437 18441]))                          )
                        (reparse-symbol indented_block_body) [18424 18513]))                  
                :type "class")
                nil [18240 18513])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [18554 18568])
                    ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18610 18614])
                            ("it" variable nil (reparse-symbol function_parameters) [18616 18618]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18574 18644])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18666 18670])
                            ("key" variable nil (reparse-symbol function_parameters) [18672 18675]))                          )
                        (reparse-symbol indented_block_body) [18649 18714])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18732 18736]))                          )
                        (reparse-symbol indented_block_body) [18719 18772]))                  
                :type "class")
                nil [18515 18772])
            ("KeysView" code nil nil [18773 18801])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [18844 18858])
                    ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18900 18904])
                            ("it" variable nil (reparse-symbol function_parameters) [18906 18908]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18864 18934])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18956 18960])
                            ("item" variable nil (reparse-symbol function_parameters) [18962 18966]))                          )
                        (reparse-symbol indented_block_body) [18939 19151])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19169 19173]))                          )
                        (reparse-symbol indented_block_body) [19156 19254]))                  
                :type "class")
                nil [18804 19254])
            ("ItemsView" code nil nil [19255 19285])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [19324 19338])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19361 19365])
                            ("value" variable nil (reparse-symbol function_parameters) [19367 19372]))                          )
                        (reparse-symbol indented_block_body) [19344 19534])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19552 19556]))                          )
                        (reparse-symbol indented_block_body) [19539 19630]))                  
                :type "class")
                nil [19288 19630])
            ("ValuesView" code nil nil [19631 19663])
            ("MutableMapping" type
               (:superclasses ("Mapping")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [19702 19716])
                    ("\"\"\"A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    \"\"\"" code nil (reparse-symbol indented_block_body) [19722 19964])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20006 20010])
                            ("key" variable nil (reparse-symbol function_parameters) [20012 20015])
                            ("value" variable nil (reparse-symbol function_parameters) [20017 20022]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19970 20048])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20089 20093])
                            ("key" variable nil (reparse-symbol function_parameters) [20095 20098]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20053 20124])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [20129 20148])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20162 20166])
                            ("key" variable nil (reparse-symbol function_parameters) [20168 20171])
                            ("default" variable nil (reparse-symbol function_parameters) [20173 20180]))                          )
                        (reparse-symbol indented_block_body) [20154 20599])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20616 20620]))                          )
                        (reparse-symbol indented_block_body) [20604 20948])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20963 20967]))                          )
                        (reparse-symbol indented_block_body) [20953 21135])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [21151 21156])
                        ("kwds" variable nil (reparse-symbol function_parameters) [21158 21164]))                      ) (reparse-symbol indented_block_body) [21140 22286])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22306 22310])
                            ("key" variable nil (reparse-symbol function_parameters) [22312 22315])
                            ("default" variable nil (reparse-symbol function_parameters) [22317 22324]))                          )
                        (reparse-symbol indented_block_body) [22291 22529]))                  
                :type "class")
                nil [19666 22529])
            ("MutableMapping" code nil nil [22530 22559])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Reversible" "Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [22777 22791])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22833 22837])
                            ("index" variable nil (reparse-symbol function_parameters) [22839 22844]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22797 22872])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22890 22894]))                          )
                        (reparse-symbol indented_block_body) [22877 23069])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23091 23095])
                            ("value" variable nil (reparse-symbol function_parameters) [23097 23102]))                          )
                        (reparse-symbol indented_block_body) [23074 23218])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23240 23244]))                          )
                        (reparse-symbol indented_block_body) [23223 23318])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23333 23337])
                            ("value" variable nil (reparse-symbol function_parameters) [23339 23344])
                            ("start" variable nil (reparse-symbol function_parameters) [23346 23351])
                            ("stop" variable nil (reparse-symbol function_parameters) [23355 23359]))                          )
                        (reparse-symbol indented_block_body) [23323 23960])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23975 23979])
                            ("value" variable nil (reparse-symbol function_parameters) [23981 23986]))                          )
                        (reparse-symbol indented_block_body) [23965 24130]))                  
                :type "class")
                nil [22582 24130])
            ("Sequence" code nil nil [24131 24155])
            ("Sequence" code nil nil [24156 24178])
            ("Sequence" code nil nil [24179 24203])
            ("Sequence" code nil nil [24204 24233])
            ("ByteString" type
               (:documentation "This unifies bytes and bytearray.

    XXX Should add all their methods.
    "
                :superclasses ("Sequence")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24358 24372]))                  
                :type "class")
                nil [24236 24373])
            ("ByteString" code nil nil [24374 24400])
            ("ByteString" code nil nil [24401 24431])
            ("MutableSequence" type
               (:superclasses ("Sequence")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24472 24486])
                    ("\"\"\"All the operations on a read-write sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    \"\"\"" code nil (reparse-symbol indented_block_body) [24492 24673])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24715 24719])
                            ("index" variable nil (reparse-symbol function_parameters) [24721 24726])
                            ("value" variable nil (reparse-symbol function_parameters) [24728 24733]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24679 24761])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24802 24806])
                            ("index" variable nil (reparse-symbol function_parameters) [24808 24813]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24766 24841])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24877 24881])
                            ("index" variable nil (reparse-symbol function_parameters) [24883 24888])
                            ("value" variable nil (reparse-symbol function_parameters) [24890 24895]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24846 24985])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25001 25005])
                            ("value" variable nil (reparse-symbol function_parameters) [25007 25012]))                          )
                        (reparse-symbol indented_block_body) [24990 25122])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25137 25141]))                          )
                        (reparse-symbol indented_block_body) [25127 25307])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25324 25328]))                          )
                        (reparse-symbol indented_block_body) [25312 25483])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25499 25503])
                            ("values" variable nil (reparse-symbol function_parameters) [25505 25511]))                          )
                        (reparse-symbol indented_block_body) [25488 25654])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25667 25671])
                            ("index" variable nil (reparse-symbol function_parameters) [25673 25678]))                          )
                        (reparse-symbol indented_block_body) [25659 25917])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25933 25937])
                            ("value" variable nil (reparse-symbol function_parameters) [25939 25944]))                          )
                        (reparse-symbol indented_block_body) [25922 26116])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26134 26138])
                            ("values" variable nil (reparse-symbol function_parameters) [26140 26146]))                          )
                        (reparse-symbol indented_block_body) [26121 26197]))                  
                :type "class")
                nil [24434 26197])
            ("MutableSequence" code nil nil [26198 26228])
            ("MutableSequence" code nil nil [26229 26264]))          
      :file "_collections_abc.py"
      :pointmax 26304
      :fsize 26303
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 21669 . 21673) (MULT 21675 . 21676) (YIELD 18747 . 18752) (FROM 18753 . 18757) (NEWLINE 18771 . 18772) (NAME 10205 . 10214) (ASSIGN 10214 . 10215) (NAME 9656 . 9665) (ASSIGN 9665 . 9666) (NAME 9382 . 9391) (ASSIGN 9391 . 9392) (NAME 6524 . 6533) (ASSIGN 6533 . 6534) (NAME 4312 . 4321) (ASSIGN 4321 . 4322) (NAME 2921 . 2930) (ASSIGN 2930 . 2931) (NAME 2642 . 2651) (ASSIGN 2651 . 2652)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           pick weighted random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 951])
            ("warnings" include nil nil [953 987])
            ("types" include nil nil [988 1072])
            ("math" include nil nil [1073 1149])
            ("math" include nil nil [1150 1221])
            ("os" include nil nil [1222 1256])
            ("_collections_abc" include nil nil [1257 1320])
            ("hashlib" include nil nil [1321 1358])
            ("itertools" include nil nil [1359 1389])
            ("bisect" include nil nil [1390 1414])
            ("__all__" variable nil nil [1416 1783])
            ("NV_MAGICCONST" code nil nil [1785 1826])
            ("TWOPI" code nil nil [1827 1842])
            ("LOG4" variable nil nil [1843 1859])
            ("SG_MAGICCONST" code nil nil [1860 1891])
            ("BPF" variable nil nil [1892 1900])
            ("RECIP_BPF" variable nil nil [1936 1955])
            ("_random" include nil nil [2138 2152])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods:  random(), seed(), getstate(), and setstate().
    Optionally, implement a getrandbits() method so that randrange()
    can cover arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [2683 2694])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [2768 2875])
                            ("self" code nil (reparse-symbol indented_block_body) [2885 2897])
                            ("self" variable nil (reparse-symbol indented_block_body) [2906 2928]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2745 2749])
                            ("x" variable nil (reparse-symbol function_parameters) [2751 2752]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2732 2929])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2943 2947])
                            ("a" variable nil (reparse-symbol function_parameters) [2949 2950])
                            ("version" variable nil (reparse-symbol function_parameters) [2957 2964]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If *a* is an int, all bits are used.

        For version 2 (the default), all of the bits are used if *a* is a str,
        bytes, or bytearray.  For version 1 (provided for reproducing random
        sequences from older versions of Python), the algorithm for str and
        bytes generates a narrower range of seeds.

        ")
                        (reparse-symbol indented_block_body) [2934 4022])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4040 4044]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [4027 4184])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4202 4206])
                            ("state" variable nil (reparse-symbol function_parameters) [4208 4213]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4189 5225])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5665 5669]))                          )
                        (reparse-symbol indented_block_body) [5648 5716])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5738 5742])
                            ("state" variable nil (reparse-symbol function_parameters) [5744 5749]))                          )
                        (reparse-symbol indented_block_body) [5721 5795])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5815 5819]))                          )
                        (reparse-symbol indented_block_body) [5800 5873])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5954 5958])
                            ("start" variable nil (reparse-symbol function_parameters) [5960 5965])
                            ("stop" variable nil (reparse-symbol function_parameters) [5967 5971])
                            ("step" variable nil (reparse-symbol function_parameters) [5978 5982])
                            ("_int" variable nil (reparse-symbol function_parameters) [5986 5990]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        ")
                        (reparse-symbol indented_block_body) [5940 7501])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7518 7522])
                            ("a" variable nil (reparse-symbol function_parameters) [7524 7525])
                            ("b" variable nil (reparse-symbol function_parameters) [7527 7528]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [7506 7659])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7679 7683])
                            ("n" variable nil (reparse-symbol function_parameters) [7685 7686])
                            ("int" variable nil (reparse-symbol function_parameters) [7688 7691])
                            ("maxsize" variable nil (reparse-symbol function_parameters) [7697 7704])
                            ("type" variable nil (reparse-symbol function_parameters) [7713 7717])
                            ("Method" variable nil (reparse-symbol function_parameters) [7743 7749])
                            ("BuiltinMethod" variable nil (reparse-symbol function_parameters) [7763 7776]))                          )
                        (reparse-symbol indented_block_body) [7664 9007])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9086 9090])
                            ("seq" variable nil (reparse-symbol function_parameters) [9092 9095]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [9075 9346])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9363 9367])
                            ("x" variable nil (reparse-symbol function_parameters) [9369 9370])
                            ("random" variable nil (reparse-symbol function_parameters) [9372 9378]))                          
                        :documentation "Shuffle list x in place, and return None.

        Optional argument random is a 0-argument function returning a
        random float in [0.0, 1.0); if it is the default None, the
        standard random.random will be used.

        ")
                        (reparse-symbol indented_block_body) [9351 10142])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10158 10162])
                            ("population" variable nil (reparse-symbol function_parameters) [10164 10174])
                            ("k" variable nil (reparse-symbol function_parameters) [10176 10177]))                          
                        :documentation "Chooses k unique random elements from a population sequence or set.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use range as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(range(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [10147 12831])
                    ("choices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12848 12852])
                            ("population" variable nil (reparse-symbol function_parameters) [12854 12864])
                            ("weights" variable nil (reparse-symbol function_parameters) [12866 12873])
                            ("cum_weights" variable nil (reparse-symbol function_parameters) [12883 12894])
                            ("k" variable nil (reparse-symbol function_parameters) [12901 12902]))                          
                        :documentation "Return a k sized list of population elements chosen with replacement.

        If the relative weights or cumulative weights are not specified,
        the selections are made with equal probability.

        ")
                        (reparse-symbol indented_block_body) [12836 13829])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13984 13988])
                            ("a" variable nil (reparse-symbol function_parameters) [13990 13991])
                            ("b" variable nil (reparse-symbol function_parameters) [13993 13994]))                          )
                        (reparse-symbol indented_block_body) [13972 14121])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14198 14202])
                            ("low" variable nil (reparse-symbol function_parameters) [14204 14207])
                            ("high" variable nil (reparse-symbol function_parameters) [14213 14217])
                            ("mode" variable nil (reparse-symbol function_parameters) [14223 14227]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14183 14786])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14875 14879])
                            ("mu" variable nil (reparse-symbol function_parameters) [14881 14883])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14885 14890]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14857 15550])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15643 15647])
                            ("mu" variable nil (reparse-symbol function_parameters) [15649 15651])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15653 15658]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15624 15978])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16070 16074])
                            ("lambd" variable nil (reparse-symbol function_parameters) [16076 16081]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [16054 16695])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16789 16793])
                            ("mu" variable nil (reparse-symbol function_parameters) [16795 16797])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16799 16804]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16769 18159])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18246 18250])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18252 18257])
                            ("beta" variable nil (reparse-symbol function_parameters) [18259 18263]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18229 20453])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20541 20545])
                            ("mu" variable nil (reparse-symbol function_parameters) [20547 20549])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20551 20556]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20531 21867])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22363 22367])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22369 22374])
                            ("beta" variable nil (reparse-symbol function_parameters) [22376 22380]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22347 22840])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22916 22920])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22922 22927]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22898 23091])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23169 23173])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23175 23180])
                            ("beta" variable nil (reparse-symbol function_parameters) [23182 23186]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [23150 23439]))                  
                :type "class")
                nil [2154 23439])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23787 23791]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [23776 23929])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23950 23954])
                            ("k" variable nil (reparse-symbol function_parameters) [23956 23957]))                          
                        :documentation "getrandbits(k) -> x.  Generates an int with k random bits.")
                        (reparse-symbol indented_block_body) [23934 24423])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24437 24441])
                            ("args" variable nil (reparse-symbol function_parameters) [24443 24448])
                            ("kwds" variable nil (reparse-symbol function_parameters) [24450 24456]))                          )
                        (reparse-symbol indented_block_body) [24428 24550])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24575 24579])
                            ("args" variable nil (reparse-symbol function_parameters) [24581 24586])
                            ("kwds" variable nil (reparse-symbol function_parameters) [24588 24594]))                          )
                        (reparse-symbol indented_block_body) [24555 24753])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [24757 24794]))                  
                :type "class")
                nil [23511 24795])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [24875 24876])
                ("func" variable nil (reparse-symbol function_parameters) [24878 24882])
                ("args" variable nil (reparse-symbol function_parameters) [24884 24888]))              ) nil [24855 25422])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [25434 25435]))              ) nil [25424 26222])
            ("_inst" variable nil nil [26554 26570])
            ("seed" variable nil nil [26571 26588])
            ("random" variable nil nil [26589 26610])
            ("uniform" variable nil nil [26611 26634])
            ("triangular" variable nil nil [26635 26664])
            ("randint" variable nil nil [26665 26688])
            ("choice" variable nil nil [26689 26710])
            ("randrange" variable nil nil [26711 26738])
            ("sample" variable nil nil [26739 26760])
            ("shuffle" variable nil nil [26761 26784])
            ("choices" variable nil nil [26785 26808])
            ("normalvariate" variable nil nil [26809 26844])
            ("lognormvariate" variable nil nil [26845 26882])
            ("expovariate" variable nil nil [26883 26914])
            ("vonmisesvariate" variable nil nil [26915 26954])
            ("gammavariate" variable nil nil [26955 26988])
            ("gauss" variable nil nil [26989 27008])
            ("betavariate" variable nil nil [27009 27040])
            ("paretovariate" variable nil nil [27041 27076])
            ("weibullvariate" variable nil nil [27077 27114])
            ("getstate" variable nil nil [27115 27140])
            ("setstate" variable nil nil [27141 27166])
            ("getrandbits" variable nil nil [27167 27198])
            ("if" code nil nil [27200 27239]))          
      :file "random.py"
      :pointmax 27239
      :fsize 27238
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 14521 . 14522) (IF 14529 . 14531) (ELSE 14545 . 14549) (MULT 12880 . 12881) (COMMA 12881 . 12882) (RAISE 9257 . 9262) (FROM 9314 . 9318) (NEWLINE 9323 . 9324) (INDENT_BLOCK 4945 . 4984) (NEWLINE 4944 . 4945) (COLON 4943 . 4944) (TRY 4830 . 4833) (AS 4939 . 4941) (NAME 3728 . 3729) (IF 3735 . 3737) (ELSE 3746 . 3750) (NAME 3571 . 3572) (IF 3590 . 3592) (ELSE 3595 . 3599)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("sys" include nil nil [47 57])
            ("__all__" variable nil nil [60 218])
            ("showwarning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [236 243])
                    ("category" variable nil (reparse-symbol function_parameters) [245 253])
                    ("filename" variable nil (reparse-symbol function_parameters) [255 263])
                    ("lineno" variable nil (reparse-symbol function_parameters) [265 271])
                    ("file" variable nil (reparse-symbol function_parameters) [273 277])
                    ("line" variable nil (reparse-symbol function_parameters) [284 288]))                  )
                nil [220 463])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [482 489])
                    ("category" variable nil (reparse-symbol function_parameters) [491 499])
                    ("filename" variable nil (reparse-symbol function_parameters) [501 509])
                    ("lineno" variable nil (reparse-symbol function_parameters) [511 517])
                    ("line" variable nil (reparse-symbol function_parameters) [519 523]))                  )
                nil [464 698])
            ("_showwarnmsg_impl" function (:arguments 
              ( ("msg" variable nil (reparse-symbol function_parameters) [721 724]))              ) nil [699 1102])
            ("_formatwarnmsg_impl" function (:arguments 
              ( ("msg" variable nil (reparse-symbol function_parameters) [1127 1130]))              ) nil [1103 2639])
            ("_showwarning_orig" variable nil nil [2697 2728])
            ("_showwarnmsg" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [2747 2750]))                  )
                nil [2730 3300])
            ("_formatwarning_orig" variable nil nil [3358 3393])
            ("_formatwarnmsg" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [3414 3417]))                  )
                nil [3395 3800])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [3820 3826])
                    ("message" variable nil (reparse-symbol function_parameters) [3828 3835])
                    ("category" variable nil (reparse-symbol function_parameters) [3840 3848])
                    ("module" variable nil (reparse-symbol function_parameters) [3858 3864])
                    ("lineno" variable nil (reparse-symbol function_parameters) [3869 3875])
                    ("append" variable nil (reparse-symbol function_parameters) [3898 3904]))                  )
                nil [3801 5026])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [5044 5050])
                    ("category" variable nil (reparse-symbol function_parameters) [5052 5060])
                    ("lineno" variable nil (reparse-symbol function_parameters) [5070 5076])
                    ("append" variable nil (reparse-symbol function_parameters) [5080 5086]))                  )
                nil [5027 5818])
            ("_add_filter" function (:arguments 
              ( ("item" variable nil (reparse-symbol function_parameters) [5835 5840])
                ("append" variable nil (reparse-symbol function_parameters) [5842 5848]))              ) nil [5819 6230])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [6231 6371])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [6462 6466]))                  
                :type "class")
                nil [6372 6467])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [6546 6550]))              ) nil [6526 6721])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [6768 6771]))              ) nil [6753 7579])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [7621 7627]))              ) nil [7606 7906])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [7950 7958]))              ) nil [7933 8766])
            ("_is_internal_frame" function
               (:documentation "Signal whether the frame is an internal CPython implementation detail."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [8791 8796]))                  )
                nil [8768 8984])
            ("_next_external_frame" function
               (:documentation "Find the next frame that doesn't involve CPython internals."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [9011 9016]))                  )
                nil [8986 9219])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [9269 9276])
                    ("category" variable nil (reparse-symbol function_parameters) [9278 9286])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [9293 9303])
                    ("source" variable nil (reparse-symbol function_parameters) [9307 9313]))                  )
                nil [9260 11278])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [11297 11304])
                ("category" variable nil (reparse-symbol function_parameters) [11306 11314])
                ("filename" variable nil (reparse-symbol function_parameters) [11316 11324])
                ("lineno" variable nil (reparse-symbol function_parameters) [11326 11332])
                ("module" variable nil (reparse-symbol function_parameters) [11352 11358])
                ("registry" variable nil (reparse-symbol function_parameters) [11365 11373])
                ("module_globals" variable nil (reparse-symbol function_parameters) [11380 11394])
                ("source" variable nil (reparse-symbol function_parameters) [11419 11425]))              ) nil [11279 13507])
            ("WarningMessage" type
               (:superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [13544 13658])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [13781 13804])
                            ("for" code nil (reparse-symbol indented_block_body) [13813 13900])
                            ("None" code nil (reparse-symbol indented_block_body) [13965 13969]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13677 13681])
                            ("message" variable nil (reparse-symbol function_parameters) [13683 13690])
                            ("category" variable nil (reparse-symbol function_parameters) [13692 13700])
                            ("filename" variable nil (reparse-symbol function_parameters) [13702 13710])
                            ("lineno" variable nil (reparse-symbol function_parameters) [13712 13718])
                            ("file" variable nil (reparse-symbol function_parameters) [13720 13724])
                            ("line" variable nil (reparse-symbol function_parameters) [13748 13752])
                            ("source" variable nil (reparse-symbol function_parameters) [13759 13765]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13664 13970])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13987 13991]))                          )
                        (reparse-symbol indented_block_body) [13975 14218]))                  
                :type "class")
                nil [13509 14218])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [14980 15220])
                            ("self" variable nil (reparse-symbol indented_block_body) [15229 15250])
                            ("module" code nil (reparse-symbol indented_block_body) [15321 15327])
                            ("self" variable nil (reparse-symbol indented_block_body) [15336 15357]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14935 14939])
                            ("record" variable nil (reparse-symbol function_parameters) [14944 14950])
                            ("module" variable nil (reparse-symbol function_parameters) [14958 14964]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14922 15358])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15376 15380]))                          )
                        (reparse-symbol indented_block_body) [15363 15658])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15677 15681]))                          )
                        (reparse-symbol indented_block_body) [15663 16422])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16440 16444])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [16446 16455]))                          )
                        (reparse-symbol indented_block_body) [16427 16769]))                  
                :type "class")
                nil [14220 16769])
            ("_warnings_defaults" variable nil nil [17221 17247])
            ("try" code nil nil [17248 17690])
            ("_processoptions" code nil nil [17716 17748])
            ("if" code nil nil [17749 18465])
            ("del" code nil nil [18466 18488]))          
      :file "warnings.py"
      :pointmax 18489
      :fsize 18488
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 15259 . 15263) (IF 15298 . 15300) (ELSE 15316 . 15320) (MULT 14941 . 14942) (COMMA 14942 . 14943) (NAME 13908 . 13912) (IF 13948 . 13950) (ELSE 13960 . 13964) (INDENT_BLOCK 6651 . 6721) (NEWLINE 6650 . 6651) (COLON 6649 . 6650) (TRY 6582 . 6585) (AS 6643 . 6645)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix or nt, e.g. unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix' or 'nt'
  - os.curdir is a string representing the current directory (always '.')
  - os.pardir is a string representing the parent directory (always '..')
  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1110])
            ("abc" include nil nil [1115 1125])
            ("errno" include nil nil [1126 1143])
            ("sys" include nil nil [1126 1143])
            ("stat" include nil nil [1144 1161])
            ("_names" variable nil nil [1163 1196])
            ("__all__" variable nil nil [1246 1492])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1506 1510]))              ) nil [1494 1542])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1565 1571]))              ) nil [1543 1701])
            ("if" code nil nil [1814 2630])
            ("sys" variable nil nil [2631 2660])
            ("" code nil nil [2681 2749])
            ("del" code nil nil [2751 2761])
            ("if" code nil nil [2764 5986])
            ("SEEK_SET" variable nil nil [6178 6190])
            ("SEEK_CUR" variable nil nil [6191 6203])
            ("SEEK_END" variable nil nil [6204 6216])
            ("makedirs" function
               (:documentation "makedirs(name [, mode=0o777][, exist_ok=False])

    Super-mkdir; create a leaf directory and all intermediate ones.  Works like
    mkdir, except that any intermediate path segment (not just the rightmost)
    will be created if it does not exist. If the target directory already
    exists, raise an OSError if exist_ok is False. Otherwise no exception is
    raised.  This is recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [6322 6326])
                    ("mode" variable nil (reparse-symbol function_parameters) [6328 6332])
                    ("exist_ok" variable nil (reparse-symbol function_parameters) [6340 6348]))                  )
                nil [6309 7538])
            ("removedirs" function
               (:documentation "removedirs(name)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [7554 7558]))                  )
                nil [7539 8247])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [8260 8263])
                    ("new" variable nil (reparse-symbol function_parameters) [8265 8268]))                  )
                nil [8248 9117])
            ("__all__" code nil nil [9118 9171])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune the
    search, or to impose a specific order of visiting.  Modifying dirnames when
    topdown is false is ineffective, since the directories in dirnames have
    already been generated by the time dirnames itself is generated. No matter
    the value of topdown, the list of subdirectories is retrieved before the
    tuples for the directory and its subdirectories are generated.

    By default errors from the os.scandir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an OSError instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print(root, \"consumes\", end=\"\")
        print(sum([getsize(join(root, name)) for name in files]), end=\"\")
        print(\"bytes in\", len(files), \"non-directory files\")
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories

    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [9182 9185])
                    ("topdown" variable nil (reparse-symbol function_parameters) [9187 9194])
                    ("onerror" variable nil (reparse-symbol function_parameters) [9201 9208])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [9215 9226]))                  )
                nil [9173 14995])
            ("__all__" code nil nil [14996 15018])
            ("if" code nil nil [15020 18990])
            ("try" code nil nil [19031 19083])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19094 19098])
                    ("args" variable nil (reparse-symbol function_parameters) [19100 19105]))                  )
                nil [19084 19253])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19265 19269])
                    ("args" variable nil (reparse-symbol function_parameters) [19271 19276]))                  )
                nil [19254 19480])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19492 19496])
                    ("args" variable nil (reparse-symbol function_parameters) [19498 19503]))                  )
                nil [19481 19689])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19702 19706])
                    ("args" variable nil (reparse-symbol function_parameters) [19708 19713]))                  )
                nil [19690 19959])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19971 19975])
                    ("args" variable nil (reparse-symbol function_parameters) [19977 19981]))                  )
                nil [19960 20212])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [20225 20229])
                    ("args" variable nil (reparse-symbol function_parameters) [20231 20235])
                    ("env" variable nil (reparse-symbol function_parameters) [20237 20240]))                  )
                nil [20213 20507])
            ("__all__" code nil nil [20508 20580])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [20595 20599])
                ("args" variable nil (reparse-symbol function_parameters) [20601 20605])
                ("env" variable nil (reparse-symbol function_parameters) [20607 20610]))              ) nil [20582 21547])
            ("get_exec_path" function
               (:documentation "Returns the sequence of directories that will be searched for the
    named executable (similar to a shell) when launching a process.

    *env* must be an environment variable dict or None.  If *env* is None,
    os.environ will be used.
    "
                :arguments 
                  ( ("env" variable nil (reparse-symbol function_parameters) [21567 21570]))                  )
                nil [21549 23020])
            ("_collections_abc" include nil nil [23095 23138])
            ("_Environ" type
               (:superclasses ("MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [23276 23302])
                            ("self" variable nil (reparse-symbol indented_block_body) [23311 23337])
                            ("self" variable nil (reparse-symbol indented_block_body) [23346 23376])
                            ("self" variable nil (reparse-symbol indented_block_body) [23385 23415])
                            ("self" variable nil (reparse-symbol indented_block_body) [23424 23444])
                            ("self" variable nil (reparse-symbol indented_block_body) [23453 23477])
                            ("self" variable nil (reparse-symbol indented_block_body) [23486 23503]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23189 23193])
                            ("data" variable nil (reparse-symbol function_parameters) [23195 23199])
                            ("encodekey" variable nil (reparse-symbol function_parameters) [23201 23210])
                            ("decodekey" variable nil (reparse-symbol function_parameters) [23212 23221])
                            ("encodevalue" variable nil (reparse-symbol function_parameters) [23223 23234])
                            ("decodevalue" variable nil (reparse-symbol function_parameters) [23236 23247])
                            ("putenv" variable nil (reparse-symbol function_parameters) [23249 23255])
                            ("unsetenv" variable nil (reparse-symbol function_parameters) [23257 23265]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23176 23504])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23525 23529])
                            ("key" variable nil (reparse-symbol function_parameters) [23531 23534]))                          )
                        (reparse-symbol indented_block_body) [23509 23765])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23786 23790])
                            ("key" variable nil (reparse-symbol function_parameters) [23792 23795])
                            ("value" variable nil (reparse-symbol function_parameters) [23797 23802]))                          )
                        (reparse-symbol indented_block_body) [23770 23943])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23964 23968])
                            ("key" variable nil (reparse-symbol function_parameters) [23970 23973]))                          )
                        (reparse-symbol indented_block_body) [23948 24227])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24245 24249]))                          )
                        (reparse-symbol indented_block_body) [24232 24321])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24338 24342]))                          )
                        (reparse-symbol indented_block_body) [24326 24376])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24394 24398]))                          )
                        (reparse-symbol indented_block_body) [24381 24583])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24597 24601]))                          )
                        (reparse-symbol indented_block_body) [24588 24630])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24650 24654])
                            ("key" variable nil (reparse-symbol function_parameters) [24656 24659])
                            ("value" variable nil (reparse-symbol function_parameters) [24661 24666]))                          )
                        (reparse-symbol indented_block_body) [24635 24752]))                  
                :type "class")
                nil [23140 24752])
            ("try" code nil nil [24753 24906])
            ("try" code nil nil [24907 25075])
            ("_createenviron" function nil nil [25076 26119])
            ("environ" variable nil nil [26138 26164])
            ("del" code nil nil [26165 26183])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default.
    key, default and the result are str."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [26197 26200])
                    ("default" variable nil (reparse-symbol function_parameters) [26202 26209]))                  )
                nil [26186 26434])
            ("supports_bytes_environ" variable nil nil [26435 26474])
            ("__all__" code nil nil [26475 26527])
            ("if" code nil nil [26529 27209])
            ("_fscodec" function nil nil [27210 28405])
            ("fsencode, fsdecode" code nil nil [28406 28437])
            ("del" code nil nil [28438 28450])
            ("if" code nil nil [28495 31737])
            ("if" code nil nil [31739 32714])
            ("if" code nil nil [32716 33798])
            ("popen" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [33830 33833])
                ("mode" variable nil (reparse-symbol function_parameters) [33835 33839])
                ("buffering" variable nil (reparse-symbol function_parameters) [33845 33854]))              ) nil [33820 34727])
            ("_wrap_close" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [34870 34891])
                            ("self" variable nil (reparse-symbol indented_block_body) [34900 34917]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34841 34845])
                            ("stream" variable nil (reparse-symbol function_parameters) [34847 34853])
                            ("proc" variable nil (reparse-symbol function_parameters) [34855 34859]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34828 34918])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34932 34936]))                          )
                        (reparse-symbol indented_block_body) [34922 35199])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35217 35221]))                          )
                        (reparse-symbol indented_block_body) [35203 35244])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35261 35265])
                            ("args" variable nil (reparse-symbol function_parameters) [35267 35272]))                          )
                        (reparse-symbol indented_block_body) [35248 35296])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35316 35320])
                            ("name" variable nil (reparse-symbol function_parameters) [35322 35326]))                          )
                        (reparse-symbol indented_block_body) [35300 35372])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35389 35393]))                          )
                        (reparse-symbol indented_block_body) [35376 35430]))                  
                :type "class")
                nil [34805 35430])
            ("fdopen" function (:arguments 
              ( ("fd" variable nil (reparse-symbol function_parameters) [35463 35465])
                ("args" variable nil (reparse-symbol function_parameters) [35467 35472])
                ("kwargs" variable nil (reparse-symbol function_parameters) [35474 35482]))              ) nil [35452 35648])
            ("_fspath" function
               (:documentation "Return the path representation of a path-like object.

    If str or bytes is passed in, it is returned unchanged. Otherwise the
    os.PathLike interface is used to get the path representation. If the
    path representation is not str or bytes, TypeError is raised. If the
    provided path is not str, bytes, or os.PathLike, TypeError is raised.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [35758 35762]))                  )
                nil [35746 36880])
            ("if" code nil nil [36996 37074])
            ("PathLike" type
               (:documentation "Abstract base class for implementing the file system path protocol."
                :superclasses ("abc.ABC")
                :members 
                  ( ("__fspath__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37224 37228]))                          
                        :documentation "Return the file system path representation of the object.")
                        (reparse-symbol indented_block_body) [37185 37337])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37380 37383])
                            ("subclass" variable nil (reparse-symbol function_parameters) [37385 37393]))                          )
                        (reparse-symbol indented_block_body) [37342 37443]))                  
                :type "class")
                nil [37076 37443]))          
      :file "os.py"
      :pointmax 37443
      :fsize 37442
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((RAISE 24197 . 24202) (FROM 24217 . 24221) (NEWLINE 24226 . 24227) (RAISE 23696 . 23701) (FROM 23716 . 23720) (NEWLINE 23725 . 23726) (INDENT_BLOCK 21213 . 21442) (NEWLINE 21212 . 21213) (COLON 21211 . 21212) (TRY 21137 . 21140) (AS 21207 . 21209) (INDENT_BLOCK 18504 . 18602) (NEWLINE 18503 . 18504) (COLON 18502 . 18503) (TRY 18321 . 18324) (AS 18496 . 18498) (MULT 15143 . 15144) (COMMA 15144 . 15145) (INDENT_BLOCK 12890 . 12988) (NEWLINE 12889 . 12890) (COLON 12888 . 12889) (TRY 12718 . 12721) (AS 12880 . 12882) (INDENT_BLOCK 12590 . 12664) (NEWLINE 12589 . 12590) (COLON 12588 . 12589) (TRY 12434 . 12437) (AS 12580 . 12582)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__doc__" variable nil nil [119 2225])
            ("__always_supported" variable nil nil [2337 2575])
            ("algorithms_guaranteed" variable nil nil [2578 2625])
            ("algorithms_available" variable nil nil [2626 2672])
            ("__all__" code nil nil [2674 2808])
            ("__builtin_constructor_cache" variable nil nil [2811 2843])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2875 2879]))              ) nil [2845 4517])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [4549 4553]))              ) nil [4519 5056])
            ("__py_new" function
               (:documentation "new(name, data=b'', **kwargs) - Return a new hashing object using the
    named algorithm; optionally initialized with data (which must be bytes).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [5071 5075])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [5087 5095]))                  )
                nil [5058 5319])
            ("__hash_new" function
               (:documentation "new(name, data=b'') - Return a new hashing object using the named algorithm;
    optionally initialized with data (which must be bytes).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [5336 5340])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [5352 5360]))                  )
                nil [5321 6244])
            ("try" code nil nil [6246 6516])
            ("try" code nil nil [6517 8916])
            ("try" code nil nil [8917 9028])
            ("for" code nil nil [9030 9357])
            ("del" code nil nil [9378 9425])
            ("del" code nil nil [9426 9477]))          
      :file "hashlib.py"
      :pointmax 9478
      :fsize 9477
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((COMMA 5350 . 5351) (NAME 5342 . 5346) (STRING_LITERAL 5348 . 5350) (COMMA 5085 . 5086) (NAME 5077 . 5081) (STRING_LITERAL 5083 . 5085)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Bisection algorithms.\"\"\"" code nil nil [1 28])
            ("insort_right" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47 48])
                    ("x" variable nil (reparse-symbol function_parameters) [50 51])
                    ("lo" variable nil (reparse-symbol function_parameters) [53 55])
                    ("hi" variable nil (reparse-symbol function_parameters) [59 61]))                  )
                nil [30 547])
            ("insort" variable nil nil [548 569])
            ("bisect_right" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [615 616])
                    ("x" variable nil (reparse-symbol function_parameters) [618 619])
                    ("lo" variable nil (reparse-symbol function_parameters) [621 623])
                    ("hi" variable nil (reparse-symbol function_parameters) [627 629]))                  )
                nil [598 1254])
            ("bisect" variable nil nil [1255 1276])
            ("insort_left" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1321 1322])
                    ("x" variable nil (reparse-symbol function_parameters) [1324 1325])
                    ("lo" variable nil (reparse-symbol function_parameters) [1327 1329])
                    ("hi" variable nil (reparse-symbol function_parameters) [1333 1335]))                  )
                nil [1305 1819])
            ("bisect_left" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1837 1838])
                    ("x" variable nil (reparse-symbol function_parameters) [1840 1841])
                    ("lo" variable nil (reparse-symbol function_parameters) [1843 1845])
                    ("hi" variable nil (reparse-symbol function_parameters) [1849 1851]))                  )
                nil [1821 2476])
            ("try" code nil nil [2536 2596]))          
      :file "bisect.py"
      :pointmax 2596
      :fsize 2595
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function
               (:documentation "Return the portion of the file's mode that can be set by
    os.chmod().
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))                  )
                nil [351 483])
            ("S_IFMT" function
               (:documentation "Return the portion of the file's mode that describes the
    file type.
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [495 499]))                  )
                nil [484 616])
            ("S_IFDIR" variable nil nil [713 732])
            ("S_IFCHR" variable nil nil [746 765])
            ("S_IFBLK" variable nil nil [786 805])
            ("S_IFREG" variable nil nil [822 841])
            ("S_IFIFO" variable nil nil [858 877])
            ("S_IFLNK" variable nil nil [899 918])
            ("S_IFSOCK" variable nil nil [936 955])
            ("S_ISDIR" function
               (:documentation "Return True if mode is from a directory."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1024 1028]))                  )
                nil [1012 1117])
            ("S_ISCHR" function
               (:documentation "Return True if mode is from a character special device file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1130 1134]))                  )
                nil [1118 1243])
            ("S_ISBLK" function
               (:documentation "Return True if mode is from a block special device file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1256 1260]))                  )
                nil [1244 1365])
            ("S_ISREG" function
               (:documentation "Return True if mode is from a regular file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1378 1382]))                  )
                nil [1366 1474])
            ("S_ISFIFO" function
               (:documentation "Return True if mode is from a FIFO (named pipe)."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1488 1492]))                  )
                nil [1475 1589])
            ("S_ISLNK" function
               (:documentation "Return True if mode is from a symbolic link."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1602 1606]))                  )
                nil [1590 1699])
            ("S_ISSOCK" function
               (:documentation "Return True if mode is from a socket."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1713 1717]))                  )
                nil [1700 1804])
            ("S_ISUID" variable nil nil [1834 1850])
            ("S_ISGID" variable nil nil [1866 1882])
            ("S_ENFMT" variable nil nil [1898 1915])
            ("S_ISVTX" variable nil nil [1943 1959])
            ("S_IREAD" variable nil nil [1974 1990])
            ("S_IWRITE" variable nil nil [2022 2039])
            ("S_IEXEC" variable nil nil [2070 2086])
            ("S_IRWXU" variable nil nil [2118 2134])
            ("S_IRUSR" variable nil nil [2165 2181])
            ("S_IWUSR" variable nil nil [2199 2215])
            ("S_IXUSR" variable nil nil [2234 2250])
            ("S_IRWXG" variable nil nil [2271 2287])
            ("S_IRGRP" variable nil nil [2318 2334])
            ("S_IWGRP" variable nil nil [2352 2368])
            ("S_IXGRP" variable nil nil [2387 2403])
            ("S_IRWXO" variable nil nil [2424 2440])
            ("S_IROTH" variable nil nil [2487 2503])
            ("S_IWOTH" variable nil nil [2522 2538])
            ("S_IXOTH" variable nil nil [2558 2574])
            ("UF_NODUMP" variable nil nil [2621 2646])
            ("UF_IMMUTABLE" variable nil nil [2667 2692])
            ("UF_APPEND" variable nil nil [2720 2745])
            ("UF_OPAQUE" variable nil nil [2778 2803])
            ("UF_NOUNLINK" variable nil nil [2861 2886])
            ("UF_COMPRESSED" variable nil nil [2925 2951])
            ("UF_HIDDEN" variable nil nil [2983 3008])
            ("SF_ARCHIVED" variable nil nil [3047 3072])
            ("SF_IMMUTABLE" variable nil nil [3097 3122])
            ("SF_APPEND" variable nil nil [3150 3175])
            ("SF_NOUNLINK" variable nil nil [3208 3233])
            ("SF_SNAPSHOT" variable nil nil [3272 3297])
            ("_filemode_table" variable nil nil [3327 3975])
            ("filemode" function
               (:documentation "Convert a file's mode to a string of the form '-rwxrwxrwx'."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [3990 3994]))                  )
                nil [3977 4305])
            ("FILE_ATTRIBUTE_ARCHIVE" variable nil nil [4402 4429])
            ("FILE_ATTRIBUTE_COMPRESSED" variable nil nil [4430 4462])
            ("FILE_ATTRIBUTE_DEVICE" variable nil nil [4463 4489])
            ("FILE_ATTRIBUTE_DIRECTORY" variable nil nil [4490 4519])
            ("FILE_ATTRIBUTE_ENCRYPTED" variable nil nil [4520 4552])
            ("FILE_ATTRIBUTE_HIDDEN" variable nil nil [4553 4578])
            ("FILE_ATTRIBUTE_INTEGRITY_STREAM" variable nil nil [4579 4618])
            ("FILE_ATTRIBUTE_NORMAL" variable nil nil [4619 4646])
            ("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" variable nil nil [4647 4688])
            ("FILE_ATTRIBUTE_NO_SCRUB_DATA" variable nil nil [4689 4726])
            ("FILE_ATTRIBUTE_OFFLINE" variable nil nil [4727 4756])
            ("FILE_ATTRIBUTE_READONLY" variable nil nil [4757 4784])
            ("FILE_ATTRIBUTE_REPARSE_POINT" variable nil nil [4785 4820])
            ("FILE_ATTRIBUTE_SPARSE_FILE" variable nil nil [4821 4853])
            ("FILE_ATTRIBUTE_SYSTEM" variable nil nil [4854 4879])
            ("FILE_ATTRIBUTE_TEMPORARY" variable nil nil [4880 4910])
            ("FILE_ATTRIBUTE_VIRTUAL" variable nil nil [4911 4941])
            ("try" code nil nil [4981 5039]))          
      :file "stat.py"
      :pointmax 5039
      :fsize 5038
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "Formatter.py"
      :fsize 15143
      :lastmodtime '(22880 24727 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1860])
            ("__all__" code nil nil [1862 1913])
            ("CO_NESTED" variable nil nil [2137 2166])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2185 2209])
            ("CO_FUTURE_DIVISION" variable nil nil [2253 2282])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2296 2330])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2369 2403])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2423 2458])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2478 2514])
            ("CO_FUTURE_BARRY_AS_BDFL" variable nil nil [2541 2574])
            ("CO_FUTURE_GENERATOR_STOP" variable nil nil [2575 2610])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2761 2792])
                            ("self" variable nil (reparse-symbol indented_block_body) [2801 2834])
                            ("self" variable nil (reparse-symbol indented_block_body) [2843 2877]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2696 2700])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2702 2717])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2719 2735])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2737 2750]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2683 2878])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2906 2910]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2883 3091])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3120 3124]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [3096 3356])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3374 3378]))                          )
                        (reparse-symbol indented_block_body) [3361 3535]))                  
                :type "class")
                nil [2663 3535])
            ("nested_scopes" variable nil nil [3536 3667])
            ("generators" variable nil nil [3669 3802])
            ("division" variable nil nil [3804 3929])
            ("absolute_import" variable nil nil [3931 4084])
            ("with_statement" variable nil nil [4086 4235])
            ("print_function" variable nil nil [4237 4386])
            ("unicode_literals" variable nil nil [4388 4545])
            ("barry_as_FLUFL" variable nil nil [4547 4693])
            ("generator_stop" variable nil nil [4695 4841]))          
      :file "__future__.py"
      :pointmax 4842
      :fsize 4841
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("weakref" include nil nil [1763 1777])
            ("copyreg" include nil nil [1778 1812])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1842 1846]))                  
                :type "class")
                nil [1814 1847])
            ("error" variable nil nil [1847 1860])
            ("try" code nil nil [1889 1981])
            ("__all__" variable nil nil [1982 2021])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2032 2033]))                  )
                nil [2023 3031])
            ("_copy_dispatch" variable nil nil [3033 3056])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3078 3079]))              ) nil [3058 3095])
            ("for" code nil nil [3095 3350])
            ("t" variable nil nil [3350 3386])
            ("if" code nil nil [3387 3432])
            ("d" variable nil nil [3433 3452])
            ("d" variable nil nil [3453 3472])
            ("d" variable nil nil [3473 3490])
            ("d" variable nil nil [3491 3520])
            ("if" code nil nil [3522 3588])
            ("del" code nil nil [3589 3597])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [3612 3613])
                    ("memo" variable nil (reparse-symbol function_parameters) [3615 3619])
                    ("_nil" variable nil (reparse-symbol function_parameters) [3626 3630]))                  )
                nil [3599 5239])
            ("_deepcopy_dispatch" variable nil nil [5240 5267])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5290 5291])
                ("memo" variable nil (reparse-symbol function_parameters) [5293 5297]))              ) nil [5269 5313])
            ("d" variable nil nil [5313 5345])
            ("d" variable nil nil [5346 5382])
            ("d" variable nil nil [5383 5425])
            ("d" variable nil nil [5426 5451])
            ("d" variable nil nil [5452 5479])
            ("d" variable nil nil [5480 5506])
            ("d" variable nil nil [5507 5536])
            ("d" variable nil nil [5537 5564])
            ("d" variable nil nil [5565 5590])
            ("try" code nil nil [5591 5669])
            ("d" variable nil nil [5669 5695])
            ("d" variable nil nil [5696 5743])
            ("d" variable nil nil [5744 5784])
            ("d" variable nil nil [5785 5818])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5839 5840])
                ("memo" variable nil (reparse-symbol function_parameters) [5842 5846])
                ("deepcopy" variable nil (reparse-symbol function_parameters) [5848 5856]))              ) nil [5820 5984])
            ("d" variable nil nil [5984 6008])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6030 6031])
                ("memo" variable nil (reparse-symbol function_parameters) [6033 6037])
                ("deepcopy" variable nil (reparse-symbol function_parameters) [6039 6047]))              ) nil [6010 6455])
            ("d" variable nil nil [6455 6481])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6502 6503])
                ("memo" variable nil (reparse-symbol function_parameters) [6505 6509])
                ("deepcopy" variable nil (reparse-symbol function_parameters) [6511 6519]))              ) nil [6483 6663])
            ("d" variable nil nil [6663 6687])
            ("if" code nil nil [6688 6752])
            ("_deepcopy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6774 6775])
                ("memo" variable nil (reparse-symbol function_parameters) [6777 6781]))              ) nil [6753 6867])
            ("d" variable nil nil [6867 6905])
            ("del" code nil nil [6907 6912])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [6930 6931])
                    ("memo" variable nil (reparse-symbol function_parameters) [6933 6937]))                  )
                nil [6914 7415])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7433 7434])
                ("memo" variable nil (reparse-symbol function_parameters) [7436 7440])
                ("func" variable nil (reparse-symbol function_parameters) [7442 7446])
                ("args" variable nil (reparse-symbol function_parameters) [7448 7452])
                ("state" variable nil (reparse-symbol function_parameters) [7471 7476])
                ("listiter" variable nil (reparse-symbol function_parameters) [7483 7491])
                ("dictiter" variable nil (reparse-symbol function_parameters) [7498 7506])
                ("deepcopy" variable nil (reparse-symbol function_parameters) [7530 7538]))              ) nil [7416 8783])
            ("del" code nil nil [8784 8815]))          
      :file "copy.py"
      :pointmax 8816
      :fsize 8815
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Concrete date/time and related types.

See http://www.iana.org/time-zones/repository/tz-link.html for
time zone and DST data sources.
\"\"\"" code nil nil [1 141])
            ("time" include nil nil [143 163])
            ("math" include nil nil [164 184])
            ("_cmp" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [195 196])
                ("y" variable nil (reparse-symbol function_parameters) [198 199]))              ) nil [186 249])
            ("MINYEAR" variable nil nil [250 261])
            ("MAXYEAR" variable nil nil [262 276])
            ("_MAXORDINAL" variable nil nil [277 298])
            ("_DAYS_IN_MONTH" variable nil nil [953 1022])
            ("_DAYS_BEFORE_MONTH" variable nil nil [1024 1049])
            ("dbm" variable nil nil [1096 1103])
            ("for" code nil nil [1104 1185])
            ("del" code nil nil [1185 1197])
            ("_is_leap" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [1212 1216]))              ) nil [1199 1323])
            ("_days_before_year" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [1346 1350]))              ) nil [1324 1469])
            ("_days_in_month" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [1489 1493])
                ("month" variable nil (reparse-symbol function_parameters) [1495 1500]))              ) nil [1470 1691])
            ("_days_before_month" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [1715 1719])
                ("month" variable nil (reparse-symbol function_parameters) [1721 1726]))              ) nil [1692 1927])
            ("_ymd2ord" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [1941 1945])
                ("month" variable nil (reparse-symbol function_parameters) [1947 1952])
                ("day" variable nil (reparse-symbol function_parameters) [1954 1957]))              ) nil [1928 2281])
            ("_DI400Y" variable nil nil [2282 2314])
            ("_DI100Y" variable nil nil [2348 2380])
            ("_DI4Y" variable nil nil [2412 2442])
            ("assert" code nil nil [2575 2602])
            ("assert" code nil nil [2718 2751])
            ("assert" code nil nil [2857 2889])
            ("_ord2ymd" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [2904 2905]))              ) nil [2891 5596])
            ("_MONTHNAMES" variable nil nil [5670 5795])
            ("_DAYNAMES" variable nil nil [5796 5863])
            ("_build_struct_time" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [5889 5890])
                ("m" variable nil (reparse-symbol function_parameters) [5892 5893])
                ("d" variable nil (reparse-symbol function_parameters) [5895 5896])
                ("hh" variable nil (reparse-symbol function_parameters) [5898 5900])
                ("mm" variable nil (reparse-symbol function_parameters) [5902 5904])
                ("ss" variable nil (reparse-symbol function_parameters) [5906 5908])
                ("dstflag" variable nil (reparse-symbol function_parameters) [5910 5917]))              ) nil [5866 6072])
            ("_format_time" function (:arguments 
              ( ("hh" variable nil (reparse-symbol function_parameters) [6090 6092])
                ("mm" variable nil (reparse-symbol function_parameters) [6094 6096])
                ("ss" variable nil (reparse-symbol function_parameters) [6098 6100])
                ("us" variable nil (reparse-symbol function_parameters) [6102 6104])
                ("timespec" variable nil (reparse-symbol function_parameters) [6106 6114]))              ) nil [6073 6711])
            ("_wrap_strftime" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [6797 6803])
                ("format" variable nil (reparse-symbol function_parameters) [6805 6811])
                ("timetuple" variable nil (reparse-symbol function_parameters) [6813 6822]))              ) nil [6778 9114])
            ("_check_tzname" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [9191 9195]))              ) nil [9173 9373])
            ("_check_utc_offset" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [9719 9723])
                ("offset" variable nil (reparse-symbol function_parameters) [9725 9731]))              ) nil [9697 10369])
            ("_check_int_field" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [10391 10396]))              ) nil [10370 10955])
            ("_check_date_fields" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [10979 10983])
                ("month" variable nil (reparse-symbol function_parameters) [10985 10990])
                ("day" variable nil (reparse-symbol function_parameters) [10992 10995]))              ) nil [10956 11458])
            ("_check_time_fields" function (:arguments 
              ( ("hour" variable nil (reparse-symbol function_parameters) [11482 11486])
                ("minute" variable nil (reparse-symbol function_parameters) [11488 11494])
                ("second" variable nil (reparse-symbol function_parameters) [11496 11502])
                ("microsecond" variable nil (reparse-symbol function_parameters) [11504 11515])
                ("fold" variable nil (reparse-symbol function_parameters) [11517 11521]))              ) nil [11459 12198])
            ("_check_tzinfo_arg" function (:arguments 
              ( ("tz" variable nil (reparse-symbol function_parameters) [12221 12223]))              ) nil [12199 12360])
            ("_cmperror" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [12375 12376])
                ("y" variable nil (reparse-symbol function_parameters) [12378 12379]))              ) nil [12361 12492])
            ("_divide_and_round" function
               (:documentation "divide a by b and round result to the nearest integer

    When the ratio is exactly half-way between two integers,
    the even integer is returned.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [12515 12516])
                    ("b" variable nil (reparse-symbol function_parameters) [12518 12519]))                  )
                nil [12493 13120])
            ("timedelta" type
               (:documentation "Represent the difference between two datetime objects.

    Supported operators:

    - add, subtract timedelta
    - unary plus, minus, abs
    - compare to timedelta
    - multiply, divide by int

    In addition, datetime supports subtraction of two datetime objects
    returning a timedelta, and addition or subtraction of a datetime
    and a timedelta giving a datetime.

    Representation: (days, seconds, microseconds).  Why?  Because I
    felt like it.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [13623 13684])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [13702 13705])
                        ("days" variable nil (reparse-symbol function_parameters) [13707 13711])
                        ("seconds" variable nil (reparse-symbol function_parameters) [13715 13722])
                        ("microseconds" variable nil (reparse-symbol function_parameters) [13726 13738])
                        ("milliseconds" variable nil (reparse-symbol function_parameters) [13758 13770])
                        ("minutes" variable nil (reparse-symbol function_parameters) [13774 13781])
                        ("hours" variable nil (reparse-symbol function_parameters) [13785 13790])
                        ("weeks" variable nil (reparse-symbol function_parameters) [13794 13799]))                      ) (reparse-symbol indented_block_body) [13690 17626])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17644 17648]))                          )
                        (reparse-symbol indented_block_body) [17631 18414])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18431 18435]))                          )
                        (reparse-symbol indented_block_body) [18419 18810])
                    ("total_seconds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18833 18837]))                          
                        :documentation "Total seconds in the duration.")
                        (reparse-symbol indented_block_body) [18815 18989])
                    ("days" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19049 19053]))                          
                        :documentation "days")
                        (reparse-symbol indented_block_body) [19026 19101])
                    ("seconds" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19132 19136]))                          
                        :documentation "seconds")
                        (reparse-symbol indented_block_body) [19106 19190])
                    ("microseconds" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19226 19230]))                          
                        :documentation "microseconds")
                        (reparse-symbol indented_block_body) [19195 19294])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19311 19315])
                            ("other" variable nil (reparse-symbol function_parameters) [19317 19322]))                          )
                        (reparse-symbol indented_block_body) [19299 19698])
                    ("__radd__" variable nil (reparse-symbol indented_block_body) [19703 19721])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19739 19743])
                            ("other" variable nil (reparse-symbol function_parameters) [19745 19750]))                          )
                        (reparse-symbol indented_block_body) [19727 20126])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20144 20148])
                            ("other" variable nil (reparse-symbol function_parameters) [20150 20155]))                          )
                        (reparse-symbol indented_block_body) [20131 20262])
                    ("__neg__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20279 20283]))                          )
                        (reparse-symbol indented_block_body) [20267 20518])
                    ("__pos__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20535 20539]))                          )
                        (reparse-symbol indented_block_body) [20523 20562])
                    ("__abs__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20579 20583]))                          )
                        (reparse-symbol indented_block_body) [20567 20676])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20693 20697])
                            ("other" variable nil (reparse-symbol function_parameters) [20699 20704]))                          )
                        (reparse-symbol indented_block_body) [20681 21236])
                    ("__rmul__" variable nil (reparse-symbol indented_block_body) [21241 21259])
                    ("_to_microseconds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21286 21290]))                          )
                        (reparse-symbol indented_block_body) [21265 21398])
                    ("__floordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21420 21424])
                            ("other" variable nil (reparse-symbol function_parameters) [21426 21431]))                          )
                        (reparse-symbol indented_block_body) [21403 21737])
                    ("__truediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21758 21762])
                            ("other" variable nil (reparse-symbol function_parameters) [21764 21769]))                          )
                        (reparse-symbol indented_block_body) [21742 22246])
                    ("__mod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22263 22267])
                            ("other" variable nil (reparse-symbol function_parameters) [22269 22274]))                          )
                        (reparse-symbol indented_block_body) [22251 22453])
                    ("__divmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22473 22477])
                            ("other" variable nil (reparse-symbol function_parameters) [22479 22484]))                          )
                        (reparse-symbol indented_block_body) [22458 22702])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22770 22774])
                            ("other" variable nil (reparse-symbol function_parameters) [22776 22781]))                          )
                        (reparse-symbol indented_block_body) [22759 22905])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22921 22925])
                            ("other" variable nil (reparse-symbol function_parameters) [22927 22932]))                          )
                        (reparse-symbol indented_block_body) [22910 23066])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23082 23086])
                            ("other" variable nil (reparse-symbol function_parameters) [23088 23093]))                          )
                        (reparse-symbol indented_block_body) [23071 23226])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23242 23246])
                            ("other" variable nil (reparse-symbol function_parameters) [23248 23253]))                          )
                        (reparse-symbol indented_block_body) [23231 23387])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23403 23407])
                            ("other" variable nil (reparse-symbol function_parameters) [23409 23414]))                          )
                        (reparse-symbol indented_block_body) [23392 23547])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23561 23565])
                            ("other" variable nil (reparse-symbol function_parameters) [23567 23572]))                          )
                        (reparse-symbol indented_block_body) [23552 23676])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23694 23698]))                          )
                        (reparse-symbol indented_block_body) [23681 23816])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23834 23838]))                          )
                        (reparse-symbol indented_block_body) [23821 23955])
                    ("_getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23997 24001]))                          )
                        (reparse-symbol indented_block_body) [23983 24067])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24087 24091]))                          )
                        (reparse-symbol indented_block_body) [24072 24144]))                  
                :type "class")
                nil [13122 24144])
            ("timedelta" variable nil nil [24145 24182])
            ("timedelta" variable nil nil [24183 24305])
            ("timedelta" variable nil nil [24306 24354])
            ("date" type
               (:documentation "Concrete date type.

    Constructors:

    __new__()
    fromtimestamp()
    today()
    fromordinal()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__
    __add__, __radd__, __sub__ (add/radd only with timedelta arg)

    Methods:

    timetuple()
    toordinal()
    weekday()
    isoweekday(), isocalendar(), isoformat()
    ctime()
    strftime()

    Properties (readonly):
    year, month, day
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24831 24881])
                    ("__new__" function
                       (:documentation "Constructor.

        Arguments:

        year, month, day (required, base 1)
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24899 24902])
                            ("year" variable nil (reparse-symbol function_parameters) [24904 24908])
                            ("month" variable nil (reparse-symbol function_parameters) [24910 24915])
                            ("day" variable nil (reparse-symbol function_parameters) [24922 24925]))                          )
                        (reparse-symbol indented_block_body) [24887 25531])
                    ("fromtimestamp" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [25602 25605])
                            ("t" variable nil (reparse-symbol function_parameters) [25607 25608]))                          )
                        (reparse-symbol indented_block_body) [25567 25778])
                    ("today" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [25810 25813]))                          )
                        (reparse-symbol indented_block_body) [25783 25922])
                    ("fromordinal" function
                       (:documentation "Construct a date from a proleptic Gregorian ordinal.

        January 1 of year 1 is day 1.  Only the year, month and day are
        non-zero in the result.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [25960 25963])
                            ("n" variable nil (reparse-symbol function_parameters) [25965 25966]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25927 26208])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26255 26259]))                          
                        :documentation "Convert to formal string, for repr().

        >>> dt = datetime(2010, 1, 1)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0)'

        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'
        ")
                        (reparse-symbol indented_block_body) [26242 26868])
                    ("ctime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27138 27142]))                          )
                        (reparse-symbol indented_block_body) [27128 27378])
                    ("strftime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27396 27400])
                            ("fmt" variable nil (reparse-symbol function_parameters) [27402 27405]))                          )
                        (reparse-symbol indented_block_body) [27383 27502])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27522 27526])
                            ("fmt" variable nil (reparse-symbol function_parameters) [27528 27531]))                          )
                        (reparse-symbol indented_block_body) [27507 27732])
                    ("isoformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27751 27755]))                          
                        :documentation "Return the date formatted according to ISO.

        This is 'YYYY-MM-DD'.

        References:
        - http://www.w3.org/TR/NOTE-datetime
        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        ")
                        (reparse-symbol indented_block_body) [27737 28048])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [28053 28072])
                    ("year" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28133 28137]))                          
                        :documentation "year (1-9999)")
                        (reparse-symbol indented_block_body) [28110 28194])
                    ("month" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28223 28227]))                          
                        :documentation "month (1-12)")
                        (reparse-symbol indented_block_body) [28199 28284])
                    ("day" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28311 28315]))                          
                        :documentation "day (1-31)")
                        (reparse-symbol indented_block_body) [28289 28368])
                    ("timetuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28485 28489]))                          )
                        (reparse-symbol indented_block_body) [28471 28677])
                    ("toordinal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28696 28700]))                          
                        :documentation "Return proleptic Gregorian ordinal for the year, month and day.

        January 1 of year 1 is day 1.  Only the year, month and day values
        contribute to the result.
        ")
                        (reparse-symbol indented_block_body) [28682 28960])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28977 28981])
                            ("year" variable nil (reparse-symbol function_parameters) [28983 28987])
                            ("month" variable nil (reparse-symbol function_parameters) [28994 28999])
                            ("day" variable nil (reparse-symbol function_parameters) [29006 29009]))                          
                        :documentation "Return a new date with new values for the specified fields.")
                        (reparse-symbol indented_block_body) [28965 29294])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29357 29361])
                            ("other" variable nil (reparse-symbol function_parameters) [29363 29368]))                          )
                        (reparse-symbol indented_block_body) [29346 29478])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29494 29498])
                            ("other" variable nil (reparse-symbol function_parameters) [29500 29505]))                          )
                        (reparse-symbol indented_block_body) [29483 29615])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29631 29635])
                            ("other" variable nil (reparse-symbol function_parameters) [29637 29642]))                          )
                        (reparse-symbol indented_block_body) [29620 29751])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29767 29771])
                            ("other" variable nil (reparse-symbol function_parameters) [29773 29778]))                          )
                        (reparse-symbol indented_block_body) [29756 29888])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29904 29908])
                            ("other" variable nil (reparse-symbol function_parameters) [29910 29915]))                          )
                        (reparse-symbol indented_block_body) [29893 30024])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30038 30042])
                            ("other" variable nil (reparse-symbol function_parameters) [30044 30049]))                          )
                        (reparse-symbol indented_block_body) [30029 30248])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30266 30270]))                          )
                        (reparse-symbol indented_block_body) [30253 30404])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30441 30445])
                            ("other" variable nil (reparse-symbol function_parameters) [30447 30452]))                          )
                        (reparse-symbol indented_block_body) [30429 30744])
                    ("__radd__" variable nil (reparse-symbol indented_block_body) [30749 30767])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30785 30789])
                            ("other" variable nil (reparse-symbol function_parameters) [30791 30796]))                          
                        :documentation "Subtract two dates, or a date and a timedelta.")
                        (reparse-symbol indented_block_body) [30773 31135])
                    ("weekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31152 31156]))                          )
                        (reparse-symbol indented_block_body) [31140 31270])
                    ("isoweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31352 31356]))                          )
                        (reparse-symbol indented_block_body) [31337 31502])
                    ("isocalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31523 31527]))                          
                        :documentation "Return a 3-tuple containing ISO year, week number, and weekday.

        The first ISO week of the year is the (Mon-Sun) week
        containing the year's first Thursday; everything else derives
        from that.

        The first week is 1; Monday is 1 ... Sunday is 7.

        ISO calendar algorithm taken from
        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm
        (used with permission)
        ")
                        (reparse-symbol indented_block_body) [31507 32500])
                    ("_getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32542 32546]))                          )
                        (reparse-symbol indented_block_body) [32528 32650])
                    ("__setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32670 32674])
                            ("string" variable nil (reparse-symbol function_parameters) [32676 32682]))                          )
                        (reparse-symbol indented_block_body) [32655 32772])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32792 32796]))                          )
                        (reparse-symbol indented_block_body) [32777 32849]))                  
                :type "class")
                nil [24356 32849])
            ("_date_class" variable nil nil [32850 32868])
            ("date" variable nil nil [32928 32952])
            ("date" variable nil nil [32953 32982])
            ("date" variable nil nil [32983 33018])
            ("tzinfo" type
               (:documentation "Abstract base class for time zone info classes.

    Subclasses must override the name(), utcoffset() and dst() methods.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [33175 33189])
                    ("tzname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33206 33210])
                            ("dt" variable nil (reparse-symbol function_parameters) [33212 33214]))                          )
                        (reparse-symbol indented_block_body) [33195 33341])
                    ("utcoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33360 33364])
                            ("dt" variable nil (reparse-symbol function_parameters) [33366 33368]))                          )
                        (reparse-symbol indented_block_body) [33346 33519])
                    ("dst" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33532 33536])
                            ("dt" variable nil (reparse-symbol function_parameters) [33538 33540]))                          
                        :documentation "datetime -> DST offset in minutes east of UTC.

        Return 0 if DST not in effect.  utcoffset() must include the DST
        offset.
        ")
                        (reparse-symbol indented_block_body) [33524 33776])
                    ("fromutc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33793 33797])
                            ("dt" variable nil (reparse-symbol function_parameters) [33799 33801]))                          )
                        (reparse-symbol indented_block_body) [33781 34753])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34796 34800]))                          )
                        (reparse-symbol indented_block_body) [34781 35269]))                  
                :type "class")
                nil [33021 35269])
            ("_tzinfo_class" variable nil nil [35270 35292])
            ("time" type
               (:documentation "Time with time zone.

    Constructors:

    __new__()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__

    Methods:

    strftime()
    isoformat()
    utcoffset()
    tzname()
    dst()

    Properties (readonly):
    hour, minute, second, microsecond, tzinfo, fold
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [35637 35727])
                    ("__new__" function
                       (:documentation "Constructor.

        Arguments:

        hour, minute (required)
        second, microsecond (default to zero)
        tzinfo (default to None)
        fold (keyword only, default to zero)
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [35745 35748])
                            ("hour" variable nil (reparse-symbol function_parameters) [35750 35754])
                            ("minute" variable nil (reparse-symbol function_parameters) [35758 35764])
                            ("second" variable nil (reparse-symbol function_parameters) [35768 35774])
                            ("microsecond" variable nil (reparse-symbol function_parameters) [35778 35789])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [35793 35799])
                            ("fold" variable nil (reparse-symbol function_parameters) [35809 35813]))                          )
                        (reparse-symbol indented_block_body) [35733 36704])
                    ("hour" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36764 36768]))                          
                        :documentation "hour (0-23)")
                        (reparse-symbol indented_block_body) [36741 36823])
                    ("minute" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36853 36857]))                          
                        :documentation "minute (0-59)")
                        (reparse-symbol indented_block_body) [36828 36916])
                    ("second" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36946 36950]))                          
                        :documentation "second (0-59)")
                        (reparse-symbol indented_block_body) [36921 37009])
                    ("microsecond" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37044 37048]))                          
                        :documentation "microsecond (0-999999)")
                        (reparse-symbol indented_block_body) [37014 37121])
                    ("tzinfo" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37151 37155]))                          
                        :documentation "timezone info object")
                        (reparse-symbol indented_block_body) [37126 37221])
                    ("fold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37249 37253]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37226 37282])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37397 37401])
                            ("other" variable nil (reparse-symbol function_parameters) [37403 37408]))                          )
                        (reparse-symbol indented_block_body) [37386 37545])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37561 37565])
                            ("other" variable nil (reparse-symbol function_parameters) [37567 37572]))                          )
                        (reparse-symbol indented_block_body) [37550 37701])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37717 37721])
                            ("other" variable nil (reparse-symbol function_parameters) [37723 37728]))                          )
                        (reparse-symbol indented_block_body) [37706 37856])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37872 37876])
                            ("other" variable nil (reparse-symbol function_parameters) [37878 37883]))                          )
                        (reparse-symbol indented_block_body) [37861 38012])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38028 38032])
                            ("other" variable nil (reparse-symbol function_parameters) [38034 38039]))                          )
                        (reparse-symbol indented_block_body) [38017 38167])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38181 38185])
                            ("other" variable nil (reparse-symbol function_parameters) [38187 38192])
                            ("allow_mixed" variable nil (reparse-symbol function_parameters) [38194 38205]))                          )
                        (reparse-symbol indented_block_body) [38172 39277])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39295 39299]))                          
                        :documentation "Hash.")
                        (reparse-symbol indented_block_body) [39282 40113])
                    ("_tzstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40157 40161])
                            ("sep" variable nil (reparse-symbol function_parameters) [40163 40166]))                          
                        :documentation "Return formatted timezone offset (+xx:xx) or None.")
                        (reparse-symbol indented_block_body) [40146 40701])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40719 40723]))                          
                        :documentation "Convert to formal string, for repr().")
                        (reparse-symbol indented_block_body) [40706 41400])
                    ("isoformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41419 41423])
                            ("timespec" variable nil (reparse-symbol function_parameters) [41425 41433]))                          
                        :documentation "Return the time formatted according to ISO.

        The full format is 'HH:MM:SS.mmmmmm+zz:zz'. By default, the fractional
        part is omitted if self.microsecond == 0.

        The optional argument timespec specifies the number of additional
        terms of the time to include.
        ")
                        (reparse-symbol indented_block_body) [41405 41952])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [41957 41976])
                    ("strftime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41995 41999])
                            ("fmt" variable nil (reparse-symbol function_parameters) [42001 42004]))                          
                        :documentation "Format using strftime().  The date part of the timestamp passed
        to underlying strftime should not be used.
        ")
                        (reparse-symbol indented_block_body) [41982 42434])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42454 42458])
                            ("fmt" variable nil (reparse-symbol function_parameters) [42460 42463]))                          )
                        (reparse-symbol indented_block_body) [42439 42664])
                    ("utcoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42709 42713]))                          
                        :documentation "Return the timezone offset in minutes east of UTC (negative west of
        UTC).")
                        (reparse-symbol indented_block_body) [42695 42984])
                    ("tzname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43000 43004]))                          
                        :documentation "Return the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",
        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.
        ")
                        (reparse-symbol indented_block_body) [42989 43438])
                    ("dst" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43451 43455]))                          
                        :documentation "Return 0 if DST is not in effect, or the DST offset (in minutes
        eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        ")
                        (reparse-symbol indented_block_body) [43443 43991])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44008 44012])
                            ("hour" variable nil (reparse-symbol function_parameters) [44014 44018])
                            ("minute" variable nil (reparse-symbol function_parameters) [44025 44031])
                            ("second" variable nil (reparse-symbol function_parameters) [44038 44044])
                            ("microsecond" variable nil (reparse-symbol function_parameters) [44051 44062])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [44085 44091])
                            ("fold" variable nil (reparse-symbol function_parameters) [44101 44105]))                          
                        :documentation "Return a new time with new values for the specified fields.")
                        (reparse-symbol indented_block_body) [43996 44625])
                    ("_getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44667 44671])
                            ("protocol" variable nil (reparse-symbol function_parameters) [44673 44681]))                          )
                        (reparse-symbol indented_block_body) [44653 45081])
                    ("__setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45101 45105])
                            ("string" variable nil (reparse-symbol function_parameters) [45107 45113])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [45115 45121]))                          )
                        (reparse-symbol indented_block_body) [45086 45549])
                    ("__reduce_ex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45572 45576])
                            ("protocol" variable nil (reparse-symbol function_parameters) [45578 45586]))                          )
                        (reparse-symbol indented_block_body) [45554 45637])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45657 45661]))                          )
                        (reparse-symbol indented_block_body) [45642 45701]))                  
                :type "class")
                nil [35294 45701])
            ("_time_class" variable nil nil [45702 45720])
            ("time" variable nil nil [45780 45804])
            ("time" variable nil nil [45805 45840])
            ("time" variable nil nil [45841 45884])
            ("datetime" type
               (:documentation "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
    "
                :superclasses ("date")
                :members 
                  ( ("__slots__" code nil (reparse-symbol indented_block_body) [46157 46200])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [46218 46221])
                        ("year" variable nil (reparse-symbol function_parameters) [46223 46227])
                        ("month" variable nil (reparse-symbol function_parameters) [46229 46234])
                        ("day" variable nil (reparse-symbol function_parameters) [46241 46244])
                        ("hour" variable nil (reparse-symbol function_parameters) [46251 46255])
                        ("minute" variable nil (reparse-symbol function_parameters) [46259 46265])
                        ("second" variable nil (reparse-symbol function_parameters) [46269 46275])
                        ("microsecond" variable nil (reparse-symbol function_parameters) [46295 46306])
                        ("tzinfo" variable nil (reparse-symbol function_parameters) [46310 46316])
                        ("fold" variable nil (reparse-symbol function_parameters) [46326 46330]))                      ) (reparse-symbol indented_block_body) [46206 47148])
                    ("hour" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47208 47212]))                          
                        :documentation "hour (0-23)")
                        (reparse-symbol indented_block_body) [47185 47267])
                    ("minute" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47297 47301]))                          
                        :documentation "minute (0-59)")
                        (reparse-symbol indented_block_body) [47272 47360])
                    ("second" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47390 47394]))                          
                        :documentation "second (0-59)")
                        (reparse-symbol indented_block_body) [47365 47453])
                    ("microsecond" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47488 47492]))                          
                        :documentation "microsecond (0-999999)")
                        (reparse-symbol indented_block_body) [47458 47565])
                    ("tzinfo" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47595 47599]))                          
                        :documentation "timezone info object")
                        (reparse-symbol indented_block_body) [47570 47665])
                    ("fold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47693 47697]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [47670 47726])
                    ("_fromtimestamp" function
                       (:documentation "Construct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [47767 47770])
                            ("t" variable nil (reparse-symbol function_parameters) [47772 47773])
                            ("utc" variable nil (reparse-symbol function_parameters) [47775 47778])
                            ("tz" variable nil (reparse-symbol function_parameters) [47780 47782]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [47731 49155])
                    ("fromtimestamp" function
                       (:documentation "Construct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [49195 49198])
                            ("t" variable nil (reparse-symbol function_parameters) [49200 49201])
                            ("tz" variable nil (reparse-symbol function_parameters) [49203 49205]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [49160 49446])
                    ("utcfromtimestamp" function
                       (:documentation "Construct a naive UTC datetime from a POSIX timestamp."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [49489 49492])
                            ("t" variable nil (reparse-symbol function_parameters) [49494 49495]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [49451 49616])
                    ("now" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [49646 49649])
                            ("tz" variable nil (reparse-symbol function_parameters) [49651 49653]))                          )
                        (reparse-symbol indented_block_body) [49621 49803])
                    ("utcnow" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [49836 49839]))                          )
                        (reparse-symbol indented_block_body) [49808 49959])
                    ("combine" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [49993 49996])
                            ("date" variable nil (reparse-symbol function_parameters) [49998 50002])
                            ("time" variable nil (reparse-symbol function_parameters) [50004 50008])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [50010 50016]))                          )
                        (reparse-symbol indented_block_body) [49964 50550])
                    ("timetuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50569 50573]))                          )
                        (reparse-symbol indented_block_body) [50555 50963])
                    ("_mktime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50980 50984]))                          
                        :documentation "Return integer POSIX timestamp.")
                        (reparse-symbol indented_block_body) [50968 52143])
                    ("timestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52163 52167]))                          )
                        (reparse-symbol indented_block_body) [52149 52387])
                    ("utctimetuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52409 52413]))                          )
                        (reparse-symbol indented_block_body) [52392 52724])
                    ("date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52738 52742]))                          )
                        (reparse-symbol indented_block_body) [52729 52833])
                    ("time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52847 52851]))                          )
                        (reparse-symbol indented_block_body) [52838 52995])
                    ("timetz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53011 53015]))                          )
                        (reparse-symbol indented_block_body) [53000 53193])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53210 53214])
                            ("year" variable nil (reparse-symbol function_parameters) [53216 53220])
                            ("month" variable nil (reparse-symbol function_parameters) [53227 53232])
                            ("day" variable nil (reparse-symbol function_parameters) [53239 53242])
                            ("hour" variable nil (reparse-symbol function_parameters) [53249 53253])
                            ("minute" variable nil (reparse-symbol function_parameters) [53276 53282])
                            ("second" variable nil (reparse-symbol function_parameters) [53289 53295])
                            ("microsecond" variable nil (reparse-symbol function_parameters) [53302 53313])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [53320 53326])
                            ("fold" variable nil (reparse-symbol function_parameters) [53352 53356]))                          
                        :documentation "Return a new datetime with new values for the specified fields.")
                        (reparse-symbol indented_block_body) [53198 54089])
                    ("_local_timezone" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54114 54118]))                          )
                        (reparse-symbol indented_block_body) [54094 54733])
                    ("astimezone" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54753 54757])
                            ("tz" variable nil (reparse-symbol function_parameters) [54759 54761]))                          )
                        (reparse-symbol indented_block_body) [54738 55429])
                    ("ctime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55477 55481]))                          )
                        (reparse-symbol indented_block_body) [55467 55787])
                    ("isoformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55806 55810])
                            ("sep" variable nil (reparse-symbol function_parameters) [55812 55815])
                            ("timespec" variable nil (reparse-symbol function_parameters) [55821 55829]))                          
                        :documentation "Return the time formatted according to ISO.

        The full format looks like 'YYYY-MM-DD HH:MM:SS.mmmmmm'.
        By default, the fractional part is omitted if self.microsecond == 0.

        If self.tzinfo is not None, the UTC offset is also attached, giving
        giving a full format of 'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM'.

        Optional argument sep specifies the separator between date and
        time, default 'T'.

        The optional argument timespec specifies the number of additional
        terms of the time to include.
        ")
                        (reparse-symbol indented_block_body) [55792 57070])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57088 57092]))                          
                        :documentation "Convert to formal string, for repr().")
                        (reparse-symbol indented_block_body) [57075 57783])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57800 57804]))                          )
                        (reparse-symbol indented_block_body) [57788 57886])
                    ("strptime" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [57921 57924])
                            ("date_string" variable nil (reparse-symbol function_parameters) [57926 57937])
                            ("format" variable nil (reparse-symbol function_parameters) [57939 57945]))                          )
                        (reparse-symbol indented_block_body) [57891 58129])
                    ("utcoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58148 58152]))                          
                        :documentation "Return the timezone offset in minutes east of UTC (negative west of
        UTC).")
                        (reparse-symbol indented_block_body) [58134 58423])
                    ("tzname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58439 58443]))                          
                        :documentation "Return the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",
        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.
        ")
                        (reparse-symbol indented_block_body) [58428 58877])
                    ("dst" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58890 58894]))                          
                        :documentation "Return 0 if DST is not in effect, or the DST offset (in minutes
        eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        ")
                        (reparse-symbol indented_block_body) [58882 59430])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59497 59501])
                            ("other" variable nil (reparse-symbol function_parameters) [59503 59508]))                          )
                        (reparse-symbol indented_block_body) [59486 59725])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59741 59745])
                            ("other" variable nil (reparse-symbol function_parameters) [59747 59752]))                          )
                        (reparse-symbol indented_block_body) [59730 59961])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59977 59981])
                            ("other" variable nil (reparse-symbol function_parameters) [59983 59988]))                          )
                        (reparse-symbol indented_block_body) [59966 60196])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60212 60216])
                            ("other" variable nil (reparse-symbol function_parameters) [60218 60223]))                          )
                        (reparse-symbol indented_block_body) [60201 60432])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60448 60452])
                            ("other" variable nil (reparse-symbol function_parameters) [60454 60459]))                          )
                        (reparse-symbol indented_block_body) [60437 60667])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60681 60685])
                            ("other" variable nil (reparse-symbol function_parameters) [60687 60692])
                            ("allow_mixed" variable nil (reparse-symbol function_parameters) [60694 60705]))                          )
                        (reparse-symbol indented_block_body) [60672 62145])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62162 62166])
                            ("other" variable nil (reparse-symbol function_parameters) [62168 62173]))                          )
                        (reparse-symbol indented_block_body) [62150 62997])
                    ("__radd__" variable nil (reparse-symbol indented_block_body) [63002 63020])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63038 63042])
                            ("other" variable nil (reparse-symbol function_parameters) [63044 63049]))                          )
                        (reparse-symbol indented_block_body) [63026 63966])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63984 63988]))                          )
                        (reparse-symbol indented_block_body) [63971 64533])
                    ("_getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64575 64579])
                            ("protocol" variable nil (reparse-symbol function_parameters) [64581 64589]))                          )
                        (reparse-symbol indented_block_body) [64561 65093])
                    ("__setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65113 65117])
                            ("string" variable nil (reparse-symbol function_parameters) [65119 65125])
                            ("tzinfo" variable nil (reparse-symbol function_parameters) [65127 65133]))                          )
                        (reparse-symbol indented_block_body) [65098 65644])
                    ("__reduce_ex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65667 65671])
                            ("protocol" variable nil (reparse-symbol function_parameters) [65673 65681]))                          )
                        (reparse-symbol indented_block_body) [65649 65742])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65762 65766]))                          )
                        (reparse-symbol indented_block_body) [65747 65806]))                  
                :type "class")
                nil [45886 65806])
            ("datetime" variable nil nil [65808 65840])
            ("datetime" variable nil nil [65841 65898])
            ("datetime" variable nil nil [65899 65946])
            ("_isoweek1monday" function (:arguments 
              ( ("year" variable nil (reparse-symbol function_parameters) [65969 65973]))              ) nil [65949 66329])
            ("timezone" type
               (:superclasses ("tzinfo")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [66358 66388])
                    ("_Omitted" variable nil (reparse-symbol indented_block_body) [66432 66451])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [66468 66471])
                        ("offset" variable nil (reparse-symbol function_parameters) [66473 66479])
                        ("name" variable nil (reparse-symbol function_parameters) [66481 66485]))                      ) (reparse-symbol indented_block_body) [66456 67292])
                    ("_create" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [67326 67329])
                            ("offset" variable nil (reparse-symbol function_parameters) [67331 67337])
                            ("name" variable nil (reparse-symbol function_parameters) [67339 67343]))                          )
                        (reparse-symbol indented_block_body) [67297 67462])
                    ("__getinitargs__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67487 67491]))                          
                        :documentation "pickle support")
                        (reparse-symbol indented_block_body) [67467 67631])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67647 67651])
                            ("other" variable nil (reparse-symbol function_parameters) [67653 67658]))                          )
                        (reparse-symbol indented_block_body) [67636 67767])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67785 67789]))                          )
                        (reparse-symbol indented_block_body) [67772 67826])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67844 67848]))                          
                        :documentation "Convert to formal string, for repr().

        >>> tz = timezone.utc
        >>> repr(tz)
        'datetime.timezone.utc'
        >>> tz = timezone(timedelta(hours=-5), 'EST')
        >>> repr(tz)
        \"datetime.timezone(datetime.timedelta(-1, 68400), 'EST')\"
        ")
                        (reparse-symbol indented_block_body) [67831 68596])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68613 68617]))                          )
                        (reparse-symbol indented_block_body) [68601 68653])
                    ("utcoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68672 68676])
                            ("dt" variable nil (reparse-symbol function_parameters) [68678 68680]))                          )
                        (reparse-symbol indented_block_body) [68658 68877])
                    ("tzname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68893 68897])
                            ("dt" variable nil (reparse-symbol function_parameters) [68899 68901]))                          )
                        (reparse-symbol indented_block_body) [68882 69188])
                    ("dst" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69201 69205])
                            ("dt" variable nil (reparse-symbol function_parameters) [69207 69209]))                          )
                        (reparse-symbol indented_block_body) [69193 69392])
                    ("fromutc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69409 69413])
                            ("dt" variable nil (reparse-symbol function_parameters) [69415 69417]))                          )
                        (reparse-symbol indented_block_body) [69397 69744])
                    ("_maxoffset" variable nil (reparse-symbol indented_block_body) [69749 69793])
                    ("_minoffset" code nil (reparse-symbol indented_block_body) [69798 69822])
                    ("_name_from_offset" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("delta" variable nil (reparse-symbol function_parameters) [69868 69873]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [69828 70211]))                  
                :type "class")
                nil [66330 70211])
            ("timezone" variable nil nil [70212 70257])
            ("timezone" variable nil nil [70258 70310])
            ("timezone" variable nil nil [70311 70363])
            ("_EPOCH" variable nil nil [70364 70414])
            ("try" code nil nil [79239 80104]))          
      :file "datetime.py"
      :pointmax 80104
      :fsize 80103
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((MULT 53349 . 53350) (COMMA 53350 . 53351) (NAME 48139 . 48148) (IF 48164 . 48166) (ELSE 48171 . 48175) (MULT 46323 . 46324) (COMMA 46324 . 46325) (MULT 44098 . 44099) (COMMA 44099 . 44100) (MULT 35806 . 35807) (COMMA 35807 . 35808) (NAME 12994 . 13011) (IF 13020 . 13022) (ELSE 13029 . 13033) (NAME 6444 . 6452) (IF 6470 . 6472) (ELSE 6476 . 6480) (IF 232 . 234) (ELSE 241 . 245) (RETURN 206 . 212) (IF 215 . 217) (ELSE 225 . 229)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Filename globbing utility.\"\"\"" code nil nil [1 33])
            ("os" include nil nil [35 44])
            ("re" include nil nil [45 54])
            ("fnmatch" include nil nil [55 69])
            ("__all__" variable nil nil [71 108])
            ("glob" function
               (:documentation "Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    If recursive is true, the pattern '**' will match any files and
    zero or more directories and subdirectories.
    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [119 127])
                    ("recursive" variable nil (reparse-symbol function_parameters) [132 141]))                  )
                nil [110 592])
            ("iglob" function
               (:documentation "Return an iterator which yields the paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    If recursive is true, the pattern '**' will match any files and
    zero or more directories and subdirectories.
    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [603 611])
                    ("recursive" variable nil (reparse-symbol function_parameters) [616 625]))                  )
                nil [593 1207])
            ("_iglob" function (:arguments 
              ( ("pathname" variable nil (reparse-symbol function_parameters) [1219 1227])
                ("recursive" variable nil (reparse-symbol function_parameters) [1229 1238])
                ("dironly" variable nil (reparse-symbol function_parameters) [1240 1247]))              ) nil [1208 2504])
            ("_glob1" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [2739 2746])
                ("pattern" variable nil (reparse-symbol function_parameters) [2748 2755])
                ("dironly" variable nil (reparse-symbol function_parameters) [2757 2764]))              ) nil [2728 2940])
            ("_glob0" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [2952 2959])
                ("basename" variable nil (reparse-symbol function_parameters) [2961 2969])
                ("dironly" variable nil (reparse-symbol function_parameters) [2971 2978]))              ) nil [2941 3330])
            ("glob0" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [3416 3423])
                ("pattern" variable nil (reparse-symbol function_parameters) [3425 3432]))              ) nil [3406 3478])
            ("glob1" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [3489 3496])
                ("pattern" variable nil (reparse-symbol function_parameters) [3498 3505]))              ) nil [3479 3551])
            ("_glob2" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [3655 3662])
                ("pattern" variable nil (reparse-symbol function_parameters) [3664 3671])
                ("dironly" variable nil (reparse-symbol function_parameters) [3673 3680]))              ) nil [3644 3781])
            ("_iterdir" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [3911 3918])
                ("dironly" variable nil (reparse-symbol function_parameters) [3920 3927]))              ) nil [3898 4369])
            ("_rlistdir" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [4452 4459])
                ("dironly" variable nil (reparse-symbol function_parameters) [4461 4468]))              ) nil [4438 4735])
            ("magic_check" variable nil nil [4737 4772])
            ("magic_check_bytes" variable nil nil [4773 4815])
            ("has_magic" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4831 4832]))              ) nil [4817 4985])
            ("_ishidden" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [5000 5004]))              ) nil [4986 5044])
            ("_isrecursive" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [5062 5069]))              ) nil [5045 5180])
            ("escape" function
               (:documentation "Escape all special characters.
    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [5192 5200]))                  )
                nil [5181 5639]))          
      :file "glob.py"
      :pointmax 5639
      :fsize 5638
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 4597 . 4601) (IF 4629 . 4631) (ELSE 4640 . 4644) (MULT 613 . 614) (COMMA 614 . 615) (MULT 129 . 130) (COMMA 130 . 131)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Functions that read and write gzipped files.

The user of the file doesn't have to worry about the compression,
but random access is not allowed.\"\"\"" code nil nil [1 152])
            ("os" include nil nil [229 257])
            ("time" include nil nil [229 257])
            ("sys" include nil nil [229 257])
            ("struct" include nil nil [229 257])
            ("zlib" include nil nil [258 269])
            ("builtins" include nil nil [270 285])
            ("io" include nil nil [286 295])
            ("_compression" include nil nil [296 315])
            ("__all__" variable nil nil [317 373])
            ("FTEXT, FHCRC, FEXTRA, FNAME, FCOMMENT" code nil nil [375 429])
            ("READ, WRITE" code nil nil [431 449])
            ("open" function
               (:documentation "Open a gzip-compressed file in binary or text mode.

    The filename argument can be an actual filename (a str or bytes object), or
    an existing file object to read from or write to.

    The mode argument can be \"r\", \"rb\", \"w\", \"wb\", \"x\", \"xb\", \"a\" or \"ab\" for
    binary mode, or \"rt\", \"wt\", \"xt\" or \"at\" for text mode. The default mode is
    \"rb\", and the default compresslevel is 9.

    For binary mode, this function is equivalent to the GzipFile constructor:
    GzipFile(filename, mode, compresslevel). In this case, the encoding, errors
    and newline arguments must not be provided.

    For text mode, a GzipFile object is created, and wrapped in an
    io.TextIOWrapper instance with the specified encoding, error handling
    behavior, and line ending(s).

    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [460 468])
                    ("mode" variable nil (reparse-symbol function_parameters) [470 474])
                    ("compresslevel" variable nil (reparse-symbol function_parameters) [481 494])
                    ("encoding" variable nil (reparse-symbol function_parameters) [507 515])
                    ("errors" variable nil (reparse-symbol function_parameters) [522 528])
                    ("newline" variable nil (reparse-symbol function_parameters) [535 542]))                  )
                nil [451 2302])
            ("write32u" function (:arguments 
              ( ("output" variable nil (reparse-symbol function_parameters) [2316 2322])
                ("value" variable nil (reparse-symbol function_parameters) [2324 2329]))              ) nil [2303 2461])
            ("_PaddedFile" type
               (:documentation "Minimal read-only file object that prepends a string to the contents
    of an actual file. Shouldn't be used outside of gzip.py, as it lacks
    essential functionality."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2711 2733])
                            ("self" variable nil (reparse-symbol indented_block_body) [2742 2769])
                            ("self" variable nil (reparse-symbol indented_block_body) [2778 2791])
                            ("self" variable nil (reparse-symbol indented_block_body) [2800 2814]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2680 2684])
                            ("f" variable nil (reparse-symbol function_parameters) [2686 2687]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2667 2815])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2829 2833])
                            ("size" variable nil (reparse-symbol function_parameters) [2835 2839]))                          )
                        (reparse-symbol indented_block_body) [2820 3244])
                    ("prepend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3261 3265]))                          )
                        (reparse-symbol indented_block_body) [3249 3537])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3551 3555])
                            ("off" variable nil (reparse-symbol function_parameters) [3557 3560]))                          )
                        (reparse-symbol indented_block_body) [3542 3652])
                    ("seekable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3670 3674]))                          )
                        (reparse-symbol indented_block_body) [3657 3750]))                  
                :type "class")
                nil [2462 3750])
            ("GzipFile" type
               (:documentation "The GzipFile class simulates most of the methods of a file object with
    the exception of the truncate() method.

    This class only supports opening files in binary mode. If you need to open a
    compressed file in text mode, use the gzip.open() function.

    "
                :superclasses ("_compression.BaseStream")
                :members 
                  ( ("myfileobj" variable nil (reparse-symbol indented_block_body) [4169 4185])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructor for the GzipFile class.

        At least one of fileobj and filename must be given a
        non-trivial value.

        The new class instance is based on fileobj, which can be a regular
        file, an io.BytesIO object, or any other object which simulates a file.
        It defaults to None, in which case filename is opened to provide
        a file object.

        When fileobj is not None, the filename argument is only used to be
        included in the gzip file header, which may include the original
        filename of the uncompressed file.  It defaults to the filename of
        fileobj, if discernible; otherwise, it defaults to the empty string,
        and in this case the original filename is not included in the header.

        The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', 'wb', 'x', or
        'xb' depending on whether the file will be read or written.  The default
        is the mode of fileobj if discernible; otherwise, the default is 'rb'.
        A mode of 'r' is equivalent to one of 'rb', and similarly for 'w' and
        'wb', 'a' and 'ab', and 'x' and 'xb'.

        The compresslevel argument is an integer from 0 to 9 controlling the
        level of compression; 1 is fastest and produces the least compression,
        and 9 is slowest and produces the most compression. 0 is no compression
        at all. The default is 9.

        The mtime argument is an optional numeric timestamp to be written
        to the last modification time field in the stream when compressing.
        If omitted or None, the current time is used.

        \"\"\"" code nil (reparse-symbol indented_block_body) [4305 5918])
                            ("if" code nil (reparse-symbol indented_block_body) [5928 6034])
                            ("if" code nil (reparse-symbol indented_block_body) [6042 6095])
                            ("if" code nil (reparse-symbol indented_block_body) [6103 6200])
                            ("if" code nil (reparse-symbol indented_block_body) [6208 6423])
                            ("if" code nil (reparse-symbol indented_block_body) [6431 6498])
                            ("if" code nil (reparse-symbol indented_block_body) [6507 7211])
                            ("self" variable nil (reparse-symbol indented_block_body) [7220 7242])
                            ("if" code nil (reparse-symbol indented_block_body) [7252 7313]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4204 4208])
                            ("filename" variable nil (reparse-symbol function_parameters) [4210 4218])
                            ("mode" variable nil (reparse-symbol function_parameters) [4225 4229])
                            ("compresslevel" variable nil (reparse-symbol function_parameters) [4253 4266])
                            ("fileobj" variable nil (reparse-symbol function_parameters) [4270 4277])
                            ("mtime" variable nil (reparse-symbol function_parameters) [4284 4289]))                          
                        :documentation "Constructor for the GzipFile class.

        At least one of fileobj and filename must be given a
        non-trivial value.

        The new class instance is based on fileobj, which can be a regular
        file, an io.BytesIO object, or any other object which simulates a file.
        It defaults to None, in which case filename is opened to provide
        a file object.

        When fileobj is not None, the filename argument is only used to be
        included in the gzip file header, which may include the original
        filename of the uncompressed file.  It defaults to the filename of
        fileobj, if discernible; otherwise, it defaults to the empty string,
        and in this case the original filename is not included in the header.

        The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', 'wb', 'x', or
        'xb' depending on whether the file will be read or written.  The default
        is the mode of fileobj if discernible; otherwise, the default is 'rb'.
        A mode of 'r' is equivalent to one of 'rb', and similarly for 'w' and
        'wb', 'a' and 'ab', and 'x' and 'xb'.

        The compresslevel argument is an integer from 0 to 9 controlling the
        level of compression; 1 is fastest and produces the least compression,
        and 9 is slowest and produces the most compression. 0 is no compression
        at all. The default is 9.

        The mtime argument is an optional numeric timestamp to be written
        to the last modification time field in the stream when compressing.
        If omitted or None, the current time is used.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4191 7313])
                    ("filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7345 7349]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7318 7568])
                    ("mtime" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7597 7601]))                          
                        :documentation "Last modification time read from stream, or None")
                        (reparse-symbol indented_block_body) [7573 7711])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7729 7733]))                          )
                        (reparse-symbol indented_block_body) [7716 7829])
                    ("_init_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7850 7854])
                            ("filename" variable nil (reparse-symbol function_parameters) [7856 7864]))                          )
                        (reparse-symbol indented_block_body) [7834 8076])
                    ("_write_gzip_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8104 8108]))                          )
                        (reparse-symbol indented_block_body) [8081 9069])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9084 9088])
                            ("data" variable nil (reparse-symbol function_parameters) [9089 9093]))                          )
                        (reparse-symbol indented_block_body) [9074 9803])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9817 9821])
                            ("size" variable nil (reparse-symbol function_parameters) [9823 9827]))                          )
                        (reparse-symbol indented_block_body) [9808 10039])
                    ("read1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10054 10058])
                            ("size" variable nil (reparse-symbol function_parameters) [10060 10064]))                          
                        :documentation "Implements BufferedIOBase.read1()

        Reads up to a buffer's worth of data is size is negative.")
                        (reparse-symbol indented_block_body) [10044 10457])
                    ("peek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10471 10475])
                            ("n" variable nil (reparse-symbol function_parameters) [10477 10478]))                          )
                        (reparse-symbol indented_block_body) [10462 10684])
                    ("closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10714 10718]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10689 10757])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10772 10776]))                          )
                        (reparse-symbol indented_block_body) [10762 11371])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11386 11390])
                            ("zlib_mode" variable nil (reparse-symbol function_parameters) [11391 11400]))                          )
                        (reparse-symbol indented_block_body) [11376 11637])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11653 11657]))                          
                        :documentation "Invoke the underlying file object's fileno() method.

        This will raise AttributeError if the underlying file object
        doesn't support fileno().
        ")
                        (reparse-symbol indented_block_body) [11642 11877])
                    ("rewind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11893 11897]))                          )
                        (reparse-symbol indented_block_body) [11882 12121])
                    ("readable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12139 12143]))                          )
                        (reparse-symbol indented_block_body) [12126 12179])
                    ("writable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12197 12201]))                          )
                        (reparse-symbol indented_block_body) [12184 12238])
                    ("seekable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12256 12260]))                          )
                        (reparse-symbol indented_block_body) [12243 12283])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12297 12301])
                            ("offset" variable nil (reparse-symbol function_parameters) [12303 12309])
                            ("whence" variable nil (reparse-symbol function_parameters) [12311 12317]))                          )
                        (reparse-symbol indented_block_body) [12288 13029])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13047 13051])
                            ("size" variable nil (reparse-symbol function_parameters) [13053 13057]))                          )
                        (reparse-symbol indented_block_body) [13034 13139]))                  
                :type "class")
                nil [3751 13139])
            ("_GzipReader" type
               (:superclasses ("_compression.DecompressReader")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [13227 13328])
                            ("self" variable nil (reparse-symbol indented_block_body) [13389 13412])
                            ("self" variable nil (reparse-symbol indented_block_body) [13421 13444]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13208 13212])
                            ("fp" variable nil (reparse-symbol function_parameters) [13214 13216]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13195 13445])
                    ("_init_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13465 13469]))                          )
                        (reparse-symbol indented_block_body) [13450 13584])
                    ("_read_exact" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13605 13609])
                            ("n" variable nil (reparse-symbol function_parameters) [13611 13612]))                          )
                        (reparse-symbol indented_block_body) [13589 14084])
                    ("_read_gzip_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14111 14115]))                          )
                        (reparse-symbol indented_block_body) [14089 15248])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15262 15266])
                            ("size" variable nil (reparse-symbol function_parameters) [15268 15272]))                          )
                        (reparse-symbol indented_block_body) [15253 17349])
                    ("_add_read_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17373 17377])
                            ("data" variable nil (reparse-symbol function_parameters) [17379 17383]))                          )
                        (reparse-symbol indented_block_body) [17354 17492])
                    ("_read_eof" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17511 17515]))                          )
                        (reparse-symbol indented_block_body) [17497 18433])
                    ("_rewind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18450 18454]))                          )
                        (reparse-symbol indented_block_body) [18438 18515]))                  
                :type "class")
                nil [13141 18515])
            ("compress" function
               (:documentation "Compress data in one shot and return the compressed string.
    Optional argument is the compression level, in range of 0-9.
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [18529 18533])
                    ("compresslevel" variable nil (reparse-symbol function_parameters) [18535 18548]))                  )
                nil [18516 18841])
            ("decompress" function
               (:documentation "Decompress a gzip compressed string in one shot.
    Return the decompressed string.
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [18857 18861]))                  )
                nil [18842 19038])
            ("_test" function nil nil [19040 20295])
            ("if" code nil nil [20296 20335]))          
      :file "gzip.py"
      :pointmax 20335
      :fsize 20334
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 18354 . 18387) (NEWLINE 18353 . 18354) (WHILE 18334 . 18339) (STRING_LITERAL 18346 . 18352) (COLON 18352 . 18353) (INDENT_BLOCK 17109 . 17243) (NEWLINE 17108 . 17109) (STRING_LITERAL 17105 . 17107) (COLON 17107 . 17108) (INDENT_BLOCK 17060 . 17082) (NEWLINE 17059 . 17060) (STRING_LITERAL 17056 . 17058) (COLON 17058 . 17059) (INDENT_BLOCK 16960 . 17025) (NEWLINE 16818 . 16819) (STRING_LITERAL 16815 . 16817) (COLON 16817 . 16818) (ELIF 16775 . 16779) (INDENT_BLOCK 16694 . 16763) (NEWLINE 16693 . 16694) (IF 16648 . 16650) (STRING_LITERAL 16690 . 16692) (COLON 16692 . 16693) (INDENT_BLOCK 15102 . 15128) (NEWLINE 15101 . 15102) (IF 15078 . 15080) (STRING_LITERAL 15094 . 15100) (COLON 15100 . 15101) (INDENT_BLOCK 14870 . 14896) (NEWLINE 14869 . 14870) (IF 14846 . 14848) (STRING_LITERAL 14862 . 14868) (COLON 14868 . 14869) (INDENT_BLOCK 14235 . 14296) (NEWLINE 14234 . 14235) (STRING_LITERAL 14223 . 14233) (COLON 14233 . 14234) (INDENT_BLOCK 14176 . 14201) (NEWLINE 14175 . 14176) (IF 14159 . 14161) (STRING_LITERAL 14172 . 14174) (COLON 14174 . 14175) (NAME 3267 . 3274) (STRING_LITERAL 3276 . 3278) (NAME 2689 . 2696) (STRING_LITERAL 2698 . 2700)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Locale support module.

The module provides low-level access to the C lib's locale APIs and adds high
level number formatting APIs as well as a locale aliasing engine to complement
these.

The aliasing engine includes support for many commonly used locale names and
maps them to values suitable for passing to the C lib's setlocale() function. It
also includes default encodings for all supported locale names.

\"\"\"" code nil nil [1 419])
            ("sys" include nil nil [421 431])
            ("encodings" include nil nil [432 448])
            ("encodings.aliases" include nil nil [449 473])
            ("re" include nil nil [474 483])
            ("collections" include nil nil [484 502])
            ("builtins" include nil nil [503 543])
            ("functools" include nil nil [544 560])
            ("__all__" variable nil nil [809 1156])
            ("_strcoll" function
               (:documentation " strcoll(string,string) -> int.
        Compares two strings according to the locale.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1171 1172])
                    ("b" variable nil (reparse-symbol function_parameters) [1173 1174]))                  )
                nil [1158 1307])
            ("_strxfrm" function
               (:documentation " strxfrm(string) -> string.
        Returns a string that behaves for cmp locale-aware.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1321 1322]))                  )
                nil [1308 1441])
            ("try" code nil nil [1442 2831])
            ("if" code nil nil [2897 2951])
            ("if" code nil nil [2951 3005])
            ("_localeconv" variable nil nil [3007 3031])
            ("_override_localeconv" variable nil nil [3148 3173])
            ("" code nil nil [3191 3204])
            ("localeconv" function nil nil [3205 3326])
            ("_grouping_intervals" function (:arguments 
              ( ("grouping" variable nil (reparse-symbol function_parameters) [3470 3478]))              ) nil [3446 3906])
            ("_group" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3959 3960])
                ("monetary" variable nil (reparse-symbol function_parameters) [3962 3970]))              ) nil [3948 4848])
            ("_strip_padding" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4931 4932])
                ("amount" variable nil (reparse-symbol function_parameters) [4934 4940]))              ) nil [4912 5154])
            ("_percent_re" variable nil nil [5155 5284])
            ("format" function
               (:documentation "Returns the locale-aware substitution of a %? specifier
    (percent).

    additional is for format strings which contain one or more
    '*' modifiers."
                :arguments 
                  ( ("percent" variable nil (reparse-symbol function_parameters) [5297 5304])
                    ("value" variable nil (reparse-symbol function_parameters) [5306 5311])
                    ("grouping" variable nil (reparse-symbol function_parameters) [5313 5321])
                    ("monetary" variable nil (reparse-symbol function_parameters) [5329 5337])
                    ("additional" variable nil (reparse-symbol function_parameters) [5345 5356]))                  )
                nil [5286 5912])
            ("_format" function (:arguments 
              ( ("percent" variable nil (reparse-symbol function_parameters) [5925 5932])
                ("value" variable nil (reparse-symbol function_parameters) [5934 5939])
                ("grouping" variable nil (reparse-symbol function_parameters) [5941 5949])
                ("monetary" variable nil (reparse-symbol function_parameters) [5957 5965])
                ("additional" variable nil (reparse-symbol function_parameters) [5973 5984]))              ) nil [5913 6814])
            ("format_string" function
               (:documentation "Formats a string in the same way that the % formatting would use,
    but takes the current locale into account.
    Grouping is applied if the third parameter is true."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6833 6834])
                    ("val" variable nil (reparse-symbol function_parameters) [6836 6839])
                    ("grouping" variable nil (reparse-symbol function_parameters) [6841 6849]))                  )
                nil [6815 8012])
            ("currency" function
               (:documentation "Formats val according to the currency settings
    in the current locale."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [8026 8029])
                    ("symbol" variable nil (reparse-symbol function_parameters) [8031 8037])
                    ("grouping" variable nil (reparse-symbol function_parameters) [8044 8052])
                    ("international" variable nil (reparse-symbol function_parameters) [8060 8073]))                  )
                nil [8013 9539])
            ("str" function
               (:documentation "Convert float to string, taking the locale into account."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [9548 9551]))                  )
                nil [9540 9653])
            ("delocalize" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [9669 9675]))              ) nil [9654 10051])
            ("atof" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [10061 10067])
                ("func" variable nil (reparse-symbol function_parameters) [10069 10073]))              ) nil [10052 10185])
            ("atoi" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [10195 10201]))              ) nil [10186 10311])
            ("_test" function nil nil [10312 10507])
            ("_setlocale" variable nil nil [10721 10743])
            ("_replace_encoding" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [10767 10771])
                ("encoding" variable nil (reparse-symbol function_parameters) [10773 10781]))              ) nil [10745 11726])
            ("_append_modifier" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11748 11752])
                ("modifier" variable nil (reparse-symbol function_parameters) [11754 11762]))              ) nil [11727 12103])
            ("normalize" function
               (:documentation " Returns a normalized locale code for the given locale
        name.

        The returned locale code is formatted for use with
        setlocale().

        If normalization fails, the original name is returned
        unchanged.

        If the given encoding is not known, the function defaults to
        the default encoding for the locale code just like setlocale()
        does.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [12118 12128]))                  )
                nil [12104 14996])
            ("_parse_localename" function
               (:documentation " Parses the locale code for localename and returns the
        result as tuple (language code, encoding).

        The localename is normalized and passed through the locale
        alias engine. A ValueError is raised in case the locale name
        cannot be parsed.

        The language code corresponds to RFC 1766.  code and encoding
        can be None in case the values cannot be determined or are
        unknown to this implementation.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [15019 15029]))                  )
                nil [14997 16073])
            ("_build_localename" function
               (:documentation " Builds a locale code from the given tuple (language code,
        encoding).

        No aliasing or normalizing takes place.

    "
                :arguments 
                  ( ("localetuple" variable nil (reparse-symbol function_parameters) [16096 16107]))                  )
                nil [16074 16629])
            ("getdefaultlocale" function
               (:documentation " Tries to determine the default locale settings and returns
        them as tuple (language code, encoding).

        According to POSIX, a program which has not called
        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.
        Calling setlocale(LC_ALL, \"\") lets it use the default locale as
        defined by the LANG variable. Since we don't want to interfere
        with the current locale setting we thus emulate the behavior
        in the way described above.

        To maintain compatibility with other platforms, not only the
        LANG variable is tested, but a list of variables given as
        envvars parameter. The first found to be defined will be
        used. envvars defaults to the search path used in GNU gettext;
        it must always contain the variable name 'LANG'.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("envvars" variable nil (reparse-symbol function_parameters) [16651 16658]))                  )
                nil [16630 18615])
            ("getlocale" function
               (:documentation " Returns the current setting for the given locale category as
        tuple (language code, encoding).

        category may be one of the LC_* value except LC_ALL. It
        defaults to LC_CTYPE.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [18631 18639]))                  )
                nil [18617 19219])
            ("setlocale" function
               (:documentation " Set the locale for the given category.  The locale can be
        a string, an iterable of two strings (language code and encoding),
        or None.

        Iterables are converted to strings using the locale aliasing
        engine.  Locale strings are passed directly to the C lib.

        category may be given as one of the LC_* values.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [19234 19242])
                    ("locale" variable nil (reparse-symbol function_parameters) [19244 19250]))                  )
                nil [19220 19798])
            ("resetlocale" function
               (:documentation " Sets the locale for category to the default setting.

        The default setting is determined by calling
        getdefaultlocale(). category defaults to LC_ALL.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [19815 19823]))                  )
                nil [19799 20079])
            ("if" code nil nil [20080 21450])
            ("locale_encoding_alias" variable nil nil [22011 24355])
            ("for" code nil nil [24357 24478])
            ("locale_alias" variable nil nil [30141 64118])
            ("windows_locale" variable nil nil [64592 72751])
            ("_print_locale" function (:documentation " Test function.
    ") nil [72753 74475])
            ("try" code nil nil [74481 74569])
            ("if" code nil nil [74570 74725]))          
      :file "locale.py"
      :pointmax 74725
      :fsize 74724
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("collections" include nil nil [73 91])
            ("itertools" include nil nil [92 108])
            ("linecache" include nil nil [109 125])
            ("sys" include nil nil [126 136])
            ("__all__" variable nil nil [138 505])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [579 593])
                    ("file" variable nil (reparse-symbol function_parameters) [595 599]))                  )
                nil [564 890])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [907 921]))                  )
                nil [891 1428])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1485 1487])
                    ("limit" variable nil (reparse-symbol function_parameters) [1489 1494])
                    ("file" variable nil (reparse-symbol function_parameters) [1501 1505]))                  )
                nil [1472 1866])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_tb(tb, limit))'."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1881 1883])
                    ("limit" variable nil (reparse-symbol function_parameters) [1885 1890]))                  )
                nil [1867 2010])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2026 2028])
                    ("limit" variable nil (reparse-symbol function_parameters) [2030 2035]))                  )
                nil [2011 2605])
            ("_cause_message" variable nil nil [2646 2753])
            ("_context_message" variable nil nil [2755 2863])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [2886 2891])
                    ("value" variable nil (reparse-symbol function_parameters) [2893 2898])
                    ("tb" variable nil (reparse-symbol function_parameters) [2900 2902])
                    ("limit" variable nil (reparse-symbol function_parameters) [2904 2909])
                    ("file" variable nil (reparse-symbol function_parameters) [2916 2920])
                    ("chain" variable nil (reparse-symbol function_parameters) [2927 2932]))                  )
                nil [2866 3875])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3898 3903])
                    ("value" variable nil (reparse-symbol function_parameters) [3905 3910])
                    ("tb" variable nil (reparse-symbol function_parameters) [3912 3914])
                    ("limit" variable nil (reparse-symbol function_parameters) [3916 3921])
                    ("chain" variable nil (reparse-symbol function_parameters) [3928 3933]))                  )
                nil [3877 4659])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4687 4692])
                    ("value" variable nil (reparse-symbol function_parameters) [4694 4699]))                  )
                nil [4661 5325])
            ("_format_final_exc_line" function (:arguments 
              ( ("etype" variable nil (reparse-symbol function_parameters) [5420 5425])
                ("value" variable nil (reparse-symbol function_parameters) [5427 5432]))              ) nil [5393 5607])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [5622 5627]))              ) nil [5608 5741])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(*sys.exc_info(), limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [5762 5767])
                    ("file" variable nil (reparse-symbol function_parameters) [5774 5778])
                    ("chain" variable nil (reparse-symbol function_parameters) [5785 5790]))                  )
                nil [5748 5945])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [5961 5966])
                    ("chain" variable nil (reparse-symbol function_parameters) [5973 5978]))                  )
                nil [5946 6114])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [6130 6135])
                    ("file" variable nil (reparse-symbol function_parameters) [6142 6146])
                    ("chain" variable nil (reparse-symbol function_parameters) [6153 6158]))                  )
                nil [6115 6482])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6538 6539])
                    ("limit" variable nil (reparse-symbol function_parameters) [6546 6551])
                    ("file" variable nil (reparse-symbol function_parameters) [6558 6562]))                  )
                nil [6522 6938])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6957 6958])
                    ("limit" variable nil (reparse-symbol function_parameters) [6965 6970]))                  )
                nil [6940 7149])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [7169 7170])
                    ("limit" variable nil (reparse-symbol function_parameters) [7177 7182]))                  )
                nil [7151 7723])
            ("clear_frames" function (:arguments 
              ( ("tb" variable nil (reparse-symbol function_parameters) [7742 7744]))              ) nil [7725 8039])
            ("FrameSummary" type
               (:documentation "A single frame from a traceback.

    - :attr:`filename` The filename for the frame.
    - :attr:`lineno` The line within filename for the frame that was
      active when the frame was captured.
    - :attr:`name` The name of the function or method that was executing
      when the frame was captured.
    - :attr:`line` The text from the linecache module for the
      of code that was running when the frame was captured.
    - :attr:`locals` Either None if locals were not supplied, or a dict
      mapping the name to the repr() of the variable.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8633 8694])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Construct a FrameSummary.

        :param lookup_line: If True, `linecache` is consulted for the source
            code line. Otherwise, the line will be looked up when first needed.
        :param locals: If supplied the frame locals, which will be captured as
            object representations.
        :param line: If provided, use this instead of looking up the line in
            the linecache.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8809 9226])
                            ("self" variable nil (reparse-symbol indented_block_body) [9235 9259])
                            ("self" variable nil (reparse-symbol indented_block_body) [9268 9288])
                            ("self" variable nil (reparse-symbol indented_block_body) [9297 9313])
                            ("self" variable nil (reparse-symbol indented_block_body) [9322 9339])
                            ("if" code nil (reparse-symbol indented_block_body) [9348 9386])
                            ("None" code nil (reparse-symbol indented_block_body) [9483 9487]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8713 8717])
                            ("filename" variable nil (reparse-symbol function_parameters) [8719 8727])
                            ("lineno" variable nil (reparse-symbol function_parameters) [8729 8735])
                            ("name" variable nil (reparse-symbol function_parameters) [8737 8741])
                            ("lookup_line" variable nil (reparse-symbol function_parameters) [8746 8757])
                            ("locals" variable nil (reparse-symbol function_parameters) [8776 8782])
                            ("line" variable nil (reparse-symbol function_parameters) [8789 8793]))                          
                        :documentation "Construct a FrameSummary.

        :param lookup_line: If True, `linecache` is consulted for the source
            code line. Otherwise, the line will be looked up when first needed.
        :param locals: If supplied the frame locals, which will be captured as
            object representations.
        :param line: If provided, use this instead of looking up the line in
            the linecache.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8700 9488])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9504 9508])
                            ("other" variable nil (reparse-symbol function_parameters) [9510 9515]))                          )
                        (reparse-symbol indented_block_body) [9493 9913])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9934 9938])
                            ("pos" variable nil (reparse-symbol function_parameters) [9940 9943]))                          )
                        (reparse-symbol indented_block_body) [9918 10017])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10035 10039]))                          )
                        (reparse-symbol indented_block_body) [10022 10114])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10132 10136]))                          )
                        (reparse-symbol indented_block_body) [10119 10292])
                    ("line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10320 10324]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10297 10463]))                  
                :type "class")
                nil [8041 10463])
            ("walk_stack" function
               (:documentation "Walk a stack yielding the frame and line number for each frame.

    This will follow f.f_back from the given frame. If no frame is given, the
    current stack is used. Usually used with StackSummary.extract.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10480 10481]))                  )
                nil [10465 10843])
            ("walk_tb" function
               (:documentation "Walk a traceback yielding the frame and line number for each frame.

    This will follow tb.tb_next (and thus is in the opposite order to
    walk_stack). Usually used with StackSummary.extract.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [10857 10859]))                  )
                nil [10845 11163])
            ("StackSummary" type
               (:documentation "A stack of frames."
                :superclasses ("list")
                :members 
                  ( ("extract" function
                       (:documentation "Create a StackSummary from a traceback or stack object.

        :param frame_gen: A generator that yields (frame, lineno) tuples to
            include in the stack.
        :param limit: None to include all frames or the number of frames to
            include.
        :param lookup_lines: If True, lookup lines for each frame immediately,
            otherwise lookup is deferred until the frame is rendered.
        :param capture_locals: If True, the local variables from each frame will
            be captured as object representations into the FrameSummary.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [11254 11259])
                            ("frame_gen" variable nil (reparse-symbol function_parameters) [11261 11270])
                            ("limit" variable nil (reparse-symbol function_parameters) [11275 11280])
                            ("lookup_lines" variable nil (reparse-symbol function_parameters) [11287 11299])
                            ("capture_locals" variable nil (reparse-symbol function_parameters) [11318 11332]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11225 13111])
                    ("from_list" function
                       (:documentation "Create a StackSummary from a simple list of tuples.

        This method supports the older Python API. Each tuple should be a
        4-tuple with (filename, lineno, name, line) elements.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [13147 13152])
                            ("a_list" variable nil (reparse-symbol function_parameters) [13154 13160]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13116 13970])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13986 13990]))                          
                        :documentation "Format the stack ready for printing.

        Returns a list of strings ready for printing.  Each string in the
        resulting list corresponds to a single frame from the stack.
        Each string ends in a newline; the strings may contain internal
        newlines as well, for those items with source text lines.

        For long sequences of the same frame and line, the first few
        repetitions are shown, followed by a summary line stating the exact
        number of further repetitions.
        ")
                        (reparse-symbol indented_block_body) [13975 15820]))                  
                :type "class")
                nil [11165 15820])
            ("TracebackException" type
               (:documentation "An exception ready for rendering.

    The traceback module captures enough attributes from the original exception
    to this intermediary form to ensure that no references are held, while
    still being able to fully print or format it.

    Use `from_exception` to create TracebackException instances from exception
    objects, or the constructor to create TracebackException instances from
    individual components.

    - :attr:`__cause__` A TracebackException of the original *__cause__*.
    - :attr:`__context__` A TracebackException of the original *__context__*.
    - :attr:`__suppress_context__` The *__suppress_context__* value from the
      original exception.
    - :attr:`stack` A `StackSummary` representing the traceback.
    - :attr:`exc_type` The class of the original traceback.
    - :attr:`filename` For syntax errors - the filename where the error
      occurred.
    - :attr:`lineno` For syntax errors - the linenumber where the error
      occurred.
    - :attr:`text` For syntax errors - the text where the error
      occurred.
    - :attr:`offset` For syntax errors - the offset into the text where the
      error occurred.
    - :attr:`msg` For syntax errors - the compiler error message.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [17493 17537])
                            ("_seen" code nil (reparse-symbol indented_block_body) [17545 17565])
                            ("if" code nil (reparse-symbol indented_block_body) [17716 18168])
                            ("if" code nil (reparse-symbol indented_block_body) [18176 18642])
                            ("self" variable nil (reparse-symbol indented_block_body) [18650 18684])
                            ("self" variable nil (reparse-symbol indented_block_body) [18693 18715])
                            ("self" variable nil (reparse-symbol indented_block_body) [18724 18750])
                            ("False" code nil (reparse-symbol indented_block_body) [18850 18855])
                            ("self" variable nil (reparse-symbol indented_block_body) [18888 19041])
                            ("self" variable nil (reparse-symbol indented_block_body) [19050 19074])
                            ("self" variable nil (reparse-symbol indented_block_body) [19210 19242])
                            ("if" code nil (reparse-symbol indented_block_body) [19251 19561])
                            ("if" code nil (reparse-symbol indented_block_body) [19569 19617]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17105 17109])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [17111 17119])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [17121 17130])
                            ("exc_traceback" variable nil (reparse-symbol function_parameters) [17132 17145])
                            ("limit" variable nil (reparse-symbol function_parameters) [17150 17155])
                            ("lookup_lines" variable nil (reparse-symbol function_parameters) [17174 17186])
                            ("capture_locals" variable nil (reparse-symbol function_parameters) [17193 17207])
                            ("_seen" variable nil (reparse-symbol function_parameters) [17215 17220]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17092 19617])
                    ("from_exception" function
                       (:documentation "Create a TracebackException from an exception."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19658 19661])
                            ("exc" variable nil (reparse-symbol function_parameters) [19663 19666])
                            ("args" variable nil (reparse-symbol function_parameters) [19668 19673])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19675 19683]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19622 19818])
                    ("_load_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19839 19843]))                          
                        :documentation "Private API. force all lines in the stack to be loaded.")
                        (reparse-symbol indented_block_body) [19823 20112])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20128 20132])
                            ("other" variable nil (reparse-symbol function_parameters) [20134 20139]))                          )
                        (reparse-symbol indented_block_body) [20117 20189])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20206 20210]))                          )
                        (reparse-symbol indented_block_body) [20194 20238])
                    ("format_exception_only" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20269 20273]))                          
                        :documentation "Format the exception part of the traceback.

        The return value is a generator of strings, each ending in a newline.

        Normally, the generator emits a single string; however, for
        SyntaxError exceptions, it emites several lines that (when
        printed) display detailed information about where the syntax
        error occurred.

        The message indicating which exception occurred is always the last
        string in the output.
        ")
                        (reparse-symbol indented_block_body) [20243 22059])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22075 22079])
                            ("chain" variable nil (reparse-symbol function_parameters) [22084 22089]))                          
                        :documentation "Format the exception.

        If chain is not *True*, *__cause__* and *__context__* will not be formatted.

        The return value is a generator of strings, each ending in a newline and
        some containing internal newlines. `print_exception` is a wrapper around
        this method which just prints the lines to a file.

        The message indicating which exception occurred is always the last
        string in the output.
        ")
                        (reparse-symbol indented_block_body) [22064 23105]))                  
                :type "class")
                nil [15822 23105]))          
      :file "traceback.py"
      :pointmax 23105
      :fsize 23104
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((MULT 22081 . 22082) (COMMA 22082 . 22083) (NAME 18759 . 18763) (IF 18832 . 18834) (ELSE 18845 . 18849) (MULT 17147 . 17148) (COMMA 17148 . 17149) (MULT 11272 . 11273) (COMMA 11273 . 11274) (NAME 9394 . 9398) (IF 9468 . 9470) (ELSE 9478 . 9482) (MULT 8743 . 8744) (COMMA 8744 . 8745)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utilities for with-statement contexts.  See PEP 343.\"\"\"" code nil nil [1 59])
            ("abc" include nil nil [60 70])
            ("sys" include nil nil [71 81])
            ("_collections_abc" include nil nil [82 105])
            ("collections" include nil nil [106 135])
            ("functools" include nil nil [136 163])
            ("__all__" variable nil nil [165 335])
            ("AbstractContextManager" type
               (:documentation "An abstract base class for context managers."
                :superclasses ("abc.ABC")
                :members 
                  ( ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [452 456]))                          
                        :documentation "Return `self` upon entering the runtime context.")
                        (reparse-symbol indented_block_body) [438 542])
                    ("__exit__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [584 588])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [590 598])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [600 609])
                            ("traceback" variable nil (reparse-symbol function_parameters) [611 620]))                          
                        :documentation "Raise any exception triggered within the runtime context.")
                        (reparse-symbol indented_block_body) [547 715])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [758 761])
                            ("C" variable nil (reparse-symbol function_parameters) [763 764]))                          )
                        (reparse-symbol indented_block_body) [720 918]))                  
                :type "class")
                nil [338 918])
            ("ContextDecorator" type
               (:superclasses ("object")
                :members 
                  ( ("\"A base class or mixin that enables context managers to work as decorators.\"" code nil (reparse-symbol indented_block_body) [956 1032])
                    ("_recreate_cm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1055 1059]))                          
                        :documentation "Return a recreated instance of self.

        Allows an otherwise one-shot context manager like
        _GeneratorContextManager to support use as
        a decorator via implicit recreation.

        This is a private interface just for _GeneratorContextManager.
        See issue #11647 for details.
        ")
                        (reparse-symbol indented_block_body) [1038 1407])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1425 1429])
                            ("func" variable nil (reparse-symbol function_parameters) [1431 1435]))                          )
                        (reparse-symbol indented_block_body) [1412 1595]))                  
                :type "class")
                nil [920 1595])
            ("_GeneratorContextManager" type
               (:documentation "Helper for @contextmanager decorator."
                :superclasses ("ContextDecorator" "AbstractContextManager")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1770 1800])
                            ("self, self, self" code nil (reparse-symbol indented_block_body) [1809 1859])
                            ("doc" variable nil (reparse-symbol indented_block_body) [1945 1981])
                            ("if" code nil (reparse-symbol indented_block_body) [1990 2043])
                            ("self" variable nil (reparse-symbol indented_block_body) [2051 2069]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1737 1741])
                            ("func" variable nil (reparse-symbol function_parameters) [1743 1747])
                            ("args" variable nil (reparse-symbol function_parameters) [1749 1753])
                            ("kwds" variable nil (reparse-symbol function_parameters) [1755 1759]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1724 2070])
                    ("_recreate_cm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2413 2417]))                          )
                        (reparse-symbol indented_block_body) [2396 2628])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2647 2651]))                          )
                        (reparse-symbol indented_block_body) [2633 2798])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2816 2820])
                            ("type" variable nil (reparse-symbol function_parameters) [2822 2826])
                            ("value" variable nil (reparse-symbol function_parameters) [2828 2833])
                            ("traceback" variable nil (reparse-symbol function_parameters) [2835 2844]))                          )
                        (reparse-symbol indented_block_body) [2803 4751]))                  
                :type "class")
                nil [1597 4751])
            ("contextmanager" function
               (:documentation "@contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [4772 4776]))                  )
                nil [4753 5390])
            ("closing" type
               (:documentation "Context to automatically close something at the end of a block.

    Code like this:

        with closing(<module>.open(<arguments>)) as f:
            <block>

    is equivalent to this:

        f = <module>.open(<arguments>)
        try:
            <block>
        finally:
            f.close()

    "
                :superclasses ("AbstractContextManager")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5787 5805]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5765 5769])
                            ("thing" variable nil (reparse-symbol function_parameters) [5771 5776]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5752 5806])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5824 5828]))                          )
                        (reparse-symbol indented_block_body) [5810 5857])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5874 5878])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [5880 5889]))                          )
                        (reparse-symbol indented_block_body) [5861 5919]))                  
                :type "class")
                nil [5392 5919])
            ("_RedirectStream" type
               (:superclasses ("AbstractContextManager")
                :members 
                  ( ("_stream" variable nil (reparse-symbol indented_block_body) [5973 5987])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6033 6062])
                            ("self" variable nil (reparse-symbol indented_block_body) [6137 6159]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6006 6010])
                            ("new_target" variable nil (reparse-symbol function_parameters) [6012 6022]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5993 6160])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6179 6183]))                          )
                        (reparse-symbol indented_block_body) [6165 6332])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6350 6354])
                            ("exctype" variable nil (reparse-symbol function_parameters) [6356 6363])
                            ("excinst" variable nil (reparse-symbol function_parameters) [6365 6372])
                            ("exctb" variable nil (reparse-symbol function_parameters) [6374 6379]))                          )
                        (reparse-symbol indented_block_body) [6337 6442]))                  
                :type "class")
                nil [5921 6442])
            ("redirect_stdout" type
               (:documentation "Context manager for temporarily redirecting stdout to another file.

        # How to send help() to stderr
        with redirect_stdout(sys.stderr):
            help(dir)

        # How to write help() to a file
        with open('help.txt', 'w') as f:
            with redirect_stdout(f):
                help(pow)
    "
                :superclasses ("_RedirectStream")
                :members 
                  ( ("_stream" variable nil (reparse-symbol indented_block_body) [6821 6839]))                  
                :type "class")
                nil [6444 6840])
            ("redirect_stderr" type
               (:documentation "Context manager for temporarily redirecting stderr to another file."
                :superclasses ("_RedirectStream")
                :members 
                  ( ("_stream" variable nil (reparse-symbol indented_block_body) [6965 6983]))                  
                :type "class")
                nil [6842 6984])
            ("suppress" type
               (:documentation "Context manager to suppress specified exceptions

    After the exception is suppressed, execution proceeds with the next
    statement following the with statement.

         with suppress(FileNotFoundError):
             os.remove(somefile)
         # Execution still resumes here if the file was already removed
    "
                :superclasses ("AbstractContextManager")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7402 7431]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7374 7378])
                            ("exceptions" variable nil (reparse-symbol function_parameters) [7380 7391]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7361 7432])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7451 7455]))                          )
                        (reparse-symbol indented_block_body) [7437 7471])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7489 7493])
                            ("exctype" variable nil (reparse-symbol function_parameters) [7495 7502])
                            ("excinst" variable nil (reparse-symbol function_parameters) [7504 7511])
                            ("exctb" variable nil (reparse-symbol function_parameters) [7513 7518]))                          )
                        (reparse-symbol indented_block_body) [7476 8185]))                  
                :type "class")
                nil [6986 8185])
            ("ExitStack" type
               (:documentation "Context manager for dynamic management of a stack of exit callbacks

    For example:

        with ExitStack() as stack:
            files = [stack.enter_context(open(fname)) for fname in filenames]
            # All opened files will automatically be closed at the end of
            # the with statement, even if attempts to open files later
            # in the list raise an exception

    "
                :superclasses ("AbstractContextManager")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8729 8759]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8714 8718]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8701 8760])
                    ("pop_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8777 8781]))                          
                        :documentation "Preserve the context stack by transferring it to a new instance")
                        (reparse-symbol indented_block_body) [8765 9016])
                    ("_push_cm_exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9039 9043])
                            ("cm" variable nil (reparse-symbol function_parameters) [9045 9047])
                            ("cm_exit" variable nil (reparse-symbol function_parameters) [9049 9056]))                          
                        :documentation "Helper to correctly register callbacks to __exit__ methods")
                        (reparse-symbol indented_block_body) [9021 9287])
                    ("push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9301 9305])
                            ("exit" variable nil (reparse-symbol function_parameters) [9307 9311]))                          
                        :documentation "Registers a callback with the standard __exit__ method signature

        Can suppress exceptions the same way __exit__ methods can.

        Also accepts any object with an __exit__ method (registering a call
        to the method instead of the object itself)
        ")
                        (reparse-symbol indented_block_body) [9292 10068])
                    ("callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10086 10090])
                            ("callback" variable nil (reparse-symbol function_parameters) [10092 10100])
                            ("args" variable nil (reparse-symbol function_parameters) [10102 10107])
                            ("kwds" variable nil (reparse-symbol function_parameters) [10109 10115]))                          
                        :documentation "Registers an arbitrary callback and arguments.

        Cannot suppress exceptions.
        ")
                        (reparse-symbol indented_block_body) [10073 10576])
                    ("enter_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10599 10603])
                            ("cm" variable nil (reparse-symbol function_parameters) [10605 10607]))                          
                        :documentation "Enters the supplied context manager

        If successful, also pushes its __exit__ method as a callback and
        returns the result of the __enter__ method.
        ")
                        (reparse-symbol indented_block_body) [10581 11038])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11053 11057]))                          
                        :documentation "Immediately unwind the context stack")
                        (reparse-symbol indented_block_body) [11043 11151])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11169 11173])
                            ("exc_details" variable nil (reparse-symbol function_parameters) [11175 11187]))                          )
                        (reparse-symbol indented_block_body) [11156 13163]))                  
                :type "class")
                nil [8250 13163]))          
      :file "contextlib.py"
      :pointmax 13163
      :fsize 13162
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 4579 . 4681) (NEWLINE 4144 . 4145) (COLON 4143 . 4144) (EXCEPT 4137 . 4143) (INDENT_BLOCK 3749 . 4125) (NEWLINE 3677 . 3678) (COLON 3676 . 3677) (AS 3670 . 3672) (EXCEPT 3650 . 3656) (INDENT_BLOCK 3598 . 3638) (NEWLINE 3370 . 3371) (COLON 3369 . 3370) (TRY 3270 . 3273) (AS 3363 . 3365) (RAISE 2743 . 2748) (FROM 2788 . 2792) (NEWLINE 2797 . 2798)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Get useful information from live Python objects.

This module encapsulates the interface provided by the internal special
attributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.
It also provides some help for examining source code and class layout.

Here are some of the useful functions provided by this module:

    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),
        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),
        isroutine() - check object types
    getmembers() - get members of an object that satisfy a given condition

    getfile(), getsourcefile(), getsource() - find an object's source code
    getdoc(), getcomments() - get documentation on an object
    getmodule() - determine the module that an object came from
    getclasstree() - arrange classes so as to represent their hierarchy

    getargvalues(), getcallargs() - get info about function arguments
    getfullargspec() - same, with support for Python 3 features
    formatargspec(), formatargvalues() - format an argument spec
    getouterframes(), getinnerframes() - get info about frames
    currentframe() - get the current stack frame
    stack(), trace() - get info about frames on the stack or in a traceback

    signature() - get a Signature object for the callable
\"\"\"" code nil nil [1 1310])
            ("__author__" variable nil nil [1368 1468])
            ("abc" include nil nil [1470 1480])
            ("ast" include nil nil [1481 1491])
            ("dis" include nil nil [1492 1502])
            ("collections.abc" include nil nil [1503 1525])
            ("enum" include nil nil [1526 1537])
            ("importlib.machinery" include nil nil [1538 1564])
            ("itertools" include nil nil [1565 1581])
            ("linecache" include nil nil [1582 1598])
            ("os" include nil nil [1599 1608])
            ("re" include nil nil [1609 1618])
            ("sys" include nil nil [1619 1629])
            ("tokenize" include nil nil [1630 1645])
            ("token" include nil nil [1646 1658])
            ("types" include nil nil [1659 1671])
            ("warnings" include nil nil [1672 1687])
            ("functools" include nil nil [1688 1704])
            ("builtins" include nil nil [1705 1720])
            ("operator" include nil nil [1721 1752])
            ("collections" include nil nil [1753 1800])
            ("mod_dict" variable nil nil [1913 1933])
            ("for" code nil nil [1934 2007])
            ("TPFLAGS_IS_ABSTRACT" code nil nil [2031 2060])
            ("ismodule" function
               (:documentation "Return true if the object is a module.

    Module objects provide these attributes:
        __cached__      pathname to byte compiled file
        __doc__         documentation string
        __file__        filename (missing for built-in modules)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2151 2157]))                  )
                nil [2138 2467])
            ("isclass" function
               (:documentation "Return true if the object is a class.

    Class objects provide these attributes:
        __doc__         documentation string
        __module__      name of module in which this class was defined"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2480 2486]))                  )
                nil [2468 2734])
            ("ismethod" function
               (:documentation "Return true if the object is an instance method.

    Instance method objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this method was defined
        __func__        function object containing implementation of method
        __self__        instance to which this method is bound"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2748 2754]))                  )
                nil [2735 3167])
            ("ismethoddescriptor" function
               (:documentation "Return true if the object is a method descriptor.

    But not if ismethod() or isclass() or isfunction() are true.

    This is new in Python 2.2, and, for example, is true of int.__add__.
    An object passing this test has a __get__ attribute but not a __set__
    attribute, but beyond that the set of attributes varies.  __name__ is
    usually sensible, and __doc__ often is.

    Methods implemented via descriptors that also pass one of the other
    tests return false from the ismethoddescriptor() test, simply because
    the other tests promise more -- you can, e.g., count on having the
    __func__ attribute (etc) when an object passes ismethod()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [3191 3197]))                  )
                nil [3168 4074])
            ("isdatadescriptor" function
               (:documentation "Return true if the object is a data descriptor.

    Data descriptors have both a __get__ and a __set__ attribute.  Examples are
    properties (defined in Python) and getsets and members (defined in C).
    Typically, data descriptors will also have __name__ and __doc__ attributes
    (properties, getsets, and members have both of these attributes), but this
    is not guaranteed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [4096 4102]))                  )
                nil [4075 4697])
            ("if" code nil nil [4698 5275])
            ("if" code nil nil [5276 5853])
            ("isfunction" function
               (:documentation "Return true if the object is a user-defined function.

    Function objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this function was defined
        __code__        code object containing compiled function bytecode
        __defaults__    tuple of any default values for arguments
        __globals__     global namespace in which this function was defined
        __annotations__ dict of parameter annotations
        __kwdefaults__  dict of keyword only parameters with defaults"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [5869 5875]))                  )
                nil [5854 6491])
            ("isgeneratorfunction" function
               (:documentation "Return true if the object is a user-defined generator function.

    Generator function objects provide the same attributes as functions.
    See help(isfunction) for a list of attributes."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6516 6522]))                  )
                nil [6492 6842])
            ("iscoroutinefunction" function
               (:documentation "Return true if the object is a coroutine function.

    Coroutine functions are defined with \"async def\" syntax.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6867 6873]))                  )
                nil [6843 7122])
            ("isasyncgenfunction" function
               (:documentation "Return true if the object is an asynchronous generator function.

    Asynchronous generator functions are defined with \"async def\"
    syntax and have \"yield\" expressions in their body.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [7146 7152]))                  )
                nil [7123 7481])
            ("isasyncgen" function
               (:documentation "Return true if the object is an asynchronous generator."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [7497 7503]))                  )
                nil [7482 7628])
            ("isgenerator" function
               (:documentation "Return true if the object is a generator.

    Generator objects provide these attributes:
        __iter__        defined to support iteration over container
        close           raises a new GeneratorExit exception inside the
                        generator to terminate the iteration
        gi_code         code object
        gi_frame        frame object or possibly None once the generator has
                        been exhausted
        gi_running      set to 1 when generator is executing, 0 otherwise
        next            return the next item from the container
        send            resumes the generator and \"sends\" a value that becomes
                        the result of the current yield-expression
        throw           used to raise an exception inside the generator"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [7645 7651]))                  )
                nil [7629 8515])
            ("iscoroutine" function
               (:documentation "Return true if the object is a coroutine."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [8532 8538]))                  )
                nil [8516 8644])
            ("isawaitable" function
               (:documentation "Return true if object can be passed to an ``await`` expression."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [8661 8667]))                  )
                nil [8645 8987])
            ("istraceback" function
               (:documentation "Return true if the object is a traceback.

    Traceback objects provide these attributes:
        tb_frame        frame object at this level
        tb_lasti        index of last attempted instruction in bytecode
        tb_lineno       current line number in Python source code
        tb_next         next inner traceback object (called by this level)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [9004 9010]))                  )
                nil [8988 9429])
            ("isframe" function
               (:documentation "Return true if the object is a frame object.

    Frame objects provide these attributes:
        f_back          next outer frame object (this frame's caller)
        f_builtins      built-in namespace seen by this frame
        f_code          code object being executed in this frame
        f_globals       global namespace seen by this frame
        f_lasti         index of last attempted instruction in bytecode
        f_lineno        current line number in Python source code
        f_locals        local namespace seen by this frame
        f_trace         tracing function for this frame, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [9442 9448]))                  )
                nil [9430 10117])
            ("iscode" function
               (:documentation "Return true if the object is a code object.

    Code objects provide these attributes:
        co_argcount         number of arguments (not including *, ** args
                            or keyword only arguments)
        co_code             string of raw compiled bytecode
        co_cellvars         tuple of names of cell variables
        co_consts           tuple of constants used in the bytecode
        co_filename         name of file in which this code object was created
        co_firstlineno      number of first line in Python source code
        co_flags            bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg
                            | 16=nested | 32=generator | 64=nofree | 128=coroutine
                            | 256=iterable_coroutine | 512=async_generator
        co_freevars         tuple of names of free variables
        co_kwonlyargcount   number of keyword only arguments (not including ** arg)
        co_lnotab           encoded mapping of line numbers to bytecode indices
        co_name             name with which this code object was defined
        co_names            tuple of names of local variables
        co_nlocals          number of local variables
        co_stacksize        virtual machine stack space required
        co_varnames         tuple of names of arguments and local variables"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10129 10135]))                  )
                nil [10118 11544])
            ("isbuiltin" function
               (:documentation "Return true if the object is a built-in function or method.

    Built-in functions and methods provide these attributes:
        __doc__         documentation string
        __name__        original name of this function or method
        __self__        instance to which a method is bound, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [11559 11565]))                  )
                nil [11545 11936])
            ("isroutine" function
               (:documentation "Return true if the object is any kind of function or method."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [11951 11957]))                  )
                nil [11937 12170])
            ("isabstract" function
               (:documentation "Return true if the object is an abstract base class (ABC)."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [12186 12192]))                  )
                nil [12171 13178])
            ("getmembers" function
               (:documentation "Return all members of an object as (name, value) pairs sorted by name.
    Optionally, only return members that satisfy a given predicate."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [13194 13200])
                    ("predicate" variable nil (reparse-symbol function_parameters) [13202 13211]))                  )
                nil [13179 14852])
            ("Attribute" variable nil nil [14853 14923])
            ("classify_class_attrs" function
               (:documentation "Return list of attribute-descriptor tuples.

    For each name in dir(cls), the return list contains a 4-tuple
    with these elements:

        0. The name (a string).

        1. The kind of attribute this is, one of these strings:
               'class method'    created via classmethod()
               'static method'   created via staticmethod()
               'property'        created via property()
               'method'          any other flavor of method or descriptor
               'data'            not a method

        2. The class which defined this attribute (a class).

        3. The object as obtained by calling getattr; if this fails, or if the
           resulting object does not live anywhere in the class' mro (including
           metaclasses) then the object is looked up in the defining class's
           dict (found by walking the mro).

    If one of the items in dir(cls) is stored in the metaclass it will now
    be discovered and not have None be listed as the class in which it was
    defined.  Any items whose home class cannot be discovered are skipped.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [14950 14953]))                  )
                nil [14925 19695])
            ("getmro" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [19784 19787]))              ) nil [19773 19892])
            ("unwrap" function
               (:documentation "Get the object wrapped by *func*.

   Follows the chain of :attr:`__wrapped__` attributes returning the last
   object in the chain.

   *stop* is an optional callback accepting an object in the wrapper chain
   as its sole argument that allows the unwrapping to be terminated early if
   the callback returns a true value. If the callback never returns a true
   value, the last object in the chain is returned as usual. For example,
   :func:`signature` uses this to stop unwrapping if any object in the
   chain has a ``__signature__`` attribute defined.

   :exc:`ValueError` is raised if a cycle is encountered.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [19981 19985])
                    ("stop" variable nil (reparse-symbol function_parameters) [19990 19994]))                  )
                nil [19970 21193])
            ("indentsize" function
               (:documentation "Return the indent size, in spaces, at the start of a line of text."
                :arguments 
                  ( ("line" variable nil (reparse-symbol function_parameters) [21285 21289]))                  )
                nil [21270 21449])
            ("_findclass" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [21465 21469]))              ) nil [21450 21699])
            ("_finddoc" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [21713 21716]))              ) nil [21700 23424])
            ("getdoc" function
               (:documentation "Get the documentation string for an object.

    All tabs are expanded to spaces.  To clean up docstrings that are
    indented to line up with blocks of code, any whitespace than can be
    uniformly removed from the second line onwards is removed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [23436 23442]))                  )
                nil [23425 24004])
            ("cleandoc" function
               (:documentation "Clean up indentation from docstrings.

    Any whitespace that can be uniformly removed from the second line
    onwards is removed."
                :arguments 
                  ( ("doc" variable nil (reparse-symbol function_parameters) [24018 24021]))                  )
                nil [24005 24973])
            ("getfile" function
               (:documentation "Work out which source or compiled file an object was defined in."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [24986 24992]))                  )
                nil [24974 25942])
            ("getmodulename" function
               (:documentation "Return the module name for a given file, or None."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [25961 25965]))                  )
                nil [25943 26423])
            ("getsourcefile" function
               (:documentation "Return the filename that can be used to locate an object's source.
    Return None if no way can be identified to get the source.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [26442 26448]))                  )
                nil [26424 27407])
            ("getabsfile" function
               (:documentation "Return an absolute path to the source or compiled file for an object.

    The idea is for each object to have a unique origin, so this routine
    normalizes the result as much as possible."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [27423 27429])
                    ("_filename" variable nil (reparse-symbol function_parameters) [27431 27440]))                  )
                nil [27408 27792])
            ("modulesbyfile" variable nil nil [27793 27811])
            ("_filesbymodname" variable nil nil [27812 27832])
            ("getmodule" function
               (:documentation "Return the module an object was defined in, or None if not found."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [27848 27854])
                    ("_filename" variable nil (reparse-symbol function_parameters) [27856 27865]))                  )
                nil [27834 29719])
            ("findsource" function
               (:documentation "Return the entire source file and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of all the lines
    in the file and the line number indexes a line in that list.  An OSError
    is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [29735 29741]))                  )
                nil [29720 32502])
            ("getcomments" function
               (:documentation "Get lines of comments immediately preceding an object's source code.

    Returns None when source can't be found.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [32519 32525]))                  )
                nil [32503 34230])
            ("EndOfBlock" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [34231 34265])
            ("BlockFinder" type
               (:documentation "Provide a tokeneater() method to detect the end of a code block."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [34392 34407])
                            ("self" variable nil (reparse-symbol indented_block_body) [34416 34437])
                            ("self" variable nil (reparse-symbol indented_block_body) [34446 34466])
                            ("self" variable nil (reparse-symbol indented_block_body) [34475 34496])
                            ("self" variable nil (reparse-symbol indented_block_body) [34505 34529])
                            ("self" variable nil (reparse-symbol indented_block_body) [34538 34567])
                            ("self" variable nil (reparse-symbol indented_block_body) [34576 34589]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34377 34381]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34364 34590])
                    ("tokeneater" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34610 34614])
                            ("type" variable nil (reparse-symbol function_parameters) [34616 34620])
                            ("token" variable nil (reparse-symbol function_parameters) [34622 34627])
                            ("srowcol" variable nil (reparse-symbol function_parameters) [34629 34636])
                            ("erowcol" variable nil (reparse-symbol function_parameters) [34638 34645])
                            ("line" variable nil (reparse-symbol function_parameters) [34647 34651]))                          )
                        (reparse-symbol indented_block_body) [34595 36579]))                  
                :type "class")
                nil [34266 36579])
            ("getblock" function
               (:documentation "Extract the block of code at the top of the given list of lines."
                :arguments 
                  ( ("lines" variable nil (reparse-symbol function_parameters) [36593 36598]))                  )
                nil [36580 36947])
            ("getsourcelines" function
               (:documentation "Return a list of source lines and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of the lines
    corresponding to the object and the line number indicates where in the
    original source file the first line of code was found.  An OSError is
    raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [36967 36973]))                  )
                nil [36948 37579])
            ("getsource" function
               (:documentation "Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    OSError is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [37594 37600]))                  )
                nil [37580 37943])
            ("walktree" function
               (:documentation "Recursive helper function for getclasstree()."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [38033 38040])
                    ("children" variable nil (reparse-symbol function_parameters) [38042 38050])
                    ("parent" variable nil (reparse-symbol function_parameters) [38052 38058]))                  )
                nil [38020 38364])
            ("getclasstree" function
               (:documentation "Arrange the given list of classes into a hierarchy of nested lists.

    Where a nested list appears, it contains classes derived from the class
    whose entry immediately precedes the list.  Each entry is a 2-tuple
    containing a class and a tuple of its base classes.  If the 'unique'
    argument is true, exactly one entry appears in the returned structure
    for each class in the given list.  Otherwise, classes using multiple
    inheritance and their descendants will appear multiple times."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [38382 38389])
                    ("unique" variable nil (reparse-symbol function_parameters) [38391 38397]))                  )
                nil [38365 39465])
            ("Arguments" variable nil nil [39542 39601])
            ("getargs" function
               (:documentation "Get information about the arguments accepted by a code object.

    Three things are returned: (args, varargs, varkw), where
    'args' is the list of argument names. Keyword-only arguments are
    appended. 'varargs' and 'varkw' are the names of the * and **
    arguments or None."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [39615 39617]))                  )
                nil [39603 40025])
            ("_getfullargs" function
               (:documentation "Get information about the arguments accepted by a code object.

    Four things are returned: (args, varargs, kwonlyargs, varkw), where
    'args' and 'kwonlyargs' are lists of argument names, and 'varargs'
    and 'varkw' are the names of the * and ** arguments or None."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [40043 40045]))                  )
                nil [40026 40878])
            ("ArgSpec" variable nil nil [40880 40945])
            ("getargspec" function
               (:documentation "Get the names and default values of a function's parameters.

    A tuple of four things is returned: (args, varargs, keywords, defaults).
    'args' is a list of the argument names, including keyword-only argument names.
    'varargs' and 'keywords' are the names of the * and ** parameters or None.
    'defaults' is an n-tuple of the default values of the last n parameters.

    This function is deprecated, as it does not support annotations or
    keyword-only parameters and will raise ValueError if either is present
    on the supplied callable.

    For a more structured introspection API, use inspect.signature() instead.

    Alternatively, use getfullargspec() for an API with a similar namedtuple
    based interface, but full support for annotations and keyword-only
    parameters.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [40962 40966]))                  )
                nil [40947 42300])
            ("FullArgSpec" variable nil nil [42301 42419])
            ("getfullargspec" function
               (:documentation "Get the names and default values of a callable object's parameters.

    A tuple of seven things is returned:
    (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).
    'args' is a list of the parameter names.
    'varargs' and 'varkw' are the names of the * and ** parameters or None.
    'defaults' is an n-tuple of the default values of the last n parameters.
    'kwonlyargs' is a list of keyword-only parameter names.
    'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.
    'annotations' is a dictionary mapping parameter names to annotations.

    Notable differences from inspect.signature():
      - the \"self\" parameter is always reported, even for bound methods
      - wrapper chains defined by __wrapped__ *not* unwrapped automatically
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [42440 42444]))                  )
                nil [42421 45810])
            ("ArgInfo" variable nil nil [45812 45875])
            ("getargvalues" function
               (:documentation "Get information about arguments passed into a particular frame.

    A tuple of four things is returned: (args, varargs, varkw, locals).
    'args' is a list of the argument names.
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'locals' is the locals dictionary of the given frame."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [45894 45899]))                  )
                nil [45877 46332])
            ("formatannotation" function (:arguments 
              ( ("annotation" variable nil (reparse-symbol function_parameters) [46354 46364])
                ("base_module" variable nil (reparse-symbol function_parameters) [46366 46377]))              ) nil [46333 46736])
            ("formatannotationrelativeto" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [46768 46774]))              ) nil [46737 46946])
            ("formatargspec" function
               (:documentation "Format an argument spec from the values returned by getfullargspec.

    The first seven arguments are (args, varargs, varkw, defaults,
    kwonlyargs, kwonlydefaults, annotations).  The other five arguments
    are the corresponding optional formatting functions that are called to
    turn names and values into strings.  The last argument is an optional
    function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [46965 46969])
                    ("varargs" variable nil (reparse-symbol function_parameters) [46971 46978])
                    ("varkw" variable nil (reparse-symbol function_parameters) [46985 46990])
                    ("defaults" variable nil (reparse-symbol function_parameters) [46997 47005])
                    ("kwonlyargs" variable nil (reparse-symbol function_parameters) [47030 47040])
                    ("kwonlydefaults" variable nil (reparse-symbol function_parameters) [47045 47059])
                    ("annotations" variable nil (reparse-symbol function_parameters) [47064 47075])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [47098 47107])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [47131 47144])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [47188 47199])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [47244 47255])
                    ("formatreturns" variable nil (reparse-symbol function_parameters) [47307 47320])
                    ("formatannotation" variable nil (reparse-symbol function_parameters) [47367 47383]))                  )
                nil [46947 48983])
            ("formatargvalues" function
               (:documentation "Format an argument spec from the 4 values returned by getargvalues.

    The first four arguments are (args, varargs, varkw, locals).  The
    next four arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings.  The ninth
    argument is an optional function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [49004 49008])
                    ("varargs" variable nil (reparse-symbol function_parameters) [49010 49017])
                    ("varkw" variable nil (reparse-symbol function_parameters) [49019 49024])
                    ("locals" variable nil (reparse-symbol function_parameters) [49026 49032])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [49054 49063])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [49089 49102])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [49148 49159])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [49206 49217]))                  )
                nil [48984 50081])
            ("_missing_arguments" function (:arguments 
              ( ("f_name" variable nil (reparse-symbol function_parameters) [50105 50111])
                ("argnames" variable nil (reparse-symbol function_parameters) [50113 50121])
                ("pos" variable nil (reparse-symbol function_parameters) [50123 50126])
                ("values" variable nil (reparse-symbol function_parameters) [50128 50134]))              ) nil [50082 50675])
            ("_too_many" function (:arguments 
              ( ("f_name" variable nil (reparse-symbol function_parameters) [50690 50696])
                ("args" variable nil (reparse-symbol function_parameters) [50698 50702])
                ("kwonly" variable nil (reparse-symbol function_parameters) [50704 50710])
                ("varargs" variable nil (reparse-symbol function_parameters) [50712 50719])
                ("defcount" variable nil (reparse-symbol function_parameters) [50721 50729])
                ("given" variable nil (reparse-symbol function_parameters) [50731 50736])
                ("values" variable nil (reparse-symbol function_parameters) [50738 50744]))              ) nil [50676 51560])
            ("getcallargs" function
               (:documentation "Get the mapping of arguments to values.

    A dict is returned, with keys the function argument names (including the
    names of the * and ** arguments, if any), and values the respective bound
    values from 'positional' and 'named'."
                :arguments 
                  ( ("func_and_positional" variable nil (reparse-symbol function_parameters) [51577 51597])
                    ("named" variable nil (reparse-symbol function_parameters) [51599 51606]))                  )
                nil [51561 53914])
            ("ClosureVars" variable nil nil [53915 53992])
            ("getclosurevars" function
               (:documentation "
    Get the mapping of free variables to their current values.

    Returns a named tuple of dicts mapping the current nonlocal, global
    and builtin references as seen by the body of the function. A final
    set of unbound names that could not be resolved is also provided.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [54013 54017]))                  )
                nil [53994 55766])
            ("Traceback" variable nil nil [55844 55926])
            ("getframeinfo" function
               (:documentation "Get information about a frame or traceback object.

    A tuple of five things is returned: the filename, the line number of
    the current line, the function name, a list of lines of context from
    the source code, and the index of the current line within that list.
    The optional second argument specifies the number of lines of context
    to return, which are centered around the current line."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [55945 55950])
                    ("context" variable nil (reparse-symbol function_parameters) [55952 55959]))                  )
                nil [55928 57124])
            ("getlineno" function
               (:documentation "Get the line number from a frame object, allowing for optimization."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [57139 57144]))                  )
                nil [57125 57319])
            ("FrameInfo" variable nil nil [57320 57387])
            ("getouterframes" function
               (:documentation "Get a list of records for a frame and all higher (calling) frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [57408 57413])
                    ("context" variable nil (reparse-symbol function_parameters) [57415 57422]))                  )
                nil [57389 57840])
            ("getinnerframes" function
               (:documentation "Get a list of records for a traceback's frame and all lower frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [57860 57862])
                    ("context" variable nil (reparse-symbol function_parameters) [57864 57871]))                  )
                nil [57841 58285])
            ("currentframe" function (:documentation "Return the frame of the caller or None if this is not possible.") nil [58286 58447])
            ("stack" function
               (:documentation "Return a list of records for the stack above the caller's frame."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [58458 58465]))                  )
                nil [58448 58598])
            ("trace" function
               (:documentation "Return a list of records for the stack below the current exception."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [58609 58616]))                  )
                nil [58599 58753])
            ("_sentinel" variable nil nil [58833 58853])
            ("_static_getmro" function (:arguments 
              ( ("klass" variable nil (reparse-symbol function_parameters) [58874 58879]))              ) nil [58855 58933])
            ("_check_instance" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [58954 58957])
                ("attr" variable nil (reparse-symbol function_parameters) [58959 58963]))              ) nil [58934 59155])
            ("_check_class" function (:arguments 
              ( ("klass" variable nil (reparse-symbol function_parameters) [59174 59179])
                ("attr" variable nil (reparse-symbol function_parameters) [59181 59185]))              ) nil [59157 59413])
            ("_is_type" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [59427 59430]))              ) nil [59414 59529])
            ("_shadowed_dict" function (:arguments 
              ( ("klass" variable nil (reparse-symbol function_parameters) [59549 59554]))              ) nil [59530 60009])
            ("getattr_static" function
               (:documentation "Retrieve attributes without triggering dynamic lookup via the
       descriptor protocol,  __getattr__ or __getattribute__.

       Note: this function may not be able to retrieve all attributes
       that getattr can fetch (like dynamically created attributes)
       and may find attributes that getattr can't (like descriptors
       that raise AttributeError). It can also return descriptor objects
       instead of instance members in some cases. See the
       documentation for details.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [60029 60032])
                    ("attr" variable nil (reparse-symbol function_parameters) [60034 60038])
                    ("default" variable nil (reparse-symbol function_parameters) [60040 60047]))                  )
                nil [60010 61717])
            ("GEN_CREATED" variable nil nil [61795 61822])
            ("GEN_RUNNING" variable nil nil [61823 61850])
            ("GEN_SUSPENDED" variable nil nil [61851 61882])
            ("GEN_CLOSED" variable nil nil [61883 61908])
            ("getgeneratorstate" function
               (:documentation "Get current state of a generator-iterator.

    Possible states are:
      GEN_CREATED: Waiting to start execution.
      GEN_RUNNING: Currently being executed by the interpreter.
      GEN_SUSPENDED: Currently suspended at a yield expression.
      GEN_CLOSED: Execution has completed.
    "
                :arguments 
                  ( ("generator" variable nil (reparse-symbol function_parameters) [61932 61941]))                  )
                nil [61910 62456])
            ("getgeneratorlocals" function
               (:documentation "
    Get the mapping of generator local variables to their current values.

    A dict is returned, with the keys the local variable names and values the
    bound values."
                :arguments 
                  ( ("generator" variable nil (reparse-symbol function_parameters) [62481 62490]))                  )
                nil [62458 62936])
            ("CORO_CREATED" variable nil nil [63014 63043])
            ("CORO_RUNNING" variable nil nil [63044 63073])
            ("CORO_SUSPENDED" variable nil nil [63074 63107])
            ("CORO_CLOSED" variable nil nil [63108 63135])
            ("getcoroutinestate" function
               (:documentation "Get current state of a coroutine object.

    Possible states are:
      CORO_CREATED: Waiting to start execution.
      CORO_RUNNING: Currently being executed by the interpreter.
      CORO_SUSPENDED: Currently suspended at an await expression.
      CORO_CLOSED: Execution has completed.
    "
                :arguments 
                  ( ("coroutine" variable nil (reparse-symbol function_parameters) [63159 63168]))                  )
                nil [63137 63690])
            ("getcoroutinelocals" function
               (:documentation "
    Get the mapping of coroutine local variables to their current values.

    A dict is returned, with the keys the local variable names and values the
    bound values."
                :arguments 
                  ( ("coroutine" variable nil (reparse-symbol function_parameters) [63715 63724]))                  )
                nil [63692 64042])
            ("_WrapperDescriptor" variable nil nil [64246 64286])
            ("_MethodWrapper" variable nil nil [64287 64322])
            ("_ClassMethodWrapper" variable nil nil [64323 64377])
            ("_NonUserDefinedCallables" variable nil nil [64379 64574])
            ("_signature_get_user_defined_method" function
               (:documentation "Private helper. Checks if ``cls`` has an attribute
    named ``method_name`` and returns it only if it is a
    pure python function.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [64616 64619])
                    ("method_name" variable nil (reparse-symbol function_parameters) [64621 64632]))                  )
                nil [64577 65086])
            ("_signature_get_partial" function
               (:documentation "Private helper to calculate how 'wrapped_sig' signature will
    look like after applying a 'functools.partial' object (or alike)
    on it.
    "
                :arguments 
                  ( ("wrapped_sig" variable nil (reparse-symbol function_parameters) [65115 65126])
                    ("partial" variable nil (reparse-symbol function_parameters) [65128 65135])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [65137 65147]))                  )
                nil [65088 68106])
            ("_signature_bound_method" function
               (:documentation "Private helper to transform signatures for unbound
    functions to bound methods.
    "
                :arguments 
                  ( ("sig" variable nil (reparse-symbol function_parameters) [68136 68139]))                  )
                nil [68108 68930])
            ("_signature_is_builtin" function
               (:documentation "Private helper to test if `obj` is a callable that might
    support Argument Clinic's __text_signature__ protocol.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [68958 68961]))                  )
                nil [68932 69372])
            ("_signature_is_functionlike" function
               (:documentation "Private helper to test if `obj` is a duck type of FunctionType.
    A good example of such objects are functions compiled with
    Cython, which have all attributes that a pure Python function
    would have, but have their code statically compiled.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [69405 69408]))                  )
                nil [69374 70394])
            ("_signature_get_bound_param" function
               (:documentation " Private helper to get first parameter name from a
    __text_signature__ of a builtin method, which should
    be in the following format: '($param1, ...)'.
    Assumptions are that the first argument won't have
    a default value or an annotation.
    "
                :arguments 
                  ( ("spec" variable nil (reparse-symbol function_parameters) [70427 70431]))                  )
                nil [70396 70957])
            ("_signature_strip_non_python_syntax" function
               (:documentation "
    Private helper function. Takes a signature in Argument Clinic's
    extended signature format.

    Returns a tuple of three things:
      * that signature re-rendered in standard Python syntax,
      * the index of the \"self\" parameter (generally 0), or None if
        the function does not have a \"self\" parameter, and
      * the index of the last \"positional only\" parameter,
        or None if the signature has no positional-only parameters.
    "
                :arguments 
                  ( ("signature" variable nil (reparse-symbol function_parameters) [70998 71007]))                  )
                nil [70959 73151])
            ("_signature_fromstr" function
               (:documentation "Private helper to parse content of '__text_signature__'
    and return a Signature based on it.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [73176 73179])
                    ("obj" variable nil (reparse-symbol function_parameters) [73181 73184])
                    ("s" variable nil (reparse-symbol function_parameters) [73186 73187])
                    ("skip_bound_arg" variable nil (reparse-symbol function_parameters) [73189 73203]))                  )
                nil [73153 77649])
            ("_signature_from_builtin" function
               (:documentation "Private helper function to get signature for
    builtin callables.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [77679 77682])
                    ("func" variable nil (reparse-symbol function_parameters) [77684 77688])
                    ("skip_bound_arg" variable nil (reparse-symbol function_parameters) [77690 77704]))                  )
                nil [77651 78144])
            ("_signature_from_function" function
               (:documentation "Private helper: constructs Signature for the given python function."
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [78175 78178])
                    ("func" variable nil (reparse-symbol function_parameters) [78180 78184]))                  )
                nil [78146 81189])
            ("_signature_from_callable" function
               (:documentation "Private helper function to get signature for arbitrary
    callable objects.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [81220 81223])
                    ("follow_wrapper_chains" variable nil (reparse-symbol function_parameters) [81257 81278])
                    ("skip_bound_arg" variable nil (reparse-symbol function_parameters) [81314 81328])
                    ("sigcls" variable nil (reparse-symbol function_parameters) [81364 81370]))                  )
                nil [81191 89469])
            ("_void" type
               (:documentation "A private marker - used in Parameter & Signature."
                :type "class")
                nil [89471 89544])
            ("_empty" type
               (:documentation "Marker object for Signature.empty and Parameter.empty."
                :type "class")
                nil [89546 89625])
            ("_ParameterKind" type
               (:superclasses ("enum.IntEnum")
                :members 
                  ( ("POSITIONAL_ONLY" variable nil (reparse-symbol indented_block_body) [89667 89686])
                    ("POSITIONAL_OR_KEYWORD" variable nil (reparse-symbol indented_block_body) [89691 89716])
                    ("VAR_POSITIONAL" variable nil (reparse-symbol indented_block_body) [89721 89739])
                    ("KEYWORD_ONLY" variable nil (reparse-symbol indented_block_body) [89744 89760])
                    ("VAR_KEYWORD" variable nil (reparse-symbol indented_block_body) [89765 89780])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89798 89802]))                          )
                        (reparse-symbol indented_block_body) [89786 89832]))                  
                :type "class")
                nil [89627 89832])
            ("_POSITIONAL_ONLY" variable nil nil [89834 89891])
            ("_POSITIONAL_OR_KEYWORD" variable nil nil [89892 89955])
            ("_VAR_POSITIONAL" variable nil nil [89956 90012])
            ("_KEYWORD_ONLY" variable nil nil [90013 90067])
            ("_VAR_KEYWORD" variable nil nil [90068 90121])
            ("Parameter" type
               (:documentation "Represents a parameter in a function signature.

    Has the following public attributes:

    * name : str
        The name of the parameter as a string.
    * default : object
        The default value for the parameter if specified.  If the
        parameter has no default value, this attribute is set to
        `Parameter.empty`.
    * annotation
        The annotation for the parameter if specified.  If the
        parameter has no annotation, this attribute is set to
        `Parameter.empty`.
    * kind : str
        Describes how argument values are bound to the parameter.
        Possible values: `Parameter.POSITIONAL_ONLY`,
        `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
        `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [90933 90990])
                    ("POSITIONAL_ONLY" variable nil (reparse-symbol indented_block_body) [90996 91038])
                    ("POSITIONAL_OR_KEYWORD" variable nil (reparse-symbol indented_block_body) [91043 91091])
                    ("VAR_POSITIONAL" variable nil (reparse-symbol indented_block_body) [91096 91137])
                    ("KEYWORD_ONLY" variable nil (reparse-symbol indented_block_body) [91142 91181])
                    ("VAR_KEYWORD" variable nil (reparse-symbol indented_block_body) [91186 91224])
                    ("empty" variable nil (reparse-symbol indented_block_body) [91230 91244])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [91329 91535])
                            ("self" variable nil (reparse-symbol indented_block_body) [91543 91560])
                            ("if" code nil (reparse-symbol indented_block_body) [91570 91768])
                            ("self" variable nil (reparse-symbol indented_block_body) [91776 91799])
                            ("self" variable nil (reparse-symbol indented_block_body) [91808 91837])
                            ("if" code nil (reparse-symbol indented_block_body) [91847 91941])
                            ("if" code nil (reparse-symbol indented_block_body) [91950 92055])
                            ("if" code nil (reparse-symbol indented_block_body) [92064 92693])
                            ("if" code nil (reparse-symbol indented_block_body) [92702 92810])
                            ("self" variable nil (reparse-symbol indented_block_body) [92819 92836]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91263 91267])
                            ("name" variable nil (reparse-symbol function_parameters) [91269 91273])
                            ("kind" variable nil (reparse-symbol function_parameters) [91275 91279])
                            ("default" variable nil (reparse-symbol function_parameters) [91284 91291])
                            ("annotation" variable nil (reparse-symbol function_parameters) [91300 91310]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91250 92837])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92857 92861]))                          )
                        (reparse-symbol indented_block_body) [92842 93029])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93051 93055])
                            ("state" variable nil (reparse-symbol function_parameters) [93057 93062]))                          )
                        (reparse-symbol indented_block_body) [93034 93155])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93183 93187]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [93160 93216])
                    ("default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93247 93251]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [93221 93283])
                    ("annotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93317 93321]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [93288 93356])
                    ("kind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93384 93388]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [93361 93417])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93434 93438])
                            ("name" variable nil (reparse-symbol function_parameters) [93443 93447])
                            ("kind" variable nil (reparse-symbol function_parameters) [93455 93459])
                            ("annotation" variable nil (reparse-symbol function_parameters) [93483 93493])
                            ("default" variable nil (reparse-symbol function_parameters) [93501 93508]))                          
                        :documentation "Creates a customized copy of the Parameter.")
                        (reparse-symbol indented_block_body) [93422 93909])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93926 93930]))                          )
                        (reparse-symbol indented_block_body) [93914 94492])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94510 94514]))                          )
                        (reparse-symbol indented_block_body) [94497 94582])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94600 94604]))                          )
                        (reparse-symbol indented_block_body) [94587 94682])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94698 94702])
                            ("other" variable nil (reparse-symbol function_parameters) [94704 94709]))                          )
                        (reparse-symbol indented_block_body) [94687 95040]))                  
                :type "class")
                nil [90124 95040])
            ("BoundArguments" type
               (:documentation "Result of `Signature.bind` call.  Holds the mapping of arguments
    to the function's parameters.

    Has the following public attributes:

    * arguments : OrderedDict
        An ordered mutable mapping of parameters' names to arguments' values.
        Does not contain arguments' default values.
    * signature : Signature
        The Signature object that created this instance.
    * args : tuple
        Tuple of positional arguments values.
    * kwargs : dict
        Dict of keyword arguments values.
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [95598 95652])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [95708 95734])
                            ("self" variable nil (reparse-symbol indented_block_body) [95743 95770]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95671 95675])
                            ("signature" variable nil (reparse-symbol function_parameters) [95677 95686])
                            ("arguments" variable nil (reparse-symbol function_parameters) [95688 95697]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [95658 95771])
                    ("signature" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95804 95808]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [95776 95842])
                    ("args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95870 95874]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [95847 96532])
                    ("kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96562 96566]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [96537 97436])
                    ("apply_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97460 97464]))                          
                        :documentation "Set default values for missing arguments.

        For variable-positional arguments (*args) the default is an
        empty tuple.

        For variable-keyword arguments (**kwargs) the default is an
        empty dict.
        ")
                        (reparse-symbol indented_block_body) [97441 98457])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98473 98477])
                            ("other" variable nil (reparse-symbol function_parameters) [98479 98484]))                          )
                        (reparse-symbol indented_block_body) [98462 98726])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98748 98752])
                            ("state" variable nil (reparse-symbol function_parameters) [98754 98759]))                          )
                        (reparse-symbol indented_block_body) [98731 98852])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98874 98878]))                          )
                        (reparse-symbol indented_block_body) [98857 98957])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98975 98979]))                          )
                        (reparse-symbol indented_block_body) [98962 99180]))                  
                :type "class")
                nil [95042 99180])
            ("Signature" type
               (:documentation "A Signature object represents the overall signature of a function.
    It stores a Parameter object for each parameter accepted by the
    function, as well as information specific to the function itself.

    A Signature object has the following public attributes and methods:

    * parameters : OrderedDict
        An ordered mapping of parameters' names to the corresponding
        Parameter objects (keyword-only arguments are in the same order
        as listed in `code.co_varnames`).
    * return_annotation : object
        The annotation for the return type of the function if specified.
        If the function has no annotation for its return type, this
        attribute is set to `Signature.empty`.
    * bind(*args, **kwargs) -> BoundArguments
        Creates a mapping from positional and keyword arguments to
        parameters.
    * bind_partial(*args, **kwargs) -> BoundArguments
        Creates a partial mapping from positional and keyword arguments
        to parameters (simulating 'functools.partial' behavior.)
    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [100257 100306])
                    ("_parameter_cls" variable nil (reparse-symbol indented_block_body) [100312 100338])
                    ("_bound_arguments_cls" variable nil (reparse-symbol indented_block_body) [100343 100380])
                    ("empty" variable nil (reparse-symbol indented_block_body) [100386 100400])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructs Signature from the given list of Parameter
        objects and 'return_annotation'.  All arguments are optional.
        \"\"\"" code nil (reparse-symbol indented_block_body) [100527 100665])
                            ("if" code nil (reparse-symbol indented_block_body) [100675 102436])
                            ("self" variable nil (reparse-symbol indented_block_body) [102445 102494])
                            ("self" variable nil (reparse-symbol indented_block_body) [102503 102546]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100419 100423])
                            ("parameters" variable nil (reparse-symbol function_parameters) [100425 100435])
                            ("return_annotation" variable nil (reparse-symbol function_parameters) [100445 100462])
                            ("__validate_parameters__" variable nil (reparse-symbol function_parameters) [100488 100511]))                          
                        :documentation "Constructs Signature from the given list of Parameter
        objects and 'return_annotation'.  All arguments are optional.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [100406 102547])
                    ("from_function" function
                       (:documentation "Constructs Signature for the given python function."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [102587 102590])
                            ("func" variable nil (reparse-symbol function_parameters) [102592 102596]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [102552 102902])
                    ("from_builtin" function
                       (:documentation "Constructs Signature for the given builtin function."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [102941 102944])
                            ("func" variable nil (reparse-symbol function_parameters) [102946 102950]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [102907 103255])
                    ("from_callable" function
                       (:documentation "Constructs Signature for the given callable object."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [103295 103298])
                            ("obj" variable nil (reparse-symbol function_parameters) [103300 103303])
                            ("follow_wrapped" variable nil (reparse-symbol function_parameters) [103308 103322]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [103260 103531])
                    ("parameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103565 103569]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [103536 103604])
                    ("return_annotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103645 103649]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [103609 103691])
                    ("replace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103708 103712])
                            ("parameters" variable nil (reparse-symbol function_parameters) [103717 103727])
                            ("return_annotation" variable nil (reparse-symbol function_parameters) [103735 103752]))                          
                        :documentation "Creates a customized copy of the Signature.
        Pass 'parameters' and/or 'return_annotation' arguments
        to override them in the new copy.
        ")
                        (reparse-symbol indented_block_body) [103696 104214])
                    ("_hash_basis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104235 104239]))                          )
                        (reparse-symbol indented_block_body) [104219 104580])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104598 104602]))                          )
                        (reparse-symbol indented_block_body) [104585 104785])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104801 104805])
                            ("other" variable nil (reparse-symbol function_parameters) [104807 104812]))                          )
                        (reparse-symbol indented_block_body) [104790 105001])
                    ("_bind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105016 105020])
                            ("args" variable nil (reparse-symbol function_parameters) [105022 105026])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [105028 105034])
                            ("partial" variable nil (reparse-symbol function_parameters) [105039 105046]))                          
                        :documentation "Private method. Don't use directly.")
                        (reparse-symbol indented_block_body) [105006 110905])
                    ("bind" function
                       (:documentation "Get a BoundArguments object, that maps the passed `args`
        and `kwargs` to the function's signature.  Raises `TypeError`
        if the passed arguments can not be bound.
        "
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [110919 110924])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [110926 110934]))                          )
                        (reparse-symbol indented_block_body) [110910 111184])
                    ("bind_partial" function
                       (:documentation "Get a BoundArguments object, that partially maps the
        passed `args` and `kwargs` to the function's signature.
        Raises `TypeError` if the passed arguments can not be bound.
        "
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [111206 111211])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [111213 111221]))                          )
                        (reparse-symbol indented_block_body) [111189 111494])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111514 111518]))                          )
                        (reparse-symbol indented_block_body) [111499 111667])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111689 111693])
                            ("state" variable nil (reparse-symbol function_parameters) [111695 111700]))                          )
                        (reparse-symbol indented_block_body) [111672 111765])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111783 111787]))                          )
                        (reparse-symbol indented_block_body) [111770 111853])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111870 111874]))                          )
                        (reparse-symbol indented_block_body) [111858 113612]))                  
                :type "class")
                nil [99182 113612])
            ("signature" function
               (:documentation "Get a signature object for the passed callable."
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [113628 113631])
                    ("follow_wrapped" variable nil (reparse-symbol function_parameters) [113636 113650]))                  )
                nil [113614 113787])
            ("_main" function (:documentation " Logic for inspecting an object given at command line ") nil [113789 115608])
            ("if" code nil nil [115610 115649]))          
      :file "inspect.py"
      :pointmax 115649
      :fsize 115648
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 114448 . 114691) (NEWLINE 114447 . 114448) (COLON 114446 . 114447) (TRY 114357 . 114360) (AS 114440 . 114442) (MULT 113633 . 113634) (COMMA 113634 . 113635) (RAISE 109839 . 109844) (FROM 109957 . 109961) (NEWLINE 109966 . 109967) (RAISE 108440 . 108445) (FROM 108581 . 108585) (NEWLINE 108590 . 108591) (RAISE 107845 . 107850) (FROM 107923 . 107927) (NEWLINE 107932 . 107933) (RAISE 107559 . 107564) (FROM 107608 . 107612) (NEWLINE 107617 . 107618) (RAISE 107327 . 107332) (FROM 107348 . 107352) (NEWLINE 107357 . 107358) (RAISE 106336 . 106341) (FROM 106357 . 106361) (NEWLINE 106366 . 106367) (MULT 105036 . 105037) (COMMA 105037 . 105038) (MULT 103714 . 103715) (COMMA 103715 . 103716) (MULT 103305 . 103306) (COMMA 103306 . 103307) (MULT 100442 . 100443) (COMMA 100443 . 100444) (MULT 93440 . 93441) (COMMA 93441 . 93442) (MULT 91281 . 91282) (COMMA 91282 . 91283) (INDENT_BLOCK 88815 . 88925) (NEWLINE 88814 . 88815) (COLON 88813 . 88814) (TRY 88548 . 88551) (AS 88808 . 88810) (MULT 81225 . 81226) (COMMA 81226 . 81227) (NAME 75909 . 75916) (IF 75921 . 75923) (ELSE 75941 . 75945) (INDENT_BLOCK 65664 . 65778) (NEWLINE 65663 . 65664) (COLON 65662 . 65663) (TRY 65558 . 65561) (AS 65657 . 65659) (RETURN 58384 . 58390) (IF 58408 . 58410) (ELSE 58437 . 58441) (NAME 52313 . 52325) (IF 52342 . 52344) (ELSE 52354 . 52358) (INDENT_BLOCK 44467 . 44523) (NEWLINE 44206 . 44207) (COLON 44205 . 44206) (TRY 43267 . 43270) (AS 44200 . 44202) (MULT 19987 . 19988) (COMMA 19988 . 19989) (NAME 19073 . 19076) (IF 19087 . 19089) (ELSE 19110 . 19114) (INDENT_BLOCK 17624 . 18670) (NEWLINE 17623 . 17624) (COLON 17622 . 17623) (ELSE 17618 . 17622) (INDENT_BLOCK 17585 . 17606) (NEWLINE 17584 . 17585) (COLON 17583 . 17584) (TRY 17378 . 17381) (AS 17577 . 17579)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Generic output formatting.

Formatter objects transform an abstract flow of formatting events into
specific output events on writer objects. Formatters manage several stack
structures to allow various properties of a writer object to be changed and
restored; writers need not be able to handle relative changes nor any sort
of ``change back'' operation. Specific writer properties which may be
controlled via formatter objects are horizontal alignment, font, and left
margin indentations. A mechanism is provided which supports providing
arbitrary, non-exclusive style settings to a writer as well. Additional
interfaces facilitate formatting events which are not reversible, such as
paragraph separation.

Writer objects encapsulate device interfaces. Abstract devices, such as
file formats, are supported as well as physical devices. The provided
implementations all work with abstract devices. The interface makes
available mechanisms for setting the properties which formatter objects
manage and inserting data into the output.
\"\"\"" code nil nil [1 1039])
            ("sys" include nil nil [1041 1051])
            ("warnings" include nil nil [1052 1067])
            ("warnings" code nil nil [1068 1167])
            ("AS_IS" variable nil nil [1170 1182])
            ("NullFormatter" type
               (:documentation "A formatter which does nothing.

    If the writer parameter is omitted, a NullWriter instance is created.
    No methods of the writer are called by NullFormatter instances.

    Implementations should inherit from this class if implementing a writer
    interface but don't need to inherit any implementation.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1580 1633])
                            ("self" variable nil (reparse-symbol indented_block_body) [1641 1661]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1552 1556])
                            ("writer" variable nil (reparse-symbol function_parameters) [1558 1564]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1539 1662])
                    ("end_paragraph" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1684 1688])
                            ("blankline" variable nil (reparse-symbol function_parameters) [1690 1699]))                          )
                        (reparse-symbol indented_block_body) [1666 1707])
                    ("add_line_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1730 1734]))                          )
                        (reparse-symbol indented_block_body) [1711 1742])
                    ("add_hor_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1763 1767])
                            ("args" variable nil (reparse-symbol function_parameters) [1769 1774])
                            ("kw" variable nil (reparse-symbol function_parameters) [1776 1780]))                          )
                        (reparse-symbol indented_block_body) [1746 1788])
                    ("add_label_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1811 1815])
                            ("format" variable nil (reparse-symbol function_parameters) [1817 1823])
                            ("counter" variable nil (reparse-symbol function_parameters) [1825 1832])
                            ("blankline" variable nil (reparse-symbol function_parameters) [1834 1843]))                          )
                        (reparse-symbol indented_block_body) [1792 1856])
                    ("add_flowing_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1881 1885])
                            ("data" variable nil (reparse-symbol function_parameters) [1887 1891]))                          )
                        (reparse-symbol indented_block_body) [1860 1899])
                    ("add_literal_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1924 1928])
                            ("data" variable nil (reparse-symbol function_parameters) [1930 1934]))                          )
                        (reparse-symbol indented_block_body) [1903 1942])
                    ("flush_softspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1966 1970]))                          )
                        (reparse-symbol indented_block_body) [1946 1978])
                    ("push_alignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2001 2005])
                            ("align" variable nil (reparse-symbol function_parameters) [2007 2012]))                          )
                        (reparse-symbol indented_block_body) [1982 2020])
                    ("pop_alignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2042 2046]))                          )
                        (reparse-symbol indented_block_body) [2024 2054])
                    ("push_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2072 2076])
                            ("x" variable nil (reparse-symbol function_parameters) [2078 2079]))                          )
                        (reparse-symbol indented_block_body) [2058 2087])
                    ("pop_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2104 2108]))                          )
                        (reparse-symbol indented_block_body) [2091 2116])
                    ("push_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2136 2140])
                            ("margin" variable nil (reparse-symbol function_parameters) [2142 2148]))                          )
                        (reparse-symbol indented_block_body) [2120 2156])
                    ("pop_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2175 2179]))                          )
                        (reparse-symbol indented_block_body) [2160 2187])
                    ("set_spacing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2207 2211])
                            ("spacing" variable nil (reparse-symbol function_parameters) [2213 2220]))                          )
                        (reparse-symbol indented_block_body) [2191 2228])
                    ("push_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2247 2251])
                            ("styles" variable nil (reparse-symbol function_parameters) [2253 2260]))                          )
                        (reparse-symbol indented_block_body) [2232 2268])
                    ("pop_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2286 2290])
                            ("n" variable nil (reparse-symbol function_parameters) [2292 2293]))                          )
                        (reparse-symbol indented_block_body) [2272 2303])
                    ("assert_line_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2328 2332])
                            ("flag" variable nil (reparse-symbol function_parameters) [2334 2338]))                          )
                        (reparse-symbol indented_block_body) [2307 2348]))                  
                :type "class")
                nil [1185 2348])
            ("AbstractFormatter" type
               (:documentation "The standard formatter.

    This implementation has demonstrated wide applicability to many writers,
    and may be used directly in most circumstances.  It has been used to
    implement a full-featured World Wide Web browser.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2920 2940])
                            ("self" variable nil (reparse-symbol indented_block_body) [2976 2993])
                            ("self" variable nil (reparse-symbol indented_block_body) [3036 3057])
                            ("self" variable nil (reparse-symbol indented_block_body) [3094 3114])
                            ("self" variable nil (reparse-symbol indented_block_body) [3147 3169])
                            ("self" variable nil (reparse-symbol indented_block_body) [3202 3221])
                            ("self" variable nil (reparse-symbol indented_block_body) [3267 3288])
                            ("self" variable nil (reparse-symbol indented_block_body) [3333 3349])
                            ("self" variable nil (reparse-symbol indented_block_body) [3410 3428])
                            ("self" variable nil (reparse-symbol indented_block_body) [3479 3496])
                            ("self" variable nil (reparse-symbol indented_block_body) [3544 3560])
                            ("self" variable nil (reparse-symbol indented_block_body) [3620 3639])
                            ("self" variable nil (reparse-symbol indented_block_body) [3680 3699]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2897 2901])
                            ("writer" variable nil (reparse-symbol function_parameters) [2903 2909]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2884 3700])
                    ("end_paragraph" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3723 3727])
                            ("blankline" variable nil (reparse-symbol function_parameters) [3729 3738]))                          )
                        (reparse-symbol indented_block_body) [3705 4128])
                    ("add_line_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4152 4156]))                          )
                        (reparse-symbol indented_block_body) [4133 4369])
                    ("add_hor_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4391 4395])
                            ("args" variable nil (reparse-symbol function_parameters) [4397 4402])
                            ("kw" variable nil (reparse-symbol function_parameters) [4404 4408]))                          )
                        (reparse-symbol indented_block_body) [4374 4651])
                    ("add_label_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4675 4679])
                            ("format" variable nil (reparse-symbol function_parameters) [4681 4687])
                            ("counter" variable nil (reparse-symbol function_parameters) [4689 4696])
                            ("blankline" variable nil (reparse-symbol function_parameters) [4698 4707]))                          )
                        (reparse-symbol indented_block_body) [4656 5198])
                    ("format_counter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5222 5226])
                            ("format" variable nil (reparse-symbol function_parameters) [5228 5234])
                            ("counter" variable nil (reparse-symbol function_parameters) [5236 5243]))                          )
                        (reparse-symbol indented_block_body) [5203 5690])
                    ("format_letter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5713 5717])
                            ("case" variable nil (reparse-symbol function_parameters) [5719 5723])
                            ("counter" variable nil (reparse-symbol function_parameters) [5725 5732]))                          )
                        (reparse-symbol indented_block_body) [5695 6083])
                    ("format_roman" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6105 6109])
                            ("case" variable nil (reparse-symbol function_parameters) [6111 6115])
                            ("counter" variable nil (reparse-symbol function_parameters) [6117 6124]))                          )
                        (reparse-symbol indented_block_body) [6088 6864])
                    ("add_flowing_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6890 6894])
                            ("data" variable nil (reparse-symbol function_parameters) [6896 6900]))                          )
                        (reparse-symbol indented_block_body) [6869 7572])
                    ("add_literal_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7598 7602])
                            ("data" variable nil (reparse-symbol function_parameters) [7604 7608]))                          )
                        (reparse-symbol indented_block_body) [7577 7917])
                    ("flush_softspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7942 7946]))                          )
                        (reparse-symbol indented_block_body) [7922 8182])
                    ("push_alignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8206 8210])
                            ("align" variable nil (reparse-symbol function_parameters) [8212 8217]))                          )
                        (reparse-symbol indented_block_body) [8187 8443])
                    ("pop_alignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8466 8470]))                          )
                        (reparse-symbol indented_block_body) [8448 8755])
                    ("push_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8774 8778])
                            ("font" variable nil (reparse-symbol function_parameters) [8780 8784]))                          )
                        (reparse-symbol indented_block_body) [8760 9318])
                    ("pop_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9336 9340]))                          )
                        (reparse-symbol indented_block_body) [9323 9547])
                    ("push_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9568 9572])
                            ("margin" variable nil (reparse-symbol function_parameters) [9574 9580]))                          )
                        (reparse-symbol indented_block_body) [9552 9795])
                    ("pop_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9815 9819]))                          )
                        (reparse-symbol indented_block_body) [9800 10086])
                    ("set_spacing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10107 10111])
                            ("spacing" variable nil (reparse-symbol function_parameters) [10113 10120]))                          )
                        (reparse-symbol indented_block_body) [10091 10195])
                    ("push_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10215 10219])
                            ("styles" variable nil (reparse-symbol function_parameters) [10221 10228]))                          )
                        (reparse-symbol indented_block_body) [10200 10527])
                    ("pop_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10546 10550])
                            ("n" variable nil (reparse-symbol function_parameters) [10552 10553]))                          )
                        (reparse-symbol indented_block_body) [10532 10648])
                    ("assert_line_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10674 10678])
                            ("flag" variable nil (reparse-symbol function_parameters) [10680 10684]))                          )
                        (reparse-symbol indented_block_body) [10653 10798]))                  
                :type "class")
                nil [2350 10798])
            ("NullWriter" type
               (:documentation "Minimal writer interface to use in testing & inheritance.

    A writer which only provides the interface definition; no actions are
    taken on any methods.  This should be the base class for all writers
    which do not need to inherit any implementation methods.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("pass" code nil nil nil))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11118 11122]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11105 11130])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11144 11148]))                          )
                        (reparse-symbol indented_block_body) [11134 11156])
                    ("new_alignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11178 11182])
                            ("align" variable nil (reparse-symbol function_parameters) [11184 11189]))                          )
                        (reparse-symbol indented_block_body) [11160 11197])
                    ("new_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11214 11218])
                            ("font" variable nil (reparse-symbol function_parameters) [11220 11224]))                          )
                        (reparse-symbol indented_block_body) [11201 11232])
                    ("new_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11251 11255])
                            ("margin" variable nil (reparse-symbol function_parameters) [11257 11263])
                            ("level" variable nil (reparse-symbol function_parameters) [11265 11270]))                          )
                        (reparse-symbol indented_block_body) [11236 11278])
                    ("new_spacing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11298 11302])
                            ("spacing" variable nil (reparse-symbol function_parameters) [11304 11311]))                          )
                        (reparse-symbol indented_block_body) [11282 11319])
                    ("new_styles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11338 11342])
                            ("styles" variable nil (reparse-symbol function_parameters) [11344 11350]))                          )
                        (reparse-symbol indented_block_body) [11323 11358])
                    ("send_paragraph" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11381 11385])
                            ("blankline" variable nil (reparse-symbol function_parameters) [11387 11396]))                          )
                        (reparse-symbol indented_block_body) [11362 11404])
                    ("send_line_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11428 11432]))                          )
                        (reparse-symbol indented_block_body) [11408 11440])
                    ("send_hor_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11462 11466])
                            ("args" variable nil (reparse-symbol function_parameters) [11468 11473])
                            ("kw" variable nil (reparse-symbol function_parameters) [11475 11479]))                          )
                        (reparse-symbol indented_block_body) [11444 11487])
                    ("send_label_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11511 11515])
                            ("data" variable nil (reparse-symbol function_parameters) [11517 11521]))                          )
                        (reparse-symbol indented_block_body) [11491 11529])
                    ("send_flowing_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11555 11559])
                            ("data" variable nil (reparse-symbol function_parameters) [11561 11565]))                          )
                        (reparse-symbol indented_block_body) [11533 11573])
                    ("send_literal_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11599 11603])
                            ("data" variable nil (reparse-symbol function_parameters) [11605 11609]))                          )
                        (reparse-symbol indented_block_body) [11577 11617]))                  
                :type "class")
                nil [10800 11617])
            ("AbstractWriter" type
               (:documentation "A writer which can be used in debugging formatters, but not much else.

    Each method simply announces itself by printing its name and
    arguments on standard output.

    "
                :superclasses ("NullWriter")
                :members 
                  ( ("new_alignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11863 11867])
                            ("align" variable nil (reparse-symbol function_parameters) [11869 11874]))                          )
                        (reparse-symbol indented_block_body) [11845 11923])
                    ("new_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11941 11945])
                            ("font" variable nil (reparse-symbol function_parameters) [11947 11951]))                          )
                        (reparse-symbol indented_block_body) [11928 11994])
                    ("new_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12014 12018])
                            ("margin" variable nil (reparse-symbol function_parameters) [12020 12026])
                            ("level" variable nil (reparse-symbol function_parameters) [12028 12033]))                          )
                        (reparse-symbol indented_block_body) [11999 12090])
                    ("new_spacing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12111 12115])
                            ("spacing" variable nil (reparse-symbol function_parameters) [12117 12124]))                          )
                        (reparse-symbol indented_block_body) [12095 12173])
                    ("new_styles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12193 12197])
                            ("styles" variable nil (reparse-symbol function_parameters) [12199 12205]))                          )
                        (reparse-symbol indented_block_body) [12178 12252])
                    ("send_paragraph" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12276 12280])
                            ("blankline" variable nil (reparse-symbol function_parameters) [12282 12291]))                          )
                        (reparse-symbol indented_block_body) [12257 12345])
                    ("send_line_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12370 12374]))                          )
                        (reparse-symbol indented_block_body) [12350 12412])
                    ("send_hor_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12435 12439])
                            ("args" variable nil (reparse-symbol function_parameters) [12441 12446])
                            ("kw" variable nil (reparse-symbol function_parameters) [12448 12452]))                          )
                        (reparse-symbol indented_block_body) [12417 12488])
                    ("send_label_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12513 12517])
                            ("data" variable nil (reparse-symbol function_parameters) [12519 12523]))                          )
                        (reparse-symbol indented_block_body) [12493 12573])
                    ("send_flowing_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12600 12604])
                            ("data" variable nil (reparse-symbol function_parameters) [12606 12610]))                          )
                        (reparse-symbol indented_block_body) [12578 12662])
                    ("send_literal_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12689 12693])
                            ("data" variable nil (reparse-symbol function_parameters) [12695 12699]))                          )
                        (reparse-symbol indented_block_body) [12667 12751]))                  
                :type "class")
                nil [11619 12751])
            ("DumbWriter" type
               (:documentation "Simple writer class which writes output on the file object passed in
    as the file parameter or, if file is omitted, on standard output.  The
    output is simply word-wrapped to the number of columns specified by
    the maxcol parameter.  This class is suitable for reflowing a sequence
    of paragraphs.

    "
                :superclasses ("NullWriter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [13164 13194])
                            ("self" variable nil (reparse-symbol indented_block_body) [13203 13223])
                            ("NullWriter" code nil (reparse-symbol indented_block_body) [13232 13257])
                            ("self" code nil (reparse-symbol indented_block_body) [13266 13278]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13127 13131])
                            ("file" variable nil (reparse-symbol function_parameters) [13133 13137])
                            ("maxcol" variable nil (reparse-symbol function_parameters) [13144 13150]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13114 13279])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13294 13298]))                          )
                        (reparse-symbol indented_block_body) [13284 13347])
                    ("send_paragraph" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13371 13375])
                            ("blankline" variable nil (reparse-symbol function_parameters) [13377 13386]))                          )
                        (reparse-symbol indented_block_body) [13352 13475])
                    ("send_line_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13500 13504]))                          )
                        (reparse-symbol indented_block_body) [13480 13583])
                    ("send_hor_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13606 13610])
                            ("args" variable nil (reparse-symbol function_parameters) [13612 13617])
                            ("kw" variable nil (reparse-symbol function_parameters) [13619 13623]))                          )
                        (reparse-symbol indented_block_body) [13588 13773])
                    ("send_literal_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13800 13804])
                            ("data" variable nil (reparse-symbol function_parameters) [13806 13810]))                          )
                        (reparse-symbol indented_block_body) [13778 14044])
                    ("send_flowing_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14071 14075])
                            ("data" variable nil (reparse-symbol function_parameters) [14077 14081]))                          )
                        (reparse-symbol indented_block_body) [14049 14646]))                  
                :type "class")
                nil [12753 14646])
            ("test" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [14657 14661]))              ) nil [14648 15104])
            ("if" code nil nil [15106 15144]))          
      :file "formatter.py"
      :pointmax 15144
      :fsize 15143
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("try" code nil nil [2 321]))          
      :file "decimal.py"
      :pointmax 321
      :fsize 320
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("os" include nil nil [427 436])
            ("posixpath" include nil nil [437 453])
            ("re" include nil nil [454 463])
            ("functools" include nil nil [464 480])
            ("__all__" variable nil nil [482 541])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [555 559])
                    ("pat" variable nil (reparse-symbol function_parameters) [561 564]))                  )
                nil [543 1123])
            ("" code nil nil [1144 1169])
            ("_compile_pattern" function (:arguments 
              ( ("pat" variable nil (reparse-symbol function_parameters) [1191 1194]))              ) nil [1170 1421])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT."
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1433 1438])
                    ("pat" variable nil (reparse-symbol function_parameters) [1440 1443]))                  )
                nil [1422 1915])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1932 1936])
                    ("pat" variable nil (reparse-symbol function_parameters) [1938 1941]))                  )
                nil [1916 2167])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2169 3167]))          
      :file "fnmatch.py"
      :pointmax 3167
      :fsize 3166
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__all__" variable nil nil [1 174])
            ("_struct" include nil nil [176 197])
            ("_struct" include nil nil [198 229])
            ("_struct" include nil nil [230 257]))          
      :file "struct.py"
      :pointmax 258
      :fsize 257
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal classes used by the gzip, lzma and bz2 modules\"\"\"" code nil nil [1 62])
            ("io" include nil nil [64 73])
            ("BUFFER_SIZE" variable nil nil [76 112])
            ("BaseStream" type
               (:documentation "Mode-checking helper functions."
                :superclasses ("io.BufferedIOBase")
                :members 
                  ( ("_check_not_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [256 260]))                          )
                        (reparse-symbol indented_block_body) [234 348])
                    ("_check_can_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [373 377]))                          )
                        (reparse-symbol indented_block_body) [353 483])
                    ("_check_can_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [509 513]))                          )
                        (reparse-symbol indented_block_body) [488 619])
                    ("_check_can_seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [644 648]))                          )
                        (reparse-symbol indented_block_body) [624 999]))                  
                :type "class")
                nil [150 999])
            ("DecompressReader" type
               (:documentation "Adapts the decompressor API to a RawIOBase reader API"
                :superclasses ("io.RawIOBase")
                :members 
                  ( ("readable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1121 1125]))                          )
                        (reparse-symbol indented_block_body) [1108 1148])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1235 1248])
                            ("self" variable nil (reparse-symbol indented_block_body) [1257 1274])
                            ("self" variable nil (reparse-symbol indented_block_body) [1283 1296])
                            ("self" code nil (reparse-symbol indented_block_body) [1423 1438])
                            ("self" variable nil (reparse-symbol indented_block_body) [1716 1753])
                            ("self" variable nil (reparse-symbol indented_block_body) [1762 1793])
                            ("self" variable nil (reparse-symbol indented_block_body) [1802 1864])
                            ("self" variable nil (reparse-symbol indented_block_body) [1980 2017]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1166 1170])
                            ("fp" variable nil (reparse-symbol function_parameters) [1172 1174])
                            ("decomp_factory" variable nil (reparse-symbol function_parameters) [1176 1190])
                            ("trailing_error" variable nil (reparse-symbol function_parameters) [1192 1206])
                            ("decomp_args" variable nil (reparse-symbol function_parameters) [1211 1224]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1153 2018])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2033 2037]))                          )
                        (reparse-symbol indented_block_body) [2023 2105])
                    ("seekable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2123 2127]))                          )
                        (reparse-symbol indented_block_body) [2110 2165])
                    ("readinto" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2183 2187])
                            ("b" variable nil (reparse-symbol function_parameters) [2189 2190]))                          )
                        (reparse-symbol indented_block_body) [2170 2369])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2383 2387])
                            ("size" variable nil (reparse-symbol function_parameters) [2389 2393]))                          )
                        (reparse-symbol indented_block_body) [2374 3987])
                    ("_rewind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4063 4067]))                          )
                        (reparse-symbol indented_block_body) [4051 4214])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4228 4232])
                            ("offset" variable nil (reparse-symbol function_parameters) [4234 4240])
                            ("whence" variable nil (reparse-symbol function_parameters) [4242 4248]))                          )
                        (reparse-symbol indented_block_body) [4219 5247])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5261 5265]))                          
                        :documentation "Return the current file position.")
                        (reparse-symbol indented_block_body) [5252 5341]))                  
                :type "class")
                nil [1001 5341]))          
      :file "_compression.py"
      :pointmax 5341
      :fsize 5340
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 2258 . 2344) (NEWLINE 2257 . 2258) (COLON 2256 . 2257) (AS 2244 . 2246) (WITH 2201 . 2205) (COMMA 2227 . 2228)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Cache lines from Python source files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 202])
            ("functools" include nil nil [204 220])
            ("sys" include nil nil [221 231])
            ("os" include nil nil [232 241])
            ("tokenize" include nil nil [242 257])
            ("__all__" variable nil nil [259 308])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [322 330])
                ("lineno" variable nil (reparse-symbol function_parameters) [332 338])
                ("module_globals" variable nil (reparse-symbol function_parameters) [340 354]))              ) nil [310 502])
            ("cache" variable nil nil [652 662])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [665 752])
            ("getlines" function
               (:documentation "Get the lines for a Python source file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [767 775])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [777 791]))                  )
                nil [754 1190])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1207 1215]))                  )
                nil [1192 2006])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [2024 2032])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [2034 2048]))                  )
                nil [2008 4115])
            ("lazycache" function
               (:documentation "Seed the cache for filename with module_globals.

    The module loader will be asked for the source only when getlines is
    called, not immediately.

    If there is an entry in the cache already, it is not altered.

    :return: True if a lazy load is registered in the cache,
        otherwise False. To register such a load a module loader with a
        get_source method must be found, the filename must be a cachable
        filename, and the filename must not be already cached.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [4131 4139])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [4141 4155]))                  )
                nil [4117 5313]))          
      :file "linecache.py"
      :pointmax 5313
      :fsize 5312
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
    ast
    ~~~

    The `ast` module helps Python applications to process trees of the Python
    abstract syntax grammar.  The abstract syntax itself might change with
    each Python release; this module helps to find out programmatically what
    the current grammar looks like and allows modifications of it.

    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as
    a flag to the `compile()` builtin function or by using the `parse()`
    function from this module.  The result will be a tree of objects whose
    classes all inherit from `ast.AST`.

    A modified abstract syntax tree can be compiled into a Python code object
    using the built-in `compile()` function.

    Additionally various helper functions are provided that make working with
    the trees simpler.  The main intention of the helper functions and this
    module in general is to provide an easy to use interface for libraries
    that work tightly with the python syntax (template engines for example).


    :copyright: Copyright 2008 by Armin Ronacher.
    :license: Python License.
\"\"\"" code nil nil [1 1103])
            ("_ast" include nil nil [1104 1122])
            ("parse" function
               (:documentation "
    Parse the source into an AST node.
    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [1135 1141])
                    ("filename" variable nil (reparse-symbol function_parameters) [1143 1151])
                    ("mode" variable nil (reparse-symbol function_parameters) [1165 1169]))                  )
                nil [1125 1358])
            ("_NUM_TYPES" variable nil nil [1360 1394])
            ("literal_eval" function
               (:documentation "
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
    sets, booleans, and None.
    "
                :arguments 
                  ( ("node_or_string" variable nil (reparse-symbol function_parameters) [1413 1427]))                  )
                nil [1396 3408])
            ("dump" function
               (:documentation "
    Return a formatted dump of the tree in *node*.  This is mainly useful for
    debugging purposes.  The returned string will show the names and the values
    for fields.  This makes the code impossible to evaluate, so if evaluation is
    wanted *annotate_fields* must be set to False.  Attributes such as line
    numbers and column offsets are not dumped by default.  If this is wanted,
    *include_attributes* can be set to True.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [3419 3423])
                    ("annotate_fields" variable nil (reparse-symbol function_parameters) [3425 3440])
                    ("include_attributes" variable nil (reparse-symbol function_parameters) [3447 3465]))                  )
                nil [3410 4787])
            ("copy_location" function
               (:documentation "
    Copy source location (`lineno` and `col_offset` attributes) from
    *old_node* to *new_node* if possible, and return *new_node*.
    "
                :arguments 
                  ( ("new_node" variable nil (reparse-symbol function_parameters) [4807 4815])
                    ("old_node" variable nil (reparse-symbol function_parameters) [4817 4825]))                  )
                nil [4789 5214])
            ("fix_missing_locations" function
               (:documentation "
    When you compile a node tree with compile(), the compiler expects lineno and
    col_offset attributes for every node that supports them.  This is rather
    tedious to fill in for generated nodes, so this helper adds these attributes
    recursively where not already set, by setting them to the values of the
    parent node.  It works recursively starting at *node*.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [5242 5246]))                  )
                nil [5216 6183])
            ("increment_lineno" function
               (:documentation "
    Increment the line number of each node in the tree starting at *node* by *n*.
    This is useful to \"move code\" to a different location in a file.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [6206 6210])
                    ("n" variable nil (reparse-symbol function_parameters) [6212 6213]))                  )
                nil [6185 6531])
            ("iter_fields" function
               (:documentation "
    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``
    that is present on *node*.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [6549 6553]))                  )
                nil [6533 6820])
            ("iter_child_nodes" function
               (:documentation "
    Yield all direct child nodes of *node*, that is, all fields that are nodes
    and all items of fields that are lists of nodes.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [6843 6847]))                  )
                nil [6822 7241])
            ("get_docstring" function
               (:documentation "
    Return the docstring for the given node or None if no docstring can
    be found.  If the node provided does not have docstrings a TypeError
    will be raised.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [7261 7265])
                    ("clean" variable nil (reparse-symbol function_parameters) [7267 7272]))                  )
                nil [7243 7985])
            ("walk" function
               (:documentation "
    Recursively yield all descendant nodes in the tree starting at *node*
    (including *node* itself), in no specified order.  This is useful if you
    only want to modify nodes in place and don't care about the context.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [7996 8000]))                  )
                nil [7987 8411])
            ("NodeVisitor" type
               (:documentation "
    A node visitor base class that walks the abstract syntax tree and calls a
    visitor function for every node found.  This function may return a value
    which is forwarded by the `visit` method.

    This class is meant to be subclassed, with the subclass adding visitor
    methods.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `visit` method.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.

    Don't use the `NodeVisitor` if you want to apply changes to nodes during
    traversing.  For this a special visitor exists (`NodeTransformer`) that
    allows modifications.
    "
                :superclasses ("object")
                :members 
                  ( ("visit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9294 9298])
                            ("node" variable nil (reparse-symbol function_parameters) [9300 9304]))                          
                        :documentation "Visit a node.")
                        (reparse-symbol indented_block_body) [9284 9476])
                    ("generic_visit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9499 9503])
                            ("node" variable nil (reparse-symbol function_parameters) [9505 9509]))                          
                        :documentation "Called if no explicit visitor function exists for a node.")
                        (reparse-symbol indented_block_body) [9481 9868]))                  
                :type "class")
                nil [8413 9868])
            ("NodeTransformer" type
               (:documentation "
    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
    allows modification of nodes.

    The `NodeTransformer` will walk the AST and use the return value of the
    visitor methods to replace or remove the old node.  If the return value of
    the visitor method is ``None``, the node will be removed from its location,
    otherwise it is replaced with the return value.  The return value may be the
    original node in which case no replacement takes place.

    Here is an example transformer that rewrites all occurrences of name lookups
    (``foo``) to ``data['foo']``::

       class RewriteName(NodeTransformer):

           def visit_Name(self, node):
               return copy_location(Subscript(
                   value=Name(id='data', ctx=Load()),
                   slice=Index(value=Str(s=node.id)),
                   ctx=node.ctx
               ), node)

    Keep in mind that if the node you're operating on has child nodes you must
    either transform the child nodes yourself or call the :meth:`generic_visit`
    method for the node first.

    For nodes that were part of a collection of statements (that applies to all
    statement nodes), the visitor may also return a list of nodes rather than
    just a single node.

    Usually you use the transformer like this::

       node = YourTransformer().visit(node)
    "
                :superclasses ("NodeVisitor")
                :members 
                  ( ("generic_visit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11312 11316])
                            ("node" variable nil (reparse-symbol function_parameters) [11318 11322]))                          )
                        (reparse-symbol indented_block_body) [11294 12167]))                  
                :type "class")
                nil [9870 12167]))          
      :file "ast.py"
      :pointmax 12167
      :fsize 12166
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Disassembler of Python byte code into mnemonics.\"\"\"" code nil nil [1 55])
            ("sys" include nil nil [57 67])
            ("types" include nil nil [68 80])
            ("collections" include nil nil [81 99])
            ("io" include nil nil [100 109])
            ("opcode" include nil nil [111 131])
            ("opcode" include nil nil [132 174])
            ("__all__" code nil nil [176 368])
            ("del" code nil nil [369 385])
            ("_have_code" variable nil nil [387 501])
            ("FORMAT_VALUE" variable nil nil [503 539])
            ("_try_compile" function
               (:documentation "Attempts to compile the given source, first as an expression and
       then as a statement if the first approach fails.

       Utility function to accept strings in functions that otherwise
       expect code objects
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [558 564])
                    ("name" variable nil (reparse-symbol function_parameters) [566 570]))                  )
                nil [541 937])
            ("dis" function
               (:documentation "Disassemble classes, methods, functions, generators, or code.

    With no argument, disassemble the last traceback.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [946 947])
                    ("file" variable nil (reparse-symbol function_parameters) [957 961]))                  )
                nil [938 2156])
            ("distb" function
               (:documentation "Disassemble a traceback (default: last traceback)."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2167 2169])
                    ("file" variable nil (reparse-symbol function_parameters) [2179 2183]))                  )
                nil [2157 2520])
            ("COMPILER_FLAG_NAMES" variable nil nil [2699 2943])
            ("pretty_flags" function
               (:documentation "Return pretty representation of code flags."
                :arguments 
                  ( ("flags" variable nil (reparse-symbol function_parameters) [2962 2967]))                  )
                nil [2945 3320])
            ("_get_code_object" function
               (:documentation "Helper to handle methods, functions, generators, strings and raw code objects"
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [3342 3343]))                  )
                nil [3321 3882])
            ("code_info" function
               (:documentation "Formatted details of methods, functions, or code."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [3897 3898]))                  )
                nil [3883 4011])
            ("_format_code_info" function (:arguments 
              ( ("co" variable nil (reparse-symbol function_parameters) [4034 4036]))              ) nil [4012 5239])
            ("show_code" function
               (:documentation "Print details of methods, functions, or code to *file*.

    If *file* is not provided, the output is printed on stdout.
    "
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [5254 5256])
                    ("file" variable nil (reparse-symbol function_parameters) [5261 5265]))                  )
                nil [5240 5445])
            ("_Instruction" variable nil nil [5446 5574])
            ("_Instruction" variable nil nil [5576 5641])
            ("_Instruction" variable nil nil [5642 5700])
            ("_Instruction" variable nil nil [5701 5784])
            ("_Instruction" variable nil nil [5785 5869])
            ("_Instruction" variable nil nil [5870 5951])
            ("_Instruction" variable nil nil [5952 6033])
            ("_Instruction" variable nil nil [6034 6123])
            ("_Instruction" variable nil nil [6124 6213])
            ("Instruction" type
               (:documentation "Details for a bytecode operation

       Defined fields:
         opname - human readable name for operation
         opcode - numeric code for operation
         arg - numeric argument to operation (if any), otherwise None
         argval - resolved arg value (if known), otherwise same as arg
         argrepr - human readable description of operation argument
         offset - start index of operation within bytecode sequence
         starts_line - line started by this opcode (if any), otherwise None
         is_jump_target - True if other code jumps to here, otherwise False
    "
                :superclasses ("_Instruction")
                :members 
                  ( ("_disassemble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6868 6872])
                            ("lineno_width" variable nil (reparse-symbol function_parameters) [6874 6886])
                            ("mark_as_current" variable nil (reparse-symbol function_parameters) [6890 6905]))                          
                        :documentation "Format instruction details for inclusion in disassembly output

        *lineno_width* sets the width of the line number field (0 omits it)
        *mark_as_current* inserts a '-->' marker arrow as part of the line
        ")
                        (reparse-symbol indented_block_body) [6851 8248]))                  
                :type "class")
                nil [6215 8248])
            ("get_instructions" function
               (:documentation "Iterator for the opcodes in methods, functions or code

    Generates a series of Instruction named tuples giving the details of
    each operations in the supplied code.

    If *first_line* is not None, it indicates the line number that should
    be reported for the first source line in the disassembled code.
    Otherwise, the source line information (if any) is taken directly from
    the disassembled code object.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8271 8272])
                    ("first_line" variable nil (reparse-symbol function_parameters) [8277 8287]))                  )
                nil [8250 9168])
            ("_get_const_info" function
               (:documentation "Helper to get optional details about const references

       Returns the dereferenced constant and its repr if the constant
       list is defined.
       Otherwise returns the constant index and its repr().
    "
                :arguments 
                  ( ("const_index" variable nil (reparse-symbol function_parameters) [9189 9200])
                    ("const_list" variable nil (reparse-symbol function_parameters) [9202 9212]))                  )
                nil [9169 9568])
            ("_get_name_info" function
               (:documentation "Helper to get optional details about named references

       Returns the dereferenced name as both value and repr if the name
       list is defined.
       Otherwise returns the name index and its repr().
    "
                :arguments 
                  ( ("name_index" variable nil (reparse-symbol function_parameters) [9588 9598])
                    ("name_list" variable nil (reparse-symbol function_parameters) [9600 9609]))                  )
                nil [9569 10020])
            ("_get_instructions_bytes" function
               (:documentation "Iterate over the instructions in a bytecode string.

    Generates a sequence of Instruction namedtuples giving the details of each
    opcode.  Additional information about the code's runtime environment
    (e.g. variable names, constants) can be specified using optional
    arguments.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [10050 10054])
                    ("varnames" variable nil (reparse-symbol function_parameters) [10056 10064])
                    ("names" variable nil (reparse-symbol function_parameters) [10071 10076])
                    ("constants" variable nil (reparse-symbol function_parameters) [10083 10092])
                    ("cells" variable nil (reparse-symbol function_parameters) [10121 10126])
                    ("linestarts" variable nil (reparse-symbol function_parameters) [10133 10143])
                    ("line_offset" variable nil (reparse-symbol function_parameters) [10150 10161]))                  )
                nil [10022 12255])
            ("disassemble" function
               (:documentation "Disassemble a code object."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [12272 12274])
                    ("lasti" variable nil (reparse-symbol function_parameters) [12276 12281])
                    ("file" variable nil (reparse-symbol function_parameters) [12289 12293]))                  )
                nil [12256 12572])
            ("_disassemble_bytes" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [12596 12600])
                ("lasti" variable nil (reparse-symbol function_parameters) [12602 12607])
                ("varnames" variable nil (reparse-symbol function_parameters) [12612 12620])
                ("names" variable nil (reparse-symbol function_parameters) [12627 12632])
                ("constants" variable nil (reparse-symbol function_parameters) [12662 12671])
                ("cells" variable nil (reparse-symbol function_parameters) [12678 12683])
                ("linestarts" variable nil (reparse-symbol function_parameters) [12690 12700])
                ("file" variable nil (reparse-symbol function_parameters) [12733 12737])
                ("line_offset" variable nil (reparse-symbol function_parameters) [12744 12755]))              ) nil [12573 13523])
            ("_disassemble_str" function
               (:documentation "Compile the source string, then disassemble the code object."
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [13545 13551])
                    ("file" variable nil (reparse-symbol function_parameters) [13556 13560]))                  )
                nil [13524 13697])
            ("disco" variable nil nil [13698 13717])
            ("_unpack_opargs" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [13792 13796]))              ) nil [13773 14084])
            ("findlabels" function
               (:documentation "Detect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [14100 14104]))                  )
                nil [14085 14572])
            ("findlinestarts" function
               (:documentation "Find the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [14592 14596]))                  )
                nil [14573 15360])
            ("Bytecode" type
               (:documentation "The bytecode operations of a piece of code

    Instantiate this with a function, method, string of code, or a code object
    (as returned by compile()).

    Iterating over this yields the bytecode operations as Instruction instances.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15705 15744])
                            ("if" code nil (reparse-symbol indented_block_body) [15753 15976])
                            ("self" code nil (reparse-symbol indented_block_body) [15984 16034])
                            ("self" variable nil (reparse-symbol indented_block_body) [16043 16086])
                            ("self" variable nil (reparse-symbol indented_block_body) [16095 16120])
                            ("self" variable nil (reparse-symbol indented_block_body) [16129 16165]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15646 15650])
                            ("x" variable nil (reparse-symbol function_parameters) [15652 15653])
                            ("first_line" variable nil (reparse-symbol function_parameters) [15658 15668])
                            ("current_offset" variable nil (reparse-symbol function_parameters) [15675 15689]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15633 16166])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16184 16188]))                          )
                        (reparse-symbol indented_block_body) [16171 16495])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16513 16517]))                          )
                        (reparse-symbol indented_block_body) [16500 16634])
                    ("from_traceback" function
                       (:documentation " Construct a Bytecode from the given traceback "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16675 16678])
                            ("tb" variable nil (reparse-symbol function_parameters) [16680 16682]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16639 16868])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16882 16886]))                          
                        :documentation "Return formatted information about the code object.")
                        (reparse-symbol indented_block_body) [16873 17002])
                    ("dis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17015 17019]))                          
                        :documentation "Return a formatted view of the bytecode operations.")
                        (reparse-symbol indented_block_body) [17007 17720]))                  
                :type "class")
                nil [15361 17720])
            ("_test" function (:documentation "Simple test program to disassemble a file.") nil [17722 18093])
            ("if" code nil nil [18094 18133]))          
      :file "dis.py"
      :pointmax 18133
      :fsize 18132
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((MULT 15655 . 15656) (COMMA 15656 . 15657) (NAME 13965 . 13977) (IF 13991 . 13993) (ELSE 14013 . 14017) (MULT 13553 . 13554) (COMMA 13554 . 13555) (NAME 12950 . 12962) (IF 12967 . 12969) (ELSE 12982 . 12986) (MULT 12730 . 12731) (COMMA 12731 . 12732) (MULT 12286 . 12287) (COMMA 12287 . 12288) (MULT 8274 . 8275) (COMMA 8275 . 8276) (MULT 5258 . 5259) (COMMA 5259 . 5260) (MULT 2176 . 2177) (COMMA 2177 . 2178) (INDENT_BLOCK 1685 . 1737) (NEWLINE 1684 . 1685) (COLON 1683 . 1684) (TRY 1600 . 1603) (AS 1677 . 1679) (MULT 954 . 955) (COMMA 955 . 956)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Tokenization help for Python programs.

tokenize(readline) is a generator that breaks a stream of bytes into
Python tokens.  It decodes the bytes according to PEP-0263 for
determining source file encoding.

It accepts a readline-like method which is called repeatedly to get the
next line of input (or b\"\" for EOF).  It generates 5-tuples with these
members:

    the token type (see token.py)
    the token (a string)
    the starting (row, column) indices of the token (a 2-tuple of ints)
    the ending (row, column) indices of the token (a 2-tuple of ints)
    the original line (string)

It is designed to match the working of the Python tokenizer exactly, except
that it produces COMMENT tokens for comments and gives type OP for all
operators.  Additionally, all token lists start with an ENCODING token
which tells you which encoding was used to decode the bytes stream.
\"\"\"" code nil nil [1 886])
            ("__author__" variable nil nil [888 929])
            ("__credits__" variable nil nil [930 1096])
            ("builtins" include nil nil [1097 1139])
            ("codecs" include nil nil [1140 1175])
            ("collections" include nil nil [1176 1194])
            ("io" include nil nil [1195 1223])
            ("itertools" include nil nil [1224 1251])
            ("itertools" include nil nil [1252 1282])
            ("re" include nil nil [1283 1292])
            ("sys" include nil nil [1293 1303])
            ("token" include nil nil [1304 1323])
            ("cookie_re" variable nil nil [1325 1400])
            ("blank_re" variable nil nil [1401 1460])
            ("token" include nil nil [1462 1474])
            ("__all__" code nil nil [1475 1615])
            ("del" code nil nil [1616 1625])
            ("COMMENT" variable nil nil [1627 1645])
            ("tok_name" variable nil nil [1646 1675])
            ("NL" code nil nil [1676 1693])
            ("tok_name" variable nil nil [1694 1713])
            ("ENCODING" code nil nil [1714 1737])
            ("tok_name" variable nil nil [1738 1769])
            ("N_TOKENS" variable nil nil [1770 1783])
            ("EXACT_TOKEN_TYPES" variable nil nil [1784 2715])
            ("TokenInfo" type
               (:members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2818 2822]))                          )
                        (reparse-symbol indented_block_body) [2805 3024])
                    ("exact_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3058 3062]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3029 3223]))                  
                :type "class")
                nil [2717 3223])
            ("group" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [3234 3242]))              ) nil [3224 3282])
            ("any" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [3290 3298]))              ) nil [3282 3330])
            ("maybe" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [3340 3348]))              ) nil [3330 3380])
            ("Whitespace" variable nil nil [3472 3496])
            ("Comment" variable nil nil [3497 3519])
            ("Ignore" code nil nil [3520 3587])
            ("Name" variable nil nil [3588 3601])
            ("Hexnumber" variable nil nil [3603 3641])
            ("Binnumber" variable nil nil [3642 3673])
            ("Octnumber" variable nil nil [3674 3706])
            ("Decnumber" variable nil nil [3707 3753])
            ("Intnumber" variable nil nil [3754 3815])
            ("Exponent" variable nil nil [3816 3856])
            ("Pointfloat" code nil nil [3857 3982])
            ("Expfloat" code nil nil [3983 4025])
            ("Floatnumber" variable nil nil [4026 4067])
            ("Imagnumber" variable nil nil [4068 4135])
            ("Number" variable nil nil [4136 4186])
            ("_all_string_prefixes" function nil nil [4254 4924])
            ("_compile" function (:arguments 
              ( ("expr" variable nil (reparse-symbol function_parameters) [4938 4942]))              ) nil [4925 4985])
            ("StringPrefix" variable nil nil [5114 5159])
            ("Single" variable nil nil [5185 5220])
            ("Double" variable nil nil [5245 5280])
            ("Single3" variable nil nil [5307 5357])
            ("Double3" variable nil nil [5384 5434])
            ("Triple" variable nil nil [5435 5493])
            ("String" variable nil nil [5523 5648])
            ("Operator" variable nil nil [5825 5972])
            ("Bracket" variable nil nil [5974 5994])
            ("Special" variable nil nil [5995 6043])
            ("Funny" variable nil nil [6044 6085])
            ("PlainToken" variable nil nil [6087 6134])
            ("Token" code nil nil [6135 6162])
            ("ContStr" variable nil nil [6205 6412])
            ("PseudoExtras" variable nil nil [6413 6465])
            ("PseudoToken" code nil nil [6466 6542])
            ("endpats" variable nil nil [6741 6753])
            ("for" code nil nil [6754 6943])
            ("single_quoted" variable nil nil [7041 7062])
            ("triple_quoted" variable nil nil [7063 7084])
            ("for" code nil nil [7085 7246])
            ("tabsize" variable nil nil [7247 7258])
            ("TokenError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [7260 7294])
            ("StopTokenizing" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [7295 7333])
            ("Untokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7387 7403])
                            ("self" variable nil (reparse-symbol indented_block_body) [7412 7429])
                            ("self" variable nil (reparse-symbol indented_block_body) [7438 7455])
                            ("self" variable nil (reparse-symbol indented_block_body) [7464 7484]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7372 7376]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7359 7485])
                    ("add_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7509 7513])
                            ("start" variable nil (reparse-symbol function_parameters) [7515 7520]))                          )
                        (reparse-symbol indented_block_body) [7490 8040])
                    ("untokenize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8060 8064])
                            ("iterable" variable nil (reparse-symbol function_parameters) [8066 8074]))                          )
                        (reparse-symbol indented_block_body) [8045 9307])
                    ("compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9323 9327])
                            ("token" variable nil (reparse-symbol function_parameters) [9329 9334])
                            ("iterable" variable nil (reparse-symbol function_parameters) [9336 9344]))                          )
                        (reparse-symbol indented_block_body) [9312 10415]))                  
                :type "class")
                nil [7335 10415])
            ("untokenize" function
               (:documentation "Transform tokens back into Python source code.
    It returns a bytes object, encoded using the ENCODING
    token, which is the first token sequence output by tokenize.

    Each element returned by the iterable must be a token sequence
    with at least two elements, a token number and token value.  If
    only two tokens are passed, the resulting output is poor.

    Round-trip invariant for full input:
        Untokenized source will match input source exactly

    Round-trip invariant for limited input:
        # Output bytes will tokenize back to the input
        t1 = [tok[:2] for tok in tokenize(f.readline)]
        newcode = untokenize(t1)
        readline = BytesIO(newcode).readline
        t2 = [tok[:2] for tok in tokenize(readline)]
        assert t1 == t2
    "
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [10432 10440]))                  )
                nil [10417 11379])
            ("_get_normal_name" function
               (:documentation "Imitates get_normal_name in tokenizer.c."
                :arguments 
                  ( ("orig_enc" variable nil (reparse-symbol function_parameters) [11402 11410]))                  )
                nil [11381 11811])
            ("detect_encoding" function
               (:documentation "
    The detect_encoding() function is used to detect the encoding that should
    be used to decode a Python source file.  It requires one argument, readline,
    in the same way as the tokenize() generator.

    It will call readline a maximum of twice, and return the encoding used
    (as a string) and a list of any lines (left as bytes) it has read in.

    It detects the encoding from the presence of a utf-8 bom or an encoding
    cookie as specified in pep-0263.  If both a bom and a cookie are present,
    but disagree, a SyntaxError will be raised.  If the encoding cookie is an
    invalid charset, raise a SyntaxError.  Note that if a utf-8 bom is found,
    'utf-8-sig' is returned.

    If no encoding is specified, then the default of 'utf-8' will be returned.
    "
                :arguments 
                  ( ("readline" variable nil (reparse-symbol function_parameters) [11832 11840]))                  )
                nil [11812 14902])
            ("open" function
               (:documentation "Open a file in read only mode using the encoding detected by
    detect_encoding().
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [14913 14921]))                  )
                nil [14904 15318])
            ("tokenize" function
               (:documentation "
    The tokenize() generator requires one argument, readline, which
    must be a callable object which provides the same interface as the
    readline() method of built-in file objects.  Each call to the function
    should return one line of input as bytes.  Alternatively, readline
    can be a callable function terminating with StopIteration:
        readline = open(myfile, 'rb').__next__  # Example of alternate readline

    The generator produces 5-tuples with these members: the token type; the
    token string; a 2-tuple (srow, scol) of ints specifying the row and
    column where the token begins in the source; a 2-tuple (erow, ecol) of
    ints specifying the row and column where the token ends in the source;
    and the line on which the token was found.  The line passed is the
    logical line; continuation lines are included.

    The first token sequence will always be an ENCODING token
    which tells you which encoding was used to decode the bytes stream.
    "
                :arguments 
                  ( ("readline" variable nil (reparse-symbol function_parameters) [15333 15341]))                  )
                nil [15320 16683])
            ("_tokenize" function (:arguments 
              ( ("readline" variable nil (reparse-symbol function_parameters) [16699 16707])
                ("encoding" variable nil (reparse-symbol function_parameters) [16709 16717]))              ) nil [16685 28960]))          
      :file "tokenize.py"
      :pointmax 28960
      :fsize 28959
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((IF 21198 . 21200) (STRING_LITERAL 25983 . 26530) (NAME 27387 . 27393) (NAME 27397 . 27405) (STRING_LITERAL 27405 . 27438) (NAME 27438 . 27446) (STRING_LITERAL 27446 . 27456) (punctuation 27456 . 27457) (NAME 2733 . 2744) (PAREN_BLOCK 2755 . 2798)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Token constants (from \"token.h\").\"\"\"" code nil nil [1 40])
            ("__all__" variable nil nil [42 104])
            ("ENDMARKER" variable nil nil [359 372])
            ("NAME" variable nil nil [373 381])
            ("NUMBER" variable nil nil [382 392])
            ("STRING" variable nil nil [393 403])
            ("NEWLINE" variable nil nil [404 415])
            ("INDENT" variable nil nil [416 426])
            ("DEDENT" variable nil nil [427 437])
            ("LPAR" variable nil nil [438 446])
            ("RPAR" variable nil nil [447 455])
            ("LSQB" variable nil nil [456 464])
            ("RSQB" variable nil nil [465 474])
            ("COLON" variable nil nil [475 485])
            ("COMMA" variable nil nil [486 496])
            ("SEMI" variable nil nil [497 506])
            ("PLUS" variable nil nil [507 516])
            ("MINUS" variable nil nil [517 527])
            ("STAR" variable nil nil [528 537])
            ("SLASH" variable nil nil [538 548])
            ("VBAR" variable nil nil [549 558])
            ("AMPER" variable nil nil [559 569])
            ("LESS" variable nil nil [570 579])
            ("GREATER" variable nil nil [580 592])
            ("EQUAL" variable nil nil [593 603])
            ("DOT" variable nil nil [604 612])
            ("PERCENT" variable nil nil [613 625])
            ("LBRACE" variable nil nil [626 637])
            ("RBRACE" variable nil nil [638 649])
            ("EQEQUAL" variable nil nil [650 662])
            ("NOTEQUAL" variable nil nil [663 676])
            ("LESSEQUAL" variable nil nil [677 691])
            ("GREATEREQUAL" variable nil nil [692 709])
            ("TILDE" variable nil nil [710 720])
            ("CIRCUMFLEX" variable nil nil [721 736])
            ("LEFTSHIFT" variable nil nil [737 751])
            ("RIGHTSHIFT" variable nil nil [752 767])
            ("DOUBLESTAR" variable nil nil [768 783])
            ("PLUSEQUAL" variable nil nil [784 798])
            ("MINEQUAL" variable nil nil [799 812])
            ("STAREQUAL" variable nil nil [813 827])
            ("SLASHEQUAL" variable nil nil [828 843])
            ("PERCENTEQUAL" variable nil nil [844 861])
            ("AMPEREQUAL" variable nil nil [862 877])
            ("VBAREQUAL" variable nil nil [878 892])
            ("CIRCUMFLEXEQUAL" variable nil nil [893 913])
            ("LEFTSHIFTEQUAL" variable nil nil [914 933])
            ("RIGHTSHIFTEQUAL" variable nil nil [934 954])
            ("DOUBLESTAREQUAL" variable nil nil [955 975])
            ("DOUBLESLASH" variable nil nil [976 992])
            ("DOUBLESLASHEQUAL" variable nil nil [993 1014])
            ("AT" variable nil nil [1015 1022])
            ("ATEQUAL" variable nil nil [1023 1035])
            ("RARROW" variable nil nil [1036 1047])
            ("ELLIPSIS" variable nil nil [1048 1061])
            ("OP" variable nil nil [1062 1069])
            ("AWAIT" variable nil nil [1070 1080])
            ("ASYNC" variable nil nil [1081 1091])
            ("ERRORTOKEN" variable nil nil [1092 1107])
            ("N_TOKENS" variable nil nil [1108 1121])
            ("NT_OFFSET" variable nil nil [1122 1137])
            ("tok_name" variable nil nil [1158 1298])
            ("__all__" code nil nil [1299 1332])
            ("ISTERMINAL" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1349 1350]))              ) nil [1334 1378])
            ("ISNONTERMINAL" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1397 1398]))              ) nil [1379 1427])
            ("ISEOF" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1438 1439]))              ) nil [1428 1468])
            ("_main" function nil nil [1470 3035])
            ("if" code nil nil [3037 3076]))          
      :file "token.py"
      :pointmax 3076
      :fsize 3075
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 2911 . 2986) (NEWLINE 2910 . 2911) (COLON 2909 . 2910) (TRY 2843 . 2846) (AS 2903 . 2905) (INDENT_BLOCK 2368 . 2443) (NEWLINE 2367 . 2368) (COLON 2366 . 2367) (TRY 2305 . 2308) (AS 2360 . 2362) (INDENT_BLOCK 1742 . 1817) (NEWLINE 1741 . 1742) (COLON 1740 . 1741) (TRY 1680 . 1683) (AS 1734 . 1736)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("sys" include nil nil [68 86])
            ("_thread" include nil nil [87 101])
            ("time" include nil nil [103 138])
            ("traceback" include nil nil [139 186])
            ("_weakrefset" include nil nil [187 218])
            ("itertools" include nil nil [219 275])
            ("try" code nil nil [276 390])
            ("__all__" variable nil nil [904 1236])
            ("_start_new_thread" variable nil nil [1295 1339])
            ("_allocate_lock" variable nil nil [1340 1378])
            ("_set_sentinel" variable nil nil [1379 1416])
            ("get_ident" variable nil nil [1417 1446])
            ("ThreadError" variable nil nil [1447 1474])
            ("try" code nil nil [1475 1550])
            ("TIMEOUT_MAX" variable nil nil [1550 1583])
            ("del" code nil nil [1584 1595])
            ("_profile_hook" variable nil nil [1637 1657])
            ("_trace_hook" variable nil nil [1658 1676])
            ("setprofile" function
               (:documentation "Set a profile function for all threads started from the threading module.

    The func will be passed to sys.setprofile() for each thread, before its
    run() method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [1693 1697]))                  )
                nil [1678 1945])
            ("settrace" function
               (:documentation "Set a trace function for all threads started from the threading module.

    The func will be passed to sys.settrace() for each thread, before its run()
    method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [1959 1963]))                  )
                nil [1946 2203])
            ("Lock" variable nil nil [2231 2252])
            ("RLock" function
               (:documentation "Factory function that returns a new reentrant lock.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it again
    without blocking; the thread must release it once for each time it has
    acquired it.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [2264 2269])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [2271 2279]))                  )
                nil [2254 2700])
            ("_RLock" type
               (:documentation "This class implements reentrant lock objects.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it
    again without blocking; the thread must release it once for each time it
    has acquired it.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3059 3089])
                            ("self" variable nil (reparse-symbol indented_block_body) [3098 3116])
                            ("self" variable nil (reparse-symbol indented_block_body) [3125 3140]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3044 3048]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3031 3141])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3159 3163]))                          )
                        (reparse-symbol indented_block_body) [3146 3574])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3591 3595])
                            ("blocking" variable nil (reparse-symbol function_parameters) [3597 3605])
                            ("timeout" variable nil (reparse-symbol function_parameters) [3612 3619]))                          
                        :documentation "Acquire a lock, blocking or non-blocking.

        When invoked without arguments: if this thread already owns the lock,
        increment the recursion level by one, and return immediately. Otherwise,
        if another thread owns the lock, block until the lock is unlocked. Once
        the lock is unlocked (not owned by any thread), then grab ownership, set
        the recursion level to one, and return. If more than one thread is
        blocked waiting until the lock is unlocked, only one at a time will be
        able to grab ownership of the lock. There is no return value in this
        case.

        When invoked with the blocking argument set to true, do the same thing
        as when called without arguments, and return true.

        When invoked with the blocking argument set to false, do not block. If a
        call without an argument would block, return false immediately;
        otherwise, do the same thing as when called without arguments, and
        return true.

        When invoked with the floating-point timeout argument set to a positive
        value, block for at most the number of seconds specified by timeout
        and as long as the lock cannot be acquired.  Return true if the lock has
        been acquired, false if the timeout has elapsed.

        ")
                        (reparse-symbol indented_block_body) [3579 5188])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [5193 5212])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5230 5234]))                          
                        :documentation "Release a lock, decrementing the recursion level.

        If after the decrement it is zero, reset the lock to unlocked (not owned
        by any thread), and if any other threads are blocked waiting for the
        lock to become unlocked, allow exactly one of them to proceed. If after
        the decrement the recursion level is still nonzero, the lock remains
        locked and owned by the calling thread.

        Only call this method when the calling thread owns the lock. A
        RuntimeError is raised if this method is called when the lock is
        unlocked.

        There is no return value.

        ")
                        (reparse-symbol indented_block_body) [5218 6111])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6129 6133])
                            ("t" variable nil (reparse-symbol function_parameters) [6135 6136])
                            ("v" variable nil (reparse-symbol function_parameters) [6138 6139])
                            ("tb" variable nil (reparse-symbol function_parameters) [6141 6143]))                          )
                        (reparse-symbol indented_block_body) [6116 6169])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6247 6251])
                            ("state" variable nil (reparse-symbol function_parameters) [6253 6258]))                          )
                        (reparse-symbol indented_block_body) [6226 6332])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6355 6359]))                          )
                        (reparse-symbol indented_block_body) [6337 6624])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6643 6647]))                          )
                        (reparse-symbol indented_block_body) [6629 6692]))                  
                :type "class")
                nil [2701 6692])
            ("_PyRLock" variable nil nil [6693 6710])
            ("Condition" type
               (:documentation "Class that implements a condition variable.

    A condition variable allows one or more threads to wait until they are
    notified by another thread.

    If the lock argument is given and not None, it must be a Lock or RLock
    object, and it is used as the underlying lock. Otherwise, a new RLock object
    is created and used as the underlying lock.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7147 7191])
                            ("self" variable nil (reparse-symbol indented_block_body) [7199 7216])
                            ("self" variable nil (reparse-symbol indented_block_body) [7285 7312])
                            ("self" variable nil (reparse-symbol indented_block_body) [7321 7348])
                            ("try" code nil (reparse-symbol indented_block_body) [7572 7677])
                            ("try" code nil (reparse-symbol indented_block_body) [7685 7796])
                            ("try" code nil (reparse-symbol indented_block_body) [7804 7901])
                            ("self" variable nil (reparse-symbol indented_block_body) [7909 7933]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7121 7125])
                            ("lock" variable nil (reparse-symbol function_parameters) [7127 7131]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7108 7934])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7953 7957]))                          )
                        (reparse-symbol indented_block_body) [7939 7998])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8016 8020])
                            ("args" variable nil (reparse-symbol function_parameters) [8022 8027]))                          )
                        (reparse-symbol indented_block_body) [8003 8072])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8090 8094]))                          )
                        (reparse-symbol indented_block_body) [8077 8169])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8192 8196]))                          )
                        (reparse-symbol indented_block_body) [8174 8257])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8283 8287])
                            ("x" variable nil (reparse-symbol function_parameters) [8289 8290]))                          )
                        (reparse-symbol indented_block_body) [8262 8353])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8372 8376]))                          )
                        (reparse-symbol indented_block_body) [8358 8639])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8653 8657])
                            ("timeout" variable nil (reparse-symbol function_parameters) [8659 8666]))                          
                        :documentation "Wait until notified or until a timeout occurs.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method releases the underlying lock, and then blocks until it is
        awakened by a notify() or notify_all() call for the same condition
        variable in another thread, or until the optional timeout occurs. Once
        awakened or timed out, it re-acquires the lock and returns.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        When the underlying lock is an RLock, it is not released using its
        release() method, since this may not actually unlock the lock when it
        was acquired multiple times recursively. Instead, an internal interface
        of the RLock class is used, which really unlocks it even when it has
        been recursively acquired several times. Another internal interface is
        then used to restore the recursion level when the lock is reacquired.

        ")
                        (reparse-symbol indented_block_body) [8644 10672])
                    ("wait_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10690 10694])
                            ("predicate" variable nil (reparse-symbol function_parameters) [10696 10705])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10707 10714]))                          
                        :documentation "Wait until a condition evaluates to True.

        predicate should be a callable which result will be interpreted as a
        boolean value.  A timeout may be provided giving the maximum time to
        wait.

        ")
                        (reparse-symbol indented_block_body) [10677 11410])
                    ("notify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11426 11430])
                            ("n" variable nil (reparse-symbol function_parameters) [11432 11433]))                          
                        :documentation "Wake up one or more threads waiting on this condition, if any.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method wakes up at most n of the threads waiting for the condition
        variable; it is a no-op if no threads are waiting.

        ")
                        (reparse-symbol indented_block_body) [11415 12216])
                    ("notify_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12236 12240]))                          
                        :documentation "Wake up all threads waiting on this condition.

        If the calling thread has not acquired the lock when this method
        is called, a RuntimeError is raised.

        ")
                        (reparse-symbol indented_block_body) [12221 12473])
                    ("notifyAll" variable nil (reparse-symbol indented_block_body) [12478 12500]))                  
                :type "class")
                nil [6713 12501])
            ("Semaphore" type
               (:documentation "This class implements semaphore objects.

    Semaphores manage a counter representing the number of release() calls minus
    the number of acquire() calls, plus an initial value. The acquire() method
    blocks if necessary until it can return without making the counter
    negative. If not given, value defaults to 1.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [12978 13061])
                            ("self" variable nil (reparse-symbol indented_block_body) [13069 13099])
                            ("self" variable nil (reparse-symbol indented_block_body) [13108 13127]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12954 12958])
                            ("value" variable nil (reparse-symbol function_parameters) [12960 12965]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12941 13128])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13145 13149])
                            ("blocking" variable nil (reparse-symbol function_parameters) [13151 13159])
                            ("timeout" variable nil (reparse-symbol function_parameters) [13166 13173]))                          
                        :documentation "Acquire a semaphore, decrementing the internal counter by one.

        When invoked without arguments: if the internal counter is larger than
        zero on entry, decrement it by one and return immediately. If it is zero
        on entry, block, waiting until some other thread has called release() to
        make it larger than zero. This is done with proper interlocking so that
        if multiple acquire() calls are blocked, release() will wake exactly one
        of them up. The implementation may pick one at random, so the order in
        which blocked threads are awakened should not be relied on. There is no
        return value in this case.

        When invoked with blocking set to true, do the same thing as when called
        without arguments, and return true.

        When invoked with blocking set to false, do not block. If a call without
        an argument would block, return false immediately; otherwise, do the
        same thing as when called without arguments, and return true.

        When invoked with a timeout other than None, it will block for at
        most timeout seconds.  If acquire does not complete successfully in
        that interval, return false.  Return true otherwise.

        ")
                        (reparse-symbol indented_block_body) [13133 15143])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [15148 15167])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15185 15189]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        ")
                        (reparse-symbol indented_block_body) [15173 15508])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15526 15530])
                            ("t" variable nil (reparse-symbol function_parameters) [15532 15533])
                            ("v" variable nil (reparse-symbol function_parameters) [15535 15536])
                            ("tb" variable nil (reparse-symbol function_parameters) [15538 15540]))                          )
                        (reparse-symbol indented_block_body) [15513 15566]))                  
                :type "class")
                nil [12503 15566])
            ("BoundedSemaphore" type
               (:documentation "Implements a bounded semaphore.

    A bounded semaphore checks to make sure its current value doesn't exceed its
    initial value. If it does, ValueError is raised. In most situations
    semaphores are used to guard resources with limited capacity.

    If the semaphore is released too many times it's a sign of a bug. If not
    given, value defaults to 1.

    Like regular semaphores, bounded semaphores manage a counter representing
    the number of release() calls minus the number of acquire() calls, plus an
    initial value. The acquire() method blocks if necessary until it can return
    without making the counter negative. If not given, value defaults to 1.

    "
                :superclasses ("Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Semaphore" code nil (reparse-symbol indented_block_body) [16337 16368])
                            ("self" variable nil (reparse-symbol indented_block_body) [16377 16404]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16313 16317])
                            ("value" variable nil (reparse-symbol function_parameters) [16319 16324]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16300 16405])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16422 16426]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        If the number of releases exceeds the number of acquires,
        raise a ValueError.

        ")
                        (reparse-symbol indented_block_body) [16410 16961]))                  
                :type "class")
                nil [15568 16961])
            ("Event" type
               (:documentation "Class implementing event objects.

    Events manage a flag that can be set to true with the set() method and reset
    to false with the clear() method. The wait() method blocks until the flag is
    true.  The flag is initially false.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [17321 17351])
                            ("self" variable nil (reparse-symbol indented_block_body) [17360 17378]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17306 17310]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17293 17379])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17410 17414]))                          )
                        (reparse-symbol indented_block_body) [17384 17529])
                    ("is_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17545 17549]))                          
                        :documentation "Return true if and only if the internal flag is true.")
                        (reparse-symbol indented_block_body) [17534 17646])
                    ("isSet" variable nil (reparse-symbol indented_block_body) [17651 17665])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17679 17683]))                          
                        :documentation "Set the internal flag to true.

        All threads waiting for it to become true are awakened. Threads
        that call wait() once the flag is true will not block at all.

        ")
                        (reparse-symbol indented_block_body) [17671 17975])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17990 17994]))                          
                        :documentation "Reset the internal flag to false.

        Subsequently, threads calling wait() will block until set() is called to
        set the internal flag to true again.

        ")
                        (reparse-symbol indented_block_body) [17980 18238])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18252 18256])
                            ("timeout" variable nil (reparse-symbol function_parameters) [18258 18265]))                          
                        :documentation "Block until the internal flag is true.

        If the internal flag is true on entry, return immediately. Otherwise,
        block until another thread calls set() to set the flag to true, or until
        the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        This method returns the internal flag on exit, so it will always return
        True except if a timeout is given and the operation times out.

        ")
                        (reparse-symbol indented_block_body) [18243 19040]))                  
                :type "class")
                nil [16963 19040])
            ("Barrier" type
               (:documentation "Implements a Barrier.

    Useful for synchronizing a fixed number of threads at known synchronization
    points.  Threads block on 'wait()' and are simultaneously once they have all
    made that call.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a barrier, initialised to 'parties' threads.

        'action' is a callable which, when supplied, will be called by one of
        the threads after they have all entered the barrier and just prior to
        releasing them all. If a 'timeout' is provided, it is uses as the
        default for all subsequent 'wait()' calls.

        \"\"\"" code nil (reparse-symbol indented_block_body) [20016 20365])
                            ("self" variable nil (reparse-symbol indented_block_body) [20374 20404])
                            ("self" variable nil (reparse-symbol indented_block_body) [20413 20434])
                            ("self" variable nil (reparse-symbol indented_block_body) [20443 20466])
                            ("self" variable nil (reparse-symbol indented_block_body) [20475 20498])
                            ("self" variable nil (reparse-symbol indented_block_body) [20507 20522])
                            ("self" variable nil (reparse-symbol indented_block_body) [20580 20595]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19965 19969])
                            ("parties" variable nil (reparse-symbol function_parameters) [19971 19978])
                            ("action" variable nil (reparse-symbol function_parameters) [19980 19986])
                            ("timeout" variable nil (reparse-symbol function_parameters) [19993 20000]))                          
                        :documentation "Create a barrier, initialised to 'parties' threads.

        'action' is a callable which, when supplied, will be called by one of
        the threads after they have all entered the barrier and just prior to
        releasing them all. If a 'timeout' is provided, it is uses as the
        default for all subsequent 'wait()' calls.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19952 20596])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20610 20614])
                            ("timeout" variable nil (reparse-symbol function_parameters) [20616 20623]))                          
                        :documentation "Wait for the barrier.

        When the specified number of threads have started waiting, they are all
        simultaneously awoken. If an 'action' was provided for the barrier, one
        of the threads will have executed that callback prior to returning.
        Returns an individual index number from 0 to 'parties-1'.

        ")
                        (reparse-symbol indented_block_body) [20601 21633])
                    ("_enter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21741 21745]))                          )
                        (reparse-symbol indented_block_body) [21730 22021])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22127 22131]))                          )
                        (reparse-symbol indented_block_body) [22114 22439])
                    ("_wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22564 22568])
                            ("timeout" variable nil (reparse-symbol function_parameters) [22570 22577]))                          )
                        (reparse-symbol indented_block_body) [22554 22855])
                    ("_exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22982 22986]))                          )
                        (reparse-symbol indented_block_body) [22972 23168])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23183 23187]))                          
                        :documentation "Reset the barrier to the initial state.

        Any threads currently waiting will get the BrokenBarrier exception
        raised.

        ")
                        (reparse-symbol indented_block_body) [23173 23814])
                    ("abort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23829 23833]))                          
                        :documentation "Place the barrier into a 'broken' state.

        Useful in case of error.  Any currently waiting threads and threads
        attempting to 'wait()' will have BrokenBarrierError raised.

        ")
                        (reparse-symbol indented_block_body) [23819 24097])
                    ("_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24113 24117]))                          )
                        (reparse-symbol indented_block_body) [24102 24289])
                    ("parties" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24320 24324]))                          
                        :documentation "Return the number of threads required to trip the barrier.")
                        (reparse-symbol indented_block_body) [24294 24429])
                    ("n_waiting" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24462 24466]))                          
                        :documentation "Return the number of threads currently waiting at the barrier.")
                        (reparse-symbol indented_block_body) [24434 24771])
                    ("broken" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24801 24805]))                          
                        :documentation "Return True if the barrier is in a broken state.")
                        (reparse-symbol indented_block_body) [24776 24904]))                  
                :type "class")
                nil [19712 24904])
            ("BrokenBarrierError" type
               (:superclasses ("RuntimeError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [24989 24993]))                  
                :type "class")
                nil [24945 24994])
            ("_counter" variable nil nil [25034 25062])
            ("_counter" code nil nil [25063 25073])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [25134 25142]))              ) nil [25121 25190])
            ("_active_limbo_lock" variable nil nil [25222 25259])
            ("_active" variable nil nil [25260 25272])
            ("_limbo" variable nil nil [25310 25321])
            ("_dangling" variable nil nil [25322 25343])
            ("Thread" type
               (:documentation "A class that represents a thread of control.

    This class can be safely subclassed in a limited fashion. There are two ways
    to specify the activity: by passing a callable object to the constructor, or
    by overriding the run() method in a subclass.

    "
                :members 
                  ( ("_initialized" variable nil (reparse-symbol indented_block_body) [25664 25684])
                    ("_exc_info" variable nil (reparse-symbol indented_block_body) [25935 25960])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

        \"\"\"" code nil (reparse-symbol indented_block_body) [26221 27070])
                            ("assert" code nil (reparse-symbol indented_block_body) [27079 27138])
                            ("if" code nil (reparse-symbol indented_block_body) [27147 27190])
                            ("self" variable nil (reparse-symbol indented_block_body) [27198 27219])
                            ("self" variable nil (reparse-symbol indented_block_body) [27228 27264])
                            ("self" variable nil (reparse-symbol indented_block_body) [27273 27290])
                            ("self" variable nil (reparse-symbol indented_block_body) [27299 27320])
                            ("if" code nil (reparse-symbol indented_block_body) [27329 27455])
                            ("self" variable nil (reparse-symbol indented_block_body) [27463 27481])
                            ("self" variable nil (reparse-symbol indented_block_body) [27490 27514])
                            ("self" variable nil (reparse-symbol indented_block_body) [27523 27546])
                            ("self" variable nil (reparse-symbol indented_block_body) [27555 27579])
                            ("self" variable nil (reparse-symbol indented_block_body) [27588 27612])
                            ("self" variable nil (reparse-symbol indented_block_body) [27739 27765])
                            ("_dangling" code nil (reparse-symbol indented_block_body) [27816 27835]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26115 26119])
                            ("group" variable nil (reparse-symbol function_parameters) [26121 26126])
                            ("target" variable nil (reparse-symbol function_parameters) [26133 26139])
                            ("name" variable nil (reparse-symbol function_parameters) [26146 26150])
                            ("args" variable nil (reparse-symbol function_parameters) [26174 26178])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26183 26189])
                            ("daemon" variable nil (reparse-symbol function_parameters) [26199 26205]))                          
                        :documentation "This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26102 27836])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27867 27871])
                            ("is_alive" variable nil (reparse-symbol function_parameters) [27873 27881]))                          )
                        (reparse-symbol indented_block_body) [27841 28320])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28338 28342]))                          )
                        (reparse-symbol indented_block_body) [28325 28858])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28873 28877]))                          
                        :documentation "Start the thread's activity.

        It must be called at most once per thread object. It arranges for the
        object's run() method to be invoked in a separate thread of control.

        This method will raise a RuntimeError if called more than once on the
        same thread object.

        ")
                        (reparse-symbol indented_block_body) [28863 29668])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29681 29685]))                          
                        :documentation "Method representing the thread's activity.

        You may override this method in a subclass. The standard run() method
        invokes the callable object passed to the object's constructor as the
        target argument, if any, with sequential and keyword arguments taken
        from the args and kwargs arguments, respectively.

        ")
                        (reparse-symbol indented_block_body) [29673 30362])
                    ("_bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30382 30386]))                          )
                        (reparse-symbol indented_block_body) [30367 31361])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31381 31385]))                          )
                        (reparse-symbol indented_block_body) [31366 31422])
                    ("_set_tstate_lock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31448 31452]))                          
                        :documentation "
        Set a lock object which will be released by the interpreter when
        the underlying thread state (see pystate.h) gets deleted.
        ")
                        (reparse-symbol indented_block_body) [31427 31698])
                    ("_bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31724 31728]))                          )
                        (reparse-symbol indented_block_body) [31703 34599])
                    ("_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34614 34618]))                          )
                        (reparse-symbol indented_block_body) [34604 35798])
                    ("_delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35815 35819]))                          )
                        (reparse-symbol indented_block_body) [35803 37620])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37634 37638])
                            ("timeout" variable nil (reparse-symbol function_parameters) [37640 37647]))                          
                        :documentation "Wait until the thread terminates.

        This blocks the calling thread until the thread whose join() method is
        called terminates -- either normally or through an unhandled exception
        or until the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof). As join() always returns None, you must call
        isAlive() after join() to decide whether a timeout happened -- if the
        thread is still alive, the join() call timed out.

        When the timeout argument is not present or None, the operation will
        block until the thread terminates.

        A thread can be join()ed many times.

        join() raises a RuntimeError if an attempt is made to join the current
        thread as that would cause a deadlock. It is also an error to join() a
        thread before it has been started and attempts to do so raises the same
        exception.

        ")
                        (reparse-symbol indented_block_body) [37625 39316])
                    ("_wait_for_tstate_lock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39347 39351])
                            ("block" variable nil (reparse-symbol function_parameters) [39353 39358])
                            ("timeout" variable nil (reparse-symbol function_parameters) [39365 39372]))                          )
                        (reparse-symbol indented_block_body) [39321 40054])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40082 40086]))                          
                        :documentation "A string used for identification purposes only.

        It has no semantics. Multiple threads may be given the same name. The
        initial name is set by the constructor.

        ")
                        (reparse-symbol indented_block_body) [40059 40379])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40410 40414])
                            ("name" variable nil (reparse-symbol function_parameters) [40416 40420]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [40384 40519])
                    ("ident" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40548 40552]))                          
                        :documentation "Thread identifier of this thread or None if it has not been started.

        This is a nonzero integer. See the thread.get_ident() function. Thread
        identifiers may be recycled when a thread exits and another thread is
        created. The identifier is available even after the thread has exited.

        ")
                        (reparse-symbol indented_block_body) [40524 40977])
                    ("is_alive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40995 40999]))                          
                        :documentation "Return whether the thread is alive.

        This method returns True just before the run() method starts until just
        after the run() method terminates. The module function enumerate()
        returns a list of all alive threads.

        ")
                        (reparse-symbol indented_block_body) [40982 41490])
                    ("isAlive" variable nil (reparse-symbol indented_block_body) [41495 41513])
                    ("daemon" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41544 41548]))                          
                        :documentation "A boolean value indicating whether this thread is a daemon thread.

        This must be set before start() is called, otherwise RuntimeError is
        raised. Its initial value is inherited from the creating thread; the
        main thread is not a daemon thread and therefore all threads created in
        the main thread default to daemon = False.

        The entire Python program exits when no alive non-daemon threads are
        left.

        ")
                        (reparse-symbol indented_block_body) [41519 42115])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42150 42154])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [42156 42164]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [42120 42409])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42427 42431]))                          )
                        (reparse-symbol indented_block_body) [42414 42461])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42480 42484])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [42486 42494]))                          )
                        (reparse-symbol indented_block_body) [42466 42528])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42545 42549]))                          )
                        (reparse-symbol indented_block_body) [42533 42577])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42594 42598])
                            ("name" variable nil (reparse-symbol function_parameters) [42600 42604]))                          )
                        (reparse-symbol indented_block_body) [42582 42632]))                  
                :type "class")
                nil [25371 42632])
            ("Timer" type
               (:documentation "Call a function after a specified number of seconds:

            t = Timer(30.0, f, args=None, kwargs=None)
            t.start()
            t.cancel()     # stop the timer's action if it's still waiting

    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [43014 43035])
                            ("self" variable nil (reparse-symbol indented_block_body) [43044 43068])
                            ("self" variable nil (reparse-symbol indented_block_body) [43077 43101])
                            ("" code nil (reparse-symbol indented_block_body) [43152 43154])
                            ("" code nil (reparse-symbol indented_block_body) [43211 43213])
                            ("self" variable nil (reparse-symbol indented_block_body) [43222 43245]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42955 42959])
                            ("interval" variable nil (reparse-symbol function_parameters) [42961 42969])
                            ("function" variable nil (reparse-symbol function_parameters) [42971 42979])
                            ("args" variable nil (reparse-symbol function_parameters) [42981 42985])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42992 42998]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42942 43246])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43262 43266]))                          
                        :documentation "Stop the timer if it hasn't finished yet.")
                        (reparse-symbol indented_block_body) [43251 43353])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43366 43370]))                          )
                        (reparse-symbol indented_block_body) [43358 43535]))                  
                :type "class")
                nil [42694 43535])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [43701 43755])
                            ("self" code nil (reparse-symbol indented_block_body) [43764 43787])
                            ("self" code nil (reparse-symbol indented_block_body) [43796 43815])
                            ("self" code nil (reparse-symbol indented_block_body) [43824 43841])
                            ("with" code nil (reparse-symbol indented_block_body) [43850 43915]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43686 43690]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43673 43915]))                  
                :type "class")
                nil [43641 43915])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [44414 44475])
                            ("self" code nil (reparse-symbol indented_block_body) [44485 44504])
                            ("self" code nil (reparse-symbol indented_block_body) [44513 44530])
                            ("with" code nil (reparse-symbol indented_block_body) [44539 44604]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44399 44403]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44386 44604])
                    ("_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44619 44623]))                          )
                        (reparse-symbol indented_block_body) [44609 44639])
                    ("is_alive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44657 44661]))                          )
                        (reparse-symbol indented_block_body) [44644 44747])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44761 44765])
                            ("timeout" variable nil (reparse-symbol function_parameters) [44767 44774]))                          )
                        (reparse-symbol indented_block_body) [44752 44833]))                  
                :type "class")
                nil [44353 44833])
            ("current_thread" function (:documentation "Return the current Thread object, corresponding to the caller's thread of control.

    If the caller's thread of control was not created through the threading
    module, a dummy thread object with limited functionality is returned.

    ") nil [44859 45227])
            ("currentThread" variable nil nil [45228 45258])
            ("active_count" function (:documentation "Return the number of Thread objects currently alive.

    The returned count is equal to the length of the list returned by
    enumerate().

    ") nil [45260 45508])
            ("activeCount" variable nil nil [45509 45535])
            ("_enumerate" function nil nil [45537 45681])
            ("enumerate" function (:documentation "Return a list of all Thread objects currently alive.

    The list includes daemonic threads, dummy thread objects created by
    current_thread(), and the main thread. It excludes terminated threads and
    threads that have not yet been started.

    ") nil [45682 46054])
            ("_thread" include nil nil [46055 46085])
            ("_main_thread" variable nil nil [46201 46229])
            ("_shutdown" function nil nil [46231 46997])
            ("_pickSomeNonDaemonThread" function nil nil [46998 47135])
            ("main_thread" function (:documentation "Return the main thread object.

    In normal conditions, the main thread is the thread from which the
    Python interpreter was started.
    ") nil [47136 47333])
            ("try" code nil nil [47431 47535])
            ("_after_fork" function nil nil [47537 49115]))          
      :file "threading.py"
      :pointmax 49115
      :fsize 49114
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 43163 . 43167) (IF 43184 . 43186) (ELSE 43206 . 43210) (NAME 43110 . 43114) (IF 43127 . 43129) (ELSE 43147 . 43151) (INDENT_BLOCK 34294 . 34315) (NEWLINE 34039 . 34040) (COLON 34038 . 34039) (FINALLY 34031 . 34038) (MULT 26196 . 26197) (COMMA 26197 . 26198)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("fnmatch" include nil nil [193 207])
            ("collections" include nil nil [208 226])
            ("errno" include nil nil [227 239])
            ("try" code nil nil [241 350])
            ("try" code nil nil [351 456])
            ("try" code nil nil [457 566])
            ("try" code nil nil [567 641])
            ("try" code nil nil [642 716])
            ("__all__" variable nil nil [717 1208])
            ("Error" type
               (:superclasses ("OSError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1305 1309]))                  
                :type "class")
                nil [1279 1310])
            ("SameFileError" type
               (:documentation "Raised when source and destination are the same file."
                :superclasses ("Error")
                :type "class")
                nil [1311 1403])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("OSError")
                :type "class")
                nil [1404 1572])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("OSError")
                :type "class")
                nil [1573 1653])
            ("ReadError" type
               (:documentation "Raised when an archive cannot be read"
                :superclasses ("OSError")
                :type "class")
                nil [1654 1728])
            ("RegistryError" type
               (:documentation "Raised when a registry operation with the archiving
    and unpacking registries fails"
                :superclasses ("Exception")
                :type "class")
                nil [1729 1858])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1876 1880])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1882 1886])
                    ("length" variable nil (reparse-symbol function_parameters) [1888 1894]))                  )
                nil [1860 2084])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [2099 2102])
                ("dst" variable nil (reparse-symbol function_parameters) [2104 2107]))              ) nil [2085 2437])
            ("copyfile" function
               (:documentation "Copy data from src to dst.

    If follow_symlinks is not set and src is a symbolic link, a new
    symlink will be created instead of copying the file it points to.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2451 2454])
                    ("dst" variable nil (reparse-symbol function_parameters) [2456 2459])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [2464 2479]))                  )
                nil [2438 3369])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst.

    If follow_symlinks is not set, symlinks aren't followed if and only
    if both `src` and `dst` are symlinks.  If `lchmod` isn't available
    (e.g. Linux) this method does nothing.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3383 3386])
                    ("dst" variable nil (reparse-symbol function_parameters) [3388 3391])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [3396 3411]))                  )
                nil [3370 4030])
            ("if" code nil nil [4031 4918])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst.

    If the optional flag `follow_symlinks` is not set, symlinks aren't followed if and
    only if both `src` and `dst` are symlinks.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [4932 4935])
                    ("dst" variable nil (reparse-symbol function_parameters) [4937 4940])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [4945 4960]))                  )
                nil [4919 6971])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\"). Return the file's destination.

    The destination may be a directory.

    If follow_symlinks is false, symlinks won't be followed. This
    resembles GNU's \"cp -P src dst\".

    If source and destination are the same file, a SameFileError will be
    raised.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [6981 6984])
                    ("dst" variable nil (reparse-symbol function_parameters) [6986 6989])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [6994 7009]))                  )
                nil [6972 7544])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\"). Return the file's
    destination.\"

    The destination may be a directory.

    If follow_symlinks is false, symlinks won't be followed. This
    resembles GNU's \"cp -P src dst\".

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [7555 7558])
                    ("dst" variable nil (reparse-symbol function_parameters) [7560 7563])
                    ("follow_symlinks" variable nil (reparse-symbol function_parameters) [7568 7583]))                  )
                nil [7545 8044])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [8065 8074]))                  )
                nil [8045 8457])
            ("copytree" function
               (:documentation "Recursively copy a directory tree.

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied. If the file pointed by the symlink doesn't
    exist, an exception will be added in the list of errors raised in
    an Error exception at the end of the copy process.

    You can set the optional ignore_dangling_symlinks flag to true if you
    want to silence this exception. Notice that this has no effect on
    platforms that don't support os.symlink.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    The optional copy_function argument is a callable that will be used
    to copy each file. It will be called with the source path and the
    destination path as arguments. By default, copy2() is used, but any
    function that supports the same signature (like copy()) can be used.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8471 8474])
                    ("dst" variable nil (reparse-symbol function_parameters) [8476 8479])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [8481 8489])
                    ("ignore" variable nil (reparse-symbol function_parameters) [8497 8503])
                    ("copy_function" variable nil (reparse-symbol function_parameters) [8510 8523])
                    ("ignore_dangling_symlinks" variable nil (reparse-symbol function_parameters) [8544 8568]))                  )
                nil [8458 12231])
            ("_rmtree_unsafe" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [12291 12295])
                ("onerror" variable nil (reparse-symbol function_parameters) [12297 12304]))              ) nil [12272 13257])
            ("_rmtree_safe_fd" function (:arguments 
              ( ("topfd" variable nil (reparse-symbol function_parameters) [13333 13338])
                ("path" variable nil (reparse-symbol function_parameters) [13340 13344])
                ("onerror" variable nil (reparse-symbol function_parameters) [13346 13353]))              ) nil [13313 15046])
            ("_use_fd_functions" variable nil nil [15047 15269])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is platform and implementation dependent;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [15282 15286])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [15288 15301])
                    ("onerror" variable nil (reparse-symbol function_parameters) [15309 15316]))                  )
                nil [15271 17164])
            ("rmtree" variable nil nil [17282 17331])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [17347 17351]))              ) nil [17333 17604])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command. Return the file or directory's
    destination.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed. Symlinks are
    recreated under the new name if os.rename() fails because of cross
    filesystem renames.

    The optional `copy_function` argument is a callable that will be used
    to copy the source or it will be delegated to `copytree`.
    By default, copy2() is used, but any function that supports the same
    signature (like copy()) can be used.

    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [17614 17617])
                    ("dst" variable nil (reparse-symbol function_parameters) [17619 17622])
                    ("copy_function" variable nil (reparse-symbol function_parameters) [17624 17637]))                  )
                nil [17605 19739])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [19755 19758])
                ("dst" variable nil (reparse-symbol function_parameters) [19760 19763]))              ) nil [19740 19989])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [20003 20007]))                  )
                nil [19990 20268])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [20282 20286]))                  )
                nil [20269 20547])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", \"xz\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", \".bz2\", or \".xz\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [20566 20575])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [20577 20585])
                    ("compress" variable nil (reparse-symbol function_parameters) [20587 20595])
                    ("verbose" variable nil (reparse-symbol function_parameters) [20604 20611])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [20615 20622])
                    ("owner" variable nil (reparse-symbol function_parameters) [20644 20649])
                    ("group" variable nil (reparse-symbol function_parameters) [20656 20661])
                    ("logger" variable nil (reparse-symbol function_parameters) [20668 20674]))                  )
                nil [20548 22684])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Returns the
    name of the output zip file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [22703 22712])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [22714 22722])
                    ("verbose" variable nil (reparse-symbol function_parameters) [22724 22731])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [22735 22742])
                    ("logger" variable nil (reparse-symbol function_parameters) [22746 22752]))                  )
                nil [22685 24430])
            ("_ARCHIVE_FORMATS" variable nil nil [24431 24530])
            ("if" code nil nil [24532 24738])
            ("if" code nil nil [24739 24884])
            ("if" code nil nil [24885 25025])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [25026 25345])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [25374 25378])
                    ("function" variable nil (reparse-symbol function_parameters) [25380 25388])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [25390 25400])
                    ("description" variable nil (reparse-symbol function_parameters) [25407 25418]))                  )
                nil [25346 26312])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [26343 26347]))              ) nil [26313 26381])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",
    \"bztar\", or \"xztar\".  Or any other registered format.

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [26399 26408])
                    ("format" variable nil (reparse-symbol function_parameters) [26410 26416])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [26418 26426])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [26433 26441])
                    ("verbose" variable nil (reparse-symbol function_parameters) [26448 26455])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [26476 26483])
                    ("owner" variable nil (reparse-symbol function_parameters) [26487 26492])
                    ("group" variable nil (reparse-symbol function_parameters) [26499 26504])
                    ("logger" variable nil (reparse-symbol function_parameters) [26511 26517]))                  )
                nil [26382 28262])
            ("get_unpack_formats" function (:documentation "Returns a list of supported formats for unpacking.

    Each element of the returned sequence is a tuple
    (name, extensions, description)
    ") nil [28264 28582])
            ("_check_unpack_options" function
               (:documentation "Checks what gets registered as an unpacker."
                :arguments 
                  ( ("extensions" variable nil (reparse-symbol function_parameters) [28609 28619])
                    ("function" variable nil (reparse-symbol function_parameters) [28621 28629])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [28631 28641]))                  )
                nil [28583 29276])
            ("register_unpack_format" function
               (:documentation "Registers an unpack format.

    `name` is the name of the format. `extensions` is a list of extensions
    corresponding to the format.

    `function` is the callable that will be
    used to unpack archives. The callable will receive archives to unpack.
    If it's unable to handle an archive, it needs to raise a ReadError
    exception.

    If provided, `extra_args` is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_unpack_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [29305 29309])
                    ("extensions" variable nil (reparse-symbol function_parameters) [29311 29321])
                    ("function" variable nil (reparse-symbol function_parameters) [29323 29331])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [29333 29343])
                    ("description" variable nil (reparse-symbol function_parameters) [29377 29388]))                  )
                nil [29278 30179])
            ("unregister_unpack_format" function
               (:documentation "Removes the pack format from the registry."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [30209 30213]))                  )
                nil [30180 30299])
            ("_ensure_directory" function
               (:documentation "Ensure that the parent directory of `path` exists"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [30322 30326]))                  )
                nil [30300 30489])
            ("_unpack_zipfile" function
               (:documentation "Unpack zip `filename` to `extract_dir`
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [30510 30518])
                    ("extract_dir" variable nil (reparse-symbol function_parameters) [30520 30531]))                  )
                nil [30490 31494])
            ("_unpack_tarfile" function
               (:documentation "Unpack tar/tar.gz/tar.bz2/tar.xz `filename` to `extract_dir`
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [31515 31523])
                    ("extract_dir" variable nil (reparse-symbol function_parameters) [31525 31536]))                  )
                nil [31495 31943])
            ("_UNPACK_FORMATS" variable nil nil [31944 32094])
            ("if" code nil nil [32096 32242])
            ("if" code nil nil [32243 32391])
            ("if" code nil nil [32392 32536])
            ("_find_unpack_format" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [32561 32569]))              ) nil [32537 32742])
            ("unpack_archive" function
               (:documentation "Unpack an archive.

    `filename` is the name of the archive.

    `extract_dir` is the name of the target directory, where the archive
    is unpacked. If not provided, the current working directory is used.

    `format` is the archive format: one of \"zip\", \"tar\", \"gztar\", \"bztar\",
    or \"xztar\".  Or any other registered format.  If not provided,
    unpack_archive will use the filename extension and see if an unpacker
    was registered for that extension.

    In case none is found, a ValueError is raised.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [32762 32770])
                    ("extract_dir" variable nil (reparse-symbol function_parameters) [32772 32783])
                    ("format" variable nil (reparse-symbol function_parameters) [32790 32796]))                  )
                nil [32743 34056])
            ("if" code nil nil [34058 35378])
            ("chown" function
               (:documentation "Change owner user and group of the given path.

    user and group can be the uid/gid or the user/group names, and in that case,
    they are converted to their respective uid/gid.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [35390 35394])
                    ("user" variable nil (reparse-symbol function_parameters) [35396 35400])
                    ("group" variable nil (reparse-symbol function_parameters) [35407 35412]))                  )
                nil [35380 36295])
            ("get_terminal_size" function
               (:documentation "Get the size of the terminal window.

    For each of the two dimensions, the environment variable, COLUMNS
    and LINES respectively, is checked. If the variable is defined and
    the value is a positive integer, it is used.

    When COLUMNS or LINES is not defined, which is the common case,
    the terminal connected to sys.__stdout__ is queried
    by invoking os.get_terminal_size.

    If the terminal size cannot be successfully queried, either because
    the system doesn't support querying, or because we are not
    connected to a terminal, the value given in fallback parameter
    is used. Fallback defaults to (80, 24) which is the default
    size used by many terminal emulators.

    The value returned is a named tuple of type os.terminal_size.
    "
                :arguments 
                  ( ("fallback" variable nil (reparse-symbol function_parameters) [36318 36326]))                  )
                nil [36296 37904])
            ("which" function
               (:documentation "Given a command, mode, and a PATH string, return the path which
    conforms to the given mode on the PATH, or None if there is no such
    file.

    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result
    of os.environ.get(\"PATH\"), or can be overridden with a custom search
    path.

    "
                :arguments 
                  ( ("cmd" variable nil (reparse-symbol function_parameters) [37915 37918])
                    ("mode" variable nil (reparse-symbol function_parameters) [37920 37924])
                    ("path" variable nil (reparse-symbol function_parameters) [37944 37948]))                  )
                nil [37905 40228]))          
      :file "shutil.py"
      :pointmax 40228
      :fsize 40227
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 21716 . 21728) (IF 21753 . 21755) (ELSE 21765 . 21769) (INDENT_BLOCK 13441 . 13519) (NEWLINE 13440 . 13441) (COLON 13439 . 13440) (TRY 13375 . 13378) (AS 13433 . 13435) (INDENT_BLOCK 12074 . 12173) (NEWLINE 12017 . 12018) (COLON 12016 . 12017) (TRY 11959 . 11962) (AS 12010 . 12012) (INDENT_BLOCK 11899 . 11955) (NEWLINE 11898 . 11899) (COLON 11897 . 11898) (AS 11891 . 11893) (EXCEPT 11876 . 11882) (INDENT_BLOCK 11829 . 11868) (NEWLINE 11828 . 11829) (COLON 11827 . 11828) (TRY 10466 . 10469) (AS 11821 . 11823) (MULT 7565 . 7566) (COMMA 7566 . 7567) (MULT 6991 . 6992) (COMMA 6992 . 6993) (INDENT_BLOCK 6731 . 6922) (NEWLINE 6730 . 6731) (COLON 6729 . 6730) (TRY 6623 . 6626) (AS 6723 . 6725) (MULT 4942 . 4943) (COMMA 4943 . 4944) (INDENT_BLOCK 4757 . 4862) (NEWLINE 4756 . 4757) (COLON 4755 . 4756) (TRY 4560 . 4563) (AS 4751 . 4753) (INDENT_BLOCK 4418 . 4521) (NEWLINE 4417 . 4418) (COLON 4416 . 4417) (TRY 4313 . 4316) (AS 4412 . 4414) (MULT 4089 . 4090) (COMMA 4090 . 4091) (MULT 3393 . 3394) (COMMA 3394 . 3395) (MULT 2461 . 2462) (COMMA 2462 . 2463)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The \"os.path\" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
\"\"\"" code nil nil [1 494])
            ("os" include nil nil [496 505])
            ("sys" include nil nil [506 516])
            ("stat" include nil nil [517 528])
            ("genericpath" include nil nil [529 547])
            ("genericpath" include nil nil [548 573])
            ("__all__" variable nil nil [575 1082])
            ("curdir" variable nil nil [1211 1223])
            ("pardir" variable nil nil [1224 1237])
            ("extsep" variable nil nil [1238 1250])
            ("sep" variable nil nil [1251 1260])
            ("pathsep" variable nil nil [1261 1274])
            ("defpath" variable nil nil [1275 1301])
            ("altsep" variable nil nil [1302 1315])
            ("devnull" variable nil nil [1316 1337])
            ("_get_sep" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [1352 1356]))              ) nil [1339 1440])
            ("normcase" function
               (:documentation "Normalize case of pathname.  Has no effect under Posix"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1719 1720]))                  )
                nil [1706 1996])
            ("isabs" function
               (:documentation "Test whether a path is absolute"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2095 2096]))                  )
                nil [2085 2213])
            ("join" function
               (:documentation "Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded.  An empty last part will result in a path that
    ends with a separator."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2364 2365])
                    ("p" variable nil (reparse-symbol function_parameters) [2367 2369]))                  )
                nil [2355 3135])
            ("split" function
               (:documentation "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is
    everything after the final slash.  Either part may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3391 3392]))                  )
                nil [3381 3725])
            ("splitext" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [3946 3947]))              ) nil [3933 4145])
            ("splitext" variable nil nil [4145 4193])
            ("splitdrive" function
               (:documentation "Split a pathname into drive and path. On Posix, drive is always
    empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4348 4349]))                  )
                nil [4333 4478])
            ("basename" function
               (:documentation "Returns the final component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4563 4564]))                  )
                nil [4550 4704])
            ("dirname" function
               (:documentation "Returns the directory component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4787 4788]))                  )
                nil [4775 5019])
            ("islink" function
               (:documentation "Test whether a path is a symbolic link"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5135 5139]))                  )
                nil [5124 5323])
            ("lexists" function
               (:documentation "Test whether a path exists.  Returns True for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5394 5398]))                  )
                nil [5382 5568])
            ("ismount" function
               (:documentation "Test whether a path is a mount point"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5686 5690]))                  )
                nil [5674 6484])
            ("expanduser" function
               (:documentation "Expand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6975 6979]))                  )
                nil [6960 7972])
            ("_varprog" variable nil nil [8133 8148])
            ("_varprogb" variable nil nil [8149 8165])
            ("expandvars" function
               (:documentation "Expand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8182 8186]))                  )
                nil [8167 9531])
            ("normpath" function
               (:documentation "Normalize path, eliminating double slashes, etc."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [9719 9723]))                  )
                nil [9706 10788])
            ("abspath" function
               (:documentation "Return an absolute path."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10802 10806]))                  )
                nil [10790 11063])
            ("realpath" function
               (:documentation "Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [11165 11173]))                  )
                nil [11152 11412])
            ("_joinrealpath" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [11530 11534])
                ("rest" variable nil (reparse-symbol function_parameters) [11536 11540])
                ("seen" variable nil (reparse-symbol function_parameters) [11542 11546]))              ) nil [11512 12987])
            ("supports_unicode_filenames" variable nil nil [12989 13044])
            ("relpath" function
               (:documentation "Return a relative version of a path"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [13058 13062])
                    ("start" variable nil (reparse-symbol function_parameters) [13064 13069]))                  )
                nil [13046 14035])
            ("commonpath" function
               (:documentation "Given a sequence of path names, returns the longest common sub-path."
                :arguments 
                  ( ("paths" variable nil (reparse-symbol function_parameters) [14291 14296]))                  )
                nil [14276 15350]))          
      :file "posixpath.py"
      :pointmax 15350
      :fsize 15349
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 15161 . 15167) (IF 15174 . 15176) (ELSE 15183 . 15187) (RAISE 14806 . 14811) (FROM 14864 . 14868) (NEWLINE 14873 . 14874) (INDENT_BLOCK 8409 . 8433) (NEWLINE 8408 . 8409) (IF 8388 . 8390) (STRING_LITERAL 8392 . 8395) (COLON 8407 . 8408)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"A collection of string constants.

Public module variables:

whitespace -- a string containing all ASCII whitespace
ascii_lowercase -- a string containing all ASCII lowercase letters
ascii_uppercase -- a string containing all ASCII uppercase letters
ascii_letters -- a string containing all ASCII letters
digits -- a string containing all ASCII decimal digits
hexdigits -- a string containing all ASCII hexadecimal digits
octdigits -- a string containing all ASCII octal digits
punctuation -- a string containing all ASCII punctuation characters
printable -- a string containing all ASCII characters considered printable

\"\"\"" code nil nil [1 629])
            ("__all__" variable nil nil [631 833])
            ("_string" include nil nil [835 849])
            ("whitespace" variable nil nil [907 933])
            ("ascii_lowercase" variable nil nil [934 980])
            ("ascii_uppercase" variable nil nil [981 1027])
            ("ascii_letters" code nil nil [1028 1077])
            ("digits" variable nil nil [1078 1099])
            ("hexdigits" code nil nil [1100 1140])
            ("octdigits" variable nil nil [1141 1163])
            ("punctuation" variable nil nil [1164 1217])
            ("printable" code nil nil [1218 1279])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1417 1418])
                    ("sep" variable nil (reparse-symbol function_parameters) [1420 1423]))                  )
                nil [1404 1910])
            ("re" include nil nil [1981 1997])
            ("collections" include nil nil [1998 2043])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [2081 2401])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [2452 2509])
                            ("if" code nil (reparse-symbol indented_block_body) [2518 2752])
                            ("cls" variable nil (reparse-symbol indented_block_body) [2760 2819]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2420 2423])
                            ("name" variable nil (reparse-symbol function_parameters) [2425 2429])
                            ("bases" variable nil (reparse-symbol function_parameters) [2431 2436])
                            ("dct" variable nil (reparse-symbol function_parameters) [2438 2441]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2407 2820]))                  
                :type "class")
                nil [2045 2820])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :superclasses ("_TemplateMetaclass")
                :members 
                  ( ("delimiter" variable nil (reparse-symbol indented_block_body) [2930 2945])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [2950 2981])
                    ("flags" variable nil (reparse-symbol indented_block_body) [2986 3008])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3052 3076]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3027 3031])
                            ("template" variable nil (reparse-symbol function_parameters) [3033 3041]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3014 3077])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3162 3166])
                            ("mo" variable nil (reparse-symbol function_parameters) [3168 3170]))                          )
                        (reparse-symbol indented_block_body) [3149 3545])
                    ("substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [3565 3570])
                        ("kws" variable nil (reparse-symbol function_parameters) [3572 3577]))                      ) (reparse-symbol indented_block_body) [3550 4615])
                    ("safe_substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [4640 4645])
                        ("kws" variable nil (reparse-symbol function_parameters) [4647 4652]))                      ) (reparse-symbol indented_block_body) [4620 5743]))                  
                :type "class")
                nil [2822 5743])
            ("Formatter" type
               (:members 
                  ( ("format" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [6177 6182])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [6184 6192]))                      ) (reparse-symbol indented_block_body) [6166 7041])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7058 7062])
                            ("format_string" variable nil (reparse-symbol function_parameters) [7064 7077])
                            ("args" variable nil (reparse-symbol function_parameters) [7079 7083])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7085 7091]))                          )
                        (reparse-symbol indented_block_body) [7046 7275])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7293 7297])
                            ("format_string" variable nil (reparse-symbol function_parameters) [7299 7312])
                            ("args" variable nil (reparse-symbol function_parameters) [7314 7318])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7320 7326])
                            ("used_args" variable nil (reparse-symbol function_parameters) [7328 7337])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [7339 7354])
                            ("auto_arg_index" variable nil (reparse-symbol function_parameters) [7373 7387]))                          )
                        (reparse-symbol indented_block_body) [7280 9623])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9643 9647])
                            ("key" variable nil (reparse-symbol function_parameters) [9649 9652])
                            ("args" variable nil (reparse-symbol function_parameters) [9654 9658])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9660 9666]))                          )
                        (reparse-symbol indented_block_body) [9629 9776])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9804 9808])
                            ("used_args" variable nil (reparse-symbol function_parameters) [9810 9819])
                            ("args" variable nil (reparse-symbol function_parameters) [9821 9825])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9827 9833]))                          )
                        (reparse-symbol indented_block_body) [9782 9849])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9872 9876])
                            ("value" variable nil (reparse-symbol function_parameters) [9878 9883])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [9885 9896]))                          )
                        (reparse-symbol indented_block_body) [9855 9941])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9965 9969])
                            ("value" variable nil (reparse-symbol function_parameters) [9971 9976])
                            ("conversion" variable nil (reparse-symbol function_parameters) [9978 9988]))                          )
                        (reparse-symbol indented_block_body) [9947 10370])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10745 10749])
                            ("format_string" variable nil (reparse-symbol function_parameters) [10751 10764]))                          )
                        (reparse-symbol indented_block_body) [10735 10822])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11099 11103])
                            ("field_name" variable nil (reparse-symbol function_parameters) [11105 11115])
                            ("args" variable nil (reparse-symbol function_parameters) [11117 11121])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11123 11129]))                          )
                        (reparse-symbol indented_block_body) [11085 11518]))                  
                :type "class")
                nil [6145 11518]))          
      :file "string.py"
      :pointmax 11518
      :fsize 11517
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((RAISE 6855 . 6860) (FROM 6974 . 6978) (NEWLINE 6983 . 6984) (NAME 6428 . 6441) (MULT 6443 . 6444) (NAME 6346 . 6350) (MULT 6352 . 6353) (NAME 4814 . 4818) (MULT 4820 . 4821) (NAME 3734 . 3738) (MULT 3740 . 3741) (NAME 2837 . 2846) (ASSIGN 2846 . 2847)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Support to pretty-print lists, tuples, & dictionaries recursively.

Very simple, but useful, especially in debugging data structures.

Classes
-------

PrettyPrinter()
    Handle pretty-printing operations onto a stream using a configured
    set of formatting parameters.

Functions
---------

pformat()
    Format a Python object into a pretty-printed representation.

pprint()
    Pretty-print a Python object to a stream [default is sys.stdout].

saferepr()
    Generate a 'standard' repr()-like value, but protect against recursive
    data structures.

\"\"\"" code nil nil [489 1054])
            ("collections" include nil nil [1056 1090])
            ("re" include nil nil [1091 1100])
            ("sys" include nil nil [1101 1119])
            ("types" include nil nil [1120 1142])
            ("io" include nil nil [1143 1179])
            ("__all__" variable nil nil [1181 1277])
            ("pprint" function
               (:documentation "Pretty-print a Python object to a stream [default is sys.stdout]."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1291 1297])
                    ("stream" variable nil (reparse-symbol function_parameters) [1299 1305])
                    ("indent" variable nil (reparse-symbol function_parameters) [1312 1318])
                    ("width" variable nil (reparse-symbol function_parameters) [1322 1327])
                    ("depth" variable nil (reparse-symbol function_parameters) [1332 1337])
                    ("compact" variable nil (reparse-symbol function_parameters) [1358 1365]))                  )
                nil [1280 1595])
            ("pformat" function
               (:documentation "Format a Python object into a pretty-printed representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1608 1614])
                    ("indent" variable nil (reparse-symbol function_parameters) [1616 1622])
                    ("width" variable nil (reparse-symbol function_parameters) [1626 1631])
                    ("depth" variable nil (reparse-symbol function_parameters) [1636 1641])
                    ("compact" variable nil (reparse-symbol function_parameters) [1651 1658]))                  )
                nil [1596 1862])
            ("saferepr" function
               (:documentation "Version of repr() which can handle recursive data structures."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1876 1882]))                  )
                nil [1863 2003])
            ("isreadable" function
               (:documentation "Determine if saferepr(object) is readable by eval()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2019 2025]))                  )
                nil [2004 2137])
            ("isrecursive" function
               (:documentation "Determine if object requires a recursive representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2154 2160]))                  )
                nil [2138 2276])
            ("_safe_key" type
               (:documentation "Helper function for key functions when sorting unorderable objects.

    The wrapped-object will fallback to a Py2.x style comparison for
    unorderable types (sorting first comparing the type name and then by
    the obj ids).  Does not work recursively, so dict.items() must have
    _safe_key applied to both the key and the value.

    "
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2651 2670])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2709 2723]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2689 2693])
                            ("obj" variable nil (reparse-symbol function_parameters) [2695 2698]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2676 2724])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2740 2744])
                            ("other" variable nil (reparse-symbol function_parameters) [2746 2751]))                          )
                        (reparse-symbol indented_block_body) [2729 2952]))                  
                :type "class")
                nil [2277 2952])
            ("_safe_tuple" function (:arguments 
              ( ("t" variable nil (reparse-symbol function_parameters) [2969 2970]))              ) nil [2953 3062])
            ("PrettyPrinter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        compact
            If true, several items will be combined in one line.

        \"\"\"" code nil (reparse-symbol indented_block_body) [3196 3782])
                            ("indent" variable nil (reparse-symbol indented_block_body) [3791 3811])
                            ("width" variable nil (reparse-symbol indented_block_body) [3820 3838])
                            ("if" code nil (reparse-symbol indented_block_body) [3847 3914])
                            ("if" code nil (reparse-symbol indented_block_body) [3922 4009])
                            ("if" code nil (reparse-symbol indented_block_body) [4017 4082])
                            ("self" variable nil (reparse-symbol indented_block_body) [4090 4109])
                            ("self" variable nil (reparse-symbol indented_block_body) [4118 4149])
                            ("self" variable nil (reparse-symbol indented_block_body) [4158 4177])
                            ("if" code nil (reparse-symbol indented_block_body) [4186 4296])
                            ("self" variable nil (reparse-symbol indented_block_body) [4304 4333]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3101 3105])
                            ("indent" variable nil (reparse-symbol function_parameters) [3107 3113])
                            ("width" variable nil (reparse-symbol function_parameters) [3117 3122])
                            ("depth" variable nil (reparse-symbol function_parameters) [3127 3132])
                            ("stream" variable nil (reparse-symbol function_parameters) [3139 3145])
                            ("compact" variable nil (reparse-symbol function_parameters) [3172 3179]))                          
                        :documentation "Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        compact
            If true, several items will be combined in one line.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3088 4334])
                    ("pprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4350 4354])
                            ("object" variable nil (reparse-symbol function_parameters) [4356 4362]))                          )
                        (reparse-symbol indented_block_body) [4339 4454])
                    ("pformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4471 4475])
                            ("object" variable nil (reparse-symbol function_parameters) [4477 4483]))                          )
                        (reparse-symbol indented_block_body) [4459 4589])
                    ("isrecursive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4610 4614])
                            ("object" variable nil (reparse-symbol function_parameters) [4616 4622]))                          )
                        (reparse-symbol indented_block_body) [4594 4673])
                    ("isreadable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4693 4697])
                            ("object" variable nil (reparse-symbol function_parameters) [4699 4705]))                          )
                        (reparse-symbol indented_block_body) [4678 4813])
                    ("_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4830 4834])
                            ("object" variable nil (reparse-symbol function_parameters) [4836 4842])
                            ("stream" variable nil (reparse-symbol function_parameters) [4844 4850])
                            ("indent" variable nil (reparse-symbol function_parameters) [4852 4858])
                            ("allowance" variable nil (reparse-symbol function_parameters) [4860 4869])
                            ("context" variable nil (reparse-symbol function_parameters) [4871 4878])
                            ("level" variable nil (reparse-symbol function_parameters) [4880 4885]))                          )
                        (reparse-symbol indented_block_body) [4818 5764])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [5769 5783])
                    ("_pprint_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5806 5810])
                            ("object" variable nil (reparse-symbol function_parameters) [5812 5818])
                            ("stream" variable nil (reparse-symbol function_parameters) [5820 5826])
                            ("indent" variable nil (reparse-symbol function_parameters) [5828 5834])
                            ("allowance" variable nil (reparse-symbol function_parameters) [5836 5845])
                            ("context" variable nil (reparse-symbol function_parameters) [5847 5854])
                            ("level" variable nil (reparse-symbol function_parameters) [5856 5861]))                          )
                        (reparse-symbol indented_block_body) [5789 6258])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [6263 6302])
                    ("_pprint_ordered_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6333 6337])
                            ("object" variable nil (reparse-symbol function_parameters) [6339 6345])
                            ("stream" variable nil (reparse-symbol function_parameters) [6347 6353])
                            ("indent" variable nil (reparse-symbol function_parameters) [6355 6361])
                            ("allowance" variable nil (reparse-symbol function_parameters) [6363 6372])
                            ("context" variable nil (reparse-symbol function_parameters) [6374 6381])
                            ("level" variable nil (reparse-symbol function_parameters) [6383 6388]))                          )
                        (reparse-symbol indented_block_body) [6308 6731])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [6736 6803])
                    ("_pprint_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6826 6830])
                            ("object" variable nil (reparse-symbol function_parameters) [6832 6838])
                            ("stream" variable nil (reparse-symbol function_parameters) [6840 6846])
                            ("indent" variable nil (reparse-symbol function_parameters) [6848 6854])
                            ("allowance" variable nil (reparse-symbol function_parameters) [6856 6865])
                            ("context" variable nil (reparse-symbol function_parameters) [6867 6874])
                            ("level" variable nil (reparse-symbol function_parameters) [6876 6881]))                          )
                        (reparse-symbol indented_block_body) [6809 7045])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [7050 7089])
                    ("_pprint_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7113 7117])
                            ("object" variable nil (reparse-symbol function_parameters) [7119 7125])
                            ("stream" variable nil (reparse-symbol function_parameters) [7127 7133])
                            ("indent" variable nil (reparse-symbol function_parameters) [7135 7141])
                            ("allowance" variable nil (reparse-symbol function_parameters) [7143 7152])
                            ("context" variable nil (reparse-symbol function_parameters) [7154 7161])
                            ("level" variable nil (reparse-symbol function_parameters) [7163 7168]))                          )
                        (reparse-symbol indented_block_body) [7095 7399])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [7404 7445])
                    ("_pprint_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7467 7471])
                            ("object" variable nil (reparse-symbol function_parameters) [7473 7479])
                            ("stream" variable nil (reparse-symbol function_parameters) [7481 7487])
                            ("indent" variable nil (reparse-symbol function_parameters) [7489 7495])
                            ("allowance" variable nil (reparse-symbol function_parameters) [7497 7506])
                            ("context" variable nil (reparse-symbol function_parameters) [7508 7515])
                            ("level" variable nil (reparse-symbol function_parameters) [7517 7522]))                          )
                        (reparse-symbol indented_block_body) [7451 8049])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [8054 8091])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [8096 8139])
                    ("_pprint_str" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8161 8165])
                            ("object" variable nil (reparse-symbol function_parameters) [8167 8173])
                            ("stream" variable nil (reparse-symbol function_parameters) [8175 8181])
                            ("indent" variable nil (reparse-symbol function_parameters) [8183 8189])
                            ("allowance" variable nil (reparse-symbol function_parameters) [8191 8200])
                            ("context" variable nil (reparse-symbol function_parameters) [8202 8209])
                            ("level" variable nil (reparse-symbol function_parameters) [8211 8216]))                          )
                        (reparse-symbol indented_block_body) [8145 9897])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [9902 9939])
                    ("_pprint_bytes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9963 9967])
                            ("object" variable nil (reparse-symbol function_parameters) [9969 9975])
                            ("stream" variable nil (reparse-symbol function_parameters) [9977 9983])
                            ("indent" variable nil (reparse-symbol function_parameters) [9985 9991])
                            ("allowance" variable nil (reparse-symbol function_parameters) [9993 10002])
                            ("context" variable nil (reparse-symbol function_parameters) [10004 10011])
                            ("level" variable nil (reparse-symbol function_parameters) [10013 10018]))                          )
                        (reparse-symbol indented_block_body) [9945 10506])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [10511 10552])
                    ("_pprint_bytearray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10580 10584])
                            ("object" variable nil (reparse-symbol function_parameters) [10586 10592])
                            ("stream" variable nil (reparse-symbol function_parameters) [10594 10600])
                            ("indent" variable nil (reparse-symbol function_parameters) [10602 10608])
                            ("allowance" variable nil (reparse-symbol function_parameters) [10610 10619])
                            ("context" variable nil (reparse-symbol function_parameters) [10621 10628])
                            ("level" variable nil (reparse-symbol function_parameters) [10630 10635]))                          )
                        (reparse-symbol indented_block_body) [10558 10839])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [10844 10893])
                    ("_pprint_mappingproxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10924 10928])
                            ("object" variable nil (reparse-symbol function_parameters) [10930 10936])
                            ("stream" variable nil (reparse-symbol function_parameters) [10938 10944])
                            ("indent" variable nil (reparse-symbol function_parameters) [10946 10952])
                            ("allowance" variable nil (reparse-symbol function_parameters) [10954 10963])
                            ("context" variable nil (reparse-symbol function_parameters) [10965 10972])
                            ("level" variable nil (reparse-symbol function_parameters) [10974 10979]))                          )
                        (reparse-symbol indented_block_body) [10899 11155])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [11160 11226])
                    ("_format_dict_items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11255 11259])
                            ("items" variable nil (reparse-symbol function_parameters) [11261 11266])
                            ("stream" variable nil (reparse-symbol function_parameters) [11268 11274])
                            ("indent" variable nil (reparse-symbol function_parameters) [11276 11282])
                            ("allowance" variable nil (reparse-symbol function_parameters) [11284 11293])
                            ("context" variable nil (reparse-symbol function_parameters) [11295 11302])
                            ("level" variable nil (reparse-symbol function_parameters) [11331 11336]))                          )
                        (reparse-symbol indented_block_body) [11232 11872])
                    ("_format_items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11895 11899])
                            ("items" variable nil (reparse-symbol function_parameters) [11901 11906])
                            ("stream" variable nil (reparse-symbol function_parameters) [11908 11914])
                            ("indent" variable nil (reparse-symbol function_parameters) [11916 11922])
                            ("allowance" variable nil (reparse-symbol function_parameters) [11924 11933])
                            ("context" variable nil (reparse-symbol function_parameters) [11935 11942])
                            ("level" variable nil (reparse-symbol function_parameters) [11944 11949]))                          )
                        (reparse-symbol indented_block_body) [11877 13240])
                    ("_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13255 13259])
                            ("object" variable nil (reparse-symbol function_parameters) [13261 13267])
                            ("context" variable nil (reparse-symbol function_parameters) [13269 13276])
                            ("level" variable nil (reparse-symbol function_parameters) [13278 13283]))                          )
                        (reparse-symbol indented_block_body) [13245 13563])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13579 13583])
                            ("object" variable nil (reparse-symbol function_parameters) [13585 13591])
                            ("context" variable nil (reparse-symbol function_parameters) [13593 13600])
                            ("maxlevels" variable nil (reparse-symbol function_parameters) [13602 13611])
                            ("level" variable nil (reparse-symbol function_parameters) [13613 13618]))                          
                        :documentation "Format object for a specific context, returning a string
        and flags indicating whether the representation is 'readable'
        and whether the object represents a recursive construct.
        ")
                        (reparse-symbol indented_block_body) [13568 13897])
                    ("_pprint_default_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13927 13931])
                            ("object" variable nil (reparse-symbol function_parameters) [13933 13939])
                            ("stream" variable nil (reparse-symbol function_parameters) [13941 13947])
                            ("indent" variable nil (reparse-symbol function_parameters) [13949 13955])
                            ("allowance" variable nil (reparse-symbol function_parameters) [13957 13966])
                            ("context" variable nil (reparse-symbol function_parameters) [13968 13975])
                            ("level" variable nil (reparse-symbol function_parameters) [13977 13982]))                          )
                        (reparse-symbol indented_block_body) [13902 14385])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [14390 14457])
                    ("_pprint_counter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14483 14487])
                            ("object" variable nil (reparse-symbol function_parameters) [14489 14495])
                            ("stream" variable nil (reparse-symbol function_parameters) [14497 14503])
                            ("indent" variable nil (reparse-symbol function_parameters) [14505 14511])
                            ("allowance" variable nil (reparse-symbol function_parameters) [14513 14522])
                            ("context" variable nil (reparse-symbol function_parameters) [14524 14531])
                            ("level" variable nil (reparse-symbol function_parameters) [14533 14538]))                          )
                        (reparse-symbol indented_block_body) [14463 15038])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [15043 15101])
                    ("_pprint_chain_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15129 15133])
                            ("object" variable nil (reparse-symbol function_parameters) [15135 15141])
                            ("stream" variable nil (reparse-symbol function_parameters) [15143 15149])
                            ("indent" variable nil (reparse-symbol function_parameters) [15151 15157])
                            ("allowance" variable nil (reparse-symbol function_parameters) [15159 15168])
                            ("context" variable nil (reparse-symbol function_parameters) [15170 15177])
                            ("level" variable nil (reparse-symbol function_parameters) [15179 15184]))                          )
                        (reparse-symbol indented_block_body) [15107 15725])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [15730 15791])
                    ("_pprint_deque" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15815 15819])
                            ("object" variable nil (reparse-symbol function_parameters) [15821 15827])
                            ("stream" variable nil (reparse-symbol function_parameters) [15829 15835])
                            ("indent" variable nil (reparse-symbol function_parameters) [15837 15843])
                            ("allowance" variable nil (reparse-symbol function_parameters) [15845 15854])
                            ("context" variable nil (reparse-symbol function_parameters) [15856 15863])
                            ("level" variable nil (reparse-symbol function_parameters) [15865 15870]))                          )
                        (reparse-symbol indented_block_body) [15797 16525])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [16530 16584])
                    ("_pprint_user_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16612 16616])
                            ("object" variable nil (reparse-symbol function_parameters) [16618 16624])
                            ("stream" variable nil (reparse-symbol function_parameters) [16626 16632])
                            ("indent" variable nil (reparse-symbol function_parameters) [16634 16640])
                            ("allowance" variable nil (reparse-symbol function_parameters) [16642 16651])
                            ("context" variable nil (reparse-symbol function_parameters) [16653 16660])
                            ("level" variable nil (reparse-symbol function_parameters) [16662 16667]))                          )
                        (reparse-symbol indented_block_body) [16590 16751])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [16756 16817])
                    ("_pprint_user_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16845 16849])
                            ("object" variable nil (reparse-symbol function_parameters) [16851 16857])
                            ("stream" variable nil (reparse-symbol function_parameters) [16859 16865])
                            ("indent" variable nil (reparse-symbol function_parameters) [16867 16873])
                            ("allowance" variable nil (reparse-symbol function_parameters) [16875 16884])
                            ("context" variable nil (reparse-symbol function_parameters) [16886 16893])
                            ("level" variable nil (reparse-symbol function_parameters) [16895 16900]))                          )
                        (reparse-symbol indented_block_body) [16823 16984])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [16989 17050])
                    ("_pprint_user_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17080 17084])
                            ("object" variable nil (reparse-symbol function_parameters) [17086 17092])
                            ("stream" variable nil (reparse-symbol function_parameters) [17094 17100])
                            ("indent" variable nil (reparse-symbol function_parameters) [17102 17108])
                            ("allowance" variable nil (reparse-symbol function_parameters) [17110 17119])
                            ("context" variable nil (reparse-symbol function_parameters) [17121 17128])
                            ("level" variable nil (reparse-symbol function_parameters) [17130 17135]))                          )
                        (reparse-symbol indented_block_body) [17056 17219])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [17224 17289]))                  
                :type "class")
                nil [3063 17290])
            ("_safe_repr" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [17363 17369])
                ("context" variable nil (reparse-symbol function_parameters) [17371 17378])
                ("maxlevels" variable nil (reparse-symbol function_parameters) [17380 17389])
                ("level" variable nil (reparse-symbol function_parameters) [17391 17396]))              ) nil [17348 19750])
            ("_builtin_scalars" variable nil nil [19751 19873])
            ("_recursion" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [19890 19896]))              ) nil [19875 19993])
            ("_perfcheck" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [20010 20016]))              ) nil [19995 20342])
            ("_wrap_bytes_repr" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [20364 20370])
                ("width" variable nil (reparse-symbol function_parameters) [20372 20377])
                ("allowance" variable nil (reparse-symbol function_parameters) [20379 20388]))              ) nil [20343 20816])
            ("if" code nil nil [20817 20861]))          
      :file "pprint.py"
      :pointmax 20861
      :fsize 20860
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((NAME 7205 . 7212) (IF 7220 . 7222) (ELSE 7240 . 7244) (MULT 3152 . 3153) (COMMA 3153 . 3154) (MULT 1648 . 1649) (COMMA 1649 . 1650) (MULT 1344 . 1345) (COMMA 1345 . 1346)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
opcode module - potentially shared between dis and other modules which
operate on bytecodes (e.g. peephole optimizers).
\"\"\"" code nil nil [2 129])
            ("__all__" variable nil nil [131 319])
            ("try" code nil nil [533 639])
            ("cmp_op" variable nil nil [640 749])
            ("hasconst" variable nil nil [751 764])
            ("hasname" variable nil nil [765 777])
            ("hasjrel" variable nil nil [778 790])
            ("hasjabs" variable nil nil [791 803])
            ("haslocal" variable nil nil [804 817])
            ("hascompare" variable nil nil [818 833])
            ("hasfree" variable nil nil [834 846])
            ("hasnargs" variable nil nil [847 860])
            ("opmap" variable nil nil [871 881])
            ("opname" variable nil nil [882 928])
            ("def_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [941 945])
                ("op" variable nil (reparse-symbol function_parameters) [947 949]))              ) nil [930 995])
            ("name_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1008 1012])
                ("op" variable nil (reparse-symbol function_parameters) [1014 1016]))              ) nil [996 1063])
            ("jrel_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1076 1080])
                ("op" variable nil (reparse-symbol function_parameters) [1082 1084]))              ) nil [1064 1131])
            ("jabs_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1144 1148])
                ("op" variable nil (reparse-symbol function_parameters) [1150 1152]))              ) nil [1132 1199])
            ("def_op" code nil nil [1287 1307])
            ("def_op" code nil nil [1308 1328])
            ("def_op" code nil nil [1329 1351])
            ("def_op" code nil nil [1352 1372])
            ("def_op" code nil nil [1373 1397])
            ("def_op" code nil nil [1399 1415])
            ("def_op" code nil nil [1416 1444])
            ("def_op" code nil nil [1445 1473])
            ("def_op" code nil nil [1474 1497])
            ("def_op" code nil nil [1499 1525])
            ("def_op" code nil nil [1527 1563])
            ("def_op" code nil nil [1564 1601])
            ("def_op" code nil nil [1603 1629])
            ("def_op" code nil nil [1630 1659])
            ("def_op" code nil nil [1661 1688])
            ("def_op" code nil nil [1689 1713])
            ("def_op" code nil nil [1714 1743])
            ("def_op" code nil nil [1744 1771])
            ("def_op" code nil nil [1772 1805])
            ("def_op" code nil nil [1806 1838])
            ("def_op" code nil nil [1839 1873])
            ("def_op" code nil nil [1874 1907])
            ("def_op" code nil nil [1909 1932])
            ("def_op" code nil nil [1933 1956])
            ("def_op" code nil nil [1957 1988])
            ("def_op" code nil nil [1990 2015])
            ("def_op" code nil nil [2016 2046])
            ("def_op" code nil nil [2047 2077])
            ("def_op" code nil nil [2079 2107])
            ("def_op" code nil nil [2108 2134])
            ("def_op" code nil nil [2135 2162])
            ("def_op" code nil nil [2163 2190])
            ("def_op" code nil nil [2191 2218])
            ("def_op" code nil nil [2219 2243])
            ("def_op" code nil nil [2244 2268])
            ("def_op" code nil nil [2269 2292])
            ("def_op" code nil nil [2293 2320])
            ("def_op" code nil nil [2321 2343])
            ("def_op" code nil nil [2344 2377])
            ("def_op" code nil nil [2379 2403])
            ("def_op" code nil nil [2404 2434])
            ("def_op" code nil nil [2435 2459])
            ("def_op" code nil nil [2460 2487])
            ("def_op" code nil nil [2489 2517])
            ("def_op" code nil nil [2518 2546])
            ("def_op" code nil nil [2547 2572])
            ("def_op" code nil nil [2573 2598])
            ("def_op" code nil nil [2599 2623])
            ("def_op" code nil nil [2624 2648])
            ("def_op" code nil nil [2649 2681])
            ("def_op" code nil nil [2682 2715])
            ("def_op" code nil nil [2717 2743])
            ("def_op" code nil nil [2744 2769])
            ("def_op" code nil nil [2770 2801])
            ("def_op" code nil nil [2802 2827])
            ("def_op" code nil nil [2828 2851])
            ("def_op" code nil nil [2852 2877])
            ("def_op" code nil nil [2878 2902])
            ("HAVE_ARGUMENT" variable nil nil [2904 2922])
            ("name_op" code nil nil [2975 3000])
            ("name_op" code nil nil [3028 3054])
            ("def_op" code nil nil [3065 3094])
            ("jrel_op" code nil nil [3121 3144])
            ("def_op" code nil nil [3145 3168])
            ("name_op" code nil nil [3169 3194])
            ("name_op" code nil nil [3222 3248])
            ("name_op" code nil nil [3259 3286])
            ("name_op" code nil nil [3296 3324])
            ("def_op" code nil nil [3333 3358])
            ("hasconst" code nil nil [3387 3407])
            ("name_op" code nil nil [3408 3433])
            ("def_op" code nil nil [3461 3487])
            ("def_op" code nil nil [3517 3542])
            ("def_op" code nil nil [3572 3596])
            ("def_op" code nil nil [3626 3650])
            ("name_op" code nil nil [3694 3719])
            ("def_op" code nil nil [3747 3772])
            ("hascompare" code nil nil [3801 3823])
            ("name_op" code nil nil [3824 3851])
            ("name_op" code nil nil [3877 3904])
            ("jrel_op" code nil nil [3931 3959])
            ("jabs_op" code nil nil [3989 4025])
            ("jabs_op" code nil nil [4070 4105])
            ("jabs_op" code nil nil [4112 4141])
            ("jabs_op" code nil nil [4154 4187])
            ("jabs_op" code nil nil [4196 4228])
            ("name_op" code nil nil [4239 4266])
            ("jabs_op" code nil nil [4293 4322])
            ("jrel_op" code nil nil [4342 4368])
            ("jrel_op" code nil nil [4403 4431])
            ("jrel_op" code nil nil [4440 4469])
            ("def_op" code nil nil [4478 4502])
            ("haslocal" code nil nil [4534 4554])
            ("def_op" code nil nil [4555 4580])
            ("haslocal" code nil nil [4611 4631])
            ("def_op" code nil nil [4632 4658])
            ("haslocal" code nil nil [4688 4708])
            ("name_op" code nil nil [4709 4741])
            ("def_op" code nil nil [4764 4792])
            ("def_op" code nil nil [4837 4865])
            ("def_op" code nil nil [4877 4905])
            ("def_op" code nil nil [4917 4943])
            ("def_op" code nil nil [4967 4994])
            ("hasfree" code nil nil [4995 5014])
            ("def_op" code nil nil [5015 5040])
            ("hasfree" code nil nil [5041 5060])
            ("def_op" code nil nil [5061 5087])
            ("hasfree" code nil nil [5088 5107])
            ("def_op" code nil nil [5108 5135])
            ("hasfree" code nil nil [5136 5155])
            ("def_op" code nil nil [5157 5188])
            ("def_op" code nil nil [5208 5239])
            ("jrel_op" code nil nil [5250 5276])
            ("def_op" code nil nil [5278 5304])
            ("def_op" code nil nil [5305 5327])
            ("def_op" code nil nil [5328 5350])
            ("def_op" code nil nil [5352 5382])
            ("hasfree" code nil nil [5383 5402])
            ("def_op" code nil nil [5404 5431])
            ("EXTENDED_ARG" variable nil nil [5432 5450])
            ("def_op" code nil nil [5452 5484])
            ("def_op" code nil nil [5485 5516])
            ("def_op" code nil nil [5517 5558])
            ("def_op" code nil nil [5559 5592])
            ("def_op" code nil nil [5593 5624])
            ("jrel_op" code nil nil [5626 5658])
            ("def_op" code nil nil [5660 5687])
            ("def_op" code nil nil [5688 5722])
            ("def_op" code nil nil [5723 5750])
            ("def_op" code nil nil [5751 5794])
            ("del" code nil nil [5796 5833]))          
      :file "opcode.py"
      :pointmax 5834
      :fsize 5833
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\" codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

\"\"\"" code nil nil [1 165])
            ("sys" include nil nil [169 189])
            ("builtins" include nil nil [169 189])
            ("__all__" variable nil nil [371 1198])
            ("'\\xef\\xbb\\xbf'" code nil nil [1400 1414])
            ("'\\xff\\xfe'" code nil nil [1465 1475])
            ("'\\xfe\\xff'" code nil nil [1523 1533])
            ("'\\xff\\xfe\\x00\\x00'" code nil nil [1575 1593])
            ("'\\x00\\x00\\xfe\\xff'" code nil nil [1632 1650])
            ("if" code nil nil [1652 1949])
            ("BOM32_LE" variable nil nil [1993 2016])
            ("BOM32_BE" variable nil nil [2017 2040])
            ("BOM64_LE" variable nil nil [2041 2064])
            ("BOM64_BE" variable nil nil [2065 2088])
            ("CodecInfo" type
               (:documentation "Codec details when looking up the codec registry"
                :superclasses ("tuple")
                :members 
                  ( ("_is_text_encoding" variable nil (reparse-symbol indented_block_body) [2518 2542])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [2606 2609])
                        ("encode" variable nil (reparse-symbol function_parameters) [2611 2617])
                        ("decode" variable nil (reparse-symbol function_parameters) [2619 2625])
                        ("streamreader" variable nil (reparse-symbol function_parameters) [2627 2639])
                        ("streamwriter" variable nil (reparse-symbol function_parameters) [2646 2658])
                        ("incrementalencoder" variable nil (reparse-symbol function_parameters) [2673 2691])
                        ("incrementaldecoder" variable nil (reparse-symbol function_parameters) [2698 2716])
                        ("name" variable nil (reparse-symbol function_parameters) [2723 2727])
                        ("_is_text_encoding" variable nil (reparse-symbol function_parameters) [2745 2762]))                      ) (reparse-symbol indented_block_body) [2594 3238])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3256 3260]))                          )
                        (reparse-symbol indented_block_body) [3243 3433]))                  
                :type "class")
                nil [2134 3433])
            ("Codec" type
               (:documentation " Defines the interface for stateless encoders/decoders.

        The .encode()/.decode() methods may use different error
        handling schemes by providing the errors argument. These
        string values are predefined:

         'strict' - raise a ValueError error (or a subclass)
         'ignore' - ignore the character and continue with the next
         'replace' - replace with a suitable replacement character;
                    Python will use the official U+FFFD REPLACEMENT
                    CHARACTER for the builtin Unicode codecs on
                    decoding and '?' on encoding.
         'surrogateescape' - replace with private code points U+DCnn.
         'xmlcharrefreplace' - Replace with the appropriate XML
                               character reference (only for encoding).
         'backslashreplace'  - Replace with backslashed escape sequences.
         'namereplace'       - Replace with \\\\N{...} escape sequences
                               (only for encoding).

        The set of allowed values can be extended via register_error.

    "
                :members 
                  ( ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4556 4560])
                            ("input" variable nil (reparse-symbol function_parameters) [4562 4567])
                            ("errors" variable nil (reparse-symbol function_parameters) [4569 4575]))                          
                        :documentation " Encodes the object input and returns a tuple (output
            object, length consumed).

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamWriter for codecs which have to keep state in order to
            make encoding efficient.

            The encoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        ")
                        (reparse-symbol indented_block_body) [4545 5184])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5200 5204])
                            ("input" variable nil (reparse-symbol function_parameters) [5206 5211])
                            ("errors" variable nil (reparse-symbol function_parameters) [5213 5219]))                          
                        :documentation " Decodes the object input and returns a tuple (output
            object, length consumed).

            input must be an object which provides the bf_getreadbuf
            buffer slot. Python strings, buffer objects and memory
            mapped files are examples of objects providing this slot.

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamReader for codecs which have to keep state in order to
            make decoding efficient.

            The decoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        ")
                        (reparse-symbol indented_block_body) [5189 6035]))                  
                :type "class")
                nil [3434 6035])
            ("IncrementalEncoder" type
               (:documentation "
    An IncrementalEncoder encodes an input in multiple steps. The input can
    be passed piece by piece to the encode() method. The IncrementalEncoder
    remembers the state of the encoding process between calls to encode().
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6362 6612])
                            ("self" variable nil (reparse-symbol indented_block_body) [6621 6641])
                            ("self" variable nil (reparse-symbol indented_block_body) [6650 6666]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6330 6334])
                            ("errors" variable nil (reparse-symbol function_parameters) [6336 6342]))                          
                        :documentation "
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6317 6667])
                    ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6683 6687])
                            ("input" variable nil (reparse-symbol function_parameters) [6689 6694])
                            ("final" variable nil (reparse-symbol function_parameters) [6696 6701]))                          
                        :documentation "
        Encodes input and returns the resulting object.
        ")
                        (reparse-symbol indented_block_body) [6672 6824])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6839 6843]))                          
                        :documentation "
        Resets the encoder to the initial state.
        ")
                        (reparse-symbol indented_block_body) [6829 6919])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6937 6941]))                          
                        :documentation "
        Return the current state of the encoder.
        ")
                        (reparse-symbol indented_block_body) [6924 7034])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7052 7056])
                            ("state" variable nil (reparse-symbol function_parameters) [7058 7063]))                          
                        :documentation "
        Set the current state of the encoder. state must have been
        returned by getstate().
        ")
                        (reparse-symbol indented_block_body) [7039 7189]))                  
                :type "class")
                nil [6036 7189])
            ("BufferedIncrementalEncoder" type
               (:documentation "
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    "
                :superclasses ("IncrementalEncoder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IncrementalEncoder" code nil (reparse-symbol indented_block_body) [7496 7537])
                            ("self" variable nil (reparse-symbol indented_block_body) [7611 7627]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7464 7468])
                            ("errors" variable nil (reparse-symbol function_parameters) [7470 7476]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7451 7628])
                    ("_buffer_encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7652 7656])
                            ("input" variable nil (reparse-symbol function_parameters) [7658 7663])
                            ("errors" variable nil (reparse-symbol function_parameters) [7665 7671])
                            ("final" variable nil (reparse-symbol function_parameters) [7673 7678]))                          )
                        (reparse-symbol indented_block_body) [7633 7839])
                    ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7855 7859])
                            ("input" variable nil (reparse-symbol function_parameters) [7861 7866])
                            ("final" variable nil (reparse-symbol function_parameters) [7868 7873]))                          )
                        (reparse-symbol indented_block_body) [7844 8159])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8174 8178]))                          )
                        (reparse-symbol indented_block_body) [8164 8245])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8263 8267]))                          )
                        (reparse-symbol indented_block_body) [8250 8302])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8320 8324])
                            ("state" variable nil (reparse-symbol function_parameters) [8326 8331]))                          )
                        (reparse-symbol indented_block_body) [8307 8368]))                  
                :type "class")
                nil [7190 8368])
            ("IncrementalDecoder" type
               (:documentation "
    An IncrementalDecoder decodes an input in multiple steps. The input can
    be passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create an IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8695 8944])
                            ("self" variable nil (reparse-symbol indented_block_body) [8953 8973]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8663 8667])
                            ("errors" variable nil (reparse-symbol function_parameters) [8669 8675]))                          
                        :documentation "
        Create an IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8650 8974])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8990 8994])
                            ("input" variable nil (reparse-symbol function_parameters) [8996 9001])
                            ("final" variable nil (reparse-symbol function_parameters) [9003 9008]))                          
                        :documentation "
        Decode input and returns the resulting object.
        ")
                        (reparse-symbol indented_block_body) [8979 9130])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9145 9149]))                          
                        :documentation "
        Reset the decoder to the initial state.
        ")
                        (reparse-symbol indented_block_body) [9135 9224])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9242 9246]))                          
                        :documentation "
        Return the current state of the decoder.

        This must be a (buffered_input, additional_state_info) tuple.
        buffered_input must be a bytes object containing bytes that
        were passed to decode() that have not yet been converted.
        additional_state_info must be a non-negative integer
        representing the state of the decoder WITHOUT yet having
        processed the contents of buffered_input.  In the initial state
        and after reset(), getstate() must return (b\"\", 0).
        ")
                        (reparse-symbol indented_block_body) [9229 9809])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9827 9831])
                            ("state" variable nil (reparse-symbol function_parameters) [9833 9838]))                          
                        :documentation "
        Set the current state of the decoder.

        state must have been returned by getstate().  The effect of
        setstate((b\"\", 0)) must be equivalent to reset().
        ")
                        (reparse-symbol indented_block_body) [9814 10038]))                  
                :type "class")
                nil [8369 10038])
            ("BufferedIncrementalDecoder" type
               (:documentation "
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete
    byte sequences.
    "
                :superclasses ("IncrementalDecoder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IncrementalDecoder" code nil (reparse-symbol indented_block_body) [10327 10368])
                            ("\"\"" code nil (reparse-symbol indented_block_body) [10457 10459]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10295 10299])
                            ("errors" variable nil (reparse-symbol function_parameters) [10301 10307]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10282 10460])
                    ("_buffer_decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10484 10488])
                            ("input" variable nil (reparse-symbol function_parameters) [10490 10495])
                            ("errors" variable nil (reparse-symbol function_parameters) [10497 10503])
                            ("final" variable nil (reparse-symbol function_parameters) [10505 10510]))                          )
                        (reparse-symbol indented_block_body) [10465 10671])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10687 10691])
                            ("input" variable nil (reparse-symbol function_parameters) [10693 10698])
                            ("final" variable nil (reparse-symbol function_parameters) [10700 10705]))                          )
                        (reparse-symbol indented_block_body) [10676 10991])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11006 11010]))                          )
                        (reparse-symbol indented_block_body) [10996 11078])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11096 11100]))                          )
                        (reparse-symbol indented_block_body) [11083 11179])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11197 11201])
                            ("state" variable nil (reparse-symbol function_parameters) [11203 11208]))                          )
                        (reparse-symbol indented_block_body) [11184 11281]))                  
                :type "class")
                nil [10039 11281])
            ("StreamWriter" type
               (:superclasses ("Codec")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamWriter instance.

            stream must be a file-like object open for writing.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences.
             'namereplace'       - Replace with \\\\N{...} escape sequences.

            The set of allowed parameter values can be extended via
            register_error.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11583 12477])
                            ("self" variable nil (reparse-symbol indented_block_body) [12486 12506])
                            ("self" variable nil (reparse-symbol indented_block_body) [12515 12535]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11542 11546])
                            ("stream" variable nil (reparse-symbol function_parameters) [11548 11554])
                            ("errors" variable nil (reparse-symbol function_parameters) [11556 11562]))                          
                        :documentation " Creates a StreamWriter instance.

            stream must be a file-like object open for writing.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences.
             'namereplace'       - Replace with \\\\N{...} escape sequences.

            The set of allowed parameter values can be extended via
            register_error.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11529 12536])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12551 12555])
                            ("object" variable nil (reparse-symbol function_parameters) [12557 12563]))                          
                        :documentation " Writes the object's contents encoded to self.stream.
        ")
                        (reparse-symbol indented_block_body) [12541 12734])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12754 12758])
                            ("list" variable nil (reparse-symbol function_parameters) [12760 12764]))                          
                        :documentation " Writes the concatenated list of strings to the stream
            using .write().
        ")
                        (reparse-symbol indented_block_body) [12739 12908])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12923 12927]))                          
                        :documentation " Flushes and resets the codec buffers used for keeping state.

            Calling this method should ensure that the data on the
            output is put into a clean state, that allows appending
            of new fresh data without having to rescan the whole
            stream to recover state.

        ")
                        (reparse-symbol indented_block_body) [12913 13268])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13282 13286])
                            ("offset" variable nil (reparse-symbol function_parameters) [13288 13294])
                            ("whence" variable nil (reparse-symbol function_parameters) [13296 13302]))                          )
                        (reparse-symbol indented_block_body) [13273 13413])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13434 13438])
                            ("name" variable nil (reparse-symbol function_parameters) [13440 13444])
                            ("getattr" variable nil (reparse-symbol function_parameters) [13466 13473]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [13418 13605])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13624 13628]))                          )
                        (reparse-symbol indented_block_body) [13610 13651])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13669 13673])
                            ("type" variable nil (reparse-symbol function_parameters) [13675 13679])
                            ("value" variable nil (reparse-symbol function_parameters) [13681 13686])
                            ("tb" variable nil (reparse-symbol function_parameters) [13688 13690]))                          )
                        (reparse-symbol indented_block_body) [13656 13721]))                  
                :type "class")
                nil [11497 13721])
            ("StreamReader" type
               (:superclasses ("Codec")
                :members 
                  ( ("charbuffertype" variable nil (reparse-symbol indented_block_body) [13759 13779])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamReader instance.

            stream must be a file-like object open for reading.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'backslashreplace' - Replace with backslashed escape sequences;

            The set of allowed parameter values can be extended via
            register_error.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13839 14498])
                            ("self" variable nil (reparse-symbol indented_block_body) [14507 14527])
                            ("self" variable nil (reparse-symbol indented_block_body) [14536 14556])
                            ("\"\"" code nil (reparse-symbol indented_block_body) [14584 14586])
                            ("self" variable nil (reparse-symbol indented_block_body) [14595 14641])
                            ("self" variable nil (reparse-symbol indented_block_body) [14650 14690])
                            ("self" variable nil (reparse-symbol indented_block_body) [14699 14721]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13798 13802])
                            ("stream" variable nil (reparse-symbol function_parameters) [13804 13810])
                            ("errors" variable nil (reparse-symbol function_parameters) [13812 13818]))                          
                        :documentation " Creates a StreamReader instance.

            stream must be a file-like object open for reading.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'backslashreplace' - Replace with backslashed escape sequences;

            The set of allowed parameter values can be extended via
            register_error.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13785 14722])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14738 14742])
                            ("input" variable nil (reparse-symbol function_parameters) [14744 14749])
                            ("errors" variable nil (reparse-symbol function_parameters) [14751 14757]))                          )
                        (reparse-symbol indented_block_body) [14727 14803])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14817 14821])
                            ("size" variable nil (reparse-symbol function_parameters) [14823 14827])
                            ("chars" variable nil (reparse-symbol function_parameters) [14832 14837])
                            ("firstline" variable nil (reparse-symbol function_parameters) [14842 14851]))                          
                        :documentation " Decodes data from the stream self.stream and returns the
            resulting object.

            chars indicates the number of decoded code points or bytes to
            return. read() will never return more data than requested,
            but it might return less, if there is not enough available.

            size indicates the approximate maximum number of decoded
            bytes or code points to read for decoding. The decoder
            can modify this setting as appropriate. The default value
            -1 indicates to read and decode as much as possible.  size
            is intended to prevent having to decode huge files in one
            step.

            If firstline is true, and a UnicodeDecodeError happens
            after the first line terminator in the input only the first line
            will be returned, the rest of the input will be kept until the
            next call to read().

            The method should use a greedy read strategy, meaning that
            it should read as much data as is allowed within the
            definition of the encoding and the given size, e.g.  if
            optional encoding endings or state markers are available
            on the stream, these should be read too.
        ")
                        (reparse-symbol indented_block_body) [14808 18144])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18162 18166])
                            ("size" variable nil (reparse-symbol function_parameters) [18168 18172])
                            ("keepends" variable nil (reparse-symbol function_parameters) [18179 18187]))                          
                        :documentation " Read one line from the input stream and return the
            decoded data.

            size, if given, is passed as size argument to the
            read() method.

        ")
                        (reparse-symbol indented_block_body) [18149 21320])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21339 21343])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [21345 21353])
                            ("keepends" variable nil (reparse-symbol function_parameters) [21360 21368]))                          
                        :documentation " Read all lines available on the input stream
            and return them as a list.

            Line breaks are implemented using the codec's decoder
            method and are included in the list entries.

            sizehint, if given, is ignored since there is no efficient
            way to finding the true end-of-line.

        ")
                        (reparse-symbol indented_block_body) [21325 21799])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21814 21818]))                          
                        :documentation " Resets the codec buffers used for keeping state.

            Note that no stream repositioning should take place.
            This method is primarily intended to be able to recover
            from decoding errors.

        ")
                        (reparse-symbol indented_block_body) [21804 22174])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22188 22192])
                            ("offset" variable nil (reparse-symbol function_parameters) [22194 22200])
                            ("whence" variable nil (reparse-symbol function_parameters) [22202 22208]))                          
                        :documentation " Set the input stream's current position.

            Resets the codec buffers used for keeping state.
        ")
                        (reparse-symbol indented_block_body) [22179 22402])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22420 22424]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [22407 22595])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22613 22617]))                          )
                        (reparse-symbol indented_block_body) [22600 22640])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22661 22665])
                            ("name" variable nil (reparse-symbol function_parameters) [22667 22671])
                            ("getattr" variable nil (reparse-symbol function_parameters) [22693 22700]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [22645 22832])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22851 22855]))                          )
                        (reparse-symbol indented_block_body) [22837 22878])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22896 22900])
                            ("type" variable nil (reparse-symbol function_parameters) [22902 22906])
                            ("value" variable nil (reparse-symbol function_parameters) [22908 22913])
                            ("tb" variable nil (reparse-symbol function_parameters) [22915 22917]))                          )
                        (reparse-symbol indented_block_body) [22883 22948]))                  
                :type "class")
                nil [13727 22948])
            ("StreamReaderWriter" type
               (:documentation " StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    "
                :members 
                  ( ("encoding" variable nil (reparse-symbol indented_block_body) [23310 23330])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        \"\"\"" code nil (reparse-symbol indented_block_body) [23406 23750])
                            ("self" variable nil (reparse-symbol indented_block_body) [23759 23779])
                            ("self" variable nil (reparse-symbol indented_block_body) [23788 23824])
                            ("self" variable nil (reparse-symbol indented_block_body) [23833 23869])
                            ("self" variable nil (reparse-symbol indented_block_body) [23878 23898]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23349 23353])
                            ("stream" variable nil (reparse-symbol function_parameters) [23355 23361])
                            ("Reader" variable nil (reparse-symbol function_parameters) [23363 23369])
                            ("Writer" variable nil (reparse-symbol function_parameters) [23371 23377])
                            ("errors" variable nil (reparse-symbol function_parameters) [23379 23385]))                          
                        :documentation " Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23336 23899])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23913 23917])
                            ("size" variable nil (reparse-symbol function_parameters) [23919 23923]))                          )
                        (reparse-symbol indented_block_body) [23904 23968])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23986 23990])
                            ("size" variable nil (reparse-symbol function_parameters) [23992 23996]))                          )
                        (reparse-symbol indented_block_body) [23973 24047])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24066 24070])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [24072 24080]))                          )
                        (reparse-symbol indented_block_body) [24052 24136])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24154 24158]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [24141 24262])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24280 24284]))                          )
                        (reparse-symbol indented_block_body) [24267 24307])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24322 24326])
                            ("data" variable nil (reparse-symbol function_parameters) [24328 24332]))                          )
                        (reparse-symbol indented_block_body) [24312 24375])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24395 24399])
                            ("list" variable nil (reparse-symbol function_parameters) [24401 24405]))                          )
                        (reparse-symbol indented_block_body) [24380 24453])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24468 24472]))                          )
                        (reparse-symbol indented_block_body) [24458 24532])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24546 24550])
                            ("offset" variable nil (reparse-symbol function_parameters) [24552 24558])
                            ("whence" variable nil (reparse-symbol function_parameters) [24560 24566]))                          )
                        (reparse-symbol indented_block_body) [24537 24712])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24733 24737])
                            ("name" variable nil (reparse-symbol function_parameters) [24739 24743])
                            ("getattr" variable nil (reparse-symbol function_parameters) [24765 24772]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [24717 24904])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24993 24997]))                          )
                        (reparse-symbol indented_block_body) [24979 25020])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25038 25042])
                            ("type" variable nil (reparse-symbol function_parameters) [25044 25048])
                            ("value" variable nil (reparse-symbol function_parameters) [25050 25055])
                            ("tb" variable nil (reparse-symbol function_parameters) [25057 25059]))                          )
                        (reparse-symbol indented_block_body) [25025 25090]))                  
                :type "class")
                nil [22954 25090])
            ("StreamRecoder" type
               (:documentation " StreamRecoder instances translate data from one encoding to another.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the StreamRecoder is first decoded into an
        intermediate format (depending on the \"decode\" codec) and then
        written to the underlying stream using an instance of the provided
        Writer class.

        In the other direction, data is read from the underlying stream using
        a Reader instance and then encoded and returned to the caller.

    "
                :members 
                  ( ("data_encoding" variable nil (reparse-symbol indented_block_body) [25768 25793])
                    ("file_encoding" variable nil (reparse-symbol indented_block_body) [25798 25823])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            data visible to .read() and .write()) while Reader and Writer
            work on the backend (the data in stream).

            You can use these objects to do transparent
            transcodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode and decode must adhere to the Codec interface; Reader and
            Writer must be factory functions or classes providing the
            StreamReader and StreamWriter interfaces resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        \"\"\"" code nil (reparse-symbol indented_block_body) [25932 26683])
                            ("self" variable nil (reparse-symbol indented_block_body) [26692 26712])
                            ("self" variable nil (reparse-symbol indented_block_body) [26721 26741])
                            ("self" variable nil (reparse-symbol indented_block_body) [26750 26770])
                            ("self" variable nil (reparse-symbol indented_block_body) [26779 26815])
                            ("self" variable nil (reparse-symbol indented_block_body) [26824 26860])
                            ("self" variable nil (reparse-symbol indented_block_body) [26869 26889]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25842 25846])
                            ("stream" variable nil (reparse-symbol function_parameters) [25848 25854])
                            ("encode" variable nil (reparse-symbol function_parameters) [25856 25862])
                            ("decode" variable nil (reparse-symbol function_parameters) [25864 25870])
                            ("Reader" variable nil (reparse-symbol function_parameters) [25872 25878])
                            ("Writer" variable nil (reparse-symbol function_parameters) [25880 25886])
                            ("errors" variable nil (reparse-symbol function_parameters) [25905 25911]))                          
                        :documentation " Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            data visible to .read() and .write()) while Reader and Writer
            work on the backend (the data in stream).

            You can use these objects to do transparent
            transcodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode and decode must adhere to the Codec interface; Reader and
            Writer must be factory functions or classes providing the
            StreamReader and StreamWriter interfaces resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25829 26890])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26904 26908])
                            ("size" variable nil (reparse-symbol function_parameters) [26910 26914]))                          )
                        (reparse-symbol indented_block_body) [26895 27039])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27057 27061])
                            ("size" variable nil (reparse-symbol function_parameters) [27063 27067]))                          )
                        (reparse-symbol indented_block_body) [27044 27283])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27302 27306])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [27308 27316]))                          )
                        (reparse-symbol indented_block_body) [27288 27465])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27483 27487]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [27470 27671])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27689 27693]))                          )
                        (reparse-symbol indented_block_body) [27676 27716])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27731 27735])
                            ("data" variable nil (reparse-symbol function_parameters) [27737 27741]))                          )
                        (reparse-symbol indented_block_body) [27721 27844])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27864 27868])
                            ("list" variable nil (reparse-symbol function_parameters) [27870 27874]))                          )
                        (reparse-symbol indented_block_body) [27849 28006])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28021 28025]))                          )
                        (reparse-symbol indented_block_body) [28011 28085])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28106 28110])
                            ("name" variable nil (reparse-symbol function_parameters) [28112 28116])
                            ("getattr" variable nil (reparse-symbol function_parameters) [28138 28145]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [28090 28277])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28296 28300]))                          )
                        (reparse-symbol indented_block_body) [28282 28323])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28341 28345])
                            ("type" variable nil (reparse-symbol function_parameters) [28347 28351])
                            ("value" variable nil (reparse-symbol function_parameters) [28353 28358])
                            ("tb" variable nil (reparse-symbol function_parameters) [28360 28362]))                          )
                        (reparse-symbol indented_block_body) [28328 28393]))                  
                :type "class")
                nil [25096 28393])
            ("open" function
               (:documentation " Open an encoded file using the given mode and return
        a wrapped version providing transparent encoding/decoding.

        Note: The wrapped version will only accept the object format
        defined by the codecs, i.e. Unicode objects for most builtin
        codecs. Output is also codec dependent and will usually be
        Unicode as well.

        Underlying encoded files are always opened in binary mode.
        The default file mode is 'r', meaning to open the file in read mode.

        encoding specifies the encoding which is to be used for the
        file.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        buffering has the same meaning as for the builtin open() API.
        It defaults to line buffered.

        The returned wrapped file object provides an extra attribute
        .encoding which allows querying the used encoding. This
        attribute is only available if an encoding was specified as
        parameter.

    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [28418 28426])
                    ("mode" variable nil (reparse-symbol function_parameters) [28428 28432])
                    ("encoding" variable nil (reparse-symbol function_parameters) [28438 28446])
                    ("errors" variable nil (reparse-symbol function_parameters) [28453 28459])
                    ("buffering" variable nil (reparse-symbol function_parameters) [28470 28479]))                  )
                nil [28409 30013])
            ("EncodedFile" function
               (:documentation " Return a wrapped version of file which provides transparent
        encoding translation.

        Data written to the wrapped file is decoded according
        to the given data_encoding and then encoded to the underlying
        file using file_encoding. The intermediate data type
        will usually be Unicode but depends on the specified codecs.

        Bytes read from the file are decoded using file_encoding and then
        passed back to the caller encoded using data_encoding.

        If file_encoding is not given, it defaults to data_encoding.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        The returned wrapped file object provides two extra attributes
        .data_encoding and .file_encoding which reflect the given
        parameters of the same name. The attributes can be used for
        introspection by Python programs.

    "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [30030 30034])
                    ("data_encoding" variable nil (reparse-symbol function_parameters) [30036 30049])
                    ("file_encoding" variable nil (reparse-symbol function_parameters) [30051 30064])
                    ("errors" variable nil (reparse-symbol function_parameters) [30071 30077]))                  )
                nil [30014 31510])
            ("getencoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its encoder function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31556 31564]))                  )
                nil [31541 31772])
            ("getdecoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its decoder function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31788 31796]))                  )
                nil [31773 32004])
            ("getincrementalencoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its IncrementalEncoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental encoder.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [32031 32039]))                  )
                nil [32005 32430])
            ("getincrementaldecoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its IncrementalDecoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental decoder.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [32457 32465]))                  )
                nil [32431 32856])
            ("getreader" function
               (:documentation " Lookup up the codec for the given encoding and return
        its StreamReader class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [32871 32879]))                  )
                nil [32857 33115])
            ("getwriter" function
               (:documentation " Lookup up the codec for the given encoding and return
        its StreamWriter class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [33130 33138]))                  )
                nil [33116 33374])
            ("iterencode" function
               (:documentation "
    Encoding iterator.

    Encodes the input strings from the iterator using an IncrementalEncoder.

    errors and kwargs are passed through to the IncrementalEncoder
    constructor.
    "
                :arguments 
                  ( ("iterator" variable nil (reparse-symbol function_parameters) [33390 33398])
                    ("encoding" variable nil (reparse-symbol function_parameters) [33400 33408])
                    ("errors" variable nil (reparse-symbol function_parameters) [33410 33416])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [33427 33435]))                  )
                nil [33375 33888])
            ("iterdecode" function
               (:documentation "
    Decoding iterator.

    Decodes the input strings from the iterator using an IncrementalDecoder.

    errors and kwargs are passed through to the IncrementalDecoder
    constructor.
    "
                :arguments 
                  ( ("iterator" variable nil (reparse-symbol function_parameters) [33904 33912])
                    ("encoding" variable nil (reparse-symbol function_parameters) [33914 33922])
                    ("errors" variable nil (reparse-symbol function_parameters) [33924 33930])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [33941 33949]))                  )
                nil [33889 34403])
            ("make_identity_dict" function
               (:documentation " make_identity_dict(rng) -> dict

        Return a dictionary where elements of the rng sequence are
        mapped to themselves.

    "
                :arguments 
                  ( ("rng" variable nil (reparse-symbol function_parameters) [34465 34468]))                  )
                nil [34442 34649])
            ("make_encoding_map" function
               (:documentation " Creates an encoding map from a decoding map.

        If a target mapping in the decoding map occurs multiple
        times, then that target is mapped to None (undefined mapping),
        causing an exception when encountered by the charmap codec
        during translation.

        One example where this happens is cp875.py which decodes
        multiple character to \\\\u001a.

    "
                :arguments 
                  ( ("decoding_map" variable nil (reparse-symbol function_parameters) [34672 34684]))                  )
                nil [34650 35229])
            ("try" code nil nil [35250 35831])
            ("_false" variable nil nil [35909 35919])
            ("if" code nil nil [35920 35952])
            ("if" code nil nil [35964 36232]))          
      :file "codecs.py"
      :pointmax 36232
      :fsize 36231
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 17190 . 17513) (NEWLINE 17189 . 17190) (COLON 17188 . 17189) (TRY 17067 . 17070) (AS 17182 . 17184) (MULT 2742 . 2743) (COMMA 2743 . 2744) (INDENT_BLOCK 301 . 370) (COLON 299 . 300) (TRY 243 . 246) (AS 293 . 295)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
\"\"\"" code nil nil [1 159])
            ("os" include nil nil [160 169])
            ("stat" include nil nil [170 181])
            ("__all__" variable nil nil [183 347])
            ("exists" function
               (:documentation "Test whether a path exists.  Returns False for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [456 460]))                  )
                nil [445 630])
            ("isfile" function
               (:documentation "Test whether a path is a regular file"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [768 772]))                  )
                nil [757 936])
            ("isdir" function
               (:documentation "Return true if the pathname refers to an existing directory."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1098 1099]))                  )
                nil [1088 1283])
            ("getsize" function
               (:documentation "Return the size of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1297 1305]))                  )
                nil [1285 1405])
            ("getmtime" function
               (:documentation "Return the last modification time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1420 1428]))                  )
                nil [1407 1547])
            ("getatime" function
               (:documentation "Return the last access time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1562 1570]))                  )
                nil [1549 1683])
            ("getctime" function
               (:documentation "Return the metadata change time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1698 1706]))                  )
                nil [1685 1823])
            ("commonprefix" function (:arguments 
              ( ("m" variable nil (reparse-symbol function_parameters) [1892 1893]))              ) nil [1875 2516])
            ("samestat" function
               (:documentation "Test whether two stat buffers reference the same file"
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [2618 2620])
                    ("s2" variable nil (reparse-symbol function_parameters) [2622 2624]))                  )
                nil [2605 2766])
            ("samefile" function
               (:documentation "Test whether two pathnames reference the same actual file"
                :arguments 
                  ( ("f1" variable nil (reparse-symbol function_parameters) [2835 2837])
                    ("f2" variable nil (reparse-symbol function_parameters) [2839 2841]))                  )
                nil [2822 2982])
            ("sameopenfile" function
               (:documentation "Test whether two open file objects reference the same file"
                :arguments 
                  ( ("fp1" variable nil (reparse-symbol function_parameters) [3102 3105])
                    ("fp2" variable nil (reparse-symbol function_parameters) [3107 3110]))                  )
                nil [3085 3256])
            ("_splitext" function
               (:documentation "Split the extension from a pathname.

    Extension is everything from the last dot to the end, ignoring
    leading dots.  Returns \"(root, ext)\"; ext may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3557 3558])
                    ("sep" variable nil (reparse-symbol function_parameters) [3560 3563])
                    ("altsep" variable nil (reparse-symbol function_parameters) [3565 3571])
                    ("extsep" variable nil (reparse-symbol function_parameters) [3573 3579]))                  )
                nil [3543 4275])
            ("_check_arg_types" function (:arguments 
              ( ("funcname" variable nil (reparse-symbol function_parameters) [4297 4305])
                ("args" variable nil (reparse-symbol function_parameters) [4307 4312]))              ) nil [4276 4757]))          
      :file "genericpath.py"
      :pointmax 4757
      :fsize 4756
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((RAISE 4681 . 4686) (FROM 4747 . 4751) (NEWLINE 4756 . 4757) (RAISE 4510 . 4515) (FROM 4635 . 4639) (NEWLINE 4644 . 4645)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Guess the MIME type of a file.

This module defines two useful functions:

guess_type(url, strict=True) -- guess the MIME type and encoding of a URL.

guess_extension(type, strict=True) -- guess the extension for a given MIME type.

It also contains the following, for tuning the behavior:

Data:

knownfiles -- list of files to parse
inited -- flag set when init() has been called
suffix_map -- dictionary mapping suffixes to suffixes
encodings_map -- dictionary mapping suffixes to encodings
types_map -- dictionary mapping suffixes to types

Functions:

init([files]) -- parse a list of files, default knownfiles (on Windows, the
  default values are taken from the registry)
read_mime_types(file) -- parse one file, return a dictionary or None
\"\"\"" code nil nil [1 755])
            ("os" include nil nil [757 766])
            ("sys" include nil nil [767 777])
            ("posixpath" include nil nil [778 794])
            ("urllib.parse" include nil nil [795 814])
            ("try" code nil nil [815 888])
            ("__all__" variable nil nil [889 1110])
            ("knownfiles" variable nil nil [1112 1597])
            ("inited" variable nil nil [1599 1613])
            ("_db" variable nil nil [1614 1624])
            ("MimeTypes" type
               (:documentation "MIME-types datastore.

    This datastore can handle information from mime.types-style files
    and supports basic determination of MIME type from a filename or
    URL, and can guess a reasonable extension given a MIME type.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1946 1980])
                            ("self" variable nil (reparse-symbol indented_block_body) [1988 2029])
                            ("self" variable nil (reparse-symbol indented_block_body) [2038 2073])
                            ("self" variable nil (reparse-symbol indented_block_body) [2082 2107])
                            ("self" variable nil (reparse-symbol indented_block_body) [2148 2177])
                            ("for" code nil (reparse-symbol indented_block_body) [2186 2267])
                            ("for" code nil (reparse-symbol indented_block_body) [2275 2360])
                            ("for" code nil (reparse-symbol indented_block_body) [2368 2427]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1904 1908])
                            ("filenames" variable nil (reparse-symbol function_parameters) [1910 1919])
                            ("strict" variable nil (reparse-symbol function_parameters) [1924 1930]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1891 2427])
                    ("add_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2445 2449])
                            ("type" variable nil (reparse-symbol function_parameters) [2451 2455])
                            ("ext" variable nil (reparse-symbol function_parameters) [2457 2460])
                            ("strict" variable nil (reparse-symbol function_parameters) [2462 2468]))                          
                        :documentation "Add a mapping between a type and an extension.

        When the extension is already known, the new
        type will replace the old one. When the type
        is already known the extension will be added
        to the list of known extensions.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [2432 3047])
                    ("guess_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3067 3071])
                            ("url" variable nil (reparse-symbol function_parameters) [3073 3076])
                            ("strict" variable nil (reparse-symbol function_parameters) [3078 3084]))                          
                        :documentation "Guess the type of a file based on its URL.

        Return value is a tuple (type, encoding) where type is None if
        the type can't be guessed (no or unknown suffix) or a string
        of the form type/subtype, usable for a MIME Content-type
        header; and encoding is None for no encoding or the name of
        the program used to encode (e.g. compress or gzip).  The
        mappings are table driven.  Encoding suffixes are case
        sensitive; type suffixes are first tried case sensitive, then
        case insensitive.

        The suffixes .tgz, .taz and .tz (case sensitive!) are all
        mapped to '.tar.gz'.  (This is table-driven too, using the
        dictionary suffix_map.)

        Optional `strict' argument when False adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [3052 5609])
                    ("guess_all_extensions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5639 5643])
                            ("type" variable nil (reparse-symbol function_parameters) [5645 5649])
                            ("strict" variable nil (reparse-symbol function_parameters) [5651 5657]))                          
                        :documentation "Guess the extensions for a file based on its MIME type.

        Return value is a list of strings giving the possible filename
        extensions, including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data stream,
        but would be mapped to the MIME type `type' by guess_type().

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [5614 6433])
                    ("guess_extension" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6458 6462])
                            ("type" variable nil (reparse-symbol function_parameters) [6464 6468])
                            ("strict" variable nil (reparse-symbol function_parameters) [6470 6476]))                          
                        :documentation "Guess the extension for a file based on its MIME type.

        Return value is a string giving a filename extension,
        including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data
        stream, but would be mapped to the MIME type `type' by
        guess_type().  If no extension can be guessed for `type', None
        is returned.

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [6438 7163])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7177 7181])
                            ("filename" variable nil (reparse-symbol function_parameters) [7183 7191])
                            ("strict" variable nil (reparse-symbol function_parameters) [7193 7199]))                          
                        :documentation "
        Read a single mime.types-format file, specified by pathname.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [7168 7526])
                    ("readfp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7542 7546])
                            ("fp" variable nil (reparse-symbol function_parameters) [7548 7550])
                            ("strict" variable nil (reparse-symbol function_parameters) [7552 7558]))                          
                        :documentation "
        Read a single mime.types-format file.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [7531 8232])
                    ("read_windows_registry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8263 8267])
                            ("strict" variable nil (reparse-symbol function_parameters) [8269 8275]))                          
                        :documentation "
        Load the MIME types database from Windows registry.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [8237 9696]))                  
                :type "class")
                nil [1627 9696])
            ("guess_type" function
               (:documentation "Guess the type of a file based on its URL.

    Return value is a tuple (type, encoding) where type is None if the
    type can't be guessed (no or unknown suffix) or a string of the
    form type/subtype, usable for a MIME Content-type header; and
    encoding is None for no encoding or the name of the program used
    to encode (e.g. compress or gzip).  The mappings are table
    driven.  Encoding suffixes are case sensitive; type suffixes are
    first tried case sensitive, then case insensitive.

    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped
    to \".tar.gz\".  (This is table-driven too, using the dictionary
    suffix_map).

    Optional `strict' argument when false adds a bunch of commonly found, but
    non-standard types.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [9712 9715])
                    ("strict" variable nil (reparse-symbol function_parameters) [9717 9723]))                  )
                nil [9697 10582])
            ("guess_all_extensions" function
               (:documentation "Guess the extensions for a file based on its MIME type.

    Return value is a list of strings giving the possible filename
    extensions, including the leading dot ('.').  The extension is not
    guaranteed to have been associated with any particular data
    stream, but would be mapped to the MIME type `type' by
    guess_type().  If no extension can be guessed for `type', None
    is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [10609 10613])
                    ("strict" variable nil (reparse-symbol function_parameters) [10615 10621]))                  )
                nil [10584 11234])
            ("guess_extension" function
               (:documentation "Guess the extension for a file based on its MIME type.

    Return value is a string giving a filename extension, including the
    leading dot ('.').  The extension is not guaranteed to have been
    associated with any particular data stream, but would be mapped to the
    MIME type `type' by guess_type().  If no extension can be guessed for
    `type', None is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [11255 11259])
                    ("strict" variable nil (reparse-symbol function_parameters) [11261 11267]))                  )
                nil [11235 11849])
            ("add_type" function
               (:documentation "Add a mapping between a type and an extension.

    When the extension is already known, the new
    type will replace the old one. When the type
    is already known the extension will be added
    to the list of known extensions.

    If strict is true, information will be added to
    list of standard types, else to the list of non-standard
    types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [11863 11867])
                    ("ext" variable nil (reparse-symbol function_parameters) [11869 11872])
                    ("strict" variable nil (reparse-symbol function_parameters) [11874 11880]))                  )
                nil [11850 12338])
            ("init" function (:arguments 
              ( ("files" variable nil (reparse-symbol function_parameters) [12349 12354]))              ) nil [12340 12956])
            ("read_mime_types" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [12978 12982]))              ) nil [12958 13155])
            ("_default_mime_types" function nil nil [13157 19606])
            ("_default_mime_types" code nil nil [19608 19629])
            ("if" code nil nil [19632 20957]))          
      :file "mimetypes.py"
      :pointmax 20957
      :fsize 20956
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 20275 . 20297) (NEWLINE 20274 . 20275) (COLON 20273 . 20274) (TRY 20113 . 20116) (AS 20267 . 20269)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\" This module tries to retrieve as much platform-identifying data as
    possible. It makes this information available via function APIs.

    If called from the command line, it prints the platform
    information concatenated as single string to stdout. The output
    format is useable as part of a filename.

\"\"\"" code nil nil [25 343])
            ("__copyright__" variable nil nil [4430 5481])
            ("__version__" variable nil nil [5483 5504])
            ("collections" include nil nil [5506 5524])
            ("subprocess" include nil nil [5525 5555])
            ("re" include nil nil [5525 5555])
            ("os" include nil nil [5525 5555])
            ("sys" include nil nil [5525 5555])
            ("warnings" include nil nil [5557 5572])
            ("try" code nil nil [5643 5988])
            ("_UNIXCONFDIR" variable nil nil [6113 6134])
            ("_libc_search" variable nil nil [6164 6392])
            ("libc_ver" function
               (:documentation " Tries to determine the libc version that the file executable
        (which defaults to the Python interpreter) is linked against.

        Returns a tuple of strings (lib,version) which default to the
        given parameters in case the lookup fails.

        Note that the function has intimate knowledge of how different
        libc versions add symbols to the executable and thus is probably
        only useable for executables compiled using gcc.

        The file is read and scanned in chunks of chunksize bytes.

    "
                :arguments 
                  ( ("executable" variable nil (reparse-symbol function_parameters) [6407 6417])
                    ("lib" variable nil (reparse-symbol function_parameters) [6434 6437])
                    ("version" variable nil (reparse-symbol function_parameters) [6442 6449])
                    ("chunksize" variable nil (reparse-symbol function_parameters) [6468 6477]))                  )
                nil [6394 8531])
            ("_dist_try_harder" function
               (:documentation " Tries some special tricks to get the distribution
        information in case the default method fails.

        Currently supports older SuSE Linux, Caldera OpenLinux and
        Slackware Linux distributions.

    "
                :arguments 
                  ( ("distname" variable nil (reparse-symbol function_parameters) [8553 8561])
                    ("version" variable nil (reparse-symbol function_parameters) [8563 8570])
                    ("id" variable nil (reparse-symbol function_parameters) [8572 8574]))                  )
                nil [8532 10289])
            ("_release_filename" variable nil nil [10290 10361])
            ("_lsb_release_version" variable nil nil [10362 10563])
            ("_release_version" variable nil nil [10564 10759])
            ("_supported_dists" variable nil nil [10994 11190])
            ("_parse_release_file" function (:arguments 
              ( ("firstline" variable nil (reparse-symbol function_parameters) [11216 11225]))              ) nil [11192 11943])
            ("linux_distribution" function (:arguments 
              ( ("distname" variable nil (reparse-symbol function_parameters) [11967 11975])
                ("version" variable nil (reparse-symbol function_parameters) [11980 11987])
                ("id" variable nil (reparse-symbol function_parameters) [11992 11994])
                ("supported_dists" variable nil (reparse-symbol function_parameters) [12023 12038])
                ("full_distribution_name" variable nil (reparse-symbol function_parameters) [12080 12102]))              ) nil [11944 12407])
            ("_linux_distribution" function
               (:documentation " Tries to determine the name of the Linux OS distribution name.

        The function first looks for a distribution release file in
        /etc and then reverts to _dist_try_harder() in case no
        suitable files are found.

        supported_dists may be given to define the set of Linux
        distributions to look for. It defaults to a list of currently
        supported Linux distributions identified by their release file
        name.

        If full_distribution_name is true (default), the full
        distribution read from the OS is returned. Otherwise the short
        name taken from supported_dists is used.

        Returns a tuple (distname, version, id) which default to the
        args given as parameters.

    "
                :arguments 
                  ( ("distname" variable nil (reparse-symbol function_parameters) [12432 12440])
                    ("version" variable nil (reparse-symbol function_parameters) [12442 12449])
                    ("id" variable nil (reparse-symbol function_parameters) [12451 12453])
                    ("supported_dists" variable nil (reparse-symbol function_parameters) [12455 12470])
                    ("full_distribution_name" variable nil (reparse-symbol function_parameters) [12496 12518]))                  )
                nil [12408 14152])
            ("dist" function
               (:documentation " Tries to determine the name of the Linux OS distribution name.

        The function first looks for a distribution release file in
        /etc and then reverts to _dist_try_harder() in case no
        suitable files are found.

        Returns a tuple (distname, version, id) which default to the
        args given as parameters.

    "
                :arguments 
                  ( ("distname" variable nil (reparse-symbol function_parameters) [14202 14210])
                    ("version" variable nil (reparse-symbol function_parameters) [14215 14222])
                    ("id" variable nil (reparse-symbol function_parameters) [14227 14229])
                    ("supported_dists" variable nil (reparse-symbol function_parameters) [14244 14259]))                  )
                nil [14193 14979])
            ("popen" function
               (:documentation " Portable popen() interface.
    "
                :arguments 
                  ( ("cmd" variable nil (reparse-symbol function_parameters) [14990 14993])
                    ("mode" variable nil (reparse-symbol function_parameters) [14995 14999])
                    ("bufsize" variable nil (reparse-symbol function_parameters) [15005 15012]))                  )
                nil [14980 15199])
            ("_norm_version" function
               (:documentation " Normalize the version and build strings and return a single
        version string using the format major.minor.build (or patchlevel).
    "
                :arguments 
                  ( ("version" variable nil (reparse-symbol function_parameters) [15218 15225])
                    ("build" variable nil (reparse-symbol function_parameters) [15227 15232]))                  )
                nil [15200 15638])
            ("_ver_output" variable nil nil [15639 15765])
            ("_syscmd_ver" function
               (:documentation " Tries to figure out the OS version used and returns
        a tuple (system, release, version).

        It uses the \"ver\" shell command for this which is known
        to exists on Windows, DOS. XXX Others too ?

        In case this fails, the given parameters are used as
        defaults.

    "
                :arguments 
                  ( ("system" variable nil (reparse-symbol function_parameters) [16080 16086])
                    ("release" variable nil (reparse-symbol function_parameters) [16091 16098])
                    ("version" variable nil (reparse-symbol function_parameters) [16103 16110])
                    ("supported_platforms" variable nil (reparse-symbol function_parameters) [16131 16150]))                  )
                nil [16064 17615])
            ("_WIN32_CLIENT_RELEASES" variable nil nil [17616 17991])
            ("_WIN32_SERVER_RELEASES" variable nil nil [18064 18262])
            ("win32_ver" function (:arguments 
              ( ("release" variable nil (reparse-symbol function_parameters) [18278 18285])
                ("version" variable nil (reparse-symbol function_parameters) [18290 18297])
                ("csd" variable nil (reparse-symbol function_parameters) [18302 18305])
                ("ptype" variable nil (reparse-symbol function_parameters) [18310 18315]))              ) nil [18264 19856])
            ("_mac_ver_xml" function nil nil [19858 20368])
            ("mac_ver" function
               (:documentation " Get MacOS version information and return it as tuple (release,
        versioninfo, machine) with versioninfo being a tuple (version,
        dev_stage, non_release_version).

        Entries which cannot be determined are set to the parameter values
        which default to ''. All tuple entries are strings.
    "
                :arguments 
                  ( ("release" variable nil (reparse-symbol function_parameters) [20382 20389])
                    ("versioninfo" variable nil (reparse-symbol function_parameters) [20394 20405])
                    ("machine" variable nil (reparse-symbol function_parameters) [20420 20427]))                  )
                nil [20370 21027])
            ("_java_getprop" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [21046 21050])
                ("default" variable nil (reparse-symbol function_parameters) [21052 21059]))              ) nil [21028 21270])
            ("java_ver" function
               (:documentation " Version interface for Jython.

        Returns a tuple (release, vendor, vminfo, osinfo) with vminfo being
        a tuple (vm_name, vm_release, vm_vendor) and osinfo being a
        tuple (os_name, os_version, os_arch).

        Values which cannot be determined are set to the defaults
        given as parameters (which all default to '').

    "
                :arguments 
                  ( ("release" variable nil (reparse-symbol function_parameters) [21284 21291])
                    ("vendor" variable nil (reparse-symbol function_parameters) [21296 21302])
                    ("vminfo" variable nil (reparse-symbol function_parameters) [21307 21313])
                    ("osinfo" variable nil (reparse-symbol function_parameters) [21328 21334]))                  )
                nil [21271 22507])
            ("system_alias" function
               (:documentation " Returns (system, release, version) aliased to common
        marketing names used for some systems.

        It also does some reordering of the information in some cases
        where it would otherwise cause confusion.

    "
                :arguments 
                  ( ("system" variable nil (reparse-symbol function_parameters) [22551 22557])
                    ("release" variable nil (reparse-symbol function_parameters) [22559 22566])
                    ("version" variable nil (reparse-symbol function_parameters) [22568 22575]))                  )
                nil [22534 24160])
            ("_platform" function
               (:documentation " Helper to format the platform string in a filename
        compatible format e.g. \"system-version-machine\".
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [24205 24210]))                  )
                nil [24191 46157]))          
      :file "platform.py"
      :pointmax 46157
      :fsize 46156
      :lastmodtime '(22977 13915 0 0)
      :unmatched-syntax '((INDENT_BLOCK 30038 . 30107) (DEDENT 29984 . 29984) (NAME 29984 . 29996) (LPAREN 30021 . 30022) (NEWLINE 27385 . 27386) (COLON 27384 . 27385) (RPAREN 27383 . 27384) (LPAREN 27336 . 27337) (NEWLINE 27318 . 27319) (RBRACE 27317 . 27318) (INDENT_BLOCK 27229 . 27317) (NEWLINE 27228 . 27229) (DEDENT 27203 . 27203) (NAME 27203 . 27224) (LBRACE 27227 . 27228) (NEWLINE 26328 . 26329) (COLON 26327 . 26328) (RPAREN 26326 . 26327) (DEDENT 26291 . 26291) (DEF 26291 . 26294) (LPAREN 26307 . 26308) (NEWLINE 25872 . 25873) (COLON 25871 . 25872) (RPAREN 25870 . 25871) (DEDENT 25834 . 25834) (DEF 25834 . 25837) (LPAREN 25851 . 25852) (NEWLINE 25526 . 25527) (COLON 25525 . 25526) (RPAREN 25524 . 25525) (DEDENT 25495 . 25495) (DEF 25495 . 25498) (LPAREN 25515 . 25516) (NEWLINE 25204 . 25205) (COLON 25203 . 25204) (RPAREN 25202 . 25203) (DEDENT 25182 . 25182) (DEF 25182 . 25185) (LPAREN 25191 . 25192) (INDENT_BLOCK 19773 . 19815) (NEWLINE 19772 . 19773) (COLON 19771 . 19772) (FINALLY 19764 . 19771) (INDENT_BLOCK 17044 . 17062) (NEWLINE 17043 . 17044) (COLON 17042 . 17043) (ELSE 17038 . 17042) (INDENT_BLOCK 17009 . 17030) (NEWLINE 16952 . 16953) (COLON 16951 . 16952) (TRY 16677 . 16680) (AS 16945 . 16947) (INDENT_BLOCK 7515 . 7540) (NEWLINE 7514 . 7515) (COLON 7513 . 7514) (ELSE 7509 . 7513) (INDENT_BLOCK 7444 . 7497) (NEWLINE 7443 . 7444) (IF 7400 . 7402) (STRING_LITERAL 7404 . 7410) (STRING_LITERAL 7425 . 7432) (COLON 7442 . 7443)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"Subprocesses with accessible I/O streams

This module allows you to spawn processes, connect to their
input/output/error pipes, and obtain their return codes.

For a complete description of this module see the Python documentation.

Main API
========
run(...): Runs a command, waits for it to complete, then returns a
          CompletedProcess instance.
Popen(...): A class for flexibly executing a command in a new process

Constants
---------
DEVNULL: Special value that indicates that os.devnull should be used
PIPE:    Special value that indicates a pipe should be created
STDOUT:  Special value that indicates that stderr should go to stdout


Older API
=========
call(...): Runs a command, waits for it to complete, then returns
    the return code.
check_call(...): Same as call() but raises CalledProcessError()
    if return code is not 0
check_output(...): Same as check_call() but returns the contents of
    stdout instead of a return code
getoutput(...): Runs a command in the shell, waits for it to complete,
    then returns the output
getstatusoutput(...): Runs a command in the shell, waits for it to complete,
    then returns a (status, output) tuple
\"\"\"" code nil nil [299 1477])
            ("sys" include nil nil [1479 1489])
            ("_mswindows" variable nil nil [1490 1528])
            ("io" include nil nil [1530 1539])
            ("os" include nil nil [1540 1549])
            ("time" include nil nil [1550 1561])
            ("signal" include nil nil [1562 1575])
            ("builtins" include nil nil [1576 1591])
            ("warnings" include nil nil [1592 1607])
            ("errno" include nil nil [1608 1620])
            ("time" include nil nil [1621 1656])
            ("SubprocessError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [1699 1738])
            ("CalledProcessError" type
               (:documentation "Raised when run() is called with check=True and the process
    returns a non-zero exit status.

    Attributes:
      cmd, returncode, stdout, stderr, output
    "
                :superclasses ("SubprocessError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2032 2060])
                            ("self" variable nil (reparse-symbol indented_block_body) [2069 2083])
                            ("self" variable nil (reparse-symbol indented_block_body) [2092 2112])
                            ("self" variable nil (reparse-symbol indented_block_body) [2121 2141]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1974 1978])
                            ("returncode" variable nil (reparse-symbol function_parameters) [1980 1990])
                            ("cmd" variable nil (reparse-symbol function_parameters) [1992 1995])
                            ("output" variable nil (reparse-symbol function_parameters) [1997 2003])
                            ("stderr" variable nil (reparse-symbol function_parameters) [2010 2016]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1961 2142])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2159 2163]))                          )
                        (reparse-symbol indented_block_body) [2147 2646])
                    ("stdout" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2676 2680]))                          
                        :documentation "Alias for output attribute, to match stderr")
                        (reparse-symbol indented_block_body) [2651 2768])
                    ("stdout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2803 2807])
                            ("value" variable nil (reparse-symbol function_parameters) [2809 2814]))                          
                        :decorators 
                          ( ("stdout.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2773 2970]))                  
                :type "class")
                nil [1740 2970])
            ("TimeoutExpired" type
               (:documentation "This exception is raised when the timeout expires while waiting for a
    child process.

    Attributes:
        cmd, output, stdout, stderr, timeout
    "
                :superclasses ("SubprocessError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3249 3263])
                            ("self" variable nil (reparse-symbol indented_block_body) [3272 3294])
                            ("self" variable nil (reparse-symbol indented_block_body) [3303 3323])
                            ("self" variable nil (reparse-symbol indented_block_body) [3332 3352]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3194 3198])
                            ("cmd" variable nil (reparse-symbol function_parameters) [3200 3203])
                            ("timeout" variable nil (reparse-symbol function_parameters) [3205 3212])
                            ("output" variable nil (reparse-symbol function_parameters) [3214 3220])
                            ("stderr" variable nil (reparse-symbol function_parameters) [3227 3233]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3181 3353])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3370 3374]))                          )
                        (reparse-symbol indented_block_body) [3358 3479])
                    ("stdout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3509 3513]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3484 3543])
                    ("stdout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3578 3582])
                            ("value" variable nil (reparse-symbol function_parameters) [3584 3589]))                          
                        :decorators 
                          ( ("stdout.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3548 3745]))                  
                :type "class")
                nil [2972 3745])
            ("if" code nil nil [3747 4673])
            ("__all__" variable nil nil [4675 4901])
            ("if" code nil nil [5041 6126])
            ("_active" variable nil nil [6386 6398])
            ("_cleanup" function nil nil [6400 6786])
            ("PIPE" code nil nil [6787 6796])
            ("STDOUT" code nil nil [6797 6808])
            ("DEVNULL" code nil nil [6809 6821])
            ("_optim_args_from_interpreter_flags" function (:documentation "Return a list of command-line arguments reproducing the current
    optimization settings in sys.flags.") nil [6983 7257])
            ("_args_from_interpreter_flags" function (:documentation "Return a list of command-line arguments reproducing the current
    settings in sys.flags and sys.warnoptions.") nil [7259 8050])
            ("call" function
               (:documentation "Run command with arguments.  Wait for command to complete or
    timeout, then return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [8061 8071])
                    ("timeout" variable nil (reparse-symbol function_parameters) [8073 8080])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [8087 8095]))                  )
                nil [8052 8506])
            ("check_call" function
               (:documentation "Run command with arguments.  Wait for command to complete.  If
    the exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the call function.  Example:

    check_call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [8523 8533])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [8535 8543]))                  )
                nil [8508 9097])
            ("check_output" function (:arguments 
              ( ("popenargs" variable nil (reparse-symbol function_parameters) [9116 9126])
                ("timeout" variable nil (reparse-symbol function_parameters) [9128 9135])
                ("kwargs" variable nil (reparse-symbol function_parameters) [9142 9150]))              ) nil [9099 10987])
            ("CompletedProcess" type
               (:documentation "A process that has finished running.

    This is returned by run().

    Attributes:
      args: The list or str args passed to run().
      returncode: The exit code of the process, negative for signals.
      stdout: The standard output (None if not captured).
      stderr: The standard error (None if not captured).
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11433 11449])
                            ("self" variable nil (reparse-symbol indented_block_body) [11458 11486])
                            ("self" variable nil (reparse-symbol indented_block_body) [11495 11515])
                            ("self" variable nil (reparse-symbol indented_block_body) [11524 11544]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11374 11378])
                            ("args" variable nil (reparse-symbol function_parameters) [11380 11384])
                            ("returncode" variable nil (reparse-symbol function_parameters) [11386 11396])
                            ("stdout" variable nil (reparse-symbol function_parameters) [11398 11404])
                            ("stderr" variable nil (reparse-symbol function_parameters) [11411 11417]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11361 11545])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11563 11567]))                          )
                        (reparse-symbol indented_block_body) [11550 11935])
                    ("check_returncode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11961 11965]))                          
                        :documentation "Raise CalledProcessError if the exit code is non-zero.")
                        (reparse-symbol indented_block_body) [11940 12193]))                  
                :type "class")
                nil [10989 12193])
            ("run" function
               (:documentation "Run command with arguments and return a CompletedProcess instance.

    The returned instance will have attributes args, returncode, stdout and
    stderr. By default, stdout and stderr are not captured, and those attributes
    will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.

    If check is True and the exit code was non-zero, it raises a
    CalledProcessError. The CalledProcessError object will have the return code
    in the returncode attribute, and output & stderr attributes if those streams
    were captured.

    If timeout is given, and the process takes too long, a TimeoutExpired
    exception will be raised.

    There is an optional argument \"input\", allowing you to
    pass a string to the subprocess's stdin.  If you use this argument
    you may not also use the Popen constructor's \"stdin\" argument, as
    it will be used internally.

    The other arguments are the same as for the Popen constructor.

    If universal_newlines=True is passed, the \"input\" argument must be a
    string and stdout/stderr in the returned object will be strings rather than
    bytes.
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [12203 12213])
                    ("input" variable nil (reparse-symbol function_parameters) [12215 12220])
                    ("timeout" variable nil (reparse-symbol function_parameters) [12227 12234])
                    ("check" variable nil (reparse-symbol function_parameters) [12241 12246])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [12254 12262]))                  )
                nil [12195 14278])
            ("list2cmdline" function
               (:documentation "
    Translate a sequence of arguments into a command line
    string, using the same rules as the MS C runtime:

    1) Arguments are delimited by white space, which is either a
       space or a tab.

    2) A string surrounded by double quotation marks is
       interpreted as a single argument, regardless of white space
       contained within.  A quoted string can be embedded in an
       argument.

    3) A double quotation mark preceded by a backslash is
       interpreted as a literal double quotation mark.

    4) Backslashes are interpreted literally, unless they
       immediately precede a double quotation mark.

    5) If backslashes immediately precede a double quotation mark,
       every pair of backslashes is interpreted as a literal
       backslash.  If the number of backslashes is odd, the last
       backslash escapes the next double quotation mark as
       described in rule 3.
    "
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [14297 14300]))                  )
                nil [14280 61293]))          
      :file "subprocess.py"
      :pointmax 61293
      :fsize 61292
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 15901 . 61293) (NEWLINE 15862 . 15863) (COLON 15861 . 15862) (ELIF 15848 . 15852) (INDENT_BLOCK 15803 . 15836) (IF 15734 . 15736) (NAME 15770 . 15771) (NAME 15772 . 15776) (IF 15777 . 15779) (NAME 15783 . 15787) (NAME 15788 . 15790) (NAME 15791 . 15797) (NAME 15798 . 15801) (NEWLINE 15802 . 15803) (NAME 10812 . 10818) (IF 10833 . 10835) (ELSE 10876 . 10880)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_signal" include nil nil [1 15])
            ("_signal" include nil nil [16 37])
            ("functools" include nil nil [38 75])
            ("enum" include nil nil [76 112])
            ("_globals" variable nil nil [114 134])
            ("_IntEnum" code nil nil [136 345])
            ("_IntEnum" code nil nil [347 448])
            ("if" code nil nil [450 619])
            ("_int_to_enum" function
               (:documentation "Convert a numeric value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
    "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [638 643])
                    ("enum_klass" variable nil (reparse-symbol function_parameters) [645 655]))                  )
                nil [621 870])
            ("_enum_to_int" function
               (:documentation "Convert an IntEnum member to a numeric value.
    If it's not an IntEnum member return the value itself.
    "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [889 894]))                  )
                nil [872 1109])
            ("" code nil nil [1118 1134])
            ("signal" function (:arguments 
              ( ("signalnum" variable nil (reparse-symbol function_parameters) [1146 1155])
                ("handler" variable nil (reparse-symbol function_parameters) [1157 1164]))              ) nil [1135 1287])
            ("" code nil nil [1296 1315])
            ("getsignal" function (:arguments 
              ( ("signalnum" variable nil (reparse-symbol function_parameters) [1330 1339]))              ) nil [1316 1428])
            ("if" code nil nil [1430 1716])
            ("if" code nil nil [1718 1896])
            ("if" code nil nil [1898 2102])
            ("del" code nil nil [2103 2123]))          
      :file "signal.py"
      :pointmax 2124
      :fsize 2123
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!ProgramData!Anaconda3!Lib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
