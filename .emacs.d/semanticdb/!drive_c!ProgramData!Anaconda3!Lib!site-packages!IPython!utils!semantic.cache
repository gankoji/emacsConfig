;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Compatibility tricks for Python 3. Mainly to do with unicode.\"\"\"" code nil nil [17 84])
            ("functools" include nil nil [85 101])
            ("os" include nil nil [102 111])
            ("sys" include nil nil [112 122])
            ("re" include nil nil [123 132])
            ("shutil" include nil nil [133 146])
            ("types" include nil nil [147 159])
            ("platform" include nil nil [160 175])
            ("DEFAULT_ENCODING" include nil nil [192 215])
            ("no_code" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [229 230])
                ("encoding" variable nil (reparse-symbol function_parameters) [232 240]))              ) nil [217 261])
            ("decode" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [273 274])
                ("encoding" variable nil (reparse-symbol function_parameters) [276 284]))              ) nil [262 377])
            ("encode" function (:arguments 
              ( ("u" variable nil (reparse-symbol function_parameters) [389 390])
                ("encoding" variable nil (reparse-symbol function_parameters) [392 400]))              ) nil [378 493])
            ("cast_unicode" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [512 513])
                ("encoding" variable nil (reparse-symbol function_parameters) [515 523]))              ) nil [495 608])
            ("cast_bytes" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [624 625])
                ("encoding" variable nil (reparse-symbol function_parameters) [627 635]))              ) nil [609 724])
            ("buffer_to_bytes" function
               (:documentation "Cast a buffer object to bytes"
                :arguments 
                  ( ("buf" variable nil (reparse-symbol function_parameters) [745 748]))                  )
                nil [725 866])
            ("_modify_str_or_docstring" function (:arguments 
              ( ("str_change_func" variable nil (reparse-symbol function_parameters) [896 911]))              ) nil [867 1438])
            ("safe_unicode" function
               (:documentation "unicode(e) with various fallbacks. Used for exceptions, which may not be
    safe to call unicode() on.
    "
                :arguments 
                  ( ("e" variable nil (reparse-symbol function_parameters) [1456 1457]))                  )
                nil [1439 1874])
            ("_shutil_which" function
               (:documentation "Given a command, mode, and a PATH string, return the path which
    conforms to the given mode on the PATH, or None if there is no such
    file.

    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result
    of os.environ.get(\"PATH\"), or can be overridden with a custom search
    path.
    
    This is a backport of shutil.which from Python 3.4
    "
                :arguments 
                  ( ("cmd" variable nil (reparse-symbol function_parameters) [1924 1927])
                    ("mode" variable nil (reparse-symbol function_parameters) [1929 1933])
                    ("path" variable nil (reparse-symbol function_parameters) [1953 1957]))                  )
                nil [1906 4296])
            ("if" code nil nil [4297 9096])
            ("PY2" code nil nil [9098 9111])
            ("PYPY" code nil nil [9112 9161])
            ("annotate" function
               (:documentation "Python 3 compatible function annotation for Python 2."
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [9177 9185]))                  )
                nil [9164 9573])
            ("with_metaclass" function
               (:documentation "Create a base class with a metaclass."
                :arguments 
                  ( ("meta" variable nil (reparse-symbol function_parameters) [10726 10730])
                    ("bases" variable nil (reparse-symbol function_parameters) [10732 10738]))                  )
                nil [10707 10828]))          
      :file "py3compat.py"
      :pointmax 10828
      :fsize 10827
      :lastmodtime '(22828 48550 0 0)
      :unmatched-syntax '((NAME 8049 . 8052) (IF 8059 . 8061) (ELSE 8080 . 8084) (NAME 5293 . 5296) (IF 5303 . 5305) (ELSE 5324 . 5328) (FROM 177 . 181) (PERIOD 182 . 183))))
  :file "!drive_c!ProgramData!Anaconda3!Lib!site-packages!IPython!utils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
