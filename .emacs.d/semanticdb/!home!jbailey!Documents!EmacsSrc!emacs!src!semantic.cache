;; Object semanticdb-project-database-file-258d150
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-258d150"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1d2a3dc"
      :major-mode c-mode
      :tags 
        '( ("EMACS_LISP_H" variable (:constant-flag t) nil [832 844])
            ("alloca.h" include (:system-flag t) nil [846 865])
            ("setjmp.h" include (:system-flag t) nil [866 885])
            ("stdalign.h" include (:system-flag t) nil [886 907])
            ("stdarg.h" include (:system-flag t) nil [908 927])
            ("stddef.h" include (:system-flag t) nil [928 947])
            ("string.h" include (:system-flag t) nil [948 967])
            ("float.h" include (:system-flag t) nil [968 986])
            ("inttypes.h" include (:system-flag t) nil [987 1008])
            ("limits.h" include (:system-flag t) nil [1009 1028])
            ("intprops.h" include (:system-flag t) nil [1030 1051])
            ("verify.h" include (:system-flag t) nil [1052 1071])
            ("DECLARE_GDB_SYM" variable (:constant-flag t) nil [1493 1508])
            ("DEFINE_GDB_SYMBOL_BEGIN" variable (:constant-flag t) nil [1698 1721])
            ("DEFINE_GDB_SYMBOL_END" variable (:constant-flag t) nil [1775 1796])
            ("max" variable (:constant-flag t) nil [1884 1887])
            ("min" variable (:constant-flag t) nil [1926 1929])
            ("ARRAYELTS" variable (:constant-flag t) nil [2008 2017])
            ("GCTYPEBITS" variable (:constant-flag t) nil [2151 2161])
            ("EMACS_INT" type
               (:typedef ("int")
                :type "typedef")
                nil [2608 2630])
            ("EMACS_UINT" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [2631 2663])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2689 2698)
                        :type "int")
                        (reparse-symbol enumsubparts) [2671 2698])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2719 2729)
                        :type "int")
                        (reparse-symbol enumsubparts) [2700 2729]))                  
                :type "enum")
                nil [2664 2732])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2743 2756])
            ("pI" variable (:constant-flag t) nil [2775 2777])
            ("EMACS_INT" type
               (:typedef ("long int")
                :type "typedef")
                nil [2838 2865])
            ("EMACS_UINT" type
               (:typedef ("unsigned long")
                :type "typedef")
                nil [2866 2899])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2925 2935)
                        :type "int")
                        (reparse-symbol enumsubparts) [2907 2935])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2956 2967)
                        :type "int")
                        (reparse-symbol enumsubparts) [2937 2967]))                  
                :type "enum")
                nil [2900 2970])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2981 2994])
            ("pI" variable (:constant-flag t) nil [3014 3016])
            ("EMACS_INT" variable (:type "long int") nil [3065 3084])
            ("EMACS_UINT" variable (:type "long int") nil [3107 3127])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3153 3164)
                        :type "int")
                        (reparse-symbol enumsubparts) [3135 3164])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3185 3197)
                        :type "int")
                        (reparse-symbol enumsubparts) [3166 3197]))                  
                :type "enum")
                nil [3128 3200])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [3211 3224])
            ("pI" variable (:constant-flag t) nil [3785 3787])
            ("" type
               (:members 
                  ( ("BOOL_VECTOR_BITS_PER_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4009 4036]))                  
                :type "enum")
                nil [4001 4109])
            ("bits_word" type
               (:typedef ("size_t" type (:type "class") nil nil)
                :type "typedef")
                nil [4395 4420])
            ("BITS_WORD_MAX" variable (:constant-flag t) nil [4430 4443])
            ("" type
               (:members 
                  ( ("BITS_PER_BITS_WORD" variable
                       (:constant-flag t
                        :default-value (4481 4491)
                        :type "int")
                        (reparse-symbol enumsubparts) [4460 4491]))                  
                :type "enum")
                nil [4453 4494])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIZE_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4669 4684]))                  
                :type "int")
                nil [4661 4717])
            ("printmax_t" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [5143 5172])
            ("uprintmax_t" type
               (:typedef ("EMACS_UINT" type (:type "class") nil nil)
                :type "typedef")
                nil [5173 5204])
            ("pMd" variable (:constant-flag t) nil [5214 5217])
            ("pMu" variable (:constant-flag t) nil [5233 5236])
            ("pD" variable (:constant-flag t) nil [5619 5621])
            ("pD" variable (:constant-flag t) nil [5664 5666])
            ("pD" variable (:constant-flag t) nil [5711 5713])
            ("eassert" variable (:constant-flag t) nil [7017 7024])
            ("eassume" variable (:constant-flag t) nil [7095 7102])
            ("Lisp_Bits" type
               (:members 
                  ( ("VALBITS" variable
                       (:constant-flag t
                        :default-value (8731 8759)
                        :type "int")
                        (reparse-symbol enumsubparts) [8721 8759])
                    ("INTTYPEBITS" variable
                       (:constant-flag t
                        :default-value (8828 8842)
                        :type "int")
                        (reparse-symbol enumsubparts) [8814 8842])
                    ("FIXNUM_BITS" variable
                       (:constant-flag t
                        :default-value (8935 8946)
                        :type "int")
                        (reparse-symbol enumsubparts) [8921 8946]))                  
                :type "enum")
                nil [8454 8951])
            ("VAL_MAX" variable (:constant-flag t) nil [9311 9318])
            ("USE_LSB_TAG" variable (:constant-flag t) nil [9761 9772])
            ("VALMASK" variable (:constant-flag t) nil [9965 9972])
            ("LISP_WORDS_ARE_POINTERS" variable (:constant-flag t) nil [10503 10526])
            ("Lisp_Word" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [10624 10652])
            ("lisp_h_XLI" variable (:constant-flag t) nil [12200 12210])
            ("lisp_h_XIL" variable (:constant-flag t) nil [12228 12238])
            ("lisp_h_XLP" variable (:constant-flag t) nil [12256 12266])
            ("lisp_h_XPL" variable (:constant-flag t) nil [12307 12317])
            ("lisp_h_CHECK_NUMBER" variable (:constant-flag t) nil [12796 12815])
            ("lisp_h_CHECK_SYMBOL" variable (:constant-flag t) nil [12867 12886])
            ("lisp_h_CHECK_TYPE" variable (:constant-flag t) nil [12936 12953])
            ("lisp_h_CONSP" variable (:constant-flag t) nil [13040 13052])
            ("lisp_h_EQ" variable (:constant-flag t) nil [13089 13098])
            ("lisp_h_FLOATP" variable (:constant-flag t) nil [13134 13147])
            ("lisp_h_INTEGERP" variable (:constant-flag t) nil [13185 13200])
            ("lisp_h_MARKERP" variable (:constant-flag t) nil [13266 13280])
            ("lisp_h_MISCP" variable (:constant-flag t) nil [13341 13353])
            ("lisp_h_NILP" variable (:constant-flag t) nil [13390 13401])
            ("lisp_h_SET_SYMBOL_VAL" variable (:constant-flag t) nil [13426 13447])
            ("lisp_h_SYMBOL_CONSTANT_P" variable (:constant-flag t) nil [13554 13578])
            ("lisp_h_SYMBOL_TRAPPED_WRITE_P" variable (:constant-flag t) nil [13650 13679])
            ("lisp_h_SYMBOL_VAL" variable (:constant-flag t) nil [13728 13745])
            ("lisp_h_SYMBOLP" variable (:constant-flag t) nil [13837 13851])
            ("lisp_h_VECTORLIKEP" variable (:constant-flag t) nil [13890 13908])
            ("lisp_h_XCAR" variable (:constant-flag t) nil [13951 13962])
            ("lisp_h_XCDR" variable (:constant-flag t) nil [13993 14004])
            ("lisp_h_XCONS" variable (:constant-flag t) nil [14037 14049])
            ("lisp_h_XHASH" variable (:constant-flag t) nil [14132 14144])
            ("lisp_h_check_cons_list" variable (:constant-flag t) nil [14194 14216])
            ("DEFINE_KEY_OPS_AS_MACROS" variable (:constant-flag t) nil [15353 15377])
            ("INTMASK" variable (:constant-flag t) nil [17204 17211])
            ("case_Lisp_Int" variable (:constant-flag t) nil [17257 17270])
            ("ENUM_BF" variable (:constant-flag t) nil [17587 17594])
            ("Lisp_Object" type
               (:typedef ("Lisp_Word" type (:type "class") nil nil)
                :type "typedef")
                nil [23478 23508])
            ("LISP_INITIALLY" variable (:constant-flag t) nil [23518 23532])
            ("initialized" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [24253 24277])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [25019 25042])
            ("VALBITS" variable (:type "int") nil [25086 25094])
            ("utype" variable
               (:default-value "type"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [25393 25417])
            ("p" variable
               (:pointer 1
                :default-value "XLP (a)"
                :type "char")
                nil [25420 25438])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("gcmarkbit" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [25945 25967])
                                ("redirect" variable
                                   (:suffix ":3"
                                    :type ("symbol_redirect" type (:type "enum") nil nil))
                                    (reparse-symbol classsubparts) [26276 26315])
                                ("trapped_write" variable
                                   (:suffix ":2"
                                    :type ("symbol_trapped_write" type (:type "enum") nil nil))
                                    (reparse-symbol classsubparts) [26470 26519])
                                ("interned" variable
                                   (:suffix ":2"
                                    :type "unsigned int")
                                    (reparse-symbol classsubparts) [26622 26644])
                                ("declared_special" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [26789 26818])
                                ("pinned" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [26898 26917])
                                ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26975 26992])
                                ("val" variable (:type ("" type
                                     (:members 
                                        ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27147 27165])
                                          ("alias" variable
                                             (:pointer 1
                                              :type ("Lisp_Symbol" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [27167 27193])
                                          ("blv" variable
                                             (:pointer 1
                                              :type ("Lisp_Buffer_Local_Value" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [27195 27231])
                                          ("fwd" variable
                                             (:pointer 1
                                              :type ("Lisp_Fwd" type (:type "union") nil nil))
                                              (reparse-symbol classsubparts) [27233 27253]))                                        
                                      :type "union")
                                      nil nil)) (reparse-symbol classsubparts) [27138 27266])
                                ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27340 27361])
                                ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27410 27428])
                                ("next" variable
                                   (:pointer 1
                                    :type ("Lisp_Symbol" type
                                         (:prototype t
                                          :type "struct")
                                          nil nil))
                                    (reparse-symbol classsubparts) [27507 27532]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [25926 27541])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [27573 27583]))                    
                  :type "union")
                  nil nil)) nil [25912 27590])
            ("EXFUN" variable (:constant-flag t) nil [27907 27912])
            ("DEFUN_ARGS_MANY" variable (:constant-flag t) nil [28101 28116])
            ("DEFUN_ARGS_UNEVALLED" variable (:constant-flag t) nil [28153 28173])
            ("DEFUN_ARGS_0" variable (:constant-flag t) nil [28196 28208])
            ("DEFUN_ARGS_1" variable (:constant-flag t) nil [28224 28236])
            ("DEFUN_ARGS_2" variable (:constant-flag t) nil [28259 28271])
            ("DEFUN_ARGS_3" variable (:constant-flag t) nil [28307 28319])
            ("DEFUN_ARGS_4" variable (:constant-flag t) nil [28368 28380])
            ("DEFUN_ARGS_5" variable (:constant-flag t) nil [28442 28454])
            ("DEFUN_ARGS_6" variable (:constant-flag t) nil [28535 28547])
            ("DEFUN_ARGS_7" variable (:constant-flag t) nil [28641 28653])
            ("DEFUN_ARGS_8" variable (:constant-flag t) nil [28760 28772])
            ("untagged_ptr" type
               (:typedef ("uintptr_t" type (:type "class") nil nil)
                :type "typedef")
                nil [29572 29603])
            ("Lisp_Word_tag" type
               (:typedef ("EMACS_UINT" type (:type "class") nil nil)
                :type "typedef")
                nil [29604 29637])
            ("TAG_PTR" variable (:constant-flag t) nil [29728 29735])
            ("LISPSYM_INITIALLY" variable (:constant-flag t) nil [30020 30037])
            ("DEFINE_LISP_SYMBOL" variable (:constant-flag t) nil [30465 30483])
            ("SYMBOL_INDEX" variable (:constant-flag t) nil [30705 30717])
            ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" variable (:constant-flag t) nil [31054 31084])
            ("globals.h" include nil nil [31098 31118])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [32727 32742])
            ("gcaligned" variable (:type "int") nil [32774 32784])
            ("i" variable
               (:default-value "(intptr_t) XUNTAG (a, Lisp_Symbol)"
                :type ("intptr_t" type (:type "class") nil nil))
                nil [33092 33140])
            ("p" variable
               (:pointer 1
                :default-value "(char *) lispsym + i"
                :type "void")
                nil [33143 33174])
            ("p" variable (:type "int") nil [33390 33392])
            ("symoffset" variable
               (:pointer 1
                :default-value "(char *) ((char *) sym - (char *) lispsym)"
                :type "char")
                nil [34058 34119])
            ("a" variable
               (:default-value "TAG_PTR (Lisp_Symbol, symoffset)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [34129 34178])
            ("a" variable (:type "int") nil [34220 34222])
            ("make_lisp_symbol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lispsym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34307 34321]))                  
                :type "int")
                nil [34288 34323])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SYMBOLP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qsymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [34374 34398])
            ("ARRAY_MARK_FLAG" variable (:constant-flag t) nil [34545 34560])
            ("PSEUDOVECTOR_FLAG" variable (:constant-flag t) nil [34788 34805])
            ("MOST_POSITIVE_FIXNUM" variable (:constant-flag t) nil [37016 37036])
            ("MOST_NEGATIVE_FIXNUM" variable (:constant-flag t) nil [37076 37096])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [37764 37791])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37975 37977]))                  
                :type "int")
                nil [37970 37978])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [38070 38092])
            ("INTTYPEBITS" variable (:type "int") nil [38192 38204])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [38425 38452])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [38525 38542])
            ("n" variable (:type "int") nil [38552 38554])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [38679 38702])
            ("XUINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [38968 38985])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [39168 39195])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39242 39245]))                  
                :type "int")
                nil [39237 39265])
            ("FIXNUM_OVERFLOW_P" variable (:constant-flag t) nil [39487 39504])
            ("upper" variable (:type "int") nil [39728 39734])
            ("a" variable
               (:default-value "TAG_PTR (type, ptr)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [39866 39902])
            ("a" variable (:type "int") nil [39970 39972])
            ("XSETINT" variable (:constant-flag t) nil [40058 40065])
            ("XSETFASTINT" variable (:constant-flag t) nil [40104 40115])
            ("XSETCONS" variable (:constant-flag t) nil [40154 40162])
            ("XSETVECTOR" variable (:constant-flag t) nil [40214 40224])
            ("XSETSTRING" variable (:constant-flag t) nil [40282 40292])
            ("XSETSYMBOL" variable (:constant-flag t) nil [40346 40356])
            ("XSETFLOAT" variable (:constant-flag t) nil [40400 40409])
            ("XSETMISC" variable (:constant-flag t) nil [40462 40470])
            ("XSETPVECTYPE" variable (:constant-flag t) nil [40551 40563])
            ("XSETPVECTYPESIZE" variable (:constant-flag t) nil [40667 40683])
            ("XSETPSEUDOVECTOR" variable (:constant-flag t) nil [40963 40979])
            ("XSETTYPED_PSEUDOVECTOR" variable (:constant-flag t) nil [41146 41168])
            ("XSETWINDOW_CONFIGURATION" variable (:constant-flag t) nil [41356 41380])
            ("XSETPROCESS" variable (:constant-flag t) nil [41452 41463])
            ("XSETWINDOW" variable (:constant-flag t) nil [41518 41528])
            ("XSETTERMINAL" variable (:constant-flag t) nil [41582 41594])
            ("XSETSUBR" variable (:constant-flag t) nil [41650 41658])
            ("XSETCOMPILED" variable (:constant-flag t) nil [41710 41722])
            ("XSETBUFFER" variable (:constant-flag t) nil [41778 41788])
            ("XSETCHAR_TABLE" variable (:constant-flag t) nil [41842 41856])
            ("XSETBOOL_VECTOR" variable (:constant-flag t) nil [41914 41929])
            ("XSETSUB_CHAR_TABLE" variable (:constant-flag t) nil [41988 42006])
            ("XSETTHREAD" variable (:constant-flag t) nil [42068 42078])
            ("XSETMUTEX" variable (:constant-flag t) nil [42132 42141])
            ("XSETCONDVAR" variable (:constant-flag t) nil [42194 42205])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42585 42587])
                    ("" variable (:type ("Lisp_Int0" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42588 42598]))                  
                :type "int")
                nil [42577 42599])
            ("a" variable
               (:default-value "TAG_PTR (Lisp_Int0, p)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [42657 42696])
            ("a" variable (:type "int") nil [42752 42754])
            ("INTERVAL" type
               (:typedef ("interval" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :pointer 1
                :type "typedef")
                nil [42797 42831])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("car" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [42923 42939])
                                ("u" variable (:type ("" type
                                     (:members 
                                        ( ("cdr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [42993 43009])
                                          ("chain" variable
                                             (:pointer 1
                                              :type ("Lisp_Cons" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [43057 43081]))                                        
                                      :type "union")
                                      nil nil)) (reparse-symbol classsubparts) [42947 43092]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [42868 43101])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [43133 43143]))                    
                  :type "union")
                  nil nil)) nil [42854 43150])
            ("EQ" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [43257 43273])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43400 43409])
                    ("" variable (:type ("Qconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43411 43418])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43419 43421]))                  
                :type "int")
                nil [43388 43422])
            ("car" variable (:type "int") nil [44039 44043])
            ("cdr" variable (:type "int") nil [44122 44126])
            ("car" variable (:type "int") nil [44219 44235])
            ("cdr" variable (:type "int") nil [44292 44308])
            ("n" variable (:type "int") nil [44552 44554])
            ("n" variable (:type "int") nil [44629 44631])
            ("XCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44775 44777]))                  
                :type "int")
                nil [44769 44778])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44821 44828])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44829 44831]))                  
                :type "int")
                nil [44800 44832])
            ("Qnil" variable (:type "int") nil [44842 44847])
            ("XCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44925 44927]))                  
                :type "int")
                nil [44919 44928])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44971 44978])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44979 44981]))                  
                :type "int")
                nil [44950 44982])
            ("Qnil" variable (:type "int") nil [44992 44997])
            ("Qnil" variable (:type "int") nil [45144 45149])
            ("Qnil" variable (:type "int") nil [45230 45235])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [45371 45386])
                                ("size_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [45393 45413])
                                ("intervals" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol classsubparts) [45420 45439])
                                ("data" variable
                                   (:pointer 1
                                    :type "unsigned char")
                                    (reparse-symbol classsubparts) [45485 45505]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [45352 45514])
                      ("next" variable
                         (:pointer 1
                          :type ("Lisp_String" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [45519 45544])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [45576 45586]))                    
                  :type "union")
                  nil nil)) nil [45338 45593])
            ("Lisp_String" variable (:type "int") nil [45716 45728])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45789 45800])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45802 45811])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45812 45814]))                  
                :type "int")
                nil [45777 45815])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45915 45917])
                    ("" variable (:type ("Lisp_String" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45918 45930]))                  
                :type "int")
                nil [45907 45931])
            ("size_byte" variable (:type "int") nil [46059 46069])
            ("STRING_BYTES_BOUND" variable (:constant-flag t) nil [46808 46826])
            ("STRING_SET_UNIBYTE" variable (:constant-flag t) nil [46952 46970])
            ("STRING_SET_MULTIBYTE" variable (:constant-flag t) nil [47267 47287])
            ("data" variable (:type "int") nil [47639 47644])
            ("SDATA" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47758 47765]))                  
                :type "int")
                nil [47751 47766])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47851 47858]))                  
                :type "int")
                nil [47844 47865])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47954 47961]))                  
                :type "int")
                nil [47947 47968])
            ("nchars" variable
               (:default-value "XSTRING (string)->u.s.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [48027 48073])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [48076 48098])
            ("nchars" variable (:type "int") nil [48108 48115])
            ("size_byte" variable (:type "int") nil [48404 48414])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [48424 48446])
            ("nbytes" variable (:type "int") nil [48456 48463])
            ("STRING_BYTES" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XSTRING" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48537 48553]))                  
                :type "int")
                nil [48523 48555])
            ("size" variable
               (:default-value "newsize"
                :type "int")
                nil [48879 48894])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [48998 49029])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [49034 49078])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49265 49267])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49268 49284]))                  
                :type "int")
                nil [49257 49285])
            ("size" variable
               (:default-value "XVECTOR (array)->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [49336 49382])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [49385 49405])
            ("size" variable (:type "int") nil [49415 49420])
            ("PSEUDOVECTOR_SIZE_MASK" variable (:type "int") nil [49487 49512])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("VECTORP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49677 49688])
                    ("" variable (:type ("Qvectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49690 49699])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49700 49702]))                  
                :type "int")
                nil [49665 49703])
            ("size" variable
               (:default-value "v->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [49852 49884])
            ("false" variable (:type "int") nil [50522 50528])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [50962 50993])
            ("size" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [51035 51050])
            ("data" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [51268 51306])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [51719 51791])
            ("BITS_PER_BITS_WORD" variable (:type "int") nil [51835 51854])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [51914 51986])
            ("BOOL_VECTOR_BITS_PER_CHAR" variable (:type "int") nil [52037 52063])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52135 52137])
                    ("" variable (:type ("PVEC_BOOL_VECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52138 52155]))                  
                :type "int")
                nil [52120 52156])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BOOL_VECTOR_P" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52222 52239])
                    ("" variable (:type ("Qbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52241 52256])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52257 52259]))                  
                :type "int")
                nil [52210 52260])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52376 52378])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52379 52395]))                  
                :type "int")
                nil [52368 52396])
            ("size" variable
               (:default-value "XBOOL_VECTOR (a)->size;"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [52454 52494])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [52497 52517])
            ("size" variable (:type "int") nil [52527 52532])
            ("data" variable (:type "int") nil [52617 52622])
            ("bool_vector_data" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52735 52737]))                  
                :type "int")
                nil [52717 52738])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [52842 52887])
            ("Qnil" variable (:type "int") nil [53119 53124])
            ("addr" variable
               (:pointer 1
                :type "unsigned char")
                nil [53227 53247])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [53251 53296])
            ("bool_vector_uchar_data" function
               (:arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53331 53333]))                  
                :type "int")
                nil [53307 53364])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [53630 53644])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [53744 53758])
            ("PTRDIFF_MIN" variable (:type "int") nil [53919 53935])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [54074 54094])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [54379 54399])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NIL_IS_ZERO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55021 55033]))                  
                :type "int")
                nil [55013 55034])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55091 55093])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55097 55104]))                  
                :type "int")
                nil [55083 55105])
            ("VECSIZE" variable (:constant-flag t) nil [55253 55260])
            ("PSEUDOVECSIZE" variable (:constant-flag t) nil [55538 55551])
            ("UNSIGNED_CMP" variable (:constant-flag t) nil [55971 55983])
            ("ASCII_CHAR_P" variable (:constant-flag t) nil [56225 56237])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [57415 57446])
            ("defalt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [57564 57583])
            ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [57766 57785])
            ("purpose" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [57884 57904])
            ("ascii" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [58050 58068])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [58074 58123])
            ("extras" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [58185 58227])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58301 58303])
                    ("" variable (:type ("PVEC_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58304 58320]))                  
                :type "int")
                nil [58286 58321])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58434 58436])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58437 58453]))                  
                :type "int")
                nil [58426 58454])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [58628 58659])
            ("depth" variable (:type "int") nil [59050 59060])
            ("min_char" variable (:type "int") nil [59126 59139])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [59201 59245])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59323 59325])
                    ("" variable (:type ("PVEC_SUB_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59326 59346]))                  
                :type "int")
                nil [59308 59347])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59472 59474])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59475 59491]))                  
                :type "int")
                nil [59464 59492])
            ("tbl" variable
               (:pointer 1
                :default-value "NULL"
                :type ("Lisp_Char_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [59572 59607])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [59610 59626])
            ("val" variable (:type "int") nil [59918 59922])
            ("set_sub_char_table_contents" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XCHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60516 60532])
                    ("" variable (:type ("ascii" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60534 60540])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60541 60545])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60546 60550]))                  
                :type "int")
                nil [60487 60551])
            ("char_table_set" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ct" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60579 60582])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60583 60587])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60588 60592]))                  
                :type "int")
                nil [60563 60593])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [60760 60791])
            ("function" variable (:type ("" type
                 (:members 
                    ( ("a0" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [60829 60834]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [60810 60835])
                      ("a1" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60861 60873]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [60842 60874])
                      ("a2" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60900 60912])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60913 60925]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [60881 60926])
                      ("a3" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60952 60964])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60965 60977])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60978 60990]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [60933 60991])
                      ("a4" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61017 61029])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61030 61042])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61043 61055])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61056 61068]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [60998 61069])
                      ("a5" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61095 61107])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61108 61120])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61121 61133])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61134 61146])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61147 61159]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61076 61160])
                      ("a6" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61186 61198])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61199 61211])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61212 61224])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61225 61237])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61238 61250])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61251 61263]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61167 61264])
                      ("a7" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61290 61302])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61303 61315])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61316 61328])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61329 61341])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61342 61354])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61355 61367])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61368 61380]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61271 61381])
                      ("a8" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61407 61419])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61420 61432])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61433 61445])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61446 61458])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61459 61471])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61472 61484])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61485 61497])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61498 61510]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61388 61511])
                      ("aUNEVALLED" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61545 61562]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61518 61563])
                      ("aMANY" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61592 61602])
                              ("" variable
                                 (:pointer 1
                                  :type ("Lisp_Object" type (:type "class") nil nil))
                                  (reparse-symbol arg-sub-list) [61603 61617]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [61570 61618]))                    
                  :type "union")
                  nil nil)) nil [60796 61634])
            ("min_args" variable (:type "short") nil [61639 61664])
            ("max_args" variable (:type "short") nil [61639 61664])
            ("symbol_name" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [61669 61693])
            ("intspec" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [61698 61718])
            ("doc" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [61723 61737])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61804 61806])
                    ("" variable (:type ("PVEC_SUBR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61807 61817]))                  
                :type "int")
                nil [61789 61818])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61912 61914])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61915 61931]))                  
                :type "int")
                nil [61904 61932])
            ("sys_jmp_buf" type
               (:typedef ("jmp_buf" type (:type "class") nil nil)
                :type "typedef")
                nil [63017 63045])
            ("sys_setjmp" variable (:constant-flag t) nil [63055 63065])
            ("sys_longjmp" variable (:constant-flag t) nil [63090 63101])
            ("sys_jmp_buf" type
               (:typedef ("sigjmp_buf" type (:type "class") nil nil)
                :type "typedef")
                nil [63153 63184])
            ("sys_setjmp" variable (:constant-flag t) nil [63194 63204])
            ("sys_longjmp" variable (:constant-flag t) nil [63234 63245])
            ("thread.h" include nil nil [63497 63516])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [63885 63954])
            ("alias" variable (:type "int") nil [63977 63983])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [64067 64135])
            ("blv" variable (:type "int") nil [64158 64162])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [64230 64298])
            ("fwd" variable (:type "int") nil [64321 64325])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [64520 64572])
            ("alias" variable
               (:default-value "v"
                :type "int")
                nil [64588 64598])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [64693 64746])
            ("blv" variable
               (:default-value "v"
                :type "int")
                nil [64762 64770])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [64849 64902])
            ("fwd" variable
               (:default-value "v"
                :type "int")
                nil [64918 64926])
            ("name" variable (:type "int") nil [65009 65014])
            ("SYMBOL_UNINTERNED" variable (:type "int") nil [65160 65178])
            ("SYMBOL_INTERNED_IN_INITIAL_OBARRAY" variable (:type "int") nil [65352 65387])
            ("DEFSYM" variable (:constant-flag t) nil [66094 66100])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [66418 66435])
            ("user_hash_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [66485 66516])
            ("user_cmp_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [66576 66606])
            ("cmpfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [66666 66692])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66693 66705])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66706 66718]))                  
                :type "bool")
                nil [66651 66719])
            ("hashfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [66787 66813])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66814 66826]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [66765 66827])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [66928 66959])
            ("weak" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67061 67078])
            ("hash" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67180 67197])
            ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67445 67462])
            ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67709 67727])
            ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [67979 67995])
            ("next_free" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [68063 68083])
            ("pure" variable (:type "bool") nil [68179 68189])
            ("rehash_threshold" variable (:type "float") nil [68279 68302])
            ("rehash_size" variable (:type "float") nil [68638 68656])
            ("key_and_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [68839 68865])
            ("test" variable (:type ("hash_table_test" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [68913 68941])
            ("next_weak" variable
               (:pointer 1
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [69056 69090])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69163 69165])
                    ("" variable (:type ("PVEC_HASH_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69166 69182]))                  
                :type "int")
                nil [69148 69183])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69296 69298])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69299 69315]))                  
                :type "int")
                nil [69288 69316])
            ("XSET_HASH_TABLE" variable (:constant-flag t) nil [69328 69343])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69556 69558])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69559 69573])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69578 69582]))                  
                :type "int")
                nil [69550 69583])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69738 69740])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69741 69755])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69760 69765]))                  
                :type "int")
                nil [69732 69769])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69932 69934])
                    ("" variable (:type ("hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69935 69940])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69941 69945]))                  
                :type "int")
                nil [69926 69946])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70071 70073])
                    ("" variable (:type ("next" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70074 70079]))                  
                :type "int")
                nil [70064 70080])
            ("DEFAULT_REHASH_THRESHOLD" variable
               (:typemodifiers ("static")
                :default-value "0.8125"
                :type "float")
                nil [70359 70412])
            ("DEFAULT_REHASH_SIZE" variable
               (:typemodifiers ("static")
                :default-value "1.5 - 1"
                :type "float")
                nil [70493 70542])
            ("y" variable (:type "int") nil [70759 70761])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [71059 71094])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [71120 71142])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [71145 71166])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71336 71338])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71339 71349]))                  
                :type "int")
                nil [71328 71350])
            ("type" variable (:type "int") nil [71432 71437])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [71464 71499])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [71528 71550])
            ("spacer" variable
               (:suffix ":13"
                :type "unsigned int")
                nil [71553 71574])
            ("need_adjustment" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [71745 71773])
            ("insertion_type" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [71886 71913])
            ("buffer" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [72479 72501])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [72830 72855])
            ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [72918 72936])
            ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [73176 73194])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [73814 73849])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [73880 73902])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [73907 73928])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [73933 73959])
            ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [73964 73982])
            ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [73987 74003])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [74008 74026])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [76565 76600])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [76634 76656])
            ("SAVE_TYPE_BITS" variable (:type "int") nil [77188 77203])
            ("data" variable
               (:dereference 1
                :type ("" type
                     (:members 
                        ( ("pointer" variable
                             (:pointer 1
                              :type "void")
                              (reparse-symbol classsubparts) [77222 77236])
                          ("funcpointer" variable (:type ("voidfuncptr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77243 77267])
                          ("integer" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77274 77292])
                          ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [77299 77318]))                        
                      :type "union")
                      nil nil))
                nil [77208 77348])
            ("Lisp_Misc_Save_Value" variable (:type "int") nil [77436 77457])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77569 77571])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77572 77582]))                  
                :type "int")
                nil [77561 77583])
            ("pointer" variable (:type "int") nil [78014 78022])
            ("pointer" variable
               (:default-value "val"
                :type "int")
                nil [78183 78197])
            ("funcpointer" variable (:type "int") nil [78366 78378])
            ("integer" variable (:type "int") nil [78578 78586])
            ("integer" variable
               (:default-value "val"
                :type "int")
                nil [78751 78765])
            ("object" variable (:type "int") nil [78959 78966])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [79015 79050])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [79085 79107])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [79110 79131])
            ("finalizer" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [79154 79161]))                  
                :type "void")
                nil [79135 79162])
            ("p" variable
               (:pointer 1
                :type "void")
                nil [79165 79173])
            ("base" variable (:type ("Lisp_Misc_Any" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [79244 79270])
            ("prev" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [79332 79360])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [79365 79393])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [79602 79623])
            ("Lisp_Misc_Finalizer" variable (:type "int") nil [79710 79730])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79839 79841])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79842 79852]))                  
                :type "int")
                nil [79831 79853])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [79941 79976])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [80004 80026])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [80031 80052])
            ("chain" variable
               (:pointer 1
                :type ("Lisp_Misc" type (:type "union") nil nil))
                nil [80057 80080])
            ("u_any" variable (:type ("Lisp_Misc_Any" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80241 80268])
            ("u_free" variable (:type ("Lisp_Free" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80312 80336])
            ("u_marker" variable (:type ("Lisp_Marker" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80341 80369])
            ("u_overlay" variable (:type ("Lisp_Overlay" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80374 80404])
            ("u_save_value" variable (:type ("Lisp_Save_Value" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80409 80445])
            ("u_finalizer" variable (:type ("Lisp_Finalizer" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80450 80484])
            ("u_user_ptr" variable (:type ("Lisp_User_Ptr" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80509 80541])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80621 80623])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80624 80634]))                  
                :type "int")
                nil [80613 80635])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80807 80809])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80810 80820]))                  
                :type "int")
                nil [80799 80821])
            ("Lisp_Misc_Overlay" variable (:type "int") nil [80903 80921])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81024 81026])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81027 81037]))                  
                :type "int")
                nil [81016 81038])
            ("Lisp_Misc_User_Ptr" variable (:type "int") nil [81141 81160])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81266 81268])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81269 81279]))                  
                :type "int")
                nil [81258 81280])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [81508 81532])
            ("intvar" variable
               (:pointer 1
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [81558 81576])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [81803 81827])
            ("boolvar" variable
               (:pointer 1
                :type "bool")
                nil [81854 81868])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [82093 82117])
            ("objvar" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [82143 82163])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [82332 82356])
            ("offset" variable (:type "int") nil [82389 82400])
            ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [82481 82503])
            ("local_if_set" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [83733 83758])
            ("found" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [83876 83894])
            ("fwd" variable
               (:pointer 1
                :type ("Lisp_Fwd" type (:type "union") nil nil))
                nil [83978 83998])
            ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [84112 84130])
            ("defcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [84238 84258])
            ("valcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [84539 84559])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [84684 84708])
            ("offset" variable (:type "int") nil [84741 84752])
            ("u_intfwd" variable (:type ("Lisp_Intfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [84782 84810])
            ("u_boolfwd" variable (:type ("Lisp_Boolfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [84815 84845])
            ("u_objfwd" variable (:type ("Lisp_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [84850 84878])
            ("u_buffer_objfwd" variable (:type ("Lisp_Buffer_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [84883 84925])
            ("u_kboard_objfwd" variable (:type ("Lisp_Kboard_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [84930 84972])
            ("type" variable (:type "int") nil [85057 85062])
            ("Lisp_Fwd_Buffer_Obj" variable (:type "int") nil [85140 85160])
            ("u_buffer_objfwd" variable (:type "int") nil [85281 85297])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("data" variable (:type "double") (reparse-symbol classsubparts) [85379 85391])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Float" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [85398 85423]))                    
                  :type "union")
                  nil nil)) nil [85361 85432])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85602 85604])
                    ("" variable (:type ("Lisp_Float" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85605 85616]))                  
                :type "int")
                nil [85594 85617])
            ("data" variable (:type "int") nil [85688 85693])
            ("_UCHAR_T" variable (:constant-flag t) nil [86475 86483])
            ("UCHAR" type
               (:typedef ("unsigned char")
                :type "typedef")
                nil [86484 86512])
            ("FLOATP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87539 87541]))                  
                :type "int")
                nil [87531 87542])
            ("XINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87619 87621]))                  
                :type "int")
                nil [87613 87622])
            ("hi" variable (:type "int") nil [87753 87756])
            ("TYPE_RANGED_INTEGERP" variable (:constant-flag t) nil [87768 87788])
            ("EQ" variable (:type "int") nil [88005 88032])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88159 88161])
                    ("" variable (:type ("PVEC_WINDOW_CONFIGURATION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88162 88188]))                  
                :type "int")
                nil [88144 88189])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88257 88259])
                    ("" variable (:type ("PVEC_COMPILED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88260 88274]))                  
                :type "int")
                nil [88242 88275])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88340 88342])
                    ("" variable (:type ("PVEC_FRAME" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88343 88354]))                  
                :type "int")
                nil [88325 88355])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88421 88423])
                    ("" variable (:type ("PVEC_RECORD" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88424 88436]))                  
                :type "int")
                nil [88406 88437])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("RECORDP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88498 88509])
                    ("" variable (:type ("Qrecordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88511 88520])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88521 88523]))                  
                :type "int")
                nil [88486 88524])
            ("EQ" variable (:type "int") nil [88622 88646])
            ("BOOL_VECTOR_P" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88781 88783]))                  
                :type "int")
                nil [88766 88784])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88844 88853])
                    ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88857 88865])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88867 88874])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88875 88877]))                  
                :type "int")
                nil [88832 88878])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88956 88964])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88966 88973])
                    ("" variable (:type ("y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88974 88976]))                  
                :type "int")
                nil [88944 88977])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("INTEGERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qintegerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [89028 89052])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89117 89135])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89137 89146])
                    ("" variable (:type ("XCAR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89147 89155]))                  
                :type "int")
                nil [89105 89157])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89324 89326]))                  
                :type "int")
                nil [89317 89327])
            ("SCHARS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89366 89368]))                  
                :type "int")
                nil [89358 89369])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qarrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89393 89401])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89402 89404]))                  
                :type "int")
                nil [89372 89405])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ARRAYP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89487 89497])
                    ("" variable (:type ("predicate" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89499 89509])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89510 89512]))                  
                :type "int")
                nil [89475 89513])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NATNUMP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89573 89584])
                    ("" variable (:type ("Qwholenump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89586 89597])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89598 89600]))                  
                :type "int")
                nil [89561 89601])
            ("CHECK_RANGED_INTEGER" variable (:constant-flag t) nil [89613 89633])
            ("CHECK_TYPE_RANGED_INTEGER" variable (:constant-flag t) nil [89996 90021])
            ("CHECK_NUMBER_COERCE_MARKER" variable (:constant-flag t) nil [90266 90292])
            ("XINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90585 90587]))                  
                :type "int")
                nil [90579 90588])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NUMBERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90658 90669])
                    ("" variable (:type ("Qnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90671 90680])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90681 90683]))                  
                :type "int")
                nil [90646 90684])
            ("CHECK_NUMBER_OR_FLOAT_COERCE_MARKER" variable (:constant-flag t) nil [90696 90731])
            ("tmp" variable
               (:default-value "XCAR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [91122 91149])
            ("CHECK_NUMBER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91166 91170]))                  
                :type "int")
                nil [91152 91171])
            ("XSETCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91183 91185])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91186 91190]))                  
                :type "int")
                nil [91174 91191])
            ("tmp" variable
               (:default-value "XCDR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [91244 91271])
            ("CHECK_NUMBER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91288 91292]))                  
                :type "int")
                nil [91274 91293])
            ("XSETCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91305 91307])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91308 91312]))                  
                :type "int")
                nil [91296 91313])
            ("DEFUN" variable (:constant-flag t) nil [92794 92799])
            ("CALLMANY" variable (:constant-flag t) nil [93342 93350])
            ("CALLN" variable (:constant-flag t) nil [93695 93700])
            ("DEFVAR_LISP" variable (:constant-flag t) nil [94900 94911])
            ("DEFVAR_LISP_NOPRO" variable (:constant-flag t) nil [95072 95089])
            ("DEFVAR_BOOL" variable (:constant-flag t) nil [95254 95265])
            ("DEFVAR_INT" variable (:constant-flag t) nil [95427 95437])
            ("DEFVAR_KBOARD" variable (:constant-flag t) nil [95598 95611])
            ("CHAR_BIT" variable (:type "int") nil [97405 97414])
            ("unwind" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [97464 97473])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97494 97506]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [97480 97507])
                      ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [97514 97530]))                    
                  :type "struct")
                  nil nil)) nil [97419 97544])
            ("unwind_ptr" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [97594 97603])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable
                                 (:pointer 1
                                  :type "void")
                                  (reparse-symbol arg-sub-list) [97624 97631]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [97610 97632])
                      ("arg" variable
                         (:pointer 1
                          :type "void")
                          (reparse-symbol classsubparts) [97639 97649]))                    
                  :type "struct")
                  nil nil)) nil [97549 97667])
            ("unwind_int" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [97717 97726])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [97747 97751]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [97733 97752])
                      ("arg" variable (:type "int") (reparse-symbol classsubparts) [97759 97767]))                    
                  :type "struct")
                  nil nil)) nil [97672 97785])
            ("unwind_void" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [97835 97844])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [97865 97870]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [97851 97871]))                    
                  :type "struct")
                  nil nil)) nil [97790 97890])
            ("let" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [97940 97949])
                      ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98017 98054])
                      ("old_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98017 98054])
                      ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98017 98054])
                      ("saved_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98175 98199]))                    
                  :type "struct")
                  nil nil)) nil [97895 98210])
            ("bt" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [98260 98269])
                      ("debug_on_exit" variable
                         (:suffix ":1"
                          :type ("bool_bf" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [98276 98302])
                      ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98309 98330])
                      ("args" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [98337 98355])
                      ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98362 98378]))                    
                  :type "struct")
                  nil nil)) nil [98215 98388])
            ("specpdl" variable (:type "int") nil [98632 98640])
            ("type" variable (:type ("handlertype" type (:type "enum") nil nil)) nil [99848 99870])
            ("tag_or_ch" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [99873 99895])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [99898 99914])
            ("next" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [99917 99938])
            ("nextfree" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [99941 99966])
            ("bytecode_top" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [100299 100325])
            ("bytecode_dest" variable (:type "int") nil [100328 100346])
            ("jmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [100491 100507])
            ("f_lisp_eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [100510 100538])
            ("pdlcount" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [100541 100560])
            ("poll_suppress_count" variable (:type "int") nil [100563 100587])
            ("interrupt_input_blocked" variable (:type "int") nil [100590 100618])
            ("memory_signal_data" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [100623 100661])
            ("QUITP" variable (:constant-flag t) nil [100738 100743])
            ("maybe_quit" function
               (:prototype-flag t
                :type "int")
                nil [101029 101043])
            ("Vascii_downcase_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [101048 101089])
            ("Vascii_canon_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [101090 101128])
            ("window" type
               (:prototype t
                :type "struct")
                nil [101273 101287])
            ("frame" type
               (:prototype t
                :type "struct")
                nil [101288 101301])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XVECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101554 101565])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101567 101577])
                    ("" variable (:type ("offset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101578 101585])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101586 101591])
                    ("" variable
                       (:pointer 1
                        :type ("count" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [101592 101606])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101608 101613]))                  
                :type "int")
                nil [101546 101614])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101762 101764])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101765 101779])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101784 101788])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101789 101793]))                  
                :type "int")
                nil [101753 101794])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101903 101905])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101906 101920])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101925 101930])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101934 101938]))                  
                :type "int")
                nil [101894 101939])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [102128 102148])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [102241 102255])
            ("next" variable
               (:default-value "next"
                :type "int")
                nil [102354 102366])
            ("trapped_write" variable
               (:default-value "SYMBOL_NOWRITE"
                :type "int")
                nil [102444 102475])
            ("found" variable (:type "int") nil [102662 102668])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [102804 102818])
            ("intervals" variable (:type "int") nil [102933 102943])
            ("intervals" variable
               (:default-value "i"
                :type "int")
                nil [103068 103082])
            ("defalt" variable
               (:default-value "val"
                :type "int")
                nil [103288 103301])
            ("purpose" variable
               (:default-value "val"
                :type "int")
                nil [103401 103415])
            ("extras" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [103660 103678])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [103853 103873])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [103998 104018])
            ("INTEGER_TO_CONS" variable (:constant-flag t) nil [104783 104798])
            ("CONS_TO_INTEGER" variable (:constant-flag t) nil [105254 105269])
            ("charset" type
               (:prototype t
                :type "struct")
                nil [107152 107167])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [107381 107397])
            ("hashtest_eq" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [108021 108099])
            ("hashtest_eql" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [108021 108099])
            ("hashtest_equal" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [108021 108099])
            ("Vwindow_system" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [112318 112352])
            ("noninteractive_need_newline" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [112434 112474])
            ("pending_malloc_warning" variable
               (:pointer 1
                :typemodifiers ("extern")
                :constant-flag t
                :type "char")
                nil [114793 114835])
            ("zero_vector" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [114836 114867])
            ("consing_since_gc" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [114868 114902])
            ("gc_relative_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [114903 114942])
            ("memory_full_cons_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [114943 114987])
            ("list2" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115565 115580])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115582 115597]))                  
                :type "int")
                nil [115558 115599])
            ("list3" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115687 115702])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115704 115719])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115721 115736]))                  
                :type "int")
                nil [115680 115738])
            ("list4" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115839 115854])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115856 115871])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115875 115890])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115892 115907]))                  
                :type "int")
                nil [115832 115909])
            ("make_unibyte_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116468 116472])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116473 116485]))                  
                :type "int")
                nil [116447 116487])
            ("make_pure_c_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117234 117238])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117239 117251]))                  
                :type "int")
                nil [117214 117253])
            ("make_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117425 117429])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117430 117442]))                  
                :type "int")
                nil [117412 117444])
            ("v" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [117981 117995])
            ("p" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [117998 118020])
            ("p" variable
               (:default-value "allocate_vector (size)"
                :type "int")
                nil [118024 118051])
            ("v" variable (:type "int") nil [118082 118084])
            ("slots" variable
               (:default-value "SUB_CHAR_TABLE_OFFSET + chartab_size[depth]"
                :type "int")
                nil [118217 118273])
            ("v" variable
               (:default-value "make_uninit_vector (slots)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [118276 118319])
            ("depth" variable
               (:default-value "depth"
                :type "int")
                nil [118395 118409])
            ("min_char" variable
               (:default-value "min_char"
                :type "int")
                nil [118433 118453])
            ("v" variable (:type "int") nil [118463 118465])
            ("ALLOCATE_PSEUDOVECTOR" variable (:constant-flag t) nil [118712 118733])
            ("ALLOCATE_ZEROED_PSEUDOVECTOR" variable (:constant-flag t) nil [119048 119076])
            ("gc_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [119241 119268])
            ("Vprin1_to_string_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [121783 121826])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [121865 121884])
            ("print_level" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [121938 121961])
            ("Lisp_Object" function (:type "int") nil [122132 122161])
            ("FLOAT_TO_STRING_BUFSIZE" variable (:constant-flag t) nil [122185 122208])
            ("Vcurrent_load_list" variable
               (:default-value "Fcons (x, Vcurrent_load_list)"
                :type "int")
                nil [123272 123323])
            ("intern_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123890 123894])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123895 123907]))                  
                :type "int")
                nil [123880 123909])
            ("intern_c_string_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123996 124000])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124001 124013]))                  
                :type "int")
                nil [123977 124015])
            ("Vautoload_queue" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [124045 124080])
            ("Vrun_hooks" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [124081 124111])
            ("Vsignaling_function" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [124112 124151])
            ("inhibit_lisp_code" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [124152 124189])
            ("Lisp_Object" function
               (:arguments 
                  ( ("" variable (:type ("funcall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124606 124614]))                  
                :type "int")
                nil [124592 124662])
            ("Fsignal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("error_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124785 124798])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124799 124804]))                  
                :type "int")
                nil [124776 124805])
            ("Lisp_Object" function (:type "int") nil [126255 126284])
            ("Lisp_Object" function (:type "int") nil [126433 126455])
            ("Lisp_Object" function (:type "int") nil [126470 126499])
            ("Lisp_Object" function (:type "int") nil [126548 126577])
            ("Lisp_Object" function (:type "int") nil [126605 126634])
            ("Lisp_Object" function (:type "int") nil [126683 126725])
            ("Lisp_Object" function (:type "int") nil [126766 126795])
            ("Lisp_Object" function (:type "int") nil [126848 126890])
            ("Lisp_Object" function (:type "int") nil [126936 126991])
            ("Lisp_Object" function (:type "int") nil [127033 127057])
            ("Lisp_Object" function (:type "int") nil [127067 127096])
            ("emacs-module.h" include nil nil [129207 129232])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [129694 129725])
            ("documentation" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [129782 129808])
            ("min_arity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [129843 129874])
            ("max_arity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [129843 129874])
            ("subr" variable (:type ("emacs_subr" type (:type "class") nil nil)) nil [129877 129893])
            ("data" variable
               (:pointer 1
                :type "void")
                nil [129896 129907])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("o" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129983 129985])
                    ("" variable (:type ("PVEC_MODULE_FUNCTION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129986 130007]))                  
                :type "int")
                nil [129968 130008])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("o" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130135 130137])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130138 130154]))                  
                :type "int")
                nil [130127 130155])
            ("re_registers" type
               (:prototype t
                :type "struct")
                nil [133970 133990])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134330 134337])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134338 134345])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134346 134351]))                  
                :type "int")
                nil [134302 134352])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134483 134490])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134491 134498])
                    ("" variable (:type ("Vascii_canon_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134499 134518]))                  
                :type "int")
                nil [134455 134519])
            ("Vminibuffer_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [135371 135407])
            ("last_minibuf_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [135408 135447])
            ("echo_message_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [135885 135924])
            ("echo_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [135925 135959])
            ("input_pending" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [135995 136021])
            ("return_to_command_loop" variable
               (:typemodifiers ("extern")
                :type ("sigjmp_buf" type (:type "class") nil nil))
                nil [136058 136099])
            ("pending_funcalls" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [136322 136358])
            ("initial_argv" variable
               (:pointer 2
                :typemodifiers ("extern")
                :type "char")
                nil [137568 137595])
            ("initial_argc" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [137596 137620])
            ("display_arg" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [137671 137695])
            ("empty_unibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [137774 137838])
            ("empty_multibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [137774 137838])
            ("noninteractive" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [138412 138439])
            ("no_site_lisp" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [138504 138529])
            ("build_details" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [138591 138617])
            ("daemon_type" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [138702 138725])
            ("IS_DAEMON" variable (:constant-flag t) nil [138734 138743])
            ("DAEMON_RUNNING" variable (:constant-flag t) nil [138771 138785])
            ("fatal_error_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [139025 139061])
            ("inhibit_window_system" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [139131 139165])
            ("running_asynch_code" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [139224 139256])
            ("Lisp_Process" type
               (:prototype t
                :type "struct")
                nil [139287 139307])
            ("WAIT_READING_MAX" variable (:constant-flag t) nil [139818 139834])
            ("CHILD_SETUP_TYPE" variable (:constant-flag t) nil [140321 140337])
            ("tty_display_info" type
               (:prototype t
                :type "struct")
                nil [142193 142217])
            ("NO_INLINE" variable (:type "int") nil [143245 143255])
            ("char_ins_del_vector" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "int")
                nil [144652 144684])
            ("Vface_alternative_font_family_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [145673 145728])
            ("Vface_alternative_font_registry_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [145729 145786])
            ("profiler_memory_running" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [146750 146786])
            ("my_endbss_static" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [147045 147075])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [147566 147583])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [147623 147640])
            ("len" variable
               (:default-value "SBYTES (string)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [147906 147938])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147949 147954])
                    ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147955 147969])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147971 147976]))                  
                :type "int")
                nil [147941 147980])
            ("len" variable (:type "int") nil [147997 148001])
            ("egetenv_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("var" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148238 148242])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [148243 148255]))                  
                :type "int")
                nil [148220 148257])
            ("eabs" variable (:constant-flag t) nil [148618 148622])
            ("make_fixnum_or_float" variable (:constant-flag t) nil [148763 148783])
            ("USE_SAFE_ALLOCA" variable (:constant-flag t) nil [149125 149140])
            ("AVAIL_ALLOCA" variable (:constant-flag t) nil [149258 149270])
            ("SAFE_ALLOCA" variable (:constant-flag t) nil [149369 149380])
            ("SAFE_NALLOCA" variable (:constant-flag t) nil [149710 149722])
            ("SAFE_ALLOCA_STRING" variable (:constant-flag t) nil [150186 150204])
            ("SAFE_FREE" variable (:constant-flag t) nil [150438 150447])
            ("SAFE_ALLOCA_LISP_EXTRA" variable (:constant-flag t) nil [150716 150738])
            ("SAFE_ALLOCA_LISP" variable (:constant-flag t) nil [151520 151536])
            ("USE_STACK_LISP_OBJECTS" variable (:constant-flag t) nil [152281 152303])
            ("STACK_CONS" variable (:constant-flag t) nil [153136 153146])
            ("AUTO_CONS_EXPR" variable (:constant-flag t) nil [153227 153241])
            ("AUTO_CONS" variable (:constant-flag t) nil [153590 153599])
            ("AUTO_LIST1" variable (:constant-flag t) nil [153661 153671])
            ("AUTO_LIST2" variable (:constant-flag t) nil [153769 153779])
            ("AUTO_LIST3" variable (:constant-flag t) nil [153924 153934])
            ("AUTO_LIST4" variable (:constant-flag t) nil [154099 154109])
            ("AUTO_STRING" variable (:constant-flag t) nil [154638 154649])
            ("AUTO_STRING_WITH_LEN" variable (:constant-flag t) nil [155062 155082])
            ("FOR_EACH_TAIL" variable (:constant-flag t) nil [155718 155731])
            ("FOR_EACH_TAIL_SAFE" variable (:constant-flag t) nil [155938 155956])
            ("tortoise" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [156132 156153])
            ("n" variable (:type "int") nil [156170 156172])
            ("q" variable (:type "unsigned short int") nil [156175 156196])
            ("FOR_EACH_TAIL_INTERNAL" variable (:constant-flag t) nil [156896 156918])
            ("FOR_EACH_ALIST_VALUE" variable (:constant-flag t) nil [157376 157396]))          
      :file "lisp.h"
      :pointmax 157927
      :fsize 157936
      :lastmodtime '(23302 6458 212595 686000)
      :unmatched-syntax '((symbol 157882 . 157899) (close-paren 157879 . 157880) (punctuation 157877 . 157878) (close-paren 157876 . 157877) (open-paren 157875 . 157876) (symbol 157858 . 157874) (close-paren 157852 . 157853) (semantic-list 157778 . 157852) (punctuation 157776 . 157777) (punctuation 157775 . 157776) (semantic-list 157679 . 157768) (open-paren 157678 . 157679) (IF 157675 . 157677) (open-paren 157671 . 157672) (close-paren 157669 . 157670) (VOID 157665 . 157669) (open-paren 157664 . 157665) (symbol 157655 . 157663) (VOID 157650 . 157654) (symbol 157643 . 157649) (punctuation 156198 . 156199) (close-paren 156197 . 156198) (semantic-list #("((a) > (b) ? (a) : (b))" 0 1 (macros (("b") ("a")))) 156165 . 156169) (symbol 156156 . 156164) (open-paren 156128 . 156129) (symbol 156105 . 156127) (STRUCT 156098 . 156104) (punctuation 152927 . 152928) (close-paren 152926 . 152927) (close-paren 152922 . 152923) (symbol 152893 . 152922) (punctuation 152892 . 152893) (punctuation 152890 . 152891) (punctuation 152889 . 152890) (symbol 152871 . 152885) (open-paren 152870 . 152871) (punctuation 152868 . 152869) (symbol 152851 . 152867) (punctuation 152845 . 152846) (symbol "false" 152823 . 152845) (punctuation 152821 . 152822) (symbol 152806 . 152820) (open-paren 152800 . 152801) (ENUM 152793 . 152797) (punctuation 152521 . 152522) (close-paren 152520 . 152521) (symbol 152514 . 152519) (punctuation 152512 . 152513) (symbol 152482 . 152511) (open-paren 152480 . 152481) (ENUM 152475 . 152479) (close-paren 152192 . 152193) (close-paren 152191 . 152192) (number 152190 . 152191) (punctuation 152188 . 152189) (number 152187 . 152188) (punctuation 152185 . 152186) (number 152184 . 152185) (open-paren 152183 . 152184) (symbol 152171 . 152182) (punctuation 152169 . 152170) (punctuation 152167 . 152168) (punctuation 152166 . 152167) (symbol 152156 . 152165) (symbol 152148 . 152155) (punctuation 152147 . 152148) (punctuation 152145 . 152146) (punctuation 152144 . 152145) (symbol "7" 152135 . 152143) (symbol 152127 . 152134) (punctuation 152125 . 152126) (punctuation 152124 . 152125) (punctuation 149114 . 149115) (close-paren 149113 . 149114) (semantic-list 149110 . 149113) (open-paren 149109 . 149110) (symbol 149088 . 149108) (close-paren 149086 . 149087) (symbol 149080 . 149086) (open-paren 149079 . 149080) (symbol 149064 . 149078) (punctuation 149063 . 149064) (VOID 149058 . 149062) (EXTERN 149051 . 149057) (punctuation 149048 . 149049) (close-paren 149047 . 149048) (number 149042 . 149046) (punctuation 149040 . 149041) (number 149037 . 149039) (punctuation 149035 . 149036) (symbol 149024 . 149034) (open-paren 149022 . 149023) (symbol 149011 . 149021) (ENUM 149006 . 149010) (punctuation 148352 . 148353) (close-paren 148351 . 148352) (VOID 148347 . 148351) (open-paren 148346 . 148347) (symbol 148329 . 148345) (VOID 148324 . 148328) (EXTERN 148317 . 148323) (close-paren 148258 . 148259) (semantic-list 148250 . 148255) (RETURN 148213 . 148219) (open-paren 148140 . 148141) (close-paren 148138 . 148139) (symbol 148135 . 148138) (punctuation 148134 . 148135) (CHAR 148129 . 148133) (CONST 148123 . 148128) (open-paren 148122 . 148123) (symbol 148114 . 148121) (punctuation 148112 . 148113) (CHAR 148107 . 148111) (symbol 148100 . 148106) (punctuation 148097 . 148098) (close-paren 148096 . 148097) (symbol 148087 . 148096) (punctuation 148085 . 148086) (punctuation 148084 . 148085) (CHAR 148079 . 148083) (CONST 148073 . 148078) (open-paren 148072 . 148073) (symbol 148055 . 148071) (punctuation 148054 . 148055) (CHAR 148049 . 148053) (EXTERN 148042 . 148048) (punctuation 148039 . 148040) (close-paren 148038 . 148039) (punctuation 148037 . 148038) (CHAR 148032 . 148036) (CONST 148026 . 148031) (open-paren 148025 . 148026) (symbol 148017 . 148024) (VOID 148012 . 148016) (EXTERN 148005 . 148011) (close-paren 148002 . 148003) (punctuation 147995 . 147996) (symbol 147990 . 147994) (RETURN 147983 . 147989) (number 147977 . 147978) (punctuation 147975 . 147976) (semantic-list 147961 . 147969) (open-paren 147902 . 147903) (close-paren 147900 . 147901) (symbol 147894 . 147900) (symbol 147882 . 147893) (punctuation 147880 . 147881) (symbol 147876 . 147880) (punctuation 147875 . 147876) (CHAR 147870 . 147874) (open-paren 147869 . 147870) (symbol 147858 . 147868) (punctuation 147856 . 147857) (CHAR 147851 . 147855) (symbol 147844 . 147850) (punctuation 147686 . 147687) (close-paren 147685 . 147686) (punctuation 147684 . 147685) (CONST 147678 . 147683) (CHAR 147673 . 147677) (punctuation 147671 . 147672) (punctuation 147670 . 147671) (punctuation 147669 . 147670) (CHAR 147664 . 147668) (open-paren 147663 . 147664) (symbol 147653 . 147662) (VOID 147648 . 147652) (EXTERN 147641 . 147647) (close-paren 147621 . 147622) (symbol 147610 . 147621) (open-paren 147609 . 147610) (symbol 147597 . 147608) (punctuation 147596 . 147597) (CHAR 147591 . 147595) (EXTERN 147584 . 147590) (close-paren 147564 . 147565) (punctuation 147563 . 147564) (CHAR 147558 . 147562) (CONST 147552 . 147557) (open-paren 147551 . 147552) (symbol 147543 . 147550) (punctuation 147542 . 147543) (CHAR 147537 . 147541) (EXTERN 147530 . 147536) (punctuation 147527 . 147528) (close-paren 147526 . 147527) (symbol 147517 . 147526) (punctuation 147515 . 147516) (symbol 147506 . 147515) (punctuation 147504 . 147505) (symbol 147495 . 147504) (punctuation 147493 . 147494) (punctuation 147492 . 147493) (symbol 147482 . 147491) (punctuation 147480 . 147481) (punctuation 147479 . 147480) (VOID 147474 . 147478) (open-paren 147473 . 147474) (symbol 147465 . 147472) (punctuation 147464 . 147465) (VOID 147459 . 147463) (EXTERN 147452 . 147458) (punctuation 147450 . 147451) (close-paren 147449 . 147450) (semantic-list 147444 . 147449) (open-paren 147443 . 147444) (symbol 147422 . 147442) (close-paren 147418 . 147419) (symbol 147409 . 147418) (punctuation 147407 . 147408) (symbol 147398 . 147407) (punctuation 147396 . 147397) (punctuation 147395 . 147396) (VOID 147390 . 147394) (open-paren 147389 . 147390) (symbol 147379 . 147388) (punctuation 147378 . 147379) (VOID 147373 . 147377) (EXTERN 147366 . 147372) (punctuation 147364 . 147365) (close-paren 147363 . 147364) (semantic-list 147358 . 147363) (open-paren 147357 . 147358) (symbol 147335 . 147356) (close-paren 147333 . 147334) (symbol 147324 . 147333) (punctuation 147322 . 147323) (symbol 147313 . 147322) (open-paren 147312 . 147313) (symbol 147303 . 147311) (punctuation 147302 . 147303) (VOID 147297 . 147301) (EXTERN 147290 . 147296) (punctuation 147288 . 147289) (close-paren 147287 . 147288) (punctuation 147286 . 147287) (VOID 147281 . 147285) (open-paren 147280 . 147281) (symbol 147274 . 147279) (VOID 147269 . 147273) (EXTERN 147262 . 147268) (punctuation 147260 . 147261) (close-paren 147259 . 147260) (semantic-list 147256 . 147259) (open-paren 147255 . 147256) (symbol 147234 . 147254) (close-paren 147232 . 147233) (symbol 147226 . 147232) (punctuation 147224 . 147225) (punctuation 147223 . 147224) (VOID 147218 . 147222) (open-paren 147217 . 147218) (symbol 147208 . 147216) (punctuation 147207 . 147208) (VOID 147202 . 147206) (EXTERN 147195 . 147201) (punctuation 147193 . 147194) (close-paren 147192 . 147193) (semantic-list 147189 . 147192) (open-paren 147188 . 147189) (symbol 147166 . 147187) (close-paren 147164 . 147165) (symbol 147158 . 147164) (open-paren 147157 . 147158) (symbol 147149 . 147156) (punctuation 147148 . 147149) (VOID 147143 . 147147) (EXTERN 147136 . 147142) (punctuation 147134 . 147135) (close-paren 147133 . 147134) (semantic-list 147130 . 147133) (open-paren 147129 . 147130) (symbol 147107 . 147128) (close-paren 147105 . 147106) (symbol 147099 . 147105) (open-paren 147098 . 147099) (symbol 147090 . 147097) (punctuation 147089 . 147090) (VOID 147084 . 147088) (EXTERN 147077 . 147083) (punctuation 147043 . 147044) (close-paren 147042 . 147043) (open-paren 147041 . 147042) (symbol 147032 . 147041) (CHAR 147027 . 147031) (EXTERN 147020 . 147026) (punctuation 147018 . 147019) (close-paren 147017 . 147018) (open-paren 147016 . 147017) (symbol 147008 . 147016) (CHAR 147003 . 147007) (EXTERN 146996 . 147002) (punctuation 146857 . 146858) (close-paren 146856 . 146857) (VOID 146852 . 146856) (open-paren 146851 . 146852) (symbol 146834 . 146850) (VOID 146829 . 146833) (EXTERN 146822 . 146828) (punctuation 146820 . 146821) (close-paren 146819 . 146820) (symbol 146813 . 146819) (open-paren 146812 . 146813) (symbol 146799 . 146811) (VOID 146794 . 146798) (EXTERN 146787 . 146793) (punctuation 146597 . 146598) (close-paren 146596 . 146597) (VOID 146592 . 146596) (open-paren 146591 . 146592) (symbol 146572 . 146590) (VOID 146567 . 146571) (EXTERN 146560 . 146566) (punctuation 146501 . 146502) (close-paren 146500 . 146501) (VOID 146496 . 146500) (open-paren 146495 . 146496) (symbol 146481 . 146494) (VOID 146476 . 146480) (EXTERN 146469 . 146475) (punctuation 146415 . 146416) (close-paren 146414 . 146415) (VOID 146410 . 146414) (open-paren 146409 . 146410) (symbol 146390 . 146408) (VOID 146385 . 146389) (EXTERN 146378 . 146384) (punctuation 146356 . 146357) (close-paren 146355 . 146356) (VOID 146351 . 146355) (open-paren 146350 . 146351) (symbol 146338 . 146349) (VOID 146333 . 146337) (EXTERN 146326 . 146332) (punctuation 146266 . 146267) (close-paren 146265 . 146266) (INT 146262 . 146265) (open-paren 146261 . 146262) (symbol 146243 . 146260) (punctuation 146242 . 146243) (CHAR 146237 . 146241) (EXTERN 146230 . 146236) (punctuation 146125 . 146126) (close-paren 146124 . 146125) (VOID 146120 . 146124) (open-paren 146119 . 146120) (symbol 146105 . 146118) (VOID 146100 . 146104) (EXTERN 146093 . 146099) (punctuation 146091 . 146092) (close-paren 146090 . 146091) (VOID 146086 . 146090) (open-paren 146085 . 146086) (symbol 146074 . 146084) (VOID 146069 . 146073) (EXTERN 146062 . 146068) (punctuation 146032 . 146033) (close-paren 146031 . 146032) (VOID 146027 . 146031) (open-paren 146026 . 146027) (symbol 146010 . 146025) (VOID 146005 . 146009) (EXTERN 145998 . 146004) (punctuation 145966 . 145967) (close-paren 145965 . 145966) (VOID 145961 . 145965) (open-paren 145960 . 145961) (symbol 145945 . 145959) (VOID 145940 . 145944) (EXTERN 145933 . 145939) (punctuation 145902 . 145903) (close-paren 145901 . 145902) (VOID 145897 . 145901) (open-paren 145896 . 145897) (symbol 145883 . 145895) (VOID 145878 . 145882) (EXTERN 145871 . 145877) (punctuation 145820 . 145821) (close-paren 145819 . 145820) (VOID 145815 . 145819) (open-paren 145814 . 145815) (symbol 145799 . 145813) (VOID 145794 . 145798) (EXTERN 145787 . 145793) (punctuation 145144 . 145145) (close-paren 145143 . 145144) (VOID 145139 . 145143) (open-paren 145138 . 145139) (symbol 145122 . 145137) (VOID 145117 . 145121) (EXTERN 145110 . 145116) (punctuation 145053 . 145054) (close-paren 145052 . 145053) (VOID 145048 . 145052) (open-paren 145047 . 145048) (symbol 145031 . 145046) (VOID 145026 . 145030) (EXTERN 145019 . 145025) (punctuation 144961 . 144962) (close-paren 144960 . 144961) (VOID 144956 . 144960) (open-paren 144955 . 144956) (symbol 144945 . 144954) (VOID 144940 . 144944) (EXTERN 144933 . 144939) (punctuation 144931 . 144932) (close-paren 144930 . 144931) (VOID 144926 . 144930) (open-paren 144925 . 144926) (symbol 144912 . 144924) (VOID 144907 . 144911) (EXTERN 144900 . 144906) (punctuation 144871 . 144872) (close-paren 144870 . 144871) (VOID 144866 . 144870) (open-paren 144865 . 144866) (symbol 144848 . 144864) (VOID 144843 . 144847) (EXTERN 144836 . 144842) (punctuation 144803 . 144804) (close-paren 144802 . 144803) (number 144801 . 144802) (punctuation 144799 . 144800) (number 144798 . 144799) (open-paren 144797 . 144798) (symbol 144773 . 144796) (close-paren 144769 . 144770) (punctuation 144768 . 144769) (punctuation 144767 . 144768) (punctuation 144766 . 144767) (punctuation 144764 . 144765) (symbol 144759 . 144764) (punctuation 144758 . 144759) (CHAR 144753 . 144757) (CONST 144747 . 144752) (open-paren 144746 . 144747) (symbol 144740 . 144745) (VOID 144735 . 144739) (EXTERN 144718 . 144724) (punctuation 144716 . 144717) (close-paren 144715 . 144716) (VOID 144711 . 144715) (open-paren 144710 . 144711) (symbol 144697 . 144709) (VOID 144692 . 144696) (EXTERN 144685 . 144691) (punctuation 144623 . 144624) (close-paren 144622 . 144623) (symbol 144611 . 144622) (punctuation 144609 . 144610) (BOOL 144605 . 144609) (punctuation 144558 . 144559) (symbol 144547 . 144558) (punctuation 144545 . 144546) (symbol 144534 . 144545) (punctuation 144487 . 144488) (symbol 144476 . 144487) (punctuation 144474 . 144475) (symbol 144463 . 144474) (open-paren 144462 . 144463) (symbol 144437 . 144461) (symbol 144425 . 144436) (EXTERN 144418 . 144424) (punctuation 144416 . 144417) (close-paren 144415 . 144416) (VOID 144411 . 144415) (open-paren 144410 . 144411) (symbol 144396 . 144409) (VOID 144391 . 144395) (EXTERN 144384 . 144390) (punctuation 144354 . 144355) (close-paren 144353 . 144354) (VOID 144349 . 144353) (open-paren 144348 . 144349) (symbol 144336 . 144347) (VOID 144331 . 144335) (EXTERN 144324 . 144330) (punctuation 144296 . 144297) (close-paren 144295 . 144296) (VOID 144291 . 144295) (open-paren 144290 . 144291) (symbol 144273 . 144289) (VOID 144268 . 144272) (EXTERN 144261 . 144267) (punctuation 144259 . 144260) (close-paren 144258 . 144259) (INT 144255 . 144258) (open-paren 144254 . 144255) (symbol 144236 . 144253) (symbol 144224 . 144235) (EXTERN 144217 . 144223) (punctuation 144215 . 144216) (close-paren 144214 . 144215) (VOID 144210 . 144214) (open-paren 144209 . 144210) (symbol 144190 . 144208) (VOID 144185 . 144189) (EXTERN 144178 . 144184) (punctuation 144145 . 144146) (close-paren 144144 . 144145) (VOID 144140 . 144144) (open-paren 144139 . 144140) (symbol 144125 . 144138) (VOID 144120 . 144124) (EXTERN 144113 . 144119) (punctuation 144083 . 144084) (close-paren 144082 . 144083) (VOID 144078 . 144082) (open-paren 144077 . 144078) (symbol 144060 . 144076) (VOID 144055 . 144059) (EXTERN 144048 . 144054) (punctuation 144046 . 144047) (close-paren 144045 . 144046) (punctuation 144044 . 144045) (symbol 144037 . 144043) (STRUCT 144030 . 144036) (open-paren 144029 . 144030) (symbol 144015 . 144028) (VOID 144010 . 144014) (EXTERN 144003 . 144009) (punctuation 144001 . 144002) (close-paren 144000 . 144001) (VOID 143996 . 144000) (open-paren 143995 . 143996) (symbol 143978 . 143994) (VOID 143973 . 143977) (EXTERN 143966 . 143972) (punctuation 143964 . 143965) (close-paren 143963 . 143964) (symbol 143952 . 143963) (open-paren 143951 . 143952) (symbol 143939 . 143950) (VOID 143934 . 143938) (EXTERN 143927 . 143933) (punctuation 143925 . 143926) (close-paren 143924 . 143925) (symbol 143913 . 143924) (open-paren 143912 . 143913) (symbol 143902 . 143911) (VOID 143897 . 143901) (EXTERN 143890 . 143896) (punctuation 143857 . 143858) (close-paren 143856 . 143857) (symbol 143845 . 143856) (punctuation 143843 . 143844) (symbol 143832 . 143843) (punctuation 143830 . 143831) (symbol 143819 . 143830) (punctuation 143817 . 143818) (symbol 143806 . 143817) (open-paren 143805 . 143806) (symbol 143793 . 143804) (INT 143789 . 143792) (EXTERN 143782 . 143788) (punctuation 143780 . 143781) (close-paren 143779 . 143780) (punctuation 143778 . 143779) (CONST 143772 . 143777) (CHAR 143767 . 143771) (punctuation 143765 . 143766) (INT 143762 . 143765) (punctuation 143760 . 143761) (punctuation 143759 . 143760) (CONST 143753 . 143758) (CHAR 143748 . 143752) (punctuation 143746 . 143747) (INT 143743 . 143746) (open-paren 143742 . 143743) (symbol 143723 . 143741) (INT 143719 . 143722) (EXTERN 143712 . 143718) (punctuation 143710 . 143711) (close-paren 143709 . 143710) (punctuation 143708 . 143709) (CONST 143702 . 143707) (CHAR 143697 . 143701) (open-paren 143696 . 143697) (symbol 143683 . 143695) (VOID 143678 . 143682) (EXTERN 143671 . 143677) (punctuation 143669 . 143670) (close-paren 143668 . 143669) (symbol 143659 . 143668) (punctuation 143657 . 143658) (punctuation 143656 . 143657) (CONST 143650 . 143655) (VOID 143645 . 143649) (punctuation 143643 . 143644) (INT 143640 . 143643) (open-paren 143639 . 143640) (symbol 143622 . 143638) (symbol 143612 . 143621) (EXTERN 143605 . 143611) (punctuation 143603 . 143604) (close-paren 143602 . 143603) (symbol 143593 . 143602) (punctuation 143591 . 143592) (punctuation 143590 . 143591) (CONST 143584 . 143589) (VOID 143579 . 143583) (punctuation 143577 . 143578) (INT 143574 . 143577) (open-paren 143573 . 143574) (symbol 143557 . 143572) (symbol 143547 . 143556) (EXTERN 143540 . 143546) (punctuation 143538 . 143539) (close-paren 143537 . 143538) (symbol 143528 . 143537) (punctuation 143526 . 143527) (punctuation 143525 . 143526) (CONST 143519 . 143524) (VOID 143514 . 143518) (punctuation 143512 . 143513) (INT 143509 . 143512) (open-paren 143508 . 143509) (symbol 143496 . 143507) (symbol 143486 . 143495) (EXTERN 143479 . 143485) (punctuation 143477 . 143478) (close-paren 143476 . 143477) (symbol 143467 . 143476) (punctuation 143465 . 143466) (punctuation 143464 . 143465) (VOID 143459 . 143463) (punctuation 143457 . 143458) (INT 143454 . 143457) (open-paren 143453 . 143454) (symbol 143437 . 143452) (symbol 143427 . 143436) (EXTERN 143420 . 143426) (punctuation 143418 . 143419) (close-paren 143417 . 143418) (symbol 143408 . 143417) (punctuation 143406 . 143407) (punctuation 143405 . 143406) (VOID 143400 . 143404) (punctuation 143398 . 143399) (INT 143395 . 143398) (open-paren 143394 . 143395) (symbol 143383 . 143393) (symbol 143373 . 143382) (EXTERN 143366 . 143372) (punctuation 143364 . 143365) (close-paren 143363 . 143364) (INT 143360 . 143363) (open-paren 143359 . 143360) (symbol 143347 . 143358) (INT 143343 . 143346) (EXTERN 143336 . 143342) (punctuation 143334 . 143335) (close-paren 143333 . 143334) (semantic-list 143330 . 143333) (INT 143327 . 143330) (open-paren 143326 . 143327) (symbol 143315 . 143325) (INT 143311 . 143314) (EXTERN 143304 . 143310) (punctuation 143302 . 143303) (close-paren 143301 . 143302) (INT 143298 . 143301) (punctuation 143296 . 143297) (INT 143293 . 143296) (punctuation 143291 . 143292) (punctuation 143290 . 143291) (CHAR 143285 . 143289) (CONST 143279 . 143284) (open-paren 143278 . 143279) (symbol 143267 . 143277) (INT 143263 . 143266) (EXTERN 143256 . 143262) (close-paren 143243 . 143244) (VOID 143239 . 143243) (open-paren 143238 . 143239) (symbol 143226 . 143237) (VOID 143221 . 143225) (EXTERN 143204 . 143210) (punctuation 143202 . 143203) (close-paren 143201 . 143202) (INT 143198 . 143201) (open-paren 143197 . 143198) (symbol 143181 . 143196) (VOID 143176 . 143180) (EXTERN 143169 . 143175) (punctuation 143167 . 143168) (close-paren 143166 . 143167) (VOID 143162 . 143166) (open-paren 143161 . 143162) (symbol 143149 . 143160) (VOID 143144 . 143148) (EXTERN 143137 . 143143) (punctuation 143135 . 143136) (close-paren 143134 . 143135) (symbol 143125 . 143134) (punctuation 143123 . 143124) (punctuation 143122 . 143123) (VOID 143117 . 143121) (open-paren 143116 . 143117) (symbol 143104 . 143115) (VOID 143099 . 143103) (EXTERN 143092 . 143098) (punctuation 143090 . 143091) (close-paren 143089 . 143090) (VOID 143085 . 143089) (open-paren 143084 . 143085) (symbol 143073 . 143083) (symbol 143063 . 143072) (EXTERN 143056 . 143062) (punctuation 143054 . 143055) (close-paren 143053 . 143054) (INT 143050 . 143053) (punctuation 143048 . 143049) (INT 143045 . 143048) (punctuation 143043 . 143044) (INT 143040 . 143043) (open-paren 143039 . 143040) (symbol 143023 . 143038) (INT 143019 . 143022) (EXTERN 143012 . 143018) (punctuation 143010 . 143011) (close-paren 143009 . 143010) (INT 143006 . 143009) (open-paren 143005 . 143006) (symbol 142995 . 143004) (VOID 142990 . 142994) (EXTERN 142983 . 142989) (punctuation 142981 . 142982) (close-paren 142980 . 142981) (INT 142977 . 142980) (open-paren 142976 . 142977) (symbol 142960 . 142975) (VOID 142955 . 142959) (EXTERN 142948 . 142954) (punctuation 142946 . 142947) (close-paren 142945 . 142946) (VOID 142941 . 142945) (open-paren 142940 . 142941) (symbol 142920 . 142939) (VOID 142915 . 142919) (EXTERN 142908 . 142914) (punctuation 142906 . 142907) (close-paren 142905 . 142906) (VOID 142901 . 142905) (open-paren 142900 . 142901) (symbol 142881 . 142899) (VOID 142876 . 142880) (EXTERN 142869 . 142875) (punctuation 142867 . 142868) (close-paren 142866 . 142867) (punctuation 142865 . 142866) (symbol 142848 . 142864) (STRUCT 142841 . 142847) (open-paren 142840 . 142841) (symbol 142824 . 142839) (VOID 142819 . 142823) (EXTERN 142812 . 142818) (punctuation 142810 . 142811) (close-paren 142809 . 142810) (punctuation 142808 . 142809) (symbol 142791 . 142807) (STRUCT 142784 . 142790) (open-paren 142783 . 142784) (symbol 142768 . 142782) (VOID 142763 . 142767) (EXTERN 142756 . 142762) (punctuation 142754 . 142755) (close-paren 142753 . 142754) (VOID 142749 . 142753) (open-paren 142748 . 142749) (symbol 142730 . 142747) (VOID 142725 . 142729) (EXTERN 142718 . 142724) (punctuation 142716 . 142717) (close-paren 142715 . 142716) (VOID 142711 . 142715) (open-paren 142710 . 142711) (symbol 142698 . 142709) (VOID 142693 . 142697) (EXTERN 142686 . 142692) (punctuation 142684 . 142685) (close-paren 142683 . 142684) (VOID 142679 . 142683) (open-paren 142678 . 142679) (symbol 142665 . 142677) (VOID 142660 . 142664) (EXTERN 142653 . 142659) (punctuation 142651 . 142652) (close-paren 142650 . 142651) (VOID 142646 . 142650) (open-paren 142645 . 142646) (symbol 142623 . 142644) (VOID 142618 . 142622) (EXTERN 142611 . 142617) (punctuation 142609 . 142610) (close-paren 142608 . 142609) (symbol 142607 . 142608) (CHAR 142602 . 142606) (open-paren 142601 . 142602) (symbol 142590 . 142600) (VOID 142585 . 142589) (EXTERN 142578 . 142584) (punctuation 142576 . 142577) (close-paren 142575 . 142576) (VOID 142571 . 142575) (open-paren 142570 . 142571) (symbol 142543 . 142569) (punctuation 142542 . 142543) (CHAR 142537 . 142541) (EXTERN 142530 . 142536) (punctuation 142528 . 142529) (close-paren 142527 . 142528) (VOID 142523 . 142527) (open-paren 142522 . 142523) (symbol 142504 . 142521) (VOID 142499 . 142503) (EXTERN 142492 . 142498) (punctuation 142490 . 142491) (close-paren 142489 . 142490) (punctuation 142488 . 142489) (CONST 142482 . 142487) (punctuation 142481 . 142482) (CHAR 142476 . 142480) (punctuation 142474 . 142475) (punctuation 142473 . 142474) (CONST 142467 . 142472) (punctuation 142466 . 142467) (CHAR 142461 . 142465) (punctuation 142459 . 142460) (punctuation 142458 . 142459) (CONST 142452 . 142457) (CHAR 142447 . 142451) (open-paren 142446 . 142447) (symbol 142430 . 142445) (INT 142426 . 142429) (EXTERN 142419 . 142425) (punctuation 142337 . 142338) (close-paren 142336 . 142337) (VOID 142332 . 142336) (open-paren 142331 . 142332) (symbol 142301 . 142330) (BOOL 142296 . 142300) (EXTERN 142289 . 142295) (punctuation 142160 . 142161) (close-paren 142159 . 142160) (VOID 142155 . 142159) (open-paren 142154 . 142155) (symbol 142140 . 142153) (VOID 142135 . 142139) (EXTERN 142128 . 142134) (punctuation 142098 . 142099) (close-paren 142097 . 142098) (VOID 142093 . 142097) (open-paren 142092 . 142093) (symbol 142079 . 142091) (VOID 142074 . 142078) (EXTERN 142067 . 142073) (punctuation 142038 . 142039) (close-paren 142037 . 142038) (symbol 142026 . 142037) (punctuation 142024 . 142025) (symbol 142013 . 142024) (open-paren 142012 . 142013) (symbol 141983 . 142011) (VOID 141978 . 141982) (EXTERN 141971 . 141977) (punctuation 141938 . 141939) (close-paren 141937 . 141938) (VOID 141933 . 141937) (open-paren 141932 . 141933) (symbol 141919 . 141931) (VOID 141914 . 141918) (EXTERN 141907 . 141913) (punctuation 141905 . 141906) (close-paren 141904 . 141905) (symbol 141893 . 141904) (punctuation 141855 . 141856) (symbol 141844 . 141855) (punctuation 141842 . 141843) (symbol 141831 . 141842) (punctuation 141821 . 141822) (symbol 141812 . 141821) (punctuation 141810 . 141811) (symbol 141801 . 141810) (open-paren 141800 . 141801) (symbol 141777 . 141799) (VOID 141772 . 141776) (EXTERN 141765 . 141771) (punctuation 141763 . 141764) (close-paren 141762 . 141763) (symbol 141753 . 141762) (punctuation 141751 . 141752) (symbol 141742 . 141751) (open-paren 141741 . 141742) (symbol 141727 . 141740) (VOID 141722 . 141726) (EXTERN 141715 . 141721) (punctuation 141713 . 141714) (close-paren 141712 . 141713) (VOID 141708 . 141712) (open-paren 141707 . 141708) (symbol 141687 . 141706) (VOID 141682 . 141686) (EXTERN 141675 . 141681) (punctuation 141673 . 141674) (close-paren 141672 . 141673) (BOOL 141668 . 141672) (punctuation 141666 . 141667) (symbol 141655 . 141666) (punctuation 141653 . 141654) (symbol 141644 . 141653) (open-paren 141643 . 141644) (symbol 141629 . 141642) (VOID 141624 . 141628) (EXTERN 141617 . 141623) (punctuation 141615 . 141616) (close-paren 141614 . 141615) (symbol 141605 . 141614) (punctuation 141603 . 141604) (symbol 141594 . 141603) (open-paren 141593 . 141594) (symbol 141579 . 141592) (VOID 141574 . 141578) (EXTERN 141567 . 141573) (punctuation 141565 . 141566) (close-paren 141564 . 141565) (punctuation 141563 . 141564) (symbol 141556 . 141562) (STRUCT 141549 . 141555) (open-paren 141548 . 141549) (symbol 141529 . 141547) (VOID 141524 . 141528) (EXTERN 141517 . 141523) (punctuation 141488 . 141489) (close-paren 141487 . 141488) (VOID 141483 . 141487) (open-paren 141482 . 141483) (symbol 141467 . 141481) (VOID 141462 . 141466) (EXTERN 141455 . 141461) (punctuation 141453 . 141454) (close-paren 141452 . 141453) (VOID 141448 . 141452) (open-paren 141447 . 141448) (symbol 141435 . 141446) (VOID 141430 . 141434) (EXTERN 141423 . 141429) (punctuation 141392 . 141393) (close-paren 141391 . 141392) (symbol 141380 . 141391) (open-paren 141379 . 141380) (symbol 141359 . 141378) (symbol 141347 . 141358) (EXTERN 141340 . 141346) (punctuation 141338 . 141339) (close-paren 141337 . 141338) (punctuation 141336 . 141337) (symbol 141324 . 141335) (punctuation 141322 . 141323) (symbol 141313 . 141322) (punctuation 141311 . 141312) (symbol 141300 . 141311) (punctuation 141291 . 141292) (symbol 141280 . 141291) (punctuation 141278 . 141279) (symbol 141267 . 141278) (punctuation 141265 . 141266) (symbol 141254 . 141265) (open-paren 141253 . 141254) (symbol 141238 . 141252) (symbol 141226 . 141237) (EXTERN 141219 . 141225) (punctuation 141217 . 141218) (close-paren 141216 . 141217) (VOID 141212 . 141216) (open-paren 141211 . 141212) (symbol 141194 . 141210) (VOID 141189 . 141193) (EXTERN 141182 . 141188) (punctuation 141149 . 141150) (close-paren 141148 . 141149) (BOOL 141144 . 141148) (open-paren 141143 . 141144) (symbol 141124 . 141142) (INT 141120 . 141123) (EXTERN 141113 . 141119) (punctuation 141111 . 141112) (close-paren 141110 . 141111) (VOID 141106 . 141110) (open-paren 141105 . 141106) (symbol 141093 . 141104) (VOID 141088 . 141092) (EXTERN 141081 . 141087) (punctuation 141079 . 141080) (close-paren 141078 . 141079) (BOOL 141074 . 141078) (punctuation 141072 . 141073) (BOOL 141068 . 141072) (punctuation 141066 . 141067) (symbol 141055 . 141066) (open-paren 141054 . 141055) (symbol 141039 . 141053) (symbol 141027 . 141038) (EXTERN 141020 . 141026) (punctuation 141018 . 141019) (close-paren 141017 . 141018) (symbol 141006 . 141017) (open-paren 141005 . 141006) (symbol 140989 . 141004) (symbol 140977 . 140988) (EXTERN 140970 . 140976) (punctuation 140968 . 140969) (close-paren 140967 . 140968) (VOID 140963 . 140967) (open-paren 140962 . 140963) (symbol 140943 . 140961) (symbol 140924 . 140942) (ENUM 140919 . 140923) (EXTERN 140912 . 140918) (punctuation 140910 . 140911) (close-paren 140909 . 140910) (symbol 140884 . 140906) (punctuation 140837 . 140838) (symbol 140818 . 140837) (punctuation 140754 . 140755) (symbol 140735 . 140754) (open-paren 140680 . 140681) (symbol 140659 . 140677) (ENUM 140654 . 140658) (punctuation 140626 . 140627) (close-paren 140625 . 140626) (VOID 140621 . 140625) (open-paren 140620 . 140621) (symbol 140603 . 140619) (VOID 140598 . 140602) (EXTERN 140591 . 140597) (punctuation 140589 . 140590) (close-paren 140588 . 140589) (VOID 140584 . 140588) (open-paren 140583 . 140584) (symbol 140559 . 140582) (VOID 140554 . 140558) (EXTERN 140547 . 140553) (punctuation 140545 . 140546) (close-paren 140544 . 140545) (VOID 140540 . 140544) (open-paren 140539 . 140540) (symbol 140525 . 140538) (VOID 140520 . 140524) (EXTERN 140513 . 140519) (punctuation 140511 . 140512) (close-paren 140510 . 140511) (VOID 140506 . 140510) (open-paren 140505 . 140506) (symbol 140489 . 140504) (VOID 140484 . 140488) (EXTERN 140477 . 140483) (punctuation 140475 . 140476) (close-paren 140474 . 140475) (symbol 140463 . 140474) (punctuation 140461 . 140462) (BOOL 140457 . 140461) (punctuation 140455 . 140456) (punctuation 140454 . 140455) (punctuation 140453 . 140454) (CHAR 140448 . 140452) (punctuation 140446 . 140447) (INT 140443 . 140446) (punctuation 140441 . 140442) (INT 140438 . 140441) (punctuation 140436 . 140437) (INT 140433 . 140436) (open-paren 140432 . 140433) (symbol 140420 . 140431) (VOID "void" 140403 . 140419) (EXTERN 140396 . 140402) (punctuation 140264 . 140265) (close-paren 140263 . 140264) (symbol 140252 . 140263) (open-paren 140251 . 140252) (symbol 140222 . 140250) (VOID 140217 . 140221) (EXTERN 140210 . 140216) (punctuation 140208 . 140209) (close-paren 140207 . 140208) (VOID 140203 . 140207) (open-paren 140202 . 140203) (symbol 140186 . 140201) (VOID 140181 . 140185) (EXTERN 140174 . 140180) (punctuation 140172 . 140173) (close-paren 140171 . 140172) (INT 140168 . 140171) (open-paren 140167 . 140168) (symbol 140148 . 140166) (VOID 140143 . 140147) (EXTERN 140136 . 140142) (punctuation 140022 . 140023) (close-paren 140021 . 140022) (INT 140018 . 140021) (open-paren 140017 . 140018) (symbol 139985 . 140016) (VOID 139980 . 139984) (EXTERN 139973 . 139979) (punctuation 139971 . 139972) (close-paren 139970 . 139971) (INT 139967 . 139970) (open-paren 139966 . 139967) (symbol 139937 . 139965) (VOID 139932 . 139936) (EXTERN 139925 . 139931) (punctuation 139916 . 139917) (close-paren 139915 . 139916) (INT 139912 . 139915) (open-paren 139911 . 139912) (symbol 139885 . 139910) (VOID 139880 . 139884) (EXTERN 139873 . 139879) (punctuation 139468 . 139469) (close-paren 139467 . 139468) (INT 139464 . 139467) (punctuation 139462 . 139463) (punctuation 139461 . 139462) (symbol 139448 . 139460) (STRUCT 139441 . 139447) (punctuation 139434 . 139435) (symbol 139423 . 139434) (punctuation 139421 . 139422) (BOOL 139417 . 139421) (punctuation 139415 . 139416) (INT 139412 . 139415) (punctuation 139410 . 139411) (INT 139407 . 139410) (punctuation 139405 . 139406) (symbol 139397 . 139405) (open-paren 139396 . 139397) (symbol 139368 . 139395) (INT 139364 . 139367) (EXTERN 139357 . 139363) (punctuation 139355 . 139356) (close-paren 139354 . 139355) (symbol 139343 . 139354) (open-paren 139342 . 139343) (symbol 139320 . 139341) (VOID 139315 . 139319) (EXTERN 139308 . 139314) (punctuation 138332 . 138333) (close-paren 138331 . 138332) (symbol 138320 . 138331) (punctuation 138318 . 138319) (INT 138315 . 138318) (open-paren 138314 . 138315) (symbol 138298 . 138313) (VOID 138293 . 138297) (EXTERN 138286 . 138292) (punctuation 138284 . 138285) (close-paren 138283 . 138284) (INT 138280 . 138283) (open-paren 138279 . 138280) (symbol 138264 . 138278) (punctuation 138263 . 138264) (CHAR 138258 . 138262) (EXTERN 138251 . 138257) (punctuation 138091 . 138092) (close-paren 138090 . 138091) (VOID 138086 . 138090) (open-paren 138085 . 138086) (symbol 138054 . 138084) (VOID 138049 . 138053) (punctuation 138047 . 138048) (close-paren 138046 . 138047) (VOID 138042 . 138046) (open-paren 138041 . 138042) (symbol 138006 . 138040) (VOID 138001 . 138005) (punctuation 137999 . 138000) (close-paren 137998 . 137999) (VOID 137994 . 137998) (open-paren 137993 . 137994) (symbol 137980 . 137992) (VOID 137975 . 137979) (punctuation 137895 . 137896) (close-paren 137894 . 137895) (INT 137891 . 137894) (punctuation 137889 . 137890) (INT 137886 . 137889) (open-paren 137885 . 137886) (symbol 137861 . 137884) (VOID 137856 . 137860) (EXTERN 137839 . 137845) (punctuation 137772 . 137773) (close-paren 137771 . 137772) (BOOL 137767 . 137771) (punctuation 137765 . 137766) (punctuation 137764 . 137765) (CHAR 137759 . 137763) (CONST 137753 . 137758) (punctuation 137751 . 137752) (punctuation 137750 . 137751) (CHAR 137745 . 137749) (CONST 137739 . 137744) (open-paren 137738 . 137739) (symbol 137722 . 137737) (symbol 137710 . 137721) (EXTERN 137703 . 137709) (punctuation 137538 . 137539) (close-paren 137537 . 137538) (VOID 137533 . 137537) (open-paren 137532 . 137533) (symbol 137518 . 137531) (VOID 137513 . 137517) (EXTERN 137506 . 137512) (punctuation 137504 . 137505) (close-paren 137503 . 137504) (symbol 137492 . 137503) (open-paren 137491 . 137492) (symbol 137469 . 137490) (VOID 137464 . 137468) (EXTERN 137457 . 137463) (punctuation 137455 . 137456) (close-paren 137454 . 137455) (symbol 137443 . 137454) (punctuation 137441 . 137442) (punctuation 137440 . 137441) (symbol 137434 . 137439) (STRUCT 137427 . 137433) (open-paren 137426 . 137427) (symbol 137410 . 137425) (symbol 137398 . 137409) (EXTERN 137391 . 137397) (punctuation 137389 . 137390) (close-paren 137388 . 137389) (symbol 137377 . 137388) (punctuation 137375 . 137376) (INT 137372 . 137375) (punctuation 137370 . 137371) (INT 137367 . 137370) (punctuation 137365 . 137366) (symbol 137354 . 137365) (open-paren 137353 . 137354) (symbol 137337 . 137352) (symbol 137325 . 137336) (EXTERN 137318 . 137324) (punctuation 137316 . 137317) (close-paren 137315 . 137316) (symbol 137304 . 137315) (punctuation 137302 . 137303) (symbol 137291 . 137302) (punctuation 137289 . 137290) (punctuation 137288 . 137289) (symbol 137276 . 137287) (open-paren 137275 . 137276) (symbol 137260 . 137274) (VOID 137255 . 137259) (EXTERN 137248 . 137254) (punctuation 137246 . 137247) (close-paren 137245 . 137246) (symbol 137234 . 137245) (punctuation 137232 . 137233) (symbol 137221 . 137232) (punctuation 137219 . 137220) (punctuation 137218 . 137219) (symbol 137212 . 137217) (STRUCT 137205 . 137211) (open-paren 137204 . 137205) (symbol 137186 . 137203) (VOID 137181 . 137185) (EXTERN 137174 . 137180) (punctuation 137144 . 137145) (close-paren 137143 . 137144) (VOID 137139 . 137143) (open-paren 137138 . 137139) (symbol 137123 . 137137) (VOID 137118 . 137122) (EXTERN 137111 . 137117) (punctuation 137109 . 137110) (close-paren 137108 . 137109) (symbol 137099 . 137108) (punctuation 137097 . 137098) (symbol 137088 . 137097) (punctuation 137086 . 137087) (symbol 137077 . 137086) (open-paren 137076 . 137077) (symbol 137058 . 137075) (BOOL 137053 . 137057) (EXTERN 137046 . 137052) (punctuation 137044 . 137045) (close-paren 137043 . 137044) (VOID 137039 . 137043) (open-paren 137038 . 137039) (symbol 137012 . 137037) (VOID 137007 . 137011) (EXTERN 137000 . 137006) (punctuation 136998 . 136999) (close-paren 136997 . 136998) (VOID 136993 . 136997) (open-paren 136992 . 136993) (symbol 136977 . 136991) (symbol 136967 . 136976) (EXTERN 136960 . 136966) (punctuation 136929 . 136930) (close-paren 136928 . 136929) (VOID 136924 . 136928) (open-paren 136923 . 136924) (symbol 136906 . 136922) (VOID 136901 . 136905) (EXTERN 136894 . 136900) (punctuation 136892 . 136893) (close-paren 136891 . 136892) (VOID 136887 . 136891) (open-paren 136886 . 136887) (symbol 136869 . 136885) (VOID 136864 . 136868) (EXTERN 136857 . 136863) (punctuation 136855 . 136856) (close-paren 136854 . 136855) (VOID 136850 . 136854) (open-paren 136849 . 136850) (symbol 136835 . 136848) (VOID 136830 . 136834) (EXTERN 136823 . 136829) (punctuation 136821 . 136822) (close-paren 136820 . 136821) (VOID 136816 . 136820) (open-paren 136815 . 136816) (symbol 136794 . 136814) (VOID 136789 . 136793) (EXTERN 136782 . 136788) (punctuation 136780 . 136781) (close-paren 136779 . 136780) (VOID 136775 . 136779) (open-paren 136774 . 136775) (symbol 136757 . 136773) (VOID 136752 . 136756) (EXTERN 136745 . 136751) (punctuation 136743 . 136744) (close-paren 136742 . 136743) (VOID 136738 . 136742) (open-paren 136737 . 136738) (symbol 136720 . 136736) (symbol 136708 . 136719) (EXTERN 136701 . 136707) (punctuation 136699 . 136700) (close-paren 136698 . 136699) (VOID 136694 . 136698) (open-paren 136693 . 136694) (symbol 136675 . 136692) (symbol 136663 . 136674) (EXTERN 136656 . 136662) (punctuation 136654 . 136655) (close-paren 136653 . 136654) (VOID 136649 . 136653) (open-paren 136648 . 136649) (symbol 136633 . 136647) (symbol 136621 . 136632) (EXTERN 136614 . 136620) (punctuation 136612 . 136613) (close-paren 136611 . 136612) (punctuation 136610 . 136611) (CHAR 136605 . 136609) (CONST 136599 . 136604) (punctuation 136597 . 136598) (symbol 136586 . 136597) (open-paren 136585 . 136586) (symbol 136566 . 136584) (VOID 136561 . 136565) (EXTERN 136554 . 136560) (punctuation 136552 . 136553) (close-paren 136551 . 136552) (symbol 136540 . 136551) (open-paren 136539 . 136540) (symbol 136524 . 136538) (VOID 136519 . 136523) (EXTERN 136512 . 136518) (punctuation 136510 . 136511) (close-paren 136509 . 136510) (BOOL 136505 . 136509) (open-paren 136504 . 136505) (symbol 136472 . 136503) (BOOL 136467 . 136471) (EXTERN 136460 . 136466) (punctuation 136458 . 136459) (close-paren 136457 . 136458) (VOID 136453 . 136457) (open-paren 136452 . 136453) (symbol 136412 . 136451) (BOOL 136407 . 136411) (EXTERN 136400 . 136406) (punctuation 136398 . 136399) (close-paren 136397 . 136398) (VOID 136393 . 136397) (open-paren 136392 . 136393) (symbol 136371 . 136391) (BOOL 136366 . 136370) (EXTERN 136359 . 136365) (punctuation 136313 . 136314) (close-paren 136312 . 136313) (INT 136309 . 136312) (open-paren 136308 . 136309) (symbol 136278 . 136307) (VOID 136273 . 136277) (punctuation 136251 . 136252) (close-paren 136250 . 136251) (VOID 136246 . 136250) (open-paren 136245 . 136246) (symbol 136224 . 136244) (VOID 136219 . 136223) (EXTERN 136212 . 136218) (punctuation 136210 . 136211) (close-paren 136209 . 136210) (punctuation 136208 . 136209) (INT 136204 . 136207) (punctuation 136202 . 136203) (symbol 136191 . 136202) (open-paren 136190 . 136191) (symbol 136175 . 136189) (symbol 136163 . 136174) (EXTERN 136156 . 136162) (punctuation 136154 . 136155) (close-paren 136153 . 136154) (symbol 136142 . 136153) (open-paren 136141 . 136142) (symbol 136126 . 136140) (symbol 136114 . 136125) (EXTERN 136107 . 136113) (punctuation 135993 . 135994) (close-paren 135992 . 135993) (VOID 135988 . 135992) (open-paren 135987 . 135988) (symbol 135972 . 135986) (VOID 135967 . 135971) (EXTERN 135960 . 135966) (punctuation 135851 . 135852) (close-paren 135850 . 135851) (VOID 135846 . 135850) (open-paren 135845 . 135846) (symbol 135829 . 135844) (VOID 135824 . 135828) (EXTERN 135817 . 135823) (punctuation 135815 . 135816) (close-paren 135814 . 135815) (VOID 135810 . 135814) (open-paren 135809 . 135810) (symbol 135791 . 135808) (VOID 135786 . 135790) (EXTERN 135779 . 135785) (punctuation 135746 . 135747) (close-paren 135745 . 135746) (VOID 135741 . 135745) (open-paren 135740 . 135741) (symbol 135721 . 135739) (VOID 135716 . 135720) (EXTERN 135709 . 135715) (punctuation 135707 . 135708) (close-paren 135706 . 135707) (VOID 135702 . 135706) (open-paren 135701 . 135702) (symbol 135682 . 135700) (VOID 135677 . 135681) (EXTERN 135670 . 135676) (punctuation 135634 . 135635) (close-paren 135633 . 135634) (VOID 135629 . 135633) (open-paren 135628 . 135629) (symbol 135612 . 135627) (VOID 135607 . 135611) (EXTERN 135600 . 135606) (punctuation 135567 . 135568) (close-paren 135566 . 135567) (VOID 135562 . 135566) (open-paren 135561 . 135562) (symbol 135545 . 135560) (VOID 135540 . 135544) (EXTERN 135533 . 135539) (punctuation 135531 . 135532) (close-paren 135530 . 135531) (VOID 135526 . 135530) (open-paren 135525 . 135526) (symbol 135507 . 135524) (VOID 135502 . 135506) (EXTERN 135495 . 135501) (punctuation 135493 . 135494) (close-paren 135492 . 135493) (symbol 135483 . 135492) (open-paren 135482 . 135483) (symbol 135467 . 135481) (symbol 135455 . 135466) (EXTERN 135448 . 135454) (punctuation 135338 . 135339) (close-paren 135337 . 135338) (VOID 135333 . 135337) (open-paren 135332 . 135333) (symbol 135313 . 135331) (VOID 135308 . 135312) (EXTERN 135301 . 135307) (punctuation 135299 . 135300) (close-paren 135298 . 135299) (VOID 135294 . 135298) (open-paren 135293 . 135294) (symbol 135278 . 135292) (VOID 135273 . 135277) (EXTERN 135266 . 135272) (punctuation 135264 . 135265) (close-paren 135263 . 135264) (punctuation 135262 . 135263) (symbol 135252 . 135261) (punctuation 135250 . 135251) (symbol 135241 . 135250) (punctuation 135231 . 135232) (symbol 135222 . 135231) (punctuation 135220 . 135221) (symbol 135211 . 135220) (open-paren 135210 . 135211) (symbol 135185 . 135209) (symbol 135175 . 135184) (EXTERN 135168 . 135174) (punctuation 135166 . 135167) (close-paren 135165 . 135166) (punctuation 135164 . 135165) (symbol 135154 . 135163) (punctuation 135152 . 135153) (symbol 135143 . 135152) (punctuation 135130 . 135131) (symbol 135121 . 135130) (punctuation 135119 . 135120) (symbol 135110 . 135119) (open-paren 135109 . 135110) (symbol 135088 . 135108) (symbol 135078 . 135087) (EXTERN 135071 . 135077) (punctuation 135069 . 135070) (close-paren 135068 . 135069) (punctuation 135067 . 135068) (symbol 135057 . 135066) (punctuation 135055 . 135056) (punctuation 135054 . 135055) (symbol 135044 . 135053) (punctuation 135042 . 135043) (symbol 135033 . 135042) (open-paren 135032 . 135033) (symbol 135008 . 135031) (symbol 134998 . 135007) (EXTERN 134991 . 134997) (punctuation 134989 . 134990) (close-paren 134988 . 134989) (BOOL 134984 . 134988) (punctuation 134982 . 134983) (symbol 134973 . 134982) (punctuation 134961 . 134962) (symbol 134952 . 134961) (punctuation 134950 . 134951) (symbol 134941 . 134950) (punctuation 134939 . 134940) (symbol 134930 . 134939) (punctuation 134928 . 134929) (symbol 134919 . 134928) (open-paren 134918 . 134919) (symbol 134905 . 134917) (symbol 134895 . 134904) (EXTERN 134888 . 134894) (punctuation 134886 . 134887) (close-paren 134885 . 134886) (BOOL 134881 . 134885) (punctuation 134879 . 134880) (punctuation 134878 . 134879) (symbol 134868 . 134877) (punctuation 134866 . 134867) (punctuation 134865 . 134866) (symbol 134855 . 134864) (punctuation 134853 . 134854) (symbol 134844 . 134853) (punctuation 134832 . 134833) (symbol 134823 . 134832) (punctuation 134821 . 134822) (symbol 134812 . 134821) (punctuation 134810 . 134811) (symbol 134801 . 134810) (punctuation 134799 . 134800) (symbol 134790 . 134799) (open-paren 134789 . 134790) (symbol 134776 . 134788) (symbol 134766 . 134775) (EXTERN 134759 . 134765) (punctuation 134757 . 134758) (close-paren 134756 . 134757) (symbol 134745 . 134756) (punctuation 134743 . 134744) (symbol 134734 . 134743) (punctuation 134732 . 134733) (symbol 134723 . 134732) (punctuation 134687 . 134688) (symbol 134678 . 134687) (punctuation 134676 . 134677) (symbol 134667 . 134676) (punctuation 134665 . 134666) (symbol 134654 . 134665) (open-paren 134653 . 134654) (symbol 134637 . 134652) (symbol 134627 . 134636) (EXTERN 134620 . 134626) (punctuation 134618 . 134619) (close-paren 134617 . 134618) (symbol 134608 . 134617) (punctuation 134598 . 134599) (punctuation 134597 . 134598) (CHAR 134592 . 134596) (CONST 134586 . 134591) (punctuation 134584 . 134585) (symbol 134573 . 134584) (open-paren 134572 . 134573) (symbol 134540 . 134571) (symbol 134530 . 134539) (EXTERN 134523 . 134529) (close-paren 134520 . 134521) (RETURN 134448 . 134454) (open-paren 134444 . 134445) (close-paren 134442 . 134443) (symbol 134436 . 134442) (symbol 134424 . 134435) (punctuation 134422 . 134423) (symbol 134416 . 134422) (symbol 134404 . 134415) (open-paren 134403 . 134404) (symbol 134373 . 134402) (symbol 134363 . 134372) (symbol 134356 . 134362) (close-paren 134353 . 134354) (RETURN 134295 . 134301) (open-paren 134291 . 134292) (close-paren 134289 . 134290) (symbol 134283 . 134289) (symbol 134271 . 134282) (punctuation 134269 . 134270) (symbol 134263 . 134269) (symbol 134251 . 134262) (open-paren 134250 . 134251) (symbol 134232 . 134249) (symbol 134222 . 134231) (symbol 134215 . 134221) (punctuation 134212 . 134213) (close-paren 134211 . 134212) (symbol 134200 . 134211) (punctuation 134188 . 134189) (symbol 134177 . 134188) (punctuation 134175 . 134176) (symbol 134164 . 134175) (open-paren 134163 . 134164) (symbol 134136 . 134162) (symbol 134126 . 134135) (EXTERN 134119 . 134125) (punctuation 134117 . 134118) (close-paren 134116 . 134117) (BOOL 134112 . 134116) (punctuation 134110 . 134111) (BOOL 134106 . 134110) (punctuation 134104 . 134105) (symbol 134093 . 134104) (punctuation 134083 . 134084) (punctuation 134082 . 134083) (symbol 134069 . 134081) (STRUCT 134062 . 134068) (punctuation 134052 . 134053) (symbol 134041 . 134052) (open-paren 134040 . 134041) (symbol 134024 . 134039) (punctuation 134023 . 134024) (symbol 134005 . 134022) (STRUCT 133998 . 134004) (EXTERN 133991 . 133997) (punctuation 133968 . 133969) (close-paren 133967 . 133968) (VOID 133963 . 133967) (open-paren 133962 . 133963) (symbol 133932 . 133961) (VOID 133927 . 133931) (EXTERN 133920 . 133926) (punctuation 133918 . 133919) (close-paren 133917 . 133918) (symbol 133911 . 133917) (symbol 133901 . 133910) (punctuation 133899 . 133900) (symbol 133893 . 133899) (symbol 133883 . 133892) (punctuation 133849 . 133850) (symbol 133841 . 133849) (symbol 133831 . 133840) (open-paren 133830 . 133831) (symbol 133811 . 133829) (VOID 133806 . 133810) (EXTERN 133799 . 133805) (punctuation 133797 . 133798) (close-paren 133796 . 133797) (VOID 133792 . 133796) (open-paren 133791 . 133792) (symbol 133771 . 133790) (VOID 133766 . 133770) (EXTERN 133759 . 133765) (punctuation 133757 . 133758) (close-paren 133756 . 133757) (VOID 133752 . 133756) (open-paren 133751 . 133752) (symbol 133731 . 133750) (VOID 133726 . 133730) (EXTERN 133719 . 133725) (punctuation 133688 . 133689) (close-paren 133687 . 133688) (VOID 133683 . 133687) (open-paren 133682 . 133683) (symbol 133667 . 133681) (VOID 133662 . 133666) (EXTERN 133655 . 133661) (punctuation 133653 . 133654) (close-paren 133652 . 133653) (VOID 133648 . 133652) (open-paren 133647 . 133648) (symbol 133635 . 133646) (VOID 133630 . 133634) (EXTERN 133623 . 133629) (punctuation 133621 . 133622) (close-paren 133620 . 133621) (symbol 133609 . 133620) (open-paren 133608 . 133609) (symbol 133580 . 133607) (BOOL 133575 . 133579) (EXTERN 133568 . 133574) (punctuation 133566 . 133567) (close-paren 133565 . 133566) (symbol 133554 . 133565) (open-paren 133553 . 133554) (symbol 133536 . 133552) (BOOL 133531 . 133535) (EXTERN 133524 . 133530) (punctuation 133522 . 133523) (close-paren 133521 . 133522) (punctuation 133520 . 133521) (CHAR 133515 . 133519) (CONST 133509 . 133514) (punctuation 133507 . 133508) (INT 133504 . 133507) (open-paren 133503 . 133504) (symbol 133486 . 133502) (symbol 133474 . 133485) (EXTERN 133467 . 133473) (punctuation 133465 . 133466) (close-paren 133464 . 133465) (symbol 133453 . 133464) (open-paren 133452 . 133453) (symbol 133431 . 133451) (BOOL 133426 . 133430) (EXTERN 133419 . 133425) (punctuation 133417 . 133418) (close-paren 133416 . 133417) (symbol 133405 . 133416) (punctuation 133403 . 133404) (punctuation 133402 . 133403) (CHAR 133397 . 133401) (CONST 133391 . 133396) (open-paren 133390 . 133391) (symbol 133365 . 133389) (VOID 133360 . 133364) (EXTERN 133343 . 133349) (punctuation 133341 . 133342) (close-paren 133340 . 133341) (symbol 133329 . 133340) (punctuation 133327 . 133328) (punctuation 133326 . 133327) (CHAR 133321 . 133325) (CONST 133315 . 133320) (open-paren 133314 . 133315) (symbol 133296 . 133313) (VOID 133291 . 133295) (EXTERN 133274 . 133280) (punctuation 133272 . 133273) (close-paren 133271 . 133272) (INT 133268 . 133271) (punctuation 133266 . 133267) (symbol 133255 . 133266) (punctuation 133253 . 133254) (punctuation 133252 . 133253) (CHAR 133247 . 133251) (CONST 133241 . 133246) (open-paren 133240 . 133241) (symbol 133222 . 133239) (VOID 133217 . 133221) (EXTERN 133200 . 133206) (punctuation 133198 . 133199) (close-paren 133197 . 133198) (symbol 133186 . 133197) (open-paren 133185 . 133186) (symbol 133164 . 133184) (VOID 133159 . 133163) (EXTERN 133152 . 133158) (punctuation 133150 . 133151) (close-paren 133149 . 133150) (punctuation 133148 . 133149) (VOID 133143 . 133147) (open-paren 133142 . 133143) (symbol 133128 . 133141) (VOID 133123 . 133127) (EXTERN 133116 . 133122) (punctuation 133114 . 133115) (close-paren 133113 . 133114) (INT 133110 . 133113) (open-paren 133109 . 133110) (symbol 133091 . 133108) (VOID 133086 . 133090) (EXTERN 133079 . 133085) (punctuation 133077 . 133078) (close-paren 133076 . 133077) (INT 133073 . 133076) (punctuation 133071 . 133072) (symbol 133060 . 133071) (punctuation 133053 . 133054) (symbol 133042 . 133053) (punctuation 133040 . 133041) (symbol 133029 . 133040) (punctuation 133027 . 133028) (symbol 133016 . 133027) (punctuation 133009 . 133010) (symbol 132998 . 133009) (punctuation 132996 . 132997) (symbol 132985 . 132996) (punctuation 132983 . 132984) (symbol 132972 . 132983) (open-paren 132971 . 132972) (symbol 132958 . 132970) (symbol 132946 . 132957) (EXTERN 132939 . 132945) (punctuation 132937 . 132938) (close-paren 132936 . 132937) (symbol 132925 . 132936) (open-paren 132924 . 132925) (symbol 132901 . 132923) (symbol 132889 . 132900) (EXTERN 132882 . 132888) (punctuation 132850 . 132851) (close-paren 132849 . 132850) (VOID 132845 . 132849) (open-paren 132844 . 132845) (symbol 132829 . 132843) (VOID 132824 . 132828) (EXTERN 132817 . 132823) (punctuation 132815 . 132816) (close-paren 132814 . 132815) (symbol 132805 . 132814) (punctuation 132803 . 132804) (symbol 132794 . 132803) (punctuation 132792 . 132793) (punctuation 132791 . 132792) (symbol 132784 . 132790) (STRUCT 132777 . 132783) (open-paren 132776 . 132777) (symbol 132763 . 132775) (symbol 132751 . 132762) (EXTERN 132744 . 132750) (punctuation 132742 . 132743) (close-paren 132741 . 132742) (symbol 132732 . 132741) (punctuation 132730 . 132731) (symbol 132721 . 132730) (punctuation 132672 . 132673) (symbol 132661 . 132672) (punctuation 132659 . 132660) (symbol 132648 . 132659) (open-paren 132647 . 132648) (symbol 132620 . 132646) (symbol 132608 . 132619) (EXTERN 132601 . 132607) (punctuation 132599 . 132600) (close-paren 132598 . 132599) (symbol 132589 . 132598) (punctuation 132587 . 132588) (symbol 132578 . 132587) (punctuation 132576 . 132577) (symbol 132565 . 132576) (punctuation 132563 . 132564) (symbol 132552 . 132563) (open-paren 132551 . 132552) (symbol 132535 . 132550) (symbol 132523 . 132534) (EXTERN 132516 . 132522) (punctuation 132514 . 132515) (close-paren 132513 . 132514) (symbol 132502 . 132513) (punctuation 132500 . 132501) (symbol 132489 . 132500) (punctuation 132487 . 132488) (symbol 132476 . 132487) (open-paren 132475 . 132476) (symbol 132453 . 132474) (symbol 132441 . 132452) (EXTERN 132434 . 132440) (punctuation 132432 . 132433) (close-paren 132431 . 132432) (punctuation 132430 . 132431) (symbol 132418 . 132429) (STRUCT 132411 . 132417) (open-paren 132410 . 132411) (symbol 132395 . 132409) (VOID 132390 . 132394) (EXTERN 132383 . 132389) (punctuation 132381 . 132382) (close-paren 132380 . 132381) (symbol 132369 . 132380) (open-paren 132368 . 132369) (symbol 132354 . 132367) (VOID 132349 . 132353) (EXTERN 132342 . 132348) (punctuation 132340 . 132341) (close-paren 132339 . 132340) (symbol 132330 . 132339) (punctuation 132328 . 132329) (punctuation 132327 . 132328) (symbol 132320 . 132326) (STRUCT 132313 . 132319) (open-paren 132312 . 132313) (symbol 132289 . 132311) (symbol 132279 . 132288) (EXTERN 132272 . 132278) (punctuation 132270 . 132271) (close-paren 132269 . 132270) (symbol 132260 . 132269) (punctuation 132258 . 132259) (punctuation 132257 . 132258) (symbol 132250 . 132256) (STRUCT 132243 . 132249) (open-paren 132242 . 132243) (symbol 132219 . 132241) (symbol 132209 . 132218) (EXTERN 132202 . 132208) (punctuation 132200 . 132201) (close-paren 132199 . 132200) (punctuation 132198 . 132199) (symbol 132191 . 132197) (STRUCT 132184 . 132190) (open-paren 132183 . 132184) (symbol 132163 . 132182) (VOID 132158 . 132162) (EXTERN 132151 . 132157) (punctuation 132149 . 132150) (close-paren 132148 . 132149) (symbol 132137 . 132148) (open-paren 132136 . 132137) (symbol 132115 . 132135) (symbol 132105 . 132114) (EXTERN 132098 . 132104) (punctuation 132096 . 132097) (close-paren 132095 . 132096) (symbol 132084 . 132095) (open-paren 132083 . 132084) (symbol 132067 . 132082) (symbol 132057 . 132066) (EXTERN 132050 . 132056) (punctuation 132018 . 132019) (close-paren 132017 . 132018) (VOID 132013 . 132017) (open-paren 132012 . 132013) (symbol 131997 . 132011) (VOID 131992 . 131996) (EXTERN 131985 . 131991) (punctuation 131983 . 131984) (close-paren 131982 . 131983) (VOID 131978 . 131982) (open-paren 131977 . 131978) (symbol 131962 . 131976) (VOID 131957 . 131961) (EXTERN 131950 . 131956) (punctuation 131948 . 131949) (close-paren 131947 . 131948) (INT 131944 . 131947) (open-paren 131943 . 131944) (symbol 131931 . 131942) (VOID 131926 . 131930) (EXTERN 131919 . 131925) (punctuation 131917 . 131918) (close-paren 131916 . 131917) (VOID 131912 . 131916) (open-paren 131911 . 131912) (symbol 131894 . 131910) (VOID 131889 . 131893) (EXTERN 131882 . 131888) (punctuation 131880 . 131881) (close-paren 131879 . 131880) (symbol 131868 . 131879) (open-paren 131867 . 131868) (symbol 131847 . 131866) (symbol 131835 . 131846) (EXTERN 131828 . 131834) (punctuation 131826 . 131827) (close-paren 131825 . 131826) (symbol 131814 . 131825) (open-paren 131813 . 131814) (symbol 131793 . 131812) (symbol 131781 . 131792) (EXTERN 131774 . 131780) (punctuation 131772 . 131773) (close-paren 131771 . 131772) (symbol 131762 . 131771) (open-paren 131761 . 131762) (symbol 131743 . 131760) (BOOL 131738 . 131742) (EXTERN 131731 . 131737) (punctuation 131729 . 131730) (close-paren 131728 . 131729) (symbol 131717 . 131728) (punctuation 131715 . 131716) (symbol 131704 . 131715) (punctuation 131702 . 131703) (symbol 131691 . 131702) (punctuation 131648 . 131649) (BOOL 131644 . 131648) (punctuation 131642 . 131643) (symbol 131631 . 131642) (punctuation 131629 . 131630) (symbol 131618 . 131629) (open-paren 131617 . 131618) (symbol 131589 . 131616) (VOID 131584 . 131588) (EXTERN 131577 . 131583) (punctuation 131575 . 131576) (close-paren 131574 . 131575) (symbol 131565 . 131574) (punctuation 131563 . 131564) (symbol 131554 . 131563) (open-paren 131553 . 131554) (symbol 131527 . 131552) (VOID 131522 . 131526) (EXTERN 131515 . 131521) (punctuation 131513 . 131514) (close-paren 131512 . 131513) (symbol 131503 . 131512) (punctuation 131501 . 131502) (symbol 131492 . 131501) (open-paren 131491 . 131492) (symbol 131464 . 131490) (VOID 131459 . 131463) (EXTERN 131452 . 131458) (punctuation 131450 . 131451) (close-paren 131449 . 131450) (symbol 131440 . 131449) (punctuation 131438 . 131439) (symbol 131429 . 131438) (open-paren 131428 . 131429) (symbol 131401 . 131427) (VOID 131396 . 131400) (EXTERN 131389 . 131395) (punctuation 131387 . 131388) (close-paren 131386 . 131387) (symbol 131375 . 131386) (open-paren 131374 . 131375) (symbol 131365 . 131373) (VOID 131360 . 131364) (EXTERN 131343 . 131349) (punctuation 131341 . 131342) (close-paren 131340 . 131341) (VOID 131336 . 131340) (open-paren 131335 . 131336) (symbol 131299 . 131334) (symbol 131287 . 131298) (EXTERN 131280 . 131286) (punctuation 131278 . 131279) (close-paren 131277 . 131278) (symbol 131266 . 131277) (open-paren 131265 . 131266) (symbol 131237 . 131264) (BOOL 131232 . 131236) (EXTERN 131225 . 131231) (punctuation 131194 . 131195) (close-paren 131193 . 131194) (VOID 131189 . 131193) (open-paren 131188 . 131189) (symbol 131172 . 131187) (VOID 131167 . 131171) (EXTERN 131160 . 131166) (punctuation 131158 . 131159) (close-paren 131157 . 131158) (BOOL 131153 . 131157) (open-paren 131152 . 131153) (symbol 131139 . 131151) (VOID 131134 . 131138) (EXTERN 131127 . 131133) (punctuation 131125 . 131126) (close-paren 131124 . 131125) (BOOL 131120 . 131124) (punctuation 131118 . 131119) (symbol 131109 . 131118) (punctuation 131098 . 131099) (symbol 131089 . 131098) (punctuation 131087 . 131088) (symbol 131078 . 131087) (punctuation 131076 . 131077) (symbol 131067 . 131076) (open-paren 131066 . 131067) (symbol 131042 . 131065) (symbol 131030 . 131041) (EXTERN 131023 . 131029) (punctuation 131021 . 131022) (close-paren 131020 . 131021) (BOOL 131016 . 131020) (punctuation 131014 . 131015) (symbol 131005 . 131014) (punctuation 131003 . 131004) (symbol 130994 . 131003) (open-paren 130993 . 130994) (symbol 130974 . 130992) (symbol 130962 . 130973) (EXTERN 130955 . 130961) (punctuation 130953 . 130954) (close-paren 130952 . 130953) (VOID 130948 . 130952) (open-paren 130947 . 130948) (symbol 130933 . 130946) (VOID 130928 . 130932) (EXTERN 130911 . 130917) (punctuation 130909 . 130910) (close-paren 130908 . 130909) (symbol 130897 . 130908) (open-paren 130896 . 130897) (symbol 130871 . 130895) (VOID 130866 . 130870) (EXTERN 130859 . 130865) (punctuation 130857 . 130858) (close-paren 130856 . 130857) (symbol 130845 . 130856) (open-paren 130844 . 130845) (symbol 130821 . 130843) (VOID 130816 . 130820) (EXTERN 130809 . 130815) (punctuation 130807 . 130808) (close-paren 130806 . 130807) (VOID 130802 . 130806) (open-paren 130801 . 130802) (symbol 130779 . 130800) (symbol 130767 . 130778) (EXTERN 130760 . 130766) (punctuation 130758 . 130759) (close-paren 130757 . 130758) (VOID 130753 . 130757) (open-paren 130752 . 130753) (symbol 130732 . 130751) (symbol 130720 . 130731) (EXTERN 130713 . 130719) (punctuation 130711 . 130712) (close-paren 130710 . 130711) (symbol 130699 . 130710) (open-paren 130698 . 130699) (symbol 130690 . 130697) (VOID 130685 . 130689) (EXTERN 130678 . 130684) (punctuation 130646 . 130647) (close-paren 130645 . 130646) (VOID 130641 . 130645) (open-paren 130640 . 130641) (symbol 130627 . 130639) (VOID 130622 . 130626) (EXTERN 130615 . 130621) (punctuation 130577 . 130578) (close-paren 130576 . 130577) (VOID 130572 . 130576) (open-paren 130571 . 130572) (symbol 130556 . 130570) (VOID 130551 . 130555) (EXTERN 130544 . 130550) (punctuation 130542 . 130543) (close-paren 130541 . 130542) (BOOL 130537 . 130541) (open-paren 130536 . 130537) (symbol 130513 . 130535) (VOID 130508 . 130512) (EXTERN 130501 . 130507) (punctuation 130499 . 130500) (close-paren 130498 . 130499) (VOID 130494 . 130498) (open-paren 130493 . 130494) (symbol 130480 . 130492) (VOID 130475 . 130479) (EXTERN 130468 . 130474) (punctuation 130466 . 130467) (close-paren 130465 . 130466) (punctuation 130464 . 130465) (symbol 130443 . 130463) (STRUCT 130436 . 130442) (CONST 130430 . 130435) (open-paren 130429 . 130430) (symbol 130407 . 130428) (symbol 130395 . 130406) (EXTERN 130388 . 130394) (punctuation 130386 . 130387) (close-paren 130385 . 130386) (punctuation 130384 . 130385) (symbol 130372 . 130383) (punctuation 130370 . 130371) (symbol 130361 . 130370) (punctuation 130359 . 130360) (symbol 130348 . 130359) (open-paren 130347 . 130348) (symbol 130332 . 130346) (symbol 130320 . 130331) (EXTERN 130313 . 130319) (punctuation 130276 . 130277) (close-paren 130275 . 130276) (symbol 130274 . 130275) (punctuation 130273 . 130274) (VOID 130268 . 130272) (punctuation 130266 . 130267) (semantic-list 130258 . 130266) (semantic-list 130245 . 130257) (VOID 130240 . 130244) (open-paren 130239 . 130240) (symbol 130225 . 130238) (symbol 130213 . 130224) (EXTERN 130206 . 130212) (close-paren 130156 . 130157) (RETURN 130120 . 130126) (punctuation 130116 . 130117) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MODULE_FUNCTIONP" 130095 . 130111)))) 130086 . 130116) (open-paren 130082 . 130083) (close-paren 130080 . 130081) (symbol 130079 . 130080) (symbol 130067 . 130078) (open-paren 130066 . 130067) (symbol 130049 . 130065) (punctuation 130047 . 130048) (symbol 130026 . 130046) (STRUCT 130019 . 130025) (symbol 130012 . 130018) (close-paren 130009 . 130010) (RETURN 129961 . 129967) (open-paren 129957 . 129958) (close-paren 129955 . 129956) (symbol 129954 . 129955) (symbol 129942 . 129953) (open-paren 129941 . 129942) (symbol 129924 . 129940) (BOOL 129919 . 129923) (symbol 129912 . 129918) (punctuation 129909 . 129910) (close-paren 129908 . 129909) (open-paren 129690 . 129691) (symbol 129669 . 129689) (STRUCT 129662 . 129668) (punctuation 129380 . 129381) (close-paren 129379 . 129380) (punctuation 129378 . 129379) (VOID 129373 . 129377) (punctuation 129371 . 129372) (semantic-list 129369 . 129371) (symbol 129357 . 129368) (punctuation 129348 . 129349) (symbol 129339 . 129348) (punctuation 129337 . 129338) (punctuation 129336 . 129337) (symbol 129326 . 129335) (open-paren 129325 . 129326) (close-paren 129323 . 129324) (symbol 129313 . 129323) (punctuation 129312 . 129313) (open-paren 129311 . 129312) (symbol 129299 . 129310) (TYPEDEF 129291 . 129298) (punctuation 128958 . 128959) (close-paren 128957 . 128958) (symbol 128951 . 128957) (punctuation 128950 . 128951) (symbol 128938 . 128949) (STRUCT 128931 . 128937) (open-paren 128930 . 128931) (symbol 128901 . 128929) (BOOL 128896 . 128900) (EXTERN 128889 . 128895) (punctuation 128887 . 128888) (close-paren 128886 . 128887) (VOID 128882 . 128886) (open-paren 128881 . 128882) (symbol 128858 . 128880) (symbol 128846 . 128857) (punctuation 128844 . 128845) (close-paren 128843 . 128844) (symbol 128838 . 128843) (symbol 128826 . 128837) (open-paren 128825 . 128826) (symbol 128811 . 128824) (VOID 128806 . 128810) (EXTERN 128799 . 128805) (punctuation 128797 . 128798) (close-paren 128796 . 128797) (symbol 128793 . 128796) (punctuation 128792 . 128793) (symbol 128780 . 128791) (UNION 128774 . 128779) (punctuation 128772 . 128773) (symbol 128767 . 128772) (punctuation 128766 . 128767) (symbol 128754 . 128765) (UNION 128748 . 128753) (open-paren 128747 . 128748) (symbol 128734 . 128746) (VOID 128729 . 128733) (EXTERN 128722 . 128728) (punctuation 128720 . 128721) (close-paren 128719 . 128720) (symbol 128710 . 128719) (punctuation 128708 . 128709) (punctuation 128707 . 128708) (symbol 128695 . 128706) (punctuation 128693 . 128694) (symbol 128682 . 128693) (open-paren 128681 . 128682) (symbol 128661 . 128680) (symbol 128651 . 128660) (EXTERN 128644 . 128650) (punctuation 128642 . 128643) (close-paren 128641 . 128642) (symbol 128630 . 128641) (open-paren 128629 . 128630) (symbol 128617 . 128628) (VOID 128612 . 128616) (EXTERN 128605 . 128611) (punctuation 128603 . 128604) (close-paren 128602 . 128603) (VOID 128598 . 128602) (open-paren 128597 . 128598) (symbol 128584 . 128596) (VOID 128579 . 128583) (EXTERN 128572 . 128578) (punctuation 128570 . 128571) (close-paren 128569 . 128570) (VOID 128565 . 128569) (open-paren 128564 . 128565) (symbol 128554 . 128563) (VOID 128549 . 128553) (EXTERN 128542 . 128548) (punctuation 128540 . 128541) (close-paren 128539 . 128540) (symbol 128528 . 128539) (punctuation 128526 . 128527) (symbol 128515 . 128526) (punctuation 128513 . 128514) (symbol 128502 . 128513) (open-paren 128501 . 128502) (symbol 128490 . 128500) (symbol 128478 . 128489) (EXTERN 128471 . 128477) (punctuation 128469 . 128470) (close-paren 128468 . 128469) (symbol 128457 . 128468) (punctuation 128455 . 128456) (symbol 128444 . 128455) (open-paren 128443 . 128444) (symbol 128432 . 128442) (symbol 128420 . 128431) (EXTERN 128413 . 128419) (punctuation 128411 . 128412) (close-paren 128410 . 128411) (punctuation 128409 . 128410) (punctuation 128408 . 128409) (punctuation 128407 . 128408) (punctuation 128405 . 128406) (symbol 128394 . 128405) (punctuation 128392 . 128393) (symbol 128383 . 128392) (open-paren 128382 . 128383) (symbol 128372 . 128381) (symbol 128360 . 128371) (EXTERN 128353 . 128359) (punctuation 128351 . 128352) (close-paren 128350 . 128351) (VOID 128346 . 128350) (open-paren 128345 . 128346) (symbol 128330 . 128344) (VOID 128325 . 128329) (EXTERN 128318 . 128324) (punctuation 128316 . 128317) (close-paren 128315 . 128316) (symbol 128312 . 128315) (symbol 128300 . 128311) (open-paren 128299 . 128300) (symbol 128285 . 128298) (symbol 128273 . 128284) (EXTERN 128266 . 128272) (punctuation 128264 . 128265) (close-paren 128263 . 128264) (symbol 128252 . 128263) (open-paren 128251 . 128252) (symbol 128239 . 128250) (VOID 128234 . 128238) (EXTERN 128227 . 128233) (punctuation 128225 . 128226) (close-paren 128224 . 128225) (number 128223 . 128224) (punctuation 128221 . 128222) (number 128220 . 128221) (open-paren 128219 . 128220) (symbol 128195 . 128218) (close-paren 128191 . 128192) (symbol 128184 . 128191) (punctuation 128182 . 128183) (punctuation 128181 . 128182) (CHAR 128176 . 128180) (CONST 128170 . 128175) (open-paren 128169 . 128170) (symbol 128154 . 128168) (symbol 128142 . 128153) (EXTERN 128135 . 128141) (punctuation 128133 . 128134) (close-paren 128132 . 128133) (number 128131 . 128132) (punctuation 128129 . 128130) (number 128128 . 128129) (open-paren 128127 . 128128) (symbol 128103 . 128126) (close-paren 128099 . 128100) (symbol 128092 . 128099) (punctuation 128090 . 128091) (punctuation 128089 . 128090) (CHAR 128084 . 128088) (CONST 128078 . 128083) (open-paren 128077 . 128078) (symbol 128070 . 128076) (VOID 128065 . 128069) (EXTERN 128048 . 128054) (punctuation 128046 . 128047) (close-paren 128045 . 128046) (number 128044 . 128045) (punctuation 128042 . 128043) (number 128041 . 128042) (open-paren 128040 . 128041) (symbol 128016 . 128039) (close-paren 128014 . 128015) (punctuation 128013 . 128014) (punctuation 128012 . 128013) (punctuation 128011 . 128012) (punctuation 128009 . 128010) (punctuation 128008 . 128009) (CHAR 128003 . 128007) (CONST 127997 . 128002) (open-paren 127996 . 127997) (symbol 127990 . 127995) (VOID 127985 . 127989) (EXTERN 127968 . 127974) (punctuation 127966 . 127967) (close-paren 127965 . 127966) (punctuation 127964 . 127965) (symbol 127951 . 127963) (STRUCT 127944 . 127950) (open-paren 127943 . 127944) (symbol 127918 . 127942) (VOID 127913 . 127917) (EXTERN 127906 . 127912) (punctuation 127904 . 127905) (close-paren 127903 . 127904) (VOID 127899 . 127903) (open-paren 127898 . 127899) (symbol 127873 . 127897) (VOID 127868 . 127872) (EXTERN 127861 . 127867) (punctuation 127859 . 127860) (close-paren 127858 . 127859) (symbol 127847 . 127858) (punctuation 127845 . 127846) (symbol 127836 . 127845) (open-paren 127835 . 127836) (symbol 127825 . 127834) (symbol 127813 . 127824) (EXTERN 127806 . 127812) (punctuation 127804 . 127805) (close-paren 127803 . 127804) (punctuation 127802 . 127803) (VOID 127797 . 127801) (punctuation 127795 . 127796) (semantic-list 127787 . 127795) (semantic-list 127783 . 127786) (VOID 127778 . 127782) (punctuation 127776 . 127777) (symbol 127767 . 127776) (open-paren 127766 . 127767) (symbol 127743 . 127765) (VOID 127738 . 127742) (EXTERN 127731 . 127737) (punctuation 127729 . 127730) (close-paren 127728 . 127729) (symbol 127717 . 127728) (punctuation 127715 . 127716) (semantic-list 127702 . 127715) (semantic-list 127698 . 127701) (VOID 127693 . 127697) (punctuation 127691 . 127692) (symbol 127682 . 127691) (open-paren 127681 . 127682) (symbol 127662 . 127680) (VOID 127657 . 127661) (EXTERN 127650 . 127656) (punctuation 127648 . 127649) (close-paren 127647 . 127648) (symbol 127638 . 127647) (open-paren 127637 . 127638) (symbol 127616 . 127636) (VOID 127611 . 127615) (EXTERN 127604 . 127610) (punctuation 127602 . 127603) (close-paren 127601 . 127602) (VOID 127597 . 127601) (open-paren 127596 . 127597) (symbol 127566 . 127595) (VOID 127561 . 127565) (EXTERN 127554 . 127560) (punctuation 127552 . 127553) (close-paren 127551 . 127552) (semantic-list 127545 . 127551) (semantic-list 127541 . 127544) (VOID 127536 . 127540) (open-paren 127535 . 127536) (symbol 127508 . 127534) (VOID 127503 . 127507) (EXTERN 127496 . 127502) (punctuation 127494 . 127495) (close-paren 127493 . 127494) (INT 127490 . 127493) (punctuation 127488 . 127489) (semantic-list 127483 . 127488) (semantic-list 127479 . 127482) (VOID 127474 . 127478) (open-paren 127473 . 127474) (symbol 127447 . 127472) (VOID 127442 . 127446) (EXTERN 127435 . 127441) (punctuation 127433 . 127434) (close-paren 127432 . 127433) (punctuation 127431 . 127432) (VOID 127426 . 127430) (punctuation 127424 . 127425) (semantic-list 127416 . 127424) (semantic-list 127412 . 127415) (VOID 127407 . 127411) (open-paren 127406 . 127407) (symbol 127380 . 127405) (VOID 127375 . 127379) (EXTERN 127368 . 127374) (punctuation 127366 . 127367) (close-paren 127365 . 127366) (symbol 127354 . 127365) (punctuation 127352 . 127353) (semantic-list 127339 . 127352) (semantic-list 127335 . 127338) (VOID 127330 . 127334) (open-paren 127329 . 127330) (symbol 127307 . 127328) (VOID 127302 . 127306) (EXTERN 127295 . 127301) (punctuation 127293 . 127294) (close-paren 127292 . 127293) (symbol 127281 . 127292) (punctuation 127279 . 127280) (symbol 127268 . 127279) (open-paren 127267 . 127268) (symbol 127258 . 127266) (VOID 127253 . 127257) (EXTERN 127246 . 127252) (punctuation 127244 . 127245) (close-paren 127243 . 127244) (symbol 127232 . 127243) (ENUM 127227 . 127231) (punctuation 127225 . 127226) (symbol 127214 . 127225) (open-paren 127213 . 127214) (symbol 127191 . 127212) (punctuation 127190 . 127191) (symbol 127182 . 127189) (STRUCT 127175 . 127181) (EXTERN 127168 . 127174) (punctuation 127166 . 127167) (close-paren 127165 . 127166) (symbol 127154 . 127165) (ENUM 127149 . 127153) (punctuation 127147 . 127148) (symbol 127136 . 127147) (open-paren 127135 . 127136) (symbol 127122 . 127134) (punctuation 127121 . 127122) (symbol 127113 . 127120) (STRUCT 127106 . 127112) (EXTERN 127099 . 127105) (punctuation 127097 . 127098) (close-paren 127096 . 127097) (punctuation 127080 . 127081) (punctuation 127065 . 127066) (punctuation 127064 . 127065) (VOID 127059 . 127063) (punctuation 127057 . 127058) (punctuation 127046 . 127047) (open-paren 127032 . 127033) (symbol 127013 . 127031) (symbol 127001 . 127012) (EXTERN 126994 . 127000) (punctuation 126992 . 126993) (close-paren 126991 . 126992) (punctuation 126949 . 126950) (punctuation 126934 . 126935) (symbol 126923 . 126934) (punctuation 126916 . 126917) (punctuation 126915 . 126916) (symbol 126903 . 126914) (punctuation 126901 . 126902) (symbol 126892 . 126901) (punctuation 126890 . 126891) (punctuation 126861 . 126862) (open-paren 126847 . 126848) (symbol 126817 . 126842) (symbol 126805 . 126816) (EXTERN 126798 . 126804) (punctuation 126796 . 126797) (close-paren 126795 . 126796) (punctuation 126779 . 126780) (punctuation 126764 . 126765) (symbol 126753 . 126764) (punctuation 126751 . 126752) (symbol 126740 . 126751) (punctuation 126738 . 126739) (symbol 126727 . 126738) (punctuation 126725 . 126726) (punctuation 126696 . 126697) (open-paren 126682 . 126683) (symbol 126656 . 126681) (symbol 126644 . 126655) (EXTERN 126637 . 126643) (punctuation 126635 . 126636) (close-paren 126634 . 126635) (punctuation 126618 . 126619) (punctuation 126603 . 126604) (symbol 126592 . 126603) (punctuation 126590 . 126591) (symbol 126579 . 126590) (punctuation 126577 . 126578) (punctuation 126561 . 126562) (open-paren 126547 . 126548) (symbol 126521 . 126546) (symbol 126509 . 126520) (EXTERN 126502 . 126508) (punctuation 126500 . 126501) (close-paren 126499 . 126500) (punctuation 126483 . 126484) (punctuation 126468 . 126469) (symbol 126457 . 126468) (punctuation 126455 . 126456) (punctuation 126446 . 126447) (open-paren 126432 . 126433) (symbol 126408 . 126431) (symbol 126396 . 126407) (EXTERN 126389 . 126395) (punctuation 126387 . 126388) (close-paren 126386 . 126387) (symbol 126375 . 126386) (punctuation 126373 . 126374) (symbol 126362 . 126373) (punctuation 126360 . 126361) (symbol 126349 . 126360) (open-paren 126348 . 126349) (symbol 126319 . 126347) (symbol 126307 . 126318) (EXTERN 126300 . 126306) (punctuation 126298 . 126299) (close-paren 126297 . 126298) (symbol 126286 . 126297) (punctuation 126284 . 126285) (punctuation 126268 . 126269) (punctuation 126253 . 126254) (symbol 126242 . 126253) (open-paren 126241 . 126242) (symbol 126226 . 126240) (symbol 126214 . 126225) (EXTERN 126207 . 126213) (punctuation 126205 . 126206) (close-paren 126204 . 126205) (symbol 126193 . 126204) (punctuation 126191 . 126192) (symbol 126180 . 126191) (punctuation 126178 . 126179) (symbol 126167 . 126178) (punctuation 126165 . 126166) (symbol 126154 . 126165) (punctuation 126152 . 126153) (symbol 126141 . 126152) (punctuation 126139 . 126140) (symbol 126128 . 126139) (punctuation 126126 . 126127) (symbol 126115 . 126126) (punctuation 126113 . 126114) (symbol 126102 . 126113) (punctuation 126100 . 126101) (symbol 126089 . 126100) (open-paren 126088 . 126089) (symbol 126082 . 126087) (symbol 126070 . 126081) (EXTERN 126063 . 126069) (punctuation 126061 . 126062) (close-paren 126060 . 126061) (symbol 126049 . 126060) (punctuation 126047 . 126048) (symbol 126036 . 126047) (punctuation 126034 . 126035) (symbol 126023 . 126034) (punctuation 126021 . 126022) (symbol 126010 . 126021) (punctuation 126008 . 126009) (symbol 125997 . 126008) (punctuation 125995 . 125996) (symbol 125984 . 125995) (punctuation 125982 . 125983) (symbol 125971 . 125982) (punctuation 125969 . 125970) (symbol 125958 . 125969) (open-paren 125957 . 125958) (symbol 125951 . 125956) (symbol 125939 . 125950) (EXTERN 125932 . 125938) (punctuation 125930 . 125931) (close-paren 125929 . 125930) (symbol 125918 . 125929) (punctuation 125916 . 125917) (symbol 125905 . 125916) (punctuation 125903 . 125904) (symbol 125892 . 125903) (punctuation 125890 . 125891) (symbol 125879 . 125890) (punctuation 125877 . 125878) (symbol 125866 . 125877) (punctuation 125864 . 125865) (symbol 125853 . 125864) (punctuation 125851 . 125852) (symbol 125840 . 125851) (open-paren 125839 . 125840) (symbol 125833 . 125838) (symbol 125821 . 125832) (EXTERN 125814 . 125820) (punctuation 125812 . 125813) (close-paren 125811 . 125812) (symbol 125800 . 125811) (punctuation 125798 . 125799) (symbol 125787 . 125798) (punctuation 125785 . 125786) (symbol 125774 . 125785) (punctuation 125772 . 125773) (symbol 125761 . 125772) (punctuation 125759 . 125760) (symbol 125748 . 125759) (punctuation 125746 . 125747) (symbol 125735 . 125746) (open-paren 125734 . 125735) (symbol 125728 . 125733) (symbol 125716 . 125727) (EXTERN 125709 . 125715) (punctuation 125707 . 125708) (close-paren 125706 . 125707) (symbol 125695 . 125706) (punctuation 125693 . 125694) (symbol 125682 . 125693) (punctuation 125680 . 125681) (symbol 125669 . 125680) (punctuation 125667 . 125668) (symbol 125656 . 125667) (punctuation 125654 . 125655) (symbol 125643 . 125654) (open-paren 125642 . 125643) (symbol 125636 . 125641) (symbol 125624 . 125635) (EXTERN 125617 . 125623) (punctuation 125615 . 125616) (close-paren 125614 . 125615) (symbol 125603 . 125614) (punctuation 125601 . 125602) (symbol 125590 . 125601) (punctuation 125588 . 125589) (symbol 125577 . 125588) (punctuation 125575 . 125576) (symbol 125564 . 125575) (open-paren 125563 . 125564) (symbol 125557 . 125562) (symbol 125545 . 125556) (EXTERN 125538 . 125544) (punctuation 125536 . 125537) (close-paren 125535 . 125536) (symbol 125524 . 125535) (punctuation 125522 . 125523) (symbol 125511 . 125522) (punctuation 125509 . 125510) (symbol 125498 . 125509) (open-paren 125497 . 125498) (symbol 125491 . 125496) (symbol 125479 . 125490) (EXTERN 125472 . 125478) (punctuation 125470 . 125471) (close-paren 125469 . 125470) (symbol 125458 . 125469) (punctuation 125456 . 125457) (symbol 125445 . 125456) (open-paren 125444 . 125445) (symbol 125438 . 125443) (symbol 125426 . 125437) (EXTERN 125419 . 125425) (punctuation 125417 . 125418) (close-paren 125416 . 125417) (symbol 125405 . 125416) (open-paren 125404 . 125405) (symbol 125398 . 125403) (symbol 125386 . 125397) (EXTERN 125379 . 125385) (punctuation 125377 . 125378) (close-paren 125376 . 125377) (symbol 125365 . 125376) (punctuation 125363 . 125364) (symbol 125352 . 125363) (open-paren 125351 . 125352) (symbol 125344 . 125350) (symbol 125332 . 125343) (EXTERN 125325 . 125331) (punctuation 125323 . 125324) (close-paren 125322 . 125323) (symbol 125318 . 125322) (symbol 125306 . 125317) (open-paren 125305 . 125306) (symbol 125296 . 125304) (symbol 125284 . 125295) (EXTERN 125277 . 125283) (punctuation 125275 . 125276) (close-paren 125274 . 125275) (symbol 125264 . 125274) (punctuation 125263 . 125264) (symbol 125251 . 125262) (punctuation 125249 . 125250) (symbol 125242 . 125249) (symbol 125232 . 125241) (punctuation 125230 . 125231) (symbol 125226 . 125230) (punctuation 125225 . 125226) (symbol 125215 . 125224) (STRUCT 125208 . 125214) (open-paren 125207 . 125208) (symbol 125194 . 125206) (symbol 125182 . 125193) (EXTERN 125175 . 125181) (punctuation 125173 . 125174) (close-paren 125172 . 125173) (symbol 125161 . 125172) (open-paren 125160 . 125161) (symbol 125150 . 125159) (BOOL 125145 . 125149) (EXTERN 125138 . 125144) (punctuation 125136 . 125137) (close-paren 125135 . 125136) (symbol 125124 . 125135) (punctuation 125122 . 125123) (punctuation 125121 . 125122) (CHAR 125116 . 125120) (CONST 125110 . 125115) (open-paren 125109 . 125110) (symbol 125096 . 125108) (VOID 125091 . 125095) (EXTERN 125074 . 125080) (punctuation 125072 . 125073) (close-paren 125071 . 125072) (symbol 125060 . 125071) (punctuation 125054 . 125055) (symbol 125043 . 125054) (punctuation 125041 . 125042) (symbol 125030 . 125041) (punctuation 125028 . 125029) (symbol 125017 . 125028) (open-paren 125016 . 125017) (symbol 125007 . 125015) (VOID 125002 . 125006) (EXTERN 124985 . 124991) (punctuation 124983 . 124984) (close-paren 124982 . 124983) (symbol 124971 . 124982) (punctuation 124969 . 124970) (symbol 124958 . 124969) (punctuation 124956 . 124957) (symbol 124945 . 124956) (open-paren 124944 . 124945) (symbol 124935 . 124943) (VOID 124930 . 124934) (EXTERN 124913 . 124919) (punctuation 124911 . 124912) (close-paren 124910 . 124911) (symbol 124899 . 124910) (punctuation 124897 . 124898) (symbol 124886 . 124897) (open-paren 124885 . 124886) (symbol 124876 . 124884) (VOID 124871 . 124875) (EXTERN 124854 . 124860) (punctuation 124852 . 124853) (close-paren 124851 . 124852) (symbol 124840 . 124851) (open-paren 124839 . 124840) (symbol 124830 . 124838) (VOID 124825 . 124829) (EXTERN 124808 . 124814) (close-paren 124806 . 124807) (open-paren 124772 . 124773) (close-paren 124770 . 124771) (symbol 124766 . 124770) (symbol 124754 . 124765) (punctuation 124752 . 124753) (symbol 124740 . 124752) (symbol 124728 . 124739) (open-paren 124727 . 124728) (symbol 124719 . 124726) (VOID 124714 . 124718) (symbol 124697 . 124703) (punctuation 124695 . 124696) (close-paren 124694 . 124695) (VOID 124690 . 124694) (open-paren 124689 . 124690) (symbol 124684 . 124688) (symbol 124672 . 124683) (EXTERN 124665 . 124671) (punctuation 124663 . 124664) (close-paren 124662 . 124663) (punctuation 124605 . 124606) (punctuation 124579 . 124580) (symbol 124575 . 124579) (punctuation 124574 . 124575) (symbol 124562 . 124573) (punctuation 124560 . 124561) (symbol 124555 . 124560) (symbol 124545 . 124554) (open-paren 124544 . 124545) (symbol 124525 . 124543) (symbol 124513 . 124524) (EXTERN 124506 . 124512) (punctuation 124504 . 124505) (close-paren 124503 . 124504) (symbol 124492 . 124503) (punctuation 124490 . 124491) (symbol 124479 . 124490) (punctuation 124477 . 124478) (symbol 124466 . 124477) (open-paren 124465 . 124466) (symbol 124444 . 124464) (VOID 124439 . 124443) (EXTERN 124432 . 124438) (punctuation 124430 . 124431) (close-paren 124429 . 124430) (symbol 124418 . 124429) (open-paren 124417 . 124418) (symbol 124408 . 124416) (VOID 124403 . 124407) (EXTERN 124396 . 124402) (close-paren 124016 . 124017) (semantic-list 124008 . 124013) (RETURN 123970 . 123976) (open-paren 123966 . 123967) (close-paren 123964 . 123965) (symbol 123961 . 123964) (punctuation 123960 . 123961) (CHAR 123955 . 123959) (CONST 123949 . 123954) (open-paren 123948 . 123949) (symbol 123932 . 123947) (symbol 123920 . 123931) (symbol 123913 . 123919) (close-paren 123910 . 123911) (semantic-list 123902 . 123907) (RETURN 123873 . 123879) (open-paren 123869 . 123870) (close-paren 123867 . 123868) (symbol 123864 . 123867) (punctuation 123863 . 123864) (CHAR 123858 . 123862) (CONST 123852 . 123857) (open-paren 123851 . 123852) (symbol 123844 . 123850) (symbol 123832 . 123843) (symbol 123825 . 123831) (punctuation 123822 . 123823) (close-paren 123821 . 123822) (VOID 123817 . 123821) (open-paren 123816 . 123817) (symbol 123802 . 123815) (VOID 123797 . 123801) (EXTERN 123790 . 123796) (punctuation 123788 . 123789) (close-paren 123787 . 123788) (VOID 123783 . 123787) (open-paren 123782 . 123783) (symbol 123771 . 123781) (VOID 123766 . 123770) (EXTERN 123759 . 123765) (punctuation 123757 . 123758) (close-paren 123756 . 123757) (VOID 123752 . 123756) (open-paren 123751 . 123752) (symbol 123738 . 123750) (VOID 123733 . 123737) (EXTERN 123726 . 123732) (punctuation 123724 . 123725) (close-paren 123723 . 123724) (symbol 123712 . 123723) (punctuation 123710 . 123711) (punctuation 123709 . 123710) (CHAR 123704 . 123708) (CONST 123698 . 123703) (open-paren 123697 . 123698) (symbol 123685 . 123696) (VOID 123680 . 123684) (EXTERN 123673 . 123679) (punctuation 123671 . 123672) (close-paren 123670 . 123671) (symbol 123659 . 123670) (punctuation 123632 . 123633) (semantic-list 123606 . 123632) (semantic-list 123602 . 123605) (VOID 123597 . 123601) (punctuation 123595 . 123596) (symbol 123584 . 123595) (open-paren 123583 . 123584) (symbol 123571 . 123582) (VOID 123566 . 123570) (EXTERN 123559 . 123565) (punctuation 123557 . 123558) (close-paren 123556 . 123557) (INT 123553 . 123556) (punctuation 123551 . 123552) (INT 123548 . 123551) (punctuation 123546 . 123547) (punctuation 123545 . 123546) (CONST 123539 . 123544) (CHAR 123534 . 123538) (open-paren 123533 . 123534) (symbol 123516 . 123532) (symbol 123504 . 123515) (EXTERN 123497 . 123503) (punctuation 123495 . 123496) (close-paren 123494 . 123495) (number 123492 . 123493) (punctuation 123490 . 123491) (symbol 123468 . 123489) (punctuation 123466 . 123467) (number 123465 . 123466) (punctuation 123463 . 123464) (symbol 123443 . 123462) (open-paren 123441 . 123442) (ENUM 123436 . 123440) (punctuation 123434 . 123435) (close-paren 123433 . 123434) (BOOL 123429 . 123433) (punctuation 123427 . 123428) (symbol 123416 . 123427) (punctuation 123414 . 123415) (punctuation 123413 . 123414) (symbol 123401 . 123412) (punctuation 123381 . 123382) (symbol 123370 . 123381) (punctuation 123368 . 123369) (symbol 123357 . 123368) (punctuation 123355 . 123356) (symbol 123344 . 123355) (open-paren 123343 . 123344) (symbol 123337 . 123342) (INT 123333 . 123336) (EXTERN 123326 . 123332) (close-paren 123324 . 123325) (semantic-list 123254 . 123267) (IF 123251 . 123253) (open-paren 123247 . 123248) (close-paren 123245 . 123246) (symbol 123244 . 123245) (symbol 123232 . 123243) (open-paren 123231 . 123232) (symbol 123215 . 123230) (VOID 123210 . 123214) (symbol 123203 . 123209) (punctuation 123201 . 123202) (close-paren 123200 . 123201) (symbol 123191 . 123200) (punctuation 123189 . 123190) (symbol 123180 . 123189) (punctuation 123178 . 123179) (punctuation 123177 . 123178) (CHAR 123172 . 123176) (CONST 123166 . 123171) (punctuation 123164 . 123165) (symbol 123153 . 123164) (open-paren 123152 . 123153) (symbol 123143 . 123151) (symbol 123131 . 123142) (EXTERN 123124 . 123130) (punctuation 123122 . 123123) (close-paren 123121 . 123122) (symbol 123110 . 123121) (punctuation 123108 . 123109) (symbol 123097 . 123108) (open-paren 123096 . 123097) (symbol 123084 . 123095) (VOID 123079 . 123083) (EXTERN 123072 . 123078) (punctuation 123070 . 123071) (close-paren 123069 . 123070) (symbol 123058 . 123069) (punctuation 123056 . 123057) (symbol 123045 . 123056) (punctuation 123043 . 123044) (symbol 123032 . 123043) (open-paren 123031 . 123032) (symbol 123017 . 123030) (symbol 123005 . 123016) (EXTERN 122998 . 123004) (punctuation 122996 . 122997) (close-paren 122995 . 122996) (symbol 122986 . 122995) (punctuation 122984 . 122985) (punctuation 122983 . 122984) (CHAR 122978 . 122982) (CONST 122972 . 122977) (open-paren 122971 . 122972) (symbol 122953 . 122970) (symbol 122941 . 122952) (EXTERN 122934 . 122940) (punctuation 122932 . 122933) (close-paren 122931 . 122932) (symbol 122922 . 122931) (punctuation 122920 . 122921) (punctuation 122919 . 122920) (CHAR 122914 . 122918) (CONST 122908 . 122913) (open-paren 122907 . 122908) (symbol 122898 . 122906) (symbol 122886 . 122897) (EXTERN 122879 . 122885) (punctuation 122877 . 122878) (close-paren 122876 . 122877) (symbol 122865 . 122876) (open-paren 122864 . 122865) (symbol 122850 . 122863) (symbol 122838 . 122849) (EXTERN 122831 . 122837) (punctuation 122801 . 122802) (close-paren 122800 . 122801) (number 122799 . 122800) (punctuation 122797 . 122798) (number 122796 . 122797) (open-paren 122795 . 122796) (symbol 122771 . 122794) (close-paren 122767 . 122768) (symbol 122760 . 122767) (punctuation 122758 . 122759) (punctuation 122757 . 122758) (CONST 122751 . 122756) (CHAR 122746 . 122750) (punctuation 122737 . 122738) (symbol 122728 . 122737) (punctuation 122726 . 122727) (punctuation 122725 . 122726) (CONST 122719 . 122724) (CHAR 122714 . 122718) (punctuation 122712 . 122713) (punctuation 122711 . 122712) (symbol 122701 . 122710) (punctuation 122699 . 122700) (punctuation 122698 . 122699) (punctuation 122697 . 122698) (CHAR 122692 . 122696) (open-paren 122691 . 122692) (symbol 122681 . 122690) (symbol 122671 . 122680) (EXTERN 122664 . 122670) (punctuation 122662 . 122663) (close-paren 122661 . 122662) (number 122660 . 122661) (punctuation 122658 . 122659) (number 122657 . 122658) (open-paren 122656 . 122657) (symbol 122632 . 122655) (close-paren 122628 . 122629) (punctuation 122627 . 122628) (punctuation 122626 . 122627) (punctuation 122625 . 122626) (punctuation 122623 . 122624) (punctuation 122622 . 122623) (CONST 122616 . 122621) (CHAR 122611 . 122615) (punctuation 122603 . 122604) (symbol 122594 . 122603) (punctuation 122592 . 122593) (punctuation 122591 . 122592) (CONST 122585 . 122590) (CHAR 122580 . 122584) (punctuation 122578 . 122579) (punctuation 122577 . 122578) (symbol 122567 . 122576) (punctuation 122565 . 122566) (punctuation 122564 . 122565) (punctuation 122563 . 122564) (CHAR 122558 . 122562) (open-paren 122557 . 122558) (symbol 122548 . 122556) (symbol 122538 . 122547) (EXTERN 122531 . 122537) (punctuation 122529 . 122530) (close-paren 122528 . 122529) (number 122527 . 122528) (punctuation 122525 . 122526) (number 122524 . 122525) (open-paren 122523 . 122524) (symbol 122499 . 122522) (close-paren 122495 . 122496) (punctuation 122494 . 122495) (punctuation 122493 . 122494) (punctuation 122492 . 122493) (punctuation 122490 . 122491) (punctuation 122489 . 122490) (CONST 122483 . 122488) (CHAR 122478 . 122482) (punctuation 122476 . 122477) (punctuation 122475 . 122476) (CHAR 122470 . 122474) (open-paren 122469 . 122470) (symbol 122460 . 122468) (symbol 122450 . 122459) (EXTERN 122443 . 122449) (punctuation 122441 . 122442) (close-paren 122440 . 122441) (symbol 122433 . 122440) (punctuation 122427 . 122428) (punctuation 122426 . 122427) (CHAR 122421 . 122425) (CONST 122415 . 122420) (punctuation 122413 . 122414) (punctuation 122412 . 122413) (CHAR 122407 . 122411) (CONST 122401 . 122406) (punctuation 122399 . 122400) (symbol 122390 . 122399) (punctuation 122388 . 122389) (punctuation 122387 . 122388) (CHAR 122382 . 122386) (open-paren 122381 . 122382) (symbol 122374 . 122380) (symbol 122364 . 122373) (EXTERN 122357 . 122363) (punctuation 122326 . 122327) (close-paren 122325 . 122326) (VOID 122321 . 122325) (open-paren 122320 . 122321) (symbol 122306 . 122319) (VOID 122301 . 122305) (EXTERN 122294 . 122300) (punctuation 122292 . 122293) (close-paren 122291 . 122292) (VOID 122287 . 122291) (open-paren 122286 . 122287) (symbol 122270 . 122285) (VOID 122265 . 122269) (EXTERN 122258 . 122264) (punctuation 122256 . 122257) (close-paren 122255 . 122256) (DOUBLE 122249 . 122255) (punctuation 122247 . 122248) (punctuation 122246 . 122247) (CHAR 122241 . 122245) (open-paren 122240 . 122241) (symbol 122224 . 122239) (INT 122220 . 122223) (EXTERN 122213 . 122219) (punctuation 122175 . 122176) (close-paren 122174 . 122175) (symbol 122163 . 122174) (punctuation 122161 . 122162) (punctuation 122145 . 122146) (punctuation 122130 . 122131) (punctuation 122129 . 122130) (CHAR 122124 . 122128) (CONST 122118 . 122123) (open-paren 122117 . 122118) (symbol 122073 . 122108) (symbol 122061 . 122072) (EXTERN 122054 . 122060) (punctuation 122052 . 122053) (close-paren 122051 . 122052) (symbol 122040 . 122051) (punctuation 122033 . 122034) (punctuation 122032 . 122033) (CHAR 122027 . 122031) (CONST 122021 . 122026) (punctuation 122019 . 122020) (symbol 122008 . 122019) (punctuation 122006 . 122007) (symbol 121995 . 122006) (open-paren 121994 . 121995) (symbol 121974 . 121993) (VOID 121969 . 121973) (EXTERN 121962 . 121968) (punctuation 121936 . 121937) (close-paren 121935 . 121936) (punctuation 121934 . 121935) (CHAR 121929 . 121933) (CONST 121923 . 121928) (open-paren 121922 . 121923) (symbol 121897 . 121921) (VOID 121892 . 121896) (EXTERN 121885 . 121891) (close-paren 121863 . 121864) (symbol 121852 . 121863) (open-paren 121851 . 121852) (symbol 121839 . 121850) (VOID 121834 . 121838) (EXTERN 121827 . 121833) (punctuation 121753 . 121754) (close-paren 121752 . 121753) (VOID 121748 . 121752) (open-paren 121747 . 121748) (symbol 121731 . 121746) (VOID 121726 . 121730) (EXTERN 121719 . 121725) (punctuation 121717 . 121718) (close-paren 121716 . 121717) (symbol 121705 . 121716) (open-paren 121704 . 121705) (symbol 121690 . 121703) (symbol 121678 . 121689) (EXTERN 121671 . 121677) (punctuation 121669 . 121670) (close-paren 121668 . 121669) (UNSIGNED 121660 . 121668) (punctuation 121658 . 121659) (UNSIGNED 121650 . 121658) (punctuation 121643 . 121644) (punctuation 121642 . 121643) (symbol 121634 . 121641) (STRUCT 121627 . 121633) (punctuation 121625 . 121626) (symbol 121614 . 121625) (punctuation 121607 . 121608) (symbol 121596 . 121607) (punctuation 121594 . 121595) (symbol 121583 . 121594) (punctuation 121576 . 121577) (semantic-list 121550 . 121576) (semantic-list 121536 . 121549) (VOID 121531 . 121535) (open-paren 121530 . 121531) (symbol 121503 . 121529) (VOID 121498 . 121502) (EXTERN 121491 . 121497) (punctuation 121489 . 121490) (close-paren 121488 . 121489) (symbol 121477 . 121488) (punctuation 121475 . 121476) (symbol 121464 . 121475) (punctuation 121462 . 121463) (symbol 121451 . 121462) (punctuation 121421 . 121422) (semantic-list 121354 . 121421) (semantic-list 121350 . 121353) (VOID 121345 . 121349) (open-paren 121344 . 121345) (symbol 121329 . 121343) (VOID 121324 . 121328) (EXTERN 121317 . 121323) (punctuation 121315 . 121316) (close-paren 121314 . 121315) (symbol 121303 . 121314) (punctuation 121301 . 121302) (INT 121298 . 121301) (punctuation 121296 . 121297) (INT 121293 . 121296) (punctuation 121291 . 121292) (symbol 121280 . 121291) (open-paren 121279 . 121280) (symbol 121258 . 121278) (VOID 121253 . 121257) (EXTERN 121246 . 121252) (punctuation 121244 . 121245) (close-paren 121243 . 121244) (punctuation 121242 . 121243) (INT 121238 . 121241) (punctuation 121236 . 121237) (punctuation 121235 . 121236) (INT 121231 . 121234) (punctuation 121184 . 121185) (INT 121181 . 121184) (punctuation 121179 . 121180) (symbol 121168 . 121179) (open-paren 121167 . 121168) (symbol 121142 . 121166) (symbol 121130 . 121141) (EXTERN 121123 . 121129) (punctuation 121121 . 121122) (close-paren 121120 . 121121) (symbol 121109 . 121120) (open-paren 121108 . 121109) (symbol 121092 . 121107) (symbol 121080 . 121091) (EXTERN 121073 . 121079) (punctuation 120707 . 120708) (close-paren 120706 . 120707) (VOID 120702 . 120706) (open-paren 120701 . 120702) (symbol 120680 . 120700) (VOID 120675 . 120679) (EXTERN 120668 . 120674) (close-paren 120395 . 120396) (punctuation 120393 . 120394) (semantic-list 120391 . 120393) (semantic-list "((void) 0)" 120368 . 120390) (spp-arg-list nil 120368 . 120390) (open-paren 120366 . 120367) (close-paren 120364 . 120365) (VOID 120360 . 120364) (open-paren 120359 . 120360) (close-paren 120357 . 120358) (symbol 120342 . 120357) (open-paren 120341 . 120342) (VOID 120336 . 120340) (symbol 120329 . 120335) (punctuation 120259 . 120260) (close-paren 120258 . 120259) (symbol 120247 . 120258) (open-paren 120246 . 120247) (symbol 120226 . 120245) (INT 120222 . 120225) (EXTERN 120215 . 120221) (punctuation 120213 . 120214) (close-paren 120212 . 120213) (VOID 120208 . 120212) (open-paren 120207 . 120208) (symbol 120191 . 120206) (punctuation 120189 . 120190) (symbol 120182 . 120188) (STRUCT 120175 . 120181) (EXTERN 120168 . 120174) (punctuation 120166 . 120167) (close-paren 120165 . 120166) (VOID 120161 . 120165) (open-paren 120160 . 120161) (symbol 120146 . 120159) (VOID 120141 . 120145) (EXTERN 120134 . 120140) (punctuation 120132 . 120133) (close-paren 120131 . 120132) (VOID 120127 . 120131) (open-paren 120126 . 120127) (symbol 120115 . 120125) (VOID 120110 . 120114) (EXTERN 120103 . 120109) (punctuation 120101 . 120102) (close-paren 120100 . 120101) (VOID 120096 . 120100) (open-paren 120095 . 120096) (symbol 120079 . 120094) (VOID 120074 . 120078) (EXTERN 120067 . 120073) (punctuation 120065 . 120066) (close-paren 120064 . 120065) (punctuation 120063 . 120064) (symbol 120053 . 120062) (STRUCT 120046 . 120052) (open-paren 120045 . 120046) (symbol 120035 . 120044) (VOID 120030 . 120034) (EXTERN 120023 . 120029) (punctuation 120021 . 120022) (close-paren 120020 . 120021) (symbol 120009 . 120020) (punctuation 120007 . 120008) (symbol 119996 . 120007) (punctuation 119994 . 119995) (symbol 119983 . 119994) (open-paren 119982 . 119983) (symbol 119968 . 119981) (symbol 119956 . 119967) (EXTERN 119949 . 119955) (punctuation 119947 . 119948) (close-paren 119946 . 119947) (symbol 119935 . 119946) (open-paren 119934 . 119935) (symbol 119918 . 119933) (VOID 119913 . 119917) (EXTERN 119906 . 119912) (punctuation 119904 . 119905) (close-paren 119903 . 119904) (symbol 119894 . 119903) (punctuation 119892 . 119893) (punctuation 119891 . 119892) (symbol 119879 . 119890) (open-paren 119878 . 119879) (symbol 119861 . 119877) (symbol 119849 . 119860) (EXTERN 119842 . 119848) (punctuation 119840 . 119841) (close-paren 119839 . 119840) (symbol 119828 . 119839) (punctuation 119815 . 119816) (punctuation 119814 . 119815) (VOID 119809 . 119813) (punctuation 119807 . 119808) (semantic-list 119801 . 119807) (semantic-list 119797 . 119800) (VOID 119792 . 119796) (open-paren 119791 . 119792) (symbol 119765 . 119790) (symbol 119753 . 119764) (EXTERN 119746 . 119752) (punctuation 119744 . 119745) (close-paren 119743 . 119744) (punctuation 119742 . 119743) (VOID 119737 . 119741) (punctuation 119735 . 119736) (punctuation 119734 . 119735) (VOID 119729 . 119733) (open-paren 119728 . 119729) (symbol 119710 . 119727) (symbol 119698 . 119709) (EXTERN 119691 . 119697) (punctuation 119689 . 119690) (close-paren 119688 . 119689) (symbol 119679 . 119688) (punctuation 119677 . 119678) (punctuation 119676 . 119677) (VOID 119671 . 119675) (open-paren 119670 . 119671) (symbol 119652 . 119669) (symbol 119640 . 119651) (EXTERN 119633 . 119639) (punctuation 119631 . 119632) (close-paren 119630 . 119631) (punctuation 119629 . 119630) (VOID 119624 . 119628) (open-paren 119623 . 119624) (symbol 119609 . 119622) (symbol 119597 . 119608) (EXTERN 119590 . 119596) (punctuation 119588 . 119589) (close-paren 119587 . 119588) (symbol 119576 . 119587) (punctuation 119574 . 119575) (symbol 119563 . 119574) (punctuation 119550 . 119551) (symbol 119539 . 119550) (punctuation 119537 . 119538) (symbol 119526 . 119537) (open-paren 119525 . 119526) (symbol 119499 . 119524) (symbol 119487 . 119498) (EXTERN 119480 . 119486) (punctuation 119478 . 119479) (close-paren 119477 . 119478) (symbol 119468 . 119477) (punctuation 119466 . 119467) (symbol 119457 . 119466) (punctuation 119455 . 119456) (symbol 119446 . 119455) (open-paren 119445 . 119446) (symbol 119423 . 119444) (symbol 119411 . 119422) (EXTERN 119404 . 119410) (punctuation 119402 . 119403) (close-paren 119401 . 119402) (VOID 119397 . 119401) (open-paren 119396 . 119397) (symbol 119369 . 119395) (symbol 119359 . 119368) (EXTERN 119352 . 119358) (punctuation 119350 . 119351) (close-paren 119349 . 119350) (VOID 119345 . 119349) (open-paren 119344 . 119345) (symbol 119321 . 119343) (VOID 119316 . 119320) (EXTERN 119309 . 119315) (punctuation 119307 . 119308) (close-paren 119306 . 119307) (DOUBLE 119300 . 119306) (open-paren 119299 . 119300) (symbol 119288 . 119298) (symbol 119276 . 119287) (EXTERN 119269 . 119275) (punctuation 118557 . 118558) (close-paren 118556 . 118557) (symbol 118547 . 118556) (ENUM 118542 . 118546) (punctuation 118532 . 118533) (INT 118529 . 118532) (punctuation 118527 . 118528) (INT 118524 . 118527) (punctuation 118522 . 118523) (INT 118519 . 118522) (open-paren 118518 . 118519) (symbol 118496 . 118517) (punctuation 118495 . 118496) (symbol 118483 . 118494) (STRUCT 118476 . 118482) (EXTERN 118469 . 118475) (close-paren 118466 . 118467) (RETURN 118456 . 118462) (punctuation 118432 . 118433) (punctuation 118431 . 118432) (semantic-list 118428 . 118431) (symbol 118412 . 118427) (punctuation 118394 . 118395) (punctuation 118393 . 118394) (semantic-list 118390 . 118393) (symbol 118374 . 118389) (punctuation 118370 . 118371) (semantic-list #("((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 0 1 (macros (("code" semantic-list "(v)" 118345 . 118348) ("v" symbol "XVECTOR" 118337 . 118344)))) 118323 . 118370) (open-paren 118213 . 118214) (close-paren 118211 . 118212) (symbol 118203 . 118211) (INT 118199 . 118202) (punctuation 118197 . 118198) (symbol 118192 . 118197) (INT 118188 . 118191) (open-paren 118187 . 118188) (symbol 118160 . 118186) (symbol 118148 . 118159) (symbol 118141 . 118147) (close-paren 118085 . 118086) (RETURN 118075 . 118081) (punctuation 118071 . 118072) (semantic-list #("((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 0 1 (macros (("b" symbol "p" 118069 . 118070) ("a" symbol "v" 118066 . 118067)))) 118054 . 118071) (open-paren 117977 . 117978) (close-paren 117975 . 117976) (symbol 117971 . 117975) (symbol 117961 . 117970) (open-paren 117960 . 117961) (symbol 117941 . 117959) (symbol 117929 . 117940) (symbol 117922 . 117928) (punctuation 117610 . 117611) (close-paren 117609 . 117610) (symbol 117600 . 117609) (open-paren 117599 . 117600) (symbol 117583 . 117598) (punctuation 117582 . 117583) (symbol 117570 . 117581) (STRUCT 117563 . 117569) (EXTERN 117556 . 117562) (punctuation 117554 . 117555) (close-paren 117553 . 117554) (punctuation 117552 . 117553) (symbol 117540 . 117551) (STRUCT 117533 . 117539) (open-paren 117532 . 117533) (symbol 117517 . 117531) (VOID 117512 . 117516) (EXTERN 117505 . 117511) (punctuation 117503 . 117504) (close-paren 117502 . 117503) (symbol 117491 . 117502) (punctuation 117489 . 117490) (symbol 117478 . 117489) (open-paren 117477 . 117478) (symbol 117467 . 117476) (symbol 117455 . 117466) (EXTERN 117448 . 117454) (close-paren 117445 . 117446) (semantic-list 117437 . 117442) (RETURN 117405 . 117411) (open-paren 117401 . 117402) (close-paren 117399 . 117400) (symbol 117396 . 117399) (punctuation 117395 . 117396) (CHAR 117390 . 117394) (CONST 117384 . 117389) (open-paren 117383 . 117384) (symbol 117370 . 117382) (symbol 117358 . 117369) (symbol 117351 . 117357) (close-paren 117254 . 117255) (semantic-list 117246 . 117251) (RETURN 117207 . 117213) (open-paren 117203 . 117204) (close-paren 117201 . 117202) (symbol 117198 . 117201) (punctuation 117197 . 117198) (CHAR 117192 . 117196) (CONST 117186 . 117191) (open-paren 117185 . 117186) (symbol 117165 . 117184) (symbol 117153 . 117164) (symbol 117146 . 117152) (punctuation 117072 . 117073) (close-paren 117071 . 117072) (symbol 117062 . 117071) (punctuation 117060 . 117061) (punctuation 117059 . 117060) (CHAR 117054 . 117058) (CONST 117048 . 117053) (open-paren 117047 . 117048) (symbol 117028 . 117046) (symbol 117016 . 117027) (EXTERN 117009 . 117015) (punctuation 117007 . 117008) (close-paren 117006 . 117007) (BOOL 117002 . 117006) (punctuation 117000 . 117001) (symbol 116991 . 117000) (punctuation 116989 . 116990) (symbol 116980 . 116989) (punctuation 116978 . 116979) (punctuation 116977 . 116978) (CHAR 116972 . 116976) (CONST 116966 . 116971) (open-paren 116965 . 116966) (symbol 116948 . 116964) (symbol 116936 . 116947) (EXTERN 116929 . 116935) (punctuation 116927 . 116928) (close-paren 116926 . 116927) (BOOL 116922 . 116926) (punctuation 116920 . 116921) (symbol 116911 . 116920) (punctuation 116909 . 116910) (symbol 116900 . 116909) (punctuation 116891 . 116892) (punctuation 116890 . 116891) (CHAR 116885 . 116889) (CONST 116879 . 116884) (open-paren 116878 . 116879) (symbol 116856 . 116877) (symbol 116844 . 116855) (EXTERN 116837 . 116843) (punctuation 116835 . 116836) (close-paren 116834 . 116835) (symbol 116825 . 116834) (punctuation 116823 . 116824) (symbol 116814 . 116823) (punctuation 116812 . 116813) (punctuation 116811 . 116812) (CHAR 116806 . 116810) (CONST 116800 . 116805) (open-paren 116799 . 116800) (symbol 116776 . 116798) (symbol 116764 . 116775) (EXTERN 116757 . 116763) (punctuation 116755 . 116756) (close-paren 116754 . 116755) (symbol 116745 . 116754) (punctuation 116743 . 116744) (symbol 116734 . 116743) (open-paren 116733 . 116734) (symbol 116704 . 116732) (symbol 116692 . 116703) (EXTERN 116685 . 116691) (punctuation 116683 . 116684) (close-paren 116682 . 116683) (symbol 116673 . 116682) (open-paren 116672 . 116673) (symbol 116653 . 116671) (symbol 116641 . 116652) (EXTERN 116634 . 116640) (punctuation 116632 . 116633) (close-paren 116631 . 116632) (punctuation 116630 . 116631) (symbol 116618 . 116629) (punctuation 116616 . 116617) (symbol 116607 . 116616) (open-paren 116606 . 116607) (symbol 116589 . 116605) (symbol 116577 . 116588) (EXTERN 116570 . 116576) (punctuation 116568 . 116569) (close-paren 116567 . 116568) (symbol 116558 . 116567) (punctuation 116556 . 116557) (symbol 116547 . 116556) (punctuation 116545 . 116546) (punctuation 116544 . 116545) (CHAR 116539 . 116543) (CONST 116533 . 116538) (open-paren 116532 . 116533) (symbol 116510 . 116531) (symbol 116498 . 116509) (EXTERN 116491 . 116497) (close-paren 116488 . 116489) (semantic-list 116480 . 116485) (RETURN 116440 . 116446) (open-paren 116436 . 116437) (close-paren 116434 . 116435) (symbol 116431 . 116434) (punctuation 116430 . 116431) (CHAR 116425 . 116429) (CONST 116419 . 116424) (open-paren 116418 . 116419) (symbol 116397 . 116417) (symbol 116385 . 116396) (symbol 116378 . 116384) (punctuation 116304 . 116305) (close-paren 116303 . 116304) (symbol 116294 . 116303) (punctuation 116292 . 116293) (punctuation 116291 . 116292) (CHAR 116286 . 116290) (CONST 116280 . 116285) (open-paren 116279 . 116280) (symbol 116259 . 116278) (symbol 116247 . 116258) (EXTERN 116240 . 116246) (punctuation 116238 . 116239) (close-paren 116237 . 116238) (number 116236 . 116237) (punctuation 116234 . 116235) (number 116233 . 116234) (open-paren 116232 . 116233) (symbol 116208 . 116231) (close-paren 116204 . 116205) (punctuation 116203 . 116204) (punctuation 116202 . 116203) (punctuation 116201 . 116202) (punctuation 116199 . 116200) (punctuation 116198 . 116199) (CHAR 116193 . 116197) (CONST 116187 . 116192) (punctuation 116185 . 116186) (punctuation 116184 . 116185) (CHAR 116179 . 116183) (open-paren 116178 . 116179) (symbol 116156 . 116177) (symbol 116144 . 116155) (EXTERN 116137 . 116143) (punctuation 116135 . 116136) (close-paren 116134 . 116135) (symbol 116125 . 116134) (punctuation 116123 . 116124) (punctuation 116122 . 116123) (CHAR 116117 . 116121) (CONST 116111 . 116116) (open-paren 116110 . 116111) (symbol 116098 . 116109) (symbol 116086 . 116097) (EXTERN 116079 . 116085) (punctuation 116077 . 116078) (close-paren 116076 . 116077) (VOID 116072 . 116076) (open-paren 116071 . 116072) (symbol 116055 . 116070) (VOID 116050 . 116054) (EXTERN 116033 . 116039) (punctuation 116031 . 116032) (close-paren 116030 . 116031) (symbol 116019 . 116030) (punctuation 116017 . 116018) (symbol 116006 . 116017) (open-paren 116005 . 116006) (symbol 115988 . 116004) (symbol 115976 . 115987) (EXTERN 115969 . 115975) (punctuation 115967 . 115968) (close-paren 115966 . 115967) (symbol 115957 . 115966) (open-paren 115956 . 115957) (symbol 115932 . 115955) (symbol 115920 . 115931) (EXTERN 115913 . 115919) (close-paren 115910 . 115911) (semantic-list 115904 . 115907) (semantic-list 115887 . 115890) (semantic-list 115868 . 115871) (semantic-list 115851 . 115854) (RETURN 115825 . 115831) (open-paren 115821 . 115822) (close-paren 115819 . 115820) (symbol 115818 . 115819) (symbol 115808 . 115817) (punctuation 115806 . 115807) (symbol 115805 . 115806) (symbol 115795 . 115804) (punctuation 115793 . 115794) (symbol 115792 . 115793) (symbol 115782 . 115791) (punctuation 115780 . 115781) (symbol 115779 . 115780) (symbol 115769 . 115778) (open-paren 115768 . 115769) (symbol 115761 . 115767) (symbol 115749 . 115760) (symbol 115742 . 115748) (close-paren 115739 . 115740) (semantic-list 115733 . 115736) (semantic-list 115716 . 115719) (semantic-list 115699 . 115702) (RETURN 115673 . 115679) (open-paren 115669 . 115670) (close-paren 115667 . 115668) (symbol 115666 . 115667) (symbol 115656 . 115665) (punctuation 115654 . 115655) (symbol 115653 . 115654) (symbol 115643 . 115652) (punctuation 115641 . 115642) (symbol 115640 . 115641) (symbol 115630 . 115639) (open-paren 115629 . 115630) (symbol 115622 . 115628) (symbol 115610 . 115621) (symbol 115603 . 115609) (close-paren 115600 . 115601) (semantic-list 115594 . 115597) (semantic-list 115577 . 115580) (RETURN 115551 . 115557) (open-paren 115547 . 115548) (close-paren 115545 . 115546) (symbol 115544 . 115545) (symbol 115534 . 115543) (punctuation 115532 . 115533) (symbol 115531 . 115532) (symbol 115521 . 115530) (open-paren 115520 . 115521) (symbol 115513 . 115519) (symbol 115501 . 115512) (symbol 115494 . 115500) (punctuation 115438 . 115439) (close-paren 115437 . 115438) (punctuation 115436 . 115437) (punctuation 115435 . 115436) (punctuation 115434 . 115435) (punctuation 115432 . 115433) (symbol 115421 . 115432) (punctuation 115419 . 115420) (symbol 115410 . 115419) (punctuation 115408 . 115409) (symbol 115400 . 115408) (ENUM 115395 . 115399) (open-paren 115394 . 115395) (symbol 115388 . 115393) (symbol 115376 . 115387) (EXTERN 115369 . 115375) (punctuation 115367 . 115368) (close-paren 115366 . 115367) (symbol 115353 . 115366) (punctuation 115351 . 115352) (symbol 115338 . 115351) (open-paren 115337 . 115338) (symbol 115328 . 115336) (ENUM 115323 . 115327) (punctuation 115321 . 115322) (close-paren 115320 . 115321) (symbol 115309 . 115320) (punctuation 115302 . 115303) (symbol 115291 . 115302) (punctuation 115289 . 115290) (symbol 115278 . 115289) (punctuation 115276 . 115277) (symbol 115265 . 115276) (punctuation 115263 . 115264) (symbol 115252 . 115263) (open-paren 115251 . 115252) (symbol 115245 . 115250) (symbol 115233 . 115244) (EXTERN 115226 . 115232) (punctuation 115224 . 115225) (close-paren 115223 . 115224) (symbol 115212 . 115223) (punctuation 115210 . 115211) (symbol 115199 . 115210) (punctuation 115197 . 115198) (symbol 115186 . 115197) (punctuation 115184 . 115185) (symbol 115173 . 115184) (open-paren 115172 . 115173) (symbol 115166 . 115171) (symbol 115154 . 115165) (EXTERN 115147 . 115153) (punctuation 115145 . 115146) (close-paren 115144 . 115145) (symbol 115133 . 115144) (punctuation 115131 . 115132) (symbol 115120 . 115131) (punctuation 115118 . 115119) (symbol 115107 . 115118) (open-paren 115106 . 115107) (symbol 115100 . 115105) (symbol 115088 . 115099) (EXTERN 115081 . 115087) (punctuation 115079 . 115080) (close-paren 115078 . 115079) (symbol 115067 . 115078) (punctuation 115065 . 115066) (symbol 115054 . 115065) (open-paren 115053 . 115054) (symbol 115047 . 115052) (symbol 115035 . 115046) (EXTERN 115028 . 115034) (punctuation 115026 . 115027) (close-paren 115025 . 115026) (symbol 115014 . 115025) (open-paren 115013 . 115014) (symbol 115007 . 115012) (symbol 114995 . 115006) (EXTERN 114988 . 114994) (punctuation 114791 . 114792) (close-paren 114790 . 114791) (symbol 114787 . 114790) (punctuation 114786 . 114787) (VOID 114781 . 114785) (punctuation 114779 . 114780) (semantic-list 114768 . 114779) (semantic-list 114760 . 114767) (VOID 114755 . 114759) (open-paren 114754 . 114755) (symbol 114732 . 114753) (VOID 114727 . 114731) (EXTERN 114720 . 114726) (punctuation 114718 . 114719) (close-paren 114717 . 114718) (punctuation 114716 . 114717) (CHAR 114711 . 114715) (punctuation 114709 . 114710) (punctuation 114708 . 114709) (CHAR 114703 . 114707) (open-paren 114702 . 114703) (symbol 114691 . 114701) (VOID 114686 . 114690) (EXTERN 114679 . 114685) (punctuation 114677 . 114678) (close-paren 114676 . 114677) (VOID 114672 . 114676) (open-paren 114671 . 114672) (symbol 114653 . 114670) (VOID 114648 . 114652) (EXTERN 114641 . 114647) (punctuation 114639 . 114640) (close-paren 114638 . 114639) (VOID 114634 . 114638) (open-paren 114633 . 114634) (symbol 114616 . 114632) (VOID 114611 . 114615) (EXTERN 114604 . 114610) (punctuation 114479 . 114480) (close-paren 114478 . 114479) (symbol 114467 . 114478) (open-paren 114466 . 114467) (symbol 114454 . 114465) (VOID 114449 . 114453) (EXTERN 114442 . 114448) (punctuation 114440 . 114441) (close-paren 114439 . 114440) (symbol 114428 . 114439) (open-paren 114427 . 114428) (symbol 114413 . 114426) (BOOL 114408 . 114412) (EXTERN 114401 . 114407) (punctuation 114399 . 114400) (close-paren 114398 . 114399) (symbol 114389 . 114398) (open-paren 114388 . 114389) (symbol 114369 . 114387) (VOID 114364 . 114368) (EXTERN 114347 . 114353) (punctuation 114345 . 114346) (close-paren 114344 . 114345) (symbol 114338 . 114344) (open-paren 114337 . 114338) (symbol 114325 . 114336) (VOID 114320 . 114324) (EXTERN 114303 . 114309) (punctuation 114301 . 114302) (close-paren 114300 . 114301) (punctuation 114299 . 114300) (CHAR 114294 . 114298) (CONST 114288 . 114293) (open-paren 114287 . 114288) (symbol 114272 . 114286) (VOID 114267 . 114271) (EXTERN 114260 . 114266) (punctuation 114258 . 114259) (close-paren 114257 . 114258) (symbol 114248 . 114257) (punctuation 114246 . 114247) (symbol 114237 . 114246) (punctuation 114235 . 114236) (punctuation 114234 . 114235) (symbol 114222 . 114233) (STRUCT 114215 . 114221) (open-paren 114214 . 114215) (symbol 114193 . 114213) (VOID 114188 . 114192) (EXTERN 114181 . 114187) (punctuation 114179 . 114180) (close-paren 114178 . 114179) (symbol 114167 . 114178) (open-paren 114166 . 114167) (symbol 114156 . 114165) (VOID 114151 . 114155) (EXTERN 114144 . 114150) (punctuation 114142 . 114143) (close-paren 114141 . 114142) (VOID 114137 . 114141) (open-paren 114136 . 114137) (symbol 114120 . 114135) (VOID 114115 . 114119) (EXTERN 114108 . 114114) (punctuation 114106 . 114107) (close-paren 114105 . 114106) (VOID 114101 . 114105) (open-paren 114100 . 114101) (symbol 114086 . 114099) (punctuation 114085 . 114086) (VOID 114080 . 114084) (EXTERN 114073 . 114079) (punctuation 114043 . 114044) (close-paren 114042 . 114043) (punctuation 114041 . 114042) (symbol 114031 . 114040) (punctuation 114029 . 114030) (punctuation 114028 . 114029) (symbol 114018 . 114027) (punctuation 114008 . 114009) (symbol 113999 . 114008) (punctuation 113997 . 113998) (punctuation 113996 . 113997) (CHAR 113991 . 113995) (UNSIGNED 113982 . 113990) (CONST 113976 . 113981) (open-paren 113975 . 113976) (symbol 113952 . 113974) (VOID 113947 . 113951) (EXTERN 113940 . 113946) (punctuation 113906 . 113907) (close-paren 113905 . 113906) (semantic-list 113891 . 113905) (semantic-list 113880 . 113890) (VOID 113875 . 113879) (punctuation 113873 . 113874) (punctuation 113872 . 113873) (VOID 113867 . 113871) (open-paren 113866 . 113867) (symbol 113850 . 113865) (VOID 113845 . 113849) (EXTERN 113838 . 113844) (punctuation 113805 . 113806) (close-paren 113804 . 113805) (VOID 113800 . 113804) (open-paren 113799 . 113800) (symbol 113781 . 113798) (VOID 113776 . 113780) (EXTERN 113769 . 113775) (punctuation 113735 . 113736) (close-paren 113734 . 113735) (punctuation 113733 . 113734) (INT 113729 . 113732) (punctuation 113727 . 113728) (punctuation 113726 . 113727) (INT 113722 . 113725) (punctuation 113720 . 113721) (punctuation 113719 . 113720) (INT 113715 . 113718) (punctuation 113713 . 113714) (punctuation 113712 . 113713) (INT 113708 . 113711) (punctuation 113706 . 113707) (punctuation 113705 . 113706) (INT 113701 . 113704) (punctuation 113693 . 113694) (punctuation 113692 . 113693) (INT 113688 . 113691) (punctuation 113686 . 113687) (symbol 113677 . 113686) (punctuation 113675 . 113676) (punctuation 113674 . 113675) (symbol 113667 . 113673) (STRUCT 113660 . 113666) (open-paren 113659 . 113660) (symbol 113645 . 113658) (BOOL 113640 . 113644) (EXTERN 113633 . 113639) (punctuation 113631 . 113632) (close-paren 113630 . 113631) (symbol 113619 . 113630) (open-paren 113618 . 113619) (symbol 113608 . 113617) (symbol 113596 . 113607) (EXTERN 113589 . 113595) (punctuation 113587 . 113588) (close-paren 113586 . 113587) (VOID 113582 . 113586) (open-paren 113581 . 113582) (symbol 113570 . 113580) (VOID 113565 . 113569) (EXTERN 113558 . 113564) (punctuation 113556 . 113557) (close-paren 113555 . 113556) (VOID 113551 . 113555) (open-paren 113550 . 113551) (symbol 113536 . 113549) (VOID 113531 . 113535) (EXTERN 113524 . 113530) (punctuation 113522 . 113523) (close-paren 113521 . 113522) (symbol 113510 . 113521) (punctuation 113508 . 113509) (punctuation 113507 . 113508) (symbol 113501 . 113506) (STRUCT 113494 . 113500) (open-paren 113493 . 113494) (symbol 113470 . 113492) (VOID 113465 . 113469) (punctuation 113462 . 113463) (close-paren 113461 . 113462) (VOID 113457 . 113461) (open-paren 113456 . 113457) (symbol 113446 . 113455) (VOID 113441 . 113445) (EXTERN 113434 . 113440) (punctuation 113432 . 113433) (close-paren 113431 . 113432) (symbol 113422 . 113431) (open-paren 113421 . 113422) (symbol 113402 . 113420) (VOID 113397 . 113401) (EXTERN 113390 . 113396) (punctuation 113388 . 113389) (close-paren 113387 . 113388) (VOID 113383 . 113387) (open-paren 113382 . 113383) (symbol 113365 . 113381) (VOID 113360 . 113364) (EXTERN 113353 . 113359) (punctuation 113351 . 113352) (close-paren 113350 . 113351) (VOID 113346 . 113350) (open-paren 113345 . 113346) (symbol 113319 . 113344) (VOID 113314 . 113318) (EXTERN 113307 . 113313) (punctuation 113305 . 113306) (close-paren 113304 . 113305) (BOOL 113300 . 113304) (punctuation 113298 . 113299) (symbol 113287 . 113298) (punctuation 113285 . 113286) (punctuation 113284 . 113285) (CHAR 113279 . 113283) (CONST 113273 . 113278) (open-paren 113272 . 113273) (symbol 113252 . 113271) (VOID 113247 . 113251) (EXTERN 113240 . 113246) (punctuation 113238 . 113239) (close-paren 113237 . 113238) (BOOL 113233 . 113237) (punctuation 113231 . 113232) (BOOL 113227 . 113231) (punctuation 113225 . 113226) (symbol 113216 . 113225) (punctuation 113214 . 113215) (punctuation 113213 . 113214) (CHAR 113208 . 113212) (CONST 113202 . 113207) (open-paren 113201 . 113202) (symbol 113187 . 113200) (VOID 113182 . 113186) (EXTERN 113175 . 113181) (punctuation 113173 . 113174) (close-paren 113172 . 113173) (symbol 113161 . 113172) (open-paren 113160 . 113161) (symbol 113145 . 113159) (VOID 113140 . 113144) (EXTERN 113133 . 113139) (punctuation 113131 . 113132) (close-paren 113130 . 113131) (symbol 113119 . 113130) (open-paren 113118 . 113119) (symbol 113109 . 113117) (VOID 113104 . 113108) (EXTERN 113097 . 113103) (punctuation 113095 . 113096) (close-paren 113094 . 113095) (punctuation 113093 . 113094) (CHAR 113088 . 113092) (CONST 113082 . 113087) (open-paren 113081 . 113082) (symbol 113066 . 113080) (VOID 113061 . 113065) (EXTERN 113054 . 113060) (punctuation 113052 . 113053) (close-paren 113051 . 113052) (punctuation 113050 . 113051) (CHAR 113045 . 113049) (CONST 113039 . 113044) (open-paren 113038 . 113039) (symbol 113029 . 113037) (VOID 113024 . 113028) (EXTERN 113017 . 113023) (punctuation 113015 . 113016) (close-paren 113014 . 113015) (number 113013 . 113014) (punctuation 113011 . 113012) (number 113010 . 113011) (open-paren 113009 . 113010) (symbol 112985 . 113008) (close-paren 112983 . 112984) (punctuation 112982 . 112983) (punctuation 112981 . 112982) (punctuation 112980 . 112981) (punctuation 112978 . 112979) (punctuation 112977 . 112978) (CHAR 112972 . 112976) (CONST 112966 . 112971) (open-paren 112965 . 112966) (symbol 112957 . 112964) (VOID 112952 . 112956) (EXTERN 112945 . 112951) (punctuation 112943 . 112944) (close-paren 112942 . 112943) (BOOL 112938 . 112942) (punctuation 112936 . 112937) (BOOL 112932 . 112936) (open-paren 112931 . 112932) (symbol 112917 . 112930) (VOID 112912 . 112916) (EXTERN 112905 . 112911) (punctuation 112903 . 112904) (close-paren 112902 . 112903) (VOID 112898 . 112902) (open-paren 112897 . 112898) (symbol 112881 . 112896) (symbol 112869 . 112880) (EXTERN 112862 . 112868) (punctuation 112860 . 112861) (close-paren 112859 . 112860) (VOID 112855 . 112859) (open-paren 112854 . 112855) (symbol 112838 . 112853) (VOID 112833 . 112837) (EXTERN 112826 . 112832) (punctuation 112824 . 112825) (close-paren 112823 . 112824) (symbol 112812 . 112823) (open-paren 112811 . 112812) (symbol 112788 . 112810) (symbol 112776 . 112787) (EXTERN 112769 . 112775) (punctuation 112767 . 112768) (close-paren 112766 . 112767) (VOID 112762 . 112766) (open-paren 112761 . 112762) (symbol 112742 . 112760) (VOID 112737 . 112741) (EXTERN 112730 . 112736) (punctuation 112728 . 112729) (close-paren 112727 . 112728) (VOID 112723 . 112727) (open-paren 112722 . 112723) (symbol 112709 . 112721) (BOOL 112704 . 112708) (EXTERN 112697 . 112703) (punctuation 112695 . 112696) (close-paren 112694 . 112695) (BOOL 112690 . 112694) (open-paren 112689 . 112690) (symbol 112660 . 112688) (VOID 112655 . 112659) (EXTERN 112648 . 112654) (punctuation 112646 . 112647) (close-paren 112645 . 112646) (VOID 112641 . 112645) (open-paren 112640 . 112641) (symbol 112620 . 112639) (VOID 112615 . 112619) (EXTERN 112608 . 112614) (punctuation 112606 . 112607) (close-paren 112605 . 112606) (symbol 112598 . 112605) (punctuation 112596 . 112597) (punctuation 112595 . 112596) (CONST 112589 . 112594) (CHAR 112584 . 112588) (open-paren 112583 . 112584) (symbol 112571 . 112582) (VOID 112566 . 112570) (EXTERN 112559 . 112565) (punctuation 112557 . 112558) (close-paren 112556 . 112557) (punctuation 112555 . 112556) (punctuation 112554 . 112555) (punctuation 112553 . 112554) (punctuation 112551 . 112552) (punctuation 112550 . 112551) (CONST 112544 . 112549) (CHAR 112539 . 112543) (open-paren 112538 . 112539) (symbol 112527 . 112537) (VOID 112522 . 112526) (EXTERN 112515 . 112521) (punctuation 112513 . 112514) (close-paren 112512 . 112513) (number 112511 . 112512) (open-paren 112510 . 112511) (symbol 112494 . 112510) (symbol 112482 . 112493) (EXTERN 112475 . 112481) (punctuation 112404 . 112405) (close-paren 112403 . 112404) (INT 112400 . 112403) (punctuation 112398 . 112399) (BOOL 112394 . 112398) (punctuation 112392 . 112393) (symbol 112381 . 112392) (open-paren 112380 . 112381) (symbol 112372 . 112379) (symbol 112360 . 112371) (EXTERN 112353 . 112359) (punctuation 112220 . 112221) (close-paren 112219 . 112220) (VOID 112215 . 112219) (open-paren 112214 . 112215) (symbol 112199 . 112213) (VOID 112194 . 112198) (EXTERN 112187 . 112193) (punctuation 112185 . 112186) (close-paren 112184 . 112185) (BOOL 112180 . 112184) (punctuation 112178 . 112179) (symbol 112169 . 112178) (punctuation 112167 . 112168) (symbol 112158 . 112167) (punctuation 112156 . 112157) (punctuation 112155 . 112156) (CHAR 112150 . 112154) (CONST 112144 . 112149) (punctuation 112134 . 112135) (symbol 112125 . 112134) (punctuation 112123 . 112124) (symbol 112114 . 112123) (punctuation 112112 . 112113) (symbol 112103 . 112112) (punctuation 112101 . 112102) (symbol 112092 . 112101) (open-paren 112091 . 112092) (symbol 112075 . 112090) (VOID 112070 . 112074) (EXTERN 112063 . 112069) (punctuation 112061 . 112062) (close-paren 112060 . 112061) (BOOL 112056 . 112060) (punctuation 112054 . 112055) (BOOL 112050 . 112054) (punctuation 112048 . 112049) (BOOL 112044 . 112048) (punctuation 112042 . 112043) (BOOL 112038 . 112042) (punctuation 112036 . 112037) (symbol 112025 . 112036) (punctuation 112023 . 112024) (symbol 112014 . 112023) (punctuation 112012 . 112013) (symbol 112003 . 112012) (open-paren 112002 . 112003) (symbol 111988 . 112001) (VOID 111983 . 111987) (EXTERN 111976 . 111982) (punctuation 111974 . 111975) (close-paren 111973 . 111974) (INT 111970 . 111973) (punctuation 111968 . 111969) (symbol 111959 . 111968) (punctuation 111957 . 111958) (symbol 111948 . 111957) (punctuation 111938 . 111939) (symbol 111929 . 111938) (punctuation 111927 . 111928) (symbol 111918 . 111927) (open-paren 111917 . 111918) (symbol 111894 . 111916) (VOID 111889 . 111893) (EXTERN 111882 . 111888) (punctuation 111880 . 111881) (close-paren 111879 . 111880) (symbol 111870 . 111879) (punctuation 111868 . 111869) (symbol 111859 . 111868) (punctuation 111846 . 111847) (symbol 111837 . 111846) (punctuation 111835 . 111836) (symbol 111826 . 111835) (open-paren 111825 . 111826) (symbol 111799 . 111824) (VOID 111794 . 111798) (EXTERN 111787 . 111793) (punctuation 111785 . 111786) (close-paren 111784 . 111785) (symbol 111775 . 111784) (punctuation 111773 . 111774) (symbol 111764 . 111773) (punctuation 111757 . 111758) (symbol 111748 . 111757) (punctuation 111746 . 111747) (symbol 111737 . 111746) (punctuation 111735 . 111736) (symbol 111726 . 111735) (open-paren 111725 . 111726) (symbol 111705 . 111724) (VOID 111700 . 111704) (EXTERN 111693 . 111699) (punctuation 111691 . 111692) (close-paren 111690 . 111691) (symbol 111681 . 111690) (punctuation 111679 . 111680) (symbol 111670 . 111679) (punctuation 111668 . 111669) (symbol 111659 . 111668) (open-paren 111658 . 111659) (symbol 111638 . 111657) (VOID 111633 . 111637) (EXTERN 111626 . 111632) (punctuation 111624 . 111625) (close-paren 111623 . 111624) (symbol 111614 . 111623) (punctuation 111612 . 111613) (symbol 111603 . 111612) (punctuation 111601 . 111602) (punctuation 111600 . 111601) (symbol 111593 . 111599) (STRUCT 111586 . 111592) (open-paren 111585 . 111586) (symbol 111560 . 111584) (VOID 111555 . 111559) (EXTERN 111548 . 111554) (punctuation 111546 . 111547) (close-paren 111545 . 111546) (punctuation 111544 . 111545) (symbol 111534 . 111543) (punctuation 111532 . 111533) (symbol 111523 . 111532) (punctuation 111521 . 111522) (symbol 111512 . 111521) (open-paren 111511 . 111512) (symbol 111484 . 111510) (VOID 111479 . 111483) (EXTERN 111472 . 111478) (punctuation 111470 . 111471) (close-paren 111469 . 111470) (punctuation 111468 . 111469) (symbol 111458 . 111467) (punctuation 111456 . 111457) (symbol 111447 . 111456) (punctuation 111445 . 111446) (symbol 111436 . 111445) (open-paren 111435 . 111436) (symbol 111410 . 111434) (VOID 111405 . 111409) (EXTERN 111398 . 111404) (punctuation 111396 . 111397) (close-paren 111395 . 111396) (symbol 111386 . 111395) (punctuation 111384 . 111385) (symbol 111375 . 111384) (open-paren 111374 . 111375) (symbol 111362 . 111373) (VOID 111357 . 111361) (EXTERN 111350 . 111356) (punctuation 111348 . 111349) (close-paren 111347 . 111348) (BOOL 111343 . 111347) (punctuation 111341 . 111342) (symbol 111332 . 111341) (punctuation 111330 . 111331) (symbol 111321 . 111330) (punctuation 111315 . 111316) (symbol 111306 . 111315) (punctuation 111304 . 111305) (symbol 111295 . 111304) (open-paren 111294 . 111295) (symbol 111282 . 111293) (symbol 111270 . 111281) (EXTERN 111263 . 111269) (punctuation 111261 . 111262) (close-paren 111260 . 111261) (BOOL 111256 . 111260) (punctuation 111254 . 111255) (symbol 111245 . 111254) (punctuation 111243 . 111244) (symbol 111234 . 111243) (punctuation 111232 . 111233) (symbol 111223 . 111232) (punctuation 111221 . 111222) (symbol 111212 . 111221) (open-paren 111211 . 111212) (symbol 111196 . 111210) (VOID 111191 . 111195) (EXTERN 111184 . 111190) (punctuation 111182 . 111183) (close-paren 111181 . 111182) (symbol 111172 . 111181) (punctuation 111170 . 111171) (symbol 111161 . 111170) (open-paren 111160 . 111161) (symbol 111145 . 111159) (VOID 111140 . 111144) (EXTERN 111133 . 111139) (punctuation 111131 . 111132) (close-paren 111130 . 111131) (BOOL 111126 . 111130) (punctuation 111124 . 111125) (BOOL 111120 . 111124) (punctuation 111118 . 111119) (symbol 111109 . 111118) (punctuation 111107 . 111108) (symbol 111098 . 111107) (open-paren 111097 . 111098) (symbol 111085 . 111096) (symbol 111073 . 111084) (EXTERN 111066 . 111072) (punctuation 111064 . 111065) (close-paren 111063 . 111064) (symbol 111054 . 111063) (punctuation 111052 . 111053) (symbol 111043 . 111052) (open-paren 111042 . 111043) (symbol 111032 . 111041) (VOID 111027 . 111031) (EXTERN 111020 . 111026) (punctuation 111018 . 111019) (close-paren 111017 . 111018) (BOOL 111013 . 111017) (punctuation 111011 . 111012) (symbol 111002 . 111011) (punctuation 110988 . 110989) (symbol 110979 . 110988) (punctuation 110977 . 110978) (symbol 110968 . 110977) (punctuation 110954 . 110955) (symbol 110945 . 110954) (punctuation 110943 . 110944) (symbol 110932 . 110943) (open-paren 110931 . 110932) (symbol 110897 . 110930) (VOID 110892 . 110896) (EXTERN 110885 . 110891) (punctuation 110883 . 110884) (close-paren 110882 . 110883) (symbol 110873 . 110882) (punctuation 110871 . 110872) (punctuation 110870 . 110871) (CHAR 110865 . 110869) (CONST 110859 . 110864) (open-paren 110858 . 110859) (symbol 110824 . 110857) (VOID 110819 . 110823) (EXTERN 110812 . 110818) (punctuation 110810 . 110811) (close-paren 110809 . 110810) (symbol 110800 . 110809) (punctuation 110798 . 110799) (punctuation 110797 . 110798) (CHAR 110792 . 110796) (CONST 110786 . 110791) (open-paren 110785 . 110786) (symbol 110763 . 110784) (VOID 110758 . 110762) (EXTERN 110751 . 110757) (punctuation 110749 . 110750) (close-paren 110748 . 110749) (punctuation 110747 . 110748) (CHAR 110742 . 110746) (CONST 110736 . 110741) (open-paren 110735 . 110736) (symbol 110721 . 110734) (VOID 110716 . 110720) (EXTERN 110709 . 110715) (punctuation 110707 . 110708) (close-paren 110706 . 110707) (INT 110703 . 110706) (open-paren 110702 . 110703) (symbol 110690 . 110701) (VOID 110685 . 110689) (EXTERN 110678 . 110684) (punctuation 110676 . 110677) (close-paren 110675 . 110676) (BOOL 110671 . 110675) (punctuation 110669 . 110670) (symbol 110660 . 110669) (punctuation 110658 . 110659) (symbol 110649 . 110658) (punctuation 110647 . 110648) (punctuation 110646 . 110647) (symbol 110639 . 110645) (STRUCT 110632 . 110638) (open-paren 110631 . 110632) (symbol 110612 . 110630) (VOID 110607 . 110611) (EXTERN 110600 . 110606) (punctuation 110598 . 110599) (close-paren 110597 . 110598) (BOOL 110593 . 110597) (punctuation 110591 . 110592) (symbol 110582 . 110591) (punctuation 110580 . 110581) (symbol 110571 . 110580) (punctuation 110565 . 110566) (symbol 110556 . 110565) (punctuation 110554 . 110555) (symbol 110545 . 110554) (punctuation 110543 . 110544) (symbol 110532 . 110543) (open-paren 110531 . 110532) (symbol 110512 . 110530) (VOID 110507 . 110511) (EXTERN 110500 . 110506) (punctuation 110498 . 110499) (close-paren 110497 . 110498) (symbol 110481 . 110497) (BOOL 110476 . 110480) (punctuation 110474 . 110475) (symbol 110465 . 110474) (punctuation 110463 . 110464) (symbol 110454 . 110463) (open-paren 110453 . 110454) (symbol 110437 . 110452) (VOID 110432 . 110436) (EXTERN 110425 . 110431) (punctuation 110423 . 110424) (close-paren 110422 . 110423) (BOOL 110418 . 110422) (punctuation 110416 . 110417) (BOOL 110412 . 110416) (punctuation 110410 . 110411) (BOOL 110406 . 110410) (punctuation 110398 . 110399) (symbol 110389 . 110398) (punctuation 110387 . 110388) (symbol 110378 . 110387) (punctuation 110376 . 110377) (punctuation 110375 . 110376) (CHAR 110370 . 110374) (CONST 110364 . 110369) (open-paren 110363 . 110364) (symbol 110349 . 110362) (VOID 110344 . 110348) (EXTERN 110337 . 110343) (punctuation 110335 . 110336) (close-paren 110334 . 110335) (symbol 110325 . 110334) (punctuation 110323 . 110324) (punctuation 110322 . 110323) (CHAR 110317 . 110321) (CONST 110311 . 110316) (open-paren 110310 . 110311) (symbol 110291 . 110309) (VOID 110286 . 110290) (EXTERN 110279 . 110285) (punctuation 110277 . 110278) (close-paren 110276 . 110277) (symbol 110267 . 110276) (punctuation 110265 . 110266) (punctuation 110264 . 110265) (CHAR 110259 . 110263) (CONST 110253 . 110258) (open-paren 110252 . 110253) (symbol 110245 . 110251) (VOID 110240 . 110244) (EXTERN 110233 . 110239) (punctuation 110231 . 110232) (close-paren 110230 . 110231) (symbol 110221 . 110230) (punctuation 110219 . 110220) (symbol 110210 . 110219) (punctuation 110208 . 110209) (symbol 110199 . 110208) (punctuation 110191 . 110192) (punctuation 110190 . 110191) (CHAR 110185 . 110189) (UNSIGNED 110176 . 110184) (CONST 110170 . 110175) (open-paren 110169 . 110170) (symbol 110147 . 110168) (INT 110143 . 110146) (EXTERN 110136 . 110142) (punctuation 110134 . 110135) (close-paren 110133 . 110134) (symbol 110124 . 110133) (punctuation 110122 . 110123) (symbol 110113 . 110122) (punctuation 110111 . 110112) (symbol 110102 . 110111) (punctuation 110093 . 110094) (punctuation 110092 . 110093) (CHAR 110087 . 110091) (UNSIGNED 110078 . 110086) (CONST 110072 . 110077) (open-paren 110071 . 110072) (symbol 110048 . 110070) (INT 110044 . 110047) (EXTERN 110037 . 110043) (punctuation 110035 . 110036) (close-paren 110034 . 110035) (BOOL 110030 . 110034) (punctuation 110028 . 110029) (BOOL 110024 . 110028) (punctuation 110022 . 110023) (symbol 110013 . 110022) (punctuation 110004 . 110005) (punctuation 110003 . 110004) (CHAR 109998 . 110002) (UNSIGNED 109989 . 109997) (punctuation 109987 . 109988) (punctuation 109986 . 109987) (CHAR 109981 . 109985) (UNSIGNED 109972 . 109980) (CONST 109966 . 109971) (open-paren 109965 . 109966) (symbol 109955 . 109964) (symbol 109945 . 109954) (EXTERN 109938 . 109944) (punctuation 109936 . 109937) (close-paren 109935 . 109936) (symbol 109926 . 109935) (punctuation 109924 . 109925) (punctuation 109923 . 109924) (symbol 109916 . 109922) (STRUCT 109909 . 109915) (open-paren 109908 . 109909) (symbol 109897 . 109907) (VOID 109892 . 109896) (EXTERN 109885 . 109891) (punctuation 109883 . 109884) (close-paren 109882 . 109883) (symbol 109873 . 109882) (open-paren 109872 . 109873) (symbol 109863 . 109871) (VOID 109858 . 109862) (EXTERN 109851 . 109857) (punctuation 109849 . 109850) (close-paren 109848 . 109849) (VOID 109844 . 109848) (open-paren 109843 . 109844) (symbol 109827 . 109842) (VOID 109822 . 109826) (EXTERN 109805 . 109811) (punctuation 109803 . 109804) (close-paren 109802 . 109803) (symbol 109793 . 109802) (punctuation 109791 . 109792) (symbol 109782 . 109791) (open-paren 109781 . 109782) (symbol 109767 . 109780) (VOID 109762 . 109766) (EXTERN 109755 . 109761) (punctuation 109717 . 109718) (close-paren 109716 . 109717) (VOID 109712 . 109716) (open-paren 109711 . 109712) (symbol 109698 . 109710) (VOID 109693 . 109697) (EXTERN 109686 . 109692) (punctuation 109684 . 109685) (close-paren 109683 . 109684) (VOID 109679 . 109683) (open-paren 109678 . 109679) (symbol 109668 . 109677) (VOID 109663 . 109667) (EXTERN 109656 . 109662) (punctuation 109610 . 109611) (close-paren 109609 . 109610) (VOID 109605 . 109609) (open-paren 109604 . 109605) (symbol 109590 . 109603) (VOID 109585 . 109589) (EXTERN 109578 . 109584) (punctuation 109576 . 109577) (close-paren 109575 . 109576) (VOID 109571 . 109575) (open-paren 109570 . 109571) (symbol 109552 . 109569) (VOID 109547 . 109551) (EXTERN 109540 . 109546) (punctuation 109538 . 109539) (close-paren 109537 . 109538) (symbol 109528 . 109537) (punctuation 109526 . 109527) (punctuation 109525 . 109526) (symbol 109519 . 109524) (STRUCT 109512 . 109518) (open-paren 109511 . 109512) (symbol 109497 . 109510) (INT 109493 . 109496) (EXTERN 109486 . 109492) (punctuation 109424 . 109425) (close-paren 109423 . 109424) (VOID 109419 . 109423) (open-paren 109418 . 109419) (symbol 109401 . 109417) (VOID 109396 . 109400) (EXTERN 109389 . 109395) (punctuation 109387 . 109388) (close-paren 109386 . 109387) (VOID 109382 . 109386) (open-paren 109381 . 109382) (symbol 109364 . 109380) (VOID 109359 . 109363) (EXTERN 109352 . 109358) (punctuation 109324 . 109325) (close-paren 109323 . 109324) (VOID 109319 . 109323) (open-paren 109318 . 109319) (symbol 109306 . 109317) (VOID 109301 . 109305) (EXTERN 109294 . 109300) (punctuation 109292 . 109293) (close-paren 109291 . 109292) (VOID 109287 . 109291) (open-paren 109286 . 109287) (symbol 109271 . 109285) (VOID 109266 . 109270) (EXTERN 109259 . 109265) (punctuation 109228 . 109229) (close-paren 109227 . 109228) (symbol 109226 . 109227) (symbol 109214 . 109225) (punctuation 109212 . 109213) (symbol 109211 . 109212) (symbol 109199 . 109210) (open-paren 109198 . 109199) (symbol 109187 . 109197) (symbol 109175 . 109186) (EXTERN 109168 . 109174) (punctuation 109166 . 109167) (close-paren 109165 . 109166) (VOID 109161 . 109165) (open-paren 109160 . 109161) (symbol 109143 . 109159) (VOID 109138 . 109142) (EXTERN 109131 . 109137) (punctuation 109098 . 109099) (close-paren 109097 . 109098) (VOID 109093 . 109097) (open-paren 109092 . 109093) (symbol 109080 . 109091) (VOID 109075 . 109079) (EXTERN 109068 . 109074) (punctuation 109066 . 109067) (close-paren 109065 . 109066) (symbol 109054 . 109065) (open-paren 109053 . 109054) (symbol 109033 . 109052) (symbol 109021 . 109032) (EXTERN 109014 . 109020) (punctuation 109012 . 109013) (close-paren 109011 . 109012) (symbol 109000 . 109011) (open-paren 108999 . 109000) (symbol 108979 . 108998) (symbol 108967 . 108978) (EXTERN 108960 . 108966) (punctuation 108958 . 108959) (close-paren 108957 . 108958) (symbol 108948 . 108957) (punctuation 108946 . 108947) (symbol 108935 . 108946) (open-paren 108934 . 108935) (symbol 108914 . 108933) (symbol 108904 . 108913) (EXTERN 108897 . 108903) (punctuation 108895 . 108896) (close-paren 108894 . 108895) (symbol 108885 . 108894) (punctuation 108883 . 108884) (symbol 108872 . 108883) (open-paren 108871 . 108872) (symbol 108851 . 108870) (symbol 108841 . 108850) (EXTERN 108834 . 108840) (punctuation 108832 . 108833) (close-paren 108831 . 108832) (VOID 108827 . 108831) (open-paren 108826 . 108827) (symbol 108797 . 108825) (VOID 108792 . 108796) (EXTERN 108785 . 108791) (punctuation 108783 . 108784) (close-paren 108782 . 108783) (symbol 108771 . 108782) (punctuation 108769 . 108770) (symbol 108758 . 108769) (open-paren 108757 . 108758) (symbol 108743 . 108756) (symbol 108731 . 108742) (EXTERN 108724 . 108730) (punctuation 108722 . 108723) (close-paren 108721 . 108722) (symbol 108710 . 108721) (punctuation 108708 . 108709) (symbol 108697 . 108708) (open-paren 108696 . 108697) (symbol 108683 . 108695) (symbol 108671 . 108682) (EXTERN 108664 . 108670) (punctuation 108662 . 108663) (close-paren 108661 . 108662) (symbol 108650 . 108661) (punctuation 108648 . 108649) (symbol 108637 . 108648) (open-paren 108636 . 108637) (symbol 108629 . 108635) (symbol 108617 . 108628) (EXTERN 108610 . 108616) (punctuation 108608 . 108609) (close-paren 108607 . 108608) (symbol 108596 . 108607) (punctuation 108594 . 108595) (symbol 108583 . 108594) (open-paren 108582 . 108583) (symbol 108568 . 108581) (BOOL 108563 . 108567) (EXTERN 108556 . 108562) (punctuation 108554 . 108555) (close-paren 108553 . 108554) (symbol 108542 . 108553) (punctuation 108540 . 108541) (symbol 108529 . 108540) (punctuation 108527 . 108528) (symbol 108516 . 108527) (open-paren 108515 . 108516) (symbol 108507 . 108514) (symbol 108495 . 108506) (EXTERN 108488 . 108494) (punctuation 108486 . 108487) (close-paren 108485 . 108486) (symbol 108474 . 108485) (punctuation 108472 . 108473) (symbol 108461 . 108472) (open-paren 108460 . 108461) (symbol 108452 . 108459) (symbol 108440 . 108451) (EXTERN 108433 . 108439) (punctuation 108431 . 108432) (close-paren 108430 . 108431) (symbol 108419 . 108430) (open-paren 108418 . 108419) (symbol 108403 . 108417) (symbol 108391 . 108402) (EXTERN 108384 . 108390) (punctuation 108382 . 108383) (close-paren 108381 . 108382) (symbol 108370 . 108381) (punctuation 108368 . 108369) (symbol 108357 . 108368) (punctuation 108355 . 108356) (symbol 108344 . 108355) (open-paren 108343 . 108344) (symbol 108337 . 108342) (symbol 108325 . 108336) (EXTERN 108318 . 108324) (punctuation 108316 . 108317) (close-paren 108315 . 108316) (symbol 108306 . 108315) (punctuation 108304 . 108305) (symbol 108295 . 108304) (punctuation 108286 . 108287) (symbol 108277 . 108286) (punctuation 108275 . 108276) (symbol 108266 . 108275) (punctuation 108264 . 108265) (symbol 108253 . 108264) (open-paren 108252 . 108253) (symbol 108237 . 108251) (symbol 108225 . 108236) (EXTERN 108218 . 108224) (punctuation 108216 . 108217) (close-paren 108215 . 108216) (punctuation 108214 . 108215) (symbol 108204 . 108213) (punctuation 108202 . 108203) (punctuation 108201 . 108202) (symbol 108191 . 108200) (punctuation 108189 . 108190) (symbol 108180 . 108189) (punctuation 108168 . 108169) (symbol 108157 . 108168) (punctuation 108155 . 108156) (symbol 108144 . 108155) (punctuation 108142 . 108143) (symbol 108131 . 108142) (open-paren 108130 . 108131) (symbol 108112 . 108129) (VOID 108107 . 108111) (EXTERN 108100 . 108106) (punctuation 108019 . 108020) (close-paren 108018 . 108019) (symbol 108007 . 108018) (punctuation 108005 . 108006) (punctuation 108004 . 108005) (symbol 107988 . 108003) (STRUCT 107981 . 107987) (open-paren 107980 . 107981) (symbol 107957 . 107979) (VOID 107952 . 107956) (punctuation 107950 . 107951) (close-paren 107949 . 107950) (symbol 107939 . 107949) (punctuation 107931 . 107932) (symbol 107920 . 107931) (punctuation 107918 . 107919) (symbol 107907 . 107918) (punctuation 107905 . 107906) (punctuation 107904 . 107905) (symbol 107888 . 107903) (STRUCT 107881 . 107887) (open-paren 107880 . 107881) (symbol 107871 . 107879) (symbol 107861 . 107870) (punctuation 107859 . 107860) (close-paren 107858 . 107859) (punctuation 107857 . 107858) (symbol 107846 . 107856) (punctuation 107844 . 107845) (symbol 107833 . 107844) (punctuation 107831 . 107832) (punctuation 107830 . 107831) (symbol 107814 . 107829) (STRUCT 107807 . 107813) (open-paren 107806 . 107807) (symbol 107794 . 107805) (symbol 107784 . 107793) (punctuation 107782 . 107783) (close-paren 107781 . 107782) (BOOL 107777 . 107781) (punctuation 107775 . 107776) (symbol 107764 . 107775) (punctuation 107754 . 107755) (FLOAT 107749 . 107754) (punctuation 107747 . 107748) (FLOAT 107742 . 107747) (punctuation 107740 . 107741) (symbol 107731 . 107740) (punctuation 107729 . 107730) (symbol 107714 . 107729) (STRUCT 107707 . 107713) (open-paren 107706 . 107707) (symbol 107690 . 107705) (symbol 107678 . 107689) (punctuation 107676 . 107677) (close-paren 107675 . 107676) (INT 107672 . 107675) (punctuation 107670 . 107671) (symbol 107659 . 107670) (open-paren 107658 . 107659) (symbol 107651 . 107657) (symbol 107640 . 107650) (punctuation 107638 . 107639) (close-paren 107637 . 107638) (symbol 107628 . 107637) (punctuation 107626 . 107627) (punctuation 107625 . 107626) (CONST 107619 . 107624) (CHAR 107614 . 107618) (open-paren 107613 . 107614) (symbol 107601 . 107612) (symbol 107590 . 107600) (punctuation 107588 . 107589) (close-paren 107587 . 107588) (punctuation 107586 . 107587) (symbol 107576 . 107585) (punctuation 107574 . 107575) (punctuation 107573 . 107574) (symbol 107563 . 107572) (punctuation 107561 . 107562) (symbol 107550 . 107561) (open-paren 107549 . 107550) (symbol 107524 . 107548) (punctuation 107523 . 107524) (CHAR 107518 . 107522) (EXTERN 107511 . 107517) (punctuation 107509 . 107510) (close-paren 107508 . 107509) (VOID 107504 . 107508) (open-paren 107503 . 107504) (symbol 107480 . 107502) (VOID 107475 . 107479) (EXTERN 107468 . 107474) (punctuation 107466 . 107467) (close-paren 107465 . 107466) (symbol 107456 . 107465) (punctuation 107454 . 107455) (symbol 107445 . 107454) (punctuation 107443 . 107444) (symbol 107432 . 107443) (open-paren 107431 . 107432) (symbol 107417 . 107430) (symbol 107405 . 107416) (EXTERN 107398 . 107404) (close-paren 107379 . 107380) (symbol 107370 . 107379) (open-paren 107369 . 107370) (symbol 107351 . 107368) (symbol 107341 . 107350) (EXTERN 107334 . 107340) (punctuation 107332 . 107333) (close-paren 107331 . 107332) (number 107328 . 107330) (punctuation 107326 . 107327) (symbol 107302 . 107325) (open-paren 107300 . 107301) (ENUM 107295 . 107299) (punctuation 107267 . 107268) (close-paren 107266 . 107267) (VOID 107262 . 107266) (open-paren 107261 . 107262) (symbol 107246 . 107260) (VOID 107241 . 107245) (EXTERN 107234 . 107240) (punctuation 107232 . 107233) (close-paren 107231 . 107232) (VOID 107227 . 107231) (open-paren 107226 . 107227) (symbol 107209 . 107225) (VOID 107204 . 107208) (EXTERN 107197 . 107203) (punctuation 107111 . 107112) (close-paren 107110 . 107111) (VOID 107106 . 107110) (open-paren 107105 . 107106) (symbol 107089 . 107104) (VOID 107084 . 107088) (EXTERN 107077 . 107083) (punctuation 107075 . 107076) (close-paren 107074 . 107075) (VOID 107070 . 107074) (open-paren 107069 . 107070) (symbol 107051 . 107068) (VOID 107046 . 107050) (EXTERN 107039 . 107045) (punctuation 107037 . 107038) (close-paren 107036 . 107037) (VOID 107032 . 107036) (open-paren 107031 . 107032) (symbol 107018 . 107030) (VOID 107013 . 107017) (EXTERN 107006 . 107012) (punctuation 106974 . 106975) (close-paren 106973 . 106974) (VOID 106969 . 106973) (open-paren 106968 . 106969) (symbol 106950 . 106967) (VOID 106945 . 106949) (EXTERN 106938 . 106944) (punctuation 106936 . 106937) (close-paren 106935 . 106936) (symbol 106926 . 106935) (punctuation 106924 . 106925) (punctuation 106923 . 106924) (CHAR 106918 . 106922) (UNSIGNED 106909 . 106917) (CONST 106903 . 106908) (open-paren 106902 . 106903) (symbol 106878 . 106901) (symbol 106868 . 106877) (EXTERN 106861 . 106867) (punctuation 106859 . 106860) (close-paren 106858 . 106859) (symbol 106849 . 106858) (punctuation 106847 . 106848) (punctuation 106846 . 106847) (CHAR 106841 . 106845) (UNSIGNED 106832 . 106840) (CONST 106826 . 106831) (open-paren 106825 . 106826) (symbol 106811 . 106824) (symbol 106801 . 106810) (EXTERN 106794 . 106800) (punctuation 106760 . 106761) (close-paren 106759 . 106760) (VOID 106755 . 106759) (open-paren 106754 . 106755) (symbol 106739 . 106753) (VOID 106734 . 106738) (EXTERN 106727 . 106733) (punctuation 106725 . 106726) (close-paren 106724 . 106725) (VOID 106720 . 106724) (open-paren 106719 . 106720) (symbol 106702 . 106718) (VOID 106697 . 106701) (EXTERN 106690 . 106696) (punctuation 106688 . 106689) (close-paren 106687 . 106688) (VOID 106683 . 106687) (open-paren 106682 . 106683) (symbol 106670 . 106681) (VOID 106665 . 106669) (EXTERN 106658 . 106664) (punctuation 106656 . 106657) (close-paren 106655 . 106656) (symbol 106644 . 106655) (punctuation 106642 . 106643) (BOOL 106638 . 106642) (punctuation 106636 . 106637) (BOOL 106632 . 106636) (punctuation 106630 . 106631) (symbol 106621 . 106630) (punctuation 106578 . 106579) (symbol 106569 . 106578) (punctuation 106567 . 106568) (punctuation 106566 . 106567) (CHAR 106561 . 106565) (UNSIGNED 106552 . 106560) (CONST 106546 . 106551) (open-paren 106545 . 106546) (symbol 106524 . 106544) (symbol 106512 . 106523) (EXTERN 106505 . 106511) (punctuation 106474 . 106475) (close-paren 106473 . 106474) (VOID 106469 . 106473) (open-paren 106468 . 106469) (symbol 106455 . 106467) (VOID 106450 . 106454) (EXTERN 106443 . 106449) (punctuation 106441 . 106442) (close-paren 106440 . 106441) (VOID 106436 . 106440) (open-paren 106435 . 106436) (symbol 106422 . 106434) (VOID 106417 . 106421) (EXTERN 106410 . 106416) (punctuation 106383 . 106384) (close-paren 106382 . 106383) (punctuation 106381 . 106382) (symbol 106369 . 106380) (STRUCT 106362 . 106368) (open-paren 106361 . 106362) (symbol 106338 . 106360) (VOID 106333 . 106337) (EXTERN 106326 . 106332) (punctuation 106324 . 106325) (close-paren 106323 . 106324) (VOID 106319 . 106323) (open-paren 106318 . 106319) (symbol 106305 . 106317) (VOID 106300 . 106304) (EXTERN 106293 . 106299) (punctuation 106290 . 106291) (close-paren 106289 . 106290) (symbol 106281 . 106289) (symbol 106263 . 106280) (ENUM 106258 . 106262) (punctuation 106222 . 106223) (symbol 106211 . 106222) (punctuation 106209 . 106210) (symbol 106198 . 106209) (open-paren 106197 . 106198) (symbol 106176 . 106196) (VOID 106171 . 106175) (EXTERN 106164 . 106170) (punctuation 106162 . 106163) (close-paren 106161 . 106162) (symbol 106144 . 106161) (ENUM 106139 . 106143) (punctuation 106111 . 106112) (symbol 106100 . 106111) (punctuation 106098 . 106099) (symbol 106087 . 106098) (punctuation 106085 . 106086) (symbol 106074 . 106085) (open-paren 106073 . 106074) (symbol 106060 . 106072) (VOID 106055 . 106059) (EXTERN 106048 . 106054) (punctuation 106046 . 106047) (close-paren 106045 . 106046) (symbol 106018 . 106044) (punctuation 106014 . 106015) (symbol 105995 . 106014) (punctuation 105991 . 105992) (symbol 105974 . 105991) (punctuation 105970 . 105971) (symbol 105954 . 105970) (open-paren 105950 . 105951) (symbol 105932 . 105949) (ENUM 105927 . 105931) (punctuation 105925 . 105926) (close-paren 105924 . 105925) (punctuation 105923 . 105924) (symbol 105914 . 105922) (UNION 105908 . 105913) (open-paren 105907 . 105908) (symbol 105886 . 105906) (symbol 105874 . 105885) (EXTERN 105867 . 105873) (punctuation 105865 . 105866) (close-paren 105864 . 105865) (symbol 105853 . 105864) (open-paren 105852 . 105853) (symbol 105838 . 105851) (VOID 105833 . 105837) (EXTERN 105816 . 105822) (punctuation 105814 . 105815) (close-paren 105813 . 105814) (symbol 105802 . 105813) (punctuation 105792 . 105793) (symbol 105781 . 105792) (punctuation 105779 . 105780) (symbol 105768 . 105779) (open-paren 105767 . 105768) (symbol 105747 . 105766) (VOID 105742 . 105746) (EXTERN 105725 . 105731) (punctuation 105723 . 105724) (close-paren 105722 . 105723) (symbol 105711 . 105722) (punctuation 105709 . 105710) (symbol 105698 . 105709) (open-paren 105697 . 105698) (symbol 105679 . 105696) (VOID 105674 . 105678) (EXTERN 105657 . 105663) (punctuation 105655 . 105656) (close-paren 105654 . 105655) (punctuation 105653 . 105654) (symbol 105641 . 105652) (STRUCT 105634 . 105640) (open-paren 105633 . 105634) (symbol 105615 . 105632) (punctuation 105614 . 105615) (symbol 105602 . 105613) (STRUCT 105595 . 105601) (EXTERN 105588 . 105594) (punctuation 105585 . 105586) (close-paren 105584 . 105585) (symbol 105575 . 105584) (punctuation 105573 . 105574) (symbol 105562 . 105573) (open-paren 105561 . 105562) (symbol 105544 . 105560) (symbol 105534 . 105543) (EXTERN 105527 . 105533) (punctuation 105525 . 105526) (close-paren 105524 . 105525) (symbol 105516 . 105524) (punctuation 105514 . 105515) (symbol 105506 . 105514) (punctuation 105504 . 105505) (symbol 105493 . 105504) (open-paren 105492 . 105493) (symbol 105477 . 105491) (symbol 105468 . 105476) (EXTERN 105461 . 105467) (punctuation 105038 . 105039) (close-paren 105037 . 105038) (symbol 105028 . 105037) (open-paren 105027 . 105028) (symbol 105011 . 105026) (symbol 104999 . 105010) (EXTERN 104992 . 104998) (punctuation 104990 . 104991) (close-paren 104989 . 104990) (symbol 104981 . 104989) (open-paren 104980 . 104981) (symbol 104965 . 104979) (symbol 104953 . 104964) (EXTERN 104946 . 104952) (punctuation 104584 . 104585) (close-paren 104583 . 104584) (symbol 104573 . 104583) (symbol 104556 . 104572) (ENUM 104551 . 104555) (punctuation 104516 . 104517) (symbol 104512 . 104516) (symbol 104500 . 104511) (punctuation 104498 . 104499) (symbol 104494 . 104498) (symbol 104482 . 104493) (open-paren 104481 . 104482) (symbol 104468 . 104480) (symbol 104456 . 104467) (EXTERN 104449 . 104455) (punctuation 104447 . 104448) (close-paren 104446 . 104447) (symbol 104426 . 104445) (punctuation 104422 . 104423) (symbol 104403 . 104422) (punctuation 104399 . 104400) (symbol 104389 . 104399) (punctuation 104385 . 104386) (symbol 104375 . 104385) (punctuation 104371 . 104372) (symbol 104357 . 104371) (punctuation 104353 . 104354) (symbol 104342 . 104353) (open-paren 104338 . 104339) (symbol 104321 . 104337) (ENUM 104316 . 104320) (punctuation 104314 . 104315) (close-paren 104313 . 104314) (symbol 104302 . 104313) (open-paren 104301 . 104302) (symbol 104283 . 104300) (symbol 104271 . 104282) (EXTERN 104264 . 104270) (punctuation 104262 . 104263) (close-paren 104261 . 104262) (symbol 104250 . 104261) (open-paren 104249 . 104250) (symbol 104231 . 104248) (symbol 104219 . 104230) (EXTERN 104212 . 104218) (punctuation 104210 . 104211) (close-paren 104209 . 104210) (symbol 104198 . 104209) (punctuation 104196 . 104197) (symbol 104185 . 104196) (punctuation 104173 . 104174) (symbol 104162 . 104173) (punctuation 104160 . 104161) (symbol 104149 . 104160) (open-paren 104148 . 104149) (symbol 104123 . 104147) (VOID 104118 . 104122) (EXTERN 104111 . 104117) (punctuation 104109 . 104110) (close-paren 104108 . 104109) (symbol 104097 . 104108) (punctuation 104095 . 104096) (symbol 104084 . 104095) (open-paren 104083 . 104084) (symbol 104070 . 104082) (VOID 104065 . 104069) (EXTERN 104048 . 104054) (close-paren 104019 . 104020) (punctuation 103997 . 103998) (punctuation 103996 . 103997) (semantic-list 103989 . 103996) (symbol 103973 . 103988) (open-paren 103969 . 103970) (close-paren 103967 . 103968) (symbol 103964 . 103967) (symbol 103952 . 103963) (punctuation 103950 . 103951) (symbol 103947 . 103950) (symbol 103937 . 103946) (punctuation 103935 . 103936) (symbol 103930 . 103935) (symbol 103918 . 103929) (open-paren 103917 . 103918) (symbol 103889 . 103916) (VOID 103884 . 103888) (symbol 103877 . 103883) (close-paren 103874 . 103875) (punctuation 103852 . 103853) (punctuation 103851 . 103852) (semantic-list 103844 . 103851) (symbol 103832 . 103843) (punctuation 103828 . 103829) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 103783 . 103784)))) 103774 . 103828) (open-paren 103770 . 103771) (close-paren 103768 . 103769) (symbol 103765 . 103768) (symbol 103753 . 103764) (punctuation 103751 . 103752) (symbol 103748 . 103751) (symbol 103738 . 103747) (punctuation 103736 . 103737) (symbol 103731 . 103736) (symbol 103719 . 103730) (open-paren 103718 . 103719) (symbol 103694 . 103717) (VOID 103689 . 103693) (symbol 103682 . 103688) (close-paren 103679 . 103680) (punctuation 103659 . 103660) (punctuation 103658 . 103659) (semantic-list 103651 . 103658) (symbol 103639 . 103650) (punctuation 103635 . 103636) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 103572 . 103573)))) 103563 . 103635) (open-paren 103559 . 103560) (close-paren 103557 . 103558) (symbol 103554 . 103557) (symbol 103542 . 103553) (punctuation 103540 . 103541) (symbol 103537 . 103540) (symbol 103527 . 103536) (punctuation 103525 . 103526) (symbol 103520 . 103525) (symbol 103508 . 103519) (open-paren 103507 . 103508) (symbol 103485 . 103506) (VOID 103480 . 103484) (symbol 103473 . 103479) (close-paren 103416 . 103417) (punctuation 103400 . 103401) (punctuation 103399 . 103400) (semantic-list 103392 . 103399) (symbol 103380 . 103391) (open-paren 103376 . 103377) (close-paren 103374 . 103375) (symbol 103371 . 103374) (symbol 103359 . 103370) (punctuation 103357 . 103358) (symbol 103352 . 103357) (symbol 103340 . 103351) (open-paren 103339 . 103340) (symbol 103316 . 103338) (VOID 103311 . 103315) (symbol 103304 . 103310) (close-paren 103302 . 103303) (punctuation 103287 . 103288) (punctuation 103286 . 103287) (semantic-list 103279 . 103286) (symbol 103267 . 103278) (open-paren 103263 . 103264) (close-paren 103261 . 103262) (symbol 103258 . 103261) (symbol 103246 . 103257) (punctuation 103244 . 103245) (symbol 103239 . 103244) (symbol 103227 . 103238) (open-paren 103226 . 103227) (symbol 103204 . 103225) (VOID 103199 . 103203) (symbol 103192 . 103198) (close-paren 103083 . 103084) (punctuation 103067 . 103068) (symbol 103066 . 103067) (punctuation 103065 . 103066) (symbol 103064 . 103065) (punctuation 103063 . 103064) (punctuation 103062 . 103063) (semantic-list 103059 . 103062) (symbol 103051 . 103058) (open-paren 103047 . 103048) (close-paren 103045 . 103046) (symbol 103044 . 103045) (symbol 103035 . 103043) (punctuation 103033 . 103034) (symbol 103032 . 103033) (symbol 103020 . 103031) (open-paren 103019 . 103020) (symbol 102998 . 103018) (VOID 102993 . 102997) (symbol 102986 . 102992) (close-paren 102944 . 102945) (punctuation 102932 . 102933) (symbol 102931 . 102932) (punctuation 102930 . 102931) (symbol 102929 . 102930) (punctuation 102928 . 102929) (punctuation 102927 . 102928) (semantic-list 102924 . 102927) (symbol 102916 . 102923) (RETURN 102909 . 102915) (open-paren 102905 . 102906) (close-paren 102903 . 102904) (symbol 102902 . 102903) (symbol 102890 . 102901) (open-paren 102889 . 102890) (symbol 102872 . 102888) (symbol 102863 . 102871) (symbol 102856 . 102862) (close-paren 102819 . 102820) (punctuation 102803 . 102804) (punctuation 102802 . 102803) (semantic-list 102793 . 102802) (symbol 102784 . 102792) (open-paren 102780 . 102781) (close-paren 102778 . 102779) (symbol 102773 . 102778) (symbol 102761 . 102772) (punctuation 102759 . 102760) (symbol 102752 . 102759) (symbol 102740 . 102751) (open-paren 102739 . 102740) (symbol 102721 . 102738) (VOID 102716 . 102720) (symbol 102709 . 102715) (close-paren 102669 . 102670) (punctuation 102661 . 102662) (punctuation 102660 . 102661) (symbol 102657 . 102660) (RETURN 102650 . 102656) (punctuation 102646 . 102647) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "blv" 102599 . 102602)))) 102590 . 102646) (open-paren 102586 . 102587) (close-paren 102584 . 102585) (symbol 102581 . 102584) (punctuation 102580 . 102581) (symbol 102556 . 102579) (STRUCT 102549 . 102555) (open-paren 102548 . 102549) (symbol 102538 . 102547) (INT 102534 . 102537) (symbol 102527 . 102533) (close-paren 102476 . 102477) (punctuation 102443 . 102444) (symbol 102442 . 102443) (punctuation 102441 . 102442) (symbol 102440 . 102441) (punctuation 102439 . 102440) (punctuation 102438 . 102439) (semantic-list 102433 . 102438) (symbol 102425 . 102432) (open-paren 102421 . 102422) (close-paren 102419 . 102420) (symbol 102416 . 102419) (symbol 102404 . 102415) (open-paren 102403 . 102404) (symbol 102382 . 102402) (VOID 102377 . 102381) (symbol 102370 . 102376) (close-paren 102367 . 102368) (punctuation 102353 . 102354) (symbol 102352 . 102353) (punctuation 102351 . 102352) (symbol 102350 . 102351) (punctuation 102349 . 102350) (punctuation 102348 . 102349) (semantic-list 102343 . 102348) (symbol 102335 . 102342) (open-paren 102331 . 102332) (close-paren 102329 . 102330) (symbol 102325 . 102329) (punctuation 102324 . 102325) (symbol 102312 . 102323) (STRUCT 102305 . 102311) (punctuation 102303 . 102304) (symbol 102300 . 102303) (symbol 102288 . 102299) (open-paren 102287 . 102288) (symbol 102271 . 102286) (VOID 102266 . 102270) (symbol 102259 . 102265) (close-paren 102256 . 102257) (punctuation 102240 . 102241) (symbol 102239 . 102240) (punctuation 102238 . 102239) (symbol 102237 . 102238) (punctuation 102236 . 102237) (punctuation 102235 . 102236) (semantic-list 102230 . 102235) (symbol 102222 . 102229) (open-paren 102218 . 102219) (close-paren 102216 . 102217) (symbol 102211 . 102216) (symbol 102199 . 102210) (punctuation 102197 . 102198) (symbol 102194 . 102197) (symbol 102182 . 102193) (open-paren 102181 . 102182) (symbol 102164 . 102180) (VOID 102159 . 102163) (symbol 102152 . 102158) (close-paren 102149 . 102150) (punctuation 102127 . 102128) (symbol 102126 . 102127) (punctuation 102125 . 102126) (symbol 102124 . 102125) (punctuation 102123 . 102124) (punctuation 102122 . 102123) (semantic-list 102117 . 102122) (symbol 102109 . 102116) (open-paren 102105 . 102106) (close-paren 102103 . 102104) (symbol 102095 . 102103) (symbol 102083 . 102094) (punctuation 102081 . 102082) (symbol 102078 . 102081) (symbol 102066 . 102077) (open-paren 102065 . 102066) (symbol 102045 . 102064) (VOID 102040 . 102044) (symbol 102033 . 102039) (close-paren 101940 . 101941) (number 101931 . 101932) (punctuation 101929 . 101930) (punctuation 101923 . 101924) (number 101921 . 101922) (punctuation 101905 . 101906) (punctuation 101904 . 101905) (open-paren 101890 . 101891) (close-paren 101888 . 101889) (symbol 101885 . 101888) (symbol 101873 . 101884) (punctuation 101871 . 101872) (symbol 101868 . 101871) (symbol 101858 . 101867) (punctuation 101856 . 101857) (symbol 101855 . 101856) (punctuation 101854 . 101855) (symbol 101838 . 101853) (STRUCT 101831 . 101837) (open-paren 101830 . 101831) (symbol 101810 . 101829) (VOID 101805 . 101809) (symbol 101798 . 101804) (close-paren 101795 . 101796) (punctuation 101782 . 101783) (number 101780 . 101781) (punctuation 101764 . 101765) (punctuation 101763 . 101764) (open-paren 101749 . 101750) (close-paren 101747 . 101748) (symbol 101744 . 101747) (symbol 101732 . 101743) (punctuation 101730 . 101731) (symbol 101727 . 101730) (symbol 101717 . 101726) (punctuation 101715 . 101716) (symbol 101714 . 101715) (punctuation 101713 . 101714) (symbol 101697 . 101712) (STRUCT 101690 . 101696) (open-paren 101689 . 101690) (symbol 101671 . 101688) (VOID 101666 . 101670) (symbol 101659 . 101665) (close-paren 101615 . 101616) (punctuation 101607 . 101608) (SIZEOF 101600 . 101606) (punctuation 101576 . 101577) (punctuation 101566 . 101567) (punctuation 101565 . 101566) (semantic-list 101562 . 101565) (punctuation 101542 . 101543) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 101485 . 101486)))) 101476 . 101542) (open-paren 101472 . 101473) (close-paren 101470 . 101471) (symbol 101465 . 101470) (symbol 101455 . 101464) (punctuation 101453 . 101454) (symbol 101449 . 101453) (punctuation 101448 . 101449) (symbol 101436 . 101447) (punctuation 101434 . 101435) (symbol 101428 . 101434) (symbol 101418 . 101427) (punctuation 101416 . 101417) (symbol 101415 . 101416) (symbol 101403 . 101414) (open-paren 101402 . 101403) (symbol 101396 . 101401) (VOID 101391 . 101395) (symbol 101384 . 101390) (punctuation 101225 . 101226) (close-paren 101224 . 101225) (punctuation 101223 . 101224) (symbol 101211 . 101222) (open-paren 101210 . 101211) (symbol 101200 . 101209) (VOID 101195 . 101199) (close-paren 101044 . 101045) (semantic-list 101015 . 101024) (IF 101012 . 101014) (open-paren 101008 . 101009) (close-paren 101006 . 101007) (symbol 101001 . 101006) (INT 100997 . 101000) (SHORT 100991 . 100996) (UNSIGNED 100982 . 100990) (open-paren 100981 . 100982) (symbol 100969 . 100980) (VOID 100964 . 100968) (symbol 100957 . 100963) (punctuation 100692 . 100693) (close-paren 100691 . 100692) (VOID 100687 . 100691) (open-paren 100686 . 100687) (symbol 100675 . 100685) (VOID 100670 . 100674) (EXTERN 100663 . 100669) (punctuation 100620 . 100621) (close-paren 100619 . 100620) (open-paren 99844 . 99845) (symbol 99836 . 99843) (STRUCT 99829 . 99835) (punctuation 99826 . 99827) (close-paren 99825 . 99826) (symbol 99813 . 99824) (punctuation 99811 . 99812) (symbol 99797 . 99811) (punctuation 99795 . 99796) (symbol 99788 . 99795) (open-paren 99786 . 99787) (symbol 99774 . 99785) (ENUM 99769 . 99773) (close-paren 98641 . 98642) (punctuation 98630 . 98631) (symbol 98618 . 98629) (RETURN 98611 . 98617) (open-paren 98607 . 98608) (close-paren 98605 . 98606) (VOID 98601 . 98605) (open-paren 98600 . 98601) (symbol 98586 . 98599) (symbol 98576 . 98585) (symbol 98569 . 98575) (punctuation 98392 . 98393) (close-paren 98391 . 98392) (punctuation 98258 . 98259) (symbol 98253 . 98257) (symbol "specbind_tag" 98230 . 98252) (ENUM "enum" 98230 . 98252) (punctuation 98258 . 98259) (symbol 98253 . 98257) (symbol "specbind_tag" 98230 . 98252) (ENUM "enum" 98230 . 98252) (punctuation 97938 . 97939) (symbol 97933 . 97937) (symbol "specbind_tag" 97910 . 97932) (ENUM "enum" 97910 . 97932) (punctuation 97938 . 97939) (symbol 97933 . 97937) (symbol "specbind_tag" 97910 . 97932) (ENUM "enum" 97910 . 97932) (punctuation 97833 . 97834) (symbol 97828 . 97832) (symbol "specbind_tag" 97805 . 97827) (ENUM "enum" 97805 . 97827) (punctuation 97833 . 97834) (symbol 97828 . 97832) (symbol "specbind_tag" 97805 . 97827) (ENUM "enum" 97805 . 97827) (punctuation 97715 . 97716) (symbol 97710 . 97714) (symbol "specbind_tag" 97687 . 97709) (ENUM "enum" 97687 . 97709) (punctuation 97715 . 97716) (symbol 97710 . 97714) (symbol "specbind_tag" 97687 . 97709) (ENUM "enum" 97687 . 97709) (punctuation 97592 . 97593) (symbol 97587 . 97591) (symbol "specbind_tag" 97564 . 97586) (ENUM "enum" 97564 . 97586) (punctuation 97592 . 97593) (symbol 97587 . 97591) (symbol "specbind_tag" 97564 . 97586) (ENUM "enum" 97564 . 97586) (punctuation 97462 . 97463) (symbol 97457 . 97461) (symbol "specbind_tag" 97434 . 97456) (ENUM "enum" 97434 . 97456) (punctuation 97462 . 97463) (symbol 97457 . 97461) (symbol "specbind_tag" 97434 . 97456) (ENUM "enum" 97434 . 97456) (punctuation 97403 . 97404) (symbol 97398 . 97402) (symbol "specbind_tag" 97375 . 97397) (ENUM "enum" 97375 . 97397) (open-paren 97369 . 97370) (symbol 97355 . 97366) (UNION 97349 . 97354) (punctuation 97346 . 97347) (close-paren 97345 . 97346) (symbol 97279 . 97298) (punctuation 97239 . 97240) (symbol 97222 . 97239) (punctuation 97103 . 97104) (symbol 97092 . 97103) (punctuation 97051 . 97052) (symbol 97034 . 97051) (punctuation 96999 . 97000) (symbol 96980 . 96999) (punctuation 96950 . 96951) (symbol 96932 . 96950) (punctuation 96899 . 96900) (symbol 96881 . 96899) (punctuation 96826 . 96827) (symbol 96812 . 96826) (open-paren 96808 . 96809) (symbol 96795 . 96807) (ENUM 96790 . 96794) (punctuation 94136 . 94137) (close-paren 94135 . 94136) (INT 94132 . 94135) (punctuation 94130 . 94131) (punctuation 94129 . 94130) (CHAR 94124 . 94128) (CONST 94118 . 94123) (punctuation 94116 . 94117) (punctuation 94115 . 94116) (symbol 94096 . 94114) (STRUCT 94089 . 94095) (open-paren 94088 . 94089) (symbol 94074 . 94087) (VOID 94069 . 94073) (EXTERN 94062 . 94068) (punctuation 94060 . 94061) (close-paren 94059 . 94060) (punctuation 94058 . 94059) (symbol 94048 . 94057) (punctuation 94046 . 94047) (punctuation 94045 . 94046) (CHAR 94040 . 94044) (CONST 94034 . 94039) (punctuation 94032 . 94033) (punctuation 94031 . 94032) (symbol 94019 . 94030) (STRUCT 94012 . 94018) (open-paren 94011 . 94012) (symbol 94000 . 94010) (VOID 93995 . 93999) (EXTERN 93988 . 93994) (punctuation 93986 . 93987) (close-paren 93985 . 93986) (punctuation 93984 . 93985) (BOOL 93979 . 93983) (punctuation 93977 . 93978) (punctuation 93976 . 93977) (CHAR 93971 . 93975) (CONST 93965 . 93970) (punctuation 93963 . 93964) (punctuation 93962 . 93963) (symbol 93949 . 93961) (STRUCT 93942 . 93948) (open-paren 93941 . 93942) (symbol 93929 . 93940) (VOID 93924 . 93928) (EXTERN 93917 . 93923) (punctuation 93915 . 93916) (close-paren 93914 . 93915) (punctuation 93913 . 93914) (symbol 93901 . 93912) (punctuation 93899 . 93900) (punctuation 93898 . 93899) (CHAR 93893 . 93897) (CONST 93887 . 93892) (punctuation 93885 . 93886) (punctuation 93884 . 93885) (symbol 93872 . 93883) (STRUCT 93865 . 93871) (open-paren 93864 . 93865) (symbol 93846 . 93863) (VOID 93841 . 93845) (EXTERN 93834 . 93840) (punctuation 93832 . 93833) (close-paren 93831 . 93832) (punctuation 93830 . 93831) (symbol 93818 . 93829) (punctuation 93816 . 93817) (punctuation 93815 . 93816) (CHAR 93810 . 93814) (CONST 93804 . 93809) (punctuation 93802 . 93803) (punctuation 93801 . 93802) (symbol 93789 . 93800) (STRUCT 93782 . 93788) (open-paren 93781 . 93782) (symbol 93769 . 93780) (VOID 93764 . 93768) (EXTERN 93757 . 93763) (punctuation 93253 . 93254) (close-paren 93252 . 93253) (number 93248 . 93249) (punctuation 93247 . 93248) (punctuation 93245 . 93246) (symbol 93235 . 93244) (punctuation 93229 . 93230) (number 93228 . 93229) (punctuation 93227 . 93228) (punctuation 93225 . 93226) (symbol 93220 . 93224) (open-paren 93214 . 93215) (symbol 93204 . 93211) (ENUM 93199 . 93203) (punctuation 93196 . 93197) (close-paren 93195 . 93196) (punctuation 93194 . 93195) (symbol 93184 . 93193) (STRUCT 93177 . 93183) (open-paren 93176 . 93177) (symbol 93168 . 93175) (VOID 93163 . 93167) (EXTERN 93156 . 93162) (close-paren 91314 . 91315) (open-paren 91240 . 91241) (close-paren 91238 . 91239) (symbol 91237 . 91238) (symbol 91225 . 91236) (open-paren 91224 . 91225) (symbol 91207 . 91223) (VOID 91202 . 91206) (symbol 91195 . 91201) (close-paren 91192 . 91193) (open-paren 91118 . 91119) (close-paren 91116 . 91117) (symbol 91115 . 91116) (symbol 91103 . 91114) (open-paren 91102 . 91103) (symbol 91085 . 91101) (VOID 91080 . 91084) (symbol 91073 . 91079) (close-paren 90685 . 90686) (semantic-list 90666 . 90669) (open-paren 90642 . 90643) (close-paren 90640 . 90641) (symbol 90639 . 90640) (symbol 90627 . 90638) (open-paren 90626 . 90627) (symbol 90604 . 90625) (VOID 90599 . 90603) (symbol 90592 . 90598) (close-paren 90589 . 90590) (punctuation 90577 . 90578) (semantic-list 90573 . 90576) (symbol 90561 . 90572) (punctuation 90559 . 90560) (semantic-list 90555 . 90558) (symbol 90548 . 90554) (RETURN 90541 . 90547) (open-paren 90537 . 90538) (close-paren 90535 . 90536) (symbol 90534 . 90535) (symbol 90522 . 90533) (open-paren 90521 . 90522) (symbol 90511 . 90520) (DOUBLE 90504 . 90510) (symbol 90497 . 90503) (close-paren 89602 . 89603) (semantic-list 89581 . 89584) (open-paren 89557 . 89558) (close-paren 89555 . 89556) (symbol 89554 . 89555) (symbol 89542 . 89553) (open-paren 89541 . 89542) (symbol 89528 . 89540) (VOID 89523 . 89527) (symbol 89516 . 89522) (close-paren 89514 . 89515) (semantic-list 89494 . 89497) (open-paren 89471 . 89472) (close-paren 89469 . 89470) (symbol 89460 . 89469) (symbol 89448 . 89459) (punctuation 89446 . 89447) (symbol 89445 . 89446) (symbol 89433 . 89444) (open-paren 89432 . 89433) (symbol 89420 . 89431) (VOID 89415 . 89419) (symbol 89408 . 89414) (close-paren 89406 . 89407) (RETURN 89351 . 89357) (semantic-list 89333 . 89346) (IF 89330 . 89332) (RETURN 89310 . 89316) (semantic-list 89292 . 89305) (IF 89289 . 89291) (open-paren 89285 . 89286) (close-paren 89283 . 89284) (symbol 89282 . 89283) (symbol 89270 . 89281) (open-paren 89269 . 89270) (symbol 89246 . 89268) (symbol 89236 . 89245) (symbol 89229 . 89235) (close-paren 89158 . 89159) (semantic-list 89152 . 89155) (semantic-list 89125 . 89135) (open-paren 89101 . 89102) (close-paren 89099 . 89100) (symbol 89098 . 89099) (symbol 89086 . 89097) (open-paren 89085 . 89086) (symbol 89068 . 89084) (VOID 89063 . 89067) (symbol 89056 . 89062) (close-paren 89053 . 89054) (open-paren 89024 . 89025) (close-paren 89022 . 89023) (symbol 89021 . 89022) (symbol 89009 . 89020) (open-paren 89008 . 89009) (close-paren 89006 . 89007) (symbol 88994 . 89006) (open-paren 88993 . 88994) (VOID 88988 . 88992) (symbol 88981 . 88987) (close-paren 88978 . 88979) (semantic-list 88961 . 88964) (open-paren 88940 . 88941) (close-paren 88938 . 88939) (symbol 88937 . 88938) (symbol 88925 . 88936) (punctuation 88923 . 88924) (symbol 88922 . 88923) (symbol 88910 . 88921) (open-paren 88909 . 88910) (symbol 88894 . 88908) (VOID 88889 . 88893) (symbol 88882 . 88888) (close-paren 88879 . 88880) (semantic-list 88862 . 88865) (punctuation 88855 . 88856) (punctuation 88854 . 88855) (semantic-list 88850 . 88853) (open-paren 88828 . 88829) (close-paren 88826 . 88827) (symbol 88825 . 88826) (symbol 88813 . 88824) (open-paren 88812 . 88813) (symbol 88801 . 88811) (VOID 88796 . 88800) (symbol 88789 . 88795) (close-paren 88785 . 88786) (punctuation 88764 . 88765) (punctuation 88763 . 88764) (semantic-list 88759 . 88762) (symbol 88746 . 88758) (punctuation 88744 . 88745) (punctuation 88743 . 88744) (semantic-list 88739 . 88742) (symbol 88731 . 88738) (punctuation 88729 . 88730) (punctuation 88728 . 88729) (semantic-list 88724 . 88727) (symbol 88716 . 88723) (RETURN 88709 . 88715) (open-paren 88705 . 88706) (close-paren 88703 . 88704) (symbol 88702 . 88703) (symbol 88690 . 88701) (open-paren 88689 . 88690) (symbol 88682 . 88688) (BOOL 88677 . 88681) (symbol 88670 . 88676) (close-paren 88647 . 88648) (punctuation 88621 . 88622) (semantic-list 88617 . 88620) (symbol 88611 . 88616) (RETURN 88604 . 88610) (open-paren 88600 . 88601) (close-paren 88598 . 88599) (symbol 88597 . 88598) (symbol 88585 . 88596) (open-paren 88584 . 88585) (symbol 88577 . 88583) (BOOL 88572 . 88576) (symbol 88565 . 88571) (close-paren 88525 . 88526) (semantic-list 88506 . 88509) (open-paren 88482 . 88483) (close-paren 88480 . 88481) (symbol 88479 . 88480) (symbol 88467 . 88478) (open-paren 88466 . 88467) (symbol 88453 . 88465) (VOID 88448 . 88452) (symbol 88441 . 88447) (close-paren 88438 . 88439) (RETURN 88399 . 88405) (open-paren 88395 . 88396) (close-paren 88393 . 88394) (symbol 88392 . 88393) (symbol 88380 . 88391) (open-paren 88379 . 88380) (symbol 88371 . 88378) (BOOL 88366 . 88370) (symbol 88359 . 88365) (close-paren 88356 . 88357) (RETURN 88318 . 88324) (open-paren 88314 . 88315) (close-paren 88312 . 88313) (symbol 88311 . 88312) (symbol 88299 . 88310) (open-paren 88298 . 88299) (symbol 88291 . 88297) (BOOL 88286 . 88290) (symbol 88279 . 88285) (close-paren 88276 . 88277) (RETURN 88235 . 88241) (open-paren 88231 . 88232) (close-paren 88229 . 88230) (symbol 88228 . 88229) (symbol 88216 . 88227) (open-paren 88215 . 88216) (symbol 88205 . 88214) (BOOL 88200 . 88204) (symbol 88193 . 88199) (close-paren 88190 . 88191) (RETURN 88137 . 88143) (open-paren 88133 . 88134) (close-paren 88131 . 88132) (symbol 88130 . 88131) (symbol 88118 . 88129) (open-paren 88117 . 88118) (symbol 88095 . 88116) (BOOL 88090 . 88094) (symbol 88083 . 88089) (close-paren 88033 . 88034) (punctuation 88004 . 88005) (semantic-list 88000 . 88003) (symbol 87994 . 87999) (RETURN 87987 . 87993) (open-paren 87983 . 87984) (close-paren 87981 . 87982) (symbol 87980 . 87981) (symbol 87968 . 87979) (open-paren 87967 . 87968) (symbol 87957 . 87966) (BOOL 87952 . 87956) (symbol 87945 . 87951) (close-paren 87757 . 87758) (punctuation 87751 . 87752) (punctuation 87750 . 87751) (semantic-list 87746 . 87749) (symbol 87741 . 87745) (punctuation 87739 . 87740) (punctuation 87738 . 87739) (semantic-list 87734 . 87737) (symbol 87729 . 87733) (punctuation 87727 . 87728) (punctuation 87726 . 87727) (symbol 87723 . 87725) (punctuation 87721 . 87722) (punctuation 87720 . 87721) (semantic-list 87716 . 87719) (symbol 87707 . 87715) (RETURN 87700 . 87706) (open-paren 87696 . 87697) (close-paren 87694 . 87695) (symbol 87692 . 87694) (symbol 87683 . 87691) (punctuation 87681 . 87682) (symbol 87680 . 87681) (symbol 87668 . 87679) (punctuation 87666 . 87667) (symbol 87664 . 87666) (symbol 87655 . 87663) (open-paren 87654 . 87655) (symbol 87638 . 87653) (BOOL 87633 . 87637) (symbol 87626 . 87632) (close-paren 87623 . 87624) (punctuation 87611 . 87612) (punctuation 87610 . 87611) (number 87608 . 87609) (punctuation 87606 . 87607) (punctuation 87605 . 87606) (semantic-list 87601 . 87604) (symbol 87592 . 87600) (RETURN 87585 . 87591) (open-paren 87581 . 87582) (close-paren 87579 . 87580) (symbol 87578 . 87579) (symbol 87566 . 87577) (open-paren 87565 . 87566) (symbol 87557 . 87564) (BOOL 87552 . 87556) (symbol 87545 . 87551) (close-paren 87543 . 87544) (punctuation 87529 . 87530) (punctuation 87528 . 87529) (semantic-list 87524 . 87527) (symbol 87515 . 87523) (RETURN 87508 . 87514) (open-paren 87504 . 87505) (close-paren 87502 . 87503) (symbol 87501 . 87502) (symbol 87489 . 87500) (open-paren 87488 . 87489) (symbol 87480 . 87487) (BOOL 87475 . 87479) (symbol 87468 . 87474) (punctuation 87436 . 87437) (close-paren 87435 . 87436) (number 87430 . 87432) (punctuation 87428 . 87429) (symbol 87414 . 87427) (punctuation 87316 . 87317) (symbol 87307 . 87316) (punctuation 87305 . 87306) (symbol 87296 . 87304) (punctuation 87294 . 87295) (symbol 87283 . 87293) (punctuation 87281 . 87282) (symbol 87270 . 87280) (punctuation 87268 . 87269) (symbol 87257 . 87267) (punctuation 87255 . 87256) (symbol 87246 . 87254) (punctuation 87238 . 87239) (symbol 87219 . 87237) (punctuation 87212 . 87213) (number 87203 . 87212) (punctuation 87201 . 87202) (symbol 87191 . 87200) (punctuation 87185 . 87186) (number 87176 . 87185) (punctuation 87174 . 87175) (symbol 87165 . 87173) (punctuation 87159 . 87160) (number 87150 . 87159) (punctuation 87148 . 87149) (symbol 87137 . 87147) (punctuation 87131 . 87132) (number 87122 . 87131) (punctuation 87120 . 87121) (symbol 87109 . 87119) (punctuation 87103 . 87104) (number 87094 . 87103) (punctuation 87092 . 87093) (symbol 87081 . 87091) (punctuation 87075 . 87076) (number 87066 . 87075) (punctuation 87064 . 87065) (symbol 87055 . 87063) (open-paren 87049 . 87050) (symbol 87037 . 87046) (ENUM 87032 . 87036) (punctuation 86762 . 86763) (close-paren 86761 . 86762) (number 86757 . 86758) (punctuation 86755 . 86756) (symbol 86734 . 86754) (punctuation 86728 . 86729) (number 86727 . 86728) (punctuation 86725 . 86726) (symbol 86705 . 86724) (punctuation 86699 . 86700) (number 86698 . 86699) (punctuation 86696 . 86697) (symbol 86675 . 86695) (punctuation 86669 . 86670) (number 86668 . 86669) (punctuation 86666 . 86667) (symbol 86647 . 86665) (punctuation 86641 . 86642) (number 86640 . 86641) (punctuation 86638 . 86639) (symbol 86620 . 86637) (punctuation 86614 . 86615) (number 86613 . 86614) (punctuation 86611 . 86612) (symbol 86594 . 86610) (open-paren 86588 . 86589) (symbol 86572 . 86585) (ENUM 86567 . 86571) (punctuation 86265 . 86266) (close-paren 86264 . 86265) (semantic-list 86176 . 86261) (punctuation 86174 . 86175) (symbol 86148 . 86167) (open-paren 86142 . 86143) (ENUM 86135 . 86139) (close-paren 85694 . 85695) (punctuation 85687 . 85688) (symbol 85686 . 85687) (punctuation 85685 . 85686) (punctuation 85684 . 85685) (semantic-list 85681 . 85684) (symbol 85674 . 85680) (RETURN 85667 . 85673) (open-paren 85663 . 85664) (close-paren 85661 . 85662) (symbol 85660 . 85661) (symbol 85648 . 85659) (open-paren 85647 . 85648) (symbol 85635 . 85646) (DOUBLE 85628 . 85634) (symbol 85621 . 85627) (close-paren 85618 . 85619) (RETURN 85587 . 85593) (punctuation 85583 . 85584) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FLOATP" 85572 . 85578)))) 85563 . 85583) (open-paren 85559 . 85560) (close-paren 85557 . 85558) (symbol 85556 . 85557) (symbol 85544 . 85555) (open-paren 85543 . 85544) (symbol 85536 . 85542) (punctuation 85534 . 85535) (symbol 85523 . 85533) (STRUCT 85516 . 85522) (symbol 85509 . 85515) (close-paren 85506 . 85507) (punctuation 85504 . 85505) (semantic-list #("(XTYPE (x) == Lisp_Float)" 0 1 (macros (("x" symbol "x" 85502 . 85503)))) 85487 . 85504) (RETURN 85480 . 85486) (open-paren 85476 . 85477) (close-paren 85474 . 85475) (symbol 85473 . 85474) (symbol 85461 . 85472) (open-paren 85460 . 85461) (close-paren 85458 . 85459) (symbol 85452 . 85458) (open-paren 85451 . 85452) (BOOL 85446 . 85450) (symbol 85439 . 85445) (punctuation 85436 . 85437) (close-paren 85435 . 85436) (open-paren 85355 . 85356) (symbol 85342 . 85352) (STRUCT 85335 . 85341) (close-paren 85298 . 85299) (punctuation 85280 . 85281) (punctuation 85279 . 85280) (symbol 85278 . 85279) (punctuation 85277 . 85278) (RETURN 85270 . 85276) (punctuation 85266 . 85267) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFER_OBJFWDP" 85247 . 85261)))) 85238 . 85266) (open-paren 85234 . 85235) (close-paren 85232 . 85233) (symbol 85231 . 85232) (punctuation 85230 . 85231) (symbol 85221 . 85229) (UNION 85215 . 85220) (open-paren 85214 . 85215) (symbol 85199 . 85213) (punctuation 85197 . 85198) (symbol 85178 . 85196) (STRUCT 85171 . 85177) (symbol 85164 . 85170) (close-paren 85161 . 85162) (punctuation 85138 . 85139) (punctuation 85137 . 85138) (semantic-list 85133 . 85136) (symbol 85124 . 85132) (RETURN 85117 . 85123) (open-paren 85113 . 85114) (close-paren 85111 . 85112) (symbol 85110 . 85111) (punctuation 85109 . 85110) (symbol 85100 . 85108) (UNION 85094 . 85099) (open-paren 85093 . 85094) (symbol 85078 . 85092) (BOOL 85073 . 85077) (symbol 85066 . 85072) (close-paren 85063 . 85064) (punctuation 85056 . 85057) (symbol 85048 . 85056) (punctuation 85047 . 85048) (punctuation 85046 . 85047) (symbol 85045 . 85046) (RETURN 85038 . 85044) (open-paren 85034 . 85035) (close-paren 85032 . 85033) (symbol 85031 . 85032) (punctuation 85030 . 85031) (symbol 85021 . 85029) (UNION 85015 . 85020) (open-paren 85014 . 85015) (symbol 85005 . 85013) (symbol 84991 . 85004) (ENUM 84986 . 84990) (symbol 84979 . 84985) (punctuation 84976 . 84977) (close-paren 84975 . 84976) (open-paren 84776 . 84777) (symbol 84765 . 84773) (UNION 84759 . 84764) (punctuation 84756 . 84757) (close-paren 84755 . 84756) (open-paren 84678 . 84679) (symbol 84657 . 84675) (STRUCT 84650 . 84656) (punctuation 84563 . 84564) (close-paren 84562 . 84563) (open-paren 83617 . 83618) (symbol 83591 . 83614) (STRUCT 83584 . 83590) (punctuation 82507 . 82508) (close-paren 82506 . 82507) (open-paren 82326 . 82327) (symbol 82305 . 82323) (STRUCT 82298 . 82304) (punctuation 82167 . 82168) (close-paren 82166 . 82167) (open-paren 82087 . 82088) (symbol 82073 . 82084) (STRUCT 82066 . 82072) (punctuation 81872 . 81873) (close-paren 81871 . 81872) (open-paren 81797 . 81798) (symbol 81782 . 81794) (STRUCT 81775 . 81781) (punctuation 81580 . 81581) (close-paren 81579 . 81580) (open-paren 81502 . 81503) (symbol 81488 . 81499) (STRUCT 81481 . 81487) (close-paren 81281 . 81282) (RETURN 81251 . 81257) (punctuation 81247 . 81248) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "USER_PTRP" 81233 . 81242)))) 81224 . 81247) (open-paren 81220 . 81221) (close-paren 81218 . 81219) (symbol 81217 . 81218) (symbol 81205 . 81216) (open-paren 81204 . 81205) (symbol 81194 . 81203) (punctuation 81192 . 81193) (symbol 81178 . 81191) (STRUCT 81171 . 81177) (symbol 81164 . 81170) (close-paren 81161 . 81162) (punctuation 81139 . 81140) (punctuation 81138 . 81139) (semantic-list 81134 . 81137) (symbol 81124 . 81133) (punctuation 81122 . 81123) (punctuation 81121 . 81122) (semantic-list 81117 . 81120) (symbol 81111 . 81116) (RETURN 81104 . 81110) (open-paren 81100 . 81101) (close-paren 81098 . 81099) (symbol 81097 . 81098) (symbol 81085 . 81096) (open-paren 81084 . 81085) (symbol 81074 . 81083) (BOOL 81069 . 81073) (symbol 81062 . 81068) (close-paren 81039 . 81040) (RETURN 81009 . 81015) (punctuation 81005 . 81006) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "OVERLAYP" 80992 . 81000)))) 80983 . 81005) (open-paren 80979 . 80980) (close-paren 80977 . 80978) (symbol 80976 . 80977) (symbol 80964 . 80975) (open-paren 80963 . 80964) (symbol 80954 . 80962) (punctuation 80952 . 80953) (symbol 80939 . 80951) (STRUCT 80932 . 80938) (symbol 80925 . 80931) (close-paren 80922 . 80923) (punctuation 80901 . 80902) (punctuation 80900 . 80901) (semantic-list 80896 . 80899) (symbol 80886 . 80895) (punctuation 80884 . 80885) (punctuation 80883 . 80884) (semantic-list 80879 . 80882) (symbol 80873 . 80878) (RETURN 80866 . 80872) (open-paren 80862 . 80863) (close-paren 80860 . 80861) (symbol 80859 . 80860) (symbol 80847 . 80858) (open-paren 80846 . 80847) (symbol 80837 . 80845) (BOOL 80832 . 80836) (symbol 80825 . 80831) (close-paren 80822 . 80823) (RETURN 80792 . 80798) (punctuation 80788 . 80789) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MARKERP" 80776 . 80783)))) 80767 . 80788) (open-paren 80763 . 80764) (close-paren 80761 . 80762) (symbol 80760 . 80761) (symbol 80748 . 80759) (open-paren 80747 . 80748) (symbol 80739 . 80746) (punctuation 80737 . 80738) (symbol 80725 . 80736) (STRUCT 80718 . 80724) (symbol 80711 . 80717) (close-paren 80708 . 80709) (punctuation 80706 . 80707) (semantic-list #("(MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Marker)" 0 1 (macros (("x" symbol "x" 80704 . 80705)))) 80688 . 80706) (RETURN 80681 . 80687) (open-paren 80677 . 80678) (close-paren 80675 . 80676) (symbol 80674 . 80675) (symbol 80662 . 80673) (open-paren 80661 . 80662) (close-paren 80659 . 80660) (symbol 80652 . 80659) (open-paren 80651 . 80652) (BOOL 80646 . 80650) (symbol 80639 . 80645) (close-paren 80636 . 80637) (RETURN 80606 . 80612) (open-paren 80602 . 80603) (close-paren 80600 . 80601) (symbol 80599 . 80600) (symbol 80587 . 80598) (open-paren 80586 . 80587) (symbol 80580 . 80585) (punctuation 80578 . 80579) (symbol 80568 . 80577) (UNION 80562 . 80567) (symbol 80555 . 80561) (punctuation 80552 . 80553) (close-paren 80551 . 80552) (open-paren 80235 . 80236) (symbol 80223 . 80232) (UNION 80217 . 80222) (punctuation 80084 . 80085) (close-paren 80083 . 80084) (open-paren 79935 . 79936) (symbol 79923 . 79932) (STRUCT 79916 . 79922) (close-paren 79854 . 79855) (RETURN 79824 . 79830) (punctuation 79820 . 79821) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FINALIZERP" 79805 . 79815)))) 79796 . 79820) (open-paren 79792 . 79793) (close-paren 79790 . 79791) (symbol 79789 . 79790) (symbol 79777 . 79788) (open-paren 79776 . 79777) (symbol 79765 . 79775) (punctuation 79763 . 79764) (symbol 79748 . 79762) (STRUCT 79741 . 79747) (symbol 79734 . 79740) (close-paren 79731 . 79732) (punctuation 79708 . 79709) (punctuation 79707 . 79708) (semantic-list 79703 . 79706) (symbol 79693 . 79702) (punctuation 79691 . 79692) (punctuation 79690 . 79691) (semantic-list 79686 . 79689) (symbol 79680 . 79685) (RETURN 79673 . 79679) (open-paren 79669 . 79670) (close-paren 79667 . 79668) (symbol 79666 . 79667) (symbol 79654 . 79665) (open-paren 79653 . 79654) (symbol 79642 . 79652) (BOOL 79637 . 79641) (symbol 79630 . 79636) (punctuation 79627 . 79628) (close-paren 79626 . 79627) (open-paren 79238 . 79239) (symbol 79221 . 79235) (STRUCT 79214 . 79220) (punctuation 79175 . 79176) (close-paren 79174 . 79175) (open-paren 79011 . 79012) (symbol 78997 . 79010) (STRUCT 78990 . 78996) (close-paren 78967 . 78968) (punctuation 78958 . 78959) (semantic-list 78955 . 78958) (symbol 78951 . 78955) (punctuation 78950 . 78951) (punctuation 78949 . 78950) (semantic-list 78944 . 78949) (symbol 78932 . 78943) (RETURN 78925 . 78931) (punctuation 78921 . 78922) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 78873 . 78882)))) 78864 . 78921) (open-paren 78860 . 78861) (close-paren 78858 . 78859) (symbol 78857 . 78858) (INT 78853 . 78856) (punctuation 78851 . 78852) (symbol 78848 . 78851) (symbol 78836 . 78847) (open-paren 78835 . 78836) (symbol 78822 . 78834) (symbol 78810 . 78821) (symbol 78803 . 78809) (close-paren 78766 . 78767) (punctuation 78750 . 78751) (semantic-list 78747 . 78750) (symbol 78743 . 78747) (punctuation 78742 . 78743) (punctuation 78741 . 78742) (semantic-list 78736 . 78741) (symbol 78724 . 78735) (punctuation 78720 . 78721) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 78671 . 78680)))) 78662 . 78720) (open-paren 78658 . 78659) (close-paren 78656 . 78657) (symbol 78653 . 78656) (symbol 78643 . 78652) (punctuation 78641 . 78642) (symbol 78640 . 78641) (INT 78636 . 78639) (punctuation 78634 . 78635) (symbol 78631 . 78634) (symbol 78619 . 78630) (open-paren 78618 . 78619) (symbol 78601 . 78617) (VOID 78596 . 78600) (symbol 78589 . 78595) (close-paren 78587 . 78588) (punctuation 78577 . 78578) (semantic-list 78574 . 78577) (symbol 78570 . 78574) (punctuation 78569 . 78570) (punctuation 78568 . 78569) (semantic-list 78563 . 78568) (symbol 78551 . 78562) (RETURN 78544 . 78550) (punctuation 78540 . 78541) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 78491 . 78500)))) 78482 . 78540) (open-paren 78478 . 78479) (close-paren 78476 . 78477) (symbol 78475 . 78476) (INT 78471 . 78474) (punctuation 78469 . 78470) (symbol 78466 . 78469) (symbol 78454 . 78465) (open-paren 78453 . 78454) (symbol 78439 . 78452) (symbol 78429 . 78438) (symbol 78422 . 78428) (close-paren 78379 . 78380) (punctuation 78365 . 78366) (semantic-list 78362 . 78365) (symbol 78358 . 78362) (punctuation 78357 . 78358) (punctuation 78356 . 78357) (semantic-list 78351 . 78356) (symbol 78339 . 78350) (RETURN 78332 . 78338) (punctuation 78328 . 78329) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 78275 . 78284)))) 78266 . 78328) (open-paren 78262 . 78263) (close-paren 78260 . 78261) (symbol 78259 . 78260) (INT 78255 . 78258) (punctuation 78253 . 78254) (symbol 78250 . 78253) (symbol 78238 . 78249) (open-paren 78237 . 78238) (symbol 78219 . 78236) (symbol 78207 . 78218) (symbol 78200 . 78206) (close-paren 78198 . 78199) (punctuation 78182 . 78183) (semantic-list 78179 . 78182) (symbol 78175 . 78179) (punctuation 78174 . 78175) (punctuation 78173 . 78174) (semantic-list 78168 . 78173) (symbol 78156 . 78167) (punctuation 78152 . 78153) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 78103 . 78112)))) 78094 . 78152) (open-paren 78090 . 78091) (close-paren 78088 . 78089) (symbol 78085 . 78088) (punctuation 78084 . 78085) (VOID 78079 . 78083) (punctuation 78077 . 78078) (symbol 78076 . 78077) (INT 78072 . 78075) (punctuation 78070 . 78071) (symbol 78067 . 78070) (symbol 78055 . 78066) (open-paren 78054 . 78055) (symbol 78037 . 78053) (VOID 78032 . 78036) (symbol 78025 . 78031) (close-paren 78023 . 78024) (punctuation 78013 . 78014) (semantic-list 78010 . 78013) (symbol 78006 . 78010) (punctuation 78005 . 78006) (punctuation 78004 . 78005) (semantic-list 77999 . 78004) (symbol 77987 . 77998) (RETURN 77980 . 77986) (punctuation 77976 . 77977) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 77927 . 77936)))) 77918 . 77976) (open-paren 77914 . 77915) (close-paren 77912 . 77913) (symbol 77911 . 77912) (INT 77907 . 77910) (punctuation 77905 . 77906) (symbol 77902 . 77905) (symbol 77890 . 77901) (open-paren 77889 . 77890) (symbol 77875 . 77888) (punctuation 77873 . 77874) (VOID 77868 . 77872) (symbol 77861 . 77867) (close-paren 77815 . 77816) (punctuation 77813 . 77814) (semantic-list 77745 . 77813) (RETURN 77738 . 77744) (punctuation 77734 . 77735) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 77703 . 77704)))) 77694 . 77734) (open-paren 77690 . 77691) (close-paren 77688 . 77689) (symbol 77687 . 77688) (INT 77683 . 77686) (punctuation 77681 . 77682) (symbol 77680 . 77681) (punctuation 77679 . 77680) (symbol 77663 . 77678) (STRUCT 77656 . 77662) (open-paren 77655 . 77656) (symbol 77645 . 77654) (INT 77641 . 77644) (symbol 77634 . 77640) (close-paren 77584 . 77585) (RETURN 77554 . 77560) (punctuation 77550 . 77551) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SAVE_VALUEP" 77534 . 77545)))) 77525 . 77550) (open-paren 77521 . 77522) (close-paren 77519 . 77520) (symbol 77518 . 77519) (symbol 77506 . 77517) (open-paren 77505 . 77506) (symbol 77493 . 77504) (punctuation 77491 . 77492) (symbol 77475 . 77490) (STRUCT 77468 . 77474) (symbol 77461 . 77467) (close-paren 77458 . 77459) (punctuation 77434 . 77435) (punctuation 77433 . 77434) (semantic-list 77429 . 77432) (symbol 77419 . 77428) (punctuation 77417 . 77418) (punctuation 77416 . 77417) (semantic-list 77412 . 77415) (symbol 77406 . 77411) (RETURN 77399 . 77405) (open-paren 77395 . 77396) (close-paren 77393 . 77394) (symbol 77392 . 77393) (symbol 77380 . 77391) (open-paren 77379 . 77380) (symbol 77367 . 77378) (BOOL 77362 . 77366) (symbol 77355 . 77361) (punctuation 77352 . 77353) (close-paren 77351 . 77352) (punctuation 77186 . 77187) (symbol 77176 . 77185) (symbol "Lisp_Save_Type" 77151 . 77175) (ENUM "enum" 77151 . 77175) (punctuation 76709 . 76710) (semantic-list 76684 . 76709) (punctuation 76682 . 76683) (number 76679 . 76681) (punctuation 76677 . 76678) (symbol 76670 . 76676) (UNSIGNED 76661 . 76669) (open-paren 76559 . 76560) (symbol 76541 . 76556) (STRUCT 76534 . 76540) (punctuation 76531 . 76532) (close-paren 76530 . 76531) (VOID 76526 . 76530) (open-paren 76525 . 76526) (close-paren 76523 . 76524) (symbol 76512 . 76523) (punctuation 76511 . 76512) (open-paren 76510 . 76511) (VOID 76505 . 76509) (TYPEDEF 76497 . 76504) (punctuation 75617 . 75618) (close-paren 75616 . 75617) (number 75615 . 75616) (punctuation 75613 . 75614) (punctuation 75612 . 75613) (semantic-list 75509 . 75610) (open-paren 75508 . 75509) (symbol 75501 . 75507) (punctuation 75428 . 75429) (close-paren 75427 . 75428) (semantic-list 75397 . 75424) (punctuation 75395 . 75396) (symbol 75377 . 75394) (punctuation 75375 . 75376) (symbol 75358 . 75374) (punctuation 75290 . 75291) (semantic-list 75253 . 75290) (punctuation 75251 . 75252) (symbol 75234 . 75250) (punctuation 75232 . 75233) (symbol 75200 . 75225) (punctuation 75194 . 75195) (semantic-list 75162 . 75194) (punctuation 75160 . 75161) (symbol 75147 . 75159) (punctuation 75145 . 75146) (symbol 75127 . 75144) (punctuation 75121 . 75122) (semantic-list 75090 . 75121) (punctuation 75088 . 75089) (symbol 75075 . 75087) (punctuation 75073 . 75074) (symbol 75055 . 75072) (punctuation 75049 . 75050) (semantic-list 75017 . 75049) (punctuation 75015 . 75016) (symbol 75002 . 75014) (punctuation 75000 . 75001) (symbol 74982 . 74999) (punctuation 74976 . 74977) (semantic-list 74935 . 74976) (punctuation 74933 . 74934) (symbol 74921 . 74932) (punctuation 74919 . 74920) (symbol 74887 . 74912) (punctuation 74881 . 74882) (semantic-list 74844 . 74881) (punctuation 74842 . 74843) (symbol 74830 . 74841) (punctuation 74828 . 74829) (symbol 74806 . 74827) (punctuation 74800 . 74801) (semantic-list 74769 . 74800) (punctuation 74767 . 74768) (symbol 74755 . 74766) (punctuation 74753 . 74754) (symbol 74735 . 74752) (punctuation 74729 . 74730) (semantic-list 74675 . 74729) (punctuation 74673 . 74674) (symbol 74645 . 74666) (punctuation 74639 . 74640) (semantic-list 74607 . 74639) (punctuation 74605 . 74606) (symbol 74592 . 74604) (punctuation 74590 . 74591) (symbol 74572 . 74589) (punctuation 74566 . 74567) (symbol 74555 . 74566) (punctuation 74549 . 74550) (symbol 74537 . 74549) (punctuation 74531 . 74532) (symbol 74515 . 74531) (punctuation 74509 . 74510) (symbol 74497 . 74509) (punctuation 74491 . 74492) (symbol 74480 . 74491) (open-paren 74474 . 74475) (symbol 74457 . 74471) (ENUM 74452 . 74456) (punctuation 74386 . 74387) (close-paren 74385 . 74386) (number 74383 . 74384) (punctuation 74381 . 74382) (symbol 74366 . 74380) (punctuation 74364 . 74365) (symbol 74347 . 74363) (punctuation 74345 . 74346) (symbol 74330 . 74344) (open-paren 74328 . 74329) (ENUM 74323 . 74327) (punctuation 74244 . 74245) (close-paren 74243 . 74244) (number 74241 . 74242) (punctuation 74239 . 74240) (symbol 74222 . 74238) (open-paren 74220 . 74221) (ENUM 74215 . 74219) (punctuation 74145 . 74146) (close-paren 74144 . 74145) (number 74142 . 74143) (punctuation 74140 . 74141) (symbol 74125 . 74139) (open-paren 74123 . 74124) (ENUM 74118 . 74122) (punctuation 74030 . 74031) (close-paren 74029 . 74030) (open-paren 73808 . 73809) (symbol 73309 . 73321) (STRUCT 73302 . 73308) (punctuation 73196 . 73197) (close-paren 73195 . 73196) (open-paren 71460 . 71461) (symbol 71448 . 71459) (STRUCT 71441 . 71447) (close-paren 71438 . 71439) (punctuation 71431 . 71432) (punctuation 71430 . 71431) (semantic-list 71427 . 71430) (symbol 71418 . 71426) (RETURN 71411 . 71417) (open-paren 71407 . 71408) (close-paren 71405 . 71406) (symbol 71404 . 71405) (symbol 71392 . 71403) (open-paren 71391 . 71392) (symbol 71381 . 71390) (symbol 71366 . 71380) (ENUM 71361 . 71365) (symbol 71354 . 71360) (close-paren 71351 . 71352) (RETURN 71321 . 71327) (punctuation 71317 . 71318) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MISCP" 71307 . 71312)))) 71298 . 71317) (open-paren 71294 . 71295) (close-paren 71292 . 71293) (symbol 71291 . 71292) (symbol 71279 . 71290) (open-paren 71278 . 71279) (symbol 71269 . 71277) (punctuation 71267 . 71268) (symbol 71253 . 71266) (STRUCT 71246 . 71252) (symbol 71239 . 71245) (close-paren 71236 . 71237) (punctuation 71234 . 71235) (semantic-list #("(XTYPE (x) == Lisp_Misc)" 0 1 (macros (("x" symbol "x" 71232 . 71233)))) 71218 . 71234) (RETURN 71211 . 71217) (open-paren 71207 . 71208) (close-paren 71205 . 71206) (symbol 71204 . 71205) (symbol 71192 . 71203) (open-paren 71191 . 71192) (close-paren 71189 . 71190) (symbol 71184 . 71189) (open-paren 71183 . 71184) (BOOL 71178 . 71182) (symbol 71171 . 71177) (punctuation 71168 . 71169) (close-paren 71167 . 71168) (open-paren 71055 . 71056) (symbol 71004 . 71017) (STRUCT 70997 . 71003) (close-paren 70936 . 70937) (punctuation 70934 . 70935) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 70927 . 70934) (punctuation 70925 . 70926) (semantic-list 70882 . 70924) (RETURN 70875 . 70881) (open-paren 70871 . 70872) (close-paren 70869 . 70870) (symbol 70868 . 70869) (symbol 70857 . 70867) (open-paren 70856 . 70857) (symbol 70842 . 70855) (symbol 70831 . 70841) (symbol 70824 . 70830) (close-paren 70762 . 70763) (punctuation 70757 . 70758) (semantic-list 70728 . 70756) (punctuation 70726 . 70727) (semantic-list 70717 . 70725) (RETURN 70710 . 70716) (open-paren 70706 . 70707) (close-paren 70704 . 70705) (symbol 70703 . 70704) (symbol 70692 . 70702) (punctuation 70690 . 70691) (symbol 70689 . 70690) (symbol 70678 . 70688) (open-paren 70677 . 70678) (symbol 70662 . 70676) (symbol 70651 . 70661) (symbol 70644 . 70650) (punctuation 70188 . 70189) (close-paren 70187 . 70188) (number 70184 . 70186) (punctuation 70182 . 70183) (symbol 70164 . 70181) (open-paren 70162 . 70163) (symbol 70144 . 70161) (ENUM 70139 . 70143) (close-paren 70081 . 70082) (punctuation 70073 . 70074) (punctuation 70072 . 70073) (RETURN 70057 . 70063) (open-paren 70053 . 70054) (close-paren 70051 . 70052) (symbol 70050 . 70051) (punctuation 70049 . 70050) (symbol 70033 . 70048) (STRUCT 70026 . 70032) (open-paren 70025 . 70026) (symbol 70009 . 70024) (symbol 69999 . 70008) (symbol 69992 . 69998) (close-paren 69947 . 69948) (punctuation 69934 . 69935) (punctuation 69933 . 69934) (RETURN 69919 . 69925) (open-paren 69915 . 69916) (close-paren 69913 . 69914) (symbol 69910 . 69913) (symbol 69900 . 69909) (punctuation 69898 . 69899) (symbol 69897 . 69898) (punctuation 69896 . 69897) (symbol 69880 . 69895) (STRUCT 69873 . 69879) (open-paren 69872 . 69873) (symbol 69862 . 69871) (symbol 69850 . 69861) (symbol 69843 . 69849) (close-paren 69770 . 69771) (number 69766 . 69767) (punctuation 69764 . 69765) (punctuation 69758 . 69759) (number 69756 . 69757) (punctuation 69740 . 69741) (punctuation 69739 . 69740) (RETURN 69725 . 69731) (open-paren 69721 . 69722) (close-paren 69719 . 69720) (symbol 69716 . 69719) (symbol 69706 . 69715) (punctuation 69704 . 69705) (symbol 69703 . 69704) (punctuation 69702 . 69703) (symbol 69686 . 69701) (STRUCT 69679 . 69685) (open-paren 69678 . 69679) (symbol 69667 . 69677) (symbol 69655 . 69666) (symbol 69648 . 69654) (close-paren 69584 . 69585) (punctuation 69576 . 69577) (number 69574 . 69575) (punctuation 69558 . 69559) (punctuation 69557 . 69558) (RETURN 69543 . 69549) (open-paren 69539 . 69540) (close-paren 69537 . 69538) (symbol 69534 . 69537) (symbol 69524 . 69533) (punctuation 69522 . 69523) (symbol 69521 . 69522) (punctuation 69520 . 69521) (symbol 69504 . 69519) (STRUCT 69497 . 69503) (open-paren 69496 . 69497) (symbol 69487 . 69495) (symbol 69475 . 69486) (symbol 69468 . 69474) (close-paren 69317 . 69318) (RETURN 69281 . 69287) (punctuation 69277 . 69278) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 69260 . 69272)))) 69251 . 69277) (open-paren 69247 . 69248) (close-paren 69245 . 69246) (symbol 69244 . 69245) (symbol 69232 . 69243) (open-paren 69231 . 69232) (symbol 69219 . 69230) (punctuation 69217 . 69218) (symbol 69201 . 69216) (STRUCT 69194 . 69200) (symbol 69187 . 69193) (close-paren 69184 . 69185) (RETURN 69141 . 69147) (open-paren 69137 . 69138) (close-paren 69135 . 69136) (symbol 69134 . 69135) (symbol 69122 . 69133) (open-paren 69121 . 69122) (symbol 69108 . 69120) (BOOL 69103 . 69107) (symbol 69096 . 69102) (punctuation 69092 . 69093) (close-paren 69091 . 69092) (open-paren 66855 . 66856) (symbol 66839 . 66854) (STRUCT 66832 . 66838) (punctuation 66829 . 66830) (close-paren 66828 . 66829) (open-paren 66362 . 66363) (symbol 66346 . 66361) (STRUCT 66339 . 66345) (close-paren 65973 . 65974) (punctuation 65971 . 65972) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 0 1 (macros (("sym" symbol "sym" 65967 . 65970)))) 65941 . 65971) (RETURN 65934 . 65940) (open-paren 65930 . 65931) (close-paren 65928 . 65929) (symbol 65925 . 65928) (symbol 65913 . 65924) (open-paren 65912 . 65913) (close-paren 65910 . 65911) (symbol 65893 . 65910) (open-paren 65892 . 65893) (INT 65888 . 65891) (symbol 65881 . 65887) (close-paren 65657 . 65658) (punctuation 65655 . 65656) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write)" 0 1 (macros (("sym" symbol "sym" 65651 . 65654)))) 65620 . 65655) (RETURN 65613 . 65619) (open-paren 65609 . 65610) (close-paren 65607 . 65608) (symbol 65604 . 65607) (symbol 65592 . 65603) (open-paren 65591 . 65592) (close-paren 65589 . 65590) (symbol 65567 . 65589) (open-paren 65566 . 65567) (INT 65562 . 65565) (symbol 65555 . 65561) (close-paren 65388 . 65389) (punctuation 65350 . 65351) (punctuation 65349 . 65350) (symbol 65340 . 65348) (punctuation 65339 . 65340) (symbol 65338 . 65339) (punctuation 65337 . 65338) (symbol 65336 . 65337) (punctuation 65335 . 65336) (punctuation 65334 . 65335) (semantic-list 65329 . 65334) (symbol 65321 . 65328) (RETURN 65314 . 65320) (open-paren 65310 . 65311) (close-paren 65308 . 65309) (symbol 65305 . 65308) (symbol 65293 . 65304) (open-paren 65292 . 65293) (symbol 65255 . 65291) (BOOL 65250 . 65254) (symbol 65243 . 65249) (close-paren 65179 . 65180) (punctuation 65158 . 65159) (punctuation 65157 . 65158) (symbol 65148 . 65156) (punctuation 65147 . 65148) (symbol 65146 . 65147) (punctuation 65145 . 65146) (symbol 65144 . 65145) (punctuation 65143 . 65144) (punctuation 65142 . 65143) (semantic-list 65137 . 65142) (symbol 65129 . 65136) (RETURN 65122 . 65128) (open-paren 65118 . 65119) (close-paren 65116 . 65117) (symbol 65113 . 65116) (symbol 65101 . 65112) (open-paren 65100 . 65101) (symbol 65082 . 65099) (BOOL 65077 . 65081) (symbol 65070 . 65076) (close-paren 65015 . 65016) (punctuation 65008 . 65009) (symbol 65007 . 65008) (punctuation 65006 . 65007) (symbol 65005 . 65006) (punctuation 65004 . 65005) (punctuation 65003 . 65004) (semantic-list 64998 . 65003) (symbol 64990 . 64997) (RETURN 64983 . 64989) (open-paren 64979 . 64980) (close-paren 64977 . 64978) (symbol 64974 . 64977) (symbol 64962 . 64973) (open-paren 64961 . 64962) (symbol 64949 . 64960) (symbol 64937 . 64948) (symbol 64930 . 64936) (close-paren 64927 . 64928) (punctuation 64917 . 64918) (symbol 64914 . 64917) (punctuation 64913 . 64914) (symbol 64912 . 64913) (punctuation 64911 . 64912) (symbol 64910 . 64911) (punctuation 64909 . 64910) (punctuation 64908 . 64909) (symbol 64905 . 64908) (open-paren 64845 . 64846) (close-paren 64843 . 64844) (symbol 64842 . 64843) (punctuation 64841 . 64842) (symbol 64832 . 64840) (UNION 64826 . 64831) (punctuation 64824 . 64825) (symbol 64821 . 64824) (punctuation 64820 . 64821) (symbol 64808 . 64819) (STRUCT 64801 . 64807) (open-paren 64800 . 64801) (symbol 64785 . 64799) (VOID 64780 . 64784) (symbol 64773 . 64779) (close-paren 64771 . 64772) (punctuation 64761 . 64762) (symbol 64758 . 64761) (punctuation 64757 . 64758) (symbol 64756 . 64757) (punctuation 64755 . 64756) (symbol 64754 . 64755) (punctuation 64753 . 64754) (punctuation 64752 . 64753) (symbol 64749 . 64752) (open-paren 64689 . 64690) (close-paren 64687 . 64688) (symbol 64686 . 64687) (punctuation 64685 . 64686) (symbol 64661 . 64684) (STRUCT 64654 . 64660) (punctuation 64652 . 64653) (symbol 64649 . 64652) (punctuation 64648 . 64649) (symbol 64636 . 64647) (STRUCT 64629 . 64635) (open-paren 64628 . 64629) (symbol 64613 . 64627) (VOID 64608 . 64612) (symbol 64601 . 64607) (close-paren 64599 . 64600) (punctuation 64587 . 64588) (symbol 64584 . 64587) (punctuation 64583 . 64584) (symbol 64582 . 64583) (punctuation 64581 . 64582) (symbol 64580 . 64581) (punctuation 64579 . 64580) (punctuation 64578 . 64579) (symbol 64575 . 64578) (open-paren 64516 . 64517) (close-paren 64514 . 64515) (symbol 64513 . 64514) (punctuation 64512 . 64513) (symbol 64500 . 64511) (STRUCT 64493 . 64499) (punctuation 64491 . 64492) (symbol 64488 . 64491) (punctuation 64487 . 64488) (symbol 64475 . 64486) (STRUCT 64468 . 64474) (open-paren 64467 . 64468) (symbol 64450 . 64466) (VOID 64445 . 64449) (symbol 64438 . 64444) (close-paren 64435 . 64436) (punctuation 64433 . 64434) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 0 1 (macros (("v" symbol "v" 64431 . 64432) ("sym" symbol "sym" 64426 . 64429)))) 64403 . 64433) (open-paren 64399 . 64400) (close-paren 64397 . 64398) (symbol 64396 . 64397) (symbol 64384 . 64395) (punctuation 64382 . 64383) (symbol 64379 . 64382) (punctuation 64378 . 64379) (symbol 64366 . 64377) (STRUCT 64359 . 64365) (open-paren 64358 . 64359) (close-paren 64356 . 64357) (symbol 64342 . 64356) (open-paren 64341 . 64342) (VOID 64336 . 64340) (symbol 64329 . 64335) (close-paren 64326 . 64327) (punctuation 64320 . 64321) (symbol 64317 . 64320) (punctuation 64316 . 64317) (symbol 64315 . 64316) (punctuation 64314 . 64315) (symbol 64313 . 64314) (punctuation 64312 . 64313) (punctuation 64311 . 64312) (symbol 64308 . 64311) (RETURN 64301 . 64307) (open-paren 64226 . 64227) (close-paren 64224 . 64225) (symbol 64221 . 64224) (punctuation 64220 . 64221) (symbol 64208 . 64219) (STRUCT 64201 . 64207) (open-paren 64200 . 64201) (symbol 64189 . 64199) (punctuation 64187 . 64188) (symbol 64178 . 64186) (UNION 64172 . 64177) (symbol 64165 . 64171) (close-paren 64163 . 64164) (punctuation 64157 . 64158) (symbol 64154 . 64157) (punctuation 64153 . 64154) (symbol 64152 . 64153) (punctuation 64151 . 64152) (symbol 64150 . 64151) (punctuation 64149 . 64150) (punctuation 64148 . 64149) (symbol 64145 . 64148) (RETURN 64138 . 64144) (open-paren 64063 . 64064) (close-paren 64061 . 64062) (symbol 64058 . 64061) (punctuation 64057 . 64058) (symbol 64045 . 64056) (STRUCT 64038 . 64044) (open-paren 64037 . 64038) (symbol 64026 . 64036) (punctuation 64024 . 64025) (symbol 64000 . 64023) (STRUCT 63993 . 63999) (symbol 63986 . 63992) (close-paren 63984 . 63985) (punctuation 63976 . 63977) (symbol 63973 . 63976) (punctuation 63972 . 63973) (symbol 63971 . 63972) (punctuation 63970 . 63971) (symbol 63969 . 63970) (punctuation 63968 . 63969) (punctuation 63967 . 63968) (symbol 63964 . 63967) (RETURN 63957 . 63963) (open-paren 63881 . 63882) (close-paren 63879 . 63880) (symbol 63876 . 63879) (punctuation 63875 . 63876) (symbol 63863 . 63874) (STRUCT 63856 . 63862) (open-paren 63855 . 63856) (symbol 63842 . 63854) (punctuation 63840 . 63841) (symbol 63828 . 63839) (STRUCT 63821 . 63827) (symbol 63814 . 63820) (close-paren 63811 . 63812) (punctuation 63809 . 63810) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 0 1 (macros (("sym" symbol "sym" 63805 . 63808)))) 63786 . 63809) (RETURN 63779 . 63785) (open-paren 63775 . 63776) (close-paren 63773 . 63774) (symbol 63770 . 63773) (punctuation 63769 . 63770) (symbol 63757 . 63768) (STRUCT 63750 . 63756) (open-paren 63749 . 63750) (close-paren 63747 . 63748) (symbol 63737 . 63747) (open-paren 63736 . 63737) (symbol 63724 . 63735) (symbol 63717 . 63723) (punctuation 62888 . 62889) (close-paren 62887 . 62888) (semantic-list 62794 . 62887) (punctuation 62792 . 62793) (punctuation 62791 . 62792) (semantic-list 62751 . 62789) (symbol 62742 . 62750) (open-paren 62741 . 62742) (symbol 62734 . 62740) (close-paren 62655 . 62656) (punctuation 62653 . 62654) (semantic-list 62578 . 62653) (RETURN 62571 . 62577) (open-paren 62567 . 62568) (close-paren 62565 . 62566) (symbol 62563 . 62565) (punctuation 62562 . 62563) (symbol 62546 . 62561) (STRUCT 62539 . 62545) (open-paren 62538 . 62539) (symbol 62515 . 62537) (INT 62511 . 62514) (symbol 62504 . 62510) (punctuation 62436 . 62437) (close-paren 62435 . 62436) (semantic-list #("((offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 62402 . 62421) ("type" STRUCT "struct" 62395 . 62401)))) 62380 . 62432) (punctuation 62378 . 62379) (symbol 62356 . 62377) (punctuation 62209 . 62210) (semantic-list #("((offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 62185 . 62200) ("type" STRUCT "struct" 62178 . 62184)))) 62163 . 62209) (punctuation 62161 . 62162) (symbol 62135 . 62160) (open-paren 61963 . 61964) (symbol 61941 . 61960) (ENUM 61936 . 61940) (close-paren 61933 . 61934) (RETURN 61897 . 61903) (punctuation 61893 . 61894) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 61883 . 61888)))) 61874 . 61893) (open-paren 61870 . 61871) (close-paren 61868 . 61869) (symbol 61867 . 61868) (symbol 61855 . 61866) (open-paren 61854 . 61855) (symbol 61848 . 61853) (punctuation 61846 . 61847) (symbol 61836 . 61845) (STRUCT 61829 . 61835) (symbol 61822 . 61828) (close-paren 61819 . 61820) (RETURN 61782 . 61788) (open-paren 61778 . 61779) (close-paren 61776 . 61777) (symbol 61775 . 61776) (symbol 61763 . 61774) (open-paren 61762 . 61763) (symbol 61756 . 61761) (BOOL 61751 . 61755) (symbol 61744 . 61750) (punctuation 61741 . 61742) (close-paren 61740 . 61741) (open-paren 60754 . 60755) (symbol 60742 . 60751) (STRUCT 60735 . 60741) (close-paren 60594 . 60595) (ELSE 60554 . 60558) (punctuation 60533 . 60534) (punctuation 60532 . 60533) (semantic-list 60528 . 60532) (semantic-list 60416 . 60482) (IF 60413 . 60415) (open-paren 60409 . 60410) (close-paren 60407 . 60408) (symbol 60404 . 60407) (symbol 60392 . 60403) (punctuation 60390 . 60391) (symbol 60387 . 60390) (INT 60383 . 60386) (punctuation 60381 . 60382) (symbol 60379 . 60381) (symbol 60367 . 60378) (open-paren 60366 . 60367) (symbol 60351 . 60365) (VOID 60346 . 60350) (symbol 60339 . 60345) (close-paren 60202 . 60203) (punctuation 60200 . 60201) (semantic-list 60114 . 60200) (RETURN 60107 . 60113) (open-paren 60103 . 60104) (close-paren 60101 . 60102) (symbol 60098 . 60101) (INT 60094 . 60097) (punctuation 60092 . 60093) (symbol 60090 . 60092) (symbol 60078 . 60089) (open-paren 60077 . 60078) (symbol 60062 . 60076) (symbol 60050 . 60061) (symbol 60043 . 60049) (close-paren 59923 . 59924) (RETURN 59911 . 59917) (punctuation 59906 . 59907) (semantic-list 59870 . 59906) (WHILE 59864 . 59869) (semantic-list 59636 . 59861) (DO 59629 . 59631) (open-paren 59568 . 59569) (close-paren 59566 . 59567) (symbol 59563 . 59566) (symbol 59553 . 59562) (punctuation 59551 . 59552) (symbol 59549 . 59551) (symbol 59537 . 59548) (open-paren 59536 . 59537) (symbol 59515 . 59535) (symbol 59503 . 59514) (symbol 59496 . 59502) (close-paren 59493 . 59494) (RETURN 59457 . 59463) (punctuation 59453 . 59454) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 59432 . 59448)))) 59423 . 59453) (open-paren 59419 . 59420) (close-paren 59417 . 59418) (symbol 59416 . 59417) (symbol 59404 . 59415) (open-paren 59403 . 59404) (symbol 59387 . 59402) (punctuation 59385 . 59386) (symbol 59365 . 59384) (STRUCT 59358 . 59364) (symbol 59351 . 59357) (close-paren 59348 . 59349) (RETURN 59301 . 59307) (open-paren 59297 . 59298) (close-paren 59295 . 59296) (symbol 59294 . 59295) (symbol 59282 . 59293) (open-paren 59281 . 59282) (symbol 59264 . 59280) (BOOL 59259 . 59263) (symbol 59252 . 59258) (punctuation 59249 . 59250) (close-paren 59248 . 59249) (open-paren 58487 . 58488) (symbol 58465 . 58484) (STRUCT 58458 . 58464) (close-paren 58455 . 58456) (RETURN 58419 . 58425) (punctuation 58415 . 58416) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 58398 . 58410)))) 58389 . 58415) (open-paren 58385 . 58386) (close-paren 58383 . 58384) (symbol 58382 . 58383) (symbol 58370 . 58381) (open-paren 58369 . 58370) (symbol 58357 . 58368) (punctuation 58355 . 58356) (symbol 58339 . 58354) (STRUCT 58332 . 58338) (symbol 58325 . 58331) (close-paren 58322 . 58323) (RETURN 58279 . 58285) (open-paren 58275 . 58276) (close-paren 58273 . 58274) (symbol 58272 . 58273) (symbol 58260 . 58271) (open-paren 58259 . 58260) (symbol 58246 . 58258) (BOOL 58241 . 58245) (symbol 58234 . 58240) (punctuation 58231 . 58232) (close-paren 58230 . 58231) (open-paren 57180 . 57181) (symbol 57162 . 57177) (STRUCT 57155 . 57161) (punctuation 57152 . 57153) (close-paren 57151 . 57152) (number 57150 . 57151) (open-paren 57149 . 57150) (symbol 57137 . 57149) (INT 57133 . 57136) (CONST 57127 . 57132) (EXTERN 57120 . 57126) (punctuation 57117 . 57118) (close-paren 57116 . 57117) (number 57112 . 57113) (punctuation 57110 . 57111) (symbol 57090 . 57109) (punctuation 57084 . 57085) (number 57083 . 57084) (punctuation 57081 . 57082) (symbol 57061 . 57080) (punctuation 57055 . 57056) (number 57054 . 57055) (punctuation 57052 . 57053) (symbol 57032 . 57051) (punctuation 57026 . 57027) (number 57025 . 57026) (punctuation 57023 . 57024) (symbol 57003 . 57022) (open-paren 56997 . 56998) (symbol 56977 . 56994) (ENUM 56972 . 56976) (close-paren 55106 . 55107) (number 55094 . 55095) (punctuation 55009 . 55010) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54997 . 54998)))) 54988 . 55009) (open-paren 54984 . 54985) (close-paren 54982 . 54983) (symbol 54976 . 54982) (symbol 54966 . 54975) (punctuation 54964 . 54965) (symbol 54963 . 54964) (punctuation 54962 . 54963) (VOID 54957 . 54961) (open-paren 54956 . 54957) (symbol 54947 . 54955) (VOID 54942 . 54946) (symbol 54935 . 54941) (punctuation 54807 . 54808) (close-paren 54806 . 54807) (number 54804 . 54805) (punctuation 54802 . 54803) (punctuation 54801 . 54802) (symbol 54789 . 54800) (punctuation 54787 . 54788) (punctuation 54786 . 54787) (number 54784 . 54785) (punctuation 54782 . 54783) (punctuation 54781 . 54782) (symbol 54775 . 54780) (punctuation 54773 . 54774) (symbol 54761 . 54772) (open-paren 54759 . 54760) (ENUM 54754 . 54758) (close-paren 54400 . 54401) (punctuation 54378 . 54379) (punctuation 54377 . 54378) (semantic-list 54370 . 54377) (symbol 54362 . 54369) (punctuation 54358 . 54359) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54323 . 54324)))) 54314 . 54358) (open-paren 54170 . 54171) (close-paren 54168 . 54169) (symbol 54165 . 54168) (symbol 54153 . 54164) (punctuation 54151 . 54152) (symbol 54148 . 54151) (symbol 54138 . 54147) (punctuation 54136 . 54137) (symbol 54131 . 54136) (symbol 54119 . 54130) (open-paren 54118 . 54119) (symbol 54110 . 54117) (VOID 54105 . 54109) (symbol 54098 . 54104) (close-paren 54095 . 54096) (punctuation 54073 . 54074) (punctuation 54072 . 54073) (semantic-list 54065 . 54072) (symbol 54057 . 54064) (punctuation 54053 . 54054) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 54021 . 54022)))) 54012 . 54053) (open-paren 54008 . 54009) (close-paren 54006 . 54007) (symbol 54003 . 54006) (symbol 53991 . 54002) (punctuation 53989 . 53990) (symbol 53986 . 53989) (symbol 53976 . 53985) (punctuation 53974 . 53975) (symbol 53969 . 53974) (symbol 53957 . 53968) (open-paren 53956 . 53957) (symbol 53951 . 53955) (VOID 53946 . 53950) (symbol 53939 . 53945) (close-paren 53936 . 53937) (punctuation 53918 . 53919) (punctuation 53916 . 53917) (symbol 53911 . 53915) (punctuation 53910 . 53911) (symbol 53904 . 53910) (punctuation 53903 . 53904) (punctuation 53902 . 53903) (semantic-list 53895 . 53902) (symbol 53887 . 53894) (RETURN 53880 . 53886) (open-paren 53808 . 53809) (close-paren 53806 . 53807) (symbol 53801 . 53806) (symbol 53789 . 53800) (open-paren 53788 . 53789) (symbol 53779 . 53787) (symbol 53769 . 53778) (symbol 53762 . 53768) (close-paren 53759 . 53760) (punctuation 53743 . 53744) (punctuation 53742 . 53743) (semantic-list 53735 . 53742) (symbol 53727 . 53734) (punctuation 53725 . 53726) (RETURN 53718 . 53724) (open-paren 53714 . 53715) (close-paren 53712 . 53713) (symbol 53709 . 53712) (symbol 53699 . 53708) (punctuation 53697 . 53698) (symbol 53692 . 53697) (symbol 53680 . 53691) (open-paren 53679 . 53680) (symbol 53669 . 53678) (punctuation 53667 . 53668) (symbol 53655 . 53666) (symbol 53648 . 53654) (close-paren 53645 . 53646) (punctuation 53629 . 53630) (punctuation 53628 . 53629) (semantic-list 53621 . 53628) (symbol 53613 . 53620) (RETURN 53606 . 53612) (open-paren 53602 . 53603) (close-paren 53600 . 53601) (symbol 53597 . 53600) (symbol 53587 . 53596) (punctuation 53585 . 53586) (symbol 53580 . 53585) (symbol 53568 . 53579) (open-paren 53567 . 53568) (symbol 53562 . 53566) (symbol 53550 . 53561) (symbol 53543 . 53549) (close-paren 53489 . 53490) (punctuation 53487 . 53488) (semantic-list 53449 . 53487) (punctuation 53447 . 53448) (punctuation 53445 . 53446) (punctuation 53444 . 53445) (symbol 53439 . 53443) (punctuation 53438 . 53439) (ELSE 53429 . 53433) (punctuation 53425 . 53426) (semantic-list 53394 . 53425) (punctuation 53392 . 53393) (punctuation 53391 . 53392) (number 53389 . 53390) (punctuation 53387 . 53388) (punctuation 53386 . 53387) (symbol 53381 . 53385) (punctuation 53380 . 53381) (semantic-list 53372 . 53375) (IF 53369 . 53371) (punctuation 53364 . 53365) (punctuation 53306 . 53307) (punctuation 53304 . 53305) (symbol 53299 . 53303) (open-paren 53223 . 53224) (close-paren 53221 . 53222) (symbol 53220 . 53221) (BOOL 53215 . 53219) (punctuation 53213 . 53214) (symbol 53212 . 53213) (symbol 53202 . 53211) (punctuation 53200 . 53201) (symbol 53199 . 53200) (symbol 53187 . 53198) (open-paren 53186 . 53187) (symbol 53170 . 53185) (VOID 53165 . 53169) (symbol 53158 . 53164) (close-paren 53125 . 53126) (punctuation 53117 . 53118) (symbol 53114 . 53116) (punctuation 53112 . 53113) (semantic-list 53105 . 53111) (symbol 53086 . 53104) (RETURN 53079 . 53085) (open-paren 53075 . 53076) (close-paren 53073 . 53074) (symbol 53072 . 53073) (symbol 53062 . 53071) (punctuation 53060 . 53061) (symbol 53059 . 53060) (symbol 53047 . 53058) (open-paren 53046 . 53047) (symbol 53030 . 53045) (symbol 53018 . 53029) (symbol 53011 . 53017) (close-paren 53008 . 53009) (punctuation 53006 . 53007) (semantic-list 52900 . 53006) (punctuation 52898 . 52899) (punctuation 52897 . 52898) (RETURN 52890 . 52896) (open-paren 52838 . 52839) (close-paren 52836 . 52837) (symbol 52835 . 52836) (symbol 52825 . 52834) (punctuation 52823 . 52824) (symbol 52822 . 52823) (symbol 52810 . 52821) (open-paren 52809 . 52810) (symbol 52790 . 52808) (BOOL 52785 . 52789) (symbol 52778 . 52784) (close-paren 52739 . 52740) (semantic-list 52699 . 52716) (RETURN 52692 . 52698) (open-paren 52688 . 52689) (close-paren 52686 . 52687) (symbol 52685 . 52686) (symbol 52673 . 52684) (open-paren 52672 . 52673) (symbol 52649 . 52671) (punctuation 52647 . 52648) (CHAR 52642 . 52646) (UNSIGNED 52633 . 52641) (symbol 52626 . 52632) (close-paren 52623 . 52624) (punctuation 52616 . 52617) (punctuation 52615 . 52616) (semantic-list 52612 . 52615) (symbol 52599 . 52611) (RETURN 52592 . 52598) (open-paren 52588 . 52589) (close-paren 52586 . 52587) (symbol 52585 . 52586) (symbol 52573 . 52584) (open-paren 52572 . 52573) (symbol 52555 . 52571) (punctuation 52553 . 52554) (symbol 52543 . 52552) (symbol 52536 . 52542) (close-paren 52533 . 52534) (RETURN 52520 . 52526) (open-paren 52450 . 52451) (close-paren 52448 . 52449) (symbol 52447 . 52448) (symbol 52435 . 52446) (open-paren 52434 . 52435) (symbol 52417 . 52433) (symbol 52407 . 52416) (symbol 52400 . 52406) (close-paren 52397 . 52398) (RETURN 52361 . 52367) (punctuation 52357 . 52358) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 52339 . 52352)))) 52330 . 52357) (open-paren 52326 . 52327) (close-paren 52324 . 52325) (symbol 52323 . 52324) (symbol 52311 . 52322) (open-paren 52310 . 52311) (symbol 52297 . 52309) (punctuation 52295 . 52296) (symbol 52278 . 52294) (STRUCT 52271 . 52277) (symbol 52264 . 52270) (close-paren 52261 . 52262) (semantic-list 52236 . 52239) (open-paren 52206 . 52207) (close-paren 52204 . 52205) (symbol 52203 . 52204) (symbol 52191 . 52202) (open-paren 52190 . 52191) (symbol 52172 . 52189) (VOID 52167 . 52171) (symbol 52160 . 52166) (close-paren 52157 . 52158) (RETURN 52113 . 52119) (open-paren 52109 . 52110) (close-paren 52107 . 52108) (symbol 52106 . 52107) (symbol 52094 . 52105) (open-paren 52093 . 52094) (symbol 52079 . 52092) (BOOL 52074 . 52078) (symbol 52067 . 52073) (close-paren 52064 . 52065) (punctuation 52035 . 52036) (semantic-list 51996 . 52034) (RETURN 51989 . 51995) (open-paren 51910 . 51911) (close-paren 51908 . 51909) (symbol 51904 . 51908) (symbol 51894 . 51903) (open-paren 51893 . 51894) (symbol 51875 . 51892) (symbol 51865 . 51874) (symbol 51858 . 51864) (close-paren 51855 . 51856) (punctuation 51833 . 51834) (semantic-list 51801 . 51832) (RETURN 51794 . 51800) (open-paren 51715 . 51716) (close-paren 51713 . 51714) (symbol 51709 . 51713) (symbol 51699 . 51708) (open-paren 51698 . 51699) (symbol 51680 . 51697) (symbol 51670 . 51679) (symbol 51663 . 51669) (punctuation 51584 . 51585) (close-paren 51583 . 51584) (semantic-list 51567 . 51580) (SIZEOF 51560 . 51566) (punctuation 51558 . 51559) (symbol 51548 . 51557) (punctuation 51542 . 51543) (semantic-list 51511 . 51542) (symbol 51502 . 51510) (punctuation 51500 . 51501) (symbol 51483 . 51499) (punctuation 51477 . 51478) (semantic-list 51447 . 51477) (symbol 51438 . 51446) (punctuation 51436 . 51437) (symbol 51424 . 51435) (open-paren 51418 . 51419) (ENUM 51411 . 51415) (punctuation 51310 . 51311) (close-paren 51309 . 51310) (open-paren 50836 . 50837) (symbol 50817 . 50833) (STRUCT 50810 . 50816) (close-paren 50732 . 50733) (semantic-list 50540 . 50731) (ELSE 50531 . 50535) (RETURN 50515 . 50521) (semantic-list 50491 . 50510) (IF 50488 . 50490) (open-paren 50484 . 50485) (close-paren 50482 . 50483) (symbol 50478 . 50482) (INT 50474 . 50477) (punctuation 50472 . 50473) (symbol 50471 . 50472) (symbol 50459 . 50470) (open-paren 50458 . 50459) (symbol 50444 . 50457) (BOOL 50439 . 50443) (symbol 50432 . 50438) (close-paren 50374 . 50375) (punctuation 50372 . 50373) (semantic-list 50261 . 50372) (RETURN 50254 . 50260) (open-paren 50145 . 50146) (close-paren 50143 . 50144) (symbol 50139 . 50143) (symbol 50129 . 50138) (ENUM 50124 . 50128) (punctuation 50122 . 50123) (symbol 50121 . 50122) (punctuation 50120 . 50121) (symbol 50102 . 50119) (UNION 50096 . 50101) (open-paren 50095 . 50096) (symbol 50076 . 50094) (BOOL 50071 . 50075) (symbol 50064 . 50070) (close-paren 50015 . 50016) (punctuation 50013 . 50014) (semantic-list 49894 . 50013) (RETURN 49887 . 49893) (open-paren 49848 . 49849) (close-paren 49846 . 49847) (symbol 49845 . 49846) (punctuation 49844 . 49845) (symbol 49832 . 49843) (STRUCT 49825 . 49831) (open-paren 49824 . 49825) (symbol 49806 . 49823) (symbol 49796 . 49805) (ENUM 49791 . 49795) (symbol 49784 . 49790) (close-paren 49704 . 49705) (semantic-list 49685 . 49688) (open-paren 49661 . 49662) (close-paren 49659 . 49660) (symbol 49658 . 49659) (symbol 49646 . 49657) (open-paren 49645 . 49646) (symbol 49632 . 49644) (VOID 49627 . 49631) (symbol 49620 . 49626) (close-paren 49617 . 49618) (punctuation 49615 . 49616) (semantic-list 49584 . 49615) (punctuation 49582 . 49583) (punctuation 49580 . 49581) (punctuation 49579 . 49580) (semantic-list 49575 . 49578) (symbol 49563 . 49574) (RETURN 49556 . 49562) (open-paren 49552 . 49553) (close-paren 49550 . 49551) (symbol 49549 . 49550) (symbol 49537 . 49548) (open-paren 49536 . 49537) (symbol 49528 . 49535) (BOOL 49523 . 49527) (symbol 49516 . 49522) (close-paren 49513 . 49514) (semantic-list 49482 . 49486) (symbol 49476 . 49481) (RETURN 49469 . 49475) (open-paren 49465 . 49466) (close-paren 49463 . 49464) (symbol 49461 . 49463) (symbol 49449 . 49460) (open-paren 49448 . 49449) (symbol 49441 . 49447) (symbol 49431 . 49440) (symbol 49424 . 49430) (close-paren 49421 . 49422) (RETURN 49408 . 49414) (open-paren 49332 . 49333) (close-paren 49330 . 49331) (symbol 49325 . 49330) (symbol 49313 . 49324) (open-paren 49312 . 49313) (symbol 49306 . 49311) (symbol 49296 . 49305) (symbol 49289 . 49295) (close-paren 49286 . 49287) (RETURN 49250 . 49256) (punctuation 49246 . 49247) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 49230 . 49241)))) 49221 . 49246) (open-paren 49217 . 49218) (close-paren 49215 . 49216) (symbol 49214 . 49215) (symbol 49202 . 49213) (open-paren 49201 . 49202) (symbol 49193 . 49200) (punctuation 49191 . 49192) (symbol 49179 . 49190) (STRUCT 49172 . 49178) (symbol 49165 . 49171) (close-paren 49162 . 49163) (punctuation 49160 . 49161) (semantic-list #("(XTYPE (x) == Lisp_Vectorlike)" 0 1 (macros (("x" symbol "x" 49158 . 49159)))) 49138 . 49160) (RETURN 49131 . 49137) (open-paren 49127 . 49128) (close-paren 49125 . 49126) (symbol 49124 . 49125) (symbol 49112 . 49123) (open-paren 49111 . 49112) (close-paren 49109 . 49110) (symbol 49098 . 49109) (open-paren 49097 . 49098) (BOOL 49092 . 49096) (symbol 49085 . 49091) (punctuation 49082 . 49083) (close-paren 49081 . 49082) (open-paren 48992 . 48993) (symbol 48978 . 48989) (STRUCT 48971 . 48977) (close-paren 48895 . 48896) (punctuation 48878 . 48879) (symbol 48877 . 48878) (punctuation 48876 . 48877) (symbol 48875 . 48876) (punctuation 48874 . 48875) (punctuation 48873 . 48874) (semantic-list 48865 . 48873) (symbol 48857 . 48864) (punctuation 48853 . 48854) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 48745 . 48761)))) 48736 . 48853) (open-paren 48627 . 48628) (close-paren 48625 . 48626) (symbol 48618 . 48625) (symbol 48608 . 48617) (punctuation 48606 . 48607) (symbol 48600 . 48606) (symbol 48588 . 48599) (open-paren 48587 . 48588) (symbol 48570 . 48586) (VOID 48565 . 48569) (symbol 48558 . 48564) (close-paren 48556 . 48557) (semantic-list 48545 . 48553) (RETURN 48516 . 48522) (open-paren 48512 . 48513) (close-paren 48510 . 48511) (symbol 48504 . 48510) (symbol 48492 . 48503) (open-paren 48491 . 48492) (symbol 48484 . 48490) (symbol 48474 . 48483) (symbol 48467 . 48473) (close-paren 48464 . 48465) (RETURN 48449 . 48455) (punctuation 48403 . 48404) (symbol 48402 . 48403) (punctuation 48401 . 48402) (symbol 48400 . 48401) (punctuation 48399 . 48400) (punctuation 48398 . 48399) (symbol 48397 . 48398) (punctuation 48395 . 48396) (symbol 48390 . 48394) (punctuation 48389 . 48390) (symbol 48388 . 48389) (punctuation 48387 . 48388) (symbol 48386 . 48387) (punctuation 48385 . 48386) (punctuation 48384 . 48385) (symbol 48383 . 48384) (punctuation 48381 . 48382) (number 48379 . 48380) (punctuation 48377 . 48378) (symbol 48367 . 48376) (punctuation 48366 . 48367) (symbol 48365 . 48366) (punctuation 48364 . 48365) (symbol 48363 . 48364) (punctuation 48362 . 48363) (punctuation 48361 . 48362) (symbol 48360 . 48361) (punctuation 48358 . 48359) (symbol 48351 . 48357) (symbol 48341 . 48350) (open-paren 48263 . 48264) (close-paren 48261 . 48262) (symbol 48260 . 48261) (punctuation 48259 . 48260) (symbol 48247 . 48258) (STRUCT 48240 . 48246) (open-paren 48239 . 48240) (symbol 48226 . 48238) (symbol 48216 . 48225) (symbol 48209 . 48215) (close-paren 48116 . 48117) (RETURN 48101 . 48107) (open-paren 48023 . 48024) (close-paren 48021 . 48022) (symbol 48015 . 48021) (symbol 48003 . 48014) (open-paren 48002 . 48003) (symbol 47995 . 48001) (symbol 47985 . 47994) (symbol 47978 . 47984) (close-paren 47976 . 47977) (punctuation 47974 . 47975) (NEW 47971 . 47974) (punctuation 47969 . 47970) (open-paren 47943 . 47944) (close-paren 47941 . 47942) (NEW 47938 . 47941) (CHAR 47933 . 47937) (UNSIGNED 47924 . 47932) (punctuation 47922 . 47923) (symbol 47917 . 47922) (symbol 47907 . 47916) (punctuation 47905 . 47906) (symbol 47899 . 47905) (symbol 47887 . 47898) (open-paren 47886 . 47887) (symbol 47881 . 47885) (VOID 47876 . 47880) (symbol 47869 . 47875) (close-paren 47867 . 47868) (punctuation 47865 . 47866) (RETURN 47837 . 47843) (open-paren 47833 . 47834) (close-paren 47831 . 47832) (symbol 47826 . 47831) (symbol 47816 . 47825) (punctuation 47814 . 47815) (symbol 47808 . 47814) (symbol 47796 . 47807) (open-paren 47795 . 47796) (symbol 47790 . 47794) (CHAR 47785 . 47789) (UNSIGNED 47776 . 47784) (symbol 47769 . 47775) (close-paren 47767 . 47768) (semantic-list 47742 . 47750) (RETURN 47735 . 47741) (open-paren 47689 . 47690) (close-paren 47687 . 47688) (symbol 47681 . 47687) (symbol 47669 . 47680) (open-paren 47668 . 47669) (symbol 47661 . 47667) (punctuation 47659 . 47660) (CHAR 47654 . 47658) (symbol 47647 . 47653) (close-paren 47645 . 47646) (punctuation 47638 . 47639) (symbol 47637 . 47638) (punctuation 47636 . 47637) (symbol 47635 . 47636) (punctuation 47634 . 47635) (punctuation 47633 . 47634) (semantic-list 47625 . 47633) (symbol 47617 . 47624) (RETURN 47610 . 47616) (open-paren 47606 . 47607) (close-paren 47604 . 47605) (symbol 47598 . 47604) (symbol 47586 . 47597) (open-paren 47585 . 47586) (symbol 47579 . 47584) (punctuation 47577 . 47578) (CHAR 47572 . 47576) (UNSIGNED 47563 . 47571) (symbol 47556 . 47562) (close-paren 46070 . 46071) (punctuation 46058 . 46059) (symbol 46057 . 46058) (punctuation 46056 . 46057) (symbol 46055 . 46056) (punctuation 46054 . 46055) (punctuation 46053 . 46054) (semantic-list 46048 . 46053) (symbol 46040 . 46047) (punctuation 46038 . 46039) (punctuation 46037 . 46038) (number 46035 . 46036) (RETURN 46028 . 46034) (open-paren 46024 . 46025) (close-paren 46022 . 46023) (symbol 46019 . 46022) (symbol 46007 . 46018) (open-paren 46006 . 46007) (symbol 45989 . 46005) (BOOL 45984 . 45988) (symbol 45977 . 45983) (close-paren 45932 . 45933) (RETURN 45900 . 45906) (punctuation 45896 . 45897) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 45884 . 45891)))) 45875 . 45896) (open-paren 45871 . 45872) (close-paren 45869 . 45870) (symbol 45868 . 45869) (symbol 45856 . 45867) (open-paren 45855 . 45856) (symbol 45847 . 45854) (punctuation 45845 . 45846) (symbol 45833 . 45844) (STRUCT 45826 . 45832) (symbol 45819 . 45825) (close-paren 45816 . 45817) (semantic-list 45797 . 45800) (open-paren 45773 . 45774) (close-paren 45771 . 45772) (symbol 45770 . 45771) (symbol 45758 . 45769) (open-paren 45757 . 45758) (symbol 45744 . 45756) (VOID 45739 . 45743) (symbol 45732 . 45738) (close-paren 45729 . 45730) (punctuation 45714 . 45715) (punctuation 45713 . 45714) (semantic-list 45709 . 45712) (symbol 45703 . 45708) (RETURN 45696 . 45702) (open-paren 45692 . 45693) (close-paren 45690 . 45691) (symbol 45689 . 45690) (symbol 45677 . 45688) (open-paren 45676 . 45677) (symbol 45668 . 45675) (BOOL 45663 . 45667) (symbol 45656 . 45662) (punctuation 45653 . 45654) (close-paren 45652 . 45653) (number 45651 . 45652) (punctuation 45649 . 45650) (punctuation 45648 . 45649) (symbol 45636 . 45647) (punctuation 45634 . 45635) (semantic-list 45613 . 45633) (symbol 45605 . 45612) (open-paren 45604 . 45605) (symbol 45597 . 45603) (punctuation 45595 . 45596) (close-paren 45594 . 45595) (semantic-list 45562 . 45575) (symbol 45554 . 45561) (number "8" 45563 . 45574) (CHAR 45549 . 45553) (number "8" 45563 . 45574) (semantic-list 45562 . 45575) (symbol 45554 . 45561) (number "8" 45563 . 45574) (CHAR 45549 . 45553) (number "8" 45563 . 45574) (open-paren 45334 . 45335) (symbol 45322 . 45333) (STRUCT 45315 . 45321) (close-paren 45236 . 45237) (punctuation 45228 . 45229) (semantic-list 45224 . 45227) (symbol 45219 . 45223) (punctuation 45217 . 45218) (semantic-list 45213 . 45216) (symbol 45207 . 45212) (RETURN 45200 . 45206) (open-paren 45196 . 45197) (close-paren 45194 . 45195) (symbol 45193 . 45194) (symbol 45181 . 45192) (open-paren 45180 . 45181) (symbol 45171 . 45179) (symbol 45159 . 45170) (symbol 45152 . 45158) (close-paren 45150 . 45151) (punctuation 45142 . 45143) (semantic-list 45138 . 45141) (symbol 45133 . 45137) (punctuation 45131 . 45132) (semantic-list 45127 . 45130) (symbol 45121 . 45126) (RETURN 45114 . 45120) (open-paren 45110 . 45111) (close-paren 45108 . 45109) (symbol 45107 . 45108) (symbol 45095 . 45106) (open-paren 45094 . 45095) (symbol 45085 . 45093) (symbol 45073 . 45084) (symbol 45066 . 45072) (close-paren 44998 . 44999) (RETURN 44985 . 44991) (semantic-list 44934 . 44945) (IF 44931 . 44933) (RETURN 44912 . 44918) (semantic-list 44896 . 44907) (IF 44893 . 44895) (open-paren 44889 . 44890) (close-paren 44887 . 44888) (symbol 44886 . 44887) (symbol 44874 . 44885) (open-paren 44873 . 44874) (symbol 44869 . 44872) (symbol 44857 . 44868) (symbol 44850 . 44856) (close-paren 44848 . 44849) (RETURN 44835 . 44841) (semantic-list 44784 . 44795) (IF 44781 . 44783) (RETURN 44762 . 44768) (semantic-list 44746 . 44757) (IF 44743 . 44745) (open-paren 44739 . 44740) (close-paren 44737 . 44738) (symbol 44736 . 44737) (symbol 44724 . 44735) (open-paren 44723 . 44724) (symbol 44719 . 44722) (symbol 44707 . 44718) (symbol 44700 . 44706) (close-paren 44632 . 44633) (punctuation 44627 . 44628) (semantic-list 44623 . 44626) (symbol 44613 . 44622) (punctuation 44612 . 44613) (open-paren 44608 . 44609) (close-paren 44606 . 44607) (symbol 44605 . 44606) (symbol 44593 . 44604) (punctuation 44591 . 44592) (symbol 44590 . 44591) (symbol 44578 . 44589) (open-paren 44577 . 44578) (symbol 44569 . 44576) (VOID 44564 . 44568) (symbol 44557 . 44563) (close-paren 44555 . 44556) (punctuation 44550 . 44551) (semantic-list 44546 . 44549) (symbol 44536 . 44545) (punctuation 44535 . 44536) (open-paren 44531 . 44532) (close-paren 44529 . 44530) (symbol 44528 . 44529) (symbol 44516 . 44527) (punctuation 44514 . 44515) (symbol 44513 . 44514) (symbol 44501 . 44512) (open-paren 44500 . 44501) (symbol 44492 . 44499) (VOID 44487 . 44491) (symbol 44480 . 44486) (close-paren 44309 . 44310) (punctuation "." 44292 . 44307) (symbol "u" 44292 . 44307) (punctuation "." 44292 . 44307) (symbol "s" 44292 . 44307) (punctuation "." 44292 . 44307) (symbol "u" 44292 . 44307) (punctuation ">" 44292 . 44307) (punctuation "-" 44292 . 44307) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44305 . 44306)))) 44292 . 44307) (symbol "XCONS" 44292 . 44307) (RETURN 44285 . 44291) (open-paren 44281 . 44282) (close-paren 44279 . 44280) (symbol 44278 . 44279) (symbol 44266 . 44277) (open-paren 44265 . 44266) (close-paren 44263 . 44264) (symbol 44259 . 44263) (open-paren 44258 . 44259) (symbol 44246 . 44257) (symbol 44239 . 44245) (close-paren 44236 . 44237) (punctuation "." 44219 . 44234) (symbol "s" 44219 . 44234) (punctuation "." 44219 . 44234) (symbol "u" 44219 . 44234) (punctuation ">" 44219 . 44234) (punctuation "-" 44219 . 44234) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 44232 . 44233)))) 44219 . 44234) (symbol "XCONS" 44219 . 44234) (RETURN 44212 . 44218) (open-paren 44208 . 44209) (close-paren 44206 . 44207) (symbol 44205 . 44206) (symbol 44193 . 44204) (open-paren 44192 . 44193) (close-paren 44190 . 44191) (symbol 44186 . 44190) (open-paren 44185 . 44186) (symbol 44173 . 44184) (symbol 44166 . 44172) (close-paren 44127 . 44128) (punctuation 44121 . 44122) (symbol 44120 . 44121) (punctuation 44119 . 44120) (symbol 44118 . 44119) (punctuation 44117 . 44118) (symbol 44116 . 44117) (punctuation 44115 . 44116) (punctuation 44114 . 44115) (semantic-list 44111 . 44114) (symbol 44105 . 44110) (punctuation 44104 . 44105) (RETURN 44097 . 44103) (open-paren 44093 . 44094) (close-paren 44091 . 44092) (symbol 44090 . 44091) (symbol 44078 . 44089) (open-paren 44077 . 44078) (symbol 44067 . 44076) (punctuation 44065 . 44066) (symbol 44053 . 44064) (symbol 44046 . 44052) (close-paren 44044 . 44045) (punctuation 44038 . 44039) (symbol 44037 . 44038) (punctuation 44036 . 44037) (symbol 44035 . 44036) (punctuation 44034 . 44035) (punctuation 44033 . 44034) (semantic-list 44030 . 44033) (symbol 44024 . 44029) (punctuation 44023 . 44024) (RETURN 44016 . 44022) (open-paren 44012 . 44013) (close-paren 44010 . 44011) (symbol 44009 . 44010) (symbol 43997 . 44008) (open-paren 43996 . 43997) (symbol 43986 . 43995) (punctuation 43984 . 43985) (symbol 43972 . 43983) (symbol 43965 . 43971) (close-paren 43505 . 43506) (punctuation 43503 . 43504) (semantic-list #("(eassert (CONSP (a)), (struct Lisp_Cons *) XUNTAG (a, Lisp_Cons))" 0 1 (macros (("a" symbol "a" 43501 . 43502)))) 43487 . 43503) (RETURN 43480 . 43486) (open-paren 43476 . 43477) (close-paren 43474 . 43475) (symbol 43473 . 43474) (symbol 43461 . 43472) (open-paren 43460 . 43461) (close-paren 43458 . 43459) (symbol 43453 . 43458) (open-paren 43452 . 43453) (punctuation 43450 . 43451) (symbol 43440 . 43449) (STRUCT 43433 . 43439) (symbol 43426 . 43432) (close-paren 43423 . 43424) (semantic-list 43406 . 43409) (open-paren 43384 . 43385) (close-paren 43382 . 43383) (symbol 43381 . 43382) (symbol 43369 . 43380) (open-paren 43368 . 43369) (symbol 43357 . 43367) (VOID 43352 . 43356) (symbol 43345 . 43351) (close-paren 43342 . 43343) (punctuation 43340 . 43341) (semantic-list #("(XTYPE (x) == Lisp_Cons)" 0 1 (macros (("x" symbol "x" 43338 . 43339)))) 43324 . 43340) (RETURN 43317 . 43323) (open-paren 43313 . 43314) (close-paren 43311 . 43312) (symbol 43310 . 43311) (symbol 43298 . 43309) (open-paren 43297 . 43298) (close-paren 43295 . 43296) (symbol 43290 . 43295) (open-paren 43289 . 43290) (BOOL 43284 . 43288) (symbol 43277 . 43283) (close-paren 43274 . 43275) (RETURN 43250 . 43256) (open-paren 43246 . 43247) (close-paren 43244 . 43245) (symbol 43243 . 43244) (symbol 43231 . 43242) (open-paren 43230 . 43231) (close-paren 43228 . 43229) (symbol 43224 . 43228) (open-paren 43223 . 43224) (BOOL 43218 . 43222) (symbol 43211 . 43217) (punctuation 43208 . 43209) (close-paren 43207 . 43208) (number 43206 . 43207) (punctuation 43204 . 43205) (punctuation 43203 . 43204) (symbol 43191 . 43202) (punctuation 43189 . 43190) (semantic-list 43170 . 43188) (symbol 43162 . 43169) (open-paren 43161 . 43162) (symbol 43154 . 43160) (punctuation 43152 . 43153) (close-paren 43151 . 43152) (semantic-list 43119 . 43132) (symbol 43111 . 43118) (number "8" 43120 . 43131) (CHAR 43106 . 43110) (number "8" 43120 . 43131) (semantic-list 43119 . 43132) (symbol 43111 . 43118) (number "8" 43120 . 43131) (CHAR 43106 . 43110) (number "8" 43120 . 43131) (open-paren 42850 . 42851) (symbol 42840 . 42849) (STRUCT 42833 . 42839) (close-paren 42755 . 42756) (RETURN 42745 . 42751) (punctuation 42741 . 42742) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "INTEGERP" 42708 . 42716)))) 42699 . 42741) (open-paren 42653 . 42654) (close-paren 42651 . 42652) (symbol 42650 . 42651) (punctuation 42649 . 42650) (VOID 42644 . 42648) (open-paren 42643 . 42644) (symbol 42622 . 42642) (symbol 42610 . 42621) (symbol 42603 . 42609) (close-paren 42600 . 42601) (RETURN 42570 . 42576) (open-paren 42566 . 42567) (close-paren 42564 . 42565) (symbol 42563 . 42564) (symbol 42551 . 42562) (open-paren 42550 . 42551) (symbol 42542 . 42549) (punctuation 42540 . 42541) (VOID 42535 . 42539) (symbol 42528 . 42534) (close-paren 40047 . 40048) (punctuation 40045 . 40046) (semantic-list #("((XTYPE (x) & (Lisp_Int0 | ~Lisp_Int1)) == Lisp_Int0)" 0 1 (macros (("x" symbol "x" 40043 . 40044)))) 40026 . 40045) (RETURN 40019 . 40025) (open-paren 40015 . 40016) (close-paren 40013 . 40014) (symbol 40012 . 40013) (symbol 40000 . 40011) (open-paren 39999 . 40000) (close-paren 39997 . 39998) (symbol 39989 . 39997) (open-paren 39988 . 39989) (BOOL 39983 . 39987) (symbol 39976 . 39982) (close-paren 39973 . 39974) (RETURN 39963 . 39969) (punctuation 39959 . 39960) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XTYPE" 39914 . 39919)))) 39905 . 39959) (open-paren 39862 . 39863) (close-paren 39860 . 39861) (symbol 39856 . 39860) (symbol 39846 . 39855) (ENUM 39841 . 39845) (punctuation 39839 . 39840) (symbol 39836 . 39839) (punctuation 39835 . 39836) (VOID 39830 . 39834) (open-paren 39829 . 39830) (symbol 39815 . 39828) (symbol 39803 . 39814) (symbol 39796 . 39802) (close-paren 39735 . 39736) (punctuation 39726 . 39727) (symbol 39722 . 39725) (punctuation 39720 . 39721) (symbol 39714 . 39719) (punctuation 39712 . 39713) (punctuation 39711 . 39712) (symbol 39707 . 39710) (punctuation 39705 . 39706) (symbol 39699 . 39704) (punctuation 39697 . 39698) (symbol 39691 . 39696) (punctuation 39689 . 39690) (symbol 39685 . 39688) (RETURN 39678 . 39684) (open-paren 39674 . 39675) (close-paren 39672 . 39673) (symbol 39667 . 39672) (symbol 39657 . 39666) (punctuation 39655 . 39656) (symbol 39652 . 39655) (symbol 39642 . 39651) (punctuation 39640 . 39641) (symbol 39635 . 39640) (symbol 39625 . 39634) (open-paren 39624 . 39625) (symbol 39609 . 39623) (symbol 39599 . 39608) (symbol 39592 . 39598) (close-paren 39398 . 39399) (punctuation 39396 . 39397) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 39394 . 39395) ("x" symbol "x" 39391 . 39392)))) 39380 . 39396) (RETURN 39373 . 39379) (open-paren 39369 . 39370) (close-paren 39367 . 39368) (symbol 39366 . 39367) (symbol 39354 . 39365) (punctuation 39352 . 39353) (symbol 39351 . 39352) (symbol 39339 . 39350) (open-paren 39338 . 39339) (close-paren 39336 . 39337) (symbol 39334 . 39336) (open-paren 39333 . 39334) (BOOL 39328 . 39332) (symbol 39321 . 39327) (close-paren 39266 . 39267) (semantic-list 39246 . 39263) (punctuation 39244 . 39245) (punctuation 39235 . 39236) (semantic-list 39231 . 39234) (symbol 39219 . 39230) (punctuation 39217 . 39218) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 39205 . 39216) (RETURN 39198 . 39204) (punctuation 39164 . 39165) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 39128 . 39129)))) 39119 . 39164) (open-paren 39115 . 39116) (close-paren 39113 . 39114) (symbol 39112 . 39113) (symbol 39102 . 39111) (open-paren 39101 . 39102) (symbol 39089 . 39100) (symbol 39077 . 39088) (symbol 39070 . 39076) (close-paren 38986 . 38987) (RETURN 38961 . 38967) (open-paren 38957 . 38958) (close-paren 38955 . 38956) (symbol 38954 . 38955) (symbol 38942 . 38953) (open-paren 38941 . 38942) (close-paren 38939 . 38940) (symbol 38934 . 38939) (open-paren 38933 . 38934) (symbol 38923 . 38932) (symbol 38916 . 38922) (close-paren 38758 . 38759) (punctuation 38756 . 38757) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 38749 . 38756) (punctuation 38747 . 38748) (symbol 38745 . 38746) (punctuation 38743 . 38744) (symbol 38731 . 38742) (punctuation 38729 . 38730) (punctuation 38728 . 38729) (symbol 38726 . 38727) (punctuation 38724 . 38725) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38712 . 38723) (RETURN 38705 . 38711) (open-paren 38675 . 38676) (close-paren 38673 . 38674) (symbol 38672 . 38673) (symbol 38660 . 38671) (open-paren 38659 . 38660) (symbol 38653 . 38658) (symbol 38642 . 38652) (symbol 38635 . 38641) (close-paren 38555 . 38556) (RETURN 38545 . 38551) (punctuation 38521 . 38522) (semantic-list 38504 . 38521) (punctuation 38502 . 38503) (semantic-list 38498 . 38501) (symbol 38494 . 38497) (punctuation 38492 . 38493) (semantic-list 38488 . 38491) (symbol 38483 . 38487) (punctuation 38481 . 38482) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 38469 . 38480) (punctuation 38467 . 38468) (symbol 38465 . 38466) (symbol 38455 . 38464) (open-paren 38421 . 38422) (close-paren 38419 . 38420) (symbol 38418 . 38419) (symbol 38406 . 38417) (open-paren 38405 . 38406) (symbol 38396 . 38404) (symbol 38386 . 38395) (symbol 38379 . 38385) (close-paren 38205 . 38206) (punctuation 38190 . 38191) (punctuation 38189 . 38190) (symbol 38187 . 38188) (RETURN 38180 . 38186) (semantic-list 38118 . 38177) (semantic-list 38098 . 38113) (IF 38095 . 38097) (open-paren 38066 . 38067) (close-paren 38064 . 38065) (symbol 38063 . 38064) (symbol 38051 . 38062) (open-paren 38050 . 38051) (symbol 38045 . 38049) (symbol 38035 . 38044) (symbol 38028 . 38034) (close-paren 37979 . 37980) (RETURN 37963 . 37969) (semantic-list 37903 . 37960) (ELSE 37894 . 37898) (semantic-list 37815 . 37891) (semantic-list 37797 . 37810) (IF 37794 . 37796) (open-paren 37760 . 37761) (close-paren 37758 . 37759) (symbol 37757 . 37758) (symbol 37747 . 37756) (open-paren 37746 . 37747) (symbol 37734 . 37745) (symbol 37722 . 37733) (symbol 37715 . 37721) (punctuation 36647 . 36648) (close-paren 36646 . 36647) (symbol 36621 . 36643) (punctuation 36619 . 36620) (punctuation 36618 . 36619) (number 36613 . 36617) (punctuation 36611 . 36612) (symbol 36596 . 36610) (punctuation 36590 . 36591) (symbol 36568 . 36590) (punctuation 36566 . 36567) (symbol 36543 . 36565) (punctuation 36541 . 36542) (symbol 36518 . 36540) (punctuation 36450 . 36451) (semantic-list 36378 . 36450) (punctuation 36376 . 36377) (symbol 36353 . 36375) (punctuation 36347 . 36348) (number 36345 . 36347) (punctuation 36343 . 36344) (symbol 36320 . 36342) (punctuation 36168 . 36169) (number 36167 . 36168) (punctuation 36165 . 36166) (semantic-list 36135 . 36164) (punctuation 36133 . 36134) (symbol 36110 . 36132) (punctuation 36104 . 36105) (number 36102 . 36104) (punctuation 36100 . 36101) (symbol 36077 . 36099) (open-paren 35704 . 35705) (symbol 35687 . 35701) (ENUM 35682 . 35686) (punctuation 35679 . 35680) (close-paren 35678 . 35679) (symbol 35608 . 35617) (punctuation 35604 . 35605) (symbol 35593 . 35604) (punctuation 35589 . 35590) (symbol 35570 . 35589) (punctuation 35566 . 35567) (symbol 35551 . 35566) (punctuation 35547 . 35548) (symbol 35534 . 35547) (punctuation 35465 . 35466) (symbol 35445 . 35465) (punctuation 35441 . 35442) (symbol 35429 . 35441) (punctuation 35425 . 35426) (symbol 35415 . 35425) (punctuation 35411 . 35412) (symbol 35400 . 35411) (punctuation 35396 . 35397) (symbol 35379 . 35396) (punctuation 35375 . 35376) (symbol 35363 . 35375) (punctuation 35302 . 35303) (symbol 35292 . 35302) (punctuation 35288 . 35289) (symbol 35279 . 35288) (punctuation 35275 . 35276) (symbol 35250 . 35275) (punctuation 35246 . 35247) (symbol 35233 . 35246) (punctuation 35229 . 35230) (symbol 35214 . 35229) (punctuation 35210 . 35211) (symbol 35199 . 35210) (punctuation 35195 . 35196) (symbol 35179 . 35195) (punctuation 35175 . 35176) (symbol 35164 . 35175) (punctuation 35160 . 35161) (symbol 35150 . 35160) (punctuation 35146 . 35147) (symbol 35134 . 35146) (punctuation 35130 . 35131) (symbol 35121 . 35130) (punctuation 35117 . 35118) (symbol 35099 . 35117) (open-paren 35095 . 35096) (symbol 35085 . 35094) (ENUM 35080 . 35084) (punctuation ";" 34838 . 34879) (symbol "EXTERNALLY_VISIBLE" 34724 . 34778) (symbol "PSEUDOVECTOR_FLAG" 34724 . 34778) (CONST "const" 34724 . 34778) (symbol "ptrdiff_t" 34724 . 34778) (EXTERN "extern" 34724 . 34778) (punctuation ";" 34573 . 34612) (symbol "EXTERNALLY_VISIBLE" 34483 . 34535) (symbol "ARRAY_MARK_FLAG" 34483 . 34535) (CONST "const" 34483 . 34535) (symbol "ptrdiff_t" 34483 . 34535) (EXTERN "extern" 34483 . 34535) (close-paren 34399 . 34400) (open-paren 34370 . 34371) (close-paren 34368 . 34369) (symbol 34367 . 34368) (symbol 34355 . 34366) (open-paren 34354 . 34355) (close-paren 34352 . 34353) (symbol 34340 . 34352) (open-paren 34339 . 34340) (VOID 34334 . 34338) (symbol 34327 . 34333) (close-paren 34324 . 34325) (semantic-list 34314 . 34321) (punctuation 34306 . 34307) (RETURN 34281 . 34287) (open-paren 34277 . 34278) (close-paren 34275 . 34276) (symbol 34270 . 34275) (INT 34266 . 34269) (open-paren 34265 . 34266) (symbol 34245 . 34264) (symbol 34233 . 34244) (symbol 34226 . 34232) (close-paren 34223 . 34224) (RETURN 34213 . 34219) (punctuation 34209 . 34210) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 34190 . 34197)))) 34181 . 34209) (open-paren 33465 . 33466) (close-paren 33463 . 33464) (symbol 33460 . 33463) (punctuation 33459 . 33460) (symbol 33447 . 33458) (STRUCT 33440 . 33446) (open-paren 33439 . 33440) (symbol 33422 . 33438) (symbol 33410 . 33421) (symbol 33403 . 33409) (close-paren 33400 . 33401) (RETURN 33383 . 33389) (punctuation 33088 . 33089) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 33076 . 33083)))) 33067 . 33088) (open-paren 33012 . 33013) (close-paren 33010 . 33011) (symbol 33009 . 33010) (symbol 32997 . 33008) (open-paren 32996 . 32997) (close-paren 32994 . 32995) (symbol 32987 . 32994) (open-paren 32986 . 32987) (symbol 32954 . 32985) (punctuation 32952 . 32953) (symbol 32940 . 32951) (STRUCT 32933 . 32939) (symbol 32926 . 32932) (close-paren 32923 . 32924) (punctuation 32921 . 32922) (semantic-list #("(XTYPE (x) == Lisp_Symbol)" 0 1 (macros (("x" symbol "x" 32919 . 32920)))) 32903 . 32921) (RETURN 32896 . 32902) (open-paren 32892 . 32893) (close-paren 32890 . 32891) (symbol 32889 . 32890) (symbol 32877 . 32888) (open-paren 32876 . 32877) (close-paren 32874 . 32875) (symbol 32867 . 32874) (open-paren 32866 . 32867) (BOOL 32861 . 32865) (symbol 32854 . 32860) (punctuation 32851 . 32852) (close-paren 32850 . 32851) (number 32849 . 32850) (punctuation 32847 . 32848) (punctuation 32846 . 32847) (symbol 32834 . 32845) (punctuation 32832 . 32833) (semantic-list 32806 . 32831) (symbol 32798 . 32805) (open-paren 32797 . 32798) (symbol 32790 . 32796) (punctuation 32788 . 32789) (close-paren 32787 . 32788) (semantic-list 32760 . 32773) (symbol 32752 . 32759) (number "8" 32761 . 32772) (CHAR 32747 . 32751) (number "8" 32761 . 32772) (open-paren 31598 . 31599) (symbol 31578 . 31595) (UNION 31572 . 31577) (punctuation 27650 . 27651) (close-paren 27649 . 27650) (number 27648 . 27649) (punctuation 27646 . 27647) (punctuation 27645 . 27646) (symbol 27633 . 27644) (punctuation 27631 . 27632) (semantic-list 27610 . 27630) (symbol 27602 . 27609) (open-paren 27601 . 27602) (symbol 27594 . 27600) (punctuation 27592 . 27593) (close-paren 27591 . 27592) (semantic-list 27559 . 27572) (symbol 27551 . 27558) (number "8" 27560 . 27571) (CHAR 27546 . 27550) (number "8" 27560 . 27571) (semantic-list 27559 . 27572) (symbol 27551 . 27558) (number "8" 27560 . 27571) (CHAR 27546 . 27550) (number "8" 27560 . 27571) (open-paren 25908 . 25909) (symbol 25896 . 25907) (STRUCT 25889 . 25895) (punctuation 25886 . 25887) (close-paren 25885 . 25886) (number 25883 . 25884) (punctuation 25881 . 25882) (symbol 25860 . 25880) (punctuation 25856 . 25857) (number 25855 . 25856) (punctuation 25853 . 25854) (symbol 25838 . 25852) (punctuation 25834 . 25835) (number 25833 . 25834) (punctuation 25831 . 25832) (symbol 25808 . 25830) (open-paren 25804 . 25805) (symbol 25783 . 25803) (ENUM 25778 . 25782) (punctuation 25775 . 25776) (close-paren 25774 . 25775) (number 25772 . 25773) (punctuation 25770 . 25771) (symbol 25753 . 25769) (punctuation 25749 . 25750) (number 25748 . 25749) (punctuation 25746 . 25747) (symbol 25729 . 25745) (punctuation 25725 . 25726) (number 25724 . 25725) (punctuation 25722 . 25723) (symbol 25705 . 25720) (punctuation 25701 . 25702) (number 25700 . 25701) (punctuation 25698 . 25699) (symbol 25681 . 25696) (open-paren 25677 . 25678) (symbol 25661 . 25676) (ENUM 25656 . 25660) (punctuation 25653 . 25654) (close-paren 25652 . 25653) (number 25650 . 25651) (punctuation 25648 . 25649) (symbol 25613 . 25647) (punctuation 25609 . 25610) (number 25608 . 25609) (punctuation 25606 . 25607) (symbol 25590 . 25605) (punctuation 25586 . 25587) (number 25585 . 25586) (punctuation 25583 . 25584) (symbol 25565 . 25582) (open-paren 25561 . 25562) (symbol 25545 . 25560) (ENUM 25540 . 25544) (close-paren 25499 . 25500) (punctuation 25490 . 25491) (semantic-list 25452 . 25490) (punctuation 25450 . 25451) (symbol 25448 . 25449) (RETURN 25441 . 25447) (open-paren 25333 . 25334) (close-paren 25331 . 25332) (symbol 25327 . 25331) (INT 25323 . 25326) (punctuation 25321 . 25322) (symbol 25320 . 25321) (symbol 25308 . 25319) (open-paren 25307 . 25308) (close-paren 25305 . 25306) (symbol 25299 . 25305) (open-paren 25298 . 25299) (punctuation 25296 . 25297) (VOID 25291 . 25295) (symbol 25284 . 25290) (close-paren 25219 . 25220) (punctuation 25217 . 25218) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 25215 . 25216) ("predicate" symbol "predicate" 25204 . 25213) ("ok" symbol "ok" 25200 . 25202)))) 25181 . 25217) (open-paren 25177 . 25178) (close-paren 25175 . 25176) (symbol 25174 . 25175) (symbol 25162 . 25173) (punctuation 25160 . 25161) (symbol 25151 . 25160) (symbol 25139 . 25150) (punctuation 25137 . 25138) (symbol 25135 . 25137) (INT 25131 . 25134) (open-paren 25130 . 25131) (close-paren 25128 . 25129) (symbol 25118 . 25128) (open-paren 25117 . 25118) (VOID 25112 . 25116) (symbol 25105 . 25111) (close-paren 25102 . 25103) (punctuation 25084 . 25085) (punctuation 25083 . 25084) (symbol 25081 . 25082) (punctuation 25079 . 25080) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 25071 . 25078) (punctuation 25070 . 25071) (punctuation 25068 . 25069) (symbol 25066 . 25067) (punctuation 25064 . 25065) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 25052 . 25063) (RETURN 25045 . 25051) (open-paren 24966 . 24967) (close-paren 24964 . 24965) (symbol 24963 . 24964) (symbol 24951 . 24962) (open-paren 24950 . 24951) (close-paren 24948 . 24949) (symbol 24943 . 24948) (open-paren 24942 . 24943) (symbol 24932 . 24941) (ENUM 24927 . 24931) (symbol 24920 . 24926) (close-paren 24891 . 24892) (punctuation 24889 . 24890) (semantic-list #("((Lisp_Object) (uintptr_t) (p))" 0 1 (macros (("p" symbol "p" 24887 . 24888)))) 24875 . 24889) (RETURN 24868 . 24874) (open-paren 24864 . 24865) (close-paren 24862 . 24863) (symbol 24861 . 24862) (punctuation 24860 . 24861) (VOID 24855 . 24859) (open-paren 24854 . 24855) (close-paren 24852 . 24853) (symbol 24849 . 24852) (open-paren 24848 . 24849) (symbol 24836 . 24847) (symbol 24829 . 24835) (close-paren 24826 . 24827) (punctuation 24824 . 24825) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 24822 . 24823)))) 24810 . 24824) (RETURN 24803 . 24809) (open-paren 24799 . 24800) (close-paren 24797 . 24798) (symbol 24796 . 24797) (symbol 24784 . 24795) (open-paren 24783 . 24784) (close-paren 24781 . 24782) (symbol 24778 . 24781) (open-paren 24777 . 24778) (punctuation 24775 . 24776) (VOID 24770 . 24774) (symbol 24763 . 24769) (close-paren 24760 . 24761) (punctuation 24758 . 24759) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 24756 . 24757)))) 24744 . 24758) (RETURN 24737 . 24743) (open-paren 24733 . 24734) (close-paren 24731 . 24732) (symbol 24730 . 24731) (symbol 24720 . 24729) (open-paren 24719 . 24720) (close-paren 24717 . 24718) (symbol 24714 . 24717) (open-paren 24713 . 24714) (symbol 24701 . 24712) (symbol 24694 . 24700) (close-paren 24691 . 24692) (punctuation 24689 . 24690) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 24687 . 24688)))) 24675 . 24689) (RETURN 24668 . 24674) (open-paren 24664 . 24665) (close-paren 24662 . 24663) (symbol 24661 . 24662) (symbol 24649 . 24660) (open-paren 24648 . 24649) (close-paren 24646 . 24647) (symbol 24643 . 24646) (open-paren 24642 . 24643) (symbol 24632 . 24641) (symbol 24625 . 24631) (punctuation 24350 . 24351) (close-paren 24349 . 24350) (symbol 24338 . 24349) (open-paren 24337 . 24338) (symbol 24323 . 24336) (DOUBLE 24316 . 24322) (EXTERN 24309 . 24315) (punctuation 24001 . 24002) (close-paren 24000 . 24001) (symbol 23989 . 24000) (punctuation 23987 . 23988) (symbol 23976 . 23987) (open-paren 23975 . 23976) (symbol 23955 . 23974) (VOID 23950 . 23954) (EXTERN 23933 . 23939) (punctuation 23904 . 23905) (close-paren 23903 . 23904) (symbol 23892 . 23903) (punctuation 23890 . 23891) (INT 23887 . 23890) (punctuation 23885 . 23886) (symbol 23874 . 23885) (open-paren 23873 . 23874) (symbol 23858 . 23872) (VOID 23853 . 23857) (EXTERN 23846 . 23852) (punctuation 23844 . 23845) (close-paren 23843 . 23844) (INT 23840 . 23843) (punctuation 23838 . 23839) (symbol 23827 . 23838) (open-paren 23826 . 23827) (symbol 23811 . 23825) (symbol 23799 . 23810) (EXTERN 23792 . 23798) (punctuation 23760 . 23761) (close-paren 23759 . 23760) (symbol 23748 . 23759) (punctuation 23735 . 23736) (symbol 23726 . 23735) (punctuation 23724 . 23725) (symbol 23713 . 23724) (open-paren 23712 . 23713) (symbol 23684 . 23711) (VOID 23679 . 23683) (symbol 23672 . 23678) (punctuation 23602 . 23603) (close-paren 23601 . 23602) (symbol 23595 . 23600) (punctuation 23593 . 23594) (symbol 23570 . 23592) (open-paren 23568 . 23569) (symbol 23545 . 23567) (ENUM 23540 . 23544) (punctuation 19651 . 19652) (close-paren 19650 . 19651) (symbol 19581 . 19600) (punctuation 19529 . 19530) (symbol 19510 . 19529) (punctuation 19463 . 19464) (symbol 19451 . 19463) (punctuation 19413 . 19414) (symbol 19400 . 19413) (punctuation 19359 . 19360) (symbol 19347 . 19359) (open-paren 19341 . 19342) (symbol 19325 . 19338) (ENUM 19320 . 19324) (punctuation 19159 . 19160) (close-paren 19158 . 19159) (symbol 19140 . 19155) (punctuation 19064 . 19065) (symbol 19046 . 19064) (punctuation 19020 . 19021) (symbol 19001 . 19020) (punctuation 18995 . 18996) (symbol 18975 . 18995) (punctuation 18969 . 18970) (symbol 18952 . 18969) (punctuation 18946 . 18947) (symbol 18930 . 18946) (punctuation 18924 . 18925) (number 18918 . 18924) (punctuation 18916 . 18917) (symbol 18901 . 18915) (open-paren 18895 . 18896) (symbol 18878 . 18892) (ENUM 18873 . 18877) (punctuation 18549 . 18550) (close-paren 18548 . 18549) (number 18544 . 18545) (punctuation 18542 . 18543) (symbol 18531 . 18541) (punctuation 18524 . 18525) (number 18523 . 18524) (punctuation 18521 . 18522) (number 18519 . 18520) (punctuation 18517 . 18518) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 18505 . 18516) (punctuation 18503 . 18504) (symbol 18493 . 18502) (punctuation 18423 . 18424) (number 18422 . 18423) (punctuation 18420 . 18421) (symbol 18404 . 18419) (punctuation 18140 . 18141) (number 18139 . 18140) (punctuation 18137 . 18138) (symbol 18125 . 18136) (punctuation 17978 . 17979) (number 17977 . 17978) (punctuation 17975 . 17976) (number 17973 . 17974) (punctuation 17971 . 17972) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 17959 . 17970) (punctuation 17957 . 17958) (symbol 17947 . 17956) (punctuation 17941 . 17942) (number 17940 . 17941) (punctuation 17938 . 17939) (symbol 17928 . 17937) (punctuation 17867 . 17868) (number 17866 . 17867) (punctuation 17864 . 17865) (symbol 17854 . 17863) (punctuation 17727 . 17728) (number 17726 . 17727) (punctuation 17724 . 17725) (symbol 17712 . 17723) (open-paren 17637 . 17638) (symbol 17625 . 17634) (ENUM 17620 . 17624) (close-paren 15342 . 15343) (semantic-list 15310 . 15342) (punctuation 15308 . 15309) (punctuation 15306 . 15307) (punctuation 15305 . 15306) (symbol 15280 . 15297) (symbol 15272 . 15279) (punctuation 15270 . 15271) (punctuation 15268 . 15269) (punctuation 15267 . 15268) (symbol 15254 . 15266) (symbol 15246 . 15253) (punctuation 15244 . 15245) (punctuation 15242 . 15243) (punctuation 15241 . 15242) (punctuation 10242 . 10243) (punctuation 10241 . 10242) (symbol 10235 . 10240) (string 10173 . 10234) (string 10104 . 10169) (symbol 10098 . 10103) (punctuation 10096 . 10097) (punctuation ";" 10019 . 10050) (symbol "EXTERNALLY_VISIBLE" 9911 . 9955) (symbol "VALMASK" 9911 . 9955) (CONST "const" 9911 . 9955) (symbol "EMACS_INT" 9911 . 9955) (EXTERN "extern" 9911 . 9955) (punctuation ";" 9800 . 9835) (symbol "EXTERNALLY_VISIBLE" 9709 . 9752) (CONST "const" 9709 . 9752) (symbol "USE_LSB_TAG" 9709 . 9752) (EXTERN "extern" 9709 . 9752) (string 8996 . 9041) (symbol 8990 . 8995) (punctuation 8988 . 8989) (spp-macro-def 8630 . 8641) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "GCTYPEBITS" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092))
      :lexical-table 
        '(("pMd" . ((symbol "pI" 5218 . 5220) (string "\"d\"" 5220 . 5223)))
          ("VALMASK" . ((semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 9973 . 10018)))
          ("DEFUN_ARGS_0" . ((semantic-list "(void)" 28209 . 28215)))
          ("LISPSYM_INITIALLY" (spp-arg-list ("name") 30037 . 30043) . ((symbol "TAG_PTR" 30048 . 30055) (semantic-list "(Lisp_Symbol, (char *) (intptr_t) ((i##name) * sizeof *lispsym))" 30056 . 30120)))
          ("ARRAY_MARK_FLAG" . ((symbol "PTRDIFF_MIN" 34561 . 34572)))
          ("XSETBUFFER" (spp-arg-list ("a" "b") 41788 . 41794) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BUFFER))" 41795 . 41833)))
          ("sys_longjmp" (spp-arg-list ("j" "v") 63245 . 63251) . ((symbol "siglongjmp" 63252 . 63262) (semantic-list "(j, v)" 63263 . 63269)))
          ("DEFVAR_INT" (spp-arg-list ("lname" "vname" "doc") 95437 . 95456) . 
              ((DO "do" 95462 . 95464) (semantic-list "{						\\
    static struct Lisp_Intfwd i_fwd;		\\
    defvar_int (&i_fwd, lname, &globals.f_ ## vname);		\\
  }" 95465 . 95574) (WHILE "while" 95575 . 95580) (semantic-list "(false)" 95581 . 95588)))
          ("AUTO_LIST3" (spp-arg-list ("name" "a" "b" "c") 153934 . 153949) . 
              ((symbol "Lisp_Object" 153958 . 153969) (symbol "name" 153970 . 153974) (punctuation "=" 153975 . 153976) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c, Qnil))) \\
		      : list3 (a, b, c))" 153977 . 154090)))
          ("FOR_EACH_TAIL_INTERNAL" (spp-arg-list ("tail" "cycle" "check_quit") 156918 . 156943) . ((FOR "for" 156950 . 156953) (semantic-list "(struct for_each_tail_internal li = { tail, 2, 0, 2 };		\\
       CONSP (tail);							\\
       ((tail) = XCDR (tail),						\\
	((--li.q != 0							\\
	  || ((check_quit) ? maybe_quit () : (void) 0, 0 < --li.n)	\\
	  || (li.q = li.n = li.max <<= 1, li.n >>= USHRT_WIDTH,		\\
	      li.tortoise = (tail), false))				\\
	 && EQ (tail, li.tortoise))					\\
	? (cycle) : (void) 0))" 156954 . 157323)))
          ("GCALIGNMENT" . ((number "8" 8642 . 8643)))
          ("EMACS_LISP_H")
          ("max" (spp-arg-list ("a" "b") 1887 . 1893) . ((semantic-list "((a) > (b) ? (a) : (b))" 1894 . 1917)))
          ("pD" . ((string "\"ll\"" 5714 . 5718)))
          ("case_Lisp_Int" . 
              ((CASE "case" 17271 . 17275) (symbol "Lisp_Int0" 17276 . 17285) (punctuation ":" 17285 . 17286) (CASE "case" 17287 . 17291) (symbol "Lisp_Int1" 17292 . 17301)))
          ("DEFUN_ARGS_MANY" . ((semantic-list "(ptrdiff_t, Lisp_Object *)" 28118 . 28144)))
          ("DEFUN_ARGS_1" . ((semantic-list "(Lisp_Object)" 28237 . 28250)))
          ("SYMBOL_INDEX" (spp-arg-list ("sym") 30717 . 30722) . ((spp-symbol-merge ((symbol "i" 30723 . 30724) (symbol "sym" 30726 . 30729)) 30723 . 30729)))
          ("XSETCONS" (spp-arg-list ("a" "b") 40162 . 40168) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Cons))" 40169 . 40205)))
          ("DEFUN" (spp-arg-list ("lname" "fnname" "sname" "minargs" "maxargs" "intspec" "doc") 92799 . 92853) . 
              ((STATIC "static" 92859 . 92865) (STRUCT "struct" 92866 . 92872) (symbol "Lisp_Subr" 92873 . 92882) (symbol "sname" 92883 . 92888) (punctuation "=" 92889 . 92890) (semantic-list "{ { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS },				\\
       { .a ## maxargs = fnname },					\\
       minargs, maxargs, lname, intspec, 0}" 92901 . 93033) (punctuation ";" 93033 . 93034) (symbol "Lisp_Object" 93043 . 93054) (symbol "fnname" 93055 . 93061)))
          ("SAFE_NALLOCA" (spp-arg-list ("buf" "multiplier" "nitems") 149722 . 149747) . 
              ((DO "do" 149755 . 149757) (semantic-list "{								 \\
    if ((nitems) <= sa_avail / sizeof *(buf) / (multiplier))	 \\
      (buf) = AVAIL_ALLOCA (sizeof *(buf) * (multiplier) * (nitems)); \\
    else							 \\
      {								 \\
	(buf) = xnmalloc (nitems, sizeof *(buf) * (multiplier)); \\
	sa_must_free = true;					 \\
	record_unwind_protect_ptr (xfree, buf);			 \\
      }								 \\
  }" 149758 . 150098) (WHILE "while" 150099 . 150104) (semantic-list "(false)" 150105 . 150112)))
          ("AUTO_LIST4" (spp-arg-list ("name" "a" "b" "c" "d") 154109 . 154127) . 
              ((symbol "Lisp_Object" 154138 . 154149) (symbol "name" 154150 . 154154) (punctuation "=" 154169 . 154170) (semantic-list "(USE_STACK_CONS							\\
	 ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c,			\\
						     STACK_CONS (d, Qnil)))) \\
	 : list4 (a, b, c, d))" 154171 . 154308)))
          ("min" (spp-arg-list ("a" "b") 1929 . 1935) . ((semantic-list "((a) < (b) ? (a) : (b))" 1936 . 1959)))
          ("BITS_WORD_MAX" . ((symbol "SIZE_MAX" 4444 . 4452)))
          ("USE_LSB_TAG" . ((semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 9773 . 9799)))
          ("lisp_h_MARKERP" (spp-arg-list ("x") 13280 . 13283) . ((semantic-list "(MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Marker)" 13284 . 13332)))
          ("lisp_h_SYMBOL_TRAPPED_WRITE_P" (spp-arg-list ("sym") 13679 . 13684) . ((semantic-list "(XSYMBOL (sym)->u.s.trapped_write)" 13685 . 13719)))
          ("lisp_h_XCAR" (spp-arg-list ("c") 13962 . 13965) . 
              ((symbol "XCONS" 13966 . 13971) (semantic-list "(c)" 13972 . 13975) (punctuation "-" 13975 . 13976) (punctuation ">" 13976 . 13977) (symbol "u" 13977 . 13978) (punctuation "." 13978 . 13979) (symbol "s" 13979 . 13980) (punctuation "." 13980 . 13981) (symbol "car" 13981 . 13984)))
          ("lisp_h_check_cons_list" (spp-arg-list nil 14216 . 14218) . ((semantic-list "((void) 0)" 14219 . 14229)))
          ("DEFUN_ARGS_2" . ((semantic-list "(Lisp_Object, Lisp_Object)" 28272 . 28298)))
          ("CHECK_RANGED_INTEGER" (spp-arg-list ("x" "lo" "hi") 89633 . 89644) . 
              ((DO "do" 89653 . 89655) (semantic-list "{									\\
    CHECK_NUMBER (x);							\\
    if (! ((lo) <= XINT (x) && XINT (x) <= (hi)))			\\
      args_out_of_range_3						\\
	(x,								\\
	 make_number ((lo) < 0 && (lo) < MOST_NEGATIVE_FIXNUM		\\
		      ? MOST_NEGATIVE_FIXNUM				\\
		      : (lo)),						\\
	 make_number (min (hi, MOST_POSITIVE_FIXNUM)));			\\
  }" 89656 . 89973) (WHILE "while" 89974 . 89979) (semantic-list "(false)" 89980 . 89987)))
          ("FOR_EACH_TAIL" (spp-arg-list ("tail") 155731 . 155737) . ((symbol "FOR_EACH_TAIL_INTERNAL" 155742 . 155764) (semantic-list "(tail, circular_list (tail), true)" 155765 . 155799)))
          ("eassume" (spp-arg-list ("cond") 7102 . 7108) . ((symbol "assume" 7109 . 7115) (semantic-list "(cond)" 7116 . 7122)))
          ("lisp_h_CHECK_NUMBER" (spp-arg-list ("x") 12815 . 12818) . ((symbol "CHECK_TYPE" 12819 . 12829) (semantic-list "(INTEGERP (x), Qintegerp, x)" 12830 . 12858)))
          ("lisp_h_EQ" (spp-arg-list ("x" "y") 13098 . 13104) . ((semantic-list "(XLI (x) == XLI (y))" 13105 . 13125)))
          ("DEFINE_KEY_OPS_AS_MACROS" . ((symbol "true" 15378 . 15382)))
          ("ENUM_BF" (spp-arg-list ("TYPE") 17594 . 17600) . ((ENUM "enum" 17601 . 17605) (symbol "TYPE" 17606 . 17610)))
          ("DEFUN_ARGS_3" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object)" 28320 . 28359)))
          ("TAG_PTR" (spp-arg-list ("tag" "ptr") 29735 . 29745) . ((symbol "LISP_INITIALLY" 29750 . 29764) (semantic-list "((Lisp_Word) \\
		  ((untagged_ptr) (ptr) \\
		   + ((Lisp_Word_tag) (tag) << (USE_LSB_TAG ? 0 : VALBITS))))" 29765 . 29871)))
          ("PSEUDOVECTOR_FLAG" . ((semantic-list "(PTRDIFF_MAX - PTRDIFF_MAX / 2)" 34806 . 34837)))
          ("XSETTERMINAL" (spp-arg-list ("a" "b") 41594 . 41600) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_TERMINAL))" 41601 . 41641)))
          ("XSETCOMPILED" (spp-arg-list ("a" "b") 41722 . 41728) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_COMPILED))" 41729 . 41769)))
          ("STRING_SET_UNIBYTE" (spp-arg-list ("STR") 46970 . 46975) . 
              ((DO "do" 46983 . 46985) (semantic-list "{							\\
    if (XSTRING (STR)->u.s.size == 0)			\\
      (STR) = empty_unibyte_string;			\\
    else						\\
      XSTRING (STR)->u.s.size_byte = -1;		\\
  }" 46986 . 47141) (WHILE "while" 47142 . 47147) (semantic-list "(false)" 47148 . 47155)))
          ("PSEUDOVECSIZE" (spp-arg-list ("type" "nonlispfield") 55551 . 55571) . ((semantic-list "((offsetof (type, nonlispfield) - header_size) / word_size)" 55578 . 55637)))
          ("UNSIGNED_CMP" (spp-arg-list ("a" "op" "b") 55983 . 55993) . ((semantic-list "(max (sizeof ((a) + 0), sizeof ((b) + 0)) <= sizeof (unsigned)	\\
   ? ((a) + (unsigned) 0) op ((b) + (unsigned) 0)			\\
   : ((a) + (uintmax_t) 0) op ((b) + (uintmax_t) 0))" 56003 . 56174)))
          ("FLOAT_TO_STRING_BUFSIZE" . ((number "350" 122209 . 122212)))
          ("AUTO_CONS_EXPR" (spp-arg-list ("a" "b") 153241 . 153247) . ((semantic-list "(USE_STACK_CONS ? STACK_CONS (a, b) : Fcons (a, b))" 153252 . 153303)))
          ("pMu" . ((symbol "pI" 5237 . 5239) (string "\"u\"" 5239 . 5242)))
          ("LISP_WORDS_ARE_POINTERS" . ((semantic-list "(EMACS_INT_MAX == INTPTR_MAX)" 10527 . 10556)))
          ("lisp_h_XLI" (spp-arg-list ("o") 12210 . 12213) . ((semantic-list "(o)" 12214 . 12217)))
          ("lisp_h_INTEGERP" (spp-arg-list ("x") 13200 . 13203) . ((semantic-list "((XTYPE (x) & (Lisp_Int0 | ~Lisp_Int1)) == Lisp_Int0)" 13204 . 13257)))
          ("DEFUN_ARGS_4" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 28381 . 28433)))
          ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" . ((symbol "true" 31085 . 31089)))
          ("FIXNUM_OVERFLOW_P" (spp-arg-list ("i") 39504 . 39507) . ((semantic-list "(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 39512 . 39590)))
          ("XSETSYMBOL" (spp-arg-list ("a" "b") 40356 . 40362) . ((semantic-list "((a) = make_lisp_symbol (b))" 40363 . 40391)))
          ("XSETPVECTYPESIZE" (spp-arg-list ("v" "code" "lispsize" "restsize") 40683 . 40712) . ((semantic-list "((v)->header.size = (PSEUDOVECTOR_FLAG			\\
		       | ((code) << PSEUDOVECTOR_AREA_BITS)	\\
		       | ((restsize) << PSEUDOVECTOR_SIZE_BITS) \\
		       | (lispsize)))" 40718 . 40884)))
          ("DEFSYM" (spp-arg-list ("sym" "name") 66100 . 66111))
          ("TYPE_RANGED_INTEGERP" (spp-arg-list ("type" "x") 87788 . 87797) . ((semantic-list "(INTEGERP (x)			      \\
   && (TYPE_SIGNED (type) ? TYPE_MINIMUM (type) <= XINT (x) : 0 <= XINT (x)) \\
   && XINT (x) <= TYPE_MAXIMUM (type))" 87802 . 87943)))
          ("CHECK_NUMBER_OR_FLOAT_COERCE_MARKER" (spp-arg-list ("x") 90731 . 90734) . 
              ((DO "do" 90742 . 90744) (semantic-list "{									\\
    if (MARKERP (x))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (NUMBERP (x), Qnumber_or_marker_p, x);			\\
  }" 90745 . 90916) (WHILE "while" 90917 . 90922) (semantic-list "(false)" 90923 . 90930)))
          ("QUITP" . ((semantic-list "(!NILP (Vquit_flag) && NILP (Vinhibit_quit))" 100744 . 100788)))
          ("ALLOCATE_ZEROED_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 119076 . 119094) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   VECSIZE (type), tag))" 119107 . 119239)))
          ("WAIT_READING_MAX" . ((symbol "INTMAX_MAX" 139835 . 139845)))
          ("CHILD_SETUP_TYPE" . ((symbol "_Noreturn" 140338 . 140347) (VOID "void" 140348 . 140352)))
          ("SAFE_ALLOCA_LISP" (spp-arg-list ("buf" "nelt") 151536 . 151547) . ((symbol "SAFE_ALLOCA_LISP_EXTRA" 151548 . 151570) (semantic-list "(buf, nelt, 0)" 151571 . 151585)))
          ("DEFINE_GDB_SYMBOL_END" (spp-arg-list ("val") 1796 . 1801) . ((punctuation ";" 1802 . 1803)))
          ("DEFUN_ARGS_5" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object)" 28455 . 28526)))
          ("MOST_NEGATIVE_FIXNUM" . ((semantic-list "(-1 - MOST_POSITIVE_FIXNUM)" 37097 . 37124)))
          ("STRING_SET_MULTIBYTE" (spp-arg-list ("STR") 47287 . 47292) . 
              ((DO "do" 47299 . 47301) (semantic-list "{							\\
    if (XSTRING (STR)->u.s.size == 0)			\\
      (STR) = empty_multibyte_string;			\\
    else						\\
      XSTRING (STR)->u.s.size_byte = XSTRING (STR)->u.s.size; \\
  }" 47302 . 47479) (WHILE "while" 47480 . 47485) (semantic-list "(false)" 47486 . 47493)))
          ("XSET_HASH_TABLE" (spp-arg-list ("VAR" "PTR") 69343 . 69353) . ((semantic-list "(XSETPSEUDOVECTOR (VAR, PTR, PVEC_HASH_TABLE))" 69361 . 69407)))
          ("CALLMANY" (spp-arg-list ("f" "array") 93350 . 93360) . ((semantic-list "(f)" 93361 . 93364) (semantic-list "(ARRAYELTS (array), array)" 93365 . 93391)))
          ("DEFVAR_KBOARD" (spp-arg-list ("lname" "vname" "doc") 95611 . 95630) . 
              ((DO "do" 95637 . 95639) (semantic-list "{								\\
    static struct Lisp_Kboard_Objfwd ko_fwd;			\\
    defvar_kboard (&ko_fwd, lname, offsetof (KBOARD, vname ## _)); \\
  }" 95640 . 95772) (WHILE "while" 95773 . 95778) (semantic-list "(false)" 95779 . 95786)))
          ("ALLOCATE_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 118733 . 118751) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   PSEUDOVECSIZE (type, field), tag))" 118765 . 118910)))
          ("DAEMON_RUNNING" . ((semantic-list "(daemon_type >= 0)" 138786 . 138804)))
          ("eabs" (spp-arg-list ("x") 148622 . 148625) . ((semantic-list "((x) < 0 ? -(x) : (x))" 148634 . 148656)))
          ("SAFE_ALLOCA" (spp-arg-list ("size") 149380 . 149386) . ((semantic-list "((size) <= sa_avail				\\
			   ? AVAIL_ALLOCA (size)			\\
			   : (sa_must_free = true, record_xmalloc (size)))" 149387 . 149497)))
          ("AUTO_STRING" (spp-arg-list ("name" "str") 154649 . 154660) . ((symbol "AUTO_STRING_WITH_LEN" 154665 . 154685) (semantic-list "(name, str, strlen (str))" 154686 . 154711)))
          ("DEFINE_GDB_SYMBOL_BEGIN" (spp-arg-list ("type" "id") 1721 . 1731) . 
              ((EXTERN "extern" 1732 . 1738) (symbol "DECLARE_GDB_SYM" 1739 . 1754) (semantic-list "(type, id)" 1755 . 1765)))
          ("ARRAYELTS" (spp-arg-list ("arr") 2017 . 2022) . ((semantic-list "(sizeof (arr) / sizeof (arr)[0])" 2023 . 2055)))
          ("pI" . ((string "\"ll\"" 3788 . 3792)))
          ("eassert" (spp-arg-list ("cond") 7024 . 7030) . ((semantic-list "((void) (false && (cond)))" 7031 . 7057)))
          ("lisp_h_XPL" (spp-arg-list ("p") 12317 . 12320) . ((semantic-list "((Lisp_Object) (uintptr_t) (p))" 12321 . 12352)))
          ("lisp_h_CHECK_SYMBOL" (spp-arg-list ("x") 12886 . 12889) . ((symbol "CHECK_TYPE" 12890 . 12900) (semantic-list "(SYMBOLP (x), Qsymbolp, x)" 12901 . 12927)))
          ("DEFUN_ARGS_6" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object)" 28548 . 28632)))
          ("DEFINE_LISP_SYMBOL" (spp-arg-list ("name") 30483 . 30489) . 
              ((symbol "DEFINE_GDB_SYMBOL_BEGIN" 30495 . 30518) (semantic-list "(Lisp_Object, name)" 30519 . 30538) (symbol "DEFINE_GDB_SYMBOL_END" 30544 . 30565) (semantic-list "(LISPSYM_INITIALLY (name))" 30566 . 30592)))
          ("XSETWINDOW_CONFIGURATION" (spp-arg-list ("a" "b") 41380 . 41386) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW_CONFIGURATION))" 41391 . 41443)))
          ("XSETPROCESS" (spp-arg-list ("a" "b") 41463 . 41469) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_PROCESS))" 41470 . 41509)))
          ("sys_setjmp" (spp-arg-list ("j") 63204 . 63207) . ((symbol "sigsetjmp" 63208 . 63217) (semantic-list "(j, 0)" 63218 . 63224)))
          ("CHECK_NUMBER_COERCE_MARKER" (spp-arg-list ("x") 90292 . 90295) . 
              ((DO "do" 90304 . 90306) (semantic-list "{									\\
    if (MARKERP ((x)))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (INTEGERP (x), Qinteger_or_marker_p, x);		\\
  }" 90307 . 90481) (WHILE "while" 90482 . 90487) (semantic-list "(false)" 90488 . 90495)))
          ("INTEGER_TO_CONS" (spp-arg-list ("i") 104798 . 104801) . ((semantic-list "(! FIXNUM_OVERFLOW_P (i)					    \\
   ? make_number (i)						    \\
   : EXPR_SIGNED (i) ? intbig_to_lisp (i) : uintbig_to_lisp (i))" 104814 . 104945)))
          ("USE_SAFE_ALLOCA" . 
              ((symbol "ptrdiff_t" 149147 . 149156) (symbol "sa_avail" 149157 . 149165) (punctuation "=" 149166 . 149167) (symbol "MAX_ALLOCA" 149168 . 149178) (punctuation ";" 149178 . 149179) (symbol "ptrdiff_t" 149184 . 149193) (symbol "sa_count" 149194 . 149202) (punctuation "=" 149203 . 149204) (symbol "SPECPDL_INDEX" 149205 . 149218) (semantic-list "()" 149219 . 149221) (punctuation ";" 149221 . 149222) (BOOL "bool" 149223 . 149227) (symbol "sa_must_free" 149228 . 149240) (punctuation "=" 149241 . 149242) (symbol "false" 149243 . 149248)))
          ("EMACS_INT_MAX" . ((symbol "LLONG_MAX" 3225 . 3234)))
          ("VAL_MAX" . ((semantic-list "(EMACS_INT_MAX >> (GCTYPEBITS - 1))" 9319 . 9354)))
          ("lisp_h_MISCP" (spp-arg-list ("x") 13353 . 13356) . ((semantic-list "(XTYPE (x) == Lisp_Misc)" 13357 . 13381)))
          ("LISP_INITIALLY" (spp-arg-list ("w") 23532 . 23535) . ((semantic-list "(w)" 23536 . 23539)))
          ("DEFUN_ARGS_7" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object)" 28654 . 28751)))
          ("MOST_POSITIVE_FIXNUM" . ((semantic-list "(EMACS_INT_MAX >> INTTYPEBITS)" 37037 . 37067)))
          ("USE_STACK_LISP_OBJECTS" . ((symbol "false" 152304 . 152309)))
          ("lisp_h_XCONS" (spp-arg-list ("a") 14049 . 14052) . ((semantic-list "(eassert (CONSP (a)), (struct Lisp_Cons *) XUNTAG (a, Lisp_Cons))" 14058 . 14123)))
          ("lisp_h_XHASH" (spp-arg-list ("a") 14144 . 14147) . ((symbol "XUINT" 14148 . 14153) (semantic-list "(a)" 14154 . 14157)))
          ("DEFUN_ARGS_8" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 28773 . 28883)))
          ("XSETINT" (spp-arg-list ("a" "b") 40065 . 40071) . ((semantic-list "((a) = make_number (b))" 40072 . 40095)))
          ("XSETMISC" (spp-arg-list ("a" "b") 40470 . 40476) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Misc))" 40477 . 40513)))
          ("XSETPSEUDOVECTOR" (spp-arg-list ("a" "b" "code") 40979 . 40991) . ((symbol "XSETTYPED_PSEUDOVECTOR" 40996 . 41018) (semantic-list "(a, b,					\\
			  (((union vectorlike_header *)	\\
			    XUNTAG (a, Lisp_Vectorlike))	\\
			   ->size),				\\
			  code)" 41019 . 41137)))
          ("XSETSUBR" (spp-arg-list ("a" "b") 41658 . 41664) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUBR))" 41665 . 41701)))
          ("STRING_BYTES_BOUND" . ((semantic-list "((ptrdiff_t) min (MOST_POSITIVE_FIXNUM, min (SIZE_MAX, PTRDIFF_MAX) - 1))" 46832 . 46905)))
          ("_UCHAR_T")
          ("CALLN" (spp-arg-list ("f" "...") 93700 . 93708) . ((symbol "CALLMANY" 93709 . 93717) (semantic-list "(f, ((Lisp_Object []) {__VA_ARGS__}))" 93718 . 93755)))
          ("XSETFLOAT" (spp-arg-list ("a" "b") 40409 . 40415) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Float))" 40416 . 40453)))
          ("XSETPVECTYPE" (spp-arg-list ("v" "code") 40563 . 40572) . ((semantic-list "((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 40582 . 40658)))
          ("XSETTYPED_PSEUDOVECTOR" (spp-arg-list ("a" "b" "size" "code") 41168 . 41186) . ((semantic-list "(XSETVECTOR (a, b),							\\
   eassert ((size & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))		\\
	    == (PSEUDOVECTOR_FLAG | (code << PSEUDOVECTOR_AREA_BITS))))" 41193 . 41346)))
          ("XSETWINDOW" (spp-arg-list ("a" "b") 41528 . 41534) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW))" 41535 . 41573)))
          ("XSETBOOL_VECTOR" (spp-arg-list ("a" "b") 41929 . 41935) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BOOL_VECTOR))" 41936 . 41979)))
          ("XSETTHREAD" (spp-arg-list ("a" "b") 42078 . 42084) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_THREAD))" 42085 . 42123)))
          ("XSETMUTEX" (spp-arg-list ("a" "b") 42141 . 42147) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_MUTEX))" 42148 . 42185)))
          ("DEFVAR_LISP" (spp-arg-list ("lname" "vname" "doc") 94911 . 94930) . 
              ((DO "do" 94936 . 94938) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp (&o_fwd, lname, &globals.f_ ## vname);		\\
  }" 94939 . 95049) (WHILE "while" 95050 . 95055) (semantic-list "(false)" 95056 . 95063)))
          ("SAFE_ALLOCA_STRING" (spp-arg-list ("ptr" "string") 150204 . 150217) . 
              ((DO "do" 150224 . 150226) (semantic-list "{							\\
    (ptr) = SAFE_ALLOCA (SBYTES (string) + 1);		\\
    memcpy (ptr, SDATA (string), SBYTES (string) + 1);	\\
  }" 150227 . 150347) (WHILE "while" 150348 . 150353) (semantic-list "(false)" 150354 . 150361)))
          ("DECLARE_GDB_SYM" (spp-arg-list ("type" "id") 1508 . 1518) . 
              ((symbol "type" 1519 . 1523) (CONST "const" 1524 . 1529) (symbol "id" 1530 . 1532) (symbol "EXTERNALLY_VISIBLE" 1533 . 1551)))
          ("GCTYPEBITS" . ((number "3" 2162 . 2163)))
          ("lisp_h_CHECK_TYPE" (spp-arg-list ("ok" "predicate" "x") 12953 . 12971) . ((semantic-list "((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 12977 . 13031)))
          ("lisp_h_SYMBOL_VAL" (spp-arg-list ("sym") 13745 . 13750) . ((semantic-list "(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 13756 . 13828)))
          ("EXFUN" (spp-arg-list ("fnname" "maxargs") 27912 . 27929) . 
              ((EXTERN "extern" 27934 . 27940) (symbol "Lisp_Object" 27941 . 27952) (symbol "fnname" 27953 . 27959) (spp-symbol-merge ((symbol "DEFUN_ARGS_" 27960 . 27971) (symbol "maxargs" 27975 . 27982)) 27960 . 27982)))
          ("XSETSTRING" (spp-arg-list ("a" "b") 40292 . 40298) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_String))" 40299 . 40337)))
          ("XSETCONDVAR" (spp-arg-list ("a" "b") 42205 . 42211) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CONDVAR))" 42212 . 42251)))
          ("CONS_TO_INTEGER" (spp-arg-list ("cons" "type" "var") 105269 . 105286) . ((semantic-list "(TYPE_SIGNED (type)							\\
  ? ((var) = cons_to_signed (cons, TYPE_MINIMUM (type), TYPE_MAXIMUM (type))) \\
  : ((var) = cons_to_unsigned (cons, TYPE_MAXIMUM (type))))" 105293 . 105460)))
          ("AVAIL_ALLOCA" (spp-arg-list ("size") 149270 . 149276) . ((semantic-list "(sa_avail -= (size), alloca (size))" 149277 . 149312)))
          ("SAFE_ALLOCA_LISP_EXTRA" (spp-arg-list ("buf" "nelt" "extra") 150738 . 150756) . 
              ((DO "do" 150768 . 150770) (semantic-list "{							       \\
    ptrdiff_t alloca_nbytes;				       \\
    if (INT_MULTIPLY_WRAPV (nelt, word_size, &alloca_nbytes)   \\
	|| INT_ADD_WRAPV (alloca_nbytes, extra, &alloca_nbytes) \\
	|| SIZE_MAX < alloca_nbytes)			       \\
      memory_full (SIZE_MAX);				       \\
    else if (alloca_nbytes <= sa_avail)			       \\
      (buf) = AVAIL_ALLOCA (alloca_nbytes);		       \\
    else						       \\
      {							       \\
	Lisp_Object arg_;				       \\
	(buf) = xmalloc (alloca_nbytes);		       \\
	arg_ = make_save_memory (buf, nelt);		       \\
	sa_must_free = true;				       \\
	record_unwind_protect (free_save_value, arg_);	       \\
      }							       \\
  }" 150771 . 151427) (WHILE "while" 151428 . 151433) (semantic-list "(false)" 151434 . 151441)))
          ("STACK_CONS" (spp-arg-list ("a" "b") 153146 . 153152) . ((symbol "make_lisp_ptr" 153157 . 153170) (semantic-list "(&((struct Lisp_Cons) {{{a, {b}}}}), Lisp_Cons)" 153171 . 153218)))
          ("BOOL_VECTOR_BITS_PER_CHAR" . ((number "8" 4071 . 4072)))
          ("lisp_h_XIL" (spp-arg-list ("i") 12238 . 12241) . ((semantic-list "(i)" 12242 . 12245)))
          ("lisp_h_XLP" (spp-arg-list ("o") 12266 . 12269) . ((semantic-list "((void *) (uintptr_t) (o))" 12270 . 12296)))
          ("lisp_h_FLOATP" (spp-arg-list ("x") 13147 . 13150) . ((semantic-list "(XTYPE (x) == Lisp_Float)" 13151 . 13176)))
          ("lisp_h_XCDR" (spp-arg-list ("c") 14004 . 14007) . 
              ((symbol "XCONS" 14008 . 14013) (semantic-list "(c)" 14014 . 14017) (punctuation "-" 14017 . 14018) (punctuation ">" 14018 . 14019) (symbol "u" 14019 . 14020) (punctuation "." 14020 . 14021) (symbol "s" 14021 . 14022) (punctuation "." 14022 . 14023) (symbol "u" 14023 . 14024) (punctuation "." 14024 . 14025) (symbol "cdr" 14025 . 14028)))
          ("INTMASK" . ((semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 17212 . 17248)))
          ("XSETFASTINT" (spp-arg-list ("a" "b") 40115 . 40121) . ((semantic-list "((a) = make_natnum (b))" 40122 . 40145)))
          ("XSETCHAR_TABLE" (spp-arg-list ("a" "b") 41856 . 41862) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CHAR_TABLE))" 41863 . 41905)))
          ("XSETSUB_CHAR_TABLE" (spp-arg-list ("a" "b") 42006 . 42012) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUB_CHAR_TABLE))" 42013 . 42059)))
          ("VECSIZE" (spp-arg-list ("type") 55260 . 55266) . ((semantic-list "((sizeof (type) - header_size + word_size - 1) / word_size)" 55276 . 55335)))
          ("ASCII_CHAR_P" (spp-arg-list ("c") 56237 . 56240) . ((symbol "UNSIGNED_CMP" 56241 . 56253) (semantic-list "(c, <, 0x80)" 56254 . 56266)))
          ("DEFVAR_LISP_NOPRO" (spp-arg-list ("lname" "vname" "doc") 95089 . 95108) . 
              ((DO "do" 95113 . 95115) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp_nopro (&o_fwd, lname, &globals.f_ ## vname);	\\
  }" 95116 . 95231) (WHILE "while" 95232 . 95237) (semantic-list "(false)" 95238 . 95245)))
          ("DEFVAR_BOOL" (spp-arg-list ("lname" "vname" "doc") 95265 . 95284) . 
              ((DO "do" 95290 . 95292) (semantic-list "{						\\
    static struct Lisp_Boolfwd b_fwd;		\\
    defvar_bool (&b_fwd, lname, &globals.f_ ## vname);		\\
  }" 95293 . 95404) (WHILE "while" 95405 . 95410) (semantic-list "(false)" 95411 . 95418)))
          ("AUTO_LIST1" (spp-arg-list ("name" "a") 153671 . 153680) . 
              ((symbol "Lisp_Object" 153690 . 153701) (symbol "name" 153702 . 153706) (punctuation "=" 153707 . 153708) (semantic-list "(USE_STACK_CONS ? STACK_CONS (a, Qnil) : list1 (a))" 153709 . 153760)))
          ("lisp_h_CONSP" (spp-arg-list ("x") 13052 . 13055) . ((semantic-list "(XTYPE (x) == Lisp_Cons)" 13056 . 13080)))
          ("lisp_h_NILP" (spp-arg-list ("x") 13401 . 13404) . ((symbol "EQ" 13405 . 13407) (semantic-list "(x, Qnil)" 13408 . 13417)))
          ("lisp_h_SET_SYMBOL_VAL" (spp-arg-list ("sym" "v") 13447 . 13455) . ((semantic-list "(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 13461 . 13545)))
          ("lisp_h_SYMBOL_CONSTANT_P" (spp-arg-list ("sym") 13578 . 13583) . ((semantic-list "(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 13589 . 13641)))
          ("lisp_h_SYMBOLP" (spp-arg-list ("x") 13851 . 13854) . ((semantic-list "(XTYPE (x) == Lisp_Symbol)" 13855 . 13881)))
          ("lisp_h_VECTORLIKEP" (spp-arg-list ("x") 13908 . 13911) . ((semantic-list "(XTYPE (x) == Lisp_Vectorlike)" 13912 . 13942)))
          ("DEFUN_ARGS_UNEVALLED" . ((semantic-list "(Lisp_Object)" 28174 . 28187)))
          ("XSETVECTOR" (spp-arg-list ("a" "b") 40224 . 40230) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 40231 . 40273)))
          ("CHECK_TYPE_RANGED_INTEGER" (spp-arg-list ("type" "x") 90021 . 90030) . 
              ((DO "do" 90035 . 90037) (semantic-list "{									\\
    if (TYPE_SIGNED (type))						\\
      CHECK_RANGED_INTEGER (x, TYPE_MINIMUM (type), TYPE_MAXIMUM (type)); \\
    else								\\
      CHECK_RANGED_INTEGER (x, 0, TYPE_MAXIMUM (type));			\\
  }" 90038 . 90242) (WHILE "while" 90243 . 90248) (semantic-list "(false)" 90249 . 90256)))
          ("IS_DAEMON" . ((semantic-list "(daemon_type != 0)" 138744 . 138762)))
          ("make_fixnum_or_float" (spp-arg-list ("val") 148783 . 148788) . ((semantic-list "(FIXNUM_OVERFLOW_P (val) ? make_float (val) : make_number (val))" 148794 . 148858)))
          ("SAFE_FREE" (spp-arg-list nil 150447 . 150449) . 
              ((DO "do" 150456 . 150458) (semantic-list "{					\\
    if (sa_must_free) {			\\
      sa_must_free = false;		\\
      unbind_to (sa_count, Qnil);	\\
    }					\\
  }" 150459 . 150577) (WHILE "while" 150578 . 150583) (semantic-list "(false)" 150584 . 150591)))
          ("AUTO_CONS" (spp-arg-list ("name" "a" "b") 153599 . 153611) . 
              ((symbol "Lisp_Object" 153612 . 153623) (symbol "name" 153624 . 153628) (punctuation "=" 153629 . 153630) (symbol "AUTO_CONS_EXPR" 153631 . 153645) (semantic-list "(a, b)" 153646 . 153652)))
          ("AUTO_LIST2" (spp-arg-list ("name" "a" "b") 153779 . 153791) . 
              ((symbol "Lisp_Object" 153801 . 153812) (symbol "name" 153813 . 153817) (punctuation "=" 153818 . 153819) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, Qnil))		\\
		      : list2 (a, b))" 153820 . 153915)))
          ("AUTO_STRING_WITH_LEN" (spp-arg-list ("name" "str" "len") 155082 . 155098) . 
              ((symbol "Lisp_Object" 155106 . 155117) (symbol "name" 155118 . 155122) (punctuation "=" 155123 . 155124) (semantic-list "(USE_STACK_STRING							\\
     ? (make_lisp_ptr							\\
	((&(struct Lisp_String) {{{len, -1, 0, (unsigned char *) (str)}}}), \\
	 Lisp_String))							\\
     : make_unibyte_string (str, len))" 155137 . 155326)))
          ("FOR_EACH_TAIL_SAFE" (spp-arg-list ("tail") 155956 . 155962) . ((symbol "FOR_EACH_TAIL_INTERNAL" 155967 . 155989) (semantic-list "(tail, (void) ((tail) = Qnil), false)" 155990 . 156027)))
          ("FOR_EACH_ALIST_VALUE" (spp-arg-list ("head_var" "list_var" "value_var") 157396 . 157427) . ((FOR "for" 157433 . 157436) (semantic-list "((list_var) = (head_var);						\\
       (CONSP (list_var) && ((value_var) = XCDR (XCAR (list_var)), true)); \\
       (list_var) = XCDR (list_var))" 157437 . 157583)))
          )
)
    (semanticdb-table "semanticdb-table-1d2a3fc"
      :major-mode c-mode
      :tags 
        '( ("EMACS_CONFIG_H" variable (:constant-flag t) nil [1131 1145])
            ("AMPERSAND_FULL_NAME" variable (:constant-flag t) nil [1341 1360])
            ("COPYRIGHT" variable (:constant-flag t) nil [2275 2284])
            ("DEFAULT_SOUND_DEVICE" variable (:constant-flag t) nil [2760 2780])
            ("DIRECTORY_SEP" variable (:constant-flag t) nil [2932 2945])
            ("DIR_TO_FD" variable (:constant-flag t) nil [3133 3142])
            ("EMACS_CONFIGURATION" variable (:constant-flag t) nil [3730 3749])
            ("EMACS_CONFIG_FEATURES" variable (:constant-flag t) nil [3846 3867])
            ("EMACS_CONFIG_OPTIONS" variable (:constant-flag t) nil [4073 4093])
            ("FLEXIBLE_ARRAY_MEMBER" variable (:constant-flag t) nil [4962 4983])
            ("GCC_LINT" variable (:constant-flag t) nil [5598 5606])
            ("GC_SETJMP_WORKS" variable (:constant-flag t) nil [6335 6350])
            ("GETGROUPS_T" variable (:constant-flag t) nil [6583 6594])
            ("GETTIMEOFDAY_TIMEZONE" variable (:constant-flag t) nil [6960 6981])
            ("GNULIB_CLOSE_STREAM" variable (:constant-flag t) nil [7339 7358])
            ("GNULIB_FACCESSAT" variable (:constant-flag t) nil [7518 7534])
            ("GNULIB_FDOPENDIR" variable (:constant-flag t) nil [7694 7710])
            ("GNULIB_FSCANF" variable (:constant-flag t) nil [7867 7880])
            ("GNULIB_MKOSTEMP" variable (:constant-flag t) nil [8039 8054])
            ("GNULIB_PORTCHECK" variable (:constant-flag t) nil [8110 8126])
            ("GNULIB_SCANF" variable (:constant-flag t) nil [8716 8728])
            ("GNU_LINUX" variable (:constant-flag t) nil [8797 8806])
            ("HAVE_ACCEPT4" variable (:constant-flag t) nil [8963 8975])
            ("HAVE_ALIGNED_ALLOC" variable (:constant-flag t) nil [11271 11289])
            ("HAVE_ALLOCA" variable (:constant-flag t) nil [11423 11434])
            ("HAVE_ALLOCA_H" variable (:constant-flag t) nil [11529 11542])
            ("HAVE_BYTESWAP_H" variable (:constant-flag t) nil [11678 11693])
            ("HAVE_C99_STRTOLD" variable (:constant-flag t) nil [11751 11767])
            ("HAVE_CFMAKERAW" variable (:constant-flag t) nil [11835 11849])
            ("HAVE_CFSETSPEED" variable (:constant-flag t) nil [11918 11933])
            ("HAVE_CLOCK_GETTIME" variable (:constant-flag t) nil [12005 12023])
            ("HAVE_CLOCK_SETTIME" variable (:constant-flag t) nil [12095 12113])
            ("HAVE_C_VARARRAYS" variable (:constant-flag t) nil [12351 12367])
            ("HAVE_DECL_ALARM" variable (:constant-flag t) nil [13288 13303])
            ("HAVE_DECL_ALIGNED_ALLOC" variable (:constant-flag t) nil [13407 13430])
            ("HAVE_DECL_CLEARERR_UNLOCKED" variable (:constant-flag t) nil [13538 13565])
            ("HAVE_DECL_FDATASYNC" variable (:constant-flag t) nil [13779 13798])
            ("HAVE_DECL_FDOPENDIR" variable (:constant-flag t) nil [13898 13917])
            ("HAVE_DECL_FEOF_UNLOCKED" variable (:constant-flag t) nil [14021 14044])
            ("HAVE_DECL_FERROR_UNLOCKED" variable (:constant-flag t) nil [14150 14175])
            ("HAVE_DECL_FFLUSH_UNLOCKED" variable (:constant-flag t) nil [14281 14306])
            ("HAVE_DECL_FGETS_UNLOCKED" variable (:constant-flag t) nil [14411 14435])
            ("HAVE_DECL_FPUTC_UNLOCKED" variable (:constant-flag t) nil [14540 14564])
            ("HAVE_DECL_FPUTS_UNLOCKED" variable (:constant-flag t) nil [14669 14693])
            ("HAVE_DECL_FREAD_UNLOCKED" variable (:constant-flag t) nil [14798 14822])
            ("HAVE_DECL_FWRITE_UNLOCKED" variable (:constant-flag t) nil [14928 14953])
            ("HAVE_DECL_GETCHAR_UNLOCKED" variable (:constant-flag t) nil [15060 15086])
            ("HAVE_DECL_GETC_UNLOCKED" variable (:constant-flag t) nil [15190 15213])
            ("HAVE_DECL_GETDTABLESIZE" variable (:constant-flag t) nil [15317 15340])
            ("HAVE_DECL_LOCALTIME_R" variable (:constant-flag t) nil [15442 15463])
            ("HAVE_DECL_MEMRCHR" variable (:constant-flag t) nil [15561 15578])
            ("HAVE_DECL_PUTCHAR_UNLOCKED" variable (:constant-flag t) nil [15685 15711])
            ("HAVE_DECL_PUTC_UNLOCKED" variable (:constant-flag t) nil [15815 15838])
            ("HAVE_DECL_STRMODE" variable (:constant-flag t) nil [15936 15953])
            ("HAVE_DECL_STRTOIMAX" variable (:constant-flag t) nil [16053 16072])
            ("HAVE_DECL_SYS_SIGLIST" variable (:constant-flag t) nil [16292 16313])
            ("HAVE_DECL___FPENDING" variable (:constant-flag t) nil [16648 16668])
            ("HAVE_DIRENT_H" variable (:constant-flag t) nil [16868 16881])
            ("HAVE_DLADDR" variable (:constant-flag t) nil [17023 17034])
            ("HAVE_DUP2" variable (:constant-flag t) nil [17176 17185])
            ("HAVE_ENDGRENT" variable (:constant-flag t) nil [17419 17432])
            ("HAVE_ENDPWENT" variable (:constant-flag t) nil [17499 17512])
            ("HAVE_ENVIRON_DECL" variable (:constant-flag t) nil [17577 17594])
            ("HAVE_EXECINFO_H" variable (:constant-flag t) nil [17753 17768])
            ("HAVE_EXPLICIT_BZERO" variable (:constant-flag t) nil [17841 17860])
            ("HAVE_FACCESSAT" variable (:constant-flag t) nil [18025 18039])
            ("HAVE_FCHDIR" variable (:constant-flag t) nil [18179 18190])
            ("HAVE_FCHMOD" variable (:constant-flag t) nil [18255 18266])
            ("HAVE_FCNTL" variable (:constant-flag t) nil [18330 18340])
            ("HAVE_FDOPENDIR" variable (:constant-flag t) nil [18493 18507])
            ("HAVE_FORK" variable (:constant-flag t) nil [18570 18579])
            ("HAVE_FREEIFADDRS" variable (:constant-flag t) nil [18649 18665])
            ("HAVE_FREETYPE" variable (:constant-flag t) nil [18743 18756])
            ("HAVE_FSEEKO" variable (:constant-flag t) nil [18844 18855])
            ("HAVE_FSTATAT" variable (:constant-flag t) nil [18921 18933])
            ("HAVE_FSYNC" variable (:constant-flag t) nil [18997 19007])
            ("HAVE_FUTIMENS" variable (:constant-flag t) nil [19074 19087])
            ("HAVE_FUTIMES" variable (:constant-flag t) nil [19153 19165])
            ("HAVE_FUTIMESAT" variable (:constant-flag t) nil [19233 19247])
            ("HAVE_GAI_STRERROR" variable (:constant-flag t) nil [19318 19335])
            ("HAVE_GETADDRINFO_A" variable (:constant-flag t) nil [19562 19580])
            ("HAVE_GETDTABLESIZE" variable (:constant-flag t) nil [19652 19670])
            ("HAVE_GETGRENT" variable (:constant-flag t) nil [19737 19750])
            ("HAVE_GETHOSTNAME" variable (:constant-flag t) nil [19918 19934])
            ("HAVE_GETIFADDRS" variable (:constant-flag t) nil [20003 20018])
            ("HAVE_GETOPT_H" variable (:constant-flag t) nil [20088 20101])
            ("HAVE_GETOPT_LONG_ONLY" variable (:constant-flag t) nil [20176 20197])
            ("HAVE_GETPAGESIZE" variable (:constant-flag t) nil [20267 20283])
            ("HAVE_GETPT" variable (:constant-flag t) nil [20347 20357])
            ("HAVE_GETPWENT" variable (:constant-flag t) nil [20424 20437])
            ("HAVE_GETRLIMIT" variable (:constant-flag t) nil [20505 20519])
            ("HAVE_GETRUSAGE" variable (:constant-flag t) nil [20587 20601])
            ("HAVE_GETSOCKNAME" variable (:constant-flag t) nil [20671 20687])
            ("HAVE_GETTIMEOFDAY" variable (:constant-flag t) nil [20758 20775])
            ("HAVE_GET_CURRENT_DIR_NAME" variable (:constant-flag t) nil [20854 20879])
            ("HAVE_GIF" variable (:constant-flag t) nil [21012 21020])
            ("HAVE_GLIB" variable (:constant-flag t) nil [21072 21081])
            ("HAVE_GNUTLS" variable (:constant-flag t) nil [21123 21134])
            ("HAVE_GRANTPT" variable (:constant-flag t) nil [21278 21290])
            ("HAVE_GSETTINGS" variable (:constant-flag t) nil [21340 21354])
            ("HAVE_GTK_ADJUSTMENT_GET_PAGE_SIZE" variable (:constant-flag t) nil [21508 21541])
            ("HAVE_GTK_DIALOG_GET_ACTION_AREA" variable (:constant-flag t) nil [21626 21657])
            ("HAVE_GTK_FILE_SELECTION_NEW" variable (:constant-flag t) nil [21738 21765])
            ("HAVE_GTK_HANDLE_BOX_NEW" variable (:constant-flag t) nil [21842 21865])
            ("HAVE_GTK_ORIENTABLE_SET_ORIENTATION" variable (:constant-flag t) nil [21954 21989])
            ("HAVE_GTK_TEAROFF_MENU_ITEM_NEW" variable (:constant-flag t) nil [22073 22103])
            ("HAVE_GTK_WIDGET_GET_MAPPED" variable (:constant-flag t) nil [22183 22209])
            ("HAVE_GTK_WIDGET_GET_SENSITIVE" variable (:constant-flag t) nil [22292 22321])
            ("HAVE_GTK_WIDGET_GET_WINDOW" variable (:constant-flag t) nil [22401 22427])
            ("HAVE_GTK_WIDGET_SET_HAS_WINDOW" variable (:constant-flag t) nil [22511 22541])
            ("HAVE_IFADDRS_H" variable (:constant-flag t) nil [22739 22753])
            ("HAVE_INET_SOCKETS" variable (:constant-flag t) nil [22880 22897])
            ("HAVE_INOTIFY" variable (:constant-flag t) nil [22943 22955])
            ("HAVE_INTTYPES_H" variable (:constant-flag t) nil [23027 23042])
            ("HAVE_JPEG" variable (:constant-flag t) nil [23121 23130])
            ("HAVE_JSON" variable (:constant-flag t) nil [23173 23182])
            ("HAVE_LANGINFO_CODESET" variable (:constant-flag t) nil [23867 23888])
            ("HAVE_LCMS2" variable (:constant-flag t) nil [23959 23969])
            ("HAVE_LIBXML2" variable (:constant-flag t) nil [24771 24783])
            ("HAVE_LIMITS_H" variable (:constant-flag t) nil [24853 24866])
            ("HAVE_LINUX_FS_H" variable (:constant-flag t) nil [24938 24953])
            ("HAVE_LINUX_SYSINFO" variable (:constant-flag t) nil [25019 25037])
            ("HAVE_LOCALTIME_R" variable (:constant-flag t) nil [25231 25247])
            ("HAVE_LOG2" variable (:constant-flag t) nil [25310 25319])
            ("HAVE_LONG_LONG_INT" variable (:constant-flag t) nil [25393 25411])
            ("HAVE_LRAND48" variable (:constant-flag t) nil [25477 25489])
            ("HAVE_LSTAT" variable (:constant-flag t) nil [25553 25563])
            ("HAVE_LUTIMES" variable (:constant-flag t) nil [25629 25641])
            ("HAVE_MALLOC_H" variable (:constant-flag t) nil [26513 26526])
            ("HAVE_MBSTATE_T" variable (:constant-flag t) nil [26689 26703])
            ("HAVE_MEMORY_H" variable (:constant-flag t) nil [26773 26786])
            ("HAVE_MEMRCHR" variable (:constant-flag t) nil [26852 26864])
            ("HAVE_MINMAX_IN_SYS_PARAM_H" variable (:constant-flag t) nil [27045 27071])
            ("HAVE_MKOSTEMP" variable (:constant-flag t) nil [27138 27151])
            ("HAVE_MMAP" variable (:constant-flag t) nil [27223 27232])
            ("HAVE_MODULES" variable (:constant-flag t) nil [27383 27395])
            ("HAVE_NET_IF_H" variable (:constant-flag t) nil [27640 27653])
            ("HAVE_NEWLOCALE" variable (:constant-flag t) nil [27721 27735])
            ("HAVE_PERSONALITY_ADDR_NO_RANDOMIZE" variable (:constant-flag t) nil [28286 28320])
            ("HAVE_PIPE2" variable (:constant-flag t) nil [28384 28394])
            ("HAVE_PNG" variable (:constant-flag t) nil [28453 28461])
            ("HAVE_POSIX_OPENPT" variable (:constant-flag t) nil [28627 28644])
            ("HAVE_PRCTL" variable (:constant-flag t) nil [28708 28718])
            ("HAVE_PROCFS" variable (:constant-flag t) nil [28777 28788])
            ("HAVE_PSELECT" variable (:constant-flag t) nil [28854 28866])
            ("HAVE_PTHREAD" variable (:constant-flag t) nil [29022 29034])
            ("HAVE_PTHREAD_H" variable (:constant-flag t) nil [29105 29119])
            ("HAVE_PTHREAD_SIGMASK" variable (:constant-flag t) nil [29209 29229])
            ("HAVE_PTYS" variable (:constant-flag t) nil [29290 29299])
            ("HAVE_PTY_H" variable (:constant-flag t) nil [29366 29376])
            ("HAVE_PUTENV" variable (:constant-flag t) nil [29441 29452])
            ("HAVE_PWD_H" variable (:constant-flag t) nil [29519 29529])
            ("HAVE_RANDOM" variable (:constant-flag t) nil [29594 29605])
            ("HAVE_READLINK" variable (:constant-flag t) nil [29672 29685])
            ("HAVE_READLINKAT" variable (:constant-flag t) nil [29754 29769])
            ("HAVE_RECVFROM" variable (:constant-flag t) nil [29836 29849])
            ("HAVE_RINT" variable (:constant-flag t) nil [29912 29921])
            ("HAVE_RSVG" variable (:constant-flag t) nil [29969 29978])
            ("HAVE_SBRK" variable (:constant-flag t) nil [30041 30050])
            ("HAVE_SELECT" variable (:constant-flag t) nil [30115 30126])
            ("HAVE_SENDTO" variable (:constant-flag t) nil [30191 30202])
            ("HAVE_SETITIMER" variable (:constant-flag t) nil [30363 30377])
            ("HAVE_SETLOCALE" variable (:constant-flag t) nil [30445 30459])
            ("HAVE_SETRLIMIT" variable (:constant-flag t) nil [30527 30541])
            ("HAVE_SHUTDOWN" variable (:constant-flag t) nil [30608 30621])
            ("HAVE_SIGSETJMP" variable (:constant-flag t) nil [31047 31061])
            ("HAVE_SIGSET_T" variable (:constant-flag t) nil [31130 31143])
            ("HAVE_SNPRINTF" variable (:constant-flag t) nil [31210 31223])
            ("HAVE_SOCKETS" variable (:constant-flag t) nil [31295 31307])
            ("HAVE_SOUND" variable (:constant-flag t) nil [31364 31374])
            ("HAVE_STACK_OVERFLOW_HANDLING" variable (:constant-flag t) nil [31546 31574])
            ("HAVE_STDINT_H" variable (:constant-flag t) nil [31725 31738])
            ("HAVE_STDIO_EXT_H" variable (:constant-flag t) nil [31811 31827])
            ("HAVE_STDLIB_H" variable (:constant-flag t) nil [31897 31910])
            ("HAVE_STPCPY" variable (:constant-flag t) nil [31975 31986])
            ("HAVE_STRINGS_H" variable (:constant-flag t) nil [32057 32071])
            ("HAVE_STRING_H" variable (:constant-flag t) nil [32141 32154])
            ("HAVE_STRSIGNAL" variable (:constant-flag t) nil [32222 32236])
            ("HAVE_STRTOIMAX" variable (:constant-flag t) nil [32304 32318])
            ("HAVE_STRUCT_DIRENT_D_TYPE" variable (:constant-flag t) nil [32505 32530])
            ("HAVE_STRUCT_IFREQ_IFR_ADDR" variable (:constant-flag t) nil [32605 32631])
            ("HAVE_STRUCT_IFREQ_IFR_BROADADDR" variable (:constant-flag t) nil [32829 32860])
            ("HAVE_STRUCT_IFREQ_IFR_FLAGS" variable (:constant-flag t) nil [32936 32963])
            ("HAVE_STRUCT_IFREQ_IFR_HWADDR" variable (:constant-flag t) nil [33040 33068])
            ("HAVE_STRUCT_IFREQ_IFR_NETMASK" variable (:constant-flag t) nil [33146 33175])
            ("HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC" variable (:constant-flag t) nil [33734 33766])
            ("HAVE_STRUCT_TM_TM_ZONE" variable (:constant-flag t) nil [34213 34235])
            ("HAVE_STRUCT_UNIPAIR_UNICODE" variable (:constant-flag t) nil [34311 34338])
            ("HAVE_SYMLINK" variable (:constant-flag t) nil [34488 34500])
            ("HAVE_SYNC" variable (:constant-flag t) nil [34563 34572])
            ("HAVE_SYS_CDEFS_H" variable (:constant-flag t) nil [34829 34845])
            ("HAVE_SYS_MOUNT_H" variable (:constant-flag t) nil [35312 35328])
            ("HAVE_SYS_PARAM_H" variable (:constant-flag t) nil [35401 35417])
            ("HAVE_SYS_PRCTL_H" variable (:constant-flag t) nil [35490 35506])
            ("HAVE_SYS_RESOURCE_H" variable (:constant-flag t) nil [35582 35601])
            ("HAVE_SYS_SELECT_H" variable (:constant-flag t) nil [35675 35692])
            ("HAVE_SYS_SOCKET_H" variable (:constant-flag t) nil [35766 35783])
            ("HAVE_SYS_SOUNDCARD_H" variable (:constant-flag t) nil [35860 35880])
            ("HAVE_SYS_STATFS_H" variable (:constant-flag t) nil [35954 35971])
            ("HAVE_SYS_STAT_H" variable (:constant-flag t) nil [36043 36058])
            ("HAVE_SYS_SYSINFO_H" variable (:constant-flag t) nil [36133 36151])
            ("HAVE_SYS_TIME_H" variable (:constant-flag t) nil [36325 36340])
            ("HAVE_SYS_TYPES_H" variable (:constant-flag t) nil [36413 36429])
            ("HAVE_SYS_UN_H" variable (:constant-flag t) nil [36499 36512])
            ("HAVE_SYS_UTSNAME_H" variable (:constant-flag t) nil [36587 36605])
            ("HAVE_SYS_VFS_H" variable (:constant-flag t) nil [36676 36690])
            ("HAVE_SYS_WAIT_H" variable (:constant-flag t) nil [36867 36882])
            ("HAVE_TERM_H" variable (:constant-flag t) nil [36950 36961])
            ("HAVE_TIFF" variable (:constant-flag t) nil [37030 37039])
            ("HAVE_TIMEGM" variable (:constant-flag t) nil [37104 37115])
            ("HAVE_TIMERFD" variable (:constant-flag t) nil [37197 37209])
            ("HAVE_TIMER_SETTIME" variable (:constant-flag t) nil [37281 37299])
            ("HAVE_TM_GMTOFF" variable (:constant-flag t) nil [37452 37466])
            ("HAVE_TM_ZONE" variable (:constant-flag t) nil [37584 37596])
            ("HAVE_TRUNC" variable (:constant-flag t) nil [37745 37755])
            ("HAVE_TZSET" variable (:constant-flag t) nil [37935 37945])
            ("HAVE_UNISTD_H" variable (:constant-flag t) nil [38015 38028])
            ("HAVE_UNSIGNED_LONG_LONG_INT" variable (:constant-flag t) nil [38111 38138])
            ("HAVE_UTIMENSAT" variable (:constant-flag t) nil [38288 38302])
            ("HAVE_UTMP_H" variable (:constant-flag t) nil [38370 38381])
            ("HAVE_VFORK" variable (:constant-flag t) nil [38553 38563])
            ("HAVE_WCHAR_H" variable (:constant-flag t) nil [38781 38793])
            ("HAVE_WCHAR_T" variable (:constant-flag t) nil [38850 38862])
            ("HAVE_WINDOW_SYSTEM" variable (:constant-flag t) nil [38916 38934])
            ("HAVE_WORKING_FORK" variable (:constant-flag t) nil [39071 39088])
            ("HAVE_WORKING_UTIMES" variable (:constant-flag t) nil [39274 39293])
            ("HAVE_WORKING_VFORK" variable (:constant-flag t) nil [39341 39359])
            ("HAVE_X11" variable (:constant-flag t) nil [39523 39531])
            ("HAVE_X11R6" variable (:constant-flag t) nil [39609 39619])
            ("HAVE_X11R6_XIM" variable (:constant-flag t) nil [39688 39702])
            ("HAVE_XDBE" variable (:constant-flag t) nil [39939 39948])
            ("HAVE_XFIXES" variable (:constant-flag t) nil [40012 40023])
            ("HAVE_XFT" variable (:constant-flag t) nil [40082 40090])
            ("HAVE_XIM" variable (:constant-flag t) nil [40140 40148])
            ("HAVE_XINERAMA" variable (:constant-flag t) nil [40214 40227])
            ("HAVE_XKB" variable (:constant-flag t) nil [40288 40296])
            ("HAVE_XPM" variable (:constant-flag t) nil [40363 40371])
            ("HAVE_XRANDR" variable (:constant-flag t) nil [40435 40446])
            ("HAVE_XRMSETDATABASE" variable (:constant-flag t) nil [40519 40538])
            ("HAVE_XSCREENNUMBEROFSCREEN" variable (:constant-flag t) nil [40618 40644])
            ("HAVE_XSCREENRESOURCESTRING" variable (:constant-flag t) nil [40724 40750])
            ("HAVE_X_I18N" variable (:constant-flag t) nil [40884 40895])
            ("HAVE_X_SM" variable (:constant-flag t) nil [40960 40969])
            ("HAVE_X_WINDOWS" variable (:constant-flag t) nil [41039 41053])
            ("HAVE_ZLIB" variable (:constant-flag t) nil [41119 41128])
            ("HAVE__SETJMP" variable (:constant-flag t) nil [41188 41200])
            ("HAVE___BUILTIN_FRAME_ADDRESS" variable (:constant-flag t) nil [41282 41310])
            ("HAVE___BUILTIN_UNWIND_INIT" variable (:constant-flag t) nil [41390 41416])
            ("HAVE___EXECUTABLE_START" variable (:constant-flag t) nil [41493 41516])
            ("HYBRID_MALLOC" variable (:constant-flag t) nil [41748 41761])
            ("INTERRUPT_INPUT" variable (:constant-flag t) nil [41897 41912])
            ("IS_ANY_SEP" variable (:constant-flag t) nil [41982 41992])
            ("IS_DEVICE_SEP" variable (:constant-flag t) nil [42087 42100])
            ("IS_DIRECTORY_SEP" variable (:constant-flag t) nil [42175 42191])
            ("LINUX_SYSINFO_UNIT" variable (:constant-flag t) nil [42476 42494])
            ("LSTAT_FOLLOWS_SLASHED_SYMLINK" variable (:constant-flag t) nil [42594 42623])
            ("__USE_MINGW_ANSI_STDIO" variable (:constant-flag t) nil [43137 43159])
            ("MODULES_SUFFIX" variable (:constant-flag t) nil [43224 43238])
            ("NARROWPROTO" variable (:constant-flag t) nil [43403 43414])
            ("NULL_DEVICE" variable (:constant-flag t) nil [44330 44341])
            ("PACKAGE_BUGREPORT" variable (:constant-flag t) nil [44632 44649])
            ("PACKAGE_NAME" variable (:constant-flag t) nil [44730 44742])
            ("PACKAGE_STRING" variable (:constant-flag t) nil [44823 44837])
            ("PACKAGE_TARNAME" variable (:constant-flag t) nil [44926 44941])
            ("PACKAGE_URL" variable (:constant-flag t) nil [45007 45018])
            ("PACKAGE_VERSION" variable (:constant-flag t) nil [45111 45126])
            ("POLL_FOR_INPUT" variable (:constant-flag t) nil [45390 45404])
            ("PROMOTED_MODE_T" variable (:constant-flag t) nil [45510 45525])
            ("PTY_ITERATION" variable (:constant-flag t) nil [46051 46064])
            ("PTY_NAME_SPRINTF" variable (:constant-flag t) nil [46184 46200])
            ("PTY_OPEN" variable (:constant-flag t) nil [46257 46265])
            ("PTY_TTY_NAME_SPRINTF" variable (:constant-flag t) nil [46488 46508])
            ("SEPCHAR" variable (:constant-flag t) nil [47315 47322])
            ("SIGNALS_VIA_CHARACTERS" variable (:constant-flag t) nil [47489 47511])
            ("STAT_STATFS2_FRSIZE" variable (:constant-flag t) nil [48856 48875])
            ("STAT_STATVFS" variable (:constant-flag t) nil [49412 49424])
            ("STDC_HEADERS" variable (:constant-flag t) nil [49580 49592])
            ("SYSTEM_TYPE" variable (:constant-flag t) nil [49851 49862])
            ("TERMINFO" variable (:constant-flag t) nil [50022 50030])
            ("TERM_HEADER" variable (:constant-flag t) nil [50101 50112])
            ("THREADS_ENABLED" variable (:constant-flag t) nil [50186 50201])
            ("TIME_T_IS_SIGNED" variable (:constant-flag t) nil [50252 50268])
            ("TIME_WITH_SYS_TIME" variable (:constant-flag t) nil [50356 50374])
            ("TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC" variable (:constant-flag t) nil [50630 50675])
            ("UNIX98_PTYS" variable (:constant-flag t) nil [50910 50921])
            ("USABLE_FIONREAD" variable (:constant-flag t) nil [50974 50989])
            ("USABLE_SIGIO" variable (:constant-flag t) nil [51039 51051])
            ("USER_FULL_NAME" variable (:constant-flag t) nil [51100 51114])
            ("USE_ACL" variable (:constant-flag t) nil [51202 51209])
            ("USE_CAIRO" variable (:constant-flag t) nil [51255 51264])
            ("USE_FILE_NOTIFY" variable (:constant-flag t) nil [51323 51338])
            ("USE_GTK" variable (:constant-flag t) nil [51382 51389])
            ("_ALL_SOURCE" variable (:constant-flag t) nil [51759 51770])
            ("_DARWIN_C_SOURCE" variable (:constant-flag t) nil [51857 51873])
            ("_NETBSD_SOURCE" variable (:constant-flag t) nil [52064 52078])
            ("_OPENBSD_SOURCE" variable (:constant-flag t) nil [52165 52180])
            ("_POSIX_PTHREAD_SEMANTICS" variable (:constant-flag t) nil [52279 52303])
            ("__STDC_WANT_IEC_60559_ATTRIBS_EXT__" variable (:constant-flag t) nil [52429 52464])
            ("__STDC_WANT_IEC_60559_BFP_EXT__" variable (:constant-flag t) nil [52586 52617])
            ("__STDC_WANT_IEC_60559_DFP_EXT__" variable (:constant-flag t) nil [52739 52770])
            ("__STDC_WANT_IEC_60559_FUNCS_EXT__" variable (:constant-flag t) nil [52894 52927])
            ("__STDC_WANT_IEC_60559_TYPES_EXT__" variable (:constant-flag t) nil [53051 53084])
            ("__STDC_WANT_LIB_EXT2__" variable (:constant-flag t) nil [53197 53219])
            ("__STDC_WANT_MATH_SPEC_FUNCS__" variable (:constant-flag t) nil [53334 53363])
            ("_TANDEM_SOURCE" variable (:constant-flag t) nil [53445 53459])
            ("_HPUX_ALT_XOPEN_SOCKET_API" variable (:constant-flag t) nil [53863 53889])
            ("__EXTENSIONS__" variable (:constant-flag t) nil [53976 53990])
            ("USE_TOOLKIT_SCROLL_BARS" variable (:constant-flag t) nil [54066 54089])
            ("USE_UNLOCKED_IO" variable (:constant-flag t) nil [54282 54297])
            ("USE_XIM" variable (:constant-flag t) nil [54491 54498])
            ("USG" variable (:constant-flag t) nil [54637 54640])
            ("XRegisterIMInstantiateCallback_arg6" variable (:constant-flag t) nil [55919 55954])
            ("_DARWIN_USE_64_BIT_INODE" variable (:constant-flag t) nil [56155 56179])
            ("_NETBSD_SOURCE" variable (:constant-flag t) nil [56686 56700])
            ("_USE_STD_STAT" variable (:constant-flag t) nil [57673 57686])
            ("_GL_INLINE" variable (:constant-flag t) nil [60951 60961])
            ("_GL_EXTERN_INLINE" variable (:constant-flag t) nil [60993 61010])
            ("_GL_EXTERN_INLINE_IN_USE" variable (:constant-flag t) nil [61027 61051])
            ("_GL_INLINE_HEADER_BEGIN" variable (:constant-flag t) nil [62070 62093])
            ("_GL_INLINE_HEADER_END" variable (:constant-flag t) nil [62103 62124])
            ("my_strftime" variable (:constant-flag t) nil [63031 63042])
            ("restrict" variable (:constant-flag t) nil [63388 63396])
            ("subprocesses" variable (:constant-flag t) nil [64082 64094])
            ("_GL_UNUSED" variable (:constant-flag t) nil [64331 64341])
            ("_UNUSED_PARAMETER_" variable (:constant-flag t) nil [64534 64552])
            ("_GL_UNUSED_LABEL" variable (:constant-flag t) nil [64855 64871])
            ("_GL_ATTRIBUTE_PURE" variable (:constant-flag t) nil [65045 65063])
            ("_GL_ATTRIBUTE_CONST" variable (:constant-flag t) nil [65268 65287])
            ("_GL_ATTRIBUTE_MALLOC" variable (:constant-flag t) nil [65450 65470])
            ("conf_post.h" include (:system-flag t) nil [65626 65648]))          
      :file "config.h"
      :pointmax 65716
      :fsize 65715
      :lastmodtime '(23311 28002 785807 611000)
      :unmatched-syntax '((close-paren 64844 . 64845) (number 64843 . 64844) (punctuation 64841 . 64842) (punctuation 64840 . 64841) (symbol "3" 64825 . 64839) (punctuation 64823 . 64824) (punctuation 64822 . 64823) (number 64820 . 64821) (punctuation 64818 . 64819) (punctuation 64817 . 64818) (symbol "7" 64808 . 64816) (open-paren 64807 . 64808) (punctuation 64805 . 64806) (punctuation 64804 . 64805) (close-paren 60750 . 60751) (symbol 60719 . 60750) (symbol 60711 . 60718) (punctuation 60710 . 60711) (punctuation 60708 . 60709) (punctuation 60707 . 60708))
      :lexical-table 
        '(("DIRECTORY_SEP" . ((string "'/'" 2946 . 2949)))
          ("GNU_LINUX")
          ("HAVE_DECL_FGETS_UNLOCKED" . ((number "1" 14436 . 14437)))
          ("HAVE_FCNTL" . ((number "1" 18341 . 18342)))
          ("HAVE_FSTATAT" . ((number "1" 18934 . 18935)))
          ("HAVE_FUTIMES" . ((number "1" 19166 . 19167)))
          ("HAVE_GTK_FILE_SELECTION_NEW" . ((number "1" 21766 . 21767)))
          ("HAVE_GTK_WIDGET_SET_HAS_WINDOW" . ((number "1" 22542 . 22543)))
          ("HAVE_INOTIFY" . ((number "1" 22956 . 22957)))
          ("HAVE_LSTAT" . ((number "1" 25564 . 25565)))
          ("HAVE_MKOSTEMP" . ((number "1" 27152 . 27153)))
          ("HAVE_SOCKETS" . ((number "1" 31308 . 31309)))
          ("HAVE_STRUCT_IFREQ_IFR_ADDR" . ((number "1" 32632 . 32633)))
          ("HAVE_STRUCT_IFREQ_IFR_FLAGS" . ((number "1" 32964 . 32965)))
          ("HAVE_SYS_TYPES_H" . ((number "1" 36430 . 36431)))
          ("HAVE_WCHAR_T" . ((number "1" 38863 . 38864)))
          ("STAT_STATVFS" . ((number "1" 49425 . 49426)))
          ("STDC_HEADERS" . ((number "1" 49593 . 49594)))
          ("_USE_STD_STAT" . ((number "1" 57687 . 57688)))
          ("subprocesses" . ((number "1" 64095 . 64096)))
          ("AMPERSAND_FULL_NAME" . ((number "1" 1361 . 1362)))
          ("EMACS_CONFIG_OPTIONS" . ((string "\"--with-modules --with-cairo --with-mailutils\"" 4094 . 4140)))
          ("HAVE_ACCEPT4" . ((number "1" 8976 . 8977)))
          ("HAVE_DECL_PUTCHAR_UNLOCKED" . ((number "1" 15712 . 15713)))
          ("HAVE_DIRENT_H" . ((number "1" 16882 . 16883)))
          ("HAVE_DLADDR" . ((number "1" 17035 . 17036)))
          ("HAVE_FCHDIR" . ((number "1" 18191 . 18192)))
          ("HAVE_GTK_TEAROFF_MENU_ITEM_NEW" . ((number "1" 22104 . 22105)))
          ("HAVE_GTK_WIDGET_GET_SENSITIVE" . ((number "1" 22322 . 22323)))
          ("HAVE_IFADDRS_H" . ((number "1" 22754 . 22755)))
          ("HAVE_MBSTATE_T" . ((number "1" 26704 . 26705)))
          ("HAVE_SETLOCALE" . ((number "1" 30460 . 30461)))
          ("HAVE_STPCPY" . ((number "1" 31987 . 31988)))
          ("HAVE_STRUCT_UNIPAIR_UNICODE" . ((number "1" 34339 . 34340)))
          ("HAVE_SYMLINK" . ((number "1" 34501 . 34502)))
          ("HAVE_SYS_MOUNT_H" . ((number "1" 35329 . 35330)))
          ("HAVE_SYS_PARAM_H" . ((number "1" 35418 . 35419)))
          ("HAVE_SYS_STAT_H" . ((number "1" 36059 . 36060)))
          ("HAVE_SYS_SYSINFO_H" . ((number "1" 36152 . 36153)))
          ("HAVE_SYS_WAIT_H" . ((number "1" 36883 . 36884)))
          ("HAVE_VFORK" . ((number "1" 38564 . 38565)))
          ("HAVE_WCHAR_H" . ((number "1" 38794 . 38795)))
          ("HAVE_WINDOW_SYSTEM" . ((number "1" 38935 . 38936)))
          ("HAVE_WORKING_FORK" . ((number "1" 39089 . 39090)))
          ("HAVE_XIM" . ((number "1" 40149 . 40150)))
          ("HAVE___BUILTIN_UNWIND_INIT" . ((number "1" 41417 . 41418)))
          ("LSTAT_FOLLOWS_SLASHED_SYMLINK" . ((number "1" 42624 . 42625)))
          ("PACKAGE_TARNAME" . ((string "\"emacs\"" 44942 . 44949)))
          ("PACKAGE_VERSION" . ((string "\"27.0.50\"" 45127 . 45136)))
          ("POLL_FOR_INPUT" . ((number "1" 45405 . 45406)))
          ("PROMOTED_MODE_T" . ((symbol "mode_t" 45526 . 45532)))
          ("PTY_NAME_SPRINTF")
          ("TERMINFO" . ((number "1" 50031 . 50032)))
          ("USABLE_FIONREAD" . ((number "1" 50990 . 50991)))
          ("USE_CAIRO" . ((number "1" 51265 . 51266)))
          ("__STDC_WANT_LIB_EXT2__" . ((number "1" 53220 . 53221)))
          ("_DARWIN_USE_64_BIT_INODE" . ((number "1" 56180 . 56181)))
          ("_GL_ATTRIBUTE_PURE" . ((symbol "__attribute__" 65064 . 65077) (semantic-list "((__pure__))" 65078 . 65090)))
          ("COPYRIGHT" . ((string "\"Copyright (C) 2018 Free Software Foundation, Inc.\"" 2285 . 2336)))
          ("EMACS_CONFIGURATION" . ((string "\"x86_64-pc-linux-gnu\"" 3750 . 3771)))
          ("FLEXIBLE_ARRAY_MEMBER")
          ("GNULIB_FDOPENDIR" . ((number "1" 7711 . 7712)))
          ("GNULIB_FSCANF" . ((number "1" 7881 . 7882)))
          ("HAVE_DECL_GETDTABLESIZE" . ((number "1" 15341 . 15342)))
          ("HAVE_DECL___FPENDING" . ((number "1" 16669 . 16670)))
          ("HAVE_FDOPENDIR" . ((number "1" 18508 . 18509)))
          ("HAVE_GAI_STRERROR" . ((number "1" 19336 . 19337)))
          ("HAVE_GLIB" . ((number "1" 21082 . 21083)))
          ("HAVE_GNUTLS" . ((number "1" 21135 . 21136)))
          ("HAVE_GTK_DIALOG_GET_ACTION_AREA" . ((number "1" 21658 . 21659)))
          ("HAVE_LANGINFO_CODESET" . ((number "1" 23889 . 23890)))
          ("HAVE_LIMITS_H" . ((number "1" 24867 . 24868)))
          ("HAVE_LRAND48" . ((number "1" 25490 . 25491)))
          ("HAVE_PWD_H" . ((number "1" 29530 . 29531)))
          ("HAVE_SIGSETJMP" . ((number "1" 31062 . 31063)))
          ("HAVE_STACK_OVERFLOW_HANDLING" . ((number "1" 31575 . 31576)))
          ("HAVE_STRSIGNAL" . ((number "1" 32237 . 32238)))
          ("HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC" . ((number "1" 33767 . 33768)))
          ("HAVE_STRUCT_TM_TM_ZONE" . ((number "1" 34236 . 34237)))
          ("HAVE_SYS_PRCTL_H" . ((number "1" 35507 . 35508)))
          ("HAVE_SYS_STATFS_H" . ((number "1" 35972 . 35973)))
          ("HAVE_TRUNC" . ((number "1" 37756 . 37757)))
          ("HAVE_XSCREENNUMBEROFSCREEN" . ((number "1" 40645 . 40646)))
          ("MODULES_SUFFIX" . ((string "\".so\"" 43239 . 43244)))
          ("PACKAGE_URL" . ((string "\"https://www.gnu.org/software/emacs/\"" 45019 . 45056)))
          ("USABLE_SIGIO" . ((number "1" 51052 . 51053)))
          ("_ALL_SOURCE" . ((number "1" 51771 . 51772)))
          ("_DARWIN_C_SOURCE" . ((number "1" 51874 . 51875)))
          ("__STDC_WANT_IEC_60559_BFP_EXT__" . ((number "1" 52618 . 52619)))
          ("_GL_UNUSED_LABEL" . ((symbol "_GL_UNUSED" 64872 . 64882)))
          ("GETTIMEOFDAY_TIMEZONE" . ((STRUCT "struct" 6982 . 6988) (symbol "timezone" 6989 . 6997)))
          ("HAVE_DECL_ALIGNED_ALLOC" . ((number "1" 13431 . 13432)))
          ("HAVE_FUTIMENS" . ((number "1" 19088 . 19089)))
          ("HAVE_GETGRENT" . ((number "1" 19751 . 19752)))
          ("HAVE_GETPAGESIZE" . ((number "1" 20284 . 20285)))
          ("HAVE_GETPT" . ((number "1" 20358 . 20359)))
          ("HAVE_GTK_ADJUSTMENT_GET_PAGE_SIZE" . ((number "1" 21542 . 21543)))
          ("HAVE_LIBXML2" . ((number "1" 24784 . 24785)))
          ("HAVE_LINUX_FS_H" . ((number "1" 24954 . 24955)))
          ("HAVE_LONG_LONG_INT" . ((number "1" 25412 . 25413)))
          ("HAVE_MEMRCHR" . ((number "1" 26865 . 26866)))
          ("HAVE_MINMAX_IN_SYS_PARAM_H" . ((number "1" 27072 . 27073)))
          ("HAVE_PNG" . ((number "1" 28462 . 28463)))
          ("HAVE_POSIX_OPENPT" . ((number "1" 28645 . 28646)))
          ("HAVE_PSELECT" . ((number "1" 28867 . 28868)))
          ("HAVE_PTHREAD_SIGMASK" . ((number "1" 29230 . 29231)))
          ("HAVE_PUTENV" . ((number "1" 29453 . 29454)))
          ("HAVE_RECVFROM" . ((number "1" 29850 . 29851)))
          ("HAVE_RSVG" . ((number "1" 29979 . 29980)))
          ("HAVE_STRUCT_IFREQ_IFR_HWADDR" . ((number "1" 33069 . 33070)))
          ("HAVE_TM_GMTOFF" . ((number "1" 37467 . 37468)))
          ("HAVE_XRANDR" . ((number "1" 40447 . 40448)))
          ("SYSTEM_TYPE" . ((string "\"gnu/linux\"" 49863 . 49874)))
          ("TIME_WITH_SYS_TIME" . ((number "1" 50375 . 50376)))
          ("_OPENBSD_SOURCE" . ((number "1" 52181 . 52182)))
          ("_TANDEM_SOURCE" . ((number "1" 53460 . 53461)))
          ("GC_SETJMP_WORKS" . ((number "1" 6351 . 6352)))
          ("HAVE_DECL_FERROR_UNLOCKED" . ((number "1" 14176 . 14177)))
          ("HAVE_DECL_FFLUSH_UNLOCKED" . ((number "1" 14307 . 14308)))
          ("HAVE_DECL_FREAD_UNLOCKED" . ((number "1" 14823 . 14824)))
          ("HAVE_GETHOSTNAME" . ((number "1" 19935 . 19936)))
          ("HAVE_GETOPT_H" . ((number "1" 20102 . 20103)))
          ("HAVE_MALLOC_H" . ((number "1" 26527 . 26528)))
          ("HAVE_READLINKAT" . ((number "1" 29770 . 29771)))
          ("HAVE_SELECT" . ((number "1" 30127 . 30128)))
          ("HAVE_SENDTO" . ((number "1" 30203 . 30204)))
          ("HAVE_SETITIMER" . ((number "1" 30378 . 30379)))
          ("HAVE_SNPRINTF" . ((number "1" 31224 . 31225)))
          ("HAVE_STRING_H" . ((number "1" 32155 . 32156)))
          ("HAVE_STRUCT_DIRENT_D_TYPE" . ((number "1" 32531 . 32532)))
          ("HAVE_SYNC" . ((number "1" 34573 . 34574)))
          ("HAVE_UNSIGNED_LONG_LONG_INT" . ((number "1" 38139 . 38140)))
          ("HAVE_XFIXES" . ((number "1" 40024 . 40025)))
          ("PACKAGE_BUGREPORT" . ((string "\"bug-gnu-emacs@gnu.org\"" 44650 . 44673)))
          ("__STDC_WANT_IEC_60559_ATTRIBS_EXT__" . ((number "1" 52465 . 52466)))
          ("__STDC_WANT_IEC_60559_FUNCS_EXT__" . ((number "1" 52928 . 52929)))
          ("_GL_INLINE_HEADER_BEGIN")
          ("_GL_UNUSED" . ((symbol "__attribute__" 64342 . 64355) (semantic-list "((__unused__))" 64356 . 64370)))
          ("EMACS_CONFIG_H")
          ("DEFAULT_SOUND_DEVICE" . ((string "\"/dev/dsp\"" 2781 . 2791)))
          ("GNULIB_CLOSE_STREAM" . ((number "1" 7359 . 7360)))
          ("HAVE_DECL_FWRITE_UNLOCKED" . ((number "1" 14954 . 14955)))
          ("HAVE_DECL_STRTOIMAX" . ((number "1" 16073 . 16074)))
          ("HAVE_ENDGRENT" . ((number "1" 17433 . 17434)))
          ("HAVE_GETADDRINFO_A" . ((number "1" 19581 . 19582)))
          ("HAVE_GETRUSAGE" . ((number "1" 20602 . 20603)))
          ("HAVE_NET_IF_H" . ((number "1" 27654 . 27655)))
          ("HAVE_PTHREAD" . ((number "1" 29035 . 29036)))
          ("HAVE_PTYS" . ((number "1" 29300 . 29301)))
          ("HAVE_RANDOM" . ((number "1" 29606 . 29607)))
          ("HAVE_SHUTDOWN" . ((number "1" 30622 . 30623)))
          ("HAVE_SIGSET_T" . ((number "1" 31144 . 31145)))
          ("HAVE_SYS_UTSNAME_H" . ((number "1" 36606 . 36607)))
          ("HAVE_TIMEGM" . ((number "1" 37116 . 37117)))
          ("HAVE_TIMERFD" . ((number "1" 37210 . 37211)))
          ("HAVE_UTIMENSAT" . ((number "1" 38303 . 38304)))
          ("HAVE_UTMP_H" . ((number "1" 38382 . 38383)))
          ("HAVE_X11" . ((number "1" 39532 . 39533)))
          ("HAVE_XINERAMA" . ((number "1" 40228 . 40229)))
          ("HYBRID_MALLOC" . ((number "1" 41762 . 41763)))
          ("IS_ANY_SEP" (spp-arg-list ("_c_") 41992 . 41997) . ((semantic-list "(IS_DIRECTORY_SEP (_c_))" 41998 . 42022)))
          ("IS_DIRECTORY_SEP" (spp-arg-list ("_c_") 42191 . 42196) . ((semantic-list "((_c_) == DIRECTORY_SEP)" 42197 . 42221)))
          ("__USE_MINGW_ANSI_STDIO" . ((number "1" 43160 . 43161)))
          ("PTY_ITERATION" . 
              ((INT "int" 46065 . 46068) (symbol "i" 46069 . 46070) (punctuation ";" 46070 . 46071) (FOR "for" 46072 . 46075) (semantic-list "(i = 0; i < 1; i++)" 46076 . 46095)))
          ("STAT_STATFS2_FRSIZE" . ((number "1" 48876 . 48877)))
          ("_NETBSD_SOURCE" . ((number "1" 56701 . 56702)))
          ("__EXTENSIONS__" . ((number "1" 53991 . 53992)))
          ("_GL_ATTRIBUTE_CONST" . ((symbol "__attribute__" 65288 . 65301) (semantic-list "((__const__))" 65302 . 65315)))
          ("_GL_ATTRIBUTE_MALLOC" . ((symbol "__attribute__" 65471 . 65484) (semantic-list "((__malloc__))" 65485 . 65499)))
          ("GNULIB_PORTCHECK" . ((number "1" 8127 . 8128)))
          ("HAVE_C99_STRTOLD" . ((number "1" 11768 . 11769)))
          ("HAVE_DECL_GETCHAR_UNLOCKED" . ((number "1" 15087 . 15088)))
          ("HAVE_DECL_MEMRCHR" . ((number "1" 15579 . 15580)))
          ("HAVE_DECL_STRMODE" . ((number "0" 15954 . 15955)))
          ("HAVE_FREETYPE" . ((number "1" 18757 . 18758)))
          ("HAVE_FSEEKO" . ((number "1" 18856 . 18857)))
          ("HAVE_FUTIMESAT" . ((number "1" 19248 . 19249)))
          ("HAVE_GETIFADDRS" . ((number "1" 20019 . 20020)))
          ("HAVE_GETRLIMIT" . ((number "1" 20520 . 20521)))
          ("HAVE_GETTIMEOFDAY" . ((number "1" 20776 . 20777)))
          ("HAVE_GRANTPT" . ((number "1" 21291 . 21292)))
          ("HAVE_INET_SOCKETS" . ((number "1" 22898 . 22899)))
          ("HAVE_LCMS2" . ((number "1" 23970 . 23971)))
          ("HAVE_LUTIMES" . ((number "1" 25642 . 25643)))
          ("HAVE_MEMORY_H" . ((number "1" 26787 . 26788)))
          ("HAVE_PERSONALITY_ADDR_NO_RANDOMIZE" . ((number "1" 28321 . 28322)))
          ("HAVE_PTY_H" . ((number "1" 29377 . 29378)))
          ("HAVE_RINT" . ((number "1" 29922 . 29923)))
          ("HAVE_STDLIB_H" . ((number "1" 31911 . 31912)))
          ("HAVE_STRINGS_H" . ((number "1" 32072 . 32073)))
          ("HAVE__SETJMP" . ((number "1" 41201 . 41202)))
          ("_POSIX_PTHREAD_SEMANTICS" . ((number "1" 52304 . 52305)))
          ("USE_UNLOCKED_IO" . ((number "1" 54298 . 54299)))
          ("USG")
          ("_GL_EXTERN_INLINE_IN_USE")
          ("_GL_INLINE_HEADER_END")
          ("GNULIB_MKOSTEMP" . ((number "1" 8055 . 8056)))
          ("HAVE_DECL_FPUTC_UNLOCKED" . ((number "1" 14565 . 14566)))
          ("HAVE_DECL_PUTC_UNLOCKED" . ((number "1" 15839 . 15840)))
          ("HAVE_DECL_SYS_SIGLIST" . ((number "1" 16314 . 16315)))
          ("HAVE_DUP2" . ((number "1" 17186 . 17187)))
          ("HAVE_EXECINFO_H" . ((number "1" 17769 . 17770)))
          ("HAVE_EXPLICIT_BZERO" . ((number "1" 17861 . 17862)))
          ("HAVE_JSON" . ((number "1" 23183 . 23184)))
          ("HAVE_MMAP" . ((number "1" 27233 . 27234)))
          ("HAVE_READLINK" . ((number "1" 29686 . 29687)))
          ("HAVE_STDIO_EXT_H" . ((number "1" 31828 . 31829)))
          ("HAVE_TERM_H" . ((number "1" 36962 . 36963)))
          ("HAVE_TIMER_SETTIME" . ((number "1" 37300 . 37301)))
          ("HAVE_X11R6" . ((number "1" 39620 . 39621)))
          ("HAVE_XDBE" . ((number "1" 39949 . 39950)))
          ("PTY_TTY_NAME_SPRINTF" . ((semantic-list "{ char *ptyname = 0; sigset_t blocked; sigemptyset (&blocked); sigaddset (&blocked, SIGCHLD); pthread_sigmask (SIG_BLOCK, &blocked, 0); if (grantpt (fd) != -1 && unlockpt (fd) != -1) ptyname = ptsname(fd); pthread_sigmask (SIG_UNBLOCK, &blocked, 0); if (!ptyname) { emacs_close (fd); return -1; } snprintf (pty_name, PTY_NAME_SIZE, \"%s\", ptyname); }" 46509 . 46858)))
          ("USER_FULL_NAME" . 
              ((symbol "pw" 51115 . 51117) (punctuation "-" 51117 . 51118) (punctuation ">" 51118 . 51119) (symbol "pw_gecos" 51119 . 51127)))
          ("USE_ACL" . ((number "0" 51210 . 51211)))
          ("USE_GTK" . ((number "1" 51390 . 51391)))
          ("__STDC_WANT_IEC_60559_DFP_EXT__" . ((number "1" 52771 . 52772)))
          ("_HPUX_ALT_XOPEN_SOCKET_API" . ((number "1" 53890 . 53891)))
          ("_GL_INLINE" . ((EXTERN "extern" 60962 . 60968) (INLINE "inline" 60969 . 60975)))
          ("DIR_TO_FD" (spp-arg-list ("Dir_p") 3142 . 3149) . ((punctuation "-" 3150 . 3151) (number "1" 3151 . 3152)))
          ("GNULIB_FACCESSAT" . ((number "1" 7535 . 7536)))
          ("HAVE_CFSETSPEED" . ((number "1" 11934 . 11935)))
          ("HAVE_C_VARARRAYS" . ((number "1" 12368 . 12369)))
          ("HAVE_DECL_FDATASYNC" . ((number "1" 13799 . 13800)))
          ("HAVE_DECL_LOCALTIME_R" . ((number "1" 15464 . 15465)))
          ("HAVE_FACCESSAT" . ((number "1" 18040 . 18041)))
          ("HAVE_FCHMOD" . ((number "1" 18267 . 18268)))
          ("HAVE_GTK_WIDGET_GET_MAPPED" . ((number "1" 22210 . 22211)))
          ("HAVE_JPEG" . ((number "1" 23131 . 23132)))
          ("HAVE_LOCALTIME_R" . ((number "1" 25248 . 25249)))
          ("HAVE_STDINT_H" . ((number "1" 31739 . 31740)))
          ("HAVE_STRTOIMAX" . ((number "1" 32319 . 32320)))
          ("HAVE_SYS_SELECT_H" . ((number "1" 35693 . 35694)))
          ("HAVE_TZSET" . ((number "1" 37946 . 37947)))
          ("HAVE_WORKING_VFORK" . ((number "1" 39360 . 39361)))
          ("HAVE_X11R6_XIM" . ((number "1" 39703 . 39704)))
          ("HAVE_XSCREENRESOURCESTRING" . ((number "1" 40751 . 40752)))
          ("HAVE_ZLIB" . ((number "1" 41129 . 41130)))
          ("HAVE___BUILTIN_FRAME_ADDRESS" . ((number "1" 41311 . 41312)))
          ("IS_DEVICE_SEP" (spp-arg-list ("_c_") 42100 . 42105) . ((number "0" 42106 . 42107)))
          ("LINUX_SYSINFO_UNIT" . ((number "1" 42495 . 42496)))
          ("TERM_HEADER" . ((string "\"gtkutil.h\"" 50113 . 50124)))
          ("THREADS_ENABLED" . ((number "1" 50202 . 50203)))
          ("EMACS_CONFIG_FEATURES" . ((string "\"XPM JPEG TIFF GIF PNG RSVG CAIRO SOUND GSETTINGS NOTIFY GNUTLS LIBXML2 FREETYPE XFT ZLIB TOOLKIT_SCROLL_BARS GTK2 X11 MODULES THREADS JSON LCMS2\"" 3868 . 4014)))
          ("GCC_LINT" . ((number "1" 5607 . 5608)))
          ("GNULIB_SCANF" . ((number "1" 8729 . 8730)))
          ("HAVE_FREEIFADDRS" . ((number "1" 18666 . 18667)))
          ("HAVE_GETPWENT" . ((number "1" 20438 . 20439)))
          ("HAVE_GETSOCKNAME" . ((number "1" 20688 . 20689)))
          ("HAVE_GTK_WIDGET_GET_WINDOW" . ((number "1" 22428 . 22429)))
          ("HAVE_PIPE2" . ((number "1" 28395 . 28396)))
          ("HAVE_PROCFS" . ((number "1" 28789 . 28790)))
          ("HAVE_STRUCT_IFREQ_IFR_BROADADDR" . ((number "1" 32861 . 32862)))
          ("HAVE_STRUCT_IFREQ_IFR_NETMASK" . ((number "1" 33176 . 33177)))
          ("HAVE_SYS_CDEFS_H" . ((number "1" 34846 . 34847)))
          ("HAVE_SYS_SOCKET_H" . ((number "1" 35784 . 35785)))
          ("HAVE_SYS_VFS_H" . ((number "1" 36691 . 36692)))
          ("HAVE_TIFF" . ((number "1" 37040 . 37041)))
          ("HAVE_XKB" . ((number "1" 40297 . 40298)))
          ("HAVE_XPM" . ((number "1" 40372 . 40373)))
          ("HAVE_X_I18N" . ((number "1" 40896 . 40897)))
          ("PACKAGE_NAME" . ((string "\"GNU Emacs\"" 44743 . 44754)))
          ("PACKAGE_STRING" . ((string "\"GNU Emacs 27.0.50\"" 44838 . 44857)))
          ("SIGNALS_VIA_CHARACTERS" . ((number "1" 47512 . 47513)))
          ("TIME_T_IS_SIGNED" . ((number "1" 50269 . 50270)))
          ("__STDC_WANT_IEC_60559_TYPES_EXT__" . ((number "1" 53085 . 53086)))
          ("my_strftime" . ((symbol "nstrftime" 63043 . 63052)))
          ("restrict" . ((symbol "__restrict" 63397 . 63407)))
          ("HAVE_ALLOCA_H" . ((number "1" 11543 . 11544)))
          ("HAVE_CLOCK_SETTIME" . ((number "1" 12114 . 12115)))
          ("HAVE_DECL_FEOF_UNLOCKED" . ((number "1" 14045 . 14046)))
          ("HAVE_DECL_FPUTS_UNLOCKED" . ((number "1" 14694 . 14695)))
          ("HAVE_DECL_GETC_UNLOCKED" . ((number "1" 15214 . 15215)))
          ("HAVE_FSYNC" . ((number "1" 19008 . 19009)))
          ("HAVE_GETDTABLESIZE" . ((number "1" 19671 . 19672)))
          ("HAVE_GET_CURRENT_DIR_NAME" . ((number "1" 20880 . 20881)))
          ("HAVE_GIF" . ((number "1" 21021 . 21022)))
          ("HAVE_SETRLIMIT" . ((number "1" 30542 . 30543)))
          ("HAVE_SOUND" . ((number "1" 31375 . 31376)))
          ("HAVE_SYS_RESOURCE_H" . ((number "1" 35602 . 35603)))
          ("HAVE_SYS_SOUNDCARD_H" . ((number "1" 35881 . 35882)))
          ("HAVE_SYS_TIME_H" . ((number "1" 36341 . 36342)))
          ("HAVE_TM_ZONE" . ((number "1" 37597 . 37598)))
          ("HAVE_UNISTD_H" . ((number "1" 38029 . 38030)))
          ("HAVE_X_SM" . ((number "1" 40970 . 40971)))
          ("TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC" . ((number "1" 50676 . 50677)))
          ("UNIX98_PTYS" . ((number "1" 50922 . 50923)))
          ("XRegisterIMInstantiateCallback_arg6" . ((symbol "XPointer" 55955 . 55963)))
          ("_UNUSED_PARAMETER_" . ((symbol "_GL_UNUSED" 64553 . 64563)))
          ("GETGROUPS_T" . ((symbol "gid_t" 6595 . 6600)))
          ("HAVE_ALIGNED_ALLOC" . ((number "1" 11290 . 11291)))
          ("HAVE_CLOCK_GETTIME" . ((number "1" 12024 . 12025)))
          ("HAVE_DECL_CLEARERR_UNLOCKED" . ((number "1" 13566 . 13567)))
          ("HAVE_ENDPWENT" . ((number "1" 17513 . 17514)))
          ("HAVE_ENVIRON_DECL" . ((number "1" 17595 . 17596)))
          ("HAVE_NEWLOCALE" . ((number "1" 27736 . 27737)))
          ("HAVE_PRCTL" . ((number "1" 28719 . 28720)))
          ("HAVE_SYS_UN_H" . ((number "1" 36513 . 36514)))
          ("HAVE_XRMSETDATABASE" . ((number "1" 40539 . 40540)))
          ("HAVE_X_WINDOWS" . ((number "1" 41054 . 41055)))
          ("INTERRUPT_INPUT" . ((number "1" 41913 . 41914)))
          ("PTY_OPEN" . 
              ((DO "do" 46266 . 46268) (semantic-list "{ fd = posix_openpt (O_RDWR | O_CLOEXEC | O_NOCTTY); if (fd < 0 && errno == EINVAL) fd = posix_openpt (O_RDWR | O_NOCTTY); }" 46269 . 46393) (WHILE "while" 46394 . 46399) (semantic-list "(false)" 46400 . 46407)))
          ("__STDC_WANT_MATH_SPEC_FUNCS__" . ((number "1" 53364 . 53365)))
          ("USE_TOOLKIT_SCROLL_BARS" . ((number "1" 54090 . 54091)))
          ("HAVE_ALLOCA" . ((number "1" 11435 . 11436)))
          ("HAVE_BYTESWAP_H" . ((number "1" 11694 . 11695)))
          ("HAVE_CFMAKERAW" . ((number "1" 11850 . 11851)))
          ("HAVE_DECL_ALARM" . ((number "1" 13304 . 13305)))
          ("HAVE_DECL_FDOPENDIR" . ((number "1" 13918 . 13919)))
          ("HAVE_FORK" . ((number "1" 18580 . 18581)))
          ("HAVE_GETOPT_LONG_ONLY" . ((number "1" 20198 . 20199)))
          ("HAVE_GSETTINGS" . ((number "1" 21355 . 21356)))
          ("HAVE_GTK_HANDLE_BOX_NEW" . ((number "1" 21866 . 21867)))
          ("HAVE_GTK_ORIENTABLE_SET_ORIENTATION" . ((number "1" 21990 . 21991)))
          ("HAVE_INTTYPES_H" . ((number "1" 23043 . 23044)))
          ("HAVE_LINUX_SYSINFO" . ((number "1" 25038 . 25039)))
          ("HAVE_LOG2" . ((number "1" 25320 . 25321)))
          ("HAVE_MODULES" . ((number "1" 27396 . 27397)))
          ("HAVE_PTHREAD_H" . ((number "1" 29120 . 29121)))
          ("HAVE_SBRK" . ((number "1" 30051 . 30052)))
          ("HAVE_WORKING_UTIMES" . ((number "1" 39294 . 39295)))
          ("HAVE_XFT" . ((number "1" 40091 . 40092)))
          ("HAVE___EXECUTABLE_START" . ((number "1" 41517 . 41518)))
          ("NARROWPROTO" . ((number "1" 43415 . 43416)))
          ("NULL_DEVICE" . ((string "\"/dev/null\"" 44342 . 44353)))
          ("SEPCHAR" . ((string "':'" 47323 . 47326)))
          ("USE_FILE_NOTIFY" . ((number "1" 51339 . 51340)))
          ("USE_XIM" . ((number "1" 54499 . 54500)))
          ("_GL_EXTERN_INLINE" . ((EXTERN "extern" 61011 . 61017)))
          )
)
    (semanticdb-table "semanticdb-table-1d2a41c"
      :file "conf_post.h"
      :fsize 14023
      :lastmodtime '(23302 6458 192595 510000))
    (semanticdb-table "semanticdb-table-1d2a43c"
      :file "globals.h"
      :fsize 253295
      :lastmodtime '(23311 28124 526974 930000))
    (semanticdb-table "semanticdb-table-258d110"
      :file "thread.h"
      :fsize 10140
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-258d130"
      :file "emacs-module.h"
      :fsize 11403
      :lastmodtime '(23311 28050 638272 651000))
    (semanticdb-table "semanticdb-table-258d16c"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("SHELL" variable (:default-value ("/bin/bash")) nil [1015 1033])
            ("srcdir" variable (:default-value (".")) nil [1169 1180])
            ("top_srcdir" variable (:default-value ("..")) nil [1180 1196])
            ("abs_top_srcdir" variable (:default-value ("/home/jbailey/Documents/EmacsSrc/emacs")) nil [1227 1281])
            ("CC" variable (:default-value ("gcc")) nil [1282 1291])
            ("CFLAGS" variable (:default-value ("-g3" "-O2")) nil [1291 1308])
            ("CPPFLAGS" variable nil nil [1308 1322])
            ("LDFLAGS" variable nil nil [1322 1334])
            ("EXEEXT" variable nil nil [1334 1344])
            ("version" variable (:default-value ("27.0.50")) nil [1344 1362])
            ("MKDIR_P" variable (:default-value ("/bin/mkdir" "-p")) nil [1362 1386])
            ("LIBOBJS" variable nil nil [1531 1542])
            ("lispsource" variable (:default-value ("$(top_srcdir)/lisp")) nil [1543 1575])
            ("lib" variable (:default-value ("../lib")) nil [1575 1588])
            ("libsrc" variable (:default-value ("../lib-src")) nil [1588 1608])
            ("etc" variable (:default-value ("../etc")) nil [1608 1621])
            ("oldXMenudir" variable (:default-value ("../oldXMenu")) nil [1621 1647])
            ("lwlibdir" variable (:default-value ("../lwlib")) nil [1647 1667])
            ("config_h" variable (:default-value ("config.h" "$(srcdir)/conf_post.h")) nil [1717 1759])
            ("bootstrap_exe" variable (:default-value ("../src/bootstrap-emacs$(EXEEXT)")) nil [1760 1808])
            ("OTHER_FILES" variable nil nil [1843 1858])
            ("PROFILING_CFLAGS" variable nil nil [1897 1917])
            ("WARN_CFLAGS" variable (:default-value ("-fno-common" "-W" "-Wabi" "-Waddress" "-Waggressive-loop-optimizations" "-Wall" "-Wattributes" "-Wbool-compare" "-Wbool-operation" "-Wbuiltin-declaration-mismatch" "-Wbuiltin-macro-redefined" "-Wchar-subscripts" "-Wchkp" "-Wclobbered" "-Wcomment" "-Wcomments" "-Wcoverage-mismatch" "-Wcpp" "-Wdangling-else" "-Wdate-time" "-Wdeprecated" "-Wdeprecated-declarations" "-Wdesignated-init" "-Wdisabled-optimization" "-Wdiscarded-array-qualifiers" "-Wdiscarded-qualifiers" "-Wdiv-by-zero" "-Wdouble-promotion" "-Wduplicated-cond" "-Wduplicate-decl-specifier" "-Wempty-body" "-Wendif-labels" "-Wenum-compare" "-Wexpansion-to-defined" "-Wextra" "-Wformat-contains-nul" "-Wformat-extra-args" "-Wformat-security" "-Wformat-signedness" "-Wformat-y2k" "-Wformat-zero-length" "-Wframe-address" "-Wfree-nonheap-object" "-Whsa" "-Wignored-attributes" "-Wignored-qualifiers" "-Wimplicit" "-Wimplicit-function-declaration" "-Wimplicit-int" "-Wincompatible-pointer-types" "-Winit-self" "-Wint-conversion" "-Wint-in-bool-context" "-Wint-to-pointer-cast" "-Winvalid-memory-model" "-Winvalid-pch" "-Wjump-misses-init" "-Wlogical-not-parentheses" "-Wlogical-op" "-Wmain" "-Wmaybe-uninitialized" "-Wmemset-elt-size" "-Wmemset-transposed-args" "-Wmisleading-indentation" "-Wmissing-braces" "-Wmissing-declarations" "-Wmissing-include-dirs" "-Wmissing-parameter-type" "-Wmissing-prototypes" "-Wmultichar" "-Wnarrowing" "-Wnested-externs" "-Wnonnull" "-Wnonnull-compare" "-Wnull-dereference" "-Wodr" "-Wold-style-declaration" "-Wold-style-definition" "-Wopenmp-simd" "-Woverflow" "-Wpacked" "-Wpacked-bitfield-compat" "-Wparentheses" "-Wpointer-arith" "-Wpointer-compare" "-Wpointer-sign" "-Wpointer-to-int-cast" "-Wpragmas" "-Wpsabi" "-Wrestrict" "-Wreturn-local-addr" "-Wreturn-type" "-Wscalar-storage-order" "-Wsequence-point" "-Wshift-count-negative" "-Wshift-count-overflow" "-Wshift-negative-value" "-Wsizeof-array-argument" "-Wsizeof-pointer-memaccess" "-Wstrict-aliasing" "-Wstrict-prototypes" "-Wsuggest-attribute=format" "-Wsuggest-attribute=noreturn" "-Wsuggest-final-methods" "-Wsuggest-final-types" "-Wswitch-bool" "-Wswitch-unreachable" "-Wtautological-compare" "-Wtrampolines" "-Wtrigraphs" "-Wuninitialized" "-Wunknown-pragmas" "-Wunused" "-Wunused-but-set-parameter" "-Wunused-but-set-variable" "-Wunused-function" "-Wunused-label" "-Wunused-local-typedefs" "-Wunused-macros" "-Wunused-result" "-Wunused-value" "-Wunused-variable" "-Wvarargs" "-Wvariadic-macros" "-Wvector-operation-performance" "-Wvolatile-register-var" "-Wwrite-strings" "-Walloc-size-larger-than=9223372036854775807" "-Warray-bounds=2" "-Wformat-truncation=2" "-Wimplicit-fallthrough=5" "-Wnormalized=nfc" "-Wshift-overflow=2" "-Wstringop-overflow=2" "-Wvla-larger-than=4031" "-Wredundant-decls" "-Wno-missing-field-initializers" "-Wno-override-init" "-Wno-sign-compare" "-Wno-type-limits" "-Wno-unused-parameter" "-Wno-format-nonliteral")) nil [1976 4608])
            ("WERROR_CFLAGS" variable nil nil [4608 4625])
            ("C_SWITCH_MACHINE" variable nil nil [4654 4672])
            ("C_SWITCH_SYSTEM" variable nil nil [4699 4716])
            ("GNUSTEP_CFLAGS" variable nil nil [4717 4733])
            ("PNG_CFLAGS" variable (:default-value ("-isystem" "/usr/include/libpng16")) nil [4733 4775])
            ("C_SWITCH_X_SITE" variable (:default-value ("-pthread" "-isystem" "/usr/include/gtk-2.0" "-isystem" "/usr/lib/x86_64-linux-gnu/gtk-2.0/include" "-isystem" "/usr/include/gio-unix-2.0/" "-isystem" "/usr/include/cairo" "-isystem" "/usr/include/pango-1.0" "-isystem" "/usr/include/atk-1.0" "-isystem" "/usr/include/cairo" "-isystem" "/usr/include/pixman-1" "-isystem" "/usr/include/gdk-pixbuf-2.0" "-isystem" "/usr/include/libpng16" "-isystem" "/usr/include/pango-1.0" "-isystem" "/usr/include/harfbuzz" "-isystem" "/usr/include/pango-1.0" "-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16" "-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16" "-isystem" "/usr/include/glib-2.0" "-isystem" "/usr/lib/x86_64-linux-gnu/glib-2.0/include" "-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16" "-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16")) nil [5110 5900])
            ("LD_SWITCH_X_SITE" variable nil nil [6319 6337])
            ("LD_SWITCH_X_SITE_RPATH" variable nil nil [6458 6482])
            ("LD_SWITCH_SYSTEM" variable nil nil [6511 6529])
            ("LD_SWITCH_SYSTEM_TEMACS" variable (:default-value ("-Wl,-znocombreloc" "$(LD_SWITCH_X_SITE_RPATH)" "-no-pie")) nil [6622 6698])
            ("TEMACS_LDFLAGS" variable (:default-value ("$(LD_SWITCH_SYSTEM)" "$(LD_SWITCH_SYSTEM_TEMACS)")) nil [6739 6803])
            ("PAXCTL" variable nil nil [7072 7082])
            ("SETFATTR" variable nil nil [7082 7094])
            ("PAXCTL_dumped" variable nil nil [7168 7185])
            ("PAXCTL_notdumped" variable nil nil [7185 7205])
            ("LIBS_SYSTEM" variable nil nil [7264 7277])
            ("LIB_MATH" variable (:default-value ("-lm")) nil [7296 7309])
            ("LIB_PTHREAD" variable (:default-value ("-lpthread")) nil [7334 7356])
            ("LIBIMAGE" variable (:default-value ("-ltiff" "-ljpeg" "-lpng16" "-lz" "-lgif" "-lXpm")) nil [7357 7404])
            ("XCB_LIBS" variable nil nil [7405 7415])
            ("XFT_LIBS" variable (:default-value ("-lXrender" "-lXft")) nil [7415 7440])
            ("LIBX_EXTRA" variable (:default-value ("-lX11" "$(XCB_LIBS)" "$(XFT_LIBS)")) nil [7440 7481])
            ("FONTCONFIG_CFLAGS" variable (:default-value ("-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16" "-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16")) nil [7482 7628])
            ("FONTCONFIG_LIBS" variable (:default-value ("-lfontconfig" "-lfreetype")) nil [7628 7670])
            ("FREETYPE_CFLAGS" variable (:default-value ("-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16")) nil [7670 7751])
            ("FREETYPE_LIBS" variable (:default-value ("-lfreetype")) nil [7751 7778])
            ("LIBOTF_CFLAGS" variable nil nil [7778 7795])
            ("LIBOTF_LIBS" variable nil nil [7795 7810])
            ("M17N_FLT_CFLAGS" variable nil nil [7810 7829])
            ("M17N_FLT_LIBS" variable nil nil [7829 7846])
            ("LIB_ACL" variable nil nil [7847 7856])
            ("LIB_CLOCK_GETTIME" variable nil nil [7856 7875])
            ("LIB_EACCESS" variable nil nil [7875 7888])
            ("LIB_FDATASYNC" variable nil nil [7888 7903])
            ("LIB_TIMER_TIME" variable (:default-value ("-lrt")) nil [7903 7923])
            ("DBUS_CFLAGS" variable nil nil [7924 7939])
            ("DBUS_LIBS" variable nil nil [7939 7952])
            ("DBUS_OBJ" variable nil nil [7992 8004])
            ("XWIDGETS_OBJ" variable nil nil [8049 8065])
            ("LIB_EXECINFO" variable nil nil [8066 8080])
            ("SETTINGS_CFLAGS" variable (:default-value ("-pthread" "-isystem" "/usr/include/glib-2.0" "-isystem" "/usr/lib/x86_64-linux-gnu/glib-2.0/include" "-isystem" "/usr/include/glib-2.0" "-isystem" "/usr/lib/x86_64-linux-gnu/glib-2.0/include")) nil [8081 8274])
            ("SETTINGS_LIBS" variable (:default-value ("-lgio-2.0" "-lgobject-2.0" "-lglib-2.0" "-lgobject-2.0" "-lglib-2.0")) nil [8274 8350])
            ("GTK_OBJ" variable (:default-value ("gtkutil.o")) nil [8388 8407])
            ("NOTIFY_OBJ" variable (:default-value ("inotify.o")) nil [8538 8561])
            ("NOTIFY_CFLAGS" variable nil nil [8561 8578])
            ("NOTIFY_LIBS" variable nil nil [8578 8593])
            ("LIBS_TERMCAP" variable (:default-value ("-ltinfo")) nil [8642 8663])
            ("TERMCAP_OBJ" variable (:default-value ("terminfo.o")) nil [8735 8758])
            ("LIBXMU" variable nil nil [8759 8767])
            ("LIBXSM" variable (:default-value ("-lSM" "-lICE")) nil [8768 8786])
            ("LIBXTR6" variable nil nil [8787 8796])
            ("LIBXT_OTHER" variable (:default-value ("$(LIBXSM)")) nil [8899 8921])
            ("LIBXMENU" variable nil nil [9041 9051])
            ("XMENU_OBJ" variable (:default-value ("xmenu.o")) nil [9094 9112])
            ("XOBJ" variable (:default-value ("xterm.o" "xfns.o" "xselect.o" "xrdb.o" "xsmfns.o" "xsettings.o")) nil [9202 9260])
            ("XGSELOBJ" variable (:default-value ("xgselect.o")) nil [9307 9327])
            ("TOOLKIT_LIBW" variable (:default-value ("-lgtk-x11-2.0" "-lgdk-x11-2.0" "-lpangocairo-1.0" "-latk-1.0" "-lcairo" "-lgdk_pixbuf-2.0" "-lgio-2.0" "-lpangoft2-1.0" "-lpango-1.0" "-lgobject-2.0" "-lfontconfig" "-lfreetype" "-lglib-2.0")) nil [9328 9507])
            ("LIBXT" variable (:default-value ("$(TOOLKIT_LIBW)" "$(LIBXT_OTHER)")) nil [9549 9586])
            ("LIBX_OTHER" variable (:default-value ("$(LIBXT)" "$(LIBX_EXTRA)")) nil [9639 9673])
            ("LIBX_BASE" variable (:default-value ("$(LIBXMENU)" "$(LD_SWITCH_X_SITE)")) nil [9904 9946])
            ("LIBS_GNUSTEP" variable (:default-value ("$(patsubst -specs=%-hardened-ld,,)")) nil [9973 10021])
            ("LIBSOUND" variable nil nil [10022 10033])
            ("CFLAGS_SOUND" variable nil nil [10033 10048])
            ("RSVG_LIBS" variable (:default-value ("-lrsvg-2" "-lm" "-lgio-2.0" "-lgdk_pixbuf-2.0" "-lgobject-2.0" "-lglib-2.0" "-lcairo")) nil [10049 10133])
            ("RSVG_CFLAGS" variable (:default-value ("-pthread" "-isystem" "/usr/include/librsvg-2.0" "-isystem" "/usr/include/gdk-pixbuf-2.0" "-isystem" "/usr/include/libpng16" "-isystem" "/usr/include/cairo" "-isystem" "/usr/include/glib-2.0" "-isystem" "/usr/lib/x86_64-linux-gnu/glib-2.0/include" "-isystem" "/usr/include/pixman-1" "-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16" "-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16")) nil [10133 10525])
            ("WEBKIT_LIBS" variable nil nil [10526 10540])
            ("WEBKIT_CFLAGS" variable nil nil [10540 10556])
            ("CAIRO_LIBS" variable (:default-value ("-lcairo")) nil [10557 10577])
            ("CAIRO_CFLAGS" variable (:default-value ("-isystem" "/usr/include/cairo" "-isystem" "/usr/include/glib-2.0" "-isystem" "/usr/lib/x86_64-linux-gnu/glib-2.0/include" "-isystem" "/usr/include/pixman-1" "-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16" "-isystem" "/usr/include/freetype2" "-isystem" "/usr/include/libpng16")) nil [10577 10859])
            ("IMAGEMAGICK_LIBS" variable nil nil [10860 10879])
            ("IMAGEMAGICK_CFLAGS" variable nil nil [10879 10900])
            ("LIBXML2_LIBS" variable (:default-value ("-lxml2")) nil [10901 10923])
            ("LIBXML2_CFLAGS" variable (:default-value ("-isystem" "/usr/include/libxml2")) nil [10923 10970])
            ("GETADDRINFO_A_LIBS" variable (:default-value ("-lanl")) nil [10971 10998])
            ("LCMS2_LIBS" variable (:default-value ("-llcms2")) nil [10999 11020])
            ("LCMS2_CFLAGS" variable nil nil [11020 11036])
            ("LIBZ" variable (:default-value ("-lz")) nil [11037 11048])
            ("LIBMODULES" variable (:default-value ("-ldl")) nil [11105 11123])
            ("MODULES_OBJ" variable (:default-value ("dynlib.o" "emacs-module.o")) nil [11181 11219])
            ("XRANDR_LIBS" variable (:default-value ("-lXrandr")) nil [11220 11243])
            ("XRANDR_CFLAGS" variable nil nil [11243 11260])
            ("XINERAMA_LIBS" variable (:default-value ("-lXinerama")) nil [11261 11288])
            ("XINERAMA_CFLAGS" variable nil nil [11288 11307])
            ("XFIXES_LIBS" variable (:default-value ("-lXfixes")) nil [11308 11331])
            ("XFIXES_CFLAGS" variable nil nil [11331 11348])
            ("XDBE_LIBS" variable (:default-value ("-lXext")) nil [11349 11368])
            ("XDBE_CFLAGS" variable nil nil [11368 11383])
            ("WIDGET_OBJ" variable nil nil [11431 11443])
            ("HYBRID_MALLOC" variable (:default-value ("1")) nil [11444 11462])
            ("CYGWIN_OBJ" variable nil nil [11503 11515])
            ("WINDOW_SYSTEM_OBJ" variable (:default-value ("fontset.o" "fringe.o" "image.o")) nil [11575 11620])
            ("MSDOS_OBJ" variable nil nil [11663 11675])
            ("MSDOS_X_OBJ" variable nil nil [11728 11742])
            ("NS_OBJ" variable nil nil [11743 11751])
            ("NS_OBJC_OBJ" variable nil nil [11825 11838])
            ("GNU_OBJC_CFLAGS" variable (:default-value ("$(patsubst -specs=%-hardened-cc1,,)")) nil [11864 11916])
            ("W32_OBJ" variable nil nil [12116 12125])
            ("W32_LIBS" variable nil nil [12275 12285])
            ("EMACSRES" variable nil nil [12311 12323])
            ("W32_RES_LINK" variable nil nil [12453 12467])
            ("FONT_OBJ" variable (:default-value ("ftfont.o" "ftcrfont.o")) nil [12647 12676])
            ("CM_OBJ" variable (:default-value ("cm.o")) nil [12716 12728])
            ("LIBGPM" variable nil nil [12729 12739])
            ("LIBSELINUX_LIBS" variable nil nil [12740 12759])
            ("LIBGNUTLS_LIBS" variable (:default-value ("-lgnutls")) nil [12760 12786])
            ("LIBGNUTLS_CFLAGS" variable (:default-value ("-isystem" "/usr/include/p11-kit-1")) nil [12786 12837])
            ("LIBSYSTEMD_LIBS" variable nil nil [12838 12857])
            ("LIBSYSTEMD_CFLAGS" variable nil nil [12857 12878])
            ("JSON_LIBS" variable (:default-value ("-ljansson")) nil [12879 12901])
            ("JSON_CFLAGS" variable nil nil [12901 12916])
            ("JSON_OBJ" variable (:default-value ("json.o")) nil [12916 12934])
            ("INTERVALS_H" variable (:default-value ("dispextern.h" "intervals.h" "composite.h")) nil [12935 12986])
            ("GETLOADAVG_LIBS" variable nil nil [12987 13006])
            ("RUN_TEMACS" variable (:default-value ("./temacs")) nil [13007 13029])
            ("BUILD_DETAILS" variable nil nil [13102 13119])
            ("UNEXEC_OBJ" variable (:default-value ("unexelf.o")) nil [13120 13143])
            ("CANNOT_DUMP" variable (:default-value ("no")) nil [13144 13159])
            ("AM_DEFAULT_VERBOSITY" variable (:default-value ("0")) nil [13180 13205])
            ("AM_V_CC" variable (:default-value ("$(am__v_CC_$(V))")) nil [13206 13233])
            ("am__v_CC_" variable (:default-value ("$(am__v_CC_$(AM_DEFAULT_VERBOSITY))")) nil [13233 13281])
            ("am__v_CC_0" variable (:default-value ("@echo" "\"  CC      \"" "$@;")) nil [13281 13317])
            ("am__v_CC_1" variable nil nil [13317 13330])
            ("AM_V_CCLD" variable (:default-value ("$(am__v_CCLD_$(V))")) nil [13331 13362])
            ("am__v_CCLD_" variable (:default-value ("$(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))")) nil [13362 13414])
            ("am__v_CCLD_0" variable (:default-value ("@echo" "\"  CCLD    \"" "$@;")) nil [13414 13452])
            ("am__v_CCLD_1" variable nil nil [13452 13467])
            ("AM_V_GEN" variable (:default-value ("$(am__v_GEN_$(V))")) nil [13468 13497])
            ("am__v_GEN_" variable (:default-value ("$(am__v_GEN_$(AM_DEFAULT_VERBOSITY))")) nil [13497 13547])
            ("am__v_GEN_0" variable (:default-value ("@echo" "\"  GEN     \"" "$@;")) nil [13547 13584])
            ("am__v_GEN_1" variable nil nil [13584 13598])
            ("AM_V_at" variable (:default-value ("$(am__v_at_$(V))")) nil [13599 13626])
            ("am__v_at_" variable (:default-value ("$(am__v_at_$(AM_DEFAULT_VERBOSITY))")) nil [13626 13674])
            ("am__v_at_0" variable (:default-value ("@")) nil [13674 13689])
            ("am__v_at_1" variable nil nil [13689 13702])
            ("NON_OBJC_CFLAGS" variable (:default-value ("-Wignored-attributes" "-Wignored-qualifiers" "-Wopenmp-simd")) nil [13775 13849])
            ("EMACS_CFLAGS" variable (:default-value ("-Demacs" "$(MYCPPFLAGS)" "-I." "-I$(srcdir)" "-I$(lib)" "-I$(top_srcdir)/lib" "$(C_SWITCH_MACHINE)" "$(C_SWITCH_SYSTEM)" "$(C_SWITCH_X_SITE)" "$(GNUSTEP_CFLAGS)" "$(CFLAGS_SOUND)" "$(RSVG_CFLAGS)" "$(IMAGEMAGICK_CFLAGS)" "$(PNG_CFLAGS)" "$(LIBXML2_CFLAGS)" "$(DBUS_CFLAGS)" "$(XRANDR_CFLAGS)" "$(XINERAMA_CFLAGS)" "$(XFIXES_CFLAGS)" "$(XDBE_CFLAGS)" "$(WEBKIT_CFLAGS)" "$(LCMS2_CFLAGS)" "$(SETTINGS_CFLAGS)" "$(FREETYPE_CFLAGS)" "$(FONTCONFIG_CFLAGS)" "$(LIBOTF_CFLAGS)" "$(M17N_FLT_CFLAGS)" "$(DEPFLAGS)" "$(LIBSYSTEMD_CFLAGS)" "$(JSON_CFLAGS)" "$(LIBGNUTLS_CFLAGS)" "$(NOTIFY_CFLAGS)" "$(CAIRO_CFLAGS)" "$(WERROR_CFLAGS)")) nil [14019 14633])
            ("ALL_CFLAGS" variable (:default-value ("$(EMACS_CFLAGS)" "$(WARN_CFLAGS)" "$(CFLAGS)")) nil [14633 14687])
            ("ALL_OBJC_CFLAGS" variable (:default-value ("$(EMACS_CFLAGS)" "$(filter-out $(NON_OBJC_CFLAGS),$(WARN_CFLAGS))" "$(CFLAGS)" "$(GNU_OBJC_CFLAGS)")) nil [14687 14806])
            (".SUFFIXES" function (:arguments (".m")) nil [14807 14821])
            (".c.o" function nil nil [14821 14896])
            (".m.o" function nil nil [14896 14976])
            ("base_obj" variable (:default-value ("dispnew.o" "frame.o" "scroll.o" "xdisp.o" "menu.o" "$(XMENU_OBJ)" "window.o" "charset.o" "coding.o" "category.o" "ccl.o" "character.o" "chartab.o" "bidi.o" "$(CM_OBJ)" "term.o" "terminal.o" "xfaces.o" "$(XOBJ)" "$(GTK_OBJ)" "$(DBUS_OBJ)" "emacs.o" "keyboard.o" "macros.o" "keymap.o" "sysdep.o" "buffer.o" "filelock.o" "insdel.o" "marker.o" "minibuf.o" "fileio.o" "dired.o" "cmds.o" "casetab.o" "casefiddle.o" "indent.o" "search.o" "regex.o" "undo.o" "alloc.o" "data.o" "doc.o" "editfns.o" "callint.o" "eval.o" "floatfns.o" "fns.o" "font.o" "print.o" "lread.o" "$(MODULES_OBJ)" "syntax.o" "$(UNEXEC_OBJ)" "bytecode.o" "process.o" "gnutls.o" "callproc.o" "region-cache.o" "sound.o" "atimer.o" "doprnt.o" "intervals.o" "textprop.o" "composite.o" "xml.o" "lcms.o" "$(NOTIFY_OBJ)" "$(XWIDGETS_OBJ)" "profiler.o" "decompress.o" "thread.o" "systhread.o" "$(if $(HYBRID_MALLOC),sheap.o)" "$(MSDOS_OBJ)" "$(MSDOS_X_OBJ)" "$(NS_OBJ)" "$(CYGWIN_OBJ)" "$(FONT_OBJ)" "$(W32_OBJ)" "$(WINDOW_SYSTEM_OBJ)" "$(XGSELOBJ)" "$(JSON_OBJ)")) nil [15083 16001])
            ("obj" variable (:default-value ("$(base_obj)" "$(NS_OBJC_OBJ)")) nil [16001 16034])
            ("SOME_MACHINE_OBJECTS" variable (:default-value ("dosfns.o" "msdos.o" "xterm.o" "xfns.o" "xmenu.o" "xselect.o" "xrdb.o" "xsmfns.o" "fringe.o" "image.o" "fontset.o" "dbusbind.o" "cygw32.o" "nsterm.o" "nsfns.o" "nsmenu.o" "nsselect.o" "nsimage.o" "nsfont.o" "macfont.o" "w32.o" "w32console.o" "w32cygwinx.o" "w32fns.o" "w32heap.o" "w32inevt.o" "w32notify.o" "w32menu.o" "w32proc.o" "w32reg.o" "w32select.o" "w32term.o" "w32xfns.o" "w16select.o" "widget.o" "xfont.o" "ftfont.o" "xftfont.o" "ftxfont.o" "gtkutil.o" "xsettings.o" "xgselect.o" "termcap.o")) nil [16277 16743])
            ("GMALLOC_OBJ" variable (:default-value ("gmalloc.o")) nil [16808 16830])
            ("VMLIMIT_OBJ" variable nil nil [16876 16889])
            ("RALLOC_OBJ" variable nil nil [16946 16958])
            ("PRE_ALLOC_OBJ" variable (:default-value ("lastfile.o")) nil [17011 17036])
            ("POST_ALLOC_OBJ" variable nil nil [17088 17104])
            ("otherobj" variable (:default-value ("$(TERMCAP_OBJ)" "$(PRE_ALLOC_OBJ)" "$(GMALLOC_OBJ)" "$(RALLOC_OBJ)" "$(POST_ALLOC_OBJ)" "$(WIDGET_OBJ)" "$(LIBOBJS)")) nil [17173 17291])
            ("FIRSTFILE_OBJ" variable nil nil [17421 17436])
            ("ALLOBJS" variable (:default-value ("$(FIRSTFILE_OBJ)" "$(VMLIMIT_OBJ)" "$(obj)" "$(otherobj)")) nil [17436 17497])
            ("all" function (:arguments ("emacs$(EXEEXT)" "$(OTHER_FILES)")) nil [17537 17572])
            (".PHONY" function (:arguments ("all")) nil [17572 17584])
            ("AUTO_DEPEND" variable (:default-value ("yes")) nil [17585 17603])
            ("DEPDIR" variable (:default-value ("deps")) nil [17603 17617])
            ("shortlisp" variable nil nil [18626 18638])
            ("lisp.mk" function (:arguments ("$(lispsource)/loadup.el")) nil [18638 18843])
            ("shortlisp_filter" variable (:default-value ("leim/leim-list.el" "site-load.elc" "site-init.elc")) nil [18861 18926])
            ("shortlisp" variable (:default-value ("$(filter-out ${shortlisp_filter},${shortlisp})")) nil [18926 18986])
            ("shortlisp" variable (:default-value ("loaddefs.el" "loadup.el" "$(sort ${shortlisp})")) nil [19193 19249])
            ("lisp" variable (:default-value ("$(addprefix ${lispsource}/,${shortlisp})")) nil [19249 19297])
            ("LIBES" variable (:default-value ("$(LIBS)" "$(W32_LIBS)" "$(LIBS_GNUSTEP)" "$(LIBX_BASE)" "$(LIBIMAGE)" "$(LIBX_OTHER)" "$(LIBSOUND)" "$(RSVG_LIBS)" "$(IMAGEMAGICK_LIBS)" "$(LIB_ACL)" "$(LIB_CLOCK_GETTIME)" "$(WEBKIT_LIBS)" "$(LIB_EACCESS)" "$(LIB_FDATASYNC)" "$(LIB_TIMER_TIME)" "$(DBUS_LIBS)" "$(LIB_EXECINFO)" "$(XRANDR_LIBS)" "$(XINERAMA_LIBS)" "$(XFIXES_LIBS)" "$(XDBE_LIBS)" "$(LIBXML2_LIBS)" "$(LIBGPM)" "$(LIBS_SYSTEM)" "$(CAIRO_LIBS)" "$(LIBS_TERMCAP)" "$(GETLOADAVG_LIBS)" "$(SETTINGS_LIBS)" "$(LIBSELINUX_LIBS)" "$(FREETYPE_LIBS)" "$(FONTCONFIG_LIBS)" "$(LIBOTF_LIBS)" "$(M17N_FLT_LIBS)" "$(LIBGNUTLS_LIBS)" "$(LIB_PTHREAD)" "$(GETADDRINFO_A_LIBS)" "$(LCMS2_LIBS)" "$(NOTIFY_LIBS)" "$(LIB_MATH)" "$(LIBZ)" "$(LIBMODULES)" "$(LIBSYSTEMD_LIBS)" "$(JSON_LIBS)")) nil [19347 20065])
            ("$(lispsource)" function (:arguments ("bootstrap-emacs$(EXEEXT)" "FORCE")) nil [20319 20475])
            ("$(srcdir)" function (:arguments ("bootstrap-emacs$(EXEEXT)" "FORCE")) nil [20319 20475])
            ("$(lispsource)" function (:arguments ("|" "$(lispsource)/international/charprop.el")) nil [20651 20774])
            ("$(lispsource)" function (:arguments ("|" "$(lispsource)/international/charprop.el")) nil [20651 20774])
            ("lispintdir" variable (:default-value ("${lispsource}/international")) nil [20775 20816])
            ("${lispintdir}" function (:arguments ("FORCE")) nil [20816 20917])
            ("${lispintdir}" function (:arguments ("FORCE")) nil [20816 20917])
            ("charsets" variable (:default-value ("${top_srcdir}/admin/charsets/charsets.stamp")) nil [20918 20973])
            ("${charsets}" function (:arguments ("FORCE")) nil [20973 21026])
            ("charscript" variable (:default-value ("${lispintdir}/charscript.el")) nil [21027 21068])
            ("${charscript}" function (:arguments ("FORCE")) nil [21068 21131])
            ("${lispintdir}" function (:arguments ("${charscript:.el=.elc}")) nil [21132 21185])
            ("emacs" function (:arguments ("temacs$(EXEEXT)" "lisp.mk" "$(etc)/DOC" "$(lisp)" "$(lispsource)/international/charprop.el" "${charsets}")) nil [21524 21671])
            ("$(etc)" function (:arguments ("lisp.mk" "$(libsrc)/make-docfile$(EXEEXT)" "$(obj)" "$(lisp)")) nil [22459 22764])
            ("$(libsrc)" function (:arguments ("$(lib)/libgnu.a")) nil [22765 22858])
            ("buildobj.h" function (:arguments ("Makefile")) nil [22859 23038])
            ("GLOBAL_SOURCES" variable (:default-value ("$(base_obj:.o=.c)" "$(NS_OBJC_OBJ:.o=.m)")) nil [23039 23095])
            ("AM_V_GLOBALS" variable (:default-value ("$(am__v_GLOBALS_$(V))")) nil [23096 23133])
            ("am__v_GLOBALS_" variable (:default-value ("$(am__v_GLOBALS_$(AM_DEFAULT_VERBOSITY))")) nil [23133 23191])
            ("am__v_GLOBALS_0" variable (:default-value ("@echo" "\"  GEN     \"" "globals.h;")) nil [23191 23239])
            ("am__v_GLOBALS_1" variable nil nil [23239 23257])
            ("gl-stamp" function (:arguments ("$(libsrc)/make-docfile$(EXEEXT)" "$(GLOBAL_SOURCES)")) nil [23258 23497])
            ("globals.h" function (:arguments ("gl-stamp;" "@true")) nil [23498 23525])
            ("$(ALLOBJS)" function (:arguments ("globals.h")) nil [23526 23548])
            ("LIBEGNU_ARCHIVE" variable (:default-value ("$(lib)/lib$(if $(HYBRID_MALLOC),e)gnu.a")) nil [23549 23607])
            ("$(LIBEGNU_ARCHIVE)" function (:arguments ("$(config_h)")) nil [23608 23663])
            ("temacs" function (:arguments ("$(LIBXMENU)" "$(ALLOBJS)" "$(LIBEGNU_ARCHIVE)" "$(EMACSRES)" "${charsets}" "${charscript}")) nil [23917 24177])
            ("$(lwlibdir)" function (:arguments ("$(config_h)" "globals.h" "lisp.h" "FORCE")) nil [24413 24501])
            ("$(oldXMenudir)" function (:arguments ("FORCE")) nil [24501 24576])
            ("FORCE" function nil nil [24576 24583])
            (".PHONY" function (:arguments ("FORCE")) nil [24583 24597])
            (".PRECIOUS" function (:arguments ("../config.status" "Makefile")) nil [24598 24635])
            ("../config.status" function (:arguments ("$(top_srcdir)/configure.ac" "$(top_srcdir)/m4/*.m4")) nil [24635 24730])
            ("Makefile" function (:arguments ("../config.status" "$(srcdir)/Makefile.in")) nil [24730 24801])
            ("doc.o" function (:arguments ("buildobj.h")) nil [24802 24820])
            ("emacs.res" function (:arguments ("FORCE")) nil [24821 24873])
            (".PHONY" function (:arguments ("ns-app")) nil [24874 24889])
            ("ns-app" function (:arguments ("emacs$(EXEEXT)")) nil [24889 24940])
            (".PHONY" function (:arguments ("mostlyclean" "clean" "bootstrap-clean" "distclean" "maintainer-clean")) nil [24941 25010])
            (".PHONY" function (:arguments ("versionclean" "extraclean")) nil [25010 25042])
            ("mostlyclean" function nil nil [25043 25238])
            ("clean" function (:arguments ("mostlyclean")) nil [25238 25317])
            ("bootstrap-clean" function (:arguments ("clean")) nil [25500 25758])
            ("distclean" function (:arguments ("bootstrap-clean")) nil [25759 25828])
            ("maintainer-clean" function (:arguments ("distclean")) nil [25829 25869])
            ("versionclean" function nil nil [25869 25944])
            ("extraclean" function (:arguments ("distclean")) nil [25944 25981])
            ("ETAGS" variable (:default-value ("../lib-src/etags${EXEEXT}")) nil [25983 26017])
            ("${ETAGS}" function (:arguments ("FORCE")) nil [26018 26070])
            ("ctagsfiles1" variable (:default-value ("$(wildcard ${srcdir}/*.[hc])")) nil [26071 26114])
            ("ctagsfiles2" variable (:default-value ("$(wildcard ${srcdir}/*.m)")) nil [26114 26154])
            ("TAGS" function (:arguments ("${ETAGS}" "$(ctagsfiles1)" "$(ctagsfiles2)")) nil [26393 26808])
            ("../lisp/TAGS" function (:arguments ("FORCE")) nil [26934 26996])
            ("$(lwlibdir)" function (:arguments ("FORCE")) nil [26997 27067])
            ("tags" function (:arguments ("TAGS" "../lisp/TAGS" "$(lwlibdir)/TAGS")) nil [27068 27109])
            (".PHONY" function (:arguments ("tags")) nil [27109 27122])
            ("%.elc" function (:arguments ("%.el" "|" "bootstrap-emacs$(EXEEXT)")) nil [28110 28210])
            ("VCSWITNESS" variable nil nil [28434 28447])
            ("$(lispsource)" function (:arguments ("$(VCSWITNESS)" "|" "bootstrap-emacs$(EXEEXT)")) nil [28448 28571])
            ("bootstrap-emacs" function (:arguments ("temacs$(EXEEXT)")) nil [28677 28754]))          
      :file "Makefile"
      :pointmax 29098
      :fsize 29097
      :lastmodtime '(23311 28050 750273 729000)
      :unmatched-syntax '((shell-command 29040 . 29097) (bol 29039 . 29039) (shell-command 28976 . 29038) (bol 28975 . 28975) (shell-command 28945 . 28968) (bol 28944 . 28944) (ENDIF 28938 . 28943) (bol 28936 . 28936) (shell-command 28904 . 28935) (bol 28903 . 28903) (semantic-list 28883 . 28902) (IFNEQ 28877 . 28882) (bol 28875 . 28875) (shell-command 28812 . 28874) (bol 28811 . 28811) (shell-command 28781 . 28805) (bol 28780 . 28780) (ENDIF 24261 . 24266) (bol 24259 . 24259) (shell-command 24236 . 24258) (bol 24235 . 24235) (semantic-list 24212 . 24234) (IFNEQ 24206 . 24211) (bol 24204 . 24204) (shell-command 21849 . 21882) (bol 21848 . 21848) (ENDIF 21842 . 21847) (bol 21840 . 21840) (shell-command 21820 . 21839) (bol 21819 . 21819) (semantic-list 21799 . 21818) (IFNEQ 21793 . 21798) (bol 21791 . 21791) (shell-command 21729 . 21790) (bol 21728 . 21728) (shell-command 21698 . 21722) (bol 21697 . 21697) (symbol 18853 . 18860) (symbol 18844 . 18852) (bol 18844 . 18844) (symbol 17761 . 17769) (semantic-list 17753 . 17761) (punctuation 17752 . 17753) (INCLUDE 17744 . 17751) (bol 17742 . 17742) (punctuation 17740 . 17741) (symbol 17731 . 17739) (bol 17729 . 17729) (semantic-list 17696 . 17723) (punctuation 17695 . 17696) (symbol 17686 . 17694) (bol 17684 . 17684) (symbol 17680 . 17683) (symbol 17676 . 17679) (punctuation 17675 . 17676) (symbol 17674 . 17675) (semantic-list 17666 . 17674) (punctuation 17665 . 17666) (symbol 17661 . 17664) (symbol 17656 . 17660) (punctuation 17654 . 17655) (symbol 17645 . 17653) (bol 17643 . 17643)))
    (semanticdb-table "semanticdb-table-14443d0"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("SHELL" variable (:default-value ("@SHELL@")) nil [977 993])
            ("srcdir" variable (:default-value ("@srcdir@")) nil [1129 1147])
            ("top_srcdir" variable (:default-value ("@top_srcdir@")) nil [1147 1173])
            ("abs_top_srcdir" variable (:default-value ("@abs_top_srcdir@")) nil [1204 1236])
            ("VPATH" variable (:default-value ("$(srcdir)")) nil [1236 1254])
            ("CC" variable (:default-value ("@CC@")) nil [1254 1264])
            ("CFLAGS" variable (:default-value ("@CFLAGS@")) nil [1264 1282])
            ("CPPFLAGS" variable (:default-value ("@CPPFLAGS@")) nil [1282 1304])
            ("LDFLAGS" variable (:default-value ("@LDFLAGS@")) nil [1304 1324])
            ("EXEEXT" variable (:default-value ("@EXEEXT@")) nil [1324 1342])
            ("version" variable (:default-value ("@version@")) nil [1342 1362])
            ("MKDIR_P" variable (:default-value ("@MKDIR_P@")) nil [1362 1382])
            ("LIBOBJS" variable (:default-value ("@LIBOBJS@")) nil [1532 1552])
            ("lispsource" variable (:default-value ("$(top_srcdir)/lisp")) nil [1553 1585])
            ("lib" variable (:default-value ("../lib")) nil [1585 1598])
            ("libsrc" variable (:default-value ("../lib-src")) nil [1598 1618])
            ("etc" variable (:default-value ("../etc")) nil [1618 1631])
            ("oldXMenudir" variable (:default-value ("../oldXMenu")) nil [1631 1657])
            ("lwlibdir" variable (:default-value ("../lwlib")) nil [1657 1677])
            ("config_h" variable (:default-value ("config.h" "$(srcdir)/conf_post.h")) nil [1727 1769])
            ("bootstrap_exe" variable (:default-value ("../src/bootstrap-emacs$(EXEEXT)")) nil [1770 1818])
            ("OTHER_FILES" variable (:default-value ("@OTHER_FILES@")) nil [1853 1881])
            ("PROFILING_CFLAGS" variable (:default-value ("@PROFILING_CFLAGS@")) nil [1920 1958])
            ("WARN_CFLAGS" variable (:default-value ("@WARN_CFLAGS@")) nil [2017 2045])
            ("WERROR_CFLAGS" variable (:default-value ("@WERROR_CFLAGS@")) nil [2045 2077])
            ("C_SWITCH_MACHINE" variable (:default-value ("@C_SWITCH_MACHINE@")) nil [2106 2142])
            ("C_SWITCH_SYSTEM" variable (:default-value ("@C_SWITCH_SYSTEM@")) nil [2169 2203])
            ("GNUSTEP_CFLAGS" variable (:default-value ("@GNUSTEP_CFLAGS@")) nil [2204 2236])
            ("PNG_CFLAGS" variable (:default-value ("@PNG_CFLAGS@")) nil [2236 2260])
            ("C_SWITCH_X_SITE" variable (:default-value ("@C_SWITCH_X_SITE@")) nil [2595 2629])
            ("LD_SWITCH_X_SITE" variable nil nil [3048 3066])
            ("LD_SWITCH_X_SITE_RPATH" variable (:default-value ("@LD_SWITCH_X_SITE_RPATH@")) nil [3187 3235])
            ("LD_SWITCH_SYSTEM" variable (:default-value ("@LD_SWITCH_SYSTEM@")) nil [3264 3300])
            ("LD_SWITCH_SYSTEM_TEMACS" variable (:default-value ("@LD_SWITCH_SYSTEM_TEMACS@")) nil [3393 3443])
            ("TEMACS_LDFLAGS" variable (:default-value ("$(LD_SWITCH_SYSTEM)" "$(LD_SWITCH_SYSTEM_TEMACS)")) nil [3484 3548])
            ("PAXCTL" variable (:default-value ("@PAXCTL@")) nil [3817 3835])
            ("SETFATTR" variable (:default-value ("@SETFATTR@")) nil [3835 3857])
            ("PAXCTL_dumped" variable (:default-value ("@PAXCTL_dumped@")) nil [3931 3963])
            ("PAXCTL_notdumped" variable (:default-value ("@PAXCTL_notdumped@")) nil [3963 4001])
            ("LIBS_SYSTEM" variable (:default-value ("@LIBS_SYSTEM@")) nil [4060 4086])
            ("LIB_MATH" variable (:default-value ("@LIB_MATH@")) nil [4105 4125])
            ("LIB_PTHREAD" variable (:default-value ("@LIB_PTHREAD@")) nil [4150 4176])
            ("LIBIMAGE" variable (:default-value ("@LIBTIFF@" "@LIBJPEG@" "@LIBPNG@" "@LIBGIF@" "@LIBXPM@")) nil [4177 4233])
            ("XCB_LIBS" variable (:default-value ("@XCB_LIBS@")) nil [4234 4254])
            ("XFT_LIBS" variable (:default-value ("@XFT_LIBS@")) nil [4254 4274])
            ("LIBX_EXTRA" variable (:default-value ("-lX11" "$(XCB_LIBS)" "$(XFT_LIBS)")) nil [4274 4315])
            ("FONTCONFIG_CFLAGS" variable (:default-value ("@FONTCONFIG_CFLAGS@")) nil [4316 4356])
            ("FONTCONFIG_LIBS" variable (:default-value ("@FONTCONFIG_LIBS@")) nil [4356 4392])
            ("FREETYPE_CFLAGS" variable (:default-value ("@FREETYPE_CFLAGS@")) nil [4392 4428])
            ("FREETYPE_LIBS" variable (:default-value ("@FREETYPE_LIBS@")) nil [4428 4460])
            ("LIBOTF_CFLAGS" variable (:default-value ("@LIBOTF_CFLAGS@")) nil [4460 4492])
            ("LIBOTF_LIBS" variable (:default-value ("@LIBOTF_LIBS@")) nil [4492 4520])
            ("M17N_FLT_CFLAGS" variable (:default-value ("@M17N_FLT_CFLAGS@")) nil [4520 4556])
            ("M17N_FLT_LIBS" variable (:default-value ("@M17N_FLT_LIBS@")) nil [4556 4588])
            ("LIB_ACL" variable (:default-value ("@LIB_ACL@")) nil [4589 4607])
            ("LIB_CLOCK_GETTIME" variable (:default-value ("@LIB_CLOCK_GETTIME@")) nil [4607 4645])
            ("LIB_EACCESS" variable (:default-value ("@LIB_EACCESS@")) nil [4645 4671])
            ("LIB_FDATASYNC" variable (:default-value ("@LIB_FDATASYNC@")) nil [4671 4701])
            ("LIB_TIMER_TIME" variable (:default-value ("@LIB_TIMER_TIME@")) nil [4701 4733])
            ("DBUS_CFLAGS" variable (:default-value ("@DBUS_CFLAGS@")) nil [4734 4762])
            ("DBUS_LIBS" variable (:default-value ("@DBUS_LIBS@")) nil [4762 4786])
            ("DBUS_OBJ" variable (:default-value ("@DBUS_OBJ@")) nil [4826 4848])
            ("XWIDGETS_OBJ" variable (:default-value ("@XWIDGETS_OBJ@")) nil [4893 4923])
            ("LIB_EXECINFO" variable (:default-value ("@LIB_EXECINFO@")) nil [4924 4952])
            ("SETTINGS_CFLAGS" variable (:default-value ("@SETTINGS_CFLAGS@")) nil [4953 4989])
            ("SETTINGS_LIBS" variable (:default-value ("@SETTINGS_LIBS@")) nil [4989 5021])
            ("GTK_OBJ" variable (:default-value ("@GTK_OBJ@")) nil [5059 5077])
            ("NOTIFY_OBJ" variable (:default-value ("@NOTIFY_OBJ@")) nil [5208 5234])
            ("NOTIFY_CFLAGS" variable (:default-value ("@NOTIFY_CFLAGS@")) nil [5234 5266])
            ("NOTIFY_LIBS" variable (:default-value ("@NOTIFY_LIBS@")) nil [5266 5294])
            ("LIBS_TERMCAP" variable (:default-value ("@LIBS_TERMCAP@")) nil [5343 5371])
            ("TERMCAP_OBJ" variable (:default-value ("@TERMCAP_OBJ@")) nil [5443 5469])
            ("LIBXMU" variable (:default-value ("@LIBXMU@")) nil [5470 5486])
            ("LIBXSM" variable (:default-value ("@LIBXSM@")) nil [5487 5503])
            ("LIBXTR6" variable (:default-value ("@LIBXTR6@")) nil [5504 5522])
            ("LIBXT_OTHER" variable (:default-value ("@LIBXT_OTHER@")) nil [5625 5651])
            ("LIBXMENU" variable (:default-value ("@LIBXMENU@")) nil [5771 5791])
            ("XMENU_OBJ" variable (:default-value ("@XMENU_OBJ@")) nil [5834 5856])
            ("XOBJ" variable (:default-value ("@XOBJ@")) nil [5946 5958])
            ("XGSELOBJ" variable (:default-value ("@XGSELOBJ@")) nil [6005 6025])
            ("TOOLKIT_LIBW" variable (:default-value ("@TOOLKIT_LIBW@")) nil [6026 6054])
            ("LIBXT" variable (:default-value ("$(TOOLKIT_LIBW)" "$(LIBXT_OTHER)")) nil [6096 6133])
            ("LIBX_OTHER" variable (:default-value ("@LIBX_OTHER@")) nil [6186 6210])
            ("LIBX_BASE" variable (:default-value ("$(LIBXMENU)" "$(LD_SWITCH_X_SITE)")) nil [6441 6483])
            ("LIBS_GNUSTEP" variable (:default-value ("$(patsubst -specs=%-hardened-ld,,@LIBS_GNUSTEP@)")) nil [6510 6572])
            ("LIBSOUND" variable (:default-value ("@LIBSOUND@")) nil [6573 6594])
            ("CFLAGS_SOUND" variable (:default-value ("@CFLAGS_SOUND@")) nil [6594 6623])
            ("RSVG_LIBS" variable (:default-value ("@RSVG_LIBS@")) nil [6624 6647])
            ("RSVG_CFLAGS" variable (:default-value ("@RSVG_CFLAGS@")) nil [6647 6674])
            ("WEBKIT_LIBS" variable (:default-value ("@WEBKIT_LIBS@")) nil [6675 6702])
            ("WEBKIT_CFLAGS" variable (:default-value ("@WEBKIT_CFLAGS@")) nil [6702 6733])
            ("CAIRO_LIBS" variable (:default-value ("@CAIRO_LIBS@")) nil [6734 6759])
            ("CAIRO_CFLAGS" variable (:default-value ("@CAIRO_CFLAGS@")) nil [6759 6788])
            ("IMAGEMAGICK_LIBS" variable (:default-value ("@IMAGEMAGICK_LIBS@")) nil [6789 6826])
            ("IMAGEMAGICK_CFLAGS" variable (:default-value ("@IMAGEMAGICK_CFLAGS@")) nil [6826 6867])
            ("LIBXML2_LIBS" variable (:default-value ("@LIBXML2_LIBS@")) nil [6868 6898])
            ("LIBXML2_CFLAGS" variable (:default-value ("@LIBXML2_CFLAGS@")) nil [6898 6932])
            ("GETADDRINFO_A_LIBS" variable (:default-value ("@GETADDRINFO_A_LIBS@")) nil [6933 6975])
            ("LCMS2_LIBS" variable (:default-value ("@LCMS2_LIBS@")) nil [6976 7002])
            ("LCMS2_CFLAGS" variable (:default-value ("@LCMS2_CFLAGS@")) nil [7002 7032])
            ("LIBZ" variable (:default-value ("@LIBZ@")) nil [7033 7047])
            ("LIBMODULES" variable (:default-value ("@LIBMODULES@")) nil [7104 7130])
            ("MODULES_OBJ" variable (:default-value ("@MODULES_OBJ@")) nil [7188 7216])
            ("XRANDR_LIBS" variable (:default-value ("@XRANDR_LIBS@")) nil [7217 7245])
            ("XRANDR_CFLAGS" variable (:default-value ("@XRANDR_CFLAGS@")) nil [7245 7277])
            ("XINERAMA_LIBS" variable (:default-value ("@XINERAMA_LIBS@")) nil [7278 7310])
            ("XINERAMA_CFLAGS" variable (:default-value ("@XINERAMA_CFLAGS@")) nil [7310 7346])
            ("XFIXES_LIBS" variable (:default-value ("@XFIXES_LIBS@")) nil [7347 7375])
            ("XFIXES_CFLAGS" variable (:default-value ("@XFIXES_CFLAGS@")) nil [7375 7407])
            ("XDBE_LIBS" variable (:default-value ("@XDBE_LIBS@")) nil [7408 7432])
            ("XDBE_CFLAGS" variable (:default-value ("@XDBE_CFLAGS@")) nil [7432 7460])
            ("WIDGET_OBJ" variable (:default-value ("@WIDGET_OBJ@")) nil [7508 7532])
            ("HYBRID_MALLOC" variable (:default-value ("@HYBRID_MALLOC@")) nil [7533 7565])
            ("CYGWIN_OBJ" variable (:default-value ("@CYGWIN_OBJ@")) nil [7606 7630])
            ("WINDOW_SYSTEM_OBJ" variable (:default-value ("@WINDOW_SYSTEM_OBJ@")) nil [7690 7728])
            ("MSDOS_OBJ" variable nil nil [7771 7783])
            ("MSDOS_X_OBJ" variable nil nil [7836 7850])
            ("NS_OBJ" variable (:default-value ("@NS_OBJ@")) nil [7851 7867])
            ("NS_OBJC_OBJ" variable (:default-value ("@NS_OBJC_OBJ@")) nil [7941 7967])
            ("GNU_OBJC_CFLAGS" variable (:default-value ("$(patsubst -specs=%-hardened-cc1,,@GNU_OBJC_CFLAGS@)")) nil [7993 8062])
            ("W32_OBJ" variable (:default-value ("@W32_OBJ@")) nil [8262 8280])
            ("W32_LIBS" variable (:default-value ("@W32_LIBS@")) nil [8430 8450])
            ("EMACSRES" variable (:default-value ("@EMACSRES@")) nil [8476 8498])
            ("W32_RES_LINK" variable (:default-value ("@W32_RES_LINK@")) nil [8628 8656])
            ("FONT_OBJ" variable (:default-value ("@FONT_OBJ@")) nil [8836 8856])
            ("CM_OBJ" variable (:default-value ("@CM_OBJ@")) nil [8896 8912])
            ("LIBGPM" variable (:default-value ("@LIBGPM@")) nil [8913 8931])
            ("LIBSELINUX_LIBS" variable (:default-value ("@LIBSELINUX_LIBS@")) nil [8932 8968])
            ("LIBGNUTLS_LIBS" variable (:default-value ("@LIBGNUTLS_LIBS@")) nil [8969 9003])
            ("LIBGNUTLS_CFLAGS" variable (:default-value ("@LIBGNUTLS_CFLAGS@")) nil [9003 9041])
            ("LIBSYSTEMD_LIBS" variable (:default-value ("@LIBSYSTEMD_LIBS@")) nil [9042 9078])
            ("LIBSYSTEMD_CFLAGS" variable (:default-value ("@LIBSYSTEMD_CFLAGS@")) nil [9078 9118])
            ("JSON_LIBS" variable (:default-value ("@JSON_LIBS@")) nil [9119 9143])
            ("JSON_CFLAGS" variable (:default-value ("@JSON_CFLAGS@")) nil [9143 9171])
            ("JSON_OBJ" variable (:default-value ("@JSON_OBJ@")) nil [9171 9193])
            ("INTERVALS_H" variable (:default-value ("dispextern.h" "intervals.h" "composite.h")) nil [9194 9245])
            ("GETLOADAVG_LIBS" variable (:default-value ("@GETLOADAVG_LIBS@")) nil [9246 9282])
            ("RUN_TEMACS" variable (:default-value ("./temacs")) nil [9283 9305])
            ("BUILD_DETAILS" variable (:default-value ("@BUILD_DETAILS@")) nil [9378 9410])
            ("UNEXEC_OBJ" variable (:default-value ("@UNEXEC_OBJ@")) nil [9411 9437])
            ("CANNOT_DUMP" variable (:default-value ("@CANNOT_DUMP@")) nil [9438 9464])
            ("AM_DEFAULT_VERBOSITY" variable (:default-value ("@AM_DEFAULT_VERBOSITY@")) nil [9485 9531])
            ("AM_V_CC" variable (:default-value ("$(am__v_CC_@AM_V@)")) nil [9532 9561])
            ("am__v_CC_" variable (:default-value ("$(am__v_CC_@AM_DEFAULT_V@)")) nil [9561 9600])
            ("am__v_CC_0" variable (:default-value ("@echo" "\"  CC      \"" "$@;")) nil [9600 9636])
            ("am__v_CC_1" variable nil nil [9636 9649])
            ("AM_V_CCLD" variable (:default-value ("$(am__v_CCLD_@AM_V@)")) nil [9650 9683])
            ("am__v_CCLD_" variable (:default-value ("$(am__v_CCLD_@AM_DEFAULT_V@)")) nil [9683 9726])
            ("am__v_CCLD_0" variable (:default-value ("@echo" "\"  CCLD    \"" "$@;")) nil [9726 9764])
            ("am__v_CCLD_1" variable nil nil [9764 9779])
            ("AM_V_GEN" variable (:default-value ("$(am__v_GEN_@AM_V@)")) nil [9780 9811])
            ("am__v_GEN_" variable (:default-value ("$(am__v_GEN_@AM_DEFAULT_V@)")) nil [9811 9852])
            ("am__v_GEN_0" variable (:default-value ("@echo" "\"  GEN     \"" "$@;")) nil [9852 9889])
            ("am__v_GEN_1" variable nil nil [9889 9903])
            ("AM_V_at" variable (:default-value ("$(am__v_at_@AM_V@)")) nil [9904 9933])
            ("am__v_at_" variable (:default-value ("$(am__v_at_@AM_DEFAULT_V@)")) nil [9933 9972])
            ("am__v_at_0" variable (:default-value ("@")) nil [9972 9987])
            ("am__v_at_1" variable nil nil [9987 10000])
            ("NON_OBJC_CFLAGS" variable (:default-value ("-Wignored-attributes" "-Wignored-qualifiers" "-Wopenmp-simd")) nil [10073 10147])
            ("EMACS_CFLAGS" variable (:default-value ("-Demacs" "$(MYCPPFLAGS)" "-I." "-I$(srcdir)" "-I$(lib)" "-I$(top_srcdir)/lib" "$(C_SWITCH_MACHINE)" "$(C_SWITCH_SYSTEM)" "$(C_SWITCH_X_SITE)" "$(GNUSTEP_CFLAGS)" "$(CFLAGS_SOUND)" "$(RSVG_CFLAGS)" "$(IMAGEMAGICK_CFLAGS)" "$(PNG_CFLAGS)" "$(LIBXML2_CFLAGS)" "$(DBUS_CFLAGS)" "$(XRANDR_CFLAGS)" "$(XINERAMA_CFLAGS)" "$(XFIXES_CFLAGS)" "$(XDBE_CFLAGS)" "$(WEBKIT_CFLAGS)" "$(LCMS2_CFLAGS)" "$(SETTINGS_CFLAGS)" "$(FREETYPE_CFLAGS)" "$(FONTCONFIG_CFLAGS)" "$(LIBOTF_CFLAGS)" "$(M17N_FLT_CFLAGS)" "$(DEPFLAGS)" "$(LIBSYSTEMD_CFLAGS)" "$(JSON_CFLAGS)" "$(LIBGNUTLS_CFLAGS)" "$(NOTIFY_CFLAGS)" "$(CAIRO_CFLAGS)" "$(WERROR_CFLAGS)")) nil [10317 10931])
            ("ALL_CFLAGS" variable (:default-value ("$(EMACS_CFLAGS)" "$(WARN_CFLAGS)" "$(CFLAGS)")) nil [10931 10985])
            ("ALL_OBJC_CFLAGS" variable (:default-value ("$(EMACS_CFLAGS)" "$(filter-out $(NON_OBJC_CFLAGS),$(WARN_CFLAGS))" "$(CFLAGS)" "$(GNU_OBJC_CFLAGS)")) nil [10985 11104])
            (".SUFFIXES" function (:arguments (".m")) nil [11105 11119])
            (".c.o" function nil nil [11119 11194])
            (".m.o" function nil nil [11194 11274])
            ("base_obj" variable (:default-value ("dispnew.o" "frame.o" "scroll.o" "xdisp.o" "menu.o" "$(XMENU_OBJ)" "window.o" "charset.o" "coding.o" "category.o" "ccl.o" "character.o" "chartab.o" "bidi.o" "$(CM_OBJ)" "term.o" "terminal.o" "xfaces.o" "$(XOBJ)" "$(GTK_OBJ)" "$(DBUS_OBJ)" "emacs.o" "keyboard.o" "macros.o" "keymap.o" "sysdep.o" "buffer.o" "filelock.o" "insdel.o" "marker.o" "minibuf.o" "fileio.o" "dired.o" "cmds.o" "casetab.o" "casefiddle.o" "indent.o" "search.o" "regex.o" "undo.o" "alloc.o" "data.o" "doc.o" "editfns.o" "callint.o" "eval.o" "floatfns.o" "fns.o" "font.o" "print.o" "lread.o" "$(MODULES_OBJ)" "syntax.o" "$(UNEXEC_OBJ)" "bytecode.o" "process.o" "gnutls.o" "callproc.o" "region-cache.o" "sound.o" "atimer.o" "doprnt.o" "intervals.o" "textprop.o" "composite.o" "xml.o" "lcms.o" "$(NOTIFY_OBJ)" "$(XWIDGETS_OBJ)" "profiler.o" "decompress.o" "thread.o" "systhread.o" "$(if $(HYBRID_MALLOC),sheap.o)" "$(MSDOS_OBJ)" "$(MSDOS_X_OBJ)" "$(NS_OBJ)" "$(CYGWIN_OBJ)" "$(FONT_OBJ)" "$(W32_OBJ)" "$(WINDOW_SYSTEM_OBJ)" "$(XGSELOBJ)" "$(JSON_OBJ)")) nil [11381 12299])
            ("obj" variable (:default-value ("$(base_obj)" "$(NS_OBJC_OBJ)")) nil [12299 12332])
            ("SOME_MACHINE_OBJECTS" variable (:default-value ("dosfns.o" "msdos.o" "xterm.o" "xfns.o" "xmenu.o" "xselect.o" "xrdb.o" "xsmfns.o" "fringe.o" "image.o" "fontset.o" "dbusbind.o" "cygw32.o" "nsterm.o" "nsfns.o" "nsmenu.o" "nsselect.o" "nsimage.o" "nsfont.o" "macfont.o" "w32.o" "w32console.o" "w32cygwinx.o" "w32fns.o" "w32heap.o" "w32inevt.o" "w32notify.o" "w32menu.o" "w32proc.o" "w32reg.o" "w32select.o" "w32term.o" "w32xfns.o" "w16select.o" "widget.o" "xfont.o" "ftfont.o" "xftfont.o" "ftxfont.o" "gtkutil.o" "xsettings.o" "xgselect.o" "termcap.o")) nil [12575 13041])
            ("GMALLOC_OBJ" variable (:default-value ("@GMALLOC_OBJ@")) nil [13106 13132])
            ("VMLIMIT_OBJ" variable (:default-value ("@VMLIMIT_OBJ@")) nil [13178 13204])
            ("RALLOC_OBJ" variable (:default-value ("@RALLOC_OBJ@")) nil [13261 13285])
            ("PRE_ALLOC_OBJ" variable (:default-value ("@PRE_ALLOC_OBJ@")) nil [13338 13368])
            ("POST_ALLOC_OBJ" variable (:default-value ("@POST_ALLOC_OBJ@")) nil [13420 13452])
            ("otherobj" variable (:default-value ("$(TERMCAP_OBJ)" "$(PRE_ALLOC_OBJ)" "$(GMALLOC_OBJ)" "$(RALLOC_OBJ)" "$(POST_ALLOC_OBJ)" "$(WIDGET_OBJ)" "$(LIBOBJS)")) nil [13521 13639])
            ("FIRSTFILE_OBJ" variable (:default-value ("@FIRSTFILE_OBJ@")) nil [13769 13799])
            ("ALLOBJS" variable (:default-value ("$(FIRSTFILE_OBJ)" "$(VMLIMIT_OBJ)" "$(obj)" "$(otherobj)")) nil [13799 13860])
            ("all" function (:arguments ("emacs$(EXEEXT)" "$(OTHER_FILES)")) nil [13900 13935])
            (".PHONY" function (:arguments ("all")) nil [13935 13947])
            ("AUTO_DEPEND" variable (:default-value ("@AUTO_DEPEND@")) nil [13948 13976])
            ("DEPDIR" variable (:default-value ("deps")) nil [13976 13990])
            ("shortlisp" variable nil nil [14999 15011])
            ("lisp.mk" function (:arguments ("$(lispsource)/loadup.el")) nil [15011 15216])
            ("shortlisp_filter" variable (:default-value ("leim/leim-list.el" "site-load.elc" "site-init.elc")) nil [15234 15299])
            ("shortlisp" variable (:default-value ("$(filter-out ${shortlisp_filter},${shortlisp})")) nil [15299 15359])
            ("shortlisp" variable (:default-value ("loaddefs.el" "loadup.el" "$(sort ${shortlisp})")) nil [15566 15622])
            ("lisp" variable (:default-value ("$(addprefix ${lispsource}/,${shortlisp})")) nil [15622 15670])
            ("LIBES" variable (:default-value ("$(LIBS)" "$(W32_LIBS)" "$(LIBS_GNUSTEP)" "$(LIBX_BASE)" "$(LIBIMAGE)" "$(LIBX_OTHER)" "$(LIBSOUND)" "$(RSVG_LIBS)" "$(IMAGEMAGICK_LIBS)" "$(LIB_ACL)" "$(LIB_CLOCK_GETTIME)" "$(WEBKIT_LIBS)" "$(LIB_EACCESS)" "$(LIB_FDATASYNC)" "$(LIB_TIMER_TIME)" "$(DBUS_LIBS)" "$(LIB_EXECINFO)" "$(XRANDR_LIBS)" "$(XINERAMA_LIBS)" "$(XFIXES_LIBS)" "$(XDBE_LIBS)" "$(LIBXML2_LIBS)" "$(LIBGPM)" "$(LIBS_SYSTEM)" "$(CAIRO_LIBS)" "$(LIBS_TERMCAP)" "$(GETLOADAVG_LIBS)" "$(SETTINGS_LIBS)" "$(LIBSELINUX_LIBS)" "$(FREETYPE_LIBS)" "$(FONTCONFIG_LIBS)" "$(LIBOTF_LIBS)" "$(M17N_FLT_LIBS)" "$(LIBGNUTLS_LIBS)" "$(LIB_PTHREAD)" "$(GETADDRINFO_A_LIBS)" "$(LCMS2_LIBS)" "$(NOTIFY_LIBS)" "$(LIB_MATH)" "$(LIBZ)" "$(LIBMODULES)" "$(LIBSYSTEMD_LIBS)" "$(JSON_LIBS)")) nil [15720 16438])
            ("$(lispsource)" function (:arguments ("bootstrap-emacs$(EXEEXT)" "FORCE")) nil [16692 16848])
            ("$(srcdir)" function (:arguments ("bootstrap-emacs$(EXEEXT)" "FORCE")) nil [16692 16848])
            ("$(lispsource)" function (:arguments ("|" "$(lispsource)/international/charprop.el")) nil [17024 17147])
            ("$(lispsource)" function (:arguments ("|" "$(lispsource)/international/charprop.el")) nil [17024 17147])
            ("lispintdir" variable (:default-value ("${lispsource}/international")) nil [17148 17189])
            ("${lispintdir}" function (:arguments ("FORCE")) nil [17189 17290])
            ("${lispintdir}" function (:arguments ("FORCE")) nil [17189 17290])
            ("charsets" variable (:default-value ("${top_srcdir}/admin/charsets/charsets.stamp")) nil [17291 17346])
            ("${charsets}" function (:arguments ("FORCE")) nil [17346 17399])
            ("charscript" variable (:default-value ("${lispintdir}/charscript.el")) nil [17400 17441])
            ("${charscript}" function (:arguments ("FORCE")) nil [17441 17504])
            ("${lispintdir}" function (:arguments ("${charscript:.el=.elc}")) nil [17505 17558])
            ("emacs" function (:arguments ("temacs$(EXEEXT)" "lisp.mk" "$(etc)/DOC" "$(lisp)" "$(lispsource)/international/charprop.el" "${charsets}")) nil [17897 18044])
            ("$(etc)" function (:arguments ("lisp.mk" "$(libsrc)/make-docfile$(EXEEXT)" "$(obj)" "$(lisp)")) nil [18832 19137])
            ("$(libsrc)" function (:arguments ("$(lib)/libgnu.a")) nil [19138 19231])
            ("buildobj.h" function (:arguments ("Makefile")) nil [19232 19411])
            ("GLOBAL_SOURCES" variable (:default-value ("$(base_obj:.o=.c)" "$(NS_OBJC_OBJ:.o=.m)")) nil [19412 19468])
            ("AM_V_GLOBALS" variable (:default-value ("$(am__v_GLOBALS_@AM_V@)")) nil [19469 19508])
            ("am__v_GLOBALS_" variable (:default-value ("$(am__v_GLOBALS_@AM_DEFAULT_V@)")) nil [19508 19557])
            ("am__v_GLOBALS_0" variable (:default-value ("@echo" "\"  GEN     \"" "globals.h;")) nil [19557 19605])
            ("am__v_GLOBALS_1" variable nil nil [19605 19623])
            ("gl-stamp" function (:arguments ("$(libsrc)/make-docfile$(EXEEXT)" "$(GLOBAL_SOURCES)")) nil [19624 19863])
            ("globals.h" function (:arguments ("gl-stamp;" "@true")) nil [19864 19891])
            ("$(ALLOBJS)" function (:arguments ("globals.h")) nil [19892 19914])
            ("LIBEGNU_ARCHIVE" variable (:default-value ("$(lib)/lib$(if $(HYBRID_MALLOC),e)gnu.a")) nil [19915 19973])
            ("$(LIBEGNU_ARCHIVE)" function (:arguments ("$(config_h)")) nil [19974 20029])
            ("temacs" function (:arguments ("$(LIBXMENU)" "$(ALLOBJS)" "$(LIBEGNU_ARCHIVE)" "$(EMACSRES)" "${charsets}" "${charscript}")) nil [20283 20543])
            ("$(lwlibdir)" function (:arguments ("$(config_h)" "globals.h" "lisp.h" "FORCE")) nil [20779 20867])
            ("$(oldXMenudir)" function (:arguments ("FORCE")) nil [20867 20942])
            ("FORCE" function nil nil [20942 20949])
            (".PHONY" function (:arguments ("FORCE")) nil [20949 20963])
            (".PRECIOUS" function (:arguments ("../config.status" "Makefile")) nil [20964 21001])
            ("../config.status" function (:arguments ("$(top_srcdir)/configure.ac" "$(top_srcdir)/m4/*.m4")) nil [21001 21096])
            ("Makefile" function (:arguments ("../config.status" "$(srcdir)/Makefile.in")) nil [21096 21167])
            ("doc.o" function (:arguments ("buildobj.h")) nil [21168 21186])
            ("emacs.res" function (:arguments ("FORCE")) nil [21187 21239])
            (".PHONY" function (:arguments ("ns-app")) nil [21240 21255])
            ("ns-app" function (:arguments ("emacs$(EXEEXT)")) nil [21255 21306])
            (".PHONY" function (:arguments ("mostlyclean" "clean" "bootstrap-clean" "distclean" "maintainer-clean")) nil [21307 21376])
            (".PHONY" function (:arguments ("versionclean" "extraclean")) nil [21376 21408])
            ("mostlyclean" function nil nil [21409 21604])
            ("clean" function (:arguments ("mostlyclean")) nil [21604 21683])
            ("bootstrap-clean" function (:arguments ("clean")) nil [21866 22124])
            ("distclean" function (:arguments ("bootstrap-clean")) nil [22125 22194])
            ("maintainer-clean" function (:arguments ("distclean")) nil [22195 22235])
            ("versionclean" function nil nil [22235 22310])
            ("extraclean" function (:arguments ("distclean")) nil [22310 22347])
            ("ETAGS" variable (:default-value ("../lib-src/etags${EXEEXT}")) nil [22349 22383])
            ("${ETAGS}" function (:arguments ("FORCE")) nil [22384 22436])
            ("ctagsfiles1" variable (:default-value ("$(wildcard ${srcdir}/*.[hc])")) nil [22437 22480])
            ("ctagsfiles2" variable (:default-value ("$(wildcard ${srcdir}/*.m)")) nil [22480 22520])
            ("TAGS" function (:arguments ("${ETAGS}" "$(ctagsfiles1)" "$(ctagsfiles2)")) nil [22759 23174])
            ("../lisp/TAGS" function (:arguments ("FORCE")) nil [23300 23362])
            ("$(lwlibdir)" function (:arguments ("FORCE")) nil [23363 23433])
            ("tags" function (:arguments ("TAGS" "../lisp/TAGS" "$(lwlibdir)/TAGS")) nil [23434 23475])
            (".PHONY" function (:arguments ("tags")) nil [23475 23488])
            ("%.elc" function (:arguments ("%.el" "|" "bootstrap-emacs$(EXEEXT)")) nil [24476 24576])
            ("VCSWITNESS" variable nil nil [24800 24813])
            ("$(lispsource)" function (:arguments ("$(VCSWITNESS)" "|" "bootstrap-emacs$(EXEEXT)")) nil [24814 24937])
            ("bootstrap-emacs" function (:arguments ("temacs$(EXEEXT)")) nil [25043 25120]))          
      :file "Makefile.in"
      :pointmax 25464
      :fsize 25463
      :lastmodtime '(23302 6458 188595 476000)
      :unmatched-syntax '((shell-command 25406 . 25463) (bol 25405 . 25405) (shell-command 25342 . 25404) (bol 25341 . 25341) (shell-command 25311 . 25334) (bol 25310 . 25310) (ENDIF 25304 . 25309) (bol 25302 . 25302) (shell-command 25270 . 25301) (bol 25269 . 25269) (semantic-list 25249 . 25268) (IFNEQ 25243 . 25248) (bol 25241 . 25241) (shell-command 25178 . 25240) (bol 25177 . 25177) (shell-command 25147 . 25171) (bol 25146 . 25146) (ENDIF 20627 . 20632) (bol 20625 . 20625) (shell-command 20602 . 20624) (bol 20601 . 20601) (semantic-list 20578 . 20600) (IFNEQ 20572 . 20577) (bol 20570 . 20570) (shell-command 18222 . 18255) (bol 18221 . 18221) (ENDIF 18215 . 18220) (bol 18213 . 18213) (shell-command 18193 . 18212) (bol 18192 . 18192) (semantic-list 18172 . 18191) (IFNEQ 18166 . 18171) (bol 18164 . 18164) (shell-command 18102 . 18163) (bol 18101 . 18101) (shell-command 18071 . 18095) (bol 18070 . 18070) (symbol 15226 . 15233) (symbol 15217 . 15225) (bol 15217 . 15217) (symbol 14134 . 14142) (semantic-list 14126 . 14134) (punctuation 14125 . 14126) (INCLUDE 14117 . 14124) (bol 14115 . 14115) (punctuation 14113 . 14114) (symbol 14104 . 14112) (bol 14102 . 14102) (semantic-list 14069 . 14096) (punctuation 14068 . 14069) (symbol 14059 . 14067) (bol 14057 . 14057) (symbol 14053 . 14056) (symbol 14049 . 14052) (punctuation 14048 . 14049) (symbol 14047 . 14048) (semantic-list 14039 . 14047) (punctuation 14038 . 14039) (symbol 14034 . 14037) (symbol 14029 . 14033) (punctuation 14027 . 14028) (symbol 14018 . 14026) (bol 14016 . 14016)))
    (semanticdb-table "semanticdb-table-1e9e004"
      :major-mode c-mode
      :tags 
        '( ("INLINE" variable (:constant-flag t) nil [803 809])
            ("config.h" include (:system-flag t) nil [824 843])
            ("errno.h" include (:system-flag t) nil [845 863])
            ("fcntl.h" include (:system-flag t) nil [864 882])
            ("stdlib.h" include (:system-flag t) nil [883 902])
            ("sys/file.h" include (:system-flag t) nil [904 925])
            ("unistd.h" include (:system-flag t) nil [926 945])
            ("close-stream.h" include (:system-flag t) nil [947 972])
            ("MAIN_PROGRAM" variable (:constant-flag t) nil [982 994])
            ("lisp.h" include nil nil [995 1012])
            ("sysstdio.h" include nil nil [1013 1034])
            ("intervals.h" include nil nil [1562 1584])
            ("character.h" include nil nil [1585 1607])
            ("buffer.h" include nil nil [1608 1627])
            ("window.h" include nil nil [1628 1647])
            ("xwidget.h" include nil nil [1648 1668])
            ("atimer.h" include nil nil [1669 1688])
            ("blockinput.h" include nil nil [1689 1712])
            ("syssignal.h" include nil nil [1713 1735])
            ("process.h" include nil nil [1736 1756])
            ("frame.h" include nil nil [1757 1775])
            ("termhooks.h" include nil nil [1776 1798])
            ("keyboard.h" include nil nil [1799 1820])
            ("keymap.h" include nil nil [1821 1840])
            ("category.h" include nil nil [1841 1862])
            ("charset.h" include nil nil [1863 1883])
            ("composite.h" include nil nil [1884 1906])
            ("dispextern.h" include nil nil [1907 1930])
            ("ptr-bounds.h" include nil nil [1931 1954])
            ("regex.h" include nil nil [1955 1973])
            ("sheap.h" include nil nil [1974 1992])
            ("syntax.h" include nil nil [1993 2012])
            ("sysselect.h" include nil nil [2013 2035])
            ("systime.h" include nil nil [2036 2056])
            ("puresize.h" include nil nil [2057 2078])
            ("getpagesize.h" include nil nil [2080 2104])
            ("gnutls.h" include nil nil [2105 2124])
            ("emacs_version" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "PACKAGE_VERSION"
                :type "char")
                nil [2478 2530])
            ("emacs_copyright" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "COPYRIGHT"
                :type "char")
                nil [2531 2579])
            ("emacs_bugreport" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "PACKAGE_BUGREPORT"
                :type "char")
                nil [2580 2636])
            ("empty_unibyte_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2703 2760])
            ("empty_multibyte_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2703 2760])
            ("initialized" variable (:type "bool") nil [2999 3016])
            ("might_dump" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [3120 3151])
            ("inhibit_window_system" variable (:type "bool") nil [3307 3334])
            ("running_asynch_code" variable (:type "bool") nil [3481 3506])
            ("noninteractive" variable (:type "bool") nil [4485 4505])
            ("no_site_lisp" variable (:type "bool") nil [4570 4588])
            ("build_details" variable (:type "bool") nil [4650 4669])
            ("daemon_name" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [4719 4744])
            ("daemon_type" variable (:type "int") nil [4821 4837])
            ("daemon_pipe" variable
               (:dereference 1
                :typemodifiers ("static")
                :type "int")
                nil [4991 5017])
            ("initial_argv" variable
               (:pointer 2
                :type "char")
                nil [5084 5104])
            ("initial_argc" variable (:type "int") nil [5105 5122])
            ("sort_args" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [5147 5156])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [5157 5169]))                  
                :type "void")
                nil [5124 5170])
            ("syms_of_emacs" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5198 5203]))                  
                :type "void")
                nil [5171 5204])
            ("usage_message" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :default-value "{ \"\\
\\n\\
Run Emacs, the extensible, customizable, self-documenting real-time\\n\\
display editor.  The recommended way to start Emacs for normal editing\\n\\
is with no options at all.\\n\\
\\n\\
Run M-x info RET m emacs RET m emacs invocation RET inside Emacs to\\n\\
read the main documentation for these command-line arguments.\\n\\
\\n\\
Initialization options:\\n\\
\\n\\
\",
    \"\\
--batch                     do not do interactive display; implies -q\\n\\
--chdir DIR                 change to directory DIR\\n\\
--daemon, --bg-daemon[=NAME] start a (named) server in the background\\n\\
--fg-daemon[=NAME]          start a (named) server in the foreground\\n\\
--debug-init                enable Emacs Lisp debugger for init file\\n\\
--display, -d DISPLAY       use X server DISPLAY\\n\\
\",
#ifdef HAVE_MODULES
    \"\\
--module-assertions         assert behavior of dynamic modules\\n\\
\",
#endif
    \"\\
--no-build-details          do not add build details such as time stamps\\n\\
--no-desktop                do not load a saved desktop\\n\\
--no-init-file, -q          load neither ~/.emacs nor default.el\\n\\
--no-loadup, -nl            do not load loadup.el into bare Emacs\\n\\
--no-site-file              do not load site-start.el\\n\\
--no-x-resources            do not load X resources\\n\\
--no-site-lisp, -nsl        do not add site-lisp directories to load-path\\n\\
--no-splash                 do not display a splash screen on startup\\n\\
--no-window-system, -nw     do not communicate with X, ignoring $DISPLAY\\n\\
\",
    \"\\
--quick, -Q                 equivalent to:\\n\\
                              -q --no-site-file --no-site-lisp --no-splash\\n\\
                              --no-x-resources\\n\\
--script FILE               run FILE as an Emacs Lisp script\\n\\
--terminal, -t DEVICE       use DEVICE for terminal I/O\\n\\
--user, -u USER             load ~USER/.emacs instead of your own\\n\\
\\n\\
\",
    \"\\
Action options:\\n\\
\\n\\
FILE                    visit FILE\\n\\
+LINE                   go to line LINE in next FILE\\n\\
+LINE:COLUMN            go to line LINE, column COLUMN, in next FILE\\n\\
--directory, -L DIR     prepend DIR to load-path (with :DIR, append DIR)\\n\\
--eval EXPR             evaluate Emacs Lisp expression EXPR\\n\\
--execute EXPR          evaluate Emacs Lisp expression EXPR\\n\\
\",
    \"\\
--file FILE             visit FILE\\n\\
--find-file FILE        visit FILE\\n\\
--funcall, -f FUNC      call Emacs Lisp function FUNC with no arguments\\n\\
--insert FILE           insert contents of FILE into current buffer\\n\\
--kill                  exit without asking for confirmation\\n\\
--load, -l FILE         load Emacs Lisp FILE using the load function\\n\\
--visit FILE            visit FILE\\n\\
\\n\\
\",
    \"\\
Display options:\\n\\
\\n\\
--background-color, -bg COLOR   window background color\\n\\
--basic-display, -D             disable many display features;\\n\\
                                  used for debugging Emacs\\n\\
--border-color, -bd COLOR       main border color\\n\\
--border-width, -bw WIDTH       width of main border\\n\\
\",
    \"\\
--color, --color=MODE           override color mode for character terminals;\\n\\
                                  MODE defaults to `auto', and\\n\\
                                  can also be `never', `always',\\n\\
                                  or a mode name like `ansi8'\\n\\
--cursor-color, -cr COLOR       color of the Emacs cursor indicating point\\n\\
--font, -fn FONT                default font; must be fixed-width\\n\\
--foreground-color, -fg COLOR   window foreground color\\n\\
\",
    \"\\
--fullheight, -fh               make the first frame high as the screen\\n\\
--fullscreen, -fs               make the first frame fullscreen\\n\\
--fullwidth, -fw                make the first frame wide as the screen\\n\\
--maximized, -mm                make the first frame maximized\\n\\
--geometry, -g GEOMETRY         window geometry\\n\\
\",
    \"\\
--no-bitmap-icon, -nbi          do not use picture of gnu for Emacs icon\\n\\
--iconic                        start Emacs in iconified state\\n\\
--internal-border, -ib WIDTH    width between text and main border\\n\\
--line-spacing, -lsp PIXELS     additional space to put between lines\\n\\
--mouse-color, -ms COLOR        mouse cursor color in Emacs window\\n\\
--name NAME                     title for initial Emacs frame\\n\\
\",
    \"\\
--no-blinking-cursor, -nbc      disable blinking cursor\\n\\
--reverse-video, -r, -rv        switch foreground and background\\n\\
--title, -T TITLE               title for initial Emacs frame\\n\\
--vertical-scroll-bars, -vb     enable vertical scroll bars\\n\\
--xrm XRESOURCES                set additional X resources\\n\\
--parent-id XID                 set parent window\\n\\
--help                          display this help and exit\\n\\
--version                       output version information and exit\\n\\
\\n\\
\",
    \"\\
You can generally also specify long option names with a single -; for\\n\\
example, -batch as well as --batch.  You can use any unambiguous\\n\\
abbreviation for a --option.\\n\\
\\n\\
Various environment variables and window system resources also affect\\n\\
the operation of Emacs.  See the main documentation.\\n\\
\\n\\
Report bugs to \" PACKAGE_BUGREPORT \".  First, please see the Bugs\\n\\
section of the Emacs manual or the file BUGS.\\n\"
  }"
                :type "char")
                nil [5335 10618])
            ("fatal_error_in_progress" variable (:type "bool") nil [10669 10698])
            ("setlocale" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("cat" variable (:type "int") (reparse-symbol arg-sub-list) [10840 10848])
                    ("locale" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10849 10868]))                  
                :type "char")
                nil [10815 10884])
            ("using_utf8" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10979 10984]))                  
                :type "bool")
                nil [10955 11141])
            ("terminate_due_to_signal" function
               (:arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [11297 11305])
                    ("backtrace_limit" variable (:type "int") (reparse-symbol arg-sub-list) [11306 11326]))                  
                :type "void")
                nil [11267 12275])
            ("init_cmdargs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [12372 12381])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [12382 12394])
                    ("skip_args" variable (:type "int") (reparse-symbol arg-sub-list) [12395 12409])
                    ("original_pwd" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12410 12429]))                  
                :type "void")
                nil [12346 17318])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finvocation_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17346 17363])
                    ("" variable (:type ("Sinvocation_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17364 17381])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17398 17402]))                  
                :type "int")
                nil [17320 17504])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finvocation_directory" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17585 17607])
                    ("" variable (:type ("Sinvocation_directory" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17608 17630])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17654 17658]))                  
                :type "int")
                nil [17554 17744])
            ("argmatch" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [18327 18339])
                    ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [18340 18349])
                    ("sstr" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18350 18367])
                    ("lstr" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18368 18385])
                    ("minlen" variable (:type "int") (reparse-symbol arg-sub-list) [18396 18407])
                    ("valptr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [18408 18422])
                    ("skipptr" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [18423 18436]))                  
                :type "bool")
                nil [18305 19318])
            ("close_output_streams" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [19488 19493]))                  
                :type "void")
                nil [19454 19854])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [19881 19890])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [19891 19903]))                  
                :type "int")
                nil [19871 51223])
            ("standard_args" type
               (:members 
                  ( ("name" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [51400 51417])
                    ("longname" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [51420 51441])
                    ("priority" variable (:type "int") (reparse-symbol classsubparts) [51444 51457])
                    ("nargs" variable (:type "int") (reparse-symbol classsubparts) [51460 51470]))                  
                :type "struct")
                nil [51375 51473])
            ("standard_args" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  { \"-version\", \"--version\", 150, 0 },
  { \"-chdir\", \"--chdir\", 130, 1 },
  { \"-t\", \"--terminal\", 120, 1 },
  { \"-nw\", \"--no-window-system\", 110, 0 },
  { \"-nw\", \"--no-windows\", 110, 0 },
  { \"-batch\", \"--batch\", 100, 0 },
  { \"-script\", \"--script\", 100, 1 },
  { \"-daemon\", \"--daemon\", 99, 0 },
  { \"-bg-daemon\", \"--bg-daemon\", 99, 0 },
  { \"-fg-daemon\", \"--fg-daemon\", 99, 0 },
  { \"-help\", \"--help\", 90, 0 },
  { \"-nl\", \"--no-loadup\", 70, 0 },
  { \"-nsl\", \"--no-site-lisp\", 65, 0 },
  { \"-no-build-details\", \"--no-build-details\", 63, 0 },
#ifdef HAVE_MODULES
  { \"-module-assertions\", \"--module-assertions\", 62, 0 },
#endif
  /* -d must come last before the options handled in startup.el.  */
  { \"-d\", \"--display\", 60, 1 },
  { \"-display\", 0, 60, 1 },
  /* Now for the options handled in `command-line' (startup.el).  */
  /* (Note that to imply -nsl, -Q is partially handled here.)  */
  { \"-Q\", \"--quick\", 55, 0 },
  { \"-quick\", 0, 55, 0 },
  { \"-q\", \"--no-init-file\", 50, 0 },
  { \"-no-init-file\", 0, 50, 0 },
  { \"-no-x-resources\", \"--no-x-resources\", 40, 0 },
  { \"-no-site-file\", \"--no-site-file\", 40, 0 },
  { \"-u\", \"--user\", 30, 1 },
  { \"-user\", 0, 30, 1 },
  { \"-debug-init\", \"--debug-init\", 20, 0 },
  { \"-iconic\", \"--iconic\", 15, 0 },
  { \"-D\", \"--basic-display\", 12, 0},
  { \"-basic-display\", 0, 12, 0},
  { \"-nbc\", \"--no-blinking-cursor\", 12, 0 },
  /* Now for the options handled in `command-line-1' (startup.el).  */
  { \"-nbi\", \"--no-bitmap-icon\", 10, 0 },
  { \"-bg\", \"--background-color\", 10, 1 },
  { \"-background\", 0, 10, 1 },
  { \"-fg\", \"--foreground-color\", 10, 1 },
  { \"-foreground\", 0, 10, 1 },
  { \"-bd\", \"--border-color\", 10, 1 },
  { \"-bw\", \"--border-width\", 10, 1 },
  { \"-ib\", \"--internal-border\", 10, 1 },
  { \"-ms\", \"--mouse-color\", 10, 1 },
  { \"-cr\", \"--cursor-color\", 10, 1 },
  { \"-fn\", \"--font\", 10, 1 },
  { \"-font\", 0, 10, 1 },
  { \"-fs\", \"--fullscreen\", 10, 0 },
  { \"-fw\", \"--fullwidth\", 10, 0 },
  { \"-fh\", \"--fullheight\", 10, 0 },
  { \"-mm\", \"--maximized\", 10, 0 },
  { \"-g\", \"--geometry\", 10, 1 },
  { \"-geometry\", 0, 10, 1 },
  { \"-T\", \"--title\", 10, 1 },
  { \"-title\", 0, 10, 1 },
  { \"-name\", \"--name\", 10, 1 },
  { \"-xrm\", \"--xrm\", 10, 1 },
  { \"-parent-id\", \"--parent-id\", 10, 1 },
  { \"-r\", \"--reverse-video\", 5, 0 },
  { \"-rv\", 0, 5, 0 },
  { \"-reverse\", 0, 5, 0 },
  { \"-hb\", \"--horizontal-scroll-bars\", 5, 0 },
  { \"-vb\", \"--vertical-scroll-bars\", 5, 0 },
  { \"-color\", \"--color\", 5, 0},
  { \"-no-splash\", \"--no-splash\", 3, 0 },
  { \"-no-desktop\", \"--no-desktop\", 3, 0 },
#ifdef HAVE_NS
  { \"-NSAutoLaunch\", 0, 5, 1 },
  { \"-NXAutoLaunch\", 0, 5, 1 },
  { \"-_NSMachLaunch\", 0, 85, 1 },
  { \"-MachLaunch\", 0, 85, 1 },
  { \"-macosx\", 0, 85, 0 },
  { \"-NSHost\", 0, 85, 1 },
#endif
  /* These have the same priority as ordinary file name args,
     so they are not reordered with respect to those.  */
  { \"-L\", \"--directory\", 0, 1 },
  { \"-directory\", 0, 0, 1 },
  { \"-l\", \"--load\", 0, 1 },
  { \"-load\", 0, 0, 1 },
  /* This has no longname, because using --scriptload confuses sort_args,
     because then the --script long option seems to match twice; ie
     you can't have a long option which is a prefix of another long
     option.  In any case, this is entirely an internal option.  */
  { \"-scriptload\", NULL, 0, 1 },
  { \"-f\", \"--funcall\", 0, 1 },
  { \"-funcall\", 0, 0, 1 },
  { \"-eval\", \"--eval\", 0, 1 },
  { \"-execute\", \"--execute\", 0, 1 },
  { \"-find-file\", \"--find-file\", 0, 1 },
  { \"-visit\", \"--visit\", 0, 1 },
  { \"-file\", \"--file\", 0, 1 },
  { \"-insert\", \"--insert\", 0, 1 },
#ifdef HAVE_NS
  { \"-NXOpen\", 0, 0, 1 },
  { \"-NXOpenTemp\", 0, 0, 1 },
  { \"-NSOpen\", 0, 0, 1 },
  { \"-NSOpenTemp\", 0, 0, 1 },
  { \"-GSFilePath\", 0, 0, 1 },
#endif
  /* This should be processed after ordinary file name args and the like.  */
  { \"-kill\", \"--kill\", -10, 0 },
}"
                :type ("standard_args" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [51475 55351])
            ("sort_args" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [55723 55732])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [55733 55745]))                  
                :type "void")
                nil [55700 59952])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fkill_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59976 59988])
                    ("" variable (:type ("Skill_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59989 60001])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60020 60024])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60421 60432])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60433 60442]))                  
                :type "int")
                nil [59955 60462])
            ("shut_down_emacs" function
               (:arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [61994 62002])
                    ("stuff" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62003 62021]))                  
                :type "void")
                nil [61972 63509])
            ("unexec.h" include nil nil [63535 63554])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdump_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63577 63589])
                    ("" variable (:type ("Sdump_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63590 63602])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63619 63623]))                  
                :type "int")
                nil [63556 63924])
            ("emacs_strerror" function
               (:pointer 1
                :arguments 
                  ( ("error_number" variable (:type "int") (reparse-symbol arg-sub-list) [68549 68566]))                  
                :type "char")
                nil [68526 68645])
            ("decode_env_path" function
               (:arguments 
                  ( ("evarname" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [68678 68699])
                    ("defalt" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [68700 68719])
                    ("empty" variable (:type "bool") (reparse-symbol arg-sub-list) [68720 68731]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [68649 72413])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdaemonp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72433 72442])
                    ("" variable (:type ("Sdaemonp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72443 72452])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72469 72473]))                  
                :type "int")
                nil [72415 72605])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdaemon_initialized" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72769 72789])
                    ("" variable (:type ("Sdaemon_initialized" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72790 72810])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72827 72831]))                  
                :type "int")
                nil [72740 73023])
            ("syms_of_emacs" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [74743 74748]))                  
                :type "void")
                nil [74723 81836]))          
      :file "emacs.c"
      :pointmax 81837
      :fsize 81835
      :lastmodtime '(23302 6458 200595 580000)
      :unmatched-syntax nil
      :lexical-table 
        '(("MAIN_PROGRAM")
          ("INLINE" . ((symbol "EXTERN_INLINE" 810 . 823)))
          )
)
    (semanticdb-table "semanticdb-table-1eb7030"
      :file "sysstdio.h"
      :fsize 2125
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-1eb7760"
      :file "intervals.h"
      :fsize 11604
      :lastmodtime '(23302 6458 208595 650000))
    (semanticdb-table "semanticdb-table-1eb7780"
      :file "character.h"
      :fsize 22793
      :lastmodtime '(23302 6458 192595 510000))
    (semanticdb-table "semanticdb-table-1eb77a0"
      :file "buffer.h"
      :fsize 47253
      :lastmodtime '(23302 6458 188595 476000))
    (semanticdb-table "semanticdb-table-1eb77c0"
      :file "window.h"
      :fsize 40962
      :lastmodtime '(23302 6458 236595 896000))
    (semanticdb-table "semanticdb-table-1eb77e0"
      :file "xwidget.h"
      :fsize 3718
      :lastmodtime '(23302 6458 244595 966000))
    (semanticdb-table "semanticdb-table-2004464"
      :file "atimer.h"
      :fsize 2172
      :lastmodtime '(23302 6458 188595 476000))
    (semanticdb-table "semanticdb-table-1eb7800"
      :file "blockinput.h"
      :fsize 2324
      :lastmodtime '(23302 6458 188595 476000))
    (semanticdb-table "semanticdb-table-1eb7820"
      :file "syssignal.h"
      :fsize 2334
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-1ec2360"
      :file "process.h"
      :fsize 9836
      :lastmodtime '(23302 6458 220595 756000))
    (semanticdb-table "semanticdb-table-1ec2380"
      :file "frame.h"
      :fsize 55923
      :lastmodtime '(23302 6458 204595 616000))
    (semanticdb-table "semanticdb-table-1ec23a0"
      :file "termhooks.h"
      :fsize 28741
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-1ec23c0"
      :file "keyboard.h"
      :fsize 18511
      :lastmodtime '(23302 6458 208595 650000))
    (semanticdb-table "semanticdb-table-1ec23e0"
      :file "keymap.h"
      :fsize 2302
      :lastmodtime '(23302 6458 212595 686000))
    (semanticdb-table "semanticdb-table-1ec2400"
      :file "category.h"
      :fsize 4606
      :lastmodtime '(23302 6458 188595 476000))
    (semanticdb-table "semanticdb-table-1ec2420"
      :file "charset.h"
      :fsize 19498
      :lastmodtime '(23302 6458 192595 510000))
    (semanticdb-table "semanticdb-table-1ecdb60"
      :file "composite.h"
      :fsize 12842
      :lastmodtime '(23302 6458 192595 510000))
    (semanticdb-table "semanticdb-table-1ecdb80"
      :file "dispextern.h"
      :fsize 125226
      :lastmodtime '(23302 6458 196595 546000))
    (semanticdb-table "semanticdb-table-1ecdba0"
      :file "ptr-bounds.h"
      :fsize 2630
      :lastmodtime '(23302 6458 220595 756000))
    (semanticdb-table "semanticdb-table-1ecdbc0"
      :file "regex.h"
      :fsize 23979
      :lastmodtime '(23302 6458 220595 756000))
    (semanticdb-table "semanticdb-table-1ecdbe0"
      :file "sheap.h"
      :fsize 1162
      :lastmodtime '(23302 6458 220595 756000))
    (semanticdb-table "semanticdb-table-1ecdc00"
      :file "syntax.h"
      :fsize 7762
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-1ecdc20"
      :file "sysselect.h"
      :fsize 2556
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-1ecdf60"
      :file "systime.h"
      :fsize 3187
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-1ecdf80"
      :file "puresize.h"
      :fsize 3443
      :lastmodtime '(23302 6458 220595 756000))
    (semanticdb-table "semanticdb-table-1ecdfa0"
      :file "getpagesize.h"
      :fsize 1543
      :lastmodtime '(23302 6458 204595 616000))
    (semanticdb-table "semanticdb-table-1ecdfc0"
      :file "gnutls.h"
      :fsize 3146
      :lastmodtime '(23302 6458 204595 616000))
    (semanticdb-table "semanticdb-table-1ecdfe0"
      :file "unexec.h"
      :fsize 116
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-1e9afac"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [932 951])
            ("stddef.h" include (:system-flag t) nil [1032 1051])
            ("stdlib.h" include (:system-flag t) nil [1052 1071])
            ("string.h" include (:system-flag t) nil [1072 1091])
            ("limits.h" include (:system-flag t) nil [1092 1111])
            ("stdint.h" include (:system-flag t) nil [1112 1131])
            ("unistd.h" include (:system-flag t) nil [1132 1151])
            ("ptr-bounds.h" include nil nil [1241 1264])
            ("__MALLOC_HOOK_VOLATILE" variable (:constant-flag t) nil [1451 1473])
            ("__morecore" function
               (:prototype-flag t
                :pointer 1
                :function-pointer t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1679 1689]))                  
                :type "void")
                nil [1651 1690])
            ("malloc" variable (:constant-flag t) nil [2224 2230])
            ("realloc" variable (:constant-flag t) nil [2247 2254])
            ("calloc" variable (:constant-flag t) nil [2272 2278])
            ("aligned_alloc" variable (:constant-flag t) nil [2295 2308])
            ("free" variable (:constant-flag t) nil [2332 2336])
            ("malloc_info" variable (:constant-flag t) nil [2351 2362])
            ("__malloc_initialize" function
               (:type "int"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7786 7791]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [7754 7792])
            ("__malloc_initialized" variable
               (:type "int"
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [7660 7692])
            ("UNLOCK_ALIGNED_BLOCKS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7556 7577])
            ("LOCK_ALIGNED_BLOCKS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7526 7545])
            ("UNLOCK" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7509 7515])
            ("LOCK" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [7494 7498])
            ("_free_internal_nolock" function
               (:type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [6774 6781]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6739 6782])
            ("_realloc_internal_nolock" function
               (:type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [6722 6729])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6730 6737]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6683 6738])
            ("_malloc_internal_nolock" function
               (:type "void"
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6674 6681]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6636 6682])
            ("_free_internal" function
               (:type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [6627 6634]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6599 6635])
            ("_realloc_internal" function
               (:type "void"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [6582 6589])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6590 6597]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6550 6598])
            ("_malloc_internal" function
               (:type "void"
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6541 6548]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [6510 6549])
            ("_bytes_free" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [6279 6305])
            ("_chunks_free" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [6251 6278])
            ("_bytes_used" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [6224 6250])
            ("_chunks_used" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [6196 6223])
            ("_aligned_blocks" variable
               (:type ("alignlist" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1)
                (reparse-symbol extern-c-contents) [6129 6170])
            ("alignlist" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("next" variable
                       (:pointer 1
                        :type ("alignlist" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [5973 5996])
                    ("aligned" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [6001 6015])
                    ("exact" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [6069 6081]))                  )
                (reparse-symbol extern-c-contents) [5948 6128])
            ("_fraghead" variable
               (:type ("list" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :typemodifiers ("extern" "\"C\"" "extern")
                :dereference 1)
                (reparse-symbol extern-c-contents) [5851 5882])
            ("list" type
               (:typemodifiers ("extern" "\"C\"")
                :type "struct"
                :members 
                  ( ("next" variable
                       (:pointer 1
                        :type ("list" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [5754 5772])
                    ("prev" variable
                       (:pointer 1
                        :type ("list" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [5777 5795]))                  )
                (reparse-symbol extern-c-contents) [5734 5800])
            ("_heaplimit" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [5661 5686])
            ("_heapindex" variable
               (:type ("size_t" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern"))
                (reparse-symbol extern-c-contents) [5592 5617])
            ("ADDRESS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5485 5492])
            ("BLOCK" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [5414 5419])
            ("_heapinfo" variable
               (:type ("gmalloc_info" type (:type "class") nil nil)
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1)
                (reparse-symbol extern-c-contents) [5327 5357])
            ("_heapbase" variable
               (:type "char"
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1)
                (reparse-symbol extern-c-contents) [5235 5258])
            ("gmalloc_info" type
               (:typemodifiers ("extern" "\"C\"")
                :type "typedef"
                :typedef ("" type
                     (:members 
                        ( ("busy" variable (:type ("" type
                               (:members 
                                  ( ("type" variable (:type "int") (reparse-symbol classsubparts) [4564 4573])
                                    ("info" variable (:type ("" type
                                         (:members 
                                            ( ("frag" variable (:type ("" type
                                                   (:members 
                                                      ( ("nfree" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4609 4622])
                                                        ("first" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4666 4679]))                                                      
                                                    :type "struct")
                                                    nil nil)) (reparse-symbol classsubparts) [4591 4735])
                                              ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4846 4861]))                                            
                                          :type "union")
                                          nil nil)) (reparse-symbol classsubparts) [4575 4872]))                                  
                                :type "struct")
                                nil nil)) (reparse-symbol classsubparts) [4152 4886])
                          ("free" variable (:type ("" type
                               (:members 
                                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5002 5014])
                                    ("next" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5059 5071])
                                    ("prev" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5108 5120]))                                  
                                :type "struct")
                                nil nil)) (reparse-symbol classsubparts) [4986 5173]))                        
                      :type "union")
                      nil nil))
                (reparse-symbol extern-c-contents) [4084 5190])
            ("FINAL_FREE_BLOCKS" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [4011 4028])
            ("HEAP" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3833 3837])
            ("BLOCKIFY" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3670 3678])
            ("BLOCKSIZE" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3636 3645])
            ("BLOCKLOG" variable
               (:typemodifiers ("extern" "\"C\"")
                :constant-flag t)
                (reparse-symbol extern-c-contents) [3593 3601])
            ("aligned_alloc" function
               (:type "void"
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3116 3123])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3124 3131]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3088 3132])
            ("free" function
               (:type "void"
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [3018 3028]))                  
                :typemodifiers ("extern" "\"C\"" "extern")
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3000 3029])
            ("ATTRIBUTE_MALLOC_SIZE" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2948 2978])
            ("ATTRIBUTE_ALLOC_SIZE" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2799 2826])
            ("ATTRIBUTE_MALLOC_SIZE" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2625 2653])
            ("errno.h" include (:system-flag t) nil [10338 10356])
            ("__morecore" function
               (:prototype-flag t
                :pointer 1
                :function-pointer t
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10808 10818]))                  
                :type "void")
                nil [10787 10819])
            ("_heapbase" variable
               (:pointer 1
                :type "char")
                nil [10891 10907])
            ("_heapinfo" variable
               (:pointer 1
                :type ("gmalloc_info" type (:type "class") nil nil))
                nil [10989 11012])
            ("_heapindex" variable (:type ("size_t" type (:type "class") nil nil)) nil [11053 11071])
            ("_heaplimit" variable (:type ("size_t" type (:type "class") nil nil)) nil [11115 11133])
            ("_fraghead" variable
               (:dereference 1
                :type ("list" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [11177 11209])
            ("_chunks_used" variable (:type ("size_t" type (:type "class") nil nil)) nil [11235 11255])
            ("_bytes_used" variable (:type ("size_t" type (:type "class") nil nil)) nil [11256 11275])
            ("_chunks_free" variable (:type ("size_t" type (:type "class") nil nil)) nil [11276 11296])
            ("_bytes_free" variable (:type ("size_t" type (:type "class") nil nil)) nil [11297 11316])
            ("__malloc_initialized" variable (:type "int") nil [11346 11371])
            ("__malloc_extra_blocks" variable (:type ("size_t" type (:type "class") nil nil)) nil [11668 11697])
            ("heapsize" variable
               (:typemodifiers ("static")
                :type ("size_t" type (:type "class") nil nil))
                nil [11730 11753])
            ("PROTECT_MALLOC_STATE" variable (:constant-flag t) nil [12982 13002])
            ("align" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13078 13090]))                  
                :type "void")
                nil [13057 13722])
            ("get_contiguous_space" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13915 13930])
                    ("position" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [13931 13946]))                  
                :type "void")
                nil [13879 14403])
            ("register_heapinfo" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [14621 14626]))                  
                :type "void")
                nil [14590 15003])
            ("malloc_initialize_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16127 16132]))                  
                :type "void")
                nil [16094 16743])
            ("__malloc_initialize" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16977 16982]))                  
                :type "int")
                nil [16952 17087])
            ("morecore_recursing" variable
               (:typemodifiers ("static")
                :type "int")
                nil [17089 17119])
            ("morecore_nolock" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17246 17258]))                  
                :type "void")
                nil [17215 20663])
            ("_malloc_internal_nolock" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20735 20747]))                  
                :type "void")
                nil [20703 26970])
            ("_malloc_internal" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26997 27009]))                  
                :type "void")
                nil [26972 27115])
            ("gmalloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27132 27144]))                  
                :type "void")
                nil [27117 27805])
            ("_malloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28004 28011]))                  
                :type "void")
                nil [27982 28012])
            ("_free" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [28032 28039]))                  
                :type "void")
                nil [28013 28040])
            ("_realloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [28064 28071])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28072 28079]))                  
                :type "void")
                nil [28041 28080])
            ("_malloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28098 28110]))                  
                :type "void")
                nil [28082 28138])
            ("_free" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [28152 28162]))                  
                :type "void")
                nil [28140 28180])
            ("_realloc" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [28199 28209])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28210 28222]))                  
                :type "void")
                nil [28182 28256])
            ("_aligned_blocks" variable
               (:pointer 1
                :default-value "NULL"
                :type ("alignlist" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [29341 29382])
            ("_free_internal_nolock" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [29500 29510]))                  
                :type "void")
                nil [29472 37410])
            ("_free_internal" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [37521 37531]))                  
                :type "void")
                nil [37500 37590])
            ("gfree" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [37638 37648]))                  
                :type "void")
                nil [37627 37763])
            ("cfree" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [37892 37902]))                  
                :type "void")
                nil [37880 37920])
            ("min" variable (:constant-flag t) nil [38879 38882])
            ("grealloc_hook" function
               (:prototype-flag t
                :pointer 1
                :function-pointer t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [38987 38994])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38995 39002]))                  
                :type "void")
                nil [38956 39003])
            ("_realloc_internal_nolock" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [39391 39401])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39402 39414]))                  
                :type "void")
                nil [39358 42643])
            ("_realloc_internal" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [42671 42681])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42682 42694]))                  
                :type "void")
                nil [42645 42806])
            ("grealloc" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [42824 42834])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42835 42847]))                  
                :type "void")
                nil [42808 43089])
            ("gcalloc" function
               (:pointer 1
                :arguments 
                  ( ("nmemb" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44031 44044])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44045 44057]))                  
                :type "void")
                nil [44016 44301])
            ("__sbrk" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("increment" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45398 45418]))                  
                :type "void")
                nil [45377 45419])
            ("gdefault_morecore" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("increment" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45667 45687]))                  
                :type "void")
                nil [45634 45914])
            ("gdefault_morecore" variable (:type "int") nil [45950 45968])
            ("galigned_alloc" function
               (:pointer 1
                :arguments 
                  ( ("alignment" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46684 46701])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46702 46714]))                  
                :type "void")
                nil [46662 48692])
            ("memalign" function
               (:pointer 1
                :arguments 
                  ( ("alignment" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48892 48909])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48910 48922]))                  
                :type "void")
                nil [48875 48968])
            ("posix_memalign" function
               (:arguments 
                  ( ("memptr" variable
                       (:pointer 2
                        :type "void")
                        (reparse-symbol arg-sub-list) [49081 49095])
                    ("alignment" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49096 49113])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49114 49126]))                  
                :type "int")
                nil [49061 49382])
            ("valloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50364 50371]))                  
                :type "void")
                nil [50343 50372])
            ("getpagesize.h" include nil nil [50437 50463])
            ("getpagesize" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [50516 50521]))                  
                :type "int")
                nil [50492 50522])
            ("pagesize" variable
               (:typemodifiers ("static")
                :type ("size_t" type (:type "class") nil nil))
                nil [50532 50555])
            ("valloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50572 50584]))                  
                :type "void")
                nil [50557 50682])
            ("malloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53369 53381]))                  
                :type "void")
                nil [53354 53410])
            ("calloc" function
               (:pointer 1
                :arguments 
                  ( ("nmemb" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53427 53440])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53441 53453]))                  
                :type "void")
                nil [53412 53489])
            ("free" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [53502 53512]))                  
                :type "void")
                nil [53491 53531])
            ("aligned_alloc" function
               (:pointer 1
                :arguments 
                  ( ("alignment" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53555 53572])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53573 53585]))                  
                :type "void")
                nil [53533 53632])
            ("realloc" function
               (:pointer 1
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [53650 53660])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53661 53673]))                  
                :type "void")
                nil [53634 53708]))          
      :file "gmalloc.c"
      :pointmax 59008
      :fsize 59007
      :lastmodtime '(23302 6458 204595 616000)
      :unmatched-syntax '((punctuation 45948 . 45949) (semantic-list 45936 . 45947) (semantic-list 45922 . 45935) (punctuation 45921 . 45922) (VOID 45916 . 45920) (punctuation 29265 . 29266) (semantic-list 29257 . 29265) (semantic-list 29220 . 29256) (VOID 29215 . 29219) (STATIC 29208 . 29214) (punctuation 10785 . 10786) (semantic-list 10779 . 10785) (semantic-list 10731 . 10778) (VOID 10726 . 10730) (punctuation 10724 . 10725) (semantic-list 10718 . 10724) (semantic-list 10667 . 10717) (VOID 10662 . 10666) (punctuation 10454 . 10455) (semantic-list 10446 . 10454) (semantic-list 10407 . 10445) (punctuation 10406 . 10407) (VOID 10401 . 10405) (STATIC 10394 . 10400) (semantic-list 2971 . 2976) (semantic-list 2920 . 2947) (symbol 2913 . 2919) (punctuation 2912 . 2913) (VOID 2907 . 2911) (EXTERN 2900 . 2906) (semantic-list 2821 . 2824) (semantic-list 2774 . 2798) (symbol 2766 . 2773) (punctuation 2765 . 2766) (VOID 2760 . 2764) (EXTERN 2753 . 2759) (semantic-list 2648 . 2651) (semantic-list 2611 . 2624) (symbol 2604 . 2610) (punctuation 2603 . 2604) (VOID 2598 . 2602) (EXTERN 2591 . 2597) (punctuation 1649 . 1650) (semantic-list 1643 . 1649) (semantic-list 1592 . 1642) (VOID 1587 . 1591) (EXTERN 1580 . 1586) (punctuation 1578 . 1579) (semantic-list 1572 . 1578) (semantic-list 1524 . 1571) (VOID 1519 . 1523) (EXTERN 1512 . 1518))
      :lexical-table 
        '(("__MALLOC_HOOK_VOLATILE" . ((VOLATILE "volatile" 1474 . 1482)))
          ("BLOCKSIZE" . ((semantic-list "(1 << BLOCKLOG)" 3646 . 3661)))
          ("BLOCK" (spp-arg-list ("A") 5419 . 5422) . ((semantic-list "((size_t) ((char *) (A) - _heapbase) / BLOCKSIZE + 1)" 5423 . 5476)))
          ("min" (spp-arg-list ("a" "b") 38882 . 38888) . ((semantic-list "((a) < (b) ? (a) : (b))" 38889 . 38912)))
          ("BLOCKLOG" . ((semantic-list "(INT_WIDTH > 16 ? 12 : 9)" 3602 . 3627)))
          ("UNLOCK_ALIGNED_BLOCKS" (spp-arg-list nil 7577 . 7579))
          ("ADDRESS" (spp-arg-list ("B") 5492 . 5495) . ((semantic-list "((void *) (((B) - 1) * BLOCKSIZE + _heapbase))" 5496 . 5542)))
          ("HEAP" . ((semantic-list "(INT_WIDTH > 16 ? 4194304 : 65536)" 3839 . 3873)))
          ("BLOCKIFY" (spp-arg-list ("SIZE") 3678 . 3684) . ((semantic-list "(((SIZE) + BLOCKSIZE - 1) / BLOCKSIZE)" 3685 . 3723)))
          ("malloc_info" . ((symbol "gmalloc_info" 2363 . 2375)))
          ("PROTECT_MALLOC_STATE" (spp-arg-list ("PROT") 13002 . 13008))
          ("UNLOCK" (spp-arg-list nil 7515 . 7517))
          ("LOCK_ALIGNED_BLOCKS" (spp-arg-list nil 7545 . 7547))
          ("LOCK" (spp-arg-list nil 7498 . 7500))
          ("FINAL_FREE_BLOCKS" . ((number "8" 4029 . 4030)))
          )
)
    (semanticdb-table "semanticdb-table-1e9dfc8"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [732 751])
            ("errno.h" include (:system-flag t) nil [752 770])
            ("stdio.h" include (:system-flag t) nil [771 789])
            ("lisp.h" include nil nil [791 808])
            ("process.h" include nil nil [809 829])
            ("gnutls.h" include nil nil [830 849])
            ("coding.h" include nil nil [850 869])
            ("buffer.h" include nil nil [870 889])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgnutls_available_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80952 80972])
                    ("" variable (:type ("Sgnutls_available_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80973 80993])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81010 81014]))                  
                :type "int")
                nil [80923 81610])
            ("syms_of_gnutls" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [83013 83018]))                  
                :type "void")
                nil [82992 86424]))          
      :file "gnutls.c"
      :pointmax 86425
      :fsize 86424
      :lastmodtime '(23302 6458 204595 616000)
      :unmatched-syntax '((semantic-list 81611 . 82990) (punctuation 81013 . 81014) (number 81000 . 81001) (number 80997 . 80998) (number 80994 . 80995) (string 80930 . 80950)))
    (semanticdb-table "semanticdb-table-1e90ba4"
      :file "coding.h"
      :fsize 25165
      :lastmodtime '(23302 6458 192595 510000))
    (semanticdb-table "semanticdb-table-25babb4"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [772 791])
            ("sys/stat.h" include (:system-flag t) nil [793 814])
            ("lisp.h" include nil nil [816 833])
            ("coding.h" include nil nil [834 853])
            ("termchar.h" include nil nil [854 875])
            ("termopts.h" include nil nil [876 897])
            ("frame.h" include nil nil [898 916])
            ("termhooks.h" include nil nil [917 939])
            ("macros.h" include nil nil [940 959])
            ("keyboard.h" include nil nil [960 981])
            ("window.h" include nil nil [982 1001])
            ("commands.h" include nil nil [1002 1023])
            ("character.h" include nil nil [1024 1046])
            ("buffer.h" include nil nil [1047 1066])
            ("dispextern.h" include nil nil [1067 1090])
            ("syntax.h" include nil nil [1091 1110])
            ("intervals.h" include nil nil [1111 1133])
            ("keymap.h" include nil nil [1134 1153])
            ("blockinput.h" include nil nil [1154 1177])
            ("sysstdio.h" include nil nil [1178 1199])
            ("systime.h" include nil nil [1200 1220])
            ("atimer.h" include nil nil [1221 1240])
            ("process.h" include nil nil [1241 1261])
            ("menu.h" include nil nil [1262 1279])
            ("errno.h" include (:system-flag t) nil [1280 1298])
            ("sys/ioctl.h" include (:system-flag t) nil [1420 1442])
            ("syssignal.h" include nil nil [1545 1567])
            ("sys/types.h" include (:system-flag t) nil [1569 1591])
            ("unistd.h" include (:system-flag t) nil [1592 1611])
            ("fcntl.h" include (:system-flag t) nil [1612 1630])
            ("ignore-value.h" include (:system-flag t) nil [1632 1657])
            ("DEV_TTY" variable
               (:dereference 1
                :default-value "\"/dev/tty\""
                :type "char")
                nil [1910 1944])
            ("interrupt_input_blocked" variable
               (:typemodifiers ("volatile")
                :type "int")
                nil [2046 2083])
            ("pending_signals" variable
               (:typemodifiers ("volatile")
                :type "bool")
                nil [2191 2221])
            ("KBD_BUFFER_SIZE" variable (:constant-flag t) nil [2231 2246])
            ("initial_kboard" variable
               (:pointer 1
                :type ("KBOARD" type (:type "class") nil nil))
                nil [2253 2276])
            ("current_kboard" variable
               (:pointer 1
                :type ("KBOARD" type (:type "class") nil nil))
                nil [2277 2300])
            ("all_kboards" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("KBOARD" type (:type "class") nil nil))
                nil [2301 2328])
            ("single_kboard" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [2401 2427])
            ("NUM_RECENT_KEYS" variable (:constant-flag t) nil [2437 2452])
            ("recent_keys_index" variable
               (:typemodifiers ("static")
                :type "int")
                nil [2516 2545])
            ("total_keys" variable
               (:typemodifiers ("static")
                :type "int")
                nil [2604 2626])
            ("recent_keys" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2690 2721])
            ("this_command_keys" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [3024 3054])
            ("this_command_key_count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [3055 3088])
            ("raw_keybuf" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3199 3229])
            ("raw_keybuf_count" variable
               (:typemodifiers ("static")
                :type "int")
                nil [3230 3258])
            ("GROW_RAW_KEYBUF" variable (:constant-flag t) nil [3268 3283])
            ("this_single_command_key_start" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [3475 3522])
            ("regular_top_level_message" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3867 3912])
            ("echoing" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [3980 4000])
            ("ok_to_echo_at_next_pause" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [4122 4169])
            ("echo_kboard" variable
               (:pointer 1
                :type ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [4426 4453])
            ("echo_message_buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [4538 4570])
            ("quit_char" variable (:type "int") nil [5336 5350])
            ("command_loop_level" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [5393 5422])
            ("unread_switch_frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [5821 5853])
            ("last_non_minibuf_size" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [5929 5968])
            ("num_input_events" variable (:type ("uintmax_t" type (:type "class") nil nil)) nil [5970 5997])
            ("point_before_last_command_or_undo" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [5998 6042])
            ("buffer_before_last_command_or_undo" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [6043 6093])
            ("last_auto_save" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6160 6192])
            ("last_point_position" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [6254 6291])
            ("internal_last_event_frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [6759 6797])
            ("read_key_sequence_cmd" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [6899 6940])
            ("read_key_sequence_remapped" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [6941 6987])
            ("dribble" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("FILE" type (:type "class") nil nil))
                nil [7041 7062])
            ("input_pending" variable (:type "bool") nil [7099 7118])
            ("input_was_pending" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [9753 9783])
            ("kbd_buffer" variable
               (:dereference 1
                :typemodifiers ("static")
                :type ("buffered_input_event" type (:type "union") nil nil))
                nil [9838 9900])
            ("kbd_fetch_ptr" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("buffered_input_event" type (:type "union") nil nil))
                nil [10125 10174])
            ("kbd_store_ptr" variable
               (:typemodifiers ("volatile")
                :type "int")
                nil [10383 10406])
            ("recursive_edit_unwind" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10877 10896]))                  
                :type "void")
                nil [10842 10897])
            ("command_loop" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10931 10936]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10898 10937])
            ("echo_now" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10961 10966]))                  
                :type "void")
                nil [10939 10967])
            ("echo_length" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10998 11003]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [10968 11004])
            ("timers_run" variable (:type "unsigned int") nil [11050 11070])
            ("input_available_clear_time" variable
               (:pointer 1
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [11162 11206])
            ("interrupt_input" variable (:type "bool") nil [11327 11348])
            ("interrupts_deferred" variable (:type "bool") nil [11425 11450])
            ("timer_idleness_start_time" variable
               (:typemodifiers ("static")
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [11500 11549])
            ("timer_last_idleness_start_time" variable
               (:typemodifiers ("static")
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [11670 11724])
            ("READABLE_EVENTS_DO_TIMERS_NOW" variable (:constant-flag t) nil [11808 11837])
            ("READABLE_EVENTS_FILTER_EVENTS" variable (:constant-flag t) nil [11856 11885])
            ("READABLE_EVENTS_IGNORE_SQUEEZABLES" variable (:constant-flag t) nil [11904 11938])
            ("keyboard_init_hook" function
               (:prototype-flag t
                :function-pointer t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [12053 12058]))                  
                :type "void")
                nil [12018 12059])
            ("get_input_pending" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [12092 12096]))                  
                :type "bool")
                nil [12061 12097])
            ("readable_events" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [12127 12131]))                  
                :type "bool")
                nil [12098 12132])
            ("read_char_x_menu_prompt" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12177 12189])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12234 12246])
                    ("" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [12247 12254]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12133 12255])
            ("read_char_minibuf_menu_prompt" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [12306 12310])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12311 12323]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12256 12324])
            ("make_lispy_event" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12362 12383]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12325 12384])
            ("make_lispy_movement" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12425 12440])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12441 12453])
                    ("" variable (:type ("scroll_bar_part" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [12494 12515])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12556 12568])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12569 12581])
                    ("" variable (:type ("Time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12587 12592]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12385 12593])
            ("modify_event_symbol" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12634 12644])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [12645 12649])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12650 12662])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12703 12715])
                    ("" variable
                       (:pointer 2
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [12716 12736])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12777 12791])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12792 12802]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12594 12803])
            ("make_lispy_switch_frame" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12848 12860]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12804 12861])
            ("make_lispy_focus_in" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12902 12914]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12862 12915])
            ("help_char_p" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13054 13066]))                  
                :type "bool")
                nil [13029 13067])
            ("save_getcjmp" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13094 13106]))                  
                :type "void")
                nil [13068 13107])
            ("restore_getcjmp" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13137 13149]))                  
                :type "void")
                nil [13108 13150])
            ("apply_modifiers" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [13187 13191])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13192 13204]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [13151 13205])
            ("restore_kboard_configuration" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [13248 13252]))                  
                :type "void")
                nil [13206 13253])
            ("handle_interrupt" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [13284 13289]))                  
                :type "void")
                nil [13254 13290])
            ("quit_throw_to_read_char" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [13338 13343]))                  
                :type "void")
                nil [13291 13344])
            ("timer_start_idle" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [13375 13380]))                  
                :type "void")
                nil [13345 13381])
            ("timer_stop_idle" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [13411 13416]))                  
                :type "void")
                nil [13382 13417])
            ("timer_resume_idle" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [13449 13454]))                  
                :type "void")
                nil [13418 13455])
            ("deliver_user_signal" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [13489 13493]))                  
                :type "void")
                nil [13456 13494])
            ("find_user_signal_name" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [13531 13535]))                  
                :type "char")
                nil [13495 13536])
            ("store_user_signal_events" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [13575 13580]))                  
                :type "void")
                nil [13537 13581])
            ("kset_echo_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13686 13704])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13705 13721]))                  
                :type "void")
                nil [13656 13751])
            ("kset_echo_prompt" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13782 13800])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13801 13817]))                  
                :type "void")
                nil [13752 13847])
            ("kset_kbd_queue" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13876 13894])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13895 13911]))                  
                :type "void")
                nil [13848 13939])
            ("kset_keyboard_translate_table" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13983 14001])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14002 14018]))                  
                :type "void")
                nil [13940 14062])
            ("kset_last_prefix_arg" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14097 14115])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14116 14132]))                  
                :type "void")
                nil [14063 14167])
            ("kset_last_repeatable_command" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14210 14228])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14229 14245]))                  
                :type "void")
                nil [14168 14288])
            ("kset_local_function_key_map" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14330 14348])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14349 14365]))                  
                :type "void")
                nil [14289 14407])
            ("kset_overriding_terminal_local_map" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14456 14474])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14475 14491]))                  
                :type "void")
                nil [14408 14540])
            ("kset_real_last_command" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14577 14595])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14596 14612]))                  
                :type "void")
                nil [14541 14649])
            ("kset_system_key_syms" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14684 14702])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14703 14719]))                  
                :type "void")
                nil [14650 14753])
            ("echo_keystrokes_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [14788 14793]))                  
                :type "bool")
                nil [14757 14955])
            ("echo_add_key" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15139 15153]))                  
                :type "void")
                nil [15113 16600])
            ("echo_dash" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16775 16780]))                  
                :type "void")
                nil [16752 18005])
            ("echo_update" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [18032 18037]))                  
                :type "void")
                nil [18007 18622])
            ("echo_now" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [18733 18738]))                  
                :type "void")
                nil [18711 19456])
            ("cancel_echoing" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [19537 19542]))                  
                :type "void")
                nil [19516 19761])
            ("echo_length" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [19847 19852]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [19817 19969])
            ("echo_truncate" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20180 20197]))                  
                :type "void")
                nil [20153 20472])
            ("add_command_key" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20558 20574]))                  
                :type "void")
                nil [20529 20789])
            ("recursive_edit_1" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [20823 20828]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [20793 22483])
            ("record_auto_save" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [22587 22592]))                  
                :type "void")
                nil [22564 22642])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frecursive_edit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22883 22899])
                    ("" variable (:type ("Srecursive_edit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22900 22916])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22934 22938]))                  
                :type "int")
                nil [22858 23385])
            ("recursive_edit_unwind" function
               (:arguments 
                  ( ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24492 24511]))                  
                :type "void")
                nil [24464 24616])
            ("not_single_kboard_state" function
               (:arguments 
                  ( ("kboard" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25560 25575]))                  
                :type "void")
                nil [25530 25638])
            ("kboard_stack" type
               (:members 
                  ( ("kboard" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [25825 25840])
                    ("next" variable
                       (:pointer 1
                        :type ("kboard_stack" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [25843 25869]))                  
                :type "struct")
                nil [25801 25872])
            ("kboard_stack" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("kboard_stack" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [25874 25915])
            ("push_kboard" function
               (:arguments 
                  ( ("k" variable
                       (:pointer 1
                        :type ("kboard" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [25935 25952]))                  
                :type "void")
                nil [25917 26104])
            ("pop_kboard" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [26123 26128]))                  
                :type "void")
                nil [26106 26622])
            ("temporarily_switch_to_single_kboard" function
               (:arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [27047 27063]))                  
                :type "void")
                nil [27005 28130])
            ("restore_kboard_configuration" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("was_locked" variable (:type "int") (reparse-symbol arg-sub-list) [28401 28416]))                  
                :type "void")
                nil [28359 28671])
            ("cmd_error" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28838 28855]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28808 29950])
            ("cmd_error_internal" function
               (:arguments 
                  ( ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30280 30297])
                    ("context" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [30298 30318]))                  
                :type "void")
                nil [30255 30778])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcommand_error_default_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30821 30853])
                    ("" variable (:type ("Scommand_error_default_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30861 30893])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30910 30914]))                  
                :type "int")
                nil [30780 31079])
            ("command_loop_2" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32422 32434]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [32387 32435])
            ("top_level_1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32468 32480]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [32436 32481])
            ("command_loop" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [32680 32685]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [32654 33679])
            ("command_loop_2" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ignore" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34011 34030]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [33976 34178])
            ("top_level_2" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [34212 34217]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [34180 34256])
            ("top_level_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ignore" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34290 34309]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [34258 34645])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftop_level" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34667 34678])
                    ("" variable (:type ("Stop_level" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34679 34690])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34708 34712])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34802 34813])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34814 34823]))                  
                :type "int")
                nil [34647 34832])
            ("user_error" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("msg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [35160 35176]))                  
                :type "void")
                nil [35126 35226])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fexit_recursive_edit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35319 35340])
                    ("" variable (:type ("Sexit_recursive_edit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35341 35362])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35380 35384])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35453 35464])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35465 35474]))                  
                :type "int")
                nil [35289 35483])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fabort_recursive_edit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35710 35732])
                    ("" variable (:type ("Sabort_recursive_edit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35733 35755])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35773 35777])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35866 35877])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35878 35887]))                  
                :type "int")
                nil [35679 35896])
            ("tracking_off" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("old_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36155 36177]))                  
                :type "void")
                nil [36129 36674])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftrack_mouse" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36708 36721])
                    ("" variable (:type ("Strack_mouse" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36722 36735])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36752 36756]))                  
                :type "int")
                nil [36676 36837])
            ("ignore_mouse_drag_p" variable (:type "bool") nil [37252 37277])
            ("some_mouse_moved" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [37319 37324]))                  
                :type ("frame" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [37279 37568])
            ("read_key_sequence" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37689 37703])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [37704 37708])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37709 37721])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [37752 37757])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [37758 37763])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [37764 37769])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [37770 37775]))                  
                :type "int")
                nil [37659 37776])
            ("adjust_point_for_property" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37816 37826])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [37827 37832]))                  
                :type "void")
                nil [37777 37833])
            ("command_loop_1" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [37863 37868]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [37835 48985])
            ("read_menu_command" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [49018 49023]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [48987 49479])
            ("adjust_point_for_property" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("last_pt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49754 49772])
                    ("modified" variable (:type "bool") (reparse-symbol arg-sub-list) [49773 49787]))                  
                :type "void")
                nil [49715 55503])
            ("safe_run_hooks_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55613 55629])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [55630 55648]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [55576 55702])
            ("safe_run_hooks_error" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("error" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55847 55865])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55866 55882])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [55883 55901]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [55806 56821])
            ("safe_run_hook_funcall" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56865 56881])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [56882 56900]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [56823 57144])
            ("safe_run_hooks" function
               (:arguments 
                  ( ("hook" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57340 57357]))                  
                :type "void")
                nil [57319 57541])
            ("poll_suppress_count" variable (:type "int") nil [57612 57636])
            ("start_polling" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [58330 58335]))                  
                :type "void")
                nil [58310 59277])
            ("stop_polling" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [59717 59722]))                  
                :type "void")
                nil [59698 59969])
            ("set_poll_suppress_count" function
               (:arguments 
                  ( ("count" variable (:type "int") (reparse-symbol arg-sub-list) [60097 60107]))                  
                :type "void")
                nil [60067 60370])
            ("bind_polling_period" function
               (:arguments 
                  ( ("n" variable (:type "int") (reparse-symbol arg-sub-list) [60475 60481]))                  
                :type "void")
                nil [60449 60749])
            ("make_ctrl_char" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [60821 60827]))                  
                :type "int")
                nil [60801 61649])
            ("show_help_echo" function
               (:arguments 
                  ( ("help" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62784 62801])
                    ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62802 62821])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62822 62841])
                    ("pos" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62844 62860]))                  
                :type "void")
                nil [62763 63766])
            ("kbd_buffer_get_event" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("kbp" variable
                       (:pointer 2
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [63862 63875])
                    ("used_mouse_menu" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [63876 63898])
                    ("end_time" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [63905 63931]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [63821 63932])
            ("record_char" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63958 63972]))                  
                :type "void")
                nil [63933 63973])
            ("help_form_saved_window_configs" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [63975 64025])
            ("read_char_help_form_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [64066 64071]))                  
                :type "void")
                nil [64026 64294])
            ("STOP_POLLING" variable (:constant-flag t) nil [64304 64316])
            ("RESUME_POLLING" variable (:constant-flag t) nil [64432 64446])
            ("read_event_from_main_queue" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("end_time" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [64601 64627])
                    ("local_getcjmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64656 64682])
                    ("used_mouse_menu" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [64711 64733]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [64554 66520])
            ("read_decoded_event_from_main_queue" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("end_time" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [66672 66698])
                    ("local_getcjmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66735 66761])
                    ("prev_event" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66798 66821])
                    ("used_mouse_menu" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [66858 66880]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [66617 69761])
            ("read_char" function
               (:arguments 
                  ( ("commandflag" variable (:type "int") (reparse-symbol arg-sub-list) [70888 70904])
                    ("map" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70905 70921])
                    ("prev_event" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70926 70949])
                    ("used_mouse_menu" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [70954 70976])
                    ("end_time" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [70977 71003]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [70865 95784])
            ("record_menu_key" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95925 95939]))                  
                :type "void")
                nil [95896 96351])
            ("help_char_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96445 96459]))                  
                :type "bool")
                nil [96420 96647])
            ("record_char" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96724 96738]))                  
                :type "void")
                nil [96699 101186])
            ("save_getcjmp" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("temp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101408 101425]))                  
                :type "void")
                nil [101382 101471])
            ("restore_getcjmp" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("temp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101502 101519]))                  
                :type "void")
                nil [101473 101565])
            ("readable_events" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [101873 101883]))                  
                :type "bool")
                nil [101844 103433])
            ("EXTERNALLY_VISIBLE" variable (:type ("stop_character" type (:type "class") nil nil)) nil [103494 103528])
            ("event_to_kboard" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("event" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [103563 103589]))                  
                :type ("KBOARD" type (:type "class") nil nil))
                nil [103530 104103])
            ("kbd_buffer_store_event" function
               (:arguments 
                  ( ("event" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [104560 104595]))                  
                :type "void")
                nil [104531 104641])
            ("kbd_buffer_store_buffered_event" function
               (:arguments 
                  ( ("event" variable
                       (:pointer 1
                        :type ("buffered_input_event" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [105111 105145])
                    ("hold_quit" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [105151 105181]))                  
                :type "void")
                nil [105073 108791])
            ("INPUT_EVENT_POS_MAX" variable (:constant-flag t) nil [109342 109361])
            ("INPUT_EVENT_POS_MIN" variable (:constant-flag t) nil [109471 109490])
            ("position_to_Time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109621 109635]))                  
                :type ("Time" type (:type "class") nil nil))
                nil [109591 109723])
            ("Time_to_position" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("encoded_pos" variable (:type ("Time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109848 109865]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [109813 110086])
            ("gen_help_event" function
               (:arguments 
                  ( ("help" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110503 110520])
                    ("frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110521 110539])
                    ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110540 110559])
                    ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110562 110581])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110582 110596]))                  
                :type "void")
                nil [110482 110855])
            ("kbd_buffer_store_help_event" function
               (:arguments 
                  ( ("frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110956 110974])
                    ("help" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110975 110992]))                  
                :type "void")
                nil [110922 111199])
            ("discard_mouse_events" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [111314 111319]))                  
                :type "void")
                nil [111287 111782])
            ("kbd_buffer_events_waiting" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [112062 112067]))                  
                :type "bool")
                nil [112030 112351])
            ("clear_event" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("event" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [112413 112439]))                  
                :type "void")
                nil [112388 112469])
            ("kbd_buffer_get_event" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kbp" variable
                       (:pointer 2
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [112762 112775])
                    ("used_mouse_menu" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [112798 112820])
                    ("end_time" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [112843 112869]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [112721 121484])
            ("process_special_events" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [121643 121648]))                  
                :type "void")
                nil [121607 123279])
            ("swallow_events" function
               (:arguments 
                  ( ("do_display" variable (:type "bool") (reparse-symbol arg-sub-list) [123444 123460]))                  
                :type "void")
                nil [123423 123713])
            ("timer_start_idle" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [123839 123844]))                  
                :type "void")
                nil [123809 124206])
            ("timer_stop_idle" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [124316 124321]))                  
                :type "void")
                nil [124287 124376])
            ("timer_resume_idle" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [124462 124467]))                  
                :type "void")
                nil [124431 124598])
            ("pending_funcalls" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [124803 124832])
            ("decode_timer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("timer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124938 124956])
                    ("result" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [124957 124981]))                  
                :type "bool")
                nil [124912 125373])
            ("timer_check_2" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("timers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125892 125911])
                    ("idle_timers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125912 125936]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [125854 130018])
            ("timer_check" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [130390 130395]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [130361 131145])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_idle_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131175 131194])
                    ("" variable (:type ("Scurrent_idle_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131195 131214])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131231 131235]))                  
                :type "int")
                nil [131147 131513])
            ("accent_key_syms" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131724 131759])
            ("func_key_syms" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131760 131793])
            ("mouse_syms" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131794 131824])
            ("wheel_syms" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131825 131855])
            ("drag_n_drop_syms" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131856 131892])
            ("lispy_accent_codes" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
#ifdef XK_dead_circumflex
  XK_dead_circumflex,
#else
  0,
#endif
#ifdef XK_dead_grave
  XK_dead_grave,
#else
  0,
#endif
#ifdef XK_dead_tilde
  XK_dead_tilde,
#else
  0,
#endif
#ifdef XK_dead_diaeresis
  XK_dead_diaeresis,
#else
  0,
#endif
#ifdef XK_dead_macron
  XK_dead_macron,
#else
  0,
#endif
#ifdef XK_dead_degree
  XK_dead_degree,
#else
  0,
#endif
#ifdef XK_dead_acute
  XK_dead_acute,
#else
  0,
#endif
#ifdef XK_dead_cedilla
  XK_dead_cedilla,
#else
  0,
#endif
#ifdef XK_dead_breve
  XK_dead_breve,
#else
  0,
#endif
#ifdef XK_dead_ogonek
  XK_dead_ogonek,
#else
  0,
#endif
#ifdef XK_dead_caron
  XK_dead_caron,
#else
  0,
#endif
#ifdef XK_dead_doubleacute
  XK_dead_doubleacute,
#else
  0,
#endif
#ifdef XK_dead_abovedot
  XK_dead_abovedot,
#else
  0,
#endif
#ifdef XK_dead_abovering
  XK_dead_abovering,
#else
  0,
#endif
#ifdef XK_dead_iota
  XK_dead_iota,
#else
  0,
#endif
#ifdef XK_dead_belowdot
  XK_dead_belowdot,
#else
  0,
#endif
#ifdef XK_dead_voiced_sound
  XK_dead_voiced_sound,
#else
  0,
#endif
#ifdef XK_dead_semivoiced_sound
  XK_dead_semivoiced_sound,
#else
  0,
#endif
#ifdef XK_dead_hook
  XK_dead_hook,
#else
  0,
#endif
#ifdef XK_dead_horn
  XK_dead_horn,
#else
  0,
#endif
}"
                :type "int")
                nil [132001 133255])
            ("lispy_accent_keys" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  \"dead-circumflex\",
  \"dead-grave\",
  \"dead-tilde\",
  \"dead-diaeresis\",
  \"dead-macron\",
  \"dead-degree\",
  \"dead-acute\",
  \"dead-cedilla\",
  \"dead-breve\",
  \"dead-ogonek\",
  \"dead-caron\",
  \"dead-doubleacute\",
  \"dead-abovedot\",
  \"dead-abovering\",
  \"dead-iota\",
  \"dead-belowdot\",
  \"dead-voiced-sound\",
  \"dead-semivoiced-sound\",
  \"dead-hook\",
  \"dead-horn\",
}"
                :type "char")
                nil [133363 133779])
            ("FUNCTION_KEY_OFFSET" variable (:constant-flag t) nil [145244 145263])
            ("lispy_function_keys" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
    /* X Keysym value */

    0, 0, 0, 0, 0, 0, 0, 0,			      /* 0xff00...0f */
    \"backspace\", \"tab\", \"linefeed\", \"clear\",
    0, \"return\", 0, 0,
    0, 0, 0, \"pause\",				      /* 0xff10...1f */
    0, 0, 0, 0, 0, 0, 0, \"escape\",
    0, 0, 0, 0,
    0, \"kanji\", \"muhenkan\", \"henkan\",		      /* 0xff20...2f */
    \"romaji\", \"hiragana\", \"katakana\", \"hiragana-katakana\",
    \"zenkaku\", \"hankaku\", \"zenkaku-hankaku\", \"touroku\",
    \"massyo\", \"kana-lock\", \"kana-shift\", \"eisu-shift\",
    \"eisu-toggle\",				      /* 0xff30...3f */
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   /* 0xff40...4f */

    \"home\", \"left\", \"up\", \"right\", /* 0xff50 */	/* IsCursorKey */
    \"down\", \"prior\", \"next\", \"end\",
    \"begin\", 0, 0, 0, 0, 0, 0, 0,
    \"select\",			/* 0xff60 */	/* IsMiscFunctionKey */
    \"print\",
    \"execute\",
    \"insert\",
    0,		/* 0xff64 */
    \"undo\",
    \"redo\",
    \"menu\",
    \"find\",
    \"cancel\",
    \"help\",
    \"break\",			/* 0xff6b */

    0, 0, 0, 0,
    0, 0, 0, 0, \"backtab\", 0, 0, 0,		/* 0xff70...  */
    0, 0, 0, 0, 0, 0, 0, \"kp-numlock\",		/* 0xff78...  */
    \"kp-space\",			/* 0xff80 */	/* IsKeypadKey */
    0, 0, 0, 0, 0, 0, 0, 0,
    \"kp-tab\",			/* 0xff89 */
    0, 0, 0,
    \"kp-enter\",			/* 0xff8d */
    0, 0, 0,
    \"kp-f1\",			/* 0xff91 */
    \"kp-f2\",
    \"kp-f3\",
    \"kp-f4\",
    \"kp-home\",			/* 0xff95 */
    \"kp-left\",
    \"kp-up\",
    \"kp-right\",
    \"kp-down\",
    \"kp-prior\",			/* kp-page-up */
    \"kp-next\",			/* kp-page-down */
    \"kp-end\",
    \"kp-begin\",
    \"kp-insert\",
    \"kp-delete\",
    0,				/* 0xffa0 */
    0, 0, 0, 0, 0, 0, 0, 0, 0,
    \"kp-multiply\",		/* 0xffaa */
    \"kp-add\",
    \"kp-separator\",
    \"kp-subtract\",
    \"kp-decimal\",
    \"kp-divide\",		/* 0xffaf */
    \"kp-0\",			/* 0xffb0 */
    \"kp-1\",	\"kp-2\",	\"kp-3\",	\"kp-4\",	\"kp-5\",	\"kp-6\",	\"kp-7\",	\"kp-8\",	\"kp-9\",
    0,		/* 0xffba */
    0, 0,
    \"kp-equal\",			/* 0xffbd */
    \"f1\",			/* 0xffbe */	/* IsFunctionKey */
    \"f2\",
    \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \"f8\",	\"f9\", \"f10\", /* 0xffc0 */
    \"f11\", \"f12\", \"f13\", \"f14\", \"f15\", \"f16\", \"f17\", \"f18\",
    \"f19\", \"f20\", \"f21\", \"f22\", \"f23\", \"f24\", \"f25\", \"f26\", /* 0xffd0 */
    \"f27\", \"f28\", \"f29\", \"f30\", \"f31\", \"f32\", \"f33\", \"f34\",
    \"f35\", 0, 0, 0, 0, 0, 0, 0,	/* 0xffe0 */
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,     /* 0xfff0 */
    0, 0, 0, 0, 0, 0, 0, \"delete\"
  }"
                :type "char")
                nil [145379 147844])
            ("ISO_FUNCTION_KEY_OFFSET" variable (:constant-flag t) nil [147922 147945])
            ("iso_lispy_function_keys" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
    0, 0, 0, 0, 0, 0, 0, 0,	/* 0xfe00 */
    0, 0, 0, 0, 0, 0, 0, 0,	/* 0xfe08 */
    0, 0, 0, 0, 0, 0, 0, 0,	/* 0xfe10 */
    0, 0, 0, 0, 0, 0, 0, 0,	/* 0xfe18 */
    \"iso-lefttab\",		/* 0xfe20 */
    \"iso-move-line-up\", \"iso-move-line-down\",
    \"iso-partial-line-up\", \"iso-partial-line-down\",
    \"iso-partial-space-left\", \"iso-partial-space-right\",
    \"iso-set-margin-left\", \"iso-set-margin-right\", /* 0xffe27, 28 */
    \"iso-release-margin-left\", \"iso-release-margin-right\",
    \"iso-release-both-margins\",
    \"iso-fast-cursor-left\", \"iso-fast-cursor-right\",
    \"iso-fast-cursor-up\", \"iso-fast-cursor-down\",
    \"iso-continuous-underline\", \"iso-discontinuous-underline\", /* 0xfe30, 31 */
    \"iso-emphasize\", \"iso-center-object\", \"iso-enter\", /* ... 0xfe34 */
  }"
                :type "char")
                nil [147954 148782])
            ("Vlispy_mouse_stem" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [148813 148850])
            ("lispy_wheel_names" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  \"wheel-up\", \"wheel-down\", \"wheel-left\", \"wheel-right\"
}"
                :type "char")
                nil [148852 148959])
            ("lispy_drag_n_drop_names" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  \"drag-n-drop\"
}"
                :type "char")
                nil [149104 149177])
            ("scroll_bar_parts" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "{
  SYMBOL_INDEX (Qnil), SYMBOL_INDEX (Qabove_handle), SYMBOL_INDEX (Qhandle),
  SYMBOL_INDEX (Qbelow_handle), SYMBOL_INDEX (Qup), SYMBOL_INDEX (Qdown),
  SYMBOL_INDEX (Qtop), SYMBOL_INDEX (Qbottom), SYMBOL_INDEX (Qend_scroll),
  SYMBOL_INDEX (Qratio), SYMBOL_INDEX (Qbefore_handle),
  SYMBOL_INDEX (Qhorizontal_handle), SYMBOL_INDEX (Qafter_handle),
  SYMBOL_INDEX (Qleft), SYMBOL_INDEX (Qright), SYMBOL_INDEX (Qleftmost),
  SYMBOL_INDEX (Qrightmost), SYMBOL_INDEX (Qend_scroll), SYMBOL_INDEX (Qratio)
}"
                :type "short")
                nil [149370 149915])
            ("button_down_location" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [150967 151007])
            ("last_mouse_button" variable
               (:typemodifiers ("static")
                :type "int")
                nil [151122 151151])
            ("last_mouse_x" variable
               (:typemodifiers ("static")
                :type "int")
                nil [151152 151176])
            ("last_mouse_y" variable
               (:typemodifiers ("static")
                :type "int")
                nil [151177 151201])
            ("button_down_time" variable
               (:typemodifiers ("static")
                :type ("Time" type (:type "class") nil nil))
                nil [151202 151231])
            ("double_click_count" variable
               (:typemodifiers ("static")
                :type "int")
                nil [151286 151316])
            ("make_lispy_position" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [151468 151484])
                    ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151485 151499])
                    ("y" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151500 151514])
                    ("t" variable (:type ("Time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151522 151529]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [151428 158145])
            ("toolkit_menubar_in_use" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("f" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [158408 158424]))                  
                :type "bool")
                nil [158372 158584])
            ("make_scroll_bar_position" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ev" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [158778 158801])
                    ("type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [158802 158819]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [158733 158972])
            ("make_lispy_event" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("event" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [159416 159442]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [159379 182792])
            ("make_lispy_movement" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("frame" variable
                       (:pointer 1
                        :type ("frame" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [182834 182854])
                    ("bar_window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [182855 182878])
                    ("part" variable (:type ("scroll_bar_part" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [182879 182905])
                    ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [182913 182927])
                    ("y" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [182928 182942])
                    ("t" variable (:type ("Time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [182943 182950]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [182794 183484])
            ("make_lispy_switch_frame" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [183569 183587]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [183525 183630])
            ("make_lispy_focus_in" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [183672 183690]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [183632 183729])
            ("parse_modifiers_uncached" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [184253 184272])
                    ("modifier_end" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [184273 184297]))                  
                :type "int")
                nil [184216 186748])
            ("apply_modifiers_uncached" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("modifiers" variable (:type "int") (reparse-symbol arg-sub-list) [186948 186962])
                    ("base" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [186963 186974])
                    ("base_len" variable (:type "int") (reparse-symbol arg-sub-list) [186975 186988])
                    ("base_len_byte" variable (:type "int") (reparse-symbol arg-sub-list) [186989 187007]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [186903 188834])
            ("modifier_names" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  \"up\", \"down\", \"drag\", \"click\", \"double\", \"triple\", 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, \"alt\", \"super\", \"hyper\", \"shift\", \"control\", \"meta\"
}"
                :type "char")
                nil [188837 189042])
            ("NUM_MOD_NAMES" variable (:constant-flag t) nil [189051 189064])
            ("modifier_symbols" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [189093 189129])
            ("lispy_modifier_list" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("modifiers" variable (:type "int") (reparse-symbol arg-sub-list) [189251 189265]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [189211 189527])
            ("KEY_TO_CHAR" variable (:constant-flag t) nil [189904 189915])
            ("parse_modifiers" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [189989 190008]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [189960 191159])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fevent_symbol_parse_modifiers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [191209 191239])
                    ("" variable (:type ("Sevent_symbol_parse_modifiers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [191247 191277])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [191294 191298]))                  
                :type "int")
                nil [191161 191372])
            ("apply_modifiers" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("modifiers" variable (:type "int") (reparse-symbol arg-sub-list) [191967 191981])
                    ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [191982 191999]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [191931 193866])
            ("reorder_modifiers" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [194298 194317]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [194267 194600])
            ("modify_event_symbol" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol_num" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [196108 196129])
                    ("modifiers" variable (:type "int") (reparse-symbol arg-sub-list) [196130 196144])
                    ("symbol_kind" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [196145 196169])
                    ("name_alist_or_stem" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [196177 196208])
                    ("name_table" variable
                       (:pointer 2
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [196209 196239])
                    ("symbol_table" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [196247 196273])
                    ("table_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [196274 196295]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [196068 198635])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fevent_convert_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198832 198852])
                    ("" variable (:type ("Sevent_convert_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198853 198873])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198890 198894]))                  
                :type "int")
                nil [198803 199318])
            ("parse_solitary_modifier" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [200719 200738]))                  
                :type "int")
                nil [200690 202393])
            ("lucid_event_type_list_p" function
               (:arguments 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202597 202616]))                  
                :type "bool")
                nil [202567 203056])
            ("get_input_pending" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [203662 203672]))                  
                :type "bool")
                nil [203631 204142])
            ("record_asynch_buffer_change" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [204291 204296]))                  
                :type "void")
                nil [204257 205168])
            ("gobble_input" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [205399 205404]))                  
                :type "int")
                nil [205381 207728])
            ("tty_read_avail_input" function
               (:arguments 
                  ( ("terminal" variable
                       (:pointer 1
                        :type ("terminal" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [208025 208051])
                    ("hold_quit" variable
                       (:pointer 1
                        :type ("input_event" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [208074 208104]))                  
                :type "int")
                nil [207999 213232])
            ("handle_async_input" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [213267 213272]))                  
                :type "void")
                nil [213235 213560])
            ("process_pending_signals" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [213592 213597]))                  
                :type "void")
                nil [213562 213678])
            ("unblock_input_to" function
               (:arguments 
                  ( ("level" variable (:type "int") (reparse-symbol arg-sub-list) [213875 213885]))                  
                :type "void")
                nil [213852 214080])
            ("unblock_input" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [214504 214509]))                  
                :type "void")
                nil [214484 214563])
            ("totally_unblock_input" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [214680 214685]))                  
                :type "void")
                nil [214652 214713])
            ("user_signal_info" type
               (:members 
                  ( ("sig" variable (:type "int") (reparse-symbol classsubparts) [215132 215140])
                    ("name" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [215173 215184])
                    ("npending" variable (:type "int") (reparse-symbol classsubparts) [215224 215237])
                    ("next" variable
                       (:pointer 1
                        :type ("user_signal_info" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [215241 215271]))                  
                :type "struct")
                nil [215080 215274])
            ("user_signals" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type ("user_signal_info" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [215305 215357])
            ("add_user_signal" function
               (:arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [215381 215389])
                    ("name" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [215390 215407]))                  
                :type "void")
                nil [215359 215799])
            ("handle_user_signal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [215833 215841]))                  
                :type "void")
                nil [215801 216765])
            ("deliver_user_signal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [216800 216808]))                  
                :type "void")
                nil [216767 216864])
            ("find_user_signal_name" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [216903 216911]))                  
                :type "char")
                nil [216866 217048])
            ("store_user_signal_events" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [217088 217093]))                  
                :type "void")
                nil [217050 217565])
            ("menu_bar_item" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [217596 217608])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [217609 217621])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [217622 217634])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [217635 217642]))                  
                :type "void")
                nil [217569 217643])
            ("menu_bar_one_keymap_changed_items" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [217644 217697])
            ("menu_bar_items_vector" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [217858 217899])
            ("menu_bar_items_index" variable
               (:typemodifiers ("static")
                :type "int")
                nil [217900 217932])
            ("separator_names" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  \"space\",
  \"no-line\",
  \"single-line\",
  \"double-line\",
  \"single-dashed-line\",
  \"double-dashed-line\",
  \"shadow-etched-in\",
  \"shadow-etched-out\",
  \"shadow-etched-in-dash\",
  \"shadow-etched-out-dash\",
  \"shadow-double-etched-in\",
  \"shadow-double-etched-out\",
  \"shadow-double-etched-in-dash\",
  \"shadow-double-etched-out-dash\",
  0,
}"
                :type "char")
                nil [217935 218317])
            ("menu_separator_name_p" function
               (:arguments 
                  ( ("label" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [218399 218417]))                  
                :type "bool")
                nil [218371 218847])
            ("menu_bar_items" function
               (:arguments 
                  ( ("old" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [219096 219112]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [219068 223719])
            ("item_properties" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [223858 223886])
            ("menu_bar_item" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [223915 223931])
                    ("item" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [223932 223949])
                    ("dummy1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [223950 223969])
                    ("dummy2" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [223970 223983]))                  
                :type "void")
                nil [223888 226284])
            ("menu_item_eval_property_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [226407 226423]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [226361 226635])
            ("eval_dyn" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("form" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [226666 226683]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [226637 226716])
            ("menu_item_eval_property" function
               (:arguments 
                  ( ("sexpr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [226891 226909]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [226854 227135])
            ("parse_menu_item" function
               (:arguments 
                  ( ("item" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [227549 227566])
                    ("inmenubar" variable (:type "int") (reparse-symbol arg-sub-list) [227567 227581]))                  
                :type "bool")
                nil [227527 235335])
            ("tool_bar_items_vector" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [235669 235710])
            ("tool_bar_item_properties" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [235843 235887])
            ("ntool_bar_items" variable
               (:typemodifiers ("static")
                :type "int")
                nil [235939 235966])
            ("init_tool_bar_items" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236030 236042]))                  
                :type "void")
                nil [235997 236043])
            ("process_tool_bar_item" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236079 236091])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236092 236104])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236105 236117])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [236125 236132]))                  
                :type "void")
                nil [236044 236133])
            ("parse_tool_bar_item" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236167 236179])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236180 236192]))                  
                :type "bool")
                nil [236134 236193])
            ("append_tool_bar_item" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [236228 236233]))                  
                :type "void")
                nil [236194 236234])
            ("tool_bar_items" function
               (:arguments 
                  ( ("reuse" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236432 236450])
                    ("nitems" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [236451 236463]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [236404 239162])
            ("process_tool_bar_item" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [239252 239268])
                    ("def" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [239269 239285])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [239286 239303])
                    ("args" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [239304 239315]))                  
                :type "void")
                nil [239217 240084])
            ("PROP" variable (:constant-flag t) nil [240164 240168])
            ("set_prop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("idx" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [240235 240249])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [240250 240266]))                  
                :type "void")
                nil [240213 240315])
            ("parse_tool_bar_item" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [241661 241677])
                    ("item" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [241678 241695]))                  
                :type "bool")
                nil [241628 248051])
            ("init_tool_bar_items" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("reuse" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [248184 248202]))                  
                :type "void")
                nil [248151 248361])
            ("append_tool_bar_item" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [248477 248482]))                  
                :type "void")
                nil [248443 248999])
            ("read_char_x_menu_prompt" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("map" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [249990 250006])
                    ("prev_event" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [250011 250034])
                    ("used_mouse_menu" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [250035 250057]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [249946 251626])
            ("read_char_minibuf_menu_prompt" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("commandflag" variable (:type "int") (reparse-symbol arg-sub-list) [251678 251694])
                    ("map" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [251705 251721]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [251628 257716])
            ("follow_key" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("keymap" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [257781 257800])
                    ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [257801 257817]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [257750 257890])
            ("active_maps" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("first_event" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [257924 257948])
                    ("second_event" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [257949 257974]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [257892 258513])
            ("keyremap" type
               (:members 
                  ( ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [258734 258753])
                    ("map" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [258851 258867])
                    ("start" variable (:type "int") (reparse-symbol classsubparts) [259073 259088])
                    ("end" variable (:type "int") (reparse-symbol classsubparts) [259073 259088]))                  
                :type "struct")
                nil [258646 259100])
            ("keyremap" type
               (:typedef ("keyremap" type (:type "struct") nil nil)
                :type "typedef")
                nil [258646 259100])
            ("access_keymap_keyremap" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("map" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [259457 259473])
                    ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [259474 259490])
                    ("prompt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [259491 259510])
                    ("do_funcall" variable (:type "bool") (reparse-symbol arg-sub-list) [259514 259530]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [259414 260402])
            ("keyremap_step" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("keybuf" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [261024 261044])
                    ("bufsize" variable (:type "int") (reparse-symbol arg-sub-list) [261045 261057])
                    ("fkey" variable
                       (:pointer 1
                        :typemodifiers ("volatile")
                        :type ("keyremap" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [261058 261082])
                    ("input" variable (:type "int") (reparse-symbol arg-sub-list) [261091 261101])
                    ("doit" variable (:type "bool") (reparse-symbol arg-sub-list) [261102 261112])
                    ("diff" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [261113 261123])
                    ("prompt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [261124 261143]))                  
                :type "bool")
                nil [260997 262479])
            ("test_undefined" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("binding" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [262509 262529]))                  
                :type "bool")
                nil [262481 262685])
            ("init_raw_keybuf_count" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [262715 262720]))                  
                :type "void")
                nil [262687 262748])
            ("read_key_sequence" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("keybuf" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [264502 264522])
                    ("bufsize" variable (:type "int") (reparse-symbol arg-sub-list) [264523 264535])
                    ("prompt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [264536 264555])
                    ("dont_downcase_last" variable (:type "bool") (reparse-symbol arg-sub-list) [264561 264585])
                    ("can_return_switch_frame" variable (:type "bool") (reparse-symbol arg-sub-list) [264586 264615])
                    ("fix_current_buffer" variable (:type "bool") (reparse-symbol arg-sub-list) [264621 264645])
                    ("prevent_redisplay" variable (:type "bool") (reparse-symbol arg-sub-list) [264646 264669]))                  
                :type "int")
                nil [264472 295966])
            ("read_key_sequence_vs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("prompt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [296009 296028])
                    ("continue_echo" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [296029 296055])
                    ("dont_downcase_last" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [296064 296095])
                    ("can_return_switch_frame" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [296104 296140])
                    ("cmd_loop" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [296149 296170])
                    ("allow_string" variable (:type "bool") (reparse-symbol arg-sub-list) [296171 296189]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [295968 297321])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_key_sequence" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [297351 297370])
                    ("" variable (:type ("Sread_key_sequence" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [297371 297390])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [297407 297411]))                  
                :type "int")
                nil [297323 299879])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_key_sequence_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [300046 300072])
                    ("" variable (:type ("Sread_key_sequence_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [300080 300106])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [300123 300127]))                  
                :type "int")
                nil [300011 300329])
            ("detect_input_pending" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [300539 300544]))                  
                :type "bool")
                nil [300512 300597])
            ("detect_input_pending_ignore_squeezables" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [300724 300729]))                  
                :type "bool")
                nil [300678 300815])
            ("detect_input_pending_run_timers" function
               (:arguments 
                  ( ("do_display" variable (:type "bool") (reparse-symbol arg-sub-list) [300932 300948]))                  
                :type "bool")
                nil [300894 301184])
            ("clear_input_pending" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [301412 301417]))                  
                :type "void")
                nil [301386 301446])
            ("requeued_events_pending_p" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [301792 301797]))                  
                :type "bool")
                nil [301760 301844])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finput_pending_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [301872 301889])
                    ("" variable (:type ("Sinput_pending_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [301890 301907])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [301924 301928]))                  
                :type "int")
                nil [301846 302213])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frecent_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [302651 302664])
                    ("" variable (:type ("Srecent_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [302665 302678])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [302695 302699]))                  
                :type "int")
                nil [302629 302926])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fthis_command_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [303578 303597])
                    ("" variable (:type ("Sthis_command_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [303598 303617])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [303634 303638]))                  
                :type "int")
                nil [303550 303888])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset__this_command_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [304024 304048])
                    ("" variable (:type ("Sset__this_command_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [304056 304080])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [304097 304101]))                  
                :type "int")
                nil [303991 304239])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fthis_command_keys_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [305061 305087])
                    ("" variable (:type ("Sthis_command_keys_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [305088 305114])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [305131 305135]))                  
                :type "int")
                nil [305026 305356])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fthis_single_command_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [305483 305509])
                    ("" variable (:type ("Sthis_single_command_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [305517 305543])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [305560 305564]))                  
                :type "int")
                nil [305448 305856])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fthis_single_command_raw_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [306062 306092])
                    ("" variable (:type ("Sthis_single_command_raw_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [306100 306130])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [306147 306151]))                  
                :type "int")
                nil [306023 306488])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fclear_this_command_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [306597 306622])
                    ("" variable (:type ("Sclear_this_command_keys" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [306630 306655])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [306672 306676]))                  
                :type "int")
                nil [306563 306857])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frecursion_depth" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [307112 307129])
                    ("" variable (:type ("Srecursion_depth" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [307130 307147])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [307164 307168]))                  
                :type "int")
                nil [307086 307230])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fopen_dribble_file" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [307368 307387])
                    ("" variable (:type ("Sopen_dribble_file" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [307388 307407])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [307452 307456]))                  
                :type "int")
                nil [307340 307752])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdiscard_input" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [308429 308444])
                    ("" variable (:type ("Sdiscard_input" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [308445 308460])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [308477 308481]))                  
                :type "int")
                nil [308405 308587])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsuspend_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [308935 308950])
                    ("" variable (:type ("Ssuspend_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [308951 308966])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [308984 308988]))                  
                :type "int")
                nil [308911 309581])
            ("stuff_buffered_input" function
               (:arguments 
                  ( ("stuffstring" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [310971 310995]))                  
                :type "void")
                nil [310944 311924])
            ("set_waiting_for_input" function
               (:arguments 
                  ( ("time_to_clear" variable
                       (:pointer 1
                        :type ("timespec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [311955 311986]))                  
                :type "void")
                nil [311927 312302])
            ("clear_waiting_for_input" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [312334 312339]))                  
                :type "void")
                nil [312304 312469])
            ("handle_interrupt_signal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [312708 312716]))                  
                :type "void")
                nil [312671 313560])
            ("deliver_interrupt_signal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [313600 313608]))                  
                :type "void")
                nil [313562 313669])
            ("write_stdout" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("msg" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [313819 313835]))                  
                :type "void")
                nil [313793 313898])
            ("read_stdin" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [313999 314004]))                  
                :type "int")
                nil [313976 314070])
            ("force_quit_count" variable
               (:typemodifiers ("static")
                :type "int")
                nil [314264 314301])
            ("handle_interrupt" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("in_signal_handler" variable (:type "bool") (reparse-symbol arg-sub-list) [314764 314787]))                  
                :type "void")
                nil [314734 318609])
            ("quit_throw_to_read_char" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("from_signal" variable (:type "bool") (reparse-symbol arg-sub-list) [318701 318718]))                  
                :type "void")
                nil [318664 319254])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_input_interrupt_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [319292 319318])
                    ("" variable (:type ("Sset_input_interrupt_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [319326 319352])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [319369 319373]))                  
                :type "int")
                nil [319257 319577])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_output_flow_control" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [320526 320551])
                    ("" variable (:type ("Sset_output_flow_control" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [320552 320577])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [320594 320598]))                  
                :type "int")
                nil [320492 320964])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_input_meta_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [321438 321459])
                    ("" variable (:type ("Sset_input_meta_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [321460 321481])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [321498 321502]))                  
                :type "int")
                nil [321408 322133])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_quit_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [322706 322721])
                    ("" variable (:type ("Sset_quit_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [322722 322737])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [322754 322758]))                  
                :type "int")
                nil [322682 322968])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_input_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [323568 323584])
                    ("" variable (:type ("Sset_input_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [323585 323601])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [323618 323622]))                  
                :type "int")
                nil [323543 324245])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_input_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [324461 324481])
                    ("" variable (:type ("Scurrent_input_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [324482 324502])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [324519 324523]))                  
                :type "int")
                nil [324432 325292])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fposn_at_x_y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [325832 325845])
                    ("" variable (:type ("Sposn_at_x_y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [325846 325859])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [325876 325880]))                  
                :type "int")
                nil [325810 326466])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fposn_at_point" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [327201 327216])
                    ("" variable (:type ("Sposn_at_point" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [327217 327232])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [327249 327253]))                  
                :type "int")
                nil [327177 327789])
            ("init_kboard" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [328606 328617])
                    ("type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [328618 328635]))                  
                :type "void")
                nil [328581 329568])
            ("allocate_kboard" function
               (:pointer 1
                :arguments 
                  ( ("type" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [329689 329706]))                  
                :type ("KBOARD" type (:type "class") nil nil))
                nil [329663 329840])
            ("wipe_kboard" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [330038 330049]))                  
                :type "void")
                nil [330013 330085])
            ("delete_kboard" function
               (:arguments 
                  ( ("kb" variable
                       (:pointer 1
                        :type ("KBOARD" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [330154 330165]))                  
                :type "void")
                nil [330134 330666])
            ("init_keyboard" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [330688 330693]))                  
                :type "void")
                nil [330668 332970])
            ("event_head" type
               (:members 
                  ( ("var" variable (:type "short") (reparse-symbol classsubparts) [333096 333106])
                    ("kind" variable (:type "short") (reparse-symbol classsubparts) [333109 333120]))                  
                :type "struct")
                nil [333074 333123])
            ("head_table" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  {SYMBOL_INDEX (Qmouse_movement),      SYMBOL_INDEX (Qmouse_movement)},
  {SYMBOL_INDEX (Qscroll_bar_movement), SYMBOL_INDEX (Qmouse_movement)},

  /* Some of the event heads.  */
  {SYMBOL_INDEX (Qswitch_frame),        SYMBOL_INDEX (Qswitch_frame)},

  {SYMBOL_INDEX (Qfocus_in),            SYMBOL_INDEX (Qfocus_in)},
  {SYMBOL_INDEX (Qfocus_out),           SYMBOL_INDEX (Qfocus_out)},
  {SYMBOL_INDEX (Qmove_frame),          SYMBOL_INDEX (Qmove_frame)},
  {SYMBOL_INDEX (Qdelete_frame),        SYMBOL_INDEX (Qdelete_frame)},
  {SYMBOL_INDEX (Qiconify_frame),       SYMBOL_INDEX (Qiconify_frame)},
  {SYMBOL_INDEX (Qmake_frame_visible),  SYMBOL_INDEX (Qmake_frame_visible)},
  /* `select-window' should be handled just like `switch-frame'
     in read_key_sequence.  */
  {SYMBOL_INDEX (Qselect_window),       SYMBOL_INDEX (Qswitch_frame)}
}"
                :type ("event_head" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [333125 334017])
            ("syms_of_keyboard" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [334042 334047]))                  
                :type "void")
                nil [334019 369776])
            ("keys_of_keyboard" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [369801 369806]))                  
                :type "void")
                nil [369778 373217])
            ("mark_kboards" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [373317 373322]))                  
                :type "void")
                nil [373298 374946]))          
      :file "keyboard.c"
      :pointmax 374947
      :fsize 374946
      :lastmodtime '(23302 6458 208595 650000)
      :unmatched-syntax '((semantic-list 327790 . 328452) (punctuation 327252 . 327253) (number 327239 . 327240) (number 327236 . 327237) (number 327233 . 327234) (string 327184 . 327199) (semantic-list 326467 . 327175) (punctuation 325879 . 325880) (number 325866 . 325867) (number 325863 . 325864) (number 325860 . 325861) (string 325817 . 325830) (semantic-list 325293 . 325808) (punctuation 324522 . 324523) (number 324509 . 324510) (number 324506 . 324507) (number 324503 . 324504) (string 324439 . 324459) (semantic-list 324246 . 324430) (punctuation 323621 . 323622) (number 323608 . 323609) (number 323605 . 323606) (number 323602 . 323603) (string 323550 . 323566) (semantic-list 322969 . 323541) (punctuation 322757 . 322758) (number 322744 . 322745) (number 322741 . 322742) (number 322738 . 322739) (string 322689 . 322704) (semantic-list 322134 . 322680) (punctuation 321501 . 321502) (number 321488 . 321489) (number 321485 . 321486) (number 321482 . 321483) (string 321415 . 321436) (semantic-list 320965 . 321406) (punctuation 320597 . 320598) (number 320584 . 320585) (number 320581 . 320582) (number 320578 . 320579) (string 320499 . 320524) (semantic-list 319578 . 320490) (punctuation 319372 . 319373) (number 319359 . 319360) (number 319356 . 319357) (number 319353 . 319354) (string 319264 . 319290) (semantic-list 309582 . 310790) (punctuation 308987 . 308988) (string 308973 . 308975) (number 308970 . 308971) (number 308967 . 308968) (string 308918 . 308933) (semantic-list 308588 . 308908) (punctuation 308480 . 308481) (number 308467 . 308468) (number 308464 . 308465) (number 308461 . 308462) (string 308412 . 308427) (semantic-list 307753 . 308403) (punctuation 307455 . 307456) (string 307421 . 307443) (number 307411 . 307412) (number 307408 . 307409) (string 307347 . 307366) (semantic-list 307231 . 307338) (punctuation 307167 . 307168) (number 307154 . 307155) (number 307151 . 307152) (number 307148 . 307149) (string 307093 . 307110) (semantic-list 306858 . 307084) (punctuation 306675 . 306676) (number 306662 . 306663) (number 306659 . 306660) (number 306656 . 306657) (string 306570 . 306595) (semantic-list 306489 . 306561) (punctuation 306150 . 306151) (number 306137 . 306138) (number 306134 . 306135) (number 306131 . 306132) (string 306030 . 306060) (semantic-list 305857 . 306021) (punctuation 305563 . 305564) (number 305550 . 305551) (number 305547 . 305548) (number 305544 . 305545) (string 305455 . 305481) (semantic-list 305357 . 305446) (punctuation 305134 . 305135) (number 305121 . 305122) (number 305118 . 305119) (number 305115 . 305116) (string 305033 . 305059) (semantic-list 304240 . 305024) (punctuation 304100 . 304101) (number 304087 . 304088) (number 304084 . 304085) (number 304081 . 304082) (string 303998 . 304022) (semantic-list 303889 . 303989) (punctuation 303637 . 303638) (number 303624 . 303625) (number 303621 . 303622) (number 303618 . 303619) (string 303557 . 303576) (semantic-list 302927 . 303548) (punctuation 302698 . 302699) (number 302685 . 302686) (number 302682 . 302683) (number 302679 . 302680) (string 302636 . 302649) (semantic-list 302214 . 302627) (punctuation 301927 . 301928) (number 301914 . 301915) (number 301911 . 301912) (number 301908 . 301909) (string 301853 . 301870) (semantic-list 300330 . 300460) (punctuation 300126 . 300127) (number 300113 . 300114) (number 300110 . 300111) (number 300107 . 300108) (string 300018 . 300044) (semantic-list 299880 . 300009) (punctuation 297410 . 297411) (number 297397 . 297398) (number 297394 . 297395) (number 297391 . 297392) (string 297330 . 297349) (semantic-list 199319 . 200579) (punctuation 198893 . 198894) (number 198880 . 198881) (number 198877 . 198878) (number 198874 . 198875) (string 198810 . 198830) (semantic-list 191373 . 191649) (punctuation 191297 . 191298) (number 191284 . 191285) (number 191281 . 191282) (number 191278 . 191279) (string 191168 . 191207) (semantic-list 131514 . 131682) (punctuation 131234 . 131235) (number 131221 . 131222) (number 131218 . 131219) (number 131215 . 131216) (string 131154 . 131173) (INT 103490 . 103493) (semantic-list 36838 . 37044) (punctuation 36755 . 36756) (number 36742 . 36743) (number 36739 . 36740) (number 36736 . 36737) (string 36683 . 36706) (semantic-list 35897 . 36027) (punctuation 35876 . 35877) (punctuation 35776 . 35777) (string 35762 . 35764) (number 35759 . 35760) (number 35756 . 35757) (string 35686 . 35708) (semantic-list 35484 . 35616) (punctuation 35463 . 35464) (punctuation 35383 . 35384) (string 35369 . 35371) (number 35366 . 35367) (number 35363 . 35364) (string 35296 . 35317) (semantic-list 34833 . 35124) (punctuation 34812 . 34813) (punctuation 34711 . 34712) (string 34697 . 34699) (number 34694 . 34695) (number 34691 . 34692) (string 34654 . 34665) (semantic-list 31080 . 32385) (punctuation 30913 . 30914) (number 30900 . 30901) (number 30897 . 30898) (number 30894 . 30895) (string 30787 . 30819) (semantic-list 23386 . 24462) (punctuation 22937 . 22938) (string 22923 . 22925) (number 22920 . 22921) (number 22917 . 22918) (string 22865 . 22881) (punctuation 10382 . 10383) (symbol 10361 . 10381) (UNION 10355 . 10360) (STATIC 10348 . 10354))
      :lexical-table 
        '(("READABLE_EVENTS_DO_TIMERS_NOW" . ((semantic-list "(1 << 0)" 11839 . 11847)))
          ("READABLE_EVENTS_IGNORE_SQUEEZABLES" . ((semantic-list "(1 << 2)" 11939 . 11947)))
          ("FUNCTION_KEY_OFFSET" . ((number "0xff00" 145264 . 145270)))
          ("NUM_MOD_NAMES" . ((symbol "ARRAYELTS" 189065 . 189074) (semantic-list "(modifier_names)" 189075 . 189091)))
          ("RESUME_POLLING" . 
              ((DO "do" 64453 . 64455) (semantic-list "{ if (polling_stopped_here) start_polling ();	\\
       polling_stopped_here = false; }" 64456 . 64542) (WHILE "while" 64543 . 64548) (semantic-list "(0)" 64549 . 64552)))
          ("PROP" (spp-arg-list ("IDX") 240168 . 240173) . ((symbol "AREF" 240174 . 240178) (semantic-list "(tool_bar_item_properties, (IDX))" 240179 . 240212)))
          ("NUM_RECENT_KEYS" . ((semantic-list "(300)" 2453 . 2458)))
          ("GROW_RAW_KEYBUF" . 
              ((IF "if" 3293 . 3295) (semantic-list "(raw_keybuf_count == ASIZE (raw_keybuf))" 3296 . 3336) (symbol "raw_keybuf" 3345 . 3355) (punctuation "=" 3356 . 3357) (symbol "larger_vector" 3358 . 3371) (semantic-list "(raw_keybuf, 1, -1)" 3372 . 3391)))
          ("STOP_POLLING" . 
              ((DO "do" 64323 . 64325) (semantic-list "{ if (! polling_stopped_here) stop_polling ();	\\
       polling_stopped_here = true; }" 64326 . 64412) (WHILE "while" 64413 . 64418) (semantic-list "(0)" 64419 . 64422)))
          ("KBD_BUFFER_SIZE" . ((number "4096" 2247 . 2251)))
          ("READABLE_EVENTS_FILTER_EVENTS" . ((semantic-list "(1 << 1)" 11887 . 11895)))
          ("KEY_TO_CHAR" (spp-arg-list ("k") 189915 . 189918) . ((semantic-list "(XINT (k) & ((1 << CHARACTERBITS) - 1))" 189919 . 189958)))
          ("ISO_FUNCTION_KEY_OFFSET" . ((number "0xfe00" 147946 . 147952)))
          ("INPUT_EVENT_POS_MAX" . ((semantic-list "((ptrdiff_t) min (PTRDIFF_MAX, min (TYPE_MAXIMUM (Time) / 2, \\
				      MOST_POSITIVE_FIXNUM)))" 109366 . 109462)))
          ("INPUT_EVENT_POS_MIN" . ((semantic-list "(-1 - INPUT_EVENT_POS_MAX)" 109491 . 109517)))
          )
)
    (semanticdb-table "semanticdb-table-1fd3c6c"
      :file "termchar.h"
      :fsize 9142
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-1fd3c8c"
      :file "termopts.h"
      :fsize 1065
      :lastmodtime '(23302 6458 224595 790000))
    (semanticdb-table "semanticdb-table-1fd3cac"
      :file "macros.h"
      :fsize 1665
      :lastmodtime '(23302 6458 212595 686000))
    (semanticdb-table "semanticdb-table-1fd3ccc"
      :file "commands.h"
      :fsize 1778
      :lastmodtime '(23302 6458 192595 510000))
    (semanticdb-table "semanticdb-table-1fd3ffc"
      :file "menu.h"
      :fsize 2352
      :lastmodtime '(23302 6458 216595 720000))
    (semanticdb-table "semanticdb-table-1ed2030"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [1409 1428])
            ("lisp.h" include nil nil [1430 1447])
            ("my_endbss_static" variable
               (:pointer 1
                :default-value "_my_endbss"
                :type "char")
                nil [1827 1864]))          
      :file "lastfile.c"
      :pointmax 1873
      :fsize 1872
      :lastmodtime '(23302 6458 212595 686000)
      :unmatched-syntax '((punctuation 1825 . 1826) (close-paren 1824 . 1825) (number 1823 . 1824) (open-paren 1822 . 1823) (symbol 1812 . 1822) (CHAR 1807 . 1811) (STATIC 1800 . 1806) (punctuation 1797 . 1798) (close-paren 1796 . 1797) (number 1795 . 1796) (open-paren 1794 . 1795) (symbol 1785 . 1794) (CHAR 1780 . 1784) (punctuation 1622 . 1623) (string 1591 . 1622) (punctuation 1589 . 1590) (close-paren 1587 . 1588) (open-paren 1586 . 1587) (symbol 1578 . 1586) (CHAR 1573 . 1577) (close-paren 1571 . 1572) (symbol 1562 . 1571) (symbol 1554 . 1561) (punctuation 1552 . 1553) (punctuation 1551 . 1552) (symbol 1544 . 1550) (symbol 1536 . 1543) (punctuation 1534 . 1535) (punctuation 1533 . 1534) (symbol 1523 . 1532) (symbol 1515 . 1522) (punctuation 1513 . 1514) (punctuation 1512 . 1513)))
    (semanticdb-table "semanticdb-table-18dedb4"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [729 748]))          
      :file "lcms.c"
      :pointmax 17732
      :fsize 17731
      :lastmodtime '(23302 6458 212595 686000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1884b74"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("shortlisp" variable (:default-value ("emacs-lisp/byte-run.elc" "emacs-lisp/backquote.elc" "subr.elc" "version.elc" "widget.elc" "custom.elc" "emacs-lisp/map-ynp.elc" "international/mule.elc" "international/mule-conf.elc" "env.elc" "format.elc" "bindings.elc" "window.elc" "files.elc" "emacs-lisp/macroexp.elc" "emacs-lisp/macroexp.elc" "cus-face.elc" "faces.elc" "button.elc" "emacs-lisp/nadvice.elc" "emacs-lisp/cl-preloaded.elc" "minibuffer.elc" "obarray.elc" "abbrev.elc" "simple.elc" "help.elc" "jka-cmpr-hook.elc" "epa-hook.elc" "international/mule-cmds.elc" "case-table.elc" "international/charprop.el" "international/characters.elc" "composite.elc" "language/chinese.elc" "language/cyrillic.elc" "language/indian.elc" "language/sinhala.elc" "language/english.elc" "language/ethiopic.elc" "language/european.elc" "language/czech.elc" "language/slovak.elc" "language/romanian.elc" "language/greek.elc" "language/hebrew.elc" "international/cp51932.elc" "international/eucjp-ms.elc" "language/japanese.elc" "language/korean.elc" "language/lao.elc" "language/tai-viet.elc" "language/thai.elc" "language/tibetan.elc" "language/vietnamese.elc" "language/misc-lang.elc" "language/utf-8-lang.elc" "language/georgian.elc" "language/khmer.elc" "language/burmese.elc" "language/cham.elc" "indent.elc" "emacs-lisp/cl-generic.elc" "frame.elc" "startup.elc" "term/tty-colors.elc" "font-core.elc" "facemenu.elc" "emacs-lisp/syntax.elc" "font-lock.elc" "jit-lock.elc" "mouse.elc" "scroll-bar.elc" "select.elc" "emacs-lisp/timer.elc" "isearch.elc" "rfn-eshadow.elc" "menu-bar.elc" "emacs-lisp/lisp.elc" "textmodes/page.elc" "register.elc" "textmodes/paragraphs.elc" "progmodes/prog-mode.elc" "emacs-lisp/lisp-mode.elc" "progmodes/elisp-mode.elc" "textmodes/text-mode.elc" "textmodes/fill.elc" "newcomment.elc" "replace.elc" "emacs-lisp/tabulated-list.elc" "buff-menu.elc" "fringe.elc" "emacs-lisp/regexp-opt.elc" "image.elc" "international/fontset.elc" "dnd.elc" "tool-bar.elc" "dynamic-setting.elc" "x-dnd.elc" "term/common-win.elc" "term/x-win.elc" "term/common-win.elc" "w32-vars.elc" "term/w32-win.elc" "disp-table.elc" "w32-fns.elc" "ls-lisp.elc" "dos-w32.elc" "dos-w32.elc" "dos-fns.elc" "dos-vars.elc" "term/internal.elc" "term/pc-win.elc" "ls-lisp.elc" "disp-table.elc" "term/common-win.elc" "international/mule-util.elc" "international/ucs-normalize.elc" "term/ns-win.elc" "mwheel.elc" "emacs-lisp/float-sup.elc" "vc/vc-hooks.elc" "vc/ediff-hook.elc" "uniquify.elc" "electric.elc" "emacs-lisp/eldoc.elc" "cus-start.elc" "tooltip.elc" "leim/leim-list.el" "site-load.elc" "site-init.elc")) nil [1 2563]))          
      :file "lisp.mk"
      :pointmax 2563
      :fsize 2562
      :lastmodtime '(23302 7054 37235 10000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1e33150"
      :major-mode c-mode
      :tags 
        '( ("DEFINE_SYMBOLS" variable (:constant-flag t) nil [828 842])
            ("config.h" include (:system-flag t) nil [844 863])
            ("sysstdio.h" include nil nil [864 885])
            ("stdlib.h" include (:system-flag t) nil [886 905])
            ("sys/types.h" include (:system-flag t) nil [906 928])
            ("sys/stat.h" include (:system-flag t) nil [929 950])
            ("sys/file.h" include (:system-flag t) nil [951 972])
            ("errno.h" include (:system-flag t) nil [973 991])
            ("math.h" include (:system-flag t) nil [992 1009])
            ("stat-time.h" include (:system-flag t) nil [1010 1032])
            ("lisp.h" include nil nil [1033 1050])
            ("dispextern.h" include nil nil [1051 1074])
            ("intervals.h" include nil nil [1075 1097])
            ("character.h" include nil nil [1098 1120])
            ("buffer.h" include nil nil [1121 1140])
            ("charset.h" include nil nil [1141 1161])
            ("epaths.h" include (:system-flag t) nil [1162 1181])
            ("commands.h" include nil nil [1182 1203])
            ("keyboard.h" include nil nil [1204 1225])
            ("systime.h" include nil nil [1226 1246])
            ("termhooks.h" include nil nil [1247 1269])
            ("blockinput.h" include nil nil [1270 1293])
            ("c-ctype.h" include (:system-flag t) nil [1294 1314])
            ("unistd.h" include (:system-flag t) nil [1520 1539])
            ("fcntl.h" include (:system-flag t) nil [1612 1630])
            ("file_offset" variable (:constant-flag t) nil [1716 1727])
            ("file_tell" variable (:constant-flag t) nil [1741 1750])
            ("read_objects_map" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2354 2390])
            ("read_objects_completed" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3111 3153])
            ("infile" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("infile" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [3261 3575])
            ("infile" type
               (:members 
                  ( ("stream" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [3313 3326])
                    ("lookahead" variable (:type "signed char") (reparse-symbol classsubparts) [3361 3383])
                    ("buf" variable
                       (:dereference 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [3520 3564]))                  
                :type "struct")
                nil [3261 3575])
            ("read_from_string_index" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [3649 3689])
            ("read_from_string_index_byte" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [3690 3735])
            ("read_from_string_limit" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [3736 3776])
            ("readchar_count" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [3865 3897])
            ("saved_doc_string" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [3953 3983])
            ("saved_doc_string_size" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4039 4078])
            ("saved_doc_string_length" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4129 4170])
            ("saved_doc_string_position" variable
               (:typemodifiers ("static")
                :type "long")
                nil [4227 4272])
            ("prev_saved_doc_string" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [4417 4452])
            ("prev_saved_doc_string_size" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4513 4557])
            ("prev_saved_doc_string_length" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4613 4659])
            ("prev_saved_doc_string_position" variable
               (:typemodifiers ("static")
                :type "long")
                nil [4716 4766])
            ("new_backquote_flag" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [5012 5043])
            ("Vloads_in_progress" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [5146 5184])
            ("read_emacs_mule_char" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [5219 5223])
                    ("" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [5233 5237])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5238 5250]))                          
                        :type "int")
                        nil nil)
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5285 5297]))                  
                :type "int")
                nil [5186 5298])
            ("readevalloop" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5326 5338])
                    ("" variable
                       (:pointer 1
                        :type ("infile" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5339 5355])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5356 5368])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [5369 5374])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5401 5413])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5414 5426])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5453 5465])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5466 5478]))                  
                :type "void")
                nil [5300 5479])
            ("build_load_history" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5513 5525])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [5526 5531]))                  
                :type "void")
                nil [5481 5532])
            ("readbyte_for_lambda" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [5859 5863])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5864 5876]))                  
                :type "int")
                nil [5827 5877])
            ("readbyte_from_file" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [5909 5913])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5914 5926]))                  
                :type "int")
                nil [5878 5927])
            ("readbyte_from_string" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [5961 5965])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5966 5978]))                  
                :type "int")
                nil [5928 5979])
            ("READCHAR" variable (:constant-flag t) nil [6186 6194])
            ("UNREAD" variable (:constant-flag t) nil [6232 6238])
            ("READCHAR_REPORT_MULTIBYTE" variable (:constant-flag t) nil [6358 6383])
            ("unread_char" variable
               (:typemodifiers ("static")
                :type "int")
                nil [6684 6707])
            ("readchar" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6730 6754])
                    ("multibyte" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [6755 6771]))                  
                :type "int")
                nil [6709 10626])
            ("FROM_FILE_P" variable (:constant-flag t) nil [10636 10647])
            ("skip_dyn_bytes" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10785 10809])
                    ("n" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10810 10822]))                  
                :type "void")
                nil [10757 11523])
            ("skip_dyn_eof" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11551 11575]))                  
                :type "void")
                nil [11525 11816])
            ("unreadchar" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11996 12020])
                    ("c" variable (:type "int") (reparse-symbol arg-sub-list) [12021 12027]))                  
                :type "void")
                nil [11972 13368])
            ("readbyte_for_lambda" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [13402 13408])
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13409 13433]))                  
                :type "int")
                nil [13370 13475])
            ("readbyte_from_stdio" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [13510 13515]))                  
                :type "int")
                nil [13478 13997])
            ("readbyte_from_file" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [14030 14036])
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14037 14061]))                  
                :type "int")
                nil [13999 14241])
            ("readbyte_from_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [14276 14282])
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14283 14307]))                  
                :type "int")
                nil [14243 14708])
            ("read_emacs_mule_char" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [14883 14889])
                    ("readbyte" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [14907 14911])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14912 14924]))                          
                        :type "int")
                        nil nil)
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14926 14950]))                  
                :type "int")
                nil [14850 16224])
            ("subst" type
               (:members 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16306 16325])
                    ("placeholder" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16328 16352])
                    ("completed" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16473 16495])
                    ("seen" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16569 16586]))                  
                :type "struct")
                nil [16289 16589])
            ("read_internal_start" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16631 16643])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16644 16656])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16697 16709]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16591 16710])
            ("read0" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16737 16749]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16711 16750])
            ("read1" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16777 16789])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [16790 16796])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [16797 16802]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16751 16803])
            ("read_list" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [16835 16840])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16841 16853]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16805 16854])
            ("read_vector" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16887 16899])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [16900 16905]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16855 16906])
            ("substitute_object_recurse" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("subst" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16954 16969])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16970 16982]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [16908 16983])
            ("substitute_in_interval" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17020 17029])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [17030 17037]))                  
                :type "void")
                nil [16984 17038])
            ("read_filtered_event" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("no_switch_frame" variable (:type "bool") (reparse-symbol arg-sub-list) [17914 17935])
                    ("ascii_required" variable (:type "bool") (reparse-symbol arg-sub-list) [17936 17956])
                    ("error_nonascii" variable (:type "bool") (reparse-symbol arg-sub-list) [17964 17984])
                    ("input_method" variable (:type "bool") (reparse-symbol arg-sub-list) [17985 18003])
                    ("seconds" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18004 18024]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [17874 20207])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20229 20240])
                    ("" variable (:type ("Sread_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20241 20252])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20269 20273]))                  
                :type "int")
                nil [20209 21347])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_event" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21629 21641])
                    ("" variable (:type ("Sread_event" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21642 21654])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21671 21675]))                  
                :type "int")
                nil [21608 22255])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_char_exclusive" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22437 22458])
                    ("" variable (:type ("Sread_char_exclusive" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22459 22480])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22497 22501]))                  
                :type "int")
                nil [22407 23279])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_file_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23565 23580])
                    ("" variable (:type ("Sget_file_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23581 23596])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23613 23617]))                  
                :type "int")
                nil [23541 23659])
            ("lisp_file_lexically_bound_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24056 24080]))                  
                :type "bool")
                nil [24015 26800])
            ("safe_to_load_version" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fd" variable (:type "int") (reparse-symbol arg-sub-list) [27163 27170]))                  
                :type "int")
                nil [27130 27821])
            ("record_load_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("old" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27970 27986]))                  
                :type "void")
                nil [27938 28018])
            ("load_error_handler" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28128 28145]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [28089 28164])
            ("load_error_old_style_backquotes" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [28221 28226]))                  
                :type "void")
                nil [28166 28502])
            ("load_warn_unescaped_character_literals" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("file" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28556 28573]))                  
                :type "void")
                nil [28504 29155])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_load_suffixes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29185 29204])
                    ("" variable (:type ("Sget_load_suffixes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29205 29224])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29241 29245]))                  
                :type "int")
                nil [29157 29402])
            ("suffix_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29846 29865])
                    ("suffix" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [29866 29885]))                  
                :type "bool")
                nil [29824 30072])
            ("close_infile_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [30107 30117]))                  
                :type "void")
                nil [30074 30235])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fload" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30252 30258])
                    ("" variable (:type ("Sload" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30259 30265])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30282 30286]))                  
                :type "int")
                nil [30237 32587])
            ("complete_filename_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pathname" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44469 44490]))                  
                :type "bool")
                nil [44436 44663])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flocate_file_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44696 44718])
                    ("" variable (:type ("Slocate_file_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44719 44741])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44758 44762]))                  
                :type "int")
                nil [44665 45372])
            ("openp" function
               (:arguments 
                  ( ("path" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46685 46702])
                    ("str" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46703 46719])
                    ("suffixes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46720 46741])
                    ("storeptr" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [46749 46771])
                    ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46772 46794])
                    ("newer" variable (:type "bool") (reparse-symbol arg-sub-list) [46795 46806]))                  
                :type "int")
                nil [46674 52668])
            ("build_load_history" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("filename" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53041 53062])
                    ("entire" variable (:type "bool") (reparse-symbol arg-sub-list) [53063 53075]))                  
                :type "void")
                nil [53009 54316])
            ("readevalloop_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("old" variable (:type "int") (reparse-symbol arg-sub-list) [54346 54354]))                  
                :type "void")
                nil [54318 54391])
            ("end_of_file_error" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [54516 54521]))                  
                :type "void")
                nil [54475 54632])
            ("readevalloop_eager_expand_eval" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54685 54701])
                    ("macroexpand" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54702 54726]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [54634 55471])
            ("readevalloop" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55767 55791])
                    ("infile0" variable
                       (:pointer 1
                        :type ("infile" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [55799 55822])
                    ("sourcename" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55830 55853])
                    ("printflag" variable (:type "bool") (reparse-symbol arg-sub-list) [55861 55876])
                    ("unibyte" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55884 55904])
                    ("readfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55905 55925])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55933 55951])
                    ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55952 55968]))                  
                :type "void")
                nil [55741 61615])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feval_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61639 61652])
                    ("" variable (:type ("Seval_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61653 61666])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61684 61688]))                  
                :type "int")
                nil [61617 62805])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feval_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63704 63717])
                    ("" variable (:type ("Seval_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63718 63731])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63750 63754]))                  
                :type "int")
                nil [63682 64434])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65006 65012])
                    ("" variable (:type ("Sread" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65013 65019])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65036 65040]))                  
                :type "int")
                nil [64991 65624])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fread_from_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65968 65986])
                    ("" variable (:type ("Sread_from_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65987 66005])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66022 66026]))                  
                :type "int")
                nil [65941 66489])
            ("read_internal_start" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("stream" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66881 66900])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66901 66919])
                    ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66920 66936]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [66841 68752])
            ("invalid_syntax" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [68879 68893]))                  
                :type "void")
                nil [68841 68950])
            ("read0" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69071 69095]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [69045 69295])
            ("grow_read_buffer" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [69812 69822])
                    ("offset" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69823 69840])
                    ("buf_addr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [69845 69861])
                    ("buf_size" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [69862 69882])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69883 69899]))                  
                :type "char")
                nil [69780 70162])
            ("character_name_to_code" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("name" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [70334 70351])
                    ("name_len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70352 70371]))                  
                :type "int")
                nil [70299 70959])
            ("" type
               (:members 
                  ( ("UNICODE_CHARACTER_NAME_LENGTH_BOUND" variable
                       (:constant-flag t
                        :default-value (71129 71132)
                        :type "int")
                        (reparse-symbol enumsubparts) [71091 71132]))                  
                :type "enum")
                nil [71084 71135])
            ("read_escape" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71294 71318])
                    ("stringp" variable (:type "bool") (reparse-symbol arg-sub-list) [71319 71332]))                  
                :type "int")
                nil [71270 77122])
            ("digit_to_number" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("character" variable (:type "int") (reparse-symbol arg-sub-list) [77333 77347])
                    ("base" variable (:type "int") (reparse-symbol arg-sub-list) [77348 77357]))                  
                :type "int")
                nil [77305 77673])
            ("read_integer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77988 78012])
                    ("radix" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78013 78029]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [77955 79225])
            ("read1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79516 79540])
                    ("pch" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [79541 79550])
                    ("first_in_list" variable (:type "bool") (reparse-symbol arg-sub-list) [79551 79570]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79490 103300])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flread__substitute_object_in_subtree" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103356 103393])
                    ("" variable (:type ("Slread__substitute_object_in_subtree" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103401 103438])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103455 103459]))                  
                :type "int")
                nil [103303 103704])
            ("substitute_object_recurse" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("subst" variable
                       (:pointer 1
                        :type ("subst" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [104073 104093])
                    ("subtree" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104094 104114]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [104027 106538])
            ("substitute_in_interval" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("interval" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106631 106649])
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [106650 106660]))                  
                :type "void")
                nil [106595 106755])
            ("string_to_number" function
               (:arguments 
                  ( ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [107319 107338])
                    ("base" variable (:type "int") (reparse-symbol arg-sub-list) [107339 107348])
                    ("flags" variable (:type "int") (reparse-symbol arg-sub-list) [107349 107359]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [107289 110797])
            ("read_vector" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110833 110857])
                    ("bytecodeflag" variable (:type "bool") (reparse-symbol arg-sub-list) [110858 110876]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [110801 113037])
            ("read_list" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flag" variable (:type "bool") (reparse-symbol arg-sub-list) [113140 113150])
                    ("readcharfun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113151 113175]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [113110 117042])
            ("initial_obarray" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [117045 117080])
            ("oblookup_last_bucket_number" variable
               (:typemodifiers ("static")
                :type ("size_t" type (:type "class") nil nil))
                nil [117159 117201])
            ("check_obarray" function
               (:arguments 
                  ( ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117309 117329]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [117282 117831])
            ("intern_sym" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117921 117937])
                    ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117938 117958])
                    ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117959 117977]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [117890 118487])
            ("intern_driver" function
               (:arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118588 118607])
                    ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118608 118628])
                    ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118629 118647]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [118561 118712])
            ("intern_1" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [118837 118853])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118854 118868]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [118815 119193])
            ("intern_c_string_1" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [119226 119242])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119243 119257]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [119195 119676])
            ("define_symbol" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119705 119721])
                    ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [119722 119738]))                  
                :type "void")
                nil [119678 120169])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fintern" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120189 120197])
                    ("" variable (:type ("Sintern" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120198 120206])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120223 120227]))                  
                :type "int")
                nil [120172 120489])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fintern_soft" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120838 120851])
                    ("" variable (:type ("Sintern_soft" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120852 120865])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120882 120886]))                  
                :type "int")
                nil [120816 121184])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Funintern" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121631 121641])
                    ("" variable (:type ("Sunintern" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121642 121652])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121669 121673]))                  
                :type "int")
                nil [121612 122069])
            ("oblookup" function
               (:arguments 
                  ( ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123928 123948])
                    ("ptr" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [123949 123974])
                    ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123975 123990])
                    ("size_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123991 124011]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [123906 124843])
            ("map_obarray" function
               (:arguments 
                  ( ("obarray" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124864 124884])
                    ("fn" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124897 124909])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124910 124922]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124924 124940]))                  
                :type "void")
                nil [124846 125278])
            ("mapatoms_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125304 125320])
                    ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125321 125342]))                  
                :type "void")
                nil [125280 125371])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmapatoms" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125392 125402])
                    ("" variable (:type ("Smapatoms" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125403 125413])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125430 125434]))                  
                :type "int")
                nil [125373 125574])
            ("OBARRAY_SIZE" variable (:constant-flag t) nil [125730 125742])
            ("init_obarray" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [125769 125774]))                  
                :type "void")
                nil [125750 126496])
            ("defsubr" function
               (:arguments 
                  ( ("sname" variable
                       (:pointer 1
                        :type ("Lisp_Subr" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [126513 126537]))                  
                :type "void")
                nil [126499 126705])
            ("defvar_int" function
               (:arguments 
                  ( ("i_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Intfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [127168 127194])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [127200 127223])
                    ("address" variable
                       (:pointer 1
                        :type ("EMACS_INT" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [127224 127243]))                  
                :type "void")
                nil [127151 127516])
            ("defvar_bool" function
               (:arguments 
                  ( ("b_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Boolfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [127643 127670])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [127677 127700])
                    ("address" variable
                       (:pointer 1
                        :type "bool")
                        (reparse-symbol arg-sub-list) [127701 127715]))                  
                :type "void")
                nil [127625 128046])
            ("defvar_lisp_nopro" function
               (:arguments 
                  ( ("o_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Objfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [128386 128412])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [128418 128441])
                    ("address" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [128442 128463]))                  
                :type "void")
                nil [128362 128736])
            ("defvar_lisp" function
               (:arguments 
                  ( ("o_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Objfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [128756 128782])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [128789 128812])
                    ("address" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [128813 128834]))                  
                :type "void")
                nil [128738 128911])
            ("defvar_kboard" function
               (:arguments 
                  ( ("ko_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Kboard_Objfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [129065 129099])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [129108 129131])
                    ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [129132 129143]))                  
                :type "void")
                nil [129045 129425])
            ("load_path_check" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("lpath" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129505 129523]))                  
                :type "void")
                nil [129476 130067])
            ("load_path_default" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [131730 131735]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131692 136437])
            ("init_lread" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [136456 136461]))                  
                :type "void")
                nil [136439 138926])
            ("dir_warning" function
               (:arguments 
                  ( ("use" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [139170 139186])
                    ("dirname" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [139187 139207]))                  
                :type "void")
                nil [139152 140115])
            ("syms_of_lread" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [140137 140142]))                  
                :type "void")
                nil [140117 155441]))          
      :file "lread.c"
      :pointmax 155442
      :fsize 155441
      :lastmodtime '(23302 6458 212595 686000)
      :unmatched-syntax '((semantic-list 125575 . 125720) (punctuation 125433 . 125434) (number 125420 . 125421) (number 125417 . 125418) (number 125414 . 125415) (string 125380 . 125390) (semantic-list 122070 . 123606) (punctuation 121672 . 121673) (number 121659 . 121660) (number 121656 . 121657) (number 121653 . 121654) (string 121619 . 121629) (semantic-list 121185 . 121609) (punctuation 120885 . 120886) (number 120872 . 120873) (number 120869 . 120870) (number 120866 . 120867) (string 120823 . 120836) (semantic-list 120490 . 120814) (punctuation 120226 . 120227) (number 120213 . 120214) (number 120210 . 120211) (number 120207 . 120208) (string 120179 . 120187) (semantic-list 103705 . 104025) (punctuation 103458 . 103459) (number 103445 . 103446) (number 103442 . 103443) (number 103439 . 103440) (string 103310 . 103347) (semantic-list 66490 . 66709) (punctuation 66025 . 66026) (number 66012 . 66013) (number 66009 . 66010) (number 66006 . 66007) (string 65948 . 65966) (semantic-list 65625 . 65939) (punctuation 65039 . 65040) (number 65026 . 65027) (number 65023 . 65024) (number 65020 . 65021) (string 64998 . 65004) (semantic-list 64435 . 64987) (punctuation 63753 . 63754) (string 63738 . 63741) (number 63735 . 63736) (number 63732 . 63733) (string 63689 . 63702) (semantic-list 62806 . 63680) (punctuation 61687 . 61688) (string 61673 . 61675) (number 61670 . 61671) (number 61667 . 61668) (string 61624 . 61637) (semantic-list 45373 . 45538) (punctuation 44761 . 44762) (number 44748 . 44749) (number 44745 . 44746) (number 44742 . 44743) (string 44672 . 44694) (semantic-list 32588 . 44433) (punctuation 30285 . 30286) (number 30272 . 30273) (number 30269 . 30270) (number 30266 . 30267) (string 30244 . 30250) (semantic-list 29403 . 29776) (punctuation 29244 . 29245) (number 29231 . 29232) (number 29228 . 29229) (number 29225 . 29226) (string 29164 . 29183) (semantic-list 23660 . 23762) (punctuation 23616 . 23617) (number 23603 . 23604) (number 23600 . 23601) (number 23597 . 23598) (string 23548 . 23563) (semantic-list 23280 . 23539) (punctuation 22500 . 22501) (number 22487 . 22488) (number 22484 . 22485) (number 22481 . 22482) (string 22414 . 22435) (semantic-list 22256 . 22405) (punctuation 21674 . 21675) (number 21661 . 21662) (number 21658 . 21659) (number 21655 . 21656) (string 21615 . 21627) (semantic-list 21348 . 21606) (punctuation 20272 . 20273) (number 20259 . 20260) (number 20256 . 20257) (number 20253 . 20254) (string 20216 . 20227))
      :lexical-table 
        '(("file_offset" . ((LONG "long" 1728 . 1732)))
          ("file_tell" . ((symbol "ftell" 1751 . 1756)))
          ("UNREAD" (spp-arg-list ("c") 6238 . 6241) . ((symbol "unreadchar" 6242 . 6252) (semantic-list "(readcharfun, c)" 6253 . 6269)))
          ("OBARRAY_SIZE" . ((number "15121" 125743 . 125748)))
          ("READCHAR" . ((symbol "readchar" 6195 . 6203) (semantic-list "(readcharfun, NULL)" 6204 . 6223)))
          ("FROM_FILE_P" (spp-arg-list ("readcharfun") 10647 . 10660) . ((semantic-list "(EQ (readcharfun, Qget_file_char)			\\
   || EQ (readcharfun, Qget_emacs_mule_file_char))" 10667 . 10755)))
          ("DEFINE_SYMBOLS")
          ("READCHAR_REPORT_MULTIBYTE" (spp-arg-list ("multibyte") 6383 . 6394) . ((symbol "readchar" 6395 . 6403) (semantic-list "(readcharfun, multibyte)" 6404 . 6428)))
          )
)
    (semanticdb-table "semanticdb-table-2057420"
      :file "epaths.h"
      :fsize 3681
      :lastmodtime '(23302 6993 704749 163000)))
  :file "!home!jbailey!Documents!EmacsSrc!emacs!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
