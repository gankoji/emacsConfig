;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Provides classes to represent module version numbers (one class for
each style of version numbering).  There are currently two such classes
implemented: StrictVersion and LooseVersion.

Every version number class implements the following interface:
  * the 'parse' method takes a string and parses it to some internal
    representation; if the string is an invalid version number,
    'parse' raises a ValueError exception
  * the class constructor takes an optional string argument which,
    if supplied, is passed to 'parse'
  * __str__ reconstructs the string that was passed to 'parse' (or
    an equivalent string -- ie. one that will generate an equivalent
    version number instance)
  * __repr__ generates Python code to recreate the version number instance
  * _cmp compares the current instance with either another instance
    of the same class or a string (which will be parsed to an instance
    of the same class, thus must follow the same rules)
\"\"\"" code nil nil [140 1110])
            ("re" include nil nil [1112 1121])
            ("Version" type
               (:documentation "Abstract base class for version numbering classes.  Just provides
    constructor (__init__) and reproducer (__repr__), because those
    seem to be the same for all version numbering classes; and route
    rich comparisons to _cmp.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1434 1478]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1405 1409])
                            ("vstring" variable nil (reparse-symbol function_parameters) [1411 1418]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1391 1478])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1497 1501]))                          )
                        (reparse-symbol indented_block_body) [1483 1570])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590])
                            ("other" variable nil (reparse-symbol function_parameters) [1592 1597]))                          )
                        (reparse-symbol indented_block_body) [1575 1704])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1720 1724])
                            ("other" variable nil (reparse-symbol function_parameters) [1726 1731]))                          )
                        (reparse-symbol indented_block_body) [1709 1837])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1853 1857])
                            ("other" variable nil (reparse-symbol function_parameters) [1859 1864]))                          )
                        (reparse-symbol indented_block_body) [1842 1971])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1987 1991])
                            ("other" variable nil (reparse-symbol function_parameters) [1993 1998]))                          )
                        (reparse-symbol indented_block_body) [1976 2104])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2120 2124])
                            ("other" variable nil (reparse-symbol function_parameters) [2126 2131]))                          )
                        (reparse-symbol indented_block_body) [2109 2238]))                  
                :type "class")
                nil [1123 2238])
            ("StrictVersion" type
               (:documentation "Version numbering for anal retentives and software idealists.
    Implements the standard interface for version number classes as
    described above.  A version number consists of two or three
    dot-separated numeric components, with an optional \"pre-release\" tag
    on the end.  The pre-release tag consists of the letter 'a' or 'b'
    followed by a number.  If the numeric components of two version
    numbers are equal, then one with a pre-release tag will always
    be deemed earlier (lesser) than one without.

    The following are valid version numbers (shown in the order that
    would be obtained by sorting according to the supplied cmp function):

        0.4       0.4.0  (these two are equivalent)
        0.4.1
        0.5a1
        0.5b3
        0.5
        0.9.6
        1.0
        1.0.4a3
        1.0.4b1
        1.0.4

    The following are examples of invalid version numbers:

        1
        2.7.2.2
        1.3.a4
        1.3pl1
        1.3c4

    The rationale for this version numbering system will be explained
    in the distutils documentation.
    "
                :superclasses ("Version")
                :members 
                  ( ("version_re" variable nil (reparse-symbol indented_block_body) [4290 4410])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4428 4432])
                            ("vstring" variable nil (reparse-symbol function_parameters) [4434 4441]))                          )
                        (reparse-symbol indented_block_body) [4417 4990])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5009 5013]))                          )
                        (reparse-symbol indented_block_body) [4996 5309])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5325 5329])
                            ("other" variable nil (reparse-symbol function_parameters) [5331 5336]))                          )
                        (reparse-symbol indented_block_body) [5315 6508]))                  
                :type "class")
                nil [3155 6508])
            ("LooseVersion" type
               (:documentation "Version numbering for anarchists and software realists.
    Implements the standard interface for version number classes as
    described above.  A version number consists of a series of numbers,
    separated by either periods or strings of letters.  When comparing
    version numbers, the numeric components will be compared
    numerically, and the alphabetic components lexically.  The following
    are all valid version numbers, in no particular order:

        1.5.1
        1.5.2b2
        161
        3.10a
        8.02
        3.4j
        1996.07.12
        3.2.pl0
        3.1.1.6
        2g6
        11g
        0.960923
        2.2beta29
        1.13++
        5.5.kw
        2.0b1pl0

    In fact, there is no such thing as an invalid version number under
    this scheme; the rules for comparison are simple and predictable,
    but may not always give the results you want (for some definition
    of \"want\").
    "
                :superclasses ("Version")
                :members 
                  ( ("component_re" variable nil (reparse-symbol indented_block_body) [11203 11264])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [11313 11357]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11284 11288])
                            ("vstring" variable nil (reparse-symbol function_parameters) [11290 11297]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11270 11357])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11374 11378])
                            ("vstring" variable nil (reparse-symbol function_parameters) [11380 11387]))                          )
                        (reparse-symbol indented_block_body) [11363 11895])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11914 11918]))                          )
                        (reparse-symbol indented_block_body) [11901 11949])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11969 11973]))                          )
                        (reparse-symbol indented_block_body) [11955 12025])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12041 12045])
                            ("other" variable nil (reparse-symbol function_parameters) [12047 12052]))                          )
                        (reparse-symbol indented_block_body) [12031 12319]))                  
                :type "class")
                nil [10224 12319]))          
      :file "version.py"
      :pointmax 12346
      :fsize 12345
      :lastmodtime '(22880 24727 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!ProgramData!Anaconda3!Lib!distutils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
