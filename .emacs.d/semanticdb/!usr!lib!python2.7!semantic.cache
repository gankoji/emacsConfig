;; Object semanticdb-project-database-file-195dfbc
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-195dfbc"
  :tables
  (list
    (semanticdb-table "semanticdb-table-195bffc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state of the random number generator.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or is an int or long, hash(a) is used instead.
        Hash values for some types are nondeterministic when the
        PYTHONHASHSEED environment variable is enabled.
        ")
                        (reparse-symbol indented_block_body) [3288 4135])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4153 4157]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [4140 4309])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4327 4331])
                            ("state" variable nil (reparse-symbol function_parameters) [4333 4338]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4314 5376])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5395 5399])
                            ("n" variable nil (reparse-symbol function_parameters) [5401 5402]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5381 5942])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6166 6170]))                          )
                        (reparse-symbol indented_block_body) [6149 6217])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6239 6243])
                            ("state" variable nil (reparse-symbol function_parameters) [6245 6250]))                          )
                        (reparse-symbol indented_block_body) [6222 6296])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6316 6320]))                          )
                        (reparse-symbol indented_block_body) [6301 6374])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6455 6459])
                            ("start" variable nil (reparse-symbol function_parameters) [6461 6466])
                            ("stop" variable nil (reparse-symbol function_parameters) [6468 6472])
                            ("step" variable nil (reparse-symbol function_parameters) [6479 6483])
                            ("_int" variable nil (reparse-symbol function_parameters) [6487 6491])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [6497 6506]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        ")
                        (reparse-symbol indented_block_body) [6441 9028])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9045 9049])
                            ("a" variable nil (reparse-symbol function_parameters) [9051 9052])
                            ("b" variable nil (reparse-symbol function_parameters) [9054 9055]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [9033 9186])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9206 9210])
                            ("n" variable nil (reparse-symbol function_parameters) [9212 9213])
                            ("_log" variable nil (reparse-symbol function_parameters) [9215 9219])
                            ("_int" variable nil (reparse-symbol function_parameters) [9226 9230])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [9236 9245])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9274 9281])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9295 9309]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [9191 10348])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10427 10431])
                            ("seq" variable nil (reparse-symbol function_parameters) [10433 10436]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10416 10591])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10608 10612])
                            ("x" variable nil (reparse-symbol function_parameters) [10614 10615])
                            ("random" variable nil (reparse-symbol function_parameters) [10617 10623]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.

        ")
                        (reparse-symbol indented_block_body) [10596 11132])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11148 11152])
                            ("population" variable nil (reparse-symbol function_parameters) [11154 11164])
                            ("k" variable nil (reparse-symbol function_parameters) [11166 11167]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [11137 13967])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14122 14126])
                            ("a" variable nil (reparse-symbol function_parameters) [14128 14129])
                            ("b" variable nil (reparse-symbol function_parameters) [14131 14132]))                          )
                        (reparse-symbol indented_block_body) [14110 14259])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14336 14340])
                            ("low" variable nil (reparse-symbol function_parameters) [14342 14345])
                            ("high" variable nil (reparse-symbol function_parameters) [14351 14355])
                            ("mode" variable nil (reparse-symbol function_parameters) [14361 14365]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14321 14924])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15013 15017])
                            ("mu" variable nil (reparse-symbol function_parameters) [15019 15021])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15023 15028]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14995 15688])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15781 15785])
                            ("mu" variable nil (reparse-symbol function_parameters) [15787 15789])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15791 15796]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15762 16116])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16208 16212])
                            ("lambd" variable nil (reparse-symbol function_parameters) [16214 16219]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [16192 16833])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16927 16931])
                            ("mu" variable nil (reparse-symbol function_parameters) [16933 16935])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16937 16942]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16907 18297])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18384 18388])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18390 18395])
                            ("beta" variable nil (reparse-symbol function_parameters) [18397 18401]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18367 20591])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20679 20683])
                            ("mu" variable nil (reparse-symbol function_parameters) [20685 20687])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20689 20694]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20669 22005])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22501 22505])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22507 22512])
                            ("beta" variable nil (reparse-symbol function_parameters) [22514 22518]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22485 22976])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23052 23056])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23058 23063]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [23034 23228])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23306 23310])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23312 23317])
                            ("beta" variable nil (reparse-symbol function_parameters) [23319 23323]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [23287 23575]))                  
                :type "class")
                nil [2273 23575])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23668 23679])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23726 23730])
                            ("a" variable nil (reparse-symbol function_parameters) [23732 23733]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23717 24741])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24757 24761]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24746 25813])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25831 25835]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25818 25967])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25985 25989])
                            ("state" variable nil (reparse-symbol function_parameters) [25991 25996]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25972 26378])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26397 26401])
                            ("n" variable nil (reparse-symbol function_parameters) [26403 26404]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26383 27146])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27164 27168])
                            ("x" variable nil (reparse-symbol function_parameters) [27170 27171])
                            ("y" variable nil (reparse-symbol function_parameters) [27175 27176])
                            ("z" variable nil (reparse-symbol function_parameters) [27180 27181]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [27151 27950])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27966 27970])
                            ("a" variable nil (reparse-symbol function_parameters) [27972 27973]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27955 28654]))                  
                :type "class")
                nil [23635 28654])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29002 29006]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28991 29141])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29162 29166])
                            ("k" variable nil (reparse-symbol function_parameters) [29168 29169]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [29146 29621])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29636 29640])
                            ("args" variable nil (reparse-symbol function_parameters) [29642 29647])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29649 29655]))                          )
                        (reparse-symbol indented_block_body) [29626 29749])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29753 29777])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29803 29807])
                            ("args" variable nil (reparse-symbol function_parameters) [29809 29814])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29816 29822]))                          )
                        (reparse-symbol indented_block_body) [29783 29981])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29985 30022]))                  
                :type "class")
                nil [28726 30023])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [30103 30104])
                ("func" variable nil (reparse-symbol function_parameters) [30106 30110])
                ("args" variable nil (reparse-symbol function_parameters) [30112 30116]))              ) nil [30083 30637])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30649 30650]))              ) nil [30639 31437])
            ("_inst" variable nil nil [31769 31785])
            ("seed" variable nil nil [31786 31803])
            ("random" variable nil nil [31804 31825])
            ("uniform" variable nil nil [31826 31849])
            ("triangular" variable nil nil [31850 31879])
            ("randint" variable nil nil [31880 31903])
            ("choice" variable nil nil [31904 31925])
            ("randrange" variable nil nil [31926 31953])
            ("sample" variable nil nil [31954 31975])
            ("shuffle" variable nil nil [31976 31999])
            ("normalvariate" variable nil nil [32000 32035])
            ("lognormvariate" variable nil nil [32036 32073])
            ("expovariate" variable nil nil [32074 32105])
            ("vonmisesvariate" variable nil nil [32106 32145])
            ("gammavariate" variable nil nil [32146 32179])
            ("gauss" variable nil nil [32180 32199])
            ("betavariate" variable nil nil [32200 32231])
            ("paretovariate" variable nil nil [32232 32267])
            ("weibullvariate" variable nil nil [32268 32305])
            ("getstate" variable nil nil [32306 32331])
            ("setstate" variable nil nil [32332 32357])
            ("jumpahead" variable nil nil [32358 32385])
            ("getrandbits" variable nil nil [32386 32417])
            ("if" code nil nil [32419 32458]))          
      :file "random.py"
      :pointmax 32458
      :fsize 32457
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((NAME 14659 . 14660) (IF 14667 . 14669) (ELSE 14683 . 14687)))
    (semanticdb-table "semanticdb-table-195c33c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
      :file "__future__.py"
      :pointmax 4381
      :fsize 4380
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c35c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 372])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [388 395])
                    ("category" variable nil (reparse-symbol function_parameters) [397 405])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [412 422]))                  )
                nil [375 714])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [733 740])
                    ("category" variable nil (reparse-symbol function_parameters) [742 750])
                    ("filename" variable nil (reparse-symbol function_parameters) [752 760])
                    ("lineno" variable nil (reparse-symbol function_parameters) [762 768])
                    ("file" variable nil (reparse-symbol function_parameters) [770 774])
                    ("line" variable nil (reparse-symbol function_parameters) [781 785]))                  )
                nil [715 1204])
            ("showwarning" variable nil nil [1291 1318])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1338 1345])
                    ("category" variable nil (reparse-symbol function_parameters) [1347 1355])
                    ("filename" variable nil (reparse-symbol function_parameters) [1357 1365])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1367 1373])
                    ("line" variable nil (reparse-symbol function_parameters) [1375 1379]))                  )
                nil [1320 2223])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2243 2249])
                    ("message" variable nil (reparse-symbol function_parameters) [2251 2258])
                    ("category" variable nil (reparse-symbol function_parameters) [2263 2271])
                    ("module" variable nil (reparse-symbol function_parameters) [2281 2287])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2292 2298])
                    ("append" variable nil (reparse-symbol function_parameters) [2321 2327]))                  )
                nil [2224 3571])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [3589 3595])
                    ("category" variable nil (reparse-symbol function_parameters) [3597 3605])
                    ("lineno" variable nil (reparse-symbol function_parameters) [3615 3621])
                    ("append" variable nil (reparse-symbol function_parameters) [3625 3631]))                  )
                nil [3572 4439])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [4440 4557])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [4648 4652]))                  
                :type "class")
                nil [4558 4653])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4732 4736]))              ) nil [4712 4901])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4948 4951]))              ) nil [4933 5759])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5801 5807]))              ) nil [5786 6086])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [6130 6138]))              ) nil [6113 6946])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6996 7003])
                    ("category" variable nil (reparse-symbol function_parameters) [7005 7013])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [7020 7030]))                  )
                nil [6987 8326])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [8345 8352])
                ("category" variable nil (reparse-symbol function_parameters) [8354 8362])
                ("filename" variable nil (reparse-symbol function_parameters) [8364 8372])
                ("lineno" variable nil (reparse-symbol function_parameters) [8374 8380])
                ("module" variable nil (reparse-symbol function_parameters) [8400 8406])
                ("registry" variable nil (reparse-symbol function_parameters) [8413 8421])
                ("module_globals" variable nil (reparse-symbol function_parameters) [8428 8442]))              ) nil [8327 10337])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [10434 10538])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10651 10673])
                            ("self" variable nil (reparse-symbol indented_block_body) [10682 10706])
                            ("self" variable nil (reparse-symbol indented_block_body) [10715 10739])
                            ("self" variable nil (reparse-symbol indented_block_body) [10748 10768])
                            ("self" variable nil (reparse-symbol indented_block_body) [10777 10793])
                            ("self" variable nil (reparse-symbol indented_block_body) [10802 10818])
                            ("None" code nil (reparse-symbol indented_block_body) [10884 10888]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10557 10561])
                            ("message" variable nil (reparse-symbol function_parameters) [10563 10570])
                            ("category" variable nil (reparse-symbol function_parameters) [10572 10580])
                            ("filename" variable nil (reparse-symbol function_parameters) [10582 10590])
                            ("lineno" variable nil (reparse-symbol function_parameters) [10592 10598])
                            ("file" variable nil (reparse-symbol function_parameters) [10600 10604])
                            ("line" variable nil (reparse-symbol function_parameters) [10631 10635]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10544 10889])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10906 10910]))                          )
                        (reparse-symbol indented_block_body) [10894 11137]))                  
                :type "class")
                nil [10339 11137])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11896 12136])
                            ("self" variable nil (reparse-symbol indented_block_body) [12145 12166])
                            ("module" code nil (reparse-symbol indented_block_body) [12237 12243])
                            ("self" variable nil (reparse-symbol indented_block_body) [12252 12273]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11854 11858])
                            ("record" variable nil (reparse-symbol function_parameters) [11860 11866])
                            ("module" variable nil (reparse-symbol function_parameters) [11874 11880]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11841 12274])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12292 12296]))                          )
                        (reparse-symbol indented_block_body) [12279 12574])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12593 12597]))                          )
                        (reparse-symbol indented_block_body) [12579 13128])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13146 13150])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [13152 13161]))                          )
                        (reparse-symbol indented_block_body) [13133 13371]))                  
                :type "class")
                nil [11139 13371])
            ("_warnings_defaults" variable nil nil [13823 13849])
            ("try" code nil nil [13850 14158])
            ("_processoptions" code nil nil [14184 14216])
            ("if" code nil nil [14217 14801])
            ("del" code nil nil [14801 14823]))          
      :file "warnings.py"
      :pointmax 14824
      :fsize 14823
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((NAME 12175 . 12179) (IF 12214 . 12216) (ELSE 12232 . 12236) (NAME 10827 . 10831) (IF 10867 . 10869) (ELSE 10879 . 10883) (NAME 1681 . 1685) (IF 1724 . 1726) (ELSE 1740 . 1744)))
    (semanticdb-table "semanticdb-table-195c37c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997])
            ("__all__" variable nil nil [2042 2094]))          
      :file "types.py"
      :pointmax 2095
      :fsize 2094
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c39c"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1157])
            ("errno" include nil nil [1163 1180])
            ("sys" include nil nil [1163 1180])
            ("_names" variable nil nil [1182 1215])
            ("__all__" variable nil nil [1265 1440])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1464 1470]))              ) nil [1442 1600])
            ("if" code nil nil [1601 3131])
            ("sys" variable nil nil [3132 3161])
            ("" code nil nil [3182 3250])
            ("del" code nil nil [3252 3262])
            ("SEEK_SET" variable nil nil [3384 3396])
            ("SEEK_CUR" variable nil nil [3397 3409])
            ("SEEK_END" variable nil nil [3410 3422])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3532 3536])
                    ("mode" variable nil (reparse-symbol function_parameters) [3538 3542]))                  )
                nil [3519 4271])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4287 4291]))                  )
                nil [4272 4978])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4991 4994])
                    ("new" variable nil (reparse-symbol function_parameters) [4996 4999]))                  )
                nil [4979 5846])
            ("__all__" code nil nil [5847 5900])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune the
    search, or to impose a specific order of visiting.  Modifying dirnames when
    topdown is false is ineffective, since the directories in dirnames have
    already been generated by the time dirnames itself is generated. No matter
    the value of topdown, the list of subdirectories is retrieved before the
    tuples for the directory and its subdirectories are generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories

    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5911 5914])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5916 5923])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5930 5937])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5944 5955]))                  )
                nil [5902 9834])
            ("__all__" code nil nil [9835 9857])
            ("try" code nil nil [9899 9951])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9962 9966])
                    ("args" variable nil (reparse-symbol function_parameters) [9968 9973]))                  )
                nil [9952 10121])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10133 10137])
                    ("args" variable nil (reparse-symbol function_parameters) [10139 10144]))                  )
                nil [10122 10348])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10360 10364])
                    ("args" variable nil (reparse-symbol function_parameters) [10366 10371]))                  )
                nil [10349 10557])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10570 10574])
                    ("args" variable nil (reparse-symbol function_parameters) [10576 10581]))                  )
                nil [10558 10827])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10839 10843])
                    ("args" variable nil (reparse-symbol function_parameters) [10845 10849]))                  )
                nil [10828 11080])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [11093 11097])
                    ("args" variable nil (reparse-symbol function_parameters) [11099 11103])
                    ("env" variable nil (reparse-symbol function_parameters) [11105 11108]))                  )
                nil [11081 11375])
            ("__all__" code nil nil [11376 11448])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11463 11467])
                ("args" variable nil (reparse-symbol function_parameters) [11469 11473])
                ("env" variable nil (reparse-symbol function_parameters) [11475 11478]))              ) nil [11450 12318])
            ("try" code nil nil [12380 16589])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16601 16604])
                    ("default" variable nil (reparse-symbol function_parameters) [16606 16613]))                  )
                nil [16590 16797])
            ("__all__" code nil nil [16797 16821])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16835 16839]))              ) nil [16823 16871])
            ("if" code nil nil [16915 19818])
            ("if" code nil nil [19819 20816])
            ("if" code nil nil [20818 21924])
            ("if" code nil nil [21958 25224])
            ("copy_reg" include nil nil [25225 25253])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25277 25280])
                ("dict" variable nil (reparse-symbol function_parameters) [25282 25286]))              ) nil [25255 25323])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25348 25350]))              ) nil [25324 25425])
            ("try" code nil nil [25426 25560])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25586 25589])
                ("dict" variable nil (reparse-symbol function_parameters) [25591 25595]))              ) nil [25561 25635])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25663 25665]))              ) nil [25636 25743])
            ("try" code nil nil [25744 25911]))          
      :file "os.py"
      :pointmax 25911
      :fsize 25910
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c3bc"
      :major-mode python-mode
      :tags 
        '( ("__doc__" variable nil nil [122 2181])
            ("__always_supported" variable nil nil [2293 2369])
            ("algorithms_guaranteed" variable nil nil [2371 2418])
            ("algorithms_available" variable nil nil [2419 2465])
            ("algorithms" variable nil nil [2467 2498])
            ("__all__" code nil nil [2500 2680])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2713 2717]))              ) nil [2683 3549])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3581 3585]))              ) nil [3551 3958])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3973 3977])
                    ("string" variable nil (reparse-symbol function_parameters) [3979 3985]))                  )
                nil [3960 4177])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4194 4198])
                    ("string" variable nil (reparse-symbol function_parameters) [4200 4206]))                  )
                nil [4179 4739])
            ("try" code nil nil [4741 5007])
            ("for" code nil nil [5008 5335])
            ("try" code nil nil [5337 7723])
            ("del" code nil nil [7743 7790])
            ("del" code nil nil [7791 7842]))          
      :file "hashlib.py"
      :pointmax 7843
      :fsize 7842
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c3dc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 942])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [959 967]))                  )
                nil [944 1635])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1653 1661])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1663 1677]))                  )
                nil [1637 4028]))          
      :file "linecache.py"
      :pointmax 4028
      :fsize 4027
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c3fc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4520])
            ("_extension_registry" variable nil nil [5002 5026])
            ("_inverted_registry" variable nil nil [5056 5079])
            ("_extension_cache" variable nil nil [5110 5131])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5306 5312])
                    ("name" variable nil (reparse-symbol function_parameters) [5314 5318])
                    ("code" variable nil (reparse-symbol function_parameters) [5320 5324]))                  )
                nil [5288 6035])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [6057 6063])
                    ("name" variable nil (reparse-symbol function_parameters) [6065 6069])
                    ("code" variable nil (reparse-symbol function_parameters) [6071 6075]))                  )
                nil [6036 6495])
            ("clear_extension_cache" function nil nil [6496 6554]))          
      :file "copy_reg.py"
      :pointmax 6975
      :fsize 6974
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c73c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 4017])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [4033 4038]))                  )
                nil [4018 4807]))          
      :file "functools.py"
      :pointmax 4807
      :fsize 4806
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c75c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("weakref" include nil nil [1763 1777])
            ("copy_reg" include nil nil [1778 1813])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1843 1847]))                  
                :type "class")
                nil [1815 1848])
            ("error" variable nil nil [1848 1861])
            ("try" code nil nil [1890 1982])
            ("__all__" variable nil nil [1983 2022])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2033 2034]))                  )
                nil [2024 2786])
            ("_copy_dispatch" variable nil nil [2788 2811])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [2833 2834]))              ) nil [2813 2850])
            ("for" code nil nil [2850 3084])
            ("for" code nil nil [3084 3228])
            ("_copy_with_constructor" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3256 3257]))              ) nil [3229 3282])
            ("for" code nil nil [3282 3344])
            ("_copy_with_copy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3372 3373]))              ) nil [3345 3396])
            ("if" code nil nil [3396 3468])
            ("_copy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3484 3485]))              ) nil [3469 3947])
            ("d" variable nil nil [3947 3981])
            ("del" code nil nil [3983 3988])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [4003 4004])
                    ("memo" variable nil (reparse-symbol function_parameters) [4006 4010])
                    ("_nil" variable nil (reparse-symbol function_parameters) [4017 4021]))                  )
                nil [3990 5472])
            ("_deepcopy_dispatch" variable nil nil [5473 5500])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5523 5524])
                ("memo" variable nil (reparse-symbol function_parameters) [5526 5530]))              ) nil [5502 5546])
            ("d" variable nil nil [5546 5578])
            ("d" variable nil nil [5579 5615])
            ("d" variable nil nil [5616 5641])
            ("d" variable nil nil [5642 5668])
            ("d" variable nil nil [5669 5696])
            ("d" variable nil nil [5697 5723])
            ("try" code nil nil [5724 5790])
            ("d" variable nil nil [5790 5815])
            ("try" code nil nil [5816 5882])
            ("try" code nil nil [5882 5960])
            ("d" variable nil nil [5960 5986])
            ("d" variable nil nil [5987 6015])
            ("d" variable nil nil [6016 6053])
            ("d" variable nil nil [6054 6101])
            ("d" variable nil nil [6102 6142])
            ("d" variable nil nil [6143 6176])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6197 6198])
                ("memo" variable nil (reparse-symbol function_parameters) [6200 6204]))              ) nil [6178 6303])
            ("d" variable nil nil [6303 6327])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6349 6350])
                ("memo" variable nil (reparse-symbol function_parameters) [6352 6356]))              ) nil [6329 6655])
            ("d" variable nil nil [6655 6681])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6702 6703])
                ("memo" variable nil (reparse-symbol function_parameters) [6705 6709]))              ) nil [6683 6848])
            ("d" variable nil nil [6848 6872])
            ("if" code nil nil [6873 6937])
            ("_deepcopy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6959 6960])
                ("memo" variable nil (reparse-symbol function_parameters) [6962 6966]))              ) nil [6938 7062])
            ("_deepcopy_dispatch" variable nil nil [7062 7117])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7135 7136])
                    ("memo" variable nil (reparse-symbol function_parameters) [7138 7142]))                  )
                nil [7119 7620])
            ("_deepcopy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7640 7641])
                ("memo" variable nil (reparse-symbol function_parameters) [7643 7647]))              ) nil [7621 8211])
            ("d" variable nil nil [8211 8249])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [8268 8269])
                ("info" variable nil (reparse-symbol function_parameters) [8271 8275])
                ("deep" variable nil (reparse-symbol function_parameters) [8277 8281])
                ("memo" variable nil (reparse-symbol function_parameters) [8283 8287]))              ) nil [8251 9710])
            ("del" code nil nil [9711 9716])
            ("del" code nil nil [9718 9727])
            ("_EmptyClass" type
               (:members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [9808 9812]))                  
                :type "class")
                nil [9785 9813])
            ("_test" function nil nil [9814 11494])
            ("if" code nil nil [11495 11534]))          
      :file "copy.py"
      :pointmax 11534
      :fsize 11533
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c77c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utilities for with-statement contexts.  See PEP 343.\"\"\"" code nil nil [1 59])
            ("sys" include nil nil [61 71])
            ("functools" include nil nil [72 99])
            ("warnings" include nil nil [100 125])
            ("__all__" variable nil nil [127 176])
            ("GeneratorContextManager" type
               (:documentation "Helper for @contextmanager decorator."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [303 317]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [283 287])
                            ("gen" variable nil (reparse-symbol function_parameters) [289 292]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [270 318])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [337 341]))                          )
                        (reparse-symbol indented_block_body) [323 479])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [497 501])
                            ("type" variable nil (reparse-symbol function_parameters) [503 507])
                            ("value" variable nil (reparse-symbol function_parameters) [509 514])
                            ("traceback" variable nil (reparse-symbol function_parameters) [516 525]))                          )
                        (reparse-symbol indented_block_body) [484 1916]))                  
                :type "class")
                nil [178 1916])
            ("contextmanager" function
               (:documentation "@contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [1937 1941]))                  )
                nil [1918 2557])
            ("nested" function
               (:documentation "Combine multiple context managers into a single nested context manager.

   This function has been deprecated in favour of the multiple manager form
   of the with statement.

   The one advantage of this function over the multiple manager form of the
   with statement is that argument unpacking allows it to be
   used with a variable number of context managers as follows:

      with nested(*managers):
          do_something()

    "
                :arguments 
                  ( ("managers" variable nil (reparse-symbol function_parameters) [2586 2595]))                  
                :decorators 
                  ( ("contextmanager" function (:type "decorator") nil nil))                  )
                nil [2559 3912])
            ("closing" type
               (:documentation "Context to automatically close something at the end of a block.

    Code like this:

        with closing(<module>.open(<arguments>)) as f:
            <block>

    is equivalent to this:

        f = <module>.open(<arguments>)
        try:
            <block>
        finally:
            f.close()

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4293 4311]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4271 4275])
                            ("thing" variable nil (reparse-symbol function_parameters) [4277 4282]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4258 4312])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4330 4334]))                          )
                        (reparse-symbol indented_block_body) [4316 4363])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4380 4384])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [4386 4395]))                          )
                        (reparse-symbol indented_block_body) [4367 4425]))                  
                :type "class")
                nil [3914 4425]))          
      :file "contextlib.py"
      :pointmax 4425
      :fsize 4424
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((INDENT_BLOCK 3452 . 3912) (NEWLINE 3451 . 3452) (COLON 3450 . 3451) (FINALLY 3443 . 3450)))
    (semanticdb-table "semanticdb-table-195c79c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an IOError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
\"\"\"" code nil nil [1 1480])
            ("__author__" variable nil nil [1524 1861])
            ("__all__" variable nil nil [1863 2181])
            ("_io" include nil nil [2184 2194])
            ("abc" include nil nil [2195 2205])
            ("" code nil nil [2223 2473])
            ("OpenWrapper" variable nil nil [2475 2497])
            ("SEEK_SET" variable nil nil [2543 2555])
            ("SEEK_CUR" variable nil nil [2556 2568])
            ("SEEK_END" variable nil nil [2569 2581])
            ("IOBase" type
               (:superclasses ("_io._IOBase")
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2758 2785])
                    ("__doc__" variable nil (reparse-symbol indented_block_body) [2790 2819]))                  
                :type "class")
                nil [2727 2820])
            ("RawIOBase" type
               (:superclasses ("_io._RawIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [2866 2898]))                  
                :type "class")
                nil [2821 2899])
            ("BufferedIOBase" type
               (:superclasses ("_io._BufferedIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [2955 2992]))                  
                :type "class")
                nil [2900 2993])
            ("TextIOBase" type
               (:superclasses ("_io._TextIOBase" "IOBase")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [3041 3074]))                  
                :type "class")
                nil [2994 3075])
            ("RawIOBase" code nil nil [3076 3102])
            ("for" code nil nil [3104 3241])
            ("for" code nil nil [3242 3313])
            ("del" code nil nil [3313 3322]))          
      :file "io.py"
      :pointmax 3323
      :fsize 3322
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c7bc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
\"\"\"" code nil nil [1 130])
            ("UserDict" include nil nil [332 347])
            ("" code nil nil [370 520])
            ("_weakrefset" include nil nil [522 570])
            ("exceptions" include nil nil [572 609])
            ("ProxyTypes" variable nil nil [612 655])
            ("__all__" variable nil nil [657 877])
            ("WeakValueDictionary" type
               (:documentation "Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1418 1565])
                            ("self" variable nil (reparse-symbol indented_block_body) [1573 1587])
                            ("args" variable nil (reparse-symbol indented_block_body) [1596 1611])
                            ("if" code nil (reparse-symbol indented_block_body) [1620 1718])
                            ("remove" function (:arguments 
                              ( ("wr" variable nil (reparse-symbol function_parameters) [1737 1739])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1741 1748])
                                ("_atomic_removal" variable nil (reparse-symbol function_parameters) [1760 1775]))                              ) (reparse-symbol indented_block_body) [1726 2163])
                            ("self" variable nil (reparse-symbol indented_block_body) [2171 2192])
                            ("self" variable nil (reparse-symbol indented_block_body) [2240 2267])
                            ("self" variable nil (reparse-symbol indented_block_body) [2276 2299])
                            ("UserDict" code nil (reparse-symbol indented_block_body) [2308 2353]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [1396 1401])
                            ("kw" variable nil (reparse-symbol function_parameters) [1403 1407]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1383 2354])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2380 2384]))                          )
                        (reparse-symbol indented_block_body) [2359 2657])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2678 2682])
                            ("key" variable nil (reparse-symbol function_parameters) [2684 2687]))                          )
                        (reparse-symbol indented_block_body) [2662 2879])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2900 2904])
                            ("key" variable nil (reparse-symbol function_parameters) [2906 2909]))                          )
                        (reparse-symbol indented_block_body) [2884 3010])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3032 3036])
                            ("key" variable nil (reparse-symbol function_parameters) [3038 3041]))                          )
                        (reparse-symbol indented_block_body) [3015 3240])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3257 3261])
                            ("key" variable nil (reparse-symbol function_parameters) [3263 3266]))                          )
                        (reparse-symbol indented_block_body) [3245 3465])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3483 3487]))                          )
                        (reparse-symbol indented_block_body) [3470 3546])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3567 3571])
                            ("key" variable nil (reparse-symbol function_parameters) [3573 3576])
                            ("value" variable nil (reparse-symbol function_parameters) [3578 3583]))                          )
                        (reparse-symbol indented_block_body) [3551 3717])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3732 3736]))                          )
                        (reparse-symbol indented_block_body) [3722 3836])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3850 3854]))                          )
                        (reparse-symbol indented_block_body) [3841 4105])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [4110 4125])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4148 4152])
                            ("memo" variable nil (reparse-symbol function_parameters) [4154 4158]))                          )
                        (reparse-symbol indented_block_body) [4131 4454])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4467 4471])
                            ("key" variable nil (reparse-symbol function_parameters) [4473 4476])
                            ("default" variable nil (reparse-symbol function_parameters) [4478 4485]))                          )
                        (reparse-symbol indented_block_body) [4459 4838])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4853 4857]))                          )
                        (reparse-symbol indented_block_body) [4843 5091])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5110 5114]))                          )
                        (reparse-symbol indented_block_body) [5096 5377])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5395 5399]))                          )
                        (reparse-symbol indented_block_body) [5382 5576])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [5581 5600])
                    ("itervaluerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5624 5628]))                          
                        :documentation "Return an iterator that yields the weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [5606 6224])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6244 6248]))                          )
                        (reparse-symbol indented_block_body) [6229 6497])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6514 6518]))                          )
                        (reparse-symbol indented_block_body) [6502 6732])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6745 6749])
                            ("key" variable nil (reparse-symbol function_parameters) [6751 6754])
                            ("args" variable nil (reparse-symbol function_parameters) [6756 6761]))                          )
                        (reparse-symbol indented_block_body) [6737 7094])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7114 7118])
                            ("key" variable nil (reparse-symbol function_parameters) [7120 7123])
                            ("default" variable nil (reparse-symbol function_parameters) [7125 7132]))                          )
                        (reparse-symbol indented_block_body) [7099 7453])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [7469 7474])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [7476 7484]))                      ) (reparse-symbol indented_block_body) [7458 8189])
                    ("valuerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8208 8212]))                          
                        :documentation "Return a list of weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [8194 8717])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8733 8737]))                          )
                        (reparse-symbol indented_block_body) [8722 8960]))                  
                :type "class")
                nil [880 8960])
            ("KeyedRef" type
               (:documentation "Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9346 9364])
                    ("__new__" function (:arguments 
                      ( ("type" variable nil (reparse-symbol function_parameters) [9382 9386])
                        ("ob" variable nil (reparse-symbol function_parameters) [9388 9390])
                        ("callback" variable nil (reparse-symbol function_parameters) [9392 9400])
                        ("key" variable nil (reparse-symbol function_parameters) [9402 9405]))                      ) (reparse-symbol indented_block_body) [9370 9498])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [9550 9595]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9516 9520])
                            ("ob" variable nil (reparse-symbol function_parameters) [9522 9524])
                            ("callback" variable nil (reparse-symbol function_parameters) [9526 9534])
                            ("key" variable nil (reparse-symbol function_parameters) [9536 9539]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9503 9596]))                  
                :type "class")
                nil [8962 9596])
            ("WeakKeyDictionary" type
               (:documentation " Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10090 10104])
                            ("remove" function (:arguments 
                              ( ("k" variable nil (reparse-symbol function_parameters) [10124 10125])
                                ("selfref" variable nil (reparse-symbol function_parameters) [10127 10134]))                              ) (reparse-symbol indented_block_body) [10113 10357])
                            ("self" variable nil (reparse-symbol indented_block_body) [10365 10386])
                            ("self" variable nil (reparse-symbol indented_block_body) [10450 10477])
                            ("self" variable nil (reparse-symbol indented_block_body) [10486 10509])
                            ("if" code nil (reparse-symbol indented_block_body) [10518 10569]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10064 10068])
                            ("dict" variable nil (reparse-symbol function_parameters) [10070 10074]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10051 10569])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10595 10599]))                          )
                        (reparse-symbol indented_block_body) [10574 11046])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11067 11071])
                            ("key" variable nil (reparse-symbol function_parameters) [11073 11076]))                          )
                        (reparse-symbol indented_block_body) [11051 11111])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11132 11136])
                            ("key" variable nil (reparse-symbol function_parameters) [11138 11141]))                          )
                        (reparse-symbol indented_block_body) [11116 11179])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11197 11201]))                          )
                        (reparse-symbol indented_block_body) [11184 11258])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11279 11283])
                            ("key" variable nil (reparse-symbol function_parameters) [11285 11288])
                            ("value" variable nil (reparse-symbol function_parameters) [11290 11295]))                          )
                        (reparse-symbol indented_block_body) [11263 11348])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11362 11366]))                          )
                        (reparse-symbol indented_block_body) [11353 11550])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [11555 11570])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11593 11597])
                            ("memo" variable nil (reparse-symbol function_parameters) [11599 11603]))                          )
                        (reparse-symbol indented_block_body) [11576 11834])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11847 11851])
                            ("key" variable nil (reparse-symbol function_parameters) [11853 11856])
                            ("default" variable nil (reparse-symbol function_parameters) [11858 11865]))                          )
                        (reparse-symbol indented_block_body) [11839 11920])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11937 11941])
                            ("key" variable nil (reparse-symbol function_parameters) [11943 11946]))                          )
                        (reparse-symbol indented_block_body) [11925 12066])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12088 12092])
                            ("key" variable nil (reparse-symbol function_parameters) [12094 12097]))                          )
                        (reparse-symbol indented_block_body) [12071 12217])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12232 12236]))                          )
                        (reparse-symbol indented_block_body) [12222 12405])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12424 12428]))                          )
                        (reparse-symbol indented_block_body) [12410 12619])
                    ("iterkeyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12640 12644]))                          
                        :documentation "Return an iterator that yields the weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [12624 13163])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13181 13185]))                          )
                        (reparse-symbol indented_block_body) [13168 13361])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [13366 13385])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13406 13410]))                          )
                        (reparse-symbol indented_block_body) [13391 13526])
                    ("keyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13543 13547]))                          
                        :documentation "Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [13531 13975])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13989 13993]))                          )
                        (reparse-symbol indented_block_body) [13980 14143])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14160 14164]))                          )
                        (reparse-symbol indented_block_body) [14148 14313])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14326 14330])
                            ("key" variable nil (reparse-symbol function_parameters) [14332 14335])
                            ("args" variable nil (reparse-symbol function_parameters) [14337 14342]))                          )
                        (reparse-symbol indented_block_body) [14318 14391])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14411 14415])
                            ("key" variable nil (reparse-symbol function_parameters) [14417 14420])
                            ("default" variable nil (reparse-symbol function_parameters) [14422 14429]))                          )
                        (reparse-symbol indented_block_body) [14396 14505])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14521 14525])
                            ("dict" variable nil (reparse-symbol function_parameters) [14527 14531])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14538 14546]))                          )
                        (reparse-symbol indented_block_body) [14510 14831]))                  
                :type "class")
                nil [9598 14831]))          
      :file "weakref.py"
      :pointmax 14831
      :fsize 14830
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((NAME 7801 . 7805) (IF 7816 . 7818) (ELSE 7824 . 7828)))
    (semanticdb-table "semanticdb-table-195c7dc"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("try" code nil nil [5391 5454])
            ("__all__" variable nil nil [5472 5700])
            ("__version__" variable nil nil [5702 5723])
            ("I" variable nil nil [5733 5781])
            ("L" variable nil nil [5796 5836])
            ("U" variable nil nil [5867 5909])
            ("M" variable nil nil [5934 5980])
            ("S" variable nil nil [6013 6053])
            ("X" variable nil nil [6079 6121])
            ("T" variable nil nil [6209 6253])
            ("DEBUG" variable nil nil [6277 6311])
            ("error" variable nil nil [6362 6387])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6490 6497])
                    ("string" variable nil (reparse-symbol function_parameters) [6499 6505])
                    ("flags" variable nil (reparse-symbol function_parameters) [6507 6512]))                  )
                nil [6480 6691])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6703 6710])
                    ("string" variable nil (reparse-symbol function_parameters) [6712 6718])
                    ("flags" variable nil (reparse-symbol function_parameters) [6720 6725]))                  )
                nil [6692 6908])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6917 6924])
                    ("repl" variable nil (reparse-symbol function_parameters) [6926 6930])
                    ("string" variable nil (reparse-symbol function_parameters) [6932 6938])
                    ("count" variable nil (reparse-symbol function_parameters) [6940 6945])
                    ("flags" variable nil (reparse-symbol function_parameters) [6949 6954]))                  )
                nil [6909 7377])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7387 7394])
                    ("repl" variable nil (reparse-symbol function_parameters) [7396 7400])
                    ("string" variable nil (reparse-symbol function_parameters) [7402 7408])
                    ("count" variable nil (reparse-symbol function_parameters) [7410 7415])
                    ("flags" variable nil (reparse-symbol function_parameters) [7419 7424]))                  )
                nil [7378 7977])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7988 7995])
                    ("string" variable nil (reparse-symbol function_parameters) [7997 8003])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [8005 8013])
                    ("flags" variable nil (reparse-symbol function_parameters) [8017 8022]))                  )
                nil [7978 8214])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8227 8234])
                    ("string" variable nil (reparse-symbol function_parameters) [8236 8242])
                    ("flags" variable nil (reparse-symbol function_parameters) [8244 8249]))                  )
                nil [8215 8581])
            ("if" code nil nil [8582 8941])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8954 8961])
                ("flags" variable nil (reparse-symbol function_parameters) [8963 8968]))              ) nil [8942 9081])
            ("purge" function nil nil [9082 9179])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9193 9200])
                ("flags" variable nil (reparse-symbol function_parameters) [9202 9207]))              ) nil [9180 9311])
            ("_alphanum" variable nil nil [9312 9404])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9417 9424]))              ) nil [9406 13424]))          
      :file "re.py"
      :pointmax 13424
      :fsize 13423
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195c7fc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Get useful information from live Python objects.

This module encapsulates the interface provided by the internal special
attributes (func_*, co_*, im_*, tb_*, etc.) in a friendlier fashion.
It also provides some help for examining source code and class layout.

Here are some of the useful functions provided by this module:

    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),
        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),
        isroutine() - check object types
    getmembers() - get members of an object that satisfy a given condition

    getfile(), getsourcefile(), getsource() - find an object's source code
    getdoc(), getcomments() - get documentation on an object
    getmodule() - determine the module that an object came from
    getclasstree() - arrange classes so as to represent their hierarchy

    getargspec(), getargvalues(), getcallargs() - get info about function arguments
    formatargspec(), formatargvalues() - format an argument spec
    getouterframes(), getinnerframes() - get info about frames
    currentframe() - get the current stack frame
    stack(), trace() - get info about frames on the stack or in a traceback
\"\"\"" code nil nil [30 1238])
            ("__author__" variable nil nil [1296 1337])
            ("__date__" variable nil nil [1338 1361])
            ("sys" include nil nil [1363 1373])
            ("os" include nil nil [1374 1383])
            ("types" include nil nil [1384 1396])
            ("string" include nil nil [1397 1410])
            ("re" include nil nil [1411 1420])
            ("dis" include nil nil [1421 1431])
            ("imp" include nil nil [1432 1442])
            ("tokenize" include nil nil [1443 1458])
            ("linecache" include nil nil [1459 1475])
            ("operator" include nil nil [1476 1507])
            ("collections" include nil nil [1508 1542])
            ("CO_OPTIMIZED, CO_NEWLOCALS, CO_VARARGS, CO_VARKEYWORDS" code nil nil [1587 1662])
            ("CO_NESTED, CO_GENERATOR, CO_NOFREE" code nil nil [1663 1716])
            ("TPFLAGS_IS_ABSTRACT" code nil nil [1740 1769])
            ("ismodule" function
               (:documentation "Return true if the object is a module.

    Module objects provide these attributes:
        __doc__         documentation string
        __file__        filename (missing for built-in modules)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1860 1866]))                  )
                nil [1847 2121])
            ("isclass" function
               (:documentation "Return true if the object is a class.

    Class objects provide these attributes:
        __doc__         documentation string
        __module__      name of module in which this class was defined"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2134 2140]))                  )
                nil [2122 2407])
            ("ismethod" function
               (:documentation "Return true if the object is an instance method.

    Instance method objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this method was defined
        im_class        class object in which this method belongs
        im_func         function object containing implementation of method
        im_self         instance to which this method is bound, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2421 2427]))                  )
                nil [2408 2915])
            ("ismethoddescriptor" function
               (:documentation "Return true if the object is a method descriptor.

    But not if ismethod() or isclass() or isfunction() are true.

    This is new in Python 2.2, and, for example, is true of int.__add__.
    An object passing this test has a __get__ attribute but not a __set__
    attribute, but beyond that the set of attributes varies.  __name__ is
    usually sensible, and __doc__ often is.

    Methods implemented via descriptors that also pass one of the other
    tests return false from the ismethoddescriptor() test, simply because
    the other tests promise more -- you can, e.g., count on having the
    im_func attribute (etc) when an object passes ismethod()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2939 2945]))                  )
                nil [2916 3878])
            ("isdatadescriptor" function
               (:documentation "Return true if the object is a data descriptor.

    Data descriptors have both a __get__ and a __set__ attribute.  Examples are
    properties (defined in Python) and getsets and members (defined in C).
    Typically, data descriptors will also have __name__ and __doc__ attributes
    (properties, getsets, and members have both of these attributes), but this
    is not guaranteed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [3900 3906]))                  )
                nil [3879 4375])
            ("if" code nil nil [4376 4953])
            ("if" code nil nil [4954 5531])
            ("isfunction" function
               (:documentation "Return true if the object is a user-defined function.

    Function objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this function was defined
        func_code       code object containing compiled function bytecode
        func_defaults   tuple of any default values for arguments
        func_doc        (same as __doc__)
        func_globals    global namespace in which this function was defined
        func_name       (same as __name__)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [5547 5553]))                  )
                nil [5532 6130])
            ("isgeneratorfunction" function
               (:documentation "Return true if the object is a user-defined generator function.

    Generator function objects provide the same attributes as functions.
    See help(isfunction) for a list of attributes."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6155 6161]))                  )
                nil [6131 6482])
            ("isgenerator" function
               (:documentation "Return true if the object is a generator.

    Generator objects provide these attributes:
        __iter__        defined to support iteration over container
        close           raises a new GeneratorExit exception inside the
                        generator to terminate the iteration
        gi_code         code object
        gi_frame        frame object or possibly None once the generator has
                        been exhausted
        gi_running      set to 1 when generator is executing, 0 otherwise
        next            return the next item from the container
        send            resumes the generator and \"sends\" a value that becomes
                        the result of the current yield-expression
        throw           used to raise an exception inside the generator"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6499 6505]))                  )
                nil [6483 7369])
            ("istraceback" function
               (:documentation "Return true if the object is a traceback.

    Traceback objects provide these attributes:
        tb_frame        frame object at this level
        tb_lasti        index of last attempted instruction in bytecode
        tb_lineno       current line number in Python source code
        tb_next         next inner traceback object (called by this level)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [7386 7392]))                  )
                nil [7370 7811])
            ("isframe" function
               (:documentation "Return true if the object is a frame object.

    Frame objects provide these attributes:
        f_back          next outer frame object (this frame's caller)
        f_builtins      built-in namespace seen by this frame
        f_code          code object being executed in this frame
        f_exc_traceback traceback if raised in this frame, or None
        f_exc_type      exception type if raised in this frame, or None
        f_exc_value     exception value if raised in this frame, or None
        f_globals       global namespace seen by this frame
        f_lasti         index of last attempted instruction in bytecode
        f_lineno        current line number in Python source code
        f_locals        local namespace seen by this frame
        f_restricted    0 or 1 if frame is in restricted execution mode
        f_trace         tracing function for this frame, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [7824 7830]))                  )
                nil [7812 8783])
            ("iscode" function
               (:documentation "Return true if the object is a code object.

    Code objects provide these attributes:
        co_argcount     number of arguments (not including * or ** args)
        co_code         string of raw compiled bytecode
        co_consts       tuple of constants used in the bytecode
        co_filename     name of file in which this code object was created
        co_firstlineno  number of first line in Python source code
        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg
        co_lnotab       encoded mapping of line numbers to bytecode indices
        co_name         name with which this code object was defined
        co_names        tuple of names of local variables
        co_nlocals      number of local variables
        co_stacksize    virtual machine stack space required
        co_varnames     tuple of names of arguments and local variables"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [8795 8801]))                  )
                nil [8784 9746])
            ("isbuiltin" function
               (:documentation "Return true if the object is a built-in function or method.

    Built-in functions and methods provide these attributes:
        __doc__         documentation string
        __name__        original name of this function or method
        __self__        instance to which a method is bound, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [9761 9767]))                  )
                nil [9747 10138])
            ("isroutine" function
               (:documentation "Return true if the object is any kind of function or method."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10153 10159]))                  )
                nil [10139 10372])
            ("isabstract" function
               (:documentation "Return true if the object is an abstract base class (ABC)."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10388 10394]))                  )
                nil [10373 10551])
            ("getmembers" function
               (:documentation "Return all members of an object as (name, value) pairs sorted by name.
    Optionally, only return members that satisfy a given predicate."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10567 10573])
                    ("predicate" variable nil (reparse-symbol function_parameters) [10575 10584]))                  )
                nil [10552 11017])
            ("Attribute" variable nil nil [11018 11088])
            ("classify_class_attrs" function
               (:documentation "Return list of attribute-descriptor tuples.

    For each name in dir(cls), the return list contains a 4-tuple
    with these elements:

        0. The name (a string).

        1. The kind of attribute this is, one of these strings:
               'class method'    created via classmethod()
               'static method'   created via staticmethod()
               'property'        created via property()
               'method'          any other flavor of method
               'data'            not a method

        2. The class which defined this attribute (a class).

        3. The object as obtained directly from the defining class's
           __dict__, not via getattr.  This is especially important for
           data attributes:  C.data is just a data object, but
           C.__dict__['data'] may be a data descriptor with additional
           info, like a __doc__ string.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [11115 11118]))                  )
                nil [11090 13580])
            ("_searchbases" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [13674 13677])
                ("accum" variable nil (reparse-symbol function_parameters) [13679 13684]))              ) nil [13657 13859])
            ("getmro" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [13871 13874]))              ) nil [13860 14108])
            ("indentsize" function
               (:documentation "Return the indent size, in spaces, at the start of a line of text."
                :arguments 
                  ( ("line" variable nil (reparse-symbol function_parameters) [14200 14204]))                  )
                nil [14185 14376])
            ("getdoc" function
               (:documentation "Get the documentation string for an object.

    All tabs are expanded to spaces.  To clean up docstrings that are
    indented to line up with blocks of code, any whitespace than can be
    uniformly removed from the second line onwards is removed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [14388 14394]))                  )
                nil [14377 14834])
            ("cleandoc" function
               (:documentation "Clean up indentation from docstrings.

    Any whitespace that can be uniformly removed from the second line
    onwards is removed."
                :arguments 
                  ( ("doc" variable nil (reparse-symbol function_parameters) [14848 14851]))                  )
                nil [14835 15829])
            ("getfile" function
               (:documentation "Work out which source or compiled file an object was defined in."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [15842 15848]))                  )
                nil [15830 16744])
            ("ModuleInfo" variable nil nil [16745 16814])
            ("getmoduleinfo" function
               (:documentation "Get the module name, suffix, mode, and module type for a given file."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [16834 16838]))                  )
                nil [16816 17323])
            ("getmodulename" function
               (:documentation "Return the module name for a given file, or None."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [17342 17346]))                  )
                nil [17324 17468])
            ("getsourcefile" function
               (:documentation "Return the filename that can be used to locate an object's source.
    Return None if no way can be identified to get the source.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [17487 17493]))                  )
                nil [17469 18305])
            ("getabsfile" function
               (:documentation "Return an absolute path to the source or compiled file for an object.

    The idea is for each object to have a unique origin, so this routine
    normalizes the result as much as possible."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [18321 18327])
                    ("_filename" variable nil (reparse-symbol function_parameters) [18329 18338]))                  )
                nil [18306 18690])
            ("modulesbyfile" variable nil nil [18691 18709])
            ("_filesbymodname" variable nil nil [18710 18730])
            ("getmodule" function
               (:documentation "Return the module an object was defined in, or None if not found."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [18746 18752])
                    ("_filename" variable nil (reparse-symbol function_parameters) [18754 18763]))                  )
                nil [18732 20614])
            ("findsource" function
               (:documentation "Return the entire source file and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of all the lines
    in the file and the line number indexes a line in that list.  An IOError
    is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [20630 20636]))                  )
                nil [20615 23125])
            ("getcomments" function
               (:documentation "Get lines of comments immediately preceding an object's source code.

    Returns None when source can't be found.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [23142 23148]))                  )
                nil [23126 24935])
            ("EndOfBlock" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [24936 24970])
            ("BlockFinder" type
               (:documentation "Provide a tokeneater() method to detect the end of a code block."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25097 25112])
                            ("self" variable nil (reparse-symbol indented_block_body) [25121 25142])
                            ("self" variable nil (reparse-symbol indented_block_body) [25151 25171])
                            ("self" variable nil (reparse-symbol indented_block_body) [25180 25201])
                            ("self" variable nil (reparse-symbol indented_block_body) [25210 25223]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25082 25086]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25069 25224])
                    ("tokeneater" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25244 25248])
                            ("type" variable nil (reparse-symbol function_parameters) [25250 25254])
                            ("token" variable nil (reparse-symbol function_parameters) [25256 25261])
                            ("srow_scol" variable nil (reparse-symbol function_parameters) [25263 25272])
                            ("erow_ecol" variable nil (reparse-symbol function_parameters) [25274 25283])
                            ("line" variable nil (reparse-symbol function_parameters) [25285 25289]))                          )
                        (reparse-symbol indented_block_body) [25229 26689]))                  
                :type "class")
                nil [24971 26689])
            ("getblock" function
               (:documentation "Extract the block of code at the top of the given list of lines."
                :arguments 
                  ( ("lines" variable nil (reparse-symbol function_parameters) [26703 26708]))                  )
                nil [26690 26987])
            ("getsourcelines" function
               (:documentation "Return a list of source lines and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of the lines
    corresponding to the object and the line number indicates where in the
    original source file the first line of code was found.  An IOError is
    raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [27007 27013]))                  )
                nil [26988 27575])
            ("getsource" function
               (:documentation "Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    IOError is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [27590 27596]))                  )
                nil [27576 27947])
            ("walktree" function
               (:documentation "Recursive helper function for getclasstree()."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [28037 28044])
                    ("children" variable nil (reparse-symbol function_parameters) [28046 28054])
                    ("parent" variable nil (reparse-symbol function_parameters) [28056 28062]))                  )
                nil [28024 28368])
            ("getclasstree" function
               (:documentation "Arrange the given list of classes into a hierarchy of nested lists.

    Where a nested list appears, it contains classes derived from the class
    whose entry immediately precedes the list.  Each entry is a 2-tuple
    containing a class and a tuple of its base classes.  If the 'unique'
    argument is true, exactly one entry appears in the returned structure
    for each class in the given list.  Otherwise, classes using multiple
    inheritance and their descendants will appear multiple times."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [28386 28393])
                    ("unique" variable nil (reparse-symbol function_parameters) [28395 28401]))                  )
                nil [28369 29465])
            ("Arguments" variable nil nil [29542 29602])
            ("getargs" function
               (:documentation "Get information about the arguments accepted by a code object.

    Three things are returned: (args, varargs, varkw), where 'args' is
    a list of argument names (possibly containing nested lists), and
    'varargs' and 'varkw' are the names of the * and ** arguments or None."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [29616 29618]))                  )
                nil [29604 32120])
            ("ArgSpec" variable nil nil [32121 32186])
            ("getargspec" function
               (:documentation "Get the names and default values of a function's arguments.

    A tuple of four things is returned: (args, varargs, varkw, defaults).
    'args' is a list of the argument names (it may contain nested lists).
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'defaults' is an n-tuple of the default values of the last n arguments.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [32203 32207]))                  )
                nil [32188 32848])
            ("ArgInfo" variable nil nil [32849 32912])
            ("getargvalues" function
               (:documentation "Get information about arguments passed into a particular frame.

    A tuple of four things is returned: (args, varargs, varkw, locals).
    'args' is a list of the argument names (it may contain nested lists).
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'locals' is the locals dictionary of the given frame."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [32931 32936]))                  )
                nil [32914 33399])
            ("joinseq" function (:arguments 
              ( ("seq" variable nil (reparse-symbol function_parameters) [33412 33415]))              ) nil [33400 33535])
            ("strseq" function
               (:documentation "Recursively walk a sequence, stringifying each element."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [33547 33553])
                    ("convert" variable nil (reparse-symbol function_parameters) [33555 33562])
                    ("join" variable nil (reparse-symbol function_parameters) [33564 33568]))                  )
                nil [33536 33803])
            ("formatargspec" function
               (:documentation "Format an argument spec from the 4 values returned by getargspec.

    The first four arguments are (args, varargs, varkw, defaults).  The
    other four arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings.  The ninth
    argument is an optional function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [33822 33826])
                    ("varargs" variable nil (reparse-symbol function_parameters) [33828 33835])
                    ("varkw" variable nil (reparse-symbol function_parameters) [33842 33847])
                    ("defaults" variable nil (reparse-symbol function_parameters) [33854 33862])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [33887 33896])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [33920 33933])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [33977 33988])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [34033 34044])
                    ("join" variable nil (reparse-symbol function_parameters) [34096 34100]))                  )
                nil [33804 34965])
            ("formatargvalues" function
               (:documentation "Format an argument spec from the 4 values returned by getargvalues.

    The first four arguments are (args, varargs, varkw, locals).  The
    next four arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings.  The ninth
    argument is an optional function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [34986 34990])
                    ("varargs" variable nil (reparse-symbol function_parameters) [34992 34999])
                    ("varkw" variable nil (reparse-symbol function_parameters) [35001 35006])
                    ("locals" variable nil (reparse-symbol function_parameters) [35008 35014])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [35036 35045])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [35071 35084])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [35130 35141])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [35188 35199])
                    ("join" variable nil (reparse-symbol function_parameters) [35253 35257]))                  )
                nil [34966 36119])
            ("getcallargs" function
               (:documentation "Get the mapping of arguments to values.

    A dict is returned, with keys the function argument names (including the
    names of the * and ** arguments, if any), and values the respective bound
    values from 'positional' and 'named'."
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [36136 36140])
                    ("positional" variable nil (reparse-symbol function_parameters) [36142 36153])
                    ("named" variable nil (reparse-symbol function_parameters) [36155 36162]))                  )
                nil [36120 39967])
            ("Traceback" variable nil nil [40045 40127])
            ("getframeinfo" function
               (:documentation "Get information about a frame or traceback object.

    A tuple of five things is returned: the filename, the line number of
    the current line, the function name, a list of lines of context from
    the source code, and the index of the current line within that list.
    The optional second argument specifies the number of lines of context
    to return, which are centered around the current line."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [40146 40151])
                    ("context" variable nil (reparse-symbol function_parameters) [40153 40160]))                  )
                nil [40129 41359])
            ("getlineno" function
               (:documentation "Get the line number from a frame object, allowing for optimization."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [41374 41379]))                  )
                nil [41360 41554])
            ("getouterframes" function
               (:documentation "Get a list of records for a frame and all higher (calling) frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [41574 41579])
                    ("context" variable nil (reparse-symbol function_parameters) [41581 41588]))                  )
                nil [41555 41964])
            ("getinnerframes" function
               (:documentation "Get a list of records for a traceback's frame and all lower frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [41984 41986])
                    ("context" variable nil (reparse-symbol function_parameters) [41988 41995]))                  )
                nil [41965 42367])
            ("if" code nil nil [42368 42476])
            ("stack" function
               (:documentation "Return a list of records for the stack above the caller's frame."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [42487 42494]))                  )
                nil [42477 42627])
            ("trace" function
               (:documentation "Return a list of records for the stack below the current exception."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [42638 42645]))                  )
                nil [42628 42782]))          
      :file "inspect.py"
      :pointmax 42782
      :fsize 42781
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((NAME 37726 . 37738) (IF 37755 . 37757) (ELSE 37767 . 37771) (NAME 21182 . 21186) (IF 21200 . 21202) (ELSE 21214 . 21218)))
    (semanticdb-table "semanticdb-table-195cb3c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Locale support module.

The module provides low-level access to the C lib's locale APIs and adds high
level number formatting APIs as well as a locale aliasing engine to complement
these.

The aliasing engine includes support for many commonly used locale names and
maps them to values suitable for passing to the C lib's setlocale() function. It
also includes default encodings for all supported locale names.
\"\"\"" code nil nil [1 418])
            ("sys" include nil nil [420 430])
            ("encodings" include nil nil [431 447])
            ("encodings.aliases" include nil nil [448 472])
            ("re" include nil nil [473 482])
            ("operator" include nil nil [483 498])
            ("functools" include nil nil [499 515])
            ("_str" variable nil nil [622 632])
            ("try" code nil nil [634 820])
            ("__all__" variable nil nil [1068 1415])
            ("try" code nil nil [1417 3119])
            ("_localeconv" variable nil nil [3121 3145])
            ("_override_localeconv" variable nil nil [3262 3287])
            ("" code nil nil [3305 3318])
            ("localeconv" function nil nil [3319 3440])
            ("_grouping_intervals" function (:arguments 
              ( ("grouping" variable nil (reparse-symbol function_parameters) [3584 3592]))              ) nil [3560 4020])
            ("_group" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4073 4074])
                ("monetary" variable nil (reparse-symbol function_parameters) [4076 4084]))              ) nil [4062 4962])
            ("_strip_padding" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [5045 5046])
                ("amount" variable nil (reparse-symbol function_parameters) [5048 5054]))              ) nil [5026 5268])
            ("_percent_re" variable nil nil [5269 5398])
            ("format" function
               (:documentation "Returns the locale-aware substitution of a %? specifier
    (percent).

    additional is for format strings which contain one or more
    '*' modifiers."
                :arguments 
                  ( ("percent" variable nil (reparse-symbol function_parameters) [5411 5418])
                    ("value" variable nil (reparse-symbol function_parameters) [5420 5425])
                    ("grouping" variable nil (reparse-symbol function_parameters) [5427 5435])
                    ("monetary" variable nil (reparse-symbol function_parameters) [5443 5451])
                    ("additional" variable nil (reparse-symbol function_parameters) [5459 5470]))                  )
                nil [5400 6026])
            ("_format" function (:arguments 
              ( ("percent" variable nil (reparse-symbol function_parameters) [6039 6046])
                ("value" variable nil (reparse-symbol function_parameters) [6048 6053])
                ("grouping" variable nil (reparse-symbol function_parameters) [6055 6063])
                ("monetary" variable nil (reparse-symbol function_parameters) [6071 6079])
                ("additional" variable nil (reparse-symbol function_parameters) [6087 6098]))              ) nil [6027 6928])
            ("format_string" function
               (:documentation "Formats a string in the same way that the % formatting would use,
    but takes the current locale into account.
    Grouping is applied if the third parameter is true."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6947 6948])
                    ("val" variable nil (reparse-symbol function_parameters) [6950 6953])
                    ("grouping" variable nil (reparse-symbol function_parameters) [6955 6963]))                  )
                nil [6929 8117])
            ("currency" function
               (:documentation "Formats val according to the currency settings
    in the current locale."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [8131 8134])
                    ("symbol" variable nil (reparse-symbol function_parameters) [8136 8142])
                    ("grouping" variable nil (reparse-symbol function_parameters) [8149 8157])
                    ("international" variable nil (reparse-symbol function_parameters) [8165 8178]))                  )
                nil [8118 9644])
            ("str" function
               (:documentation "Convert float to string, taking the locale into account."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [9653 9656]))                  )
                nil [9645 9758])
            ("atof" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [9768 9774])
                ("func" variable nil (reparse-symbol function_parameters) [9776 9780]))              ) nil [9759 10176])
            ("atoi" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [10186 10189]))              ) nil [10177 10290])
            ("_test" function nil nil [10291 10484])
            ("_setlocale" variable nil nil [10698 10720])
            ("_ascii_lower_map" variable nil nil [10799 10910])
            ("_replace_encoding" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [10934 10938])
                ("encoding" variable nil (reparse-symbol function_parameters) [10940 10948]))              ) nil [10912 11592])
            ("normalize" function
               (:documentation " Returns a normalized locale code for the given locale
        name.

        The returned locale code is formatted for use with
        setlocale().

        If normalization fails, the original name is returned
        unchanged.

        If the given encoding is not known, the function defaults to
        the default encoding for the locale code just like setlocale()
        does.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [11607 11617]))                  )
                nil [11593 14580])
            ("_parse_localename" function
               (:documentation " Parses the locale code for localename and returns the
        result as tuple (language code, encoding).

        The localename is normalized and passed through the locale
        alias engine. A ValueError is raised in case the locale name
        cannot be parsed.

        The language code corresponds to RFC 1766.  code and encoding
        can be None in case the values cannot be determined or are
        unknown to this implementation.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [14603 14613]))                  )
                nil [14581 15657])
            ("_build_localename" function
               (:documentation " Builds a locale code from the given tuple (language code,
        encoding).

        No aliasing or normalizing takes place.

    "
                :arguments 
                  ( ("localetuple" variable nil (reparse-symbol function_parameters) [15680 15691]))                  )
                nil [15658 16023])
            ("getdefaultlocale" function
               (:documentation " Tries to determine the default locale settings and returns
        them as tuple (language code, encoding).

        According to POSIX, a program which has not called
        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.
        Calling setlocale(LC_ALL, \"\") lets it use the default locale as
        defined by the LANG variable. Since we don't want to interfere
        with the current locale setting we thus emulate the behavior
        in the way described above.

        To maintain compatibility with other platforms, not only the
        LANG variable is tested, but a list of variables given as
        envvars parameter. The first found to be defined will be
        used. envvars defaults to the search path used in GNU gettext;
        it must always contain the variable name 'LANG'.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("envvars" variable nil (reparse-symbol function_parameters) [16045 16052]))                  )
                nil [16024 18009])
            ("getlocale" function
               (:documentation " Returns the current setting for the given locale category as
        tuple (language code, encoding).

        category may be one of the LC_* value except LC_ALL. It
        defaults to LC_CTYPE.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [18025 18033]))                  )
                nil [18011 18613])
            ("setlocale" function
               (:documentation " Set the locale for the given category.  The locale can be
        a string, an iterable of two strings (language code and encoding),
        or None.

        Iterables are converted to strings using the locale aliasing
        engine.  Locale strings are passed directly to the C lib.

        category may be given as one of the LC_* values.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [18628 18636])
                    ("locale" variable nil (reparse-symbol function_parameters) [18638 18644]))                  )
                nil [18614 19196])
            ("resetlocale" function
               (:documentation " Sets the locale for category to the default setting.

        The default setting is determined by calling
        getdefaultlocale(). category defaults to LC_ALL.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [19213 19221]))                  )
                nil [19197 19477])
            ("if" code nil nil [19478 21080])
            ("locale_encoding_alias" variable nil nil [21641 23373])
            ("locale_alias" variable nil nil [29037 89354])
            ("windows_locale" variable nil nil [89828 97987])
            ("_print_locale" function (:documentation " Test function.
    ") nil [97989 99677])
            ("try" code nil nil [99683 99771])
            ("if" code nil nil [99772 99919]))          
      :file "locale.py"
      :pointmax 99919
      :fsize 99918
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cb5c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
      :file "abc.py"
      :pointmax 7146
      :fsize 7145
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cb7c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"A more or less complete user-defined wrapper around dictionary objects.\"\"\"" code nil nil [1 78])
            ("UserDict" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [139 275])
                            ("self" variable nil (reparse-symbol indented_block_body) [283 297])
                            ("args" variable nil (reparse-symbol indented_block_body) [306 321])
                            ("if" code nil (reparse-symbol indented_block_body) [330 428])
                            ("if" code nil (reparse-symbol indented_block_body) [436 781])
                            ("self" variable nil (reparse-symbol indented_block_body) [789 803])
                            ("if" code nil (reparse-symbol indented_block_body) [812 863])
                            ("if" code nil (reparse-symbol indented_block_body) [871 919]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [113 118])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [120 128]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [100 919])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [936 940]))                          )
                        (reparse-symbol indented_block_body) [923 966])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [982 986])
                            ("dict" variable nil (reparse-symbol function_parameters) [988 992]))                          )
                        (reparse-symbol indented_block_body) [970 1133])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [1137 1152])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1190 1194]))                          )
                        (reparse-symbol indented_block_body) [1178 1219])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1239 1243])
                            ("key" variable nil (reparse-symbol function_parameters) [1245 1248]))                          )
                        (reparse-symbol indented_block_body) [1223 1450])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1470 1474])
                            ("key" variable nil (reparse-symbol function_parameters) [1476 1479])
                            ("item" variable nil (reparse-symbol function_parameters) [1481 1485]))                          )
                        (reparse-symbol indented_block_body) [1454 1510])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1530 1534])
                            ("key" variable nil (reparse-symbol function_parameters) [1536 1539]))                          )
                        (reparse-symbol indented_block_body) [1514 1561])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1575 1579]))                          )
                        (reparse-symbol indented_block_body) [1565 1600])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1613 1617]))                          )
                        (reparse-symbol indented_block_body) [1604 1908])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1921 1925]))                          )
                        (reparse-symbol indented_block_body) [1912 1952])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1966 1970]))                          )
                        (reparse-symbol indented_block_body) [1956 1998])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2016 2020]))                          )
                        (reparse-symbol indented_block_body) [2002 2052])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2069 2073]))                          )
                        (reparse-symbol indented_block_body) [2056 2104])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2123 2127]))                          )
                        (reparse-symbol indented_block_body) [2108 2160])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2175 2179]))                          )
                        (reparse-symbol indented_block_body) [2164 2208])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2224 2228])
                            ("key" variable nil (reparse-symbol function_parameters) [2230 2233]))                          )
                        (reparse-symbol indented_block_body) [2212 2260])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [2275 2280])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [2282 2290]))                      ) (reparse-symbol indented_block_body) [2264 3282])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3294 3298])
                            ("key" variable nil (reparse-symbol function_parameters) [3300 3303])
                            ("failobj" variable nil (reparse-symbol function_parameters) [3305 3312]))                          )
                        (reparse-symbol indented_block_body) [3286 3400])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3419 3423])
                            ("key" variable nil (reparse-symbol function_parameters) [3425 3428])
                            ("failobj" variable nil (reparse-symbol function_parameters) [3430 3437]))                          )
                        (reparse-symbol indented_block_body) [3404 3530])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3542 3546])
                            ("key" variable nil (reparse-symbol function_parameters) [3548 3551])
                            ("args" variable nil (reparse-symbol function_parameters) [3553 3558]))                          )
                        (reparse-symbol indented_block_body) [3534 3602])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3618 3622]))                          )
                        (reparse-symbol indented_block_body) [3606 3660])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3681 3685])
                            ("key" variable nil (reparse-symbol function_parameters) [3687 3690]))                          )
                        (reparse-symbol indented_block_body) [3664 3725])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3759 3762])
                            ("iterable" variable nil (reparse-symbol function_parameters) [3764 3772])
                            ("value" variable nil (reparse-symbol function_parameters) [3774 3779]))                          )
                        (reparse-symbol indented_block_body) [3729 3878]))                  
                :type "class")
                nil [80 3878])
            ("IterableUserDict" type
               (:superclasses ("UserDict")
                :members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3930 3934]))                          )
                        (reparse-symbol indented_block_body) [3917 3968]))                  
                :type "class")
                nil [3879 3968])
            ("_abcoll" include nil nil [3969 3983])
            ("_abcoll" code nil nil [3984 4033])
            ("DictMixin" type
               (:members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4535 4539]))                          )
                        (reparse-symbol indented_block_body) [4522 4592])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4608 4612])
                            ("key" variable nil (reparse-symbol function_parameters) [4614 4617]))                          )
                        (reparse-symbol indented_block_body) [4596 4725])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4746 4750])
                            ("key" variable nil (reparse-symbol function_parameters) [4752 4755]))                          )
                        (reparse-symbol indented_block_body) [4729 4791])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4872 4876]))                          )
                        (reparse-symbol indented_block_body) [4858 4933])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4950 4954]))                          )
                        (reparse-symbol indented_block_body) [4937 4988])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5062 5066]))                          )
                        (reparse-symbol indented_block_body) [5047 5127])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5142 5146]))                          )
                        (reparse-symbol indented_block_body) [5131 5197])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5211 5215]))                          )
                        (reparse-symbol indented_block_body) [5201 5256])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5270 5274]))                          )
                        (reparse-symbol indented_block_body) [5260 5335])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5354 5358])
                            ("key" variable nil (reparse-symbol function_parameters) [5360 5363])
                            ("default" variable nil (reparse-symbol function_parameters) [5365 5372]))                          )
                        (reparse-symbol indented_block_body) [5339 5502])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5514 5518])
                            ("key" variable nil (reparse-symbol function_parameters) [5520 5523])
                            ("args" variable nil (reparse-symbol function_parameters) [5525 5530]))                          )
                        (reparse-symbol indented_block_body) [5506 5863])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5879 5883]))                          )
                        (reparse-symbol indented_block_body) [5867 6063])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6078 6082])
                            ("other" variable nil (reparse-symbol function_parameters) [6084 6089])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6096 6104]))                          )
                        (reparse-symbol indented_block_body) [6067 6594])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6606 6610])
                            ("key" variable nil (reparse-symbol function_parameters) [6612 6615])
                            ("default" variable nil (reparse-symbol function_parameters) [6617 6624]))                          )
                        (reparse-symbol indented_block_body) [6598 6726])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6743 6747]))                          )
                        (reparse-symbol indented_block_body) [6730 6794])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6810 6814])
                            ("other" variable nil (reparse-symbol function_parameters) [6816 6821]))                          )
                        (reparse-symbol indented_block_body) [6798 7006])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7022 7026]))                          )
                        (reparse-symbol indented_block_body) [7010 7061]))                  
                :type "class")
                nil [4036 7061]))          
      :file "UserDict.py"
      :pointmax 7061
      :fsize 7060
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cb9c"
      :major-mode python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1965])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1982 1986]))                          )
                        (reparse-symbol indented_block_body) [1970 2049])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2071 2075])
                            ("item" variable nil (reparse-symbol function_parameters) [2077 2081]))                          )
                        (reparse-symbol indented_block_body) [2054 2206])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2226 2230]))                          )
                        (reparse-symbol indented_block_body) [2211 2329])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2334 2349])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2363 2367])
                            ("item" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2355 2494])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2509 2513]))                          )
                        (reparse-symbol indented_block_body) [2499 2613])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2627 2631]))                          )
                        (reparse-symbol indented_block_body) [2618 2670])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2683 2687]))                          )
                        (reparse-symbol indented_block_body) [2675 3016])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3032 3036])
                            ("item" variable nil (reparse-symbol function_parameters) [3038 3042]))                          )
                        (reparse-symbol indented_block_body) [3021 3152])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3169 3173])
                            ("item" variable nil (reparse-symbol function_parameters) [3175 3179]))                          )
                        (reparse-symbol indented_block_body) [3157 3290])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3306 3310])
                            ("other" variable nil (reparse-symbol function_parameters) [3312 3317]))                          )
                        (reparse-symbol indented_block_body) [3295 3451])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3468 3472])
                            ("other" variable nil (reparse-symbol function_parameters) [3474 3479]))                          )
                        (reparse-symbol indented_block_body) [3456 3529])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3549 3553])
                            ("other" variable nil (reparse-symbol function_parameters) [3555 3560]))                          )
                        (reparse-symbol indented_block_body) [3534 3654])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3658 3678])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3706 3710])
                            ("other" variable nil (reparse-symbol function_parameters) [3712 3717]))                          )
                        (reparse-symbol indented_block_body) [3684 3749])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3766 3770])
                            ("other" variable nil (reparse-symbol function_parameters) [3772 3777]))                          )
                        (reparse-symbol indented_block_body) [3753 4010])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4032 4036])
                            ("other" variable nil (reparse-symbol function_parameters) [4038 4043]))                          )
                        (reparse-symbol indented_block_body) [4015 4116])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4120 4142])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4172 4176])
                            ("other" variable nil (reparse-symbol function_parameters) [4178 4183]))                          )
                        (reparse-symbol indented_block_body) [4148 4215])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4232 4236])
                            ("other" variable nil (reparse-symbol function_parameters) [4238 4243]))                          )
                        (reparse-symbol indented_block_body) [4219 4404])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4422 4426])
                            ("other" variable nil (reparse-symbol function_parameters) [4428 4433]))                          )
                        (reparse-symbol indented_block_body) [4409 4499])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4503 4520])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4537 4541])
                            ("other" variable nil (reparse-symbol function_parameters) [4543 4548]))                          )
                        (reparse-symbol indented_block_body) [4526 4611])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4631 4635])
                            ("other" variable nil (reparse-symbol function_parameters) [4637 4642]))                          )
                        (reparse-symbol indented_block_body) [4616 4710])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4714 4733])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4750 4754])
                            ("other" variable nil (reparse-symbol function_parameters) [4756 4761]))                          )
                        (reparse-symbol indented_block_body) [4739 4824])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4840 4844])
                            ("other" variable nil (reparse-symbol function_parameters) [4846 4851]))                          )
                        (reparse-symbol indented_block_body) [4829 4999])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5015 5019])
                            ("other" variable nil (reparse-symbol function_parameters) [5021 5026]))                          )
                        (reparse-symbol indented_block_body) [5004 5168])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5198 5202])
                            ("other" variable nil (reparse-symbol function_parameters) [5204 5209]))                          )
                        (reparse-symbol indented_block_body) [5173 5313])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5317 5347])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5385 5389])
                            ("other" variable nil (reparse-symbol function_parameters) [5391 5396]))                          )
                        (reparse-symbol indented_block_body) [5353 5428])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5445 5449])
                            ("other" variable nil (reparse-symbol function_parameters) [5451 5456]))                          )
                        (reparse-symbol indented_block_body) [5432 5713])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5728 5732])
                            ("other" variable nil (reparse-symbol function_parameters) [5734 5739]))                          )
                        (reparse-symbol indented_block_body) [5718 5809])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5813 5827])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5848 5852])
                            ("other" variable nil (reparse-symbol function_parameters) [5854 5859]))                          )
                        (reparse-symbol indented_block_body) [5833 5912]))                  
                :type "class")
                nil [933 5912]))          
      :file "_weakrefset.py"
      :pointmax 5912
      :fsize 5911
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cbbc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
atexit.py - allow programmer to define multiple exit functions to be executed
upon normal program termination.

One public function, register, is defined.
\"\"\"" code nil nil [1 163])
            ("__all__" variable nil nil [165 187])
            ("sys" include nil nil [189 199])
            ("_exithandlers" variable nil nil [201 219])
            ("_run_exitfuncs" function (:documentation "run any registered exit functions

    _exithandlers is traversed in reverse order so functions are executed
    last in, first out.
    ") nil [220 863])
            ("register" function
               (:documentation "register a function to be executed upon normal program termination

    func - function to be called at exit
    targs - optional arguments to pass to func
    kargs - optional keyword arguments to pass to func

    func is returned to facilitate usage as a decorator.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [878 882])
                    ("targs" variable nil (reparse-symbol function_parameters) [884 890])
                    ("kargs" variable nil (reparse-symbol function_parameters) [892 899]))                  )
                nil [865 1249])
            ("if" code nil nil [1250 1381])
            ("sys" variable nil nil [1381 1410])
            ("if" code nil nil [1412 1706]))          
      :file "atexit.py"
      :pointmax 1706
      :fsize 1705
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cbdc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [249 286])
            ("sys" include nil nil [288 304])
            ("_sre" include nil nil [288 304])
            ("sre_parse" include nil nil [305 321])
            ("sre_constants" include nil nil [322 349])
            ("assert" code nil nil [351 400])
            ("if" code nil nil [402 477])
            ("_LITERAL_CODES" variable nil nil [478 522])
            ("_REPEATING_CODES" variable nil nil [523 579])
            ("_SUCCESS_CODES" variable nil nil [580 620])
            ("_ASSERT_CODES" variable nil nil [621 662])
            ("_equivalences" variable nil nil [726 1816])
            ("_ignorecase_fixes" variable nil nil [1894 2003])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [2018 2022])
                ("pattern" variable nil (reparse-symbol function_parameters) [2024 2031])
                ("flags" variable nil (reparse-symbol function_parameters) [2033 2038]))              ) nil [2005 8018])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8040 8047])
                ("flags" variable nil (reparse-symbol function_parameters) [8049 8054])
                ("code" variable nil (reparse-symbol function_parameters) [8056 8060])
                ("fixup" variable nil (reparse-symbol function_parameters) [8062 8067])
                ("fixes" variable nil (reparse-symbol function_parameters) [8074 8079]))              ) nil [8019 8929])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8952 8959])
                ("fixup" variable nil (reparse-symbol function_parameters) [8961 8966])
                ("fixes" variable nil (reparse-symbol function_parameters) [8968 8973])
                ("isunicode" variable nil (reparse-symbol function_parameters) [8975 8984]))              ) nil [8930 13942])
            ("_fixup_range" function (:arguments 
              ( ("lo" variable nil (reparse-symbol function_parameters) [13960 13962])
                ("hi" variable nil (reparse-symbol function_parameters) [13964 13966])
                ("ranges" variable nil (reparse-symbol function_parameters) [13968 13974])
                ("fixup" variable nil (reparse-symbol function_parameters) [13976 13981]))              ) nil [13943 14467])
            ("_CODEBITS" code nil nil [14468 14497])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [14545 14549])
                ("_CODEBITS" variable nil (reparse-symbol function_parameters) [14551 14560])
                ("_int" variable nil (reparse-symbol function_parameters) [14572 14576]))              ) nil [14530 14724])
            ("_bytes_to_codes" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [14745 14746]))              ) nil [14725 15021])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [15034 15036]))              ) nil [15022 15165])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [15184 15188])
                ("pattern" variable nil (reparse-symbol function_parameters) [15190 15197])
                ("flags" variable nil (reparse-symbol function_parameters) [15199 15204]))              ) nil [15166 18570])
            ("try" code nil nil [18571 18692])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [18706 18709]))              ) nil [18693 18806])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [18817 18818])
                ("flags" variable nil (reparse-symbol function_parameters) [18820 18825]))              ) nil [18807 19052])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [19065 19066])
                ("flags" variable nil (reparse-symbol function_parameters) [19068 19073]))              ) nil [19053 19797]))          
      :file "sre_compile.py"
      :pointmax 19797
      :fsize 19823
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cbfc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("ASCIILETTERS" variable nil nil [539 613])
            ("WHITESPACE" variable nil nil [615 646])
            ("ESCAPES" variable nil nil [648 924])
            ("CATEGORIES" variable nil nil [926 1402])
            ("FLAGS" variable nil nil [1404 1646])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1758 1772])
                            ("self" variable nil (reparse-symbol indented_block_body) [1781 1795])
                            ("self" variable nil (reparse-symbol indented_block_body) [1804 1819])
                            ("self" variable nil (reparse-symbol indented_block_body) [1828 1847])
                            ("self" variable nil (reparse-symbol indented_block_body) [1856 1875]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1743 1747]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1730 1876])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1895 1899])
                            ("name" variable nil (reparse-symbol function_parameters) [1901 1905]))                          )
                        (reparse-symbol indented_block_body) [1881 2318])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2337 2341])
                            ("gid" variable nil (reparse-symbol function_parameters) [2343 2346]))                          )
                        (reparse-symbol indented_block_body) [2322 2379])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2398 2402])
                            ("gid" variable nil (reparse-symbol function_parameters) [2404 2407]))                          )
                        (reparse-symbol indented_block_body) [2383 2468]))                  
                :type "class")
                nil [1648 2468])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2580 2602])
                            ("if" code nil (reparse-symbol indented_block_body) [2611 2650])
                            ("self" variable nil (reparse-symbol indented_block_body) [2658 2674])
                            ("self" variable nil (reparse-symbol indented_block_body) [2683 2700]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2545 2549])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2551 2558])
                            ("data" variable nil (reparse-symbol function_parameters) [2560 2564]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2532 2701])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2714 2718])
                            ("level" variable nil (reparse-symbol function_parameters) [2720 2725]))                          )
                        (reparse-symbol indented_block_body) [2705 3954])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3971 3975]))                          )
                        (reparse-symbol indented_block_body) [3958 4009])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4025 4029]))                          )
                        (reparse-symbol indented_block_body) [4013 4062])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4082 4086])
                            ("index" variable nil (reparse-symbol function_parameters) [4088 4093]))                          )
                        (reparse-symbol indented_block_body) [4066 4125])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4145 4149])
                            ("index" variable nil (reparse-symbol function_parameters) [4151 4156]))                          )
                        (reparse-symbol indented_block_body) [4129 4290])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4310 4314])
                            ("index" variable nil (reparse-symbol function_parameters) [4316 4321])
                            ("code" variable nil (reparse-symbol function_parameters) [4323 4327]))                          )
                        (reparse-symbol indented_block_body) [4294 4362])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4377 4381])
                            ("index" variable nil (reparse-symbol function_parameters) [4383 4388])
                            ("code" variable nil (reparse-symbol function_parameters) [4390 4394]))                          )
                        (reparse-symbol indented_block_body) [4366 4435])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4450 4454])
                            ("code" variable nil (reparse-symbol function_parameters) [4456 4460]))                          )
                        (reparse-symbol indented_block_body) [4439 4494])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4511 4515]))                          )
                        (reparse-symbol indented_block_body) [4498 5719]))                  
                :type "class")
                nil [2469 5719])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5777 5797])
                            ("self" variable nil (reparse-symbol indented_block_body) [5806 5820])
                            ("self" code nil (reparse-symbol indented_block_body) [5829 5842]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5754 5758])
                            ("string" variable nil (reparse-symbol function_parameters) [5760 5766]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5741 5843])
                    ("raise" code nil (reparse-symbol indented_block_body) [8625 8671]))                  
                :type "class")
                nil [5720 8672])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [8685 8691])
                ("escape" variable nil (reparse-symbol function_parameters) [8693 8699])
                ("state" variable nil (reparse-symbol function_parameters) [8701 8706])
                ("nested" variable nil (reparse-symbol function_parameters) [8708 8714]))              ) nil [8673 11158])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11174 11180])
                ("state" variable nil (reparse-symbol function_parameters) [11182 11187])
                ("nested" variable nil (reparse-symbol function_parameters) [11189 11195]))              ) nil [11159 12794])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [12815 12821])
                ("state" variable nil (reparse-symbol function_parameters) [12823 12828])
                ("condgroup" variable nil (reparse-symbol function_parameters) [12830 12839])
                ("nested" variable nil (reparse-symbol function_parameters) [12841 12847]))              ) nil [12795 13345])
            ("_PATTERNENDERS" variable nil nil [13346 13372])
            ("_ASSERTCHARS" variable nil nil [13373 13398])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [13399 13433])
            ("_REPEATCODES" variable nil nil [13434 13478])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [13491 13497])
                ("state" variable nil (reparse-symbol function_parameters) [13499 13504])
                ("nested" variable nil (reparse-symbol function_parameters) [13506 13512]))              ) nil [13480 30295])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [30316 30324])
                ("match" variable nil (reparse-symbol function_parameters) [30326 30331]))              ) nil [30296 30701]))          
      :file "sre_parse.py"
      :pointmax 30701
      :fsize 30700
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((ASSIGN 30008 . 30009) (INDENT_BLOCK 8608 . 8621) (NEWLINE 8607 . 8608) (COLON 8606 . 8607)))
    (semanticdb-table "semanticdb-table-195cf3c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [4904 4909])
                        ("kws" variable nil (reparse-symbol function_parameters) [4911 4916]))                      ) (reparse-symbol indented_block_body) [4889 6150])
                    ("safe_substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [6175 6180])
                        ("kws" variable nil (reparse-symbol function_parameters) [6182 6187]))                      ) (reparse-symbol indented_block_body) [6155 7444]))                  
                :type "class")
                nil [4188 7444])
            ("index_error" variable nil nil [7675 7699])
            ("atoi_error" variable nil nil [7700 7723])
            ("atof_error" variable nil nil [7724 7747])
            ("atol_error" variable nil nil [7748 7771])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7826 7827]))                  )
                nil [7816 7945])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7999 8000]))                  )
                nil [7989 8118])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8173 8174]))                  )
                nil [8160 8344])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8400 8401])
                    ("chars" variable nil (reparse-symbol function_parameters) [8403 8408]))                  )
                nil [8390 8717])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8761 8762])
                    ("chars" variable nil (reparse-symbol function_parameters) [8764 8769]))                  )
                nil [8750 8989])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9034 9035])
                    ("chars" variable nil (reparse-symbol function_parameters) [9037 9042]))                  )
                nil [9023 9263])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9333 9334])
                    ("sep" variable nil (reparse-symbol function_parameters) [9336 9339])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9346 9354]))                  )
                nil [9323 9775])
            ("splitfields" variable nil nil [9775 9794])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9865 9866])
                    ("sep" variable nil (reparse-symbol function_parameters) [9868 9871])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9878 9886]))                  )
                nil [9854 10281])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10329 10334])
                    ("sep" variable nil (reparse-symbol function_parameters) [10336 10339]))                  )
                nil [10320 10600])
            ("joinfields" variable nil nil [10600 10617])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10676 10677])
                    ("args" variable nil (reparse-symbol function_parameters) [10679 10684]))                  )
                nil [10666 10836])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10900 10901])
                    ("args" variable nil (reparse-symbol function_parameters) [10903 10908]))                  )
                nil [10889 11063])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11123 11124])
                    ("args" variable nil (reparse-symbol function_parameters) [11126 11131]))                  )
                nil [11113 11371])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11422 11423])
                    ("args" variable nil (reparse-symbol function_parameters) [11425 11430]))                  )
                nil [11413 11728])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11785 11786])
                    ("args" variable nil (reparse-symbol function_parameters) [11788 11793]))                  )
                nil [11775 12095])
            ("_float" variable nil nil [12117 12131])
            ("_int" variable nil nil [12132 12142])
            ("_long" variable nil nil [12143 12155])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12192 12193]))                  )
                nil [12183 12317])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12356 12357])
                    ("base" variable nil (reparse-symbol function_parameters) [12360 12364]))                  )
                nil [12347 12777])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12821 12822])
                    ("base" variable nil (reparse-symbol function_parameters) [12824 12828]))                  )
                nil [12812 13306])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13342 13343])
                    ("width" variable nil (reparse-symbol function_parameters) [13345 13350])
                    ("args" variable nil (reparse-symbol function_parameters) [13352 13357]))                  )
                nil [13332 13649])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13685 13686])
                    ("width" variable nil (reparse-symbol function_parameters) [13688 13693])
                    ("args" variable nil (reparse-symbol function_parameters) [13695 13700]))                  )
                nil [13675 13993])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14023 14024])
                    ("width" variable nil (reparse-symbol function_parameters) [14026 14031])
                    ("args" variable nil (reparse-symbol function_parameters) [14033 14038]))                  )
                nil [14012 14324])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14536 14537])
                    ("width" variable nil (reparse-symbol function_parameters) [14539 14544]))                  )
                nil [14526 14803])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14918 14919])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14921 14928]))                  )
                nil [14903 15192])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15254 15255])
                    ("table" variable nil (reparse-symbol function_parameters) [15257 15262])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15264 15273]))                  )
                nil [15240 16003])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16073 16074]))                  )
                nil [16058 16225])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16271 16272])
                    ("old" variable nil (reparse-symbol function_parameters) [16274 16277])
                    ("new" variable nil (reparse-symbol function_parameters) [16279 16282])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16284 16294]))                  )
                nil [16259 16601])
            ("try" code nil nil [16843 17048])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [17494 17499])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [17501 17509]))                      ) (reparse-symbol indented_block_body) [17483 18182])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18199 18203])
                            ("format_string" variable nil (reparse-symbol function_parameters) [18205 18218])
                            ("args" variable nil (reparse-symbol function_parameters) [18220 18224])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18226 18232]))                          )
                        (reparse-symbol indented_block_body) [18187 18413])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18431 18435])
                            ("format_string" variable nil (reparse-symbol function_parameters) [18437 18450])
                            ("args" variable nil (reparse-symbol function_parameters) [18452 18456])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18458 18464])
                            ("used_args" variable nil (reparse-symbol function_parameters) [18466 18475])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [18477 18492]))                          )
                        (reparse-symbol indented_block_body) [18418 19722])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19742 19746])
                            ("key" variable nil (reparse-symbol function_parameters) [19748 19751])
                            ("args" variable nil (reparse-symbol function_parameters) [19753 19757])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19759 19765]))                          )
                        (reparse-symbol indented_block_body) [19728 19883])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19911 19915])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19917 19926])
                            ("args" variable nil (reparse-symbol function_parameters) [19928 19932])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19934 19940]))                          )
                        (reparse-symbol indented_block_body) [19889 19956])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19979 19983])
                            ("value" variable nil (reparse-symbol function_parameters) [19985 19990])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19992 20003]))                          )
                        (reparse-symbol indented_block_body) [19962 20048])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20072 20076])
                            ("value" variable nil (reparse-symbol function_parameters) [20078 20083])
                            ("conversion" variable nil (reparse-symbol function_parameters) [20085 20095]))                          )
                        (reparse-symbol indented_block_body) [20054 20413])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20788 20792])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20794 20807]))                          )
                        (reparse-symbol indented_block_body) [20778 20859])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21136 21140])
                            ("field_name" variable nil (reparse-symbol function_parameters) [21142 21152])
                            ("args" variable nil (reparse-symbol function_parameters) [21154 21158])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21160 21166]))                          )
                        (reparse-symbol indented_block_body) [21122 21549]))                  
                :type "class")
                nil [17454 21549]))          
      :file "string.py"
      :pointmax 21549
      :fsize 21548
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cf5c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Disassembler of Python byte code into mnemonics.\"\"\"" code nil nil [1 55])
            ("sys" include nil nil [57 67])
            ("types" include nil nil [68 80])
            ("opcode" include nil nil [82 102])
            ("opcode" include nil nil [103 145])
            ("__all__" code nil nil [147 255])
            ("del" code nil nil [256 272])
            ("_have_code" variable nil nil [274 378])
            ("dis" function
               (:documentation "Disassemble classes, methods, functions, or code.

    With no argument, disassemble the last traceback.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [388 389]))                  )
                nil [380 1345])
            ("distb" function
               (:documentation "Disassemble a traceback (default: last traceback)."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1356 1358]))                  )
                nil [1346 1684])
            ("disassemble" function
               (:documentation "Disassemble a code object."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [1701 1703])
                    ("lasti" variable nil (reparse-symbol function_parameters) [1705 1710]))                  )
                nil [1685 3223])
            ("disassemble_string" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [3247 3251])
                ("lasti" variable nil (reparse-symbol function_parameters) [3253 3258])
                ("varnames" variable nil (reparse-symbol function_parameters) [3263 3271])
                ("names" variable nil (reparse-symbol function_parameters) [3278 3283])
                ("constants" variable nil (reparse-symbol function_parameters) [3313 3322]))              ) nil [3224 4534])
            ("disco" variable nil nil [4535 4554])
            ("findlabels" function
               (:documentation "Detect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [4625 4629]))                  )
                nil [4610 5235])
            ("findlinestarts" function
               (:documentation "Find the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [5255 5259]))                  )
                nil [5236 5931])
            ("_test" function (:documentation "Simple test program to disassemble a file.") nil [5932 6460])
            ("if" code nil nil [6461 6500]))          
      :file "dis.py"
      :pointmax 6500
      :fsize 6499
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cf7c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Tokenization help for Python programs.

generate_tokens(readline) is a generator that breaks a stream of
text into Python tokens.  It accepts a readline-like method which is called
repeatedly to get the next line of input (or \"\" for EOF).  It generates
5-tuples with these members:

    the token type (see token.py)
    the token (a string)
    the starting (row, column) indices of the token (a 2-tuple of ints)
    the ending (row, column) indices of the token (a 2-tuple of ints)
    the original line (string)

It is designed to match the working of the Python tokenizer exactly, except
that it produces COMMENT tokens for comments and gives type OP for all
operators

Older entry points
    tokenize_loop(readline, tokeneater)
    tokenize(readline, tokeneater=printtoken)
are the same, except instead of generating tokens, tokeneater is a callback
function to which the 5 fields described above are passed as 5 arguments,
each time a new token is found.\"\"\"" code nil nil [1 967])
            ("__author__" variable nil nil [969 1010])
            ("__credits__" variable nil nil [1011 1130])
            ("itertools" include nil nil [1132 1159])
            ("re" include nil nil [1160 1177])
            ("string" include nil nil [1160 1177])
            ("token" include nil nil [1178 1197])
            ("token" include nil nil [1199 1211])
            ("__all__" variable nil nil [1212 1270])
            ("__all__" variable nil nil [1271 1344])
            ("del" code nil nil [1345 1350])
            ("del" code nil nil [1351 1360])
            ("COMMENT" variable nil nil [1362 1380])
            ("tok_name" variable nil nil [1381 1410])
            ("NL" code nil nil [1411 1428])
            ("tok_name" variable nil nil [1429 1448])
            ("N_TOKENS" variable nil nil [1449 1462])
            ("group" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [1474 1482]))              ) nil [1464 1522])
            ("any" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [1530 1538]))              ) nil [1522 1570])
            ("maybe" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [1580 1588]))              ) nil [1570 1620])
            ("Whitespace" variable nil nil [1621 1645])
            ("Comment" variable nil nil [1646 1668])
            ("Ignore" code nil nil [1669 1736])
            ("Name" variable nil nil [1737 1759])
            ("Hexnumber" variable nil nil [1761 1797])
            ("Octnumber" variable nil nil [1798 1841])
            ("Binnumber" variable nil nil [1842 1872])
            ("Decnumber" variable nil nil [1873 1901])
            ("Intnumber" variable nil nil [1902 1963])
            ("Exponent" variable nil nil [1964 1990])
            ("Pointfloat" code nil nil [1991 2050])
            ("Expfloat" code nil nil [2051 2079])
            ("Floatnumber" variable nil nil [2080 2121])
            ("Imagnumber" variable nil nil [2122 2175])
            ("Number" variable nil nil [2176 2226])
            ("Single" variable nil nil [2252 2287])
            ("Double" variable nil nil [2312 2347])
            ("Single3" variable nil nil [2374 2424])
            ("Double3" variable nil nil [2451 2501])
            ("Triple" variable nil nil [2502 2554])
            ("String" variable nil nil [2584 2703])
            ("Operator" variable nil nil [2880 3026])
            ("Bracket" variable nil nil [3028 3048])
            ("Special" variable nil nil [3049 3087])
            ("Funny" variable nil nil [3088 3129])
            ("PlainToken" variable nil nil [3131 3178])
            ("Token" code nil nil [3179 3206])
            ("ContStr" variable nil nil [3249 3450])
            ("PseudoExtras" variable nil nil [3451 3503])
            ("PseudoToken" code nil nil [3504 3580])
            ("tokenprog, pseudoprog, single3prog, double3prog" code nil nil [3582 3692])
            ("endprogs" variable nil nil [3693 4668])
            ("triple_quoted" variable nil nil [4670 4688])
            ("for" code nil nil [4689 5049])
            ("single_quoted" variable nil nil [5049 5067])
            ("for" code nil nil [5068 5369])
            ("tabsize" variable nil nil [5370 5381])
            ("TokenError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [5383 5417])
            ("StopTokenizing" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [5418 5456])
            ("printtoken" function (:arguments 
              ( ("type" variable nil (reparse-symbol function_parameters) [5472 5476])
                ("token" variable nil (reparse-symbol function_parameters) [5478 5483])
                ("srow_scol" variable nil (reparse-symbol function_parameters) [5485 5494])
                ("erow_ecol" variable nil (reparse-symbol function_parameters) [5496 5505])
                ("line" variable nil (reparse-symbol function_parameters) [5507 5511]))              ) nil [5457 5681])
            ("tokenize" function
               (:documentation "
    The tokenize() function accepts two parameters: one representing the
    input stream, and one providing an output mechanism for tokenize().

    The first parameter, readline, must be a callable object which provides
    the same interface as the readline() method of built-in file objects.
    Each call to the function should return one line of input as a string.

    The second parameter, tokeneater, must also be a callable object. It is
    called once for each token, with five arguments, corresponding to the
    tuples generated by generate_tokens().
    "
                :arguments 
                  ( ("readline" variable nil (reparse-symbol function_parameters) [5695 5703])
                    ("tokeneater" variable nil (reparse-symbol function_parameters) [5705 5715]))                  )
                nil [5682 6403])
            ("tokenize_loop" function (:arguments 
              ( ("readline" variable nil (reparse-symbol function_parameters) [6455 6463])
                ("tokeneater" variable nil (reparse-symbol function_parameters) [6465 6475]))              ) nil [6437 6559])
            ("Untokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6612 6628])
                            ("self" variable nil (reparse-symbol indented_block_body) [6637 6654])
                            ("self" variable nil (reparse-symbol indented_block_body) [6663 6680]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6597 6601]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6584 6681])
                    ("add_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6705 6709])
                            ("start" variable nil (reparse-symbol function_parameters) [6711 6716]))                          )
                        (reparse-symbol indented_block_body) [6686 7236])
                    ("untokenize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7256 7260])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7262 7270]))                          )
                        (reparse-symbol indented_block_body) [7241 8403])
                    ("compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8419 8423])
                            ("token" variable nil (reparse-symbol function_parameters) [8425 8430])
                            ("iterable" variable nil (reparse-symbol function_parameters) [8432 8440]))                          )
                        (reparse-symbol indented_block_body) [8408 9398]))                  
                :type "class")
                nil [6560 9398])
            ("untokenize" function
               (:documentation "Transform tokens back into Python source code.

    Each element returned by the iterable must be a token sequence
    with at least two elements, a token number and token value.  If
    only two tokens are passed, the resulting output is poor.

    Round-trip invariant for full input:
        Untokenized source will match input source exactly

    Round-trip invariant for limited intput:
        # Output text will tokenize the back to the input
        t1 = [tok[:2] for tok in generate_tokens(f.readline)]
        newcode = untokenize(t1)
        readline = iter(newcode.splitlines(1)).next
        t2 = [tok[:2] for tok in generate_tokens(readline)]
        assert t1 == t2
    "
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [9414 9422]))                  )
                nil [9399 10179])
            ("generate_tokens" function
               (:documentation "
    The generate_tokens() generator requires one argument, readline, which
    must be a callable object which provides the same interface as the
    readline() method of built-in file objects. Each call to the function
    should return one line of input as a string.  Alternately, readline
    can be a callable function terminating with StopIteration:
        readline = open(myfile).next    # Example of alternate readline

    The generator produces 5-tuples with these members: the token type; the
    token string; a 2-tuple (srow, scol) of ints specifying the row and
    column where the token begins in the source; a 2-tuple (erow, ecol) of
    ints specifying the row and column where the token ends in the source;
    and the line on which the token was found. The line passed is the
    logical line; continuation lines are included.
    "
                :arguments 
                  ( ("readline" variable nil (reparse-symbol function_parameters) [10200 10208]))                  )
                nil [10180 17484]))          
      :file "tokenize.py"
      :pointmax 17484
      :fsize 17483
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cf9c"
      :major-mode python-mode
      :tags 
        '( ("'''This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values

'''" code nil nil [1 536])
            ("__all__" variable nil nil [538 612])
            ("_abcoll" include nil nil [761 782])
            ("_abcoll" include nil nil [783 797])
            ("__all__" variable nil nil [798 824])
            ("_collections" include nil nil [826 869])
            ("operator" include nil nil [870 927])
            ("keyword" include nil nil [928 971])
            ("sys" include nil nil [972 990])
            ("heapq" include nil nil [991 1013])
            ("itertools" include nil nil [1014 1091])
            ("itertools" include nil nil [1092 1127])
            ("try" code nil nil [1129 1254])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [1464 1507])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [2110 2313])
                            ("if" code nil (reparse-symbol indented_block_body) [2322 2461])
                            ("self" variable nil (reparse-symbol indented_block_body) [2469 2483])
                            ("args" variable nil (reparse-symbol indented_block_body) [2492 2507])
                            ("if" code nil (reparse-symbol indented_block_body) [2516 2614])
                            ("try" code nil (reparse-symbol indented_block_body) [2622 2823])
                            ("self" code nil (reparse-symbol indented_block_body) [2831 2859]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [2086 2091])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2093 2099]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2073 2860])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2881 2885])
                            ("key" variable nil (reparse-symbol function_parameters) [2887 2890])
                            ("value" variable nil (reparse-symbol function_parameters) [2892 2897])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2899 2911]))                          )
                        (reparse-symbol indented_block_body) [2865 3333])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3354 3358])
                            ("key" variable nil (reparse-symbol function_parameters) [3360 3363])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [3365 3377]))                          )
                        (reparse-symbol indented_block_body) [3338 3848])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3866 3870]))                          )
                        (reparse-symbol indented_block_body) [3853 4251])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4273 4277]))                          )
                        (reparse-symbol indented_block_body) [4256 4677])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4692 4696]))                          )
                        (reparse-symbol indented_block_body) [4682 4872])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4961 4965]))                          )
                        (reparse-symbol indented_block_body) [4952 5036])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5052 5056]))                          )
                        (reparse-symbol indented_block_body) [5041 5148])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5163 5167]))                          )
                        (reparse-symbol indented_block_body) [5153 5277])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5295 5299]))                          )
                        (reparse-symbol indented_block_body) [5282 5387])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5407 5411]))                          )
                        (reparse-symbol indented_block_body) [5392 5524])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5543 5547]))                          )
                        (reparse-symbol indented_block_body) [5529 5676])
                    ("update" variable nil (reparse-symbol indented_block_body) [5681 5711])
                    ("__update" variable nil (reparse-symbol indented_block_body) [5717 5734])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [5799 5818])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5832 5836])
                            ("key" variable nil (reparse-symbol function_parameters) [5838 5841])
                            ("default" variable nil (reparse-symbol function_parameters) [5843 5850]))                          )
                        (reparse-symbol indented_block_body) [5824 6254])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6274 6278])
                            ("key" variable nil (reparse-symbol function_parameters) [6280 6283])
                            ("default" variable nil (reparse-symbol function_parameters) [6285 6292]))                          )
                        (reparse-symbol indented_block_body) [6259 6483])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6500 6504])
                            ("last" variable nil (reparse-symbol function_parameters) [6506 6510]))                          )
                        (reparse-symbol indented_block_body) [6488 6872])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6890 6894])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [6896 6909]))                          )
                        (reparse-symbol indented_block_body) [6877 7318])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7338 7342]))                          )
                        (reparse-symbol indented_block_body) [7323 7668])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7682 7686]))                          )
                        (reparse-symbol indented_block_body) [7673 7769])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7804 7807])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7809 7817])
                            ("value" variable nil (reparse-symbol function_parameters) [7819 7824]))                          )
                        (reparse-symbol indented_block_body) [7774 8074])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8090 8094])
                            ("other" variable nil (reparse-symbol function_parameters) [8096 8101]))                          )
                        (reparse-symbol indented_block_body) [8079 8426])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8442 8446])
                            ("other" variable nil (reparse-symbol function_parameters) [8448 8453]))                          )
                        (reparse-symbol indented_block_body) [8431 8523])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8618 8622]))                          )
                        (reparse-symbol indented_block_body) [8605 8730])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8750 8754]))                          )
                        (reparse-symbol indented_block_body) [8735 8860])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8879 8883]))                          )
                        (reparse-symbol indented_block_body) [8865 8994]))                  
                :type "class")
                nil [1435 8994])
            ("_class_template" variable nil nil [9174 10622])
            ("_repr_template" variable nil nil [10624 10652])
            ("_field_template" variable nil nil [10654 10767])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [10784 10792])
                    ("field_names" variable nil (reparse-symbol function_parameters) [10794 10805])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10807 10814])
                    ("rename" variable nil (reparse-symbol function_parameters) [10822 10828]))                  )
                nil [10769 14954])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [15141 16842])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [17213 17740])
                            ("if" code nil (reparse-symbol indented_block_body) [17749 17884])
                            ("self" variable nil (reparse-symbol indented_block_body) [17892 17906])
                            ("args" variable nil (reparse-symbol indented_block_body) [17915 17930])
                            ("if" code nil (reparse-symbol indented_block_body) [17939 18037])
                            ("super" code nil (reparse-symbol indented_block_body) [18045 18076])
                            ("self" code nil (reparse-symbol indented_block_body) [18085 18111]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [17189 17194])
                            ("kwds" variable nil (reparse-symbol function_parameters) [17196 17202]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17176 18112])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18133 18137])
                            ("key" variable nil (reparse-symbol function_parameters) [18139 18142]))                          )
                        (reparse-symbol indented_block_body) [18117 18290])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18311 18315])
                            ("n" variable nil (reparse-symbol function_parameters) [18317 18318]))                          )
                        (reparse-symbol indented_block_body) [18295 18804])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18822 18826]))                          )
                        (reparse-symbol indented_block_body) [18809 19627])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19707 19710])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19712 19720])
                            ("v" variable nil (reparse-symbol function_parameters) [19722 19723]))                          )
                        (reparse-symbol indented_block_body) [19677 19986])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [20002 20007])
                        ("kwds" variable nil (reparse-symbol function_parameters) [20009 20015]))                      ) (reparse-symbol indented_block_body) [19991 21857])
                    ("subtract" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [21875 21880])
                        ("kwds" variable nil (reparse-symbol function_parameters) [21882 21888]))                      ) (reparse-symbol indented_block_body) [21862 23325])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23339 23343]))                          )
                        (reparse-symbol indented_block_body) [23330 23415])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23435 23439]))                          )
                        (reparse-symbol indented_block_body) [23420 23487])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23508 23512])
                            ("elem" variable nil (reparse-symbol function_parameters) [23514 23518]))                          )
                        (reparse-symbol indented_block_body) [23492 23679])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23697 23701]))                          )
                        (reparse-symbol indented_block_body) [23684 23907])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24264 24268])
                            ("other" variable nil (reparse-symbol function_parameters) [24270 24275]))                          )
                        (reparse-symbol indented_block_body) [24252 24825])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24842 24846])
                            ("other" variable nil (reparse-symbol function_parameters) [24848 24853]))                          )
                        (reparse-symbol indented_block_body) [24830 25432])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25448 25452])
                            ("other" variable nil (reparse-symbol function_parameters) [25454 25459]))                          )
                        (reparse-symbol indented_block_body) [25437 26106])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26123 26127])
                            ("other" variable nil (reparse-symbol function_parameters) [26129 26134]))                          )
                        (reparse-symbol indented_block_body) [26111 26630]))                  
                :type "class")
                nil [15116 26630])
            ("if" code nil nil [26632 27799]))          
      :file "collections.py"
      :pointmax 27799
      :fsize 27798
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((NAME 27257 . 27267) (PAREN_BLOCK 27267 . 27283) (NAME 26915 . 26925) (PAREN_BLOCK 26925 . 26941) (NAME 26482 . 26490) (IF 26499 . 26501) (ELSE 26522 . 26526) (NAME 25832 . 25840) (IF 25855 . 25857) (ELSE 25878 . 25882) (NAME 22905 . 22913) (IF 22924 . 22926) (ELSE 22932 . 22936) (NAME 21244 . 21252) (IF 21263 . 21265) (ELSE 21271 . 21275) (INDENT_BLOCK 14392 . 14456) (NEWLINE 14391 . 14392) (COLON 14390 . 14391) (TRY 14315 . 14318) (AS 14386 . 14388)))
    (semanticdb-table "semanticdb-table-195cfbc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("sys" include nil nil [68 86])
            ("try" code nil nil [88 172])
            ("warnings" include nil nil [173 188])
            ("collections" include nil nil [190 229])
            ("itertools" include nil nil [230 267])
            ("time" include nil nil [268 315])
            ("traceback" include nil nil [316 363])
            ("__all__" variable nil nil [944 1206])
            ("_start_new_thread" variable nil nil [1208 1251])
            ("_allocate_lock" variable nil nil [1252 1289])
            ("_get_ident" variable nil nil [1290 1319])
            ("ThreadError" variable nil nil [1320 1346])
            ("del" code nil nil [1347 1357])
            ("warnings" code nil nil [1472 1603])
            ("_VERBOSE" variable nil nil [1886 1902])
            ("if" code nil nil [1904 2827])
            ("_profile_hook" variable nil nil [2867 2887])
            ("_trace_hook" variable nil nil [2888 2906])
            ("setprofile" function
               (:documentation "Set a profile function for all threads started from the threading module.

    The func will be passed to sys.setprofile() for each thread, before its
    run() method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [2923 2927]))                  )
                nil [2908 3175])
            ("settrace" function
               (:documentation "Set a trace function for all threads started from the threading module.

    The func will be passed to sys.settrace() for each thread, before its run()
    method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [3189 3193]))                  )
                nil [3176 3433])
            ("Lock" variable nil nil [3461 3482])
            ("RLock" function
               (:documentation "Factory function that returns a new reentrant lock.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it again
    without blocking; the thread must release it once for each time it has
    acquired it.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [3494 3499])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [3501 3509]))                  )
                nil [3484 3864])
            ("_RLock" type
               (:documentation "A reentrant lock must be released by the thread that acquired it. Once a
       thread has acquired a reentrant lock, the same thread may acquire it
       again without blocking; the thread must release it once for each time it
       has acquired it.
    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [4204 4236])
                            ("self" variable nil (reparse-symbol indented_block_body) [4245 4276])
                            ("self" variable nil (reparse-symbol indented_block_body) [4285 4304])
                            ("self" variable nil (reparse-symbol indented_block_body) [4313 4329]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4175 4179])
                            ("verbose" variable nil (reparse-symbol function_parameters) [4181 4188]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4162 4330])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4348 4352]))                          )
                        (reparse-symbol indented_block_body) [4335 4585])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4602 4606])
                            ("blocking" variable nil (reparse-symbol function_parameters) [4608 4616]))                          
                        :documentation "Acquire a lock, blocking or non-blocking.

        When invoked without arguments: if this thread already owns the lock,
        increment the recursion level by one, and return immediately. Otherwise,
        if another thread owns the lock, block until the lock is unlocked. Once
        the lock is unlocked (not owned by any thread), then grab ownership, set
        the recursion level to one, and return. If more than one thread is
        blocked waiting until the lock is unlocked, only one at a time will be
        able to grab ownership of the lock. There is no return value in this
        case.

        When invoked with the blocking argument set to true, do the same thing
        as when called without arguments, and return true.

        When invoked with the blocking argument set to false, do not block. If a
        call without an argument would block, return false immediately;
        otherwise, do the same thing as when called without arguments, and
        return true.

        ")
                        (reparse-symbol indented_block_body) [4590 6220])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [6225 6244])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6262 6266]))                          
                        :documentation "Release a lock, decrementing the recursion level.

        If after the decrement it is zero, reset the lock to unlocked (not owned
        by any thread), and if any other threads are blocked waiting for the
        lock to become unlocked, allow exactly one of them to proceed. If after
        the decrement the recursion level is still nonzero, the lock remains
        locked and owned by the calling thread.

        Only call this method when the calling thread owns the lock. A
        RuntimeError is raised if this method is called when the lock is
        unlocked.

        There is no return value.

        ")
                        (reparse-symbol indented_block_body) [6250 7347])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7365 7369])
                            ("t" variable nil (reparse-symbol function_parameters) [7371 7372])
                            ("v" variable nil (reparse-symbol function_parameters) [7374 7375])
                            ("tb" variable nil (reparse-symbol function_parameters) [7377 7379]))                          )
                        (reparse-symbol indented_block_body) [7352 7405])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7483 7487])
                            ("count_owner" variable nil (reparse-symbol function_parameters) [7489 7500]))                          )
                        (reparse-symbol indented_block_body) [7462 7703])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7726 7730]))                          )
                        (reparse-symbol indented_block_body) [7708 7978])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7997 8001]))                          )
                        (reparse-symbol indented_block_body) [7983 8048]))                  
                :type "class")
                nil [3865 8048])
            ("Condition" function
               (:documentation "Factory function that returns a new condition variable object.

    A condition variable allows one or more threads to wait until they are
    notified by another thread.

    If the lock argument is given and not None, it must be a Lock or RLock
    object, and it is used as the underlying lock. Otherwise, a new RLock object
    is created and used as the underlying lock.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [8064 8069])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [8071 8079]))                  )
                nil [8050 8513])
            ("_Condition" type
               (:documentation "Condition variables allow one or more threads to wait until they are
       notified by another thread.
    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [8719 8751])
                            ("if" code nil (reparse-symbol indented_block_body) [8760 8804])
                            ("self" variable nil (reparse-symbol indented_block_body) [8812 8830])
                            ("self" variable nil (reparse-symbol indented_block_body) [8899 8926])
                            ("self" variable nil (reparse-symbol indented_block_body) [8935 8962])
                            ("try" code nil (reparse-symbol indented_block_body) [9186 9291])
                            ("try" code nil (reparse-symbol indented_block_body) [9299 9410])
                            ("try" code nil (reparse-symbol indented_block_body) [9418 9515])
                            ("self" variable nil (reparse-symbol indented_block_body) [9523 9542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8679 8683])
                            ("lock" variable nil (reparse-symbol function_parameters) [8685 8689])
                            ("verbose" variable nil (reparse-symbol function_parameters) [8696 8703]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8666 9543])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9562 9566]))                          )
                        (reparse-symbol indented_block_body) [9548 9608])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9626 9630])
                            ("args" variable nil (reparse-symbol function_parameters) [9632 9637]))                          )
                        (reparse-symbol indented_block_body) [9613 9683])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9701 9705]))                          )
                        (reparse-symbol indented_block_body) [9688 9782])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9805 9809]))                          )
                        (reparse-symbol indented_block_body) [9787 9871])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9897 9901])
                            ("x" variable nil (reparse-symbol function_parameters) [9903 9904]))                          )
                        (reparse-symbol indented_block_body) [9876 9968])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9987 9991]))                          )
                        (reparse-symbol indented_block_body) [9973 10257])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10271 10275])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10277 10284]))                          
                        :documentation "Wait until notified or until a timeout occurs.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method releases the underlying lock, and then blocks until it is
        awakened by a notify() or notifyAll() call for the same condition
        variable in another thread, or until the optional timeout occurs. Once
        awakened or timed out, it re-acquires the lock and returns.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        When the underlying lock is an RLock, it is not released using its
        release() method, since this may not actually unlock the lock when it
        was acquired multiple times recursively. Instead, an internal interface
        of the RLock class is used, which really unlocks it even when it has
        been recursively acquired several times. Another internal interface is
        then used to restore the recursion level when the lock is reacquired.

        ")
                        (reparse-symbol indented_block_body) [10262 13224])
                    ("notify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13240 13244])
                            ("n" variable nil (reparse-symbol function_parameters) [13246 13247]))                          
                        :documentation "Wake up one or more threads waiting on this condition, if any.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method wakes up at most n of the threads waiting for the condition
        variable; it is a no-op if no threads are waiting.

        ")
                        (reparse-symbol indented_block_body) [13229 14170])
                    ("notifyAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14189 14193]))                          
                        :documentation "Wake up all threads waiting on this condition.

        If the calling thread has not acquired the lock when this method
        is called, a RuntimeError is raised.

        ")
                        (reparse-symbol indented_block_body) [14175 14427])
                    ("notify_all" variable nil (reparse-symbol indented_block_body) [14432 14454]))                  
                :type "class")
                nil [8514 14455])
            ("Semaphore" function
               (:documentation "A factory function that returns a new semaphore.

    Semaphores manage a counter representing the number of release() calls minus
    the number of acquire() calls, plus an initial value. The acquire() method
    blocks if necessary until it can return without making the counter
    negative. If not given, value defaults to 1.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [14471 14476])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14478 14486]))                  )
                nil [14457 14874])
            ("_Semaphore" type
               (:documentation "Semaphores manage a counter representing the number of release() calls
       minus the number of acquire() calls, plus an initial value. The acquire()
       method blocks if necessary until it can return without making the counter
       negative. If not given, value defaults to 1.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15338 15421])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [15429 15461])
                            ("self" variable nil (reparse-symbol indented_block_body) [15470 15501])
                            ("self" variable nil (reparse-symbol indented_block_body) [15510 15530]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15300 15304])
                            ("value" variable nil (reparse-symbol function_parameters) [15306 15311])
                            ("verbose" variable nil (reparse-symbol function_parameters) [15315 15322]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15287 15531])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15548 15552])
                            ("blocking" variable nil (reparse-symbol function_parameters) [15554 15562]))                          
                        :documentation "Acquire a semaphore, decrementing the internal counter by one.

        When invoked without arguments: if the internal counter is larger than
        zero on entry, decrement it by one and return immediately. If it is zero
        on entry, block, waiting until some other thread has called release() to
        make it larger than zero. This is done with proper interlocking so that
        if multiple acquire() calls are blocked, release() will wake exactly one
        of them up. The implementation may pick one at random, so the order in
        which blocked threads are awakened should not be relied on. There is no
        return value in this case.

        When invoked with blocking set to true, do the same thing as when called
        without arguments, and return true.

        When invoked with blocking set to false, do not block. If a call without
        an argument would block, return false immediately; otherwise, do the
        same thing as when called without arguments, and return true.

        ")
                        (reparse-symbol indented_block_body) [15536 17198])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [17203 17222])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17240 17244]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        ")
                        (reparse-symbol indented_block_body) [17228 17710])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17728 17732])
                            ("t" variable nil (reparse-symbol function_parameters) [17734 17735])
                            ("v" variable nil (reparse-symbol function_parameters) [17737 17738])
                            ("tb" variable nil (reparse-symbol function_parameters) [17740 17742]))                          )
                        (reparse-symbol indented_block_body) [17715 17768]))                  
                :type "class")
                nil [14875 17768])
            ("BoundedSemaphore" function
               (:documentation "A factory function that returns a new bounded semaphore.

    A bounded semaphore checks to make sure its current value doesn't exceed its
    initial value. If it does, ValueError is raised. In most situations
    semaphores are used to guard resources with limited capacity.

    If the semaphore is released too many times it's a sign of a bug. If not
    given, value defaults to 1.

    Like regular semaphores, bounded semaphores manage a counter representing
    the number of release() calls minus the number of acquire() calls, plus an
    initial value. The acquire() method blocks if necessary until it can return
    without making the counter negative. If not given, value defaults to 1.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [17791 17796])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [17798 17806]))                  )
                nil [17770 18572])
            ("_BoundedSemaphore" type
               (:documentation "A bounded semaphore checks to make sure its current value doesn't exceed
       its initial value. If it does, ValueError is raised. In most situations
       semaphores are used to guard resources with limited capacity.
    "
                :superclasses ("_Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Semaphore" code nil (reparse-symbol indented_block_body) [18902 18943])
                            ("self" variable nil (reparse-symbol indented_block_body) [18952 18979]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18864 18868])
                            ("value" variable nil (reparse-symbol function_parameters) [18870 18875])
                            ("verbose" variable nil (reparse-symbol function_parameters) [18879 18886]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18851 18980])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18997 19001]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        If the number of releases exceeds the number of acquires,
        raise a ValueError.

        ")
                        (reparse-symbol indented_block_body) [18985 19580]))                  
                :type "class")
                nil [18573 19580])
            ("Event" function
               (:documentation "A factory function that returns a new event.

    Events manage a flag that can be set to true with the set() method and reset
    to false with the clear() method. The wait() method blocks until the flag is
    true.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [19592 19597])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [19599 19607]))                  )
                nil [19582 19879])
            ("_Event" type
               (:documentation "A factory function that returns a new event object. An event manages a
       flag that can be set to true with the set() method and reset to false
       with the clear() method. The wait() method blocks until the flag is true.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [20255 20287])
                            ("self" variable nil (reparse-symbol indented_block_body) [20296 20327])
                            ("self" variable nil (reparse-symbol indented_block_body) [20336 20355]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20226 20230])
                            ("verbose" variable nil (reparse-symbol function_parameters) [20232 20239]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20213 20356])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20387 20391]))                          )
                        (reparse-symbol indented_block_body) [20361 20507])
                    ("isSet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20522 20526]))                          )
                        (reparse-symbol indented_block_body) [20512 20620])
                    ("is_set" variable nil (reparse-symbol indented_block_body) [20625 20639])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20653 20657]))                          
                        :documentation "Set the internal flag to true.

        All threads waiting for the flag to become true are awakened. Threads
        that call wait() once the flag is true will not block at all.

        ")
                        (reparse-symbol indented_block_body) [20645 20958])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20973 20977]))                          
                        :documentation "Reset the internal flag to false.

        Subsequently, threads calling wait() will block until set() is called to
        set the internal flag to true again.

        ")
                        (reparse-symbol indented_block_body) [20963 21223])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21237 21241])
                            ("timeout" variable nil (reparse-symbol function_parameters) [21243 21250]))                          
                        :documentation "Block until the internal flag is true.

        If the internal flag is true on entry, return immediately. Otherwise,
        block until another thread calls set() to set the flag to true, or until
        the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        This method returns the internal flag on exit, so it will always return
        True except if a timeout is given and the operation times out.

        ")
                        (reparse-symbol indented_block_body) [21228 21988]))                  
                :type "class")
                nil [19880 21988])
            ("_counter" variable nil nil [22027 22051])
            ("_counter" code nil nil [22052 22062])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [22123 22131]))              ) nil [22110 22179])
            ("_active_limbo_lock" variable nil nil [22211 22248])
            ("_active" variable nil nil [22249 22261])
            ("_limbo" variable nil nil [22299 22310])
            ("Thread" type
               (:documentation "A class that represents a thread of control.

    This class can be safely subclassed in a limited fashion.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__initialized" variable nil (reparse-symbol indented_block_body) [22491 22512])
                    ("__exc_info" variable nil (reparse-symbol indented_block_body) [22763 22789])
                    ("__exc_clear" variable nil (reparse-symbol indented_block_body) [22892 22920])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

\"\"\"" code nil (reparse-symbol indented_block_body) [23043 23884])
                            ("assert" code nil (reparse-symbol indented_block_body) [23893 23952])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [23961 23993])
                            ("if" code nil (reparse-symbol indented_block_body) [24002 24045])
                            ("self" variable nil (reparse-symbol indented_block_body) [24053 24075])
                            ("self" variable nil (reparse-symbol indented_block_body) [24084 24121])
                            ("self" variable nil (reparse-symbol indented_block_body) [24130 24148])
                            ("self" variable nil (reparse-symbol indented_block_body) [24157 24179])
                            ("self" variable nil (reparse-symbol indented_block_body) [24188 24224])
                            ("self" variable nil (reparse-symbol indented_block_body) [24233 24252])
                            ("self" variable nil (reparse-symbol indented_block_body) [24261 24285])
                            ("self" variable nil (reparse-symbol indented_block_body) [24294 24316])
                            ("self" variable nil (reparse-symbol indented_block_body) [24325 24357])
                            ("self" variable nil (reparse-symbol indented_block_body) [24366 24391])
                            ("self" variable nil (reparse-symbol indented_block_body) [24518 24545]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22939 22943])
                            ("group" variable nil (reparse-symbol function_parameters) [22945 22950])
                            ("target" variable nil (reparse-symbol function_parameters) [22957 22963])
                            ("name" variable nil (reparse-symbol function_parameters) [22970 22974])
                            ("args" variable nil (reparse-symbol function_parameters) [22998 23002])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23007 23013])
                            ("verbose" variable nil (reparse-symbol function_parameters) [23020 23027]))                          
                        :documentation "This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22926 24546])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24577 24581]))                          )
                        (reparse-symbol indented_block_body) [24551 24896])
                    ("_block" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24926 24930]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24901 24990])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25011 25015]))                          )
                        (reparse-symbol indented_block_body) [24995 25110])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25128 25132]))                          )
                        (reparse-symbol indented_block_body) [25115 25576])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25591 25595]))                          
                        :documentation "Start the thread's activity.

        It must be called at most once per thread object. It arranges for the
        object's run() method to be invoked in a separate thread of control.

        This method will raise a RuntimeError if called more than once on the
        same thread object.

        ")
                        (reparse-symbol indented_block_body) [25581 26471])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26484 26488]))                          
                        :documentation "Method representing the thread's activity.

        You may override this method in a subclass. The standard run() method
        invokes the callable object passed to the object's constructor as the
        target argument, if any, with sequential and keyword arguments taken
        from the args and kwargs arguments, respectively.

        ")
                        (reparse-symbol indented_block_body) [26476 27172])
                    ("__bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27193 27197]))                          )
                        (reparse-symbol indented_block_body) [27177 28176])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28196 28200]))                          )
                        (reparse-symbol indented_block_body) [28181 28239])
                    ("__bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28266 28270]))                          )
                        (reparse-symbol indented_block_body) [28244 31677])
                    ("__stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31693 31697]))                          )
                        (reparse-symbol indented_block_body) [31682 32020])
                    ("__delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32038 32042]))                          )
                        (reparse-symbol indented_block_body) [32025 33839])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33853 33857])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33859 33866]))                          
                        :documentation "Wait until the thread terminates.

        This blocks the calling thread until the thread whose join() method is
        called terminates -- either normally or through an unhandled exception
        or until the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof). As join() always returns None, you must call
        isAlive() after join() to decide whether a timeout happened -- if the
        thread is still alive, the join() call timed out.

        When the timeout argument is not present or None, the operation will
        block until the thread terminates.

        A thread can be join()ed many times.

        join() raises a RuntimeError if an attempt is made to join the current
        thread as that would cause a deadlock. It is also an error to join() a
        thread before it has been started and attempts to do so raises the same
        exception.

        ")
                        (reparse-symbol indented_block_body) [33844 36173])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36201 36205]))                          
                        :documentation "A string used for identification purposes only.

        It has no semantics. Multiple threads may be given the same name. The
        initial name is set by the constructor.

        ")
                        (reparse-symbol indented_block_body) [36178 36500])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36531 36535])
                            ("name" variable nil (reparse-symbol function_parameters) [36537 36541]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [36505 36642])
                    ("ident" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36671 36675]))                          
                        :documentation "Thread identifier of this thread or None if it has not been started.

        This is a nonzero integer. See the thread.get_ident() function. Thread
        identifiers may be recycled when a thread exits and another thread is
        created. The identifier is available even after the thread has exited.

        ")
                        (reparse-symbol indented_block_body) [36647 37102])
                    ("isAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37119 37123]))                          
                        :documentation "Return whether the thread is alive.

        This method returns True just before the run() method starts until just
        after the run() method terminates. The module function enumerate()
        returns a list of all alive threads.

        ")
                        (reparse-symbol indented_block_body) [37107 37515])
                    ("is_alive" variable nil (reparse-symbol indented_block_body) [37520 37538])
                    ("daemon" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37569 37573]))                          
                        :documentation "A boolean value indicating whether this thread is a daemon thread (True) or not (False).

        This must be set before start() is called, otherwise RuntimeError is
        raised. Its initial value is inherited from the creating thread; the
        main thread is not a daemon thread and therefore all threads created in
        the main thread default to daemon = False.

        The entire Python program exits when no alive non-daemon threads are
        left.

        ")
                        (reparse-symbol indented_block_body) [37544 38164])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38199 38203])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [38205 38213]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38169 38462])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38480 38484]))                          )
                        (reparse-symbol indented_block_body) [38467 38514])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38533 38537])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [38539 38547]))                          )
                        (reparse-symbol indented_block_body) [38519 38581])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38598 38602]))                          )
                        (reparse-symbol indented_block_body) [38586 38630])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38647 38651])
                            ("name" variable nil (reparse-symbol function_parameters) [38653 38657]))                          )
                        (reparse-symbol indented_block_body) [38635 38685]))                  
                :type "class")
                nil [22339 38685])
            ("Timer" function
               (:documentation "Factory function to create a Timer object.

    Timers call a function after a specified number of seconds:

        t = Timer(30.0, f, args=[], kwargs={})
        t.start()
        t.cancel()     # stop the timer's action if it's still waiting

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [38757 38762])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [38764 38772]))                  )
                nil [38747 39071])
            ("_Timer" type
               (:documentation "Call a function after a specified number of seconds:

            t = Timer(30.0, f, args=[], kwargs={})
            t.start()
            t.cancel()     # stop the timer's action if it's still waiting

    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [39385 39406])
                            ("self" variable nil (reparse-symbol indented_block_body) [39415 39439])
                            ("self" variable nil (reparse-symbol indented_block_body) [39448 39472])
                            ("self" variable nil (reparse-symbol indented_block_body) [39481 39497])
                            ("self" variable nil (reparse-symbol indented_block_body) [39506 39526])
                            ("self" variable nil (reparse-symbol indented_block_body) [39535 39558]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39330 39334])
                            ("interval" variable nil (reparse-symbol function_parameters) [39336 39344])
                            ("function" variable nil (reparse-symbol function_parameters) [39346 39354])
                            ("args" variable nil (reparse-symbol function_parameters) [39356 39360])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39365 39371]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39317 39559])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39575 39579]))                          
                        :documentation "Stop the timer if it hasn't finished yet")
                        (reparse-symbol indented_block_body) [39564 39665])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39678 39682]))                          )
                        (reparse-symbol indented_block_body) [39670 39847]))                  
                :type "class")
                nil [39072 39847])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [40013 40053])
                            ("self" code nil (reparse-symbol indented_block_body) [40062 40089])
                            ("self" code nil (reparse-symbol indented_block_body) [40098 40115])
                            ("with" code nil (reparse-symbol indented_block_body) [40124 40190]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39998 40002]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39985 40190])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40211 40215]))                          )
                        (reparse-symbol indented_block_body) [40195 40239])
                    ("_exitfunc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40258 40262]))                          )
                        (reparse-symbol indented_block_body) [40244 40617]))                  
                :type "class")
                nil [39953 40617])
            ("_pickSomeNonDaemonThread" function nil nil [40618 40755])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [41254 41302])
                            ("del" code nil (reparse-symbol indented_block_body) [41522 41545])
                            ("self" code nil (reparse-symbol indented_block_body) [41555 41582])
                            ("self" code nil (reparse-symbol indented_block_body) [41591 41608])
                            ("with" code nil (reparse-symbol indented_block_body) [41617 41683]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41239 41243]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41226 41683])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41704 41708]))                          )
                        (reparse-symbol indented_block_body) [41688 41731])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41745 41749])
                            ("timeout" variable nil (reparse-symbol function_parameters) [41751 41758]))                          )
                        (reparse-symbol indented_block_body) [41736 41817]))                  
                :type "class")
                nil [41193 41817])
            ("currentThread" function (:documentation "Return the current Thread object, corresponding to the caller's thread of control.

    If the caller's thread of control was not created through the threading
    module, a dummy thread object with limited functionality is returned.

    ") nil [41843 42283])
            ("current_thread" variable nil nil [42284 42314])
            ("activeCount" function (:documentation "Return the number of Thread objects currently alive.

    The returned count is equal to the length of the list returned by
    enumerate().

    ") nil [42316 42563])
            ("active_count" variable nil nil [42564 42590])
            ("_enumerate" function nil nil [42592 42724])
            ("enumerate" function (:documentation "Return a list of all Thread objects currently alive.

    The list includes daemonic threads, dummy thread objects created by
    current_thread(), and the main thread. It excludes terminated threads and
    threads that have not yet been started.

    ") nil [42725 43085])
            ("thread" include nil nil [43086 43115])
            ("_shutdown" variable nil nil [43231 43266])
            ("try" code nil nil [43365 43468])
            ("_after_fork" function nil nil [43470 44846])
            ("_test" function nil nil [44866 47093])
            ("if" code nil nil [47094 47133]))          
      :file "threading.py"
      :pointmax 47133
      :fsize 47132
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((INDENT_BLOCK 31326 . 31361) (NEWLINE 31110 . 31111) (COLON 31109 . 31110) (FINALLY 31102 . 31109)))
    (semanticdb-table "semanticdb-table-195cfdc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Filename globbing utility.\"\"\"" code nil nil [1 33])
            ("sys" include nil nil [35 45])
            ("os" include nil nil [46 55])
            ("re" include nil nil [56 65])
            ("fnmatch" include nil nil [66 80])
            ("try" code nil nil [82 268])
            ("__all__" variable nil nil [269 296])
            ("glob" function
               (:documentation "Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [307 315]))                  )
                nil [298 622])
            ("iglob" function
               (:documentation "Return an iterator which yields the paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [633 641]))                  )
                nil [623 1924])
            ("glob1" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [2159 2166])
                ("pattern" variable nil (reparse-symbol function_parameters) [2168 2175]))              ) nil [2149 2633])
            ("glob0" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [2644 2651])
                ("basename" variable nil (reparse-symbol function_parameters) [2653 2661]))              ) nil [2634 3015])
            ("magic_check" variable nil nil [3017 3050])
            ("has_magic" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3066 3067]))              ) nil [3052 3115]))          
      :file "glob.py"
      :pointmax 3115
      :fsize 3114
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195cffc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("os.path" include nil nil [193 220])
            ("fnmatch" include nil nil [221 235])
            ("collections" include nil nil [236 254])
            ("errno" include nil nil [255 267])
            ("try" code nil nil [269 378])
            ("try" code nil nil [379 484])
            ("try" code nil nil [485 559])
            ("try" code nil nil [560 634])
            ("__all__" variable nil nil [635 943])
            ("Error" type
               (:superclasses ("EnvironmentError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [980 984]))                  
                :type "class")
                nil [945 985])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [986 1163])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [1164 1253])
            ("try" code nil nil [1254 1318])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1335 1339])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1341 1345])
                    ("length" variable nil (reparse-symbol function_parameters) [1347 1353]))                  )
                nil [1319 1543])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1558 1561])
                ("dst" variable nil (reparse-symbol function_parameters) [1563 1566]))              ) nil [1544 1896])
            ("copyfile" function
               (:documentation "Copy data from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [1910 1913])
                    ("dst" variable nil (reparse-symbol function_parameters) [1915 1918]))                  )
                nil [1897 2514])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2528 2531])
                    ("dst" variable nil (reparse-symbol function_parameters) [2533 2536]))                  )
                nil [2515 2703])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2717 2720])
                    ("dst" variable nil (reparse-symbol function_parameters) [2722 2725]))                  )
                nil [2704 3333])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3343 3346])
                    ("dst" variable nil (reparse-symbol function_parameters) [3348 3351]))                  )
                nil [3334 3579])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3590 3593])
                    ("dst" variable nil (reparse-symbol function_parameters) [3595 3598]))                  )
                nil [3580 3833])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [3854 3863]))                  )
                nil [3834 4246])
            ("copytree" function
               (:documentation "Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    XXX Consider this example code rather than the ultimate tool.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [4260 4263])
                    ("dst" variable nil (reparse-symbol function_parameters) [4265 4268])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [4270 4278])
                    ("ignore" variable nil (reparse-symbol function_parameters) [4286 4292]))                  )
                nil [4247 6586])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6598 6602])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [6604 6617])
                    ("onerror" variable nil (reparse-symbol function_parameters) [6625 6632]))                  )
                nil [6587 8210])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [8226 8230]))              ) nil [8212 8483])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed.
    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8493 8496])
                    ("dst" variable nil (reparse-symbol function_parameters) [8498 8501]))                  )
                nil [8484 9940])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [9956 9959])
                ("dst" variable nil (reparse-symbol function_parameters) [9961 9964]))              ) nil [9941 10174])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [10188 10192]))                  )
                nil [10175 10453])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [10467 10471]))                  )
                nil [10454 10732])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", or \".bz2\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [10751 10760])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [10762 10770])
                    ("compress" variable nil (reparse-symbol function_parameters) [10772 10780])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10789 10796])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [10800 10807])
                    ("owner" variable nil (reparse-symbol function_parameters) [10829 10834])
                    ("group" variable nil (reparse-symbol function_parameters) [10841 10846])
                    ("logger" variable nil (reparse-symbol function_parameters) [10853 10859]))                  )
                nil [10733 12783])
            ("_call_external_zip" function (:arguments 
              ( ("base_dir" variable nil (reparse-symbol function_parameters) [12807 12815])
                ("zip_filename" variable nil (reparse-symbol function_parameters) [12817 12829])
                ("verbose" variable nil (reparse-symbol function_parameters) [12831 12838])
                ("dry_run" variable nil (reparse-symbol function_parameters) [12840 12847])
                ("logger" variable nil (reparse-symbol function_parameters) [12849 12855]))              ) nil [12784 13558])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Uses either the
    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility
    (if installed and found on the default search path).  If neither tool is
    available, raises ExecError.  Returns the name of the output zip
    file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [13577 13586])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [13588 13596])
                    ("verbose" variable nil (reparse-symbol function_parameters) [13598 13605])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [13609 13616])
                    ("logger" variable nil (reparse-symbol function_parameters) [13620 13626]))                  )
                nil [13559 15826])
            ("_ARCHIVE_FORMATS" variable nil nil [15827 15971])
            ("if" code nil nil [15973 16117])
            ("if" code nil nil [16118 16263])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [16264 16583])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [16612 16616])
                    ("function" variable nil (reparse-symbol function_parameters) [16618 16626])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [16628 16638])
                    ("description" variable nil (reparse-symbol function_parameters) [16645 16656]))                  )
                nil [16584 17575])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [17606 17610]))              ) nil [17576 17644])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",
    or \"bztar\".  Or any other registered format.

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [17662 17671])
                    ("format" variable nil (reparse-symbol function_parameters) [17673 17679])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [17681 17689])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [17696 17704])
                    ("verbose" variable nil (reparse-symbol function_parameters) [17711 17718])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [17739 17746])
                    ("owner" variable nil (reparse-symbol function_parameters) [17750 17755])
                    ("group" variable nil (reparse-symbol function_parameters) [17762 17767])
                    ("logger" variable nil (reparse-symbol function_parameters) [17774 17780]))                  )
                nil [17645 19516]))          
      :file "shutil.py"
      :pointmax 19516
      :fsize 19515
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((NAME 11742 . 11754) (IF 11779 . 11781) (ELSE 11791 . 11795)))
    (semanticdb-table "semanticdb-table-195d33c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 2022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2040 2044]))                          )
                        (reparse-symbol indented_block_body) [2027 2067])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2110 2113])
                            ("C" variable nil (reparse-symbol function_parameters) [2115 2116]))                          )
                        (reparse-symbol indented_block_body) [2072 2269]))                  
                :type "class")
                nil [1841 2269])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2288 2311])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2349 2353]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2317 2373])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2416 2419])
                            ("C" variable nil (reparse-symbol function_parameters) [2421 2422]))                          )
                        (reparse-symbol indented_block_body) [2378 2547]))                  
                :type "class")
                nil [2271 2547])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2570 2593])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2636 2640])
                            ("x" variable nil (reparse-symbol function_parameters) [2642 2643]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2599 2667])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2710 2713])
                            ("C" variable nil (reparse-symbol function_parameters) [2715 2716]))                          )
                        (reparse-symbol indented_block_body) [2672 2850]))                  
                :type "class")
                nil [2549 2850])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2872 2895])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2934 2938])
                            ("args" variable nil (reparse-symbol function_parameters) [2940 2945])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2947 2953]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2901 2977])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3020 3023])
                            ("C" variable nil (reparse-symbol function_parameters) [3025 3026]))                          )
                        (reparse-symbol indented_block_body) [2982 3155]))                  
                :type "class")
                nil [2852 3155])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3584 3588])
                            ("other" variable nil (reparse-symbol function_parameters) [3590 3595]))                          )
                        (reparse-symbol indented_block_body) [3573 3840])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3856 3860])
                            ("other" variable nil (reparse-symbol function_parameters) [3862 3867]))                          )
                        (reparse-symbol indented_block_body) [3845 4004])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4020 4024])
                            ("other" variable nil (reparse-symbol function_parameters) [4026 4031]))                          )
                        (reparse-symbol indented_block_body) [4009 4168])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4184 4188])
                            ("other" variable nil (reparse-symbol function_parameters) [4190 4195]))                          )
                        (reparse-symbol indented_block_body) [4173 4440])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4456 4460])
                            ("other" variable nil (reparse-symbol function_parameters) [4462 4467]))                          )
                        (reparse-symbol indented_block_body) [4445 4605])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4621 4625])
                            ("other" variable nil (reparse-symbol function_parameters) [4627 4632]))                          )
                        (reparse-symbol indented_block_body) [4610 4670])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4711 4714])
                            ("it" variable nil (reparse-symbol function_parameters) [4716 4718]))                          )
                        (reparse-symbol indented_block_body) [4675 4947])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4964 4968])
                            ("other" variable nil (reparse-symbol function_parameters) [4970 4975]))                          )
                        (reparse-symbol indented_block_body) [4952 5134])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [5139 5157])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5178 5182])
                            ("other" variable nil (reparse-symbol function_parameters) [5184 5189]))                          )
                        (reparse-symbol indented_block_body) [5163 5359])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("other" variable nil (reparse-symbol function_parameters) [5381 5386]))                          )
                        (reparse-symbol indented_block_body) [5364 5563])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [5568 5584])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5602 5606])
                            ("other" variable nil (reparse-symbol function_parameters) [5608 5613]))                          )
                        (reparse-symbol indented_block_body) [5590 5905])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5923 5927])
                            ("other" variable nil (reparse-symbol function_parameters) [5929 5934]))                          )
                        (reparse-symbol indented_block_body) [5910 6226])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6243 6247])
                            ("other" variable nil (reparse-symbol function_parameters) [6249 6254]))                          )
                        (reparse-symbol indented_block_body) [6231 6476])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [6481 6499])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [6576 6591])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6607 6611]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [6597 7600]))                  
                :type "class")
                nil [3172 7600])
            ("Set" code nil nil [7601 7624])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8085 8089])
                            ("value" variable nil (reparse-symbol function_parameters) [8091 8096]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [8057 8163])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8200 8204])
                            ("value" variable nil (reparse-symbol function_parameters) [8206 8211]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [8168 8319])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8335 8339])
                            ("value" variable nil (reparse-symbol function_parameters) [8341 8346]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [8324 8509])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8522 8526]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [8514 8766])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8781 8785]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [8771 8963])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8980 8984])
                            ("it" variable nil (reparse-symbol function_parameters) [8986 8988]))                          )
                        (reparse-symbol indented_block_body) [8968 9064])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9082 9086])
                            ("it" variable nil (reparse-symbol function_parameters) [9088 9090]))                          )
                        (reparse-symbol indented_block_body) [9069 9179])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9197 9201])
                            ("it" variable nil (reparse-symbol function_parameters) [9203 9205]))                          )
                        (reparse-symbol indented_block_body) [9184 9536])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9554 9558])
                            ("it" variable nil (reparse-symbol function_parameters) [9560 9562]))                          )
                        (reparse-symbol indented_block_body) [9541 9712]))                  
                :type "class")
                nil [7627 9712])
            ("MutableSet" code nil nil [9713 9737])
            ("Mapping" type
               (:documentation "A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10054 10058])
                            ("key" variable nil (reparse-symbol function_parameters) [10060 10063]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10018 10089])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10102 10106])
                            ("key" variable nil (reparse-symbol function_parameters) [10108 10111])
                            ("default" variable nil (reparse-symbol function_parameters) [10113 10120]))                          )
                        (reparse-symbol indented_block_body) [10094 10293])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10315 10319])
                            ("key" variable nil (reparse-symbol function_parameters) [10321 10324]))                          )
                        (reparse-symbol indented_block_body) [10298 10450])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10468 10472]))                          )
                        (reparse-symbol indented_block_body) [10455 10558])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10578 10582]))                          )
                        (reparse-symbol indented_block_body) [10563 10699])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10718 10722]))                          )
                        (reparse-symbol indented_block_body) [10704 10857])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10871 10875]))                          )
                        (reparse-symbol indented_block_body) [10862 10943])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10958 10962]))                          )
                        (reparse-symbol indented_block_body) [10948 11082])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11098 11102]))                          )
                        (reparse-symbol indented_block_body) [11087 11191])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [11271 11286])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11303 11307])
                            ("other" variable nil (reparse-symbol function_parameters) [11309 11314]))                          )
                        (reparse-symbol indented_block_body) [11292 11451])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11467 11471])
                            ("other" variable nil (reparse-symbol function_parameters) [11473 11478]))                          )
                        (reparse-symbol indented_block_body) [11456 11516]))                  
                :type "class")
                nil [9759 11516])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11585 11608]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11561 11565])
                            ("mapping" variable nil (reparse-symbol function_parameters) [11567 11574]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11548 11609])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11626 11630]))                          )
                        (reparse-symbol indented_block_body) [11614 11667])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11685 11689]))                          )
                        (reparse-symbol indented_block_body) [11672 11761]))                  
                :type "class")
                nil [11517 11761])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11838 11842])
                            ("it" variable nil (reparse-symbol function_parameters) [11844 11846]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11802 11872])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11894 11898])
                            ("key" variable nil (reparse-symbol function_parameters) [11900 11903]))                          )
                        (reparse-symbol indented_block_body) [11877 11942])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11960 11964]))                          )
                        (reparse-symbol indented_block_body) [11947 12023]))                  
                :type "class")
                nil [11763 12023])
            ("KeysView" code nil nil [12024 12062])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12140 12144])
                            ("it" variable nil (reparse-symbol function_parameters) [12146 12148]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12104 12174])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12196 12200])
                            ("item" variable nil (reparse-symbol function_parameters) [12202 12206]))                          )
                        (reparse-symbol indented_block_body) [12179 12377])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12395 12399]))                          )
                        (reparse-symbol indented_block_body) [12382 12480]))                  
                :type "class")
                nil [12064 12480])
            ("ItemsView" code nil nil [12481 12521])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12576 12580])
                            ("value" variable nil (reparse-symbol function_parameters) [12582 12587]))                          )
                        (reparse-symbol indented_block_body) [12559 12717])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12735 12739]))                          )
                        (reparse-symbol indented_block_body) [12722 12813]))                  
                :type "class")
                nil [12523 12813])
            ("ValuesView" code nil nil [12814 12856])
            ("MutableMapping" type
               (:documentation "A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    "
                :superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13178 13182])
                            ("key" variable nil (reparse-symbol function_parameters) [13184 13187])
                            ("value" variable nil (reparse-symbol function_parameters) [13189 13194]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13142 13220])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13261 13265])
                            ("key" variable nil (reparse-symbol function_parameters) [13267 13270]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13225 13296])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [13301 13320])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13334 13338])
                            ("key" variable nil (reparse-symbol function_parameters) [13340 13343])
                            ("default" variable nil (reparse-symbol function_parameters) [13345 13352]))                          )
                        (reparse-symbol indented_block_body) [13326 13771])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13788 13792]))                          )
                        (reparse-symbol indented_block_body) [13776 14120])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14135 14139]))                          )
                        (reparse-symbol indented_block_body) [14125 14307])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [14323 14328])
                        ("kwds" variable nil (reparse-symbol function_parameters) [14330 14336]))                      ) (reparse-symbol indented_block_body) [14312 15478])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15498 15502])
                            ("key" variable nil (reparse-symbol function_parameters) [15504 15507])
                            ("default" variable nil (reparse-symbol function_parameters) [15509 15516]))                          )
                        (reparse-symbol indented_block_body) [15483 15721]))                  
                :type "class")
                nil [12858 15721])
            ("MutableMapping" code nil nil [15722 15751])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16008 16012])
                            ("index" variable nil (reparse-symbol function_parameters) [16014 16019]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15972 16047])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16065 16069]))                          )
                        (reparse-symbol indented_block_body) [16052 16244])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16266 16270])
                            ("value" variable nil (reparse-symbol function_parameters) [16272 16277]))                          )
                        (reparse-symbol indented_block_body) [16249 16379])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16401 16405]))                          )
                        (reparse-symbol indented_block_body) [16384 16479])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16494 16498])
                            ("value" variable nil (reparse-symbol function_parameters) [16500 16505]))                          )
                        (reparse-symbol indented_block_body) [16484 16761])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16776 16780])
                            ("value" variable nil (reparse-symbol function_parameters) [16782 16787]))                          )
                        (reparse-symbol indented_block_body) [16766 16917]))                  
                :type "class")
                nil [15774 16917])
            ("Sequence" code nil nil [16918 16942])
            ("Sequence" code nil nil [16943 16972])
            ("Sequence" code nil nil [16973 16998])
            ("Sequence" code nil nil [16999 17024])
            ("MutableSequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    "
                :superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17287 17291])
                            ("index" variable nil (reparse-symbol function_parameters) [17293 17298])
                            ("value" variable nil (reparse-symbol function_parameters) [17300 17305]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17251 17333])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17374 17378])
                            ("index" variable nil (reparse-symbol function_parameters) [17380 17385]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17338 17413])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17449 17453])
                            ("index" variable nil (reparse-symbol function_parameters) [17455 17460])
                            ("value" variable nil (reparse-symbol function_parameters) [17462 17467]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17418 17559])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17575 17579])
                            ("value" variable nil (reparse-symbol function_parameters) [17581 17586]))                          )
                        (reparse-symbol indented_block_body) [17564 17698])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17715 17719]))                          )
                        (reparse-symbol indented_block_body) [17703 17874])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17890 17894])
                            ("values" variable nil (reparse-symbol function_parameters) [17896 17902]))                          )
                        (reparse-symbol indented_block_body) [17879 18045])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18058 18062])
                            ("index" variable nil (reparse-symbol function_parameters) [18064 18069]))                          )
                        (reparse-symbol indented_block_body) [18050 18308])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18324 18328])
                            ("value" variable nil (reparse-symbol function_parameters) [18330 18335]))                          )
                        (reparse-symbol indented_block_body) [18313 18507])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18525 18529])
                            ("values" variable nil (reparse-symbol function_parameters) [18531 18537]))                          )
                        (reparse-symbol indented_block_body) [18512 18588]))                  
                :type "class")
                nil [17027 18588])
            ("MutableSequence" code nil nil [18589 18619]))          
      :file "_abcoll.py"
      :pointmax 18620
      :fsize 18619
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195d35c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("try" code nil nil [399 510])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [617 621]))                  
                :type "class")
                nil [589 622])
            ("FAILURE" variable nil nil [636 655])
            ("SUCCESS" variable nil nil [656 675])
            ("ANY" variable nil nil [677 688])
            ("ANY_ALL" variable nil nil [689 708])
            ("ASSERT" variable nil nil [709 726])
            ("ASSERT_NOT" variable nil nil [727 752])
            ("AT" variable nil nil [753 762])
            ("BIGCHARSET" variable nil nil [763 788])
            ("BRANCH" variable nil nil [789 806])
            ("CALL" variable nil nil [807 820])
            ("CATEGORY" variable nil nil [821 842])
            ("CHARSET" variable nil nil [843 862])
            ("GROUPREF" variable nil nil [863 884])
            ("GROUPREF_IGNORE" variable nil nil [885 920])
            ("GROUPREF_EXISTS" variable nil nil [921 956])
            ("IN" variable nil nil [957 966])
            ("IN_IGNORE" variable nil nil [967 990])
            ("INFO" variable nil nil [991 1004])
            ("JUMP" variable nil nil [1005 1018])
            ("LITERAL" variable nil nil [1019 1038])
            ("LITERAL_IGNORE" variable nil nil [1039 1072])
            ("MARK" variable nil nil [1073 1086])
            ("MAX_REPEAT" variable nil nil [1087 1112])
            ("MAX_UNTIL" variable nil nil [1113 1136])
            ("MIN_REPEAT" variable nil nil [1137 1162])
            ("MIN_UNTIL" variable nil nil [1163 1186])
            ("NEGATE" variable nil nil [1187 1204])
            ("NOT_LITERAL" variable nil nil [1205 1232])
            ("NOT_LITERAL_IGNORE" variable nil nil [1233 1274])
            ("RANGE" variable nil nil [1275 1290])
            ("REPEAT" variable nil nil [1291 1308])
            ("REPEAT_ONE" variable nil nil [1309 1334])
            ("SUBPATTERN" variable nil nil [1335 1360])
            ("MIN_REPEAT_ONE" variable nil nil [1361 1394])
            ("AT_BEGINNING" variable nil nil [1408 1437])
            ("AT_BEGINNING_LINE" variable nil nil [1438 1477])
            ("AT_BEGINNING_STRING" variable nil nil [1478 1521])
            ("AT_BOUNDARY" variable nil nil [1522 1549])
            ("AT_NON_BOUNDARY" variable nil nil [1550 1585])
            ("AT_END" variable nil nil [1586 1603])
            ("AT_END_LINE" variable nil nil [1604 1631])
            ("AT_END_STRING" variable nil nil [1632 1663])
            ("AT_LOC_BOUNDARY" variable nil nil [1664 1699])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1700 1743])
            ("AT_UNI_BOUNDARY" variable nil nil [1744 1779])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1780 1823])
            ("CATEGORY_DIGIT" variable nil nil [1838 1871])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1872 1913])
            ("CATEGORY_SPACE" variable nil nil [1914 1947])
            ("CATEGORY_NOT_SPACE" variable nil nil [1948 1989])
            ("CATEGORY_WORD" variable nil nil [1990 2021])
            ("CATEGORY_NOT_WORD" variable nil nil [2022 2061])
            ("CATEGORY_LINEBREAK" variable nil nil [2062 2103])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2104 2153])
            ("CATEGORY_LOC_WORD" variable nil nil [2154 2193])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2194 2241])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2242 2283])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2284 2333])
            ("CATEGORY_UNI_SPACE" variable nil nil [2334 2375])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2376 2425])
            ("CATEGORY_UNI_WORD" variable nil nil [2426 2465])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2466 2513])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2514 2563])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2564 2621])
            ("OPCODES" variable nil nil [2623 3120])
            ("ATCODES" variable nil nil [3122 3346])
            ("CHCODES" variable nil nil [3348 3762])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3777 3781]))              ) nil [3764 3878])
            ("OPCODES" variable nil nil [3879 3906])
            ("ATCODES" variable nil nil [3907 3934])
            ("CHCODES" variable nil nil [3935 3962])
            ("OP_IGNORE" variable nil nil [4012 4142])
            ("AT_MULTILINE" variable nil nil [4144 4223])
            ("AT_LOCALE" variable nil nil [4225 4315])
            ("AT_UNICODE" variable nil nil [4317 4408])
            ("CH_LOCALE" variable nil nil [4410 4764])
            ("CH_UNICODE" variable nil nil [4766 5145])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5155 5176])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5216 5239])
            ("SRE_FLAG_LOCALE" variable nil nil [5259 5278])
            ("SRE_FLAG_MULTILINE" variable nil nil [5302 5324])
            ("SRE_FLAG_DOTALL" variable nil nil [5360 5380])
            ("SRE_FLAG_UNICODE" variable nil nil [5415 5436])
            ("SRE_FLAG_VERBOSE" variable nil nil [5458 5479])
            ("SRE_FLAG_DEBUG" variable nil nil [5513 5533])
            ("SRE_INFO_PREFIX" variable nil nil [5574 5593])
            ("SRE_INFO_LITERAL" variable nil nil [5607 5627])
            ("SRE_INFO_CHARSET" variable nil nil [5674 5694])
            ("if" code nil nil [5743 7198]))          
      :file "sre_constants.py"
      :pointmax 7198
      :fsize 7197
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195d37c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
opcode module - potentially shared between dis and other modules which
operate on bytecodes (e.g. peephole optimizers).
\"\"\"" code nil nil [2 129])
            ("__all__" variable nil nil [131 307])
            ("cmp_op" variable nil nil [309 418])
            ("hasconst" variable nil nil [420 433])
            ("hasname" variable nil nil [434 446])
            ("hasjrel" variable nil nil [447 459])
            ("hasjabs" variable nil nil [460 472])
            ("haslocal" variable nil nil [473 486])
            ("hascompare" variable nil nil [487 502])
            ("hasfree" variable nil nil [503 515])
            ("opmap" variable nil nil [517 527])
            ("opname" code nil nil [528 547])
            ("for" code nil nil [548 598])
            ("del" code nil nil [598 604])
            ("def_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [617 621])
                ("op" variable nil (reparse-symbol function_parameters) [623 625]))              ) nil [606 671])
            ("name_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [684 688])
                ("op" variable nil (reparse-symbol function_parameters) [690 692]))              ) nil [672 739])
            ("jrel_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [752 756])
                ("op" variable nil (reparse-symbol function_parameters) [758 760]))              ) nil [740 807])
            ("jabs_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [820 824])
                ("op" variable nil (reparse-symbol function_parameters) [826 828]))              ) nil [808 875])
            ("def_op" code nil nil [963 985])
            ("def_op" code nil nil [986 1006])
            ("def_op" code nil nil [1007 1027])
            ("def_op" code nil nil [1028 1050])
            ("def_op" code nil nil [1051 1071])
            ("def_op" code nil nil [1072 1093])
            ("def_op" code nil nil [1095 1111])
            ("def_op" code nil nil [1112 1140])
            ("def_op" code nil nil [1141 1169])
            ("def_op" code nil nil [1170 1193])
            ("def_op" code nil nil [1194 1221])
            ("def_op" code nil nil [1223 1249])
            ("def_op" code nil nil [1251 1277])
            ("def_op" code nil nil [1278 1307])
            ("def_op" code nil nil [1308 1335])
            ("def_op" code nil nil [1336 1363])
            ("def_op" code nil nil [1364 1388])
            ("def_op" code nil nil [1389 1418])
            ("def_op" code nil nil [1419 1446])
            ("def_op" code nil nil [1447 1480])
            ("def_op" code nil nil [1481 1513])
            ("def_op" code nil nil [1514 1548])
            ("def_op" code nil nil [1549 1582])
            ("def_op" code nil nil [1583 1604])
            ("def_op" code nil nil [1605 1626])
            ("def_op" code nil nil [1627 1648])
            ("def_op" code nil nil [1649 1670])
            ("def_op" code nil nil [1672 1699])
            ("def_op" code nil nil [1700 1727])
            ("def_op" code nil nil [1728 1755])
            ("def_op" code nil nil [1756 1783])
            ("def_op" code nil nil [1785 1813])
            ("def_op" code nil nil [1814 1842])
            ("def_op" code nil nil [1843 1871])
            ("def_op" code nil nil [1872 1900])
            ("def_op" code nil nil [1902 1925])
            ("def_op" code nil nil [1926 1951])
            ("def_op" code nil nil [1952 1982])
            ("def_op" code nil nil [1983 2013])
            ("def_op" code nil nil [2014 2042])
            ("def_op" code nil nil [2043 2071])
            ("def_op" code nil nil [2072 2098])
            ("def_op" code nil nil [2099 2126])
            ("def_op" code nil nil [2127 2154])
            ("def_op" code nil nil [2155 2182])
            ("def_op" code nil nil [2183 2207])
            ("def_op" code nil nil [2208 2232])
            ("def_op" code nil nil [2233 2256])
            ("def_op" code nil nil [2257 2284])
            ("def_op" code nil nil [2285 2307])
            ("def_op" code nil nil [2309 2333])
            ("def_op" code nil nil [2334 2358])
            ("def_op" code nil nil [2359 2386])
            ("def_op" code nil nil [2387 2414])
            ("def_op" code nil nil [2415 2445])
            ("def_op" code nil nil [2446 2474])
            ("def_op" code nil nil [2475 2503])
            ("def_op" code nil nil [2504 2529])
            ("def_op" code nil nil [2530 2555])
            ("def_op" code nil nil [2556 2580])
            ("def_op" code nil nil [2581 2605])
            ("def_op" code nil nil [2606 2632])
            ("def_op" code nil nil [2633 2658])
            ("def_op" code nil nil [2659 2685])
            ("def_op" code nil nil [2686 2711])
            ("def_op" code nil nil [2712 2735])
            ("def_op" code nil nil [2736 2761])
            ("def_op" code nil nil [2762 2785])
            ("def_op" code nil nil [2786 2811])
            ("def_op" code nil nil [2812 2837])
            ("HAVE_ARGUMENT" variable nil nil [2839 2857])
            ("name_op" code nil nil [2910 2935])
            ("name_op" code nil nil [2963 2989])
            ("def_op" code nil nil [3000 3029])
            ("jrel_op" code nil nil [3056 3079])
            ("def_op" code nil nil [3080 3105])
            ("name_op" code nil nil [3106 3131])
            ("name_op" code nil nil [3159 3185])
            ("name_op" code nil nil [3196 3223])
            ("name_op" code nil nil [3233 3261])
            ("def_op" code nil nil [3270 3292])
            ("def_op" code nil nil [3333 3358])
            ("hasconst" code nil nil [3387 3407])
            ("name_op" code nil nil [3408 3433])
            ("def_op" code nil nil [3461 3487])
            ("def_op" code nil nil [3517 3542])
            ("def_op" code nil nil [3572 3596])
            ("def_op" code nil nil [3626 3650])
            ("name_op" code nil nil [3694 3719])
            ("def_op" code nil nil [3747 3772])
            ("hascompare" code nil nil [3801 3823])
            ("name_op" code nil nil [3824 3851])
            ("name_op" code nil nil [3877 3904])
            ("jrel_op" code nil nil [3930 3958])
            ("jabs_op" code nil nil [3988 4024])
            ("jabs_op" code nil nil [4069 4104])
            ("jabs_op" code nil nil [4111 4140])
            ("jabs_op" code nil nil [4153 4186])
            ("jabs_op" code nil nil [4195 4227])
            ("name_op" code nil nil [4238 4265])
            ("jabs_op" code nil nil [4292 4321])
            ("jrel_op" code nil nil [4341 4367])
            ("jrel_op" code nil nil [4402 4430])
            ("jrel_op" code nil nil [4439 4468])
            ("def_op" code nil nil [4477 4501])
            ("haslocal" code nil nil [4533 4553])
            ("def_op" code nil nil [4554 4579])
            ("haslocal" code nil nil [4610 4630])
            ("def_op" code nil nil [4631 4657])
            ("haslocal" code nil nil [4687 4707])
            ("def_op" code nil nil [4709 4737])
            ("def_op" code nil nil [4782 4810])
            ("def_op" code nil nil [4839 4867])
            ("def_op" code nil nil [4908 4934])
            ("def_op" code nil nil [4958 4985])
            ("def_op" code nil nil [4986 5013])
            ("hasfree" code nil nil [5014 5033])
            ("def_op" code nil nil [5034 5059])
            ("hasfree" code nil nil [5060 5079])
            ("def_op" code nil nil [5080 5106])
            ("hasfree" code nil nil [5107 5126])
            ("def_op" code nil nil [5128 5160])
            ("def_op" code nil nil [5190 5221])
            ("def_op" code nil nil [5252 5287])
            ("jrel_op" code nil nil [5315 5341])
            ("def_op" code nil nil [5343 5370])
            ("EXTENDED_ARG" variable nil nil [5371 5389])
            ("def_op" code nil nil [5390 5412])
            ("def_op" code nil nil [5413 5435])
            ("del" code nil nil [5437 5474]))          
      :file "opcode.py"
      :pointmax 5475
      :fsize 5474
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195d39c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Token constants (from \"token.h\").\"\"\"" code nil nil [1 40])
            ("ENDMARKER" variable nil nil [295 308])
            ("NAME" variable nil nil [309 317])
            ("NUMBER" variable nil nil [318 328])
            ("STRING" variable nil nil [329 339])
            ("NEWLINE" variable nil nil [340 351])
            ("INDENT" variable nil nil [352 362])
            ("DEDENT" variable nil nil [363 373])
            ("LPAR" variable nil nil [374 382])
            ("RPAR" variable nil nil [383 391])
            ("LSQB" variable nil nil [392 400])
            ("RSQB" variable nil nil [401 410])
            ("COLON" variable nil nil [411 421])
            ("COMMA" variable nil nil [422 432])
            ("SEMI" variable nil nil [433 442])
            ("PLUS" variable nil nil [443 452])
            ("MINUS" variable nil nil [453 463])
            ("STAR" variable nil nil [464 473])
            ("SLASH" variable nil nil [474 484])
            ("VBAR" variable nil nil [485 494])
            ("AMPER" variable nil nil [495 505])
            ("LESS" variable nil nil [506 515])
            ("GREATER" variable nil nil [516 528])
            ("EQUAL" variable nil nil [529 539])
            ("DOT" variable nil nil [540 548])
            ("PERCENT" variable nil nil [549 561])
            ("BACKQUOTE" variable nil nil [562 576])
            ("LBRACE" variable nil nil [577 588])
            ("RBRACE" variable nil nil [589 600])
            ("EQEQUAL" variable nil nil [601 613])
            ("NOTEQUAL" variable nil nil [614 627])
            ("LESSEQUAL" variable nil nil [628 642])
            ("GREATEREQUAL" variable nil nil [643 660])
            ("TILDE" variable nil nil [661 671])
            ("CIRCUMFLEX" variable nil nil [672 687])
            ("LEFTSHIFT" variable nil nil [688 702])
            ("RIGHTSHIFT" variable nil nil [703 718])
            ("DOUBLESTAR" variable nil nil [719 734])
            ("PLUSEQUAL" variable nil nil [735 749])
            ("MINEQUAL" variable nil nil [750 763])
            ("STAREQUAL" variable nil nil [764 778])
            ("SLASHEQUAL" variable nil nil [779 794])
            ("PERCENTEQUAL" variable nil nil [795 812])
            ("AMPEREQUAL" variable nil nil [813 828])
            ("VBAREQUAL" variable nil nil [829 843])
            ("CIRCUMFLEXEQUAL" variable nil nil [844 864])
            ("LEFTSHIFTEQUAL" variable nil nil [865 884])
            ("RIGHTSHIFTEQUAL" variable nil nil [885 905])
            ("DOUBLESTAREQUAL" variable nil nil [906 926])
            ("DOUBLESLASH" variable nil nil [927 943])
            ("DOUBLESLASHEQUAL" variable nil nil [944 965])
            ("AT" variable nil nil [966 973])
            ("OP" variable nil nil [974 981])
            ("ERRORTOKEN" variable nil nil [982 997])
            ("N_TOKENS" variable nil nil [998 1011])
            ("NT_OFFSET" variable nil nil [1012 1027])
            ("tok_name" variable nil nil [1048 1061])
            ("for" code nil nil [1062 1167])
            ("del" code nil nil [1167 1184])
            ("ISTERMINAL" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1202 1203]))              ) nil [1187 1231])
            ("ISNONTERMINAL" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1250 1251]))              ) nil [1232 1280])
            ("ISEOF" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1291 1292]))              ) nil [1281 1321])
            ("main" function nil nil [1323 2883])
            ("if" code nil nil [2885 2923]))          
      :file "token.py"
      :pointmax 2923
      :fsize 2922
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195d3bc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2612])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_tb(tb, limit))'."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2627 2629])
                    ("limit" variable nil (reparse-symbol function_parameters) [2631 2636]))                  )
                nil [2613 2756])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2772 2774])
                    ("limit" variable nil (reparse-symbol function_parameters) [2776 2781]))                  )
                nil [2757 3892])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3914 3919])
                    ("value" variable nil (reparse-symbol function_parameters) [3921 3926])
                    ("tb" variable nil (reparse-symbol function_parameters) [3928 3930])
                    ("limit" variable nil (reparse-symbol function_parameters) [3932 3937])
                    ("file" variable nil (reparse-symbol function_parameters) [3944 3948]))                  )
                nil [3894 4725])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4747 4752])
                    ("value" variable nil (reparse-symbol function_parameters) [4754 4759])
                    ("tb" variable nil (reparse-symbol function_parameters) [4761 4763])
                    ("limit" variable nil (reparse-symbol function_parameters) [4765 4770]))                  )
                nil [4726 5377])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5404 5409])
                    ("value" variable nil (reparse-symbol function_parameters) [5411 5416]))                  )
                nil [5378 7519])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7547 7552])
                    ("value" variable nil (reparse-symbol function_parameters) [7554 7559]))                  )
                nil [7520 7816])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7831 7836]))              ) nil [7817 8101])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8117 8122])
                    ("file" variable nil (reparse-symbol function_parameters) [8129 8133]))                  )
                nil [8103 8542])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8559 8564]))                  )
                nil [8544 8784])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8801 8806])
                    ("file" variable nil (reparse-symbol function_parameters) [8813 8817]))                  )
                nil [8786 9181])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9199 9200])
                    ("limit" variable nil (reparse-symbol function_parameters) [9207 9212])
                    ("file" variable nil (reparse-symbol function_parameters) [9219 9223]))                  )
                nil [9183 9686])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9704 9705])
                    ("limit" variable nil (reparse-symbol function_parameters) [9712 9717]))                  )
                nil [9687 9988])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10007 10008])
                    ("limit" variable nil (reparse-symbol function_parameters) [10015 10020]))                  )
                nil [9989 11149])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11164 11166]))                  )
                nil [11150 11286]))          
      :file "traceback.py"
      :pointmax 11286
      :fsize 11285
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195d3dc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("re" include nil nil [428 437])
            ("__all__" variable nil nil [439 498])
            ("_cache" variable nil nil [500 511])
            ("_MAXCACHE" variable nil nil [512 527])
            ("_purge" function (:documentation "Clear the pattern cache") nil [529 596])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [609 613])
                    ("pat" variable nil (reparse-symbol function_parameters) [615 618]))                  )
                nil [597 1192])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT"
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1204 1209])
                    ("pat" variable nil (reparse-symbol function_parameters) [1211 1214]))                  )
                nil [1193 1895])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1912 1916])
                    ("pat" variable nil (reparse-symbol function_parameters) [1918 1921]))                  )
                nil [1896 2320])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2335 2338]))                  )
                nil [2321 3316]))          
      :file "fnmatch.py"
      :pointmax 3316
      :fsize 3315
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195d3fc"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("UF_COMPRESSED" variable nil nil [1589 1615])
            ("UF_HIDDEN" variable nil nil [1648 1673])
            ("SF_ARCHIVED" variable nil nil [1713 1738])
            ("SF_IMMUTABLE" variable nil nil [1739 1764])
            ("SF_APPEND" variable nil nil [1765 1790])
            ("SF_NOUNLINK" variable nil nil [1791 1816])
            ("SF_SNAPSHOT" variable nil nil [1817 1842]))          
      :file "stat.py"
      :pointmax 1843
      :fsize 1842
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195df3c"
      :major-mode python-mode
      :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
      :file "struct.py"
      :pointmax 83
      :fsize 82
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195df5c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Text wrapping and filling.
\"\"\"" code nil nil [1 34])
            ("__revision__" variable nil nil [177 198])
            ("re" include nil nil [200 217])
            ("string" include nil nil [200 217])
            ("try" code nil nil [219 405])
            ("__all__" variable nil nil [693 744])
            ("_whitespace" variable nil nil [1249 1280])
            ("TextWrapper" type
               (:documentation "
    Object for wrapping/filling text.  The public interface consists of
    the wrap() and fill() methods; the other methods are just there for
    subclasses to override in order to tweak the default behaviour.
    If you want to completely replace the main wrapping algorithm,
    you'll probably have to override _wrap_chunks().

    Several instance attributes control various aspects of wrapping:
      width (default: 70)
        the maximum width of wrapped lines (unless break_long_words
        is false)
      initial_indent (default: \"\")
        string that will be prepended to the first line of wrapped
        output.  Counts towards the line's width.
      subsequent_indent (default: \"\")
        string that will be prepended to all lines save the first
        of wrapped output; also counts towards each line's width.
      expand_tabs (default: true)
        Expand tabs in input text to spaces before further processing.
        Each tab will become 1 .. 8 spaces, depending on its position in
        its line.  If false, each tab is treated as a single character.
      replace_whitespace (default: true)
        Replace all whitespace characters in the input text by spaces
        after tab expansion.  Note that if expand_tabs is false and
        replace_whitespace is true, every tab will be converted to a
        single space!
      fix_sentence_endings (default: false)
        Ensure that sentence-ending punctuation is always followed
        by two spaces.  Off by default because the algorithm is
        (unavoidably) imperfect.
      break_long_words (default: true)
        Break words longer than 'width'.  If false, those words will not
        be broken, and some lines might be longer than 'width'.
      break_on_hyphens (default: true)
        Allow breaking hyphenated words. If true, wrapping will occur
        preferably on whitespaces and right after hyphens part of
        compound words.
      drop_whitespace (default: true)
        Drop leading and trailing whitespace from lines.
    "
                :members 
                  ( ("whitespace_trans" variable nil (reparse-symbol indented_block_body) [3356 3428])
                    ("unicode_whitespace_trans" variable nil (reparse-symbol indented_block_body) [3434 3463])
                    ("uspace" variable nil (reparse-symbol indented_block_body) [3468 3486])
                    ("for" code nil (reparse-symbol indented_block_body) [3491 3568])
                    ("wordsep_re" variable nil (reparse-symbol indented_block_body) [3877 4085])
                    ("wordsep_simple_re" variable nil (reparse-symbol indented_block_body) [4327 4367])
                    ("sentence_end_re" variable nil (reparse-symbol indented_block_body) [4492 4839])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5217 5235])
                            ("self" variable nil (reparse-symbol indented_block_body) [5244 5280])
                            ("self" variable nil (reparse-symbol indented_block_body) [5289 5331])
                            ("self" variable nil (reparse-symbol indented_block_body) [5340 5370])
                            ("self" variable nil (reparse-symbol indented_block_body) [5379 5423])
                            ("self" variable nil (reparse-symbol indented_block_body) [5432 5480])
                            ("self" variable nil (reparse-symbol indented_block_body) [5489 5529])
                            ("self" variable nil (reparse-symbol indented_block_body) [5538 5576])
                            ("self" variable nil (reparse-symbol indented_block_body) [5585 5625])
                            ("self" variable nil (reparse-symbol indented_block_body) [5847 5910])
                            ("self" variable nil (reparse-symbol indented_block_body) [5919 6009]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4859 4863])
                            ("width" variable nil (reparse-symbol function_parameters) [4882 4887])
                            ("initial_indent" variable nil (reparse-symbol function_parameters) [4909 4923])
                            ("subsequent_indent" variable nil (reparse-symbol function_parameters) [4945 4962])
                            ("expand_tabs" variable nil (reparse-symbol function_parameters) [4984 4995])
                            ("replace_whitespace" variable nil (reparse-symbol function_parameters) [5019 5037])
                            ("fix_sentence_endings" variable nil (reparse-symbol function_parameters) [5061 5081])
                            ("break_long_words" variable nil (reparse-symbol function_parameters) [5106 5122])
                            ("drop_whitespace" variable nil (reparse-symbol function_parameters) [5146 5161])
                            ("break_on_hyphens" variable nil (reparse-symbol function_parameters) [5185 5201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4846 6010])
                    ("_munge_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6163 6167])
                            ("text" variable nil (reparse-symbol function_parameters) [6169 6173]))                          
                        :documentation "_munge_whitespace(text : string) -> string

        Munge whitespace in text: expand tabs and convert all other
        whitespace characters to spaces.  Eg. \" foo\\\\tbar\\\\n\\\\nbaz\"
        becomes \" foo    bar  baz\".
        ")
                        (reparse-symbol indented_block_body) [6141 6750])
                    ("_split" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6767 6771])
                            ("text" variable nil (reparse-symbol function_parameters) [6773 6777]))                          
                        :documentation "_split(text : string) -> [string]

        Split the text to wrap into indivisible chunks.  Chunks are
        not quite the same as words; see _wrap_chunks() for full
        details.  As an example, the text
          Look, goof-ball -- use the -b option!
        breaks into the following chunks:
          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', 'option!'
        if break_on_hyphens is True, or in:
          'Look,', ' ', 'goof-ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', option!'
        otherwise.
        ")
                        (reparse-symbol indented_block_body) [6756 7840])
                    ("_fix_sentence_endings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7871 7875])
                            ("chunks" variable nil (reparse-symbol function_parameters) [7877 7883]))                          
                        :documentation "_fix_sentence_endings(chunks : [string])

        Correct for sentence endings buried in 'chunks'.  Eg. when the
        original text contains \"... foo.\\\\nBar ...\", munge_whitespace()
        and split() will convert that to [..., \"foo.\", \" \", \"Bar\", ...]
        which has one too few spaces; this method simply changes the one
        space to two.
        ")
                        (reparse-symbol indented_block_body) [7845 8515])
                    ("_handle_long_word" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8542 8546])
                            ("reversed_chunks" variable nil (reparse-symbol function_parameters) [8548 8563])
                            ("cur_line" variable nil (reparse-symbol function_parameters) [8565 8573])
                            ("cur_len" variable nil (reparse-symbol function_parameters) [8575 8582])
                            ("width" variable nil (reparse-symbol function_parameters) [8584 8589]))                          
                        :documentation "_handle_long_word(chunks : [string],
                             cur_line : [string],
                             cur_len : int, width : int)

        Handle a chunk of text (most likely a word, not whitespace) that
        is too long to fit in any line.
        ")
                        (reparse-symbol indented_block_body) [8520 9710])
                    ("_wrap_chunks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10078 10082])
                            ("chunks" variable nil (reparse-symbol function_parameters) [10084 10090]))                          
                        :documentation "_wrap_chunks(chunks : [string]) -> [string]

        Wrap a sequence of text chunks and return a list of lines of
        length 'self.width' or less.  (If 'break_long_words' is false,
        some lines may be longer than this.)  Chunks correspond roughly
        to words and the whitespace between them: each chunk is
        indivisible (modulo 'break_long_words'), but a line break can
        come between any two chunks.  Chunks should not have internal
        whitespace; ie. a chunk is either all whitespace or a \"word\".
        Whitespace chunks will be removed from the beginning and end of
        lines, but apart from that whitespace is preserved.
        ")
                        (reparse-symbol indented_block_body) [10061 12813])
                    ("wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12902 12906])
                            ("text" variable nil (reparse-symbol function_parameters) [12908 12912]))                          
                        :documentation "wrap(text : string) -> [string]

        Reformat the single paragraph in 'text' so it fits in lines of
        no more than 'self.width' columns, and return a list of wrapped
        lines.  Tabs in 'text' are expanded with string.expandtabs(),
        and all other whitespace characters (including newline) are
        converted to space.
        ")
                        (reparse-symbol indented_block_body) [12893 13485])
                    ("fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13499 13503])
                            ("text" variable nil (reparse-symbol function_parameters) [13505 13509]))                          
                        :documentation "fill(text : string) -> string

        Reformat the single paragraph in 'text' to fit in lines of no
        more than 'self.width' columns, and return a new string
        containing the entire wrapped paragraph.
        ")
                        (reparse-symbol indented_block_body) [13490 13791]))                  
                :type "class")
                nil [1282 13791])
            ("wrap" function
               (:documentation "Wrap a single paragraph of text, returning a list of wrapped lines.

    Reformat the single paragraph in 'text' so it fits in lines of no
    more than 'width' columns, and return a list of wrapped lines.  By
    default, tabs in 'text' are expanded with string.expandtabs(), and
    all other whitespace characters (including newline) are converted to
    space.  See TextWrapper class for available keyword args to customize
    wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [13876 13880])
                    ("width" variable nil (reparse-symbol function_parameters) [13882 13887])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13892 13900]))                  )
                nil [13867 14437])
            ("fill" function
               (:documentation "Fill a single paragraph of text, returning a new string.

    Reformat the single paragraph in 'text' to fit in lines of no more
    than 'width' columns, and return a new string containing the entire
    wrapped paragraph.  As with wrap(), tabs are expanded and other
    whitespace characters converted to space.  See TextWrapper class for
    available keyword args to customize wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [14447 14451])
                    ("width" variable nil (reparse-symbol function_parameters) [14453 14458])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14463 14471]))                  )
                nil [14438 14958])
            ("_whitespace_only_re" variable nil nil [15034 15092])
            ("_leading_whitespace_re" variable nil nil [15093 15167])
            ("dedent" function
               (:documentation "Remove any common leading whitespace from every line in `text`.

    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.

    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines \"  hello\" and \"\\\\thello\" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [15180 15184]))                  )
                nil [15169 17043])
            ("if" code nil nil [17044 17216]))          
      :file "textwrap.py"
      :pointmax 17216
      :fsize 17215
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195df7c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    ./python Lib/keyword.py
\"\"\"" code nil nil [24 281])
            ("__all__" variable nil nil [283 316])
            ("kwlist" variable nil nil [318 881])
            ("iskeyword" variable nil nil [883 925])
            ("main" function nil nil [927 1957])
            ("if" code nil nil [1958 1996]))          
      :file "keyword.py"
      :pointmax 1996
      :fsize 1995
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-195df9c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [28 1297])
            ("__about__" variable nil nil [1381 6117])
            ("__all__" variable nil nil [6119 6238])
            ("itertools" include nil nil [6240 6299])
            ("operator" include nil nil [6300 6331])
            ("cmp_lt" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6344 6345])
                ("y" variable nil (reparse-symbol function_parameters) [6347 6348]))              ) nil [6333 6510])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6524 6528])
                    ("item" variable nil (reparse-symbol function_parameters) [6530 6534]))                  )
                nil [6511 6658])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6671 6675]))                  )
                nil [6659 6987])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7004 7008])
                    ("item" variable nil (reparse-symbol function_parameters) [7010 7014]))                  )
                nil [6988 7601])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7618 7622])
                    ("item" variable nil (reparse-symbol function_parameters) [7624 7628]))                  )
                nil [7602 7809])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7822 7823]))                  )
                nil [7810 8338])
            ("_heappushpop_max" function
               (:documentation "Maxheap version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [8360 8364])
                    ("item" variable nil (reparse-symbol function_parameters) [8366 8370]))                  )
                nil [8339 8558])
            ("_heapify_max" function
               (:documentation "Transform list into a maxheap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8576 8577]))                  )
                nil [8559 8727])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8741 8742])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8744 8752]))                  )
                nil [8728 9152])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [9167 9168])
                    ("iterable" variable nil (reparse-symbol function_parameters) [9170 9178]))                  )
                nil [9153 9563])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [9747 9751])
                ("startpos" variable nil (reparse-symbol function_parameters) [9753 9761])
                ("pos" variable nil (reparse-symbol function_parameters) [9763 9766]))              ) nil [9733 10138])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12213 12217])
                ("pos" variable nil (reparse-symbol function_parameters) [12219 12222]))              ) nil [12201 12941])
            ("_siftdown_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12960 12964])
                ("startpos" variable nil (reparse-symbol function_parameters) [12966 12974])
                ("pos" variable nil (reparse-symbol function_parameters) [12976 12979]))              ) nil [12942 13386])
            ("_siftup_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [13403 13407])
                ("pos" variable nil (reparse-symbol function_parameters) [13409 13412]))              ) nil [13387 14165])
            ("try" code nil nil [14203 14262])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [14273 14283]))              ) nil [14263 15563])
            ("_nsmallest" variable nil nil [15642 15664])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [15679 15680])
                    ("iterable" variable nil (reparse-symbol function_parameters) [15682 15690])
                    ("key" variable nil (reparse-symbol function_parameters) [15692 15695]))                  )
                nil [15665 16816])
            ("_nlargest" variable nil nil [16817 16837])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [16851 16852])
                    ("iterable" variable nil (reparse-symbol function_parameters) [16854 16862])
                    ("key" variable nil (reparse-symbol function_parameters) [16864 16867]))                  )
                nil [16838 18014])
            ("if" code nil nil [18015 18296]))          
      :file "heapq.py"
      :pointmax 18296
      :fsize 18295
      :lastmodtime '(23529 36531 0 0)
      :unmatched-syntax '((RETURN 6453 . 6459) (IF 6468 . 6470) (ELSE 6492 . 6496))))
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
