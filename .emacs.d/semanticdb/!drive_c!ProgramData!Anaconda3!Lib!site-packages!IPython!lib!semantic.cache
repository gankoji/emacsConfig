;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Various display related classes.

Authors : MinRK, gregcaporaso, dannystaple
\"\"\"" code nil nil [1 84])
            ("os.path" include nil nil [85 151])
            ("os" include nil nil [152 176])
            ("IPython.core.display" include nil nil [178 224])
            ("__all__" variable nil nil [226 339])
            ("Audio" type
               (:documentation "Create an audio object.

    When this object is returned by an input cell or passed to the
    display function, it will result in Audio controls being displayed
    in the frontend (only works in the notebook).

    Parameters
    ----------
    data : numpy array, list, unicode, str or bytes
        Can be one of

          * Numpy 1d array containing the desired waveform (mono)
          * Numpy 2d array containing waveforms for each channel.
            Shape=(NCHAN, NSAMPLES). For the standard channel order, see
            http://msdn.microsoft.com/en-us/library/windows/hardware/dn653308(v=vs.85).aspx
          * List of float or integer representing the waveform (mono)
          * String containing the filename
          * Bytestring containing raw PCM data or
          * URL pointing to a file on the web.

        If the array option is used the waveform will be normalized.

        If a filename or url is used the format support will be browser
        dependent.
    url : unicode
        A URL to download the data from.
    filename : unicode
        Path to a local file to load the data from.
    embed : boolean
        Should the audio data be embedded using a data URI (True) or should
        the original source be referenced. Set this to True if you want the
        audio to playable later with no internet connection in the notebook.

        Default is `True`, unless the keyword argument `url` is set, then
        default value is `False`.
    rate : integer
        The sampling rate of the raw data.
        Only required when data parameter is being used as an array
    autoplay : bool
        Set to True if the audio should immediately start playing.
        Default is `False`.

    Examples
    --------
    ::

        # Generate a sound
        import numpy as np
        framerate = 44100
        t = np.linspace(0,5,framerate*5)
        data = np.sin(2*np.pi*220*t) + np.sin(2*np.pi*224*t))
        Audio(data,rate=framerate)

        # Can also do stereo or more channels
        dataleft = np.sin(2*np.pi*220*t)
        dataright = np.sin(2*np.pi*224*t)
        Audio([dataleft, dataright],rate=framerate)

        Audio(\"http://www.nch.com.au/acm/8k16bitpcm.wav\")  # From URL
        Audio(url=\"http://www.w3schools.com/html/horse.ogg\")

        Audio('/path/to/sound.wav')  # From file
        Audio(filename='/path/to/sound.ogg')

        Audio(b'RAW_WAV_DATA..)  # From bytes
        Audio(data=b'RAW_WAV_DATA..)

    "
                :superclasses ("DisplayObject")
                :members 
                  ( ("_read_flags" variable nil (reparse-symbol indented_block_body) [2861 2879])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [2988 3129])
                            ("if" code nil (reparse-symbol indented_block_body) [3137 3249])
                            ("if" code nil (reparse-symbol indented_block_body) [3258 3375])
                            ("self" variable nil (reparse-symbol indented_block_body) [3383 3407])
                            ("super" code nil (reparse-symbol indented_block_body) [3416 3482])
                            ("if" code nil (reparse-symbol indented_block_body) [3492 3605]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2898 2902])
                            ("data" variable nil (reparse-symbol function_parameters) [2904 2908])
                            ("filename" variable nil (reparse-symbol function_parameters) [2915 2923])
                            ("url" variable nil (reparse-symbol function_parameters) [2930 2933])
                            ("embed" variable nil (reparse-symbol function_parameters) [2940 2945])
                            ("rate" variable nil (reparse-symbol function_parameters) [2952 2956])
                            ("autoplay" variable nil (reparse-symbol function_parameters) [2963 2971]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2885 3605])
                    ("reload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3621 3625]))                          
                        :documentation "Reload the raw data from file or URL.")
                        (reparse-symbol indented_block_body) [3610 4025])
                    ("_make_wav" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4044 4048])
                            ("data" variable nil (reparse-symbol function_parameters) [4050 4054])
                            ("rate" variable nil (reparse-symbol function_parameters) [4056 4060]))                          
                        :documentation " Transform a numpy array to a PCM bytestring ")
                        (reparse-symbol indented_block_body) [4030 5822])
                    ("_data_and_metadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5850 5854]))                          
                        :documentation "shortcut for returning metadata with url information, if defined")
                        (reparse-symbol indented_block_body) [5827 6097])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6118 6122]))                          )
                        (reparse-symbol indented_block_body) [6102 6464])
                    ("src_attr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6482 6486]))                          )
                        (reparse-symbol indented_block_body) [6469 6884])
                    ("autoplay_attr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6907 6911]))                          )
                        (reparse-symbol indented_block_body) [6889 7018]))                  
                :type "class")
                nil [342 7018])
            ("IFrame" type
               (:documentation "
    Generic class to embed an iframe in an IPython notebook
    "
                :superclasses ("object")
                :members 
                  ( ("iframe" variable nil (reparse-symbol indented_block_body) [7122 7327])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7391 7405])
                            ("self" variable nil (reparse-symbol indented_block_body) [7414 7432])
                            ("self" variable nil (reparse-symbol indented_block_body) [7441 7461])
                            ("self" variable nil (reparse-symbol indented_block_body) [7470 7490]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7346 7350])
                            ("src" variable nil (reparse-symbol function_parameters) [7352 7355])
                            ("width" variable nil (reparse-symbol function_parameters) [7357 7362])
                            ("height" variable nil (reparse-symbol function_parameters) [7364 7370])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7372 7380]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7333 7491])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7512 7516]))                          
                        :documentation "return the embed iframe")
                        (reparse-symbol indented_block_body) [7496 8024]))                  
                :type "class")
                nil [7019 8024])
            ("YouTubeVideo" type
               (:documentation "Class for embedding a YouTube Video in an IPython session, based on its video id.

    e.g. to embed the video from https://www.youtube.com/watch?v=foo , you would
    do::

        vid = YouTubeVideo(\"foo\")
        display(vid)

    To start from 30 seconds::

        vid = YouTubeVideo(\"abc\", start=30)
        display(vid)

    To calculate seconds from time as hours, minutes, seconds use
    :class:`datetime.timedelta`::

        start=int(timedelta(hours=1, minutes=46, seconds=40).total_seconds())

    Other parameters can be provided as documented at
    https://developers.google.com/youtube/player_parameters#Parameters
    
    When converting the notebook using nbconvert, a jpeg representation of the video
    will be inserted in the document.
    "
                :superclasses ("IFrame")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8899 8909])
                            ("src" variable nil (reparse-symbol indented_block_body) [8918 8970])
                            ("super" code nil (reparse-symbol indented_block_body) [8979 9043]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8847 8851])
                            ("id" variable nil (reparse-symbol function_parameters) [8853 8855])
                            ("width" variable nil (reparse-symbol function_parameters) [8857 8862])
                            ("height" variable nil (reparse-symbol function_parameters) [8868 8874])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8880 8888]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8834 9044])
                    ("_repr_jpeg_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9069 9073]))                          )
                        (reparse-symbol indented_block_body) [9053 9309]))                  
                :type "class")
                nil [8025 9309])
            ("VimeoVideo" type
               (:documentation "
    Class for embedding a Vimeo video in an IPython session, based on its video id.
    "
                :superclasses ("IFrame")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("src" variable nil (reparse-symbol indented_block_body) [9506 9557])
                            ("super" code nil (reparse-symbol indented_block_body) [9566 9628]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9454 9458])
                            ("id" variable nil (reparse-symbol function_parameters) [9460 9462])
                            ("width" variable nil (reparse-symbol function_parameters) [9464 9469])
                            ("height" variable nil (reparse-symbol function_parameters) [9475 9481])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9487 9495]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9441 9629]))                  
                :type "class")
                nil [9310 9629])
            ("ScribdDocument" type
               (:documentation "
    Class for embedding a Scribd document in an IPython session

    Use the start_page params to specify a starting point in the document
    Use the view_mode params to specify display type one off scroll | slideshow | book

    e.g to Display Wes' foundational paper about PANDAS in book mode from page 3

    ScribdDocument(71048089, width=800, height=400, start_page=3, view_mode=\"book\")
    "
                :superclasses ("IFrame")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("src" variable nil (reparse-symbol indented_block_body) [10139 10197])
                            ("super" code nil (reparse-symbol indented_block_body) [10206 10272]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10087 10091])
                            ("id" variable nil (reparse-symbol function_parameters) [10093 10095])
                            ("width" variable nil (reparse-symbol function_parameters) [10097 10102])
                            ("height" variable nil (reparse-symbol function_parameters) [10108 10114])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10120 10128]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10074 10273]))                  
                :type "class")
                nil [9630 10273])
            ("FileLink" type
               (:documentation "Class for embedding a local file link in an IPython session, based on path

    e.g. to embed a link that was generated in the IPython notebook as my/data.txt

    you would do::

        local_file = FileLink(\"my/data.txt\")
        display(local_file)

    or in the HTML notebook, just::

        FileLink(\"my/data.txt\")
    "
                :superclasses ("object")
                :members 
                  ( ("html_link_str" variable nil (reparse-symbol indented_block_body) [10641 10694])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        path : str
            path to the file or directory that should be formatted
        url_prefix : str
            prefix to be prepended to all files to form a working link [default:
            '']
        result_html_prefix : str
            text to append to beginning to link [default: '']
        result_html_suffix : str
            text to append at the end of link [default: '<br>']
        \"\"\"" code nil (reparse-symbol indented_block_body) [10867 11320])
                            ("if" code nil (reparse-symbol indented_block_body) [11329 11475])
                            ("self" variable nil (reparse-symbol indented_block_body) [11483 11499])
                            ("self" variable nil (reparse-symbol indented_block_body) [11508 11536])
                            ("self" variable nil (reparse-symbol indented_block_body) [11545 11589])
                            ("self" variable nil (reparse-symbol indented_block_body) [11598 11642]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10713 10717])
                            ("path" variable nil (reparse-symbol function_parameters) [10736 10740])
                            ("url_prefix" variable nil (reparse-symbol function_parameters) [10759 10769])
                            ("result_html_prefix" variable nil (reparse-symbol function_parameters) [10791 10809])
                            ("result_html_suffix" variable nil (reparse-symbol function_parameters) [10831 10849]))                          
                        :documentation "
        Parameters
        ----------
        path : str
            path to the file or directory that should be formatted
        url_prefix : str
            prefix to be prepended to all files to form a working link [default:
            '']
        result_html_prefix : str
            text to append to beginning to link [default: '']
        result_html_suffix : str
            text to append at the end of link [default: '<br>']
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10700 11643])
                    ("_format_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11665 11669]))                          )
                        (reparse-symbol indented_block_body) [11648 11883])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11904 11908]))                          
                        :documentation "return html link to file
        ")
                        (reparse-symbol indented_block_body) [11888 12254])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12272 12276]))                          
                        :documentation "return absolute path to file
        ")
                        (reparse-symbol indented_block_body) [12259 12365]))                  
                :type "class")
                nil [10274 12365])
            ("FileLinks" type
               (:documentation "Class for embedding local file links in an IPython session, based on path

    e.g. to embed links to files that were generated in the IPython notebook
    under ``my/data``, you would do::

        local_files = FileLinks(\"my/data\")
        display(local_files)

    or in the HTML notebook, just::

        FileLinks(\"my/data\")
    "
                :superclasses ("FileLink")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        See :class:`FileLink` for the ``path``, ``url_prefix``,
        ``result_html_prefix`` and ``result_html_suffix`` parameters.

        included_suffixes : list
          Filename suffixes to include when formatting output [default: include
          all files]

        notebook_display_formatter : function
          Used to format links for display in the notebook. See discussion of
          formatter functions below.

        terminal_display_formatter : function
          Used to format links for display in the terminal. See discussion of
          formatter functions below.

        Formatter functions must be of the form::

            f(dirname, fnames, included_suffixes)

        dirname : str
          The name of a directory
        fnames : list
          The files in that directory
        included_suffixes : list
          The file suffixes that should be included in the output (passing None
          meansto include all suffixes in the output in the built-in formatters)
        recursive : boolean
          Whether to recurse into subdirectories. Default is True.

        The function should return a list of lines that will be printed in the
        notebook (if passing notebook_display_formatter) or the terminal (if
        passing terminal_display_formatter). This function is iterated over for
        each directory in self.path. Default formatters are in place, can be
        passed here to support alternative formatting.

        \"\"\"" code nil (reparse-symbol indented_block_body) [13083 14569])
                            ("if" code nil (reparse-symbol indented_block_body) [14578 14720])
                            ("self" variable nil (reparse-symbol indented_block_body) [14728 14770])
                            ("path" variable nil (reparse-symbol indented_block_body) [14850 14873])
                            ("self" variable nil (reparse-symbol indented_block_body) [14883 14899])
                            ("self" variable nil (reparse-symbol indented_block_body) [14908 14936])
                            ("self" variable nil (reparse-symbol indented_block_body) [14945 14989])
                            ("self" variable nil (reparse-symbol indented_block_body) [14998 15042])
                            ("self" code nil (reparse-symbol indented_block_body) [15052 15169])
                            ("self" code nil (reparse-symbol indented_block_body) [15178 15295])
                            ("self" variable nil (reparse-symbol indented_block_body) [15305 15331]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12755 12759])
                            ("path" variable nil (reparse-symbol function_parameters) [12778 12782])
                            ("url_prefix" variable nil (reparse-symbol function_parameters) [12801 12811])
                            ("included_suffixes" variable nil (reparse-symbol function_parameters) [12833 12850])
                            ("result_html_prefix" variable nil (reparse-symbol function_parameters) [12874 12892])
                            ("result_html_suffix" variable nil (reparse-symbol function_parameters) [12914 12932])
                            ("notebook_display_formatter" variable nil (reparse-symbol function_parameters) [12958 12984])
                            ("terminal_display_formatter" variable nil (reparse-symbol function_parameters) [13008 13034])
                            ("recursive" variable nil (reparse-symbol function_parameters) [13058 13067]))                          
                        :documentation "
        See :class:`FileLink` for the ``path``, ``url_prefix``,
        ``result_html_prefix`` and ``result_html_suffix`` parameters.

        included_suffixes : list
          Filename suffixes to include when formatting output [default: include
          all files]

        notebook_display_formatter : function
          Used to format links for display in the notebook. See discussion of
          formatter functions below.

        terminal_display_formatter : function
          Used to format links for display in the terminal. See discussion of
          formatter functions below.

        Formatter functions must be of the form::

            f(dirname, fnames, included_suffixes)

        dirname : str
          The name of a directory
        fnames : list
          The files in that directory
        included_suffixes : list
          The file suffixes that should be included in the output (passing None
          meansto include all suffixes in the output in the built-in formatters)
        recursive : boolean
          Whether to recurse into subdirectories. Default is True.

        The function should return a list of lines that will be printed in the
        notebook (if passing notebook_display_formatter) or the terminal (if
        passing terminal_display_formatter). This function is iterated over for
        each directory in self.path. Default formatters are in place, can be
        passed here to support alternative formatting.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12742 15332])
                    ("_get_display_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15364 15368])
                            ("dirname_output_format" variable nil (reparse-symbol function_parameters) [15401 15422])
                            ("fname_output_format" variable nil (reparse-symbol function_parameters) [15455 15474])
                            ("fp_format" variable nil (reparse-symbol function_parameters) [15507 15516])
                            ("fp_cleaner" variable nil (reparse-symbol function_parameters) [15549 15559]))                          
                        :documentation " generate built-in formatter function

           this is used to define both the notebook and terminal built-in
            formatters as they only differ by some wrapper text for each entry

           dirname_output_format: string to use for formatting directory
            names, dirname will be substituted for a single \"%s\" which
            must appear in this string
           fname_output_format: string to use for formatting file names,
            if a single \"%s\" appears in the string, fname will be substituted
            if two \"%s\" appear in the string, the path to fname will be
             substituted for the first and fname will be substituted for the
             second
           fp_format: string to use for formatting filepaths, must contain
            exactly two \"%s\" and the dirname will be subsituted for the first
            and fname will be substituted for the second
        ")
                        (reparse-symbol indented_block_body) [15337 18042]))                  
                :type "class")
                nil [12366 20573]))          
      :file "display.py"
      :pointmax 20573
      :fsize 20572
      :lastmodtime '(22831 20631 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!ProgramData!Anaconda3!Lib!site-packages!IPython!lib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
