;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Top-level display functions for displaying object in different formats.\"\"\"" code nil nil [25 102])
            ("try" code nil nil [207 337])
            ("binascii" include nil nil [338 366])
            ("json" include nil nil [367 378])
            ("mimetypes" include nil nil [379 395])
            ("os" include nil nil [396 405])
            ("struct" include nil nil [406 419])
            ("sys" include nil nil [420 430])
            ("warnings" include nil nil [431 446])
            ("IPython.utils.py3compat" include nil nil [448 496])
            ("IPython.testing.skipdoctest" include nil nil [497 549])
            ("__all__" variable nil nil [551 1010])
            ("_safe_exists" function
               (:documentation "Check path, but don't let exceptions raise"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [1208 1212]))                  )
                nil [1191 1356])
            ("_merge" function
               (:documentation "Like update, but merges sub-dicts instead of clobbering at the top level.

    Updates d1 in-place
    "
                :arguments 
                  ( ("d1" variable nil (reparse-symbol function_parameters) [1368 1370])
                    ("d2" variable nil (reparse-symbol function_parameters) [1372 1374]))                  )
                nil [1357 1664])
            ("_display_mimetype" function
               (:documentation "internal implementation of all display_foo methods

    Parameters
    ----------
    mimetype : str
        The mimetype to be published (e.g. 'image/png')
    objs : tuple of objects
        The Python objects to display, or if raw=True raw text data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("mimetype" variable nil (reparse-symbol function_parameters) [1687 1695])
                    ("objs" variable nil (reparse-symbol function_parameters) [1697 1701])
                    ("raw" variable nil (reparse-symbol function_parameters) [1703 1706])
                    ("metadata" variable nil (reparse-symbol function_parameters) [1714 1722]))                  )
                nil [1665 2512])
            ("publish_display_data" function
               (:documentation "Publish data and metadata to all frontends.

    See the ``display_data`` message in the messaging documentation for
    more details about this message type.

    The following MIME types are currently implemented:

    * text/plain
    * text/html
    * text/markdown
    * text/latex
    * application/json
    * application/javascript
    * image/png
    * image/jpeg
    * image/svg+xml

    Parameters
    ----------
    data : dict
        A dictionary having keys that are valid MIME types (like
        'text/plain' or 'image/svg+xml') and values that are the data for
        that MIME type. The data itself must be a JSON'able data
        structure. Minimally all data should have the 'text/plain' data,
        which can be displayed by all frontends. If more than the plain
        text is given, it is up to the frontend to decide which
        representation to use.
    metadata : dict
        A dictionary for metadata related to the data. This can contain
        arbitrary key, value pairs that frontends can use to interpret
        the data. mime-type keys matching those in data can be used
        to specify metadata about particular representations.
    source : str, deprecated
        Unused.
    transient : dict, keyword-only
        A dictionary of transient data, such as display_id.
        "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [2760 2764])
                    ("metadata" variable nil (reparse-symbol function_parameters) [2766 2774])
                    ("source" variable nil (reparse-symbol function_parameters) [2781 2787])
                    ("transient" variable nil (reparse-symbol function_parameters) [2797 2806])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [2813 2821]))                  )
                nil [2735 4607])
            ("_new_id" function (:documentation "Generate a new random text id with urandom") nil [4609 4728])
            ("display" function
               (:documentation "Display a Python object in all frontends.

    By default all representations will be computed and sent to the frontends.
    Frontends can decide which representation is used and how.

    In terminal IPython this will be similar to using :func:`print`, for use in richer
    frontends see Jupyter notebook examples with rich display logic.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display.
    raw : bool, optional
        Are the objects to be displayed already mimetype-keyed dicts of raw display data,
        or Python objects that need to be formatted before display? [default: False]
    include : list, tuple or set, optional
        A list of format type strings (MIME types) to include in the
        format data dict. If this is set *only* the format types included
        in this list will be computed.
    exclude : list, tuple or set, optional
        A list of format type strings (MIME types) to exclude in the format
        data dict. If this is set all format types will be computed,
        except for those included in this argument.
    metadata : dict, optional
        A dictionary of metadata to associate with the output.
        mime-type keys in this dictionary will be associated with the individual
        representation formats, if they exist.
    transient : dict, optional
        A dictionary of transient data to associate with the output.
        Data in this dict should not be persisted to files (e.g. notebooks).
    display_id : str, bool optional
        Set an id for the display.
        This id can be used for updating this display area later via update_display.
        If given as `True`, generate a new `display_id`
    kwargs: additional keyword-args, optional
        Additional keyword-arguments are passed through to the display publisher.

    Returns
    -------

    handle: DisplayHandle
        Returns a handle on updatable displays for use with :func:`update_display`,
        if `display_id` is given. Returns :any:`None` if no `display_id` is given
        (default).

    Examples
    --------

    >>> class Json(object):
    ...     def __init__(self, json):
    ...         self.json = json
    ...     def _repr_pretty_(self, pp, cycle):
    ...         import json
    ...         pp.text(json.dumps(self.json, indent=2))
    ...     def __repr__(self):
    ...         return str(self.json)
    ...

    >>> d = Json({1:2, 3: {4:5}})

    >>> print(d)
    {1: 2, 3: {4: 5}}

    >>> display(d)
    {
      \"1\": 2,
      \"3\": {
        \"4\": 5
      }
    }

    >>> def int_formatter(integer, pp, cycle):
    ...     pp.text('I'*integer)

    >>> plain = get_ipython().display_formatter.formatters['text/plain']
    >>> plain.for_type(int, int_formatter)
    <function _repr_pprint at 0x...>
    >>> display(7-5)
    II

    >>> del plain.type_printers[int]
    >>> display(7-5)
    2

    See Also
    --------

    :func:`update_display`

    Notes
    -----

    In Python, objects can declare their textual representation using the
    `__repr__` method. IPython expands on this idea and allows objects to declare
    other, rich representations including:

      - HTML
      - JSON
      - PNG
      - JPEG
      - SVG
      - LaTeX

    A single object can declare some or all of these representations; all are
    handled by IPython's display system.

    The main idea of the first approach is that you have to implement special
    display methods when you define your class, one for each representation you
    want to use. Here is a list of the names of the special methods and the
    values they must return:

      - `_repr_html_`: return raw HTML as a string
      - `_repr_json_`: return a JSONable dict
      - `_repr_jpeg_`: return raw JPEG data
      - `_repr_png_`: return raw PNG data
      - `_repr_svg_`: return raw SVG data as a string
      - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\".
      - `_repr_mimebundle_`: return a full mimebundle containing the mapping
      from all mimetypes to data

    When you are directly writing your own classes, you can adapt them for
    display in IPython by following the above approach. But in practice, you
    often need to work with existing classes that you can't easily modify.

    You can refer to the documentation on IPython display formatters in order to
    register custom formatters for already existing types.

    .. versionadded:: 5.4 display available without import
    .. versionadded:: 6.1 display available without import

    Since IPython 5.4 and 6.1 :func:`display` is automatically made available to
    the user without import. If you are using display in a document that might
    be used in a pure python context or with older version of IPython, use the
    following import at the top of your file::

        from IPython.display import display

    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [4742 4747])
                    ("include" variable nil (reparse-symbol function_parameters) [4749 4756])
                    ("exclude" variable nil (reparse-symbol function_parameters) [4763 4770])
                    ("metadata" variable nil (reparse-symbol function_parameters) [4777 4785])
                    ("transient" variable nil (reparse-symbol function_parameters) [4792 4801])
                    ("display_id" variable nil (reparse-symbol function_parameters) [4808 4818])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4825 4833]))                  )
                nil [4730 10889])
            ("update_display" function
               (:documentation "Update an existing display by id

    Parameters
    ----------

    obj:
        The object with which to update the display
    display_id: keyword-only
        The id of the display to update

    See Also
    --------

    :func:`display`
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [10950 10953])
                    ("display_id" variable nil (reparse-symbol function_parameters) [10958 10968])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [10970 10978]))                  )
                nil [10931 11317])
            ("DisplayHandle" type
               (:documentation "A handle on an updatable display

    Call `.update(obj)` to display a new object.

    Call `.display(obj`) to add a new instance of this display,
    and update existing instances.

    See Also
    --------

        :func:`display`, :func:`update_display`

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [11673 11731])
                            ("self" variable nil (reparse-symbol indented_block_body) [11739 11767]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11641 11645])
                            ("display_id" variable nil (reparse-symbol function_parameters) [11647 11657]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11628 11768])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11786 11790]))                          )
                        (reparse-symbol indented_block_body) [11773 11874])
                    ("display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11891 11895])
                            ("obj" variable nil (reparse-symbol function_parameters) [11897 11900])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11902 11910]))                          
                        :documentation "Make a new display with my id, updating existing instances.
        
        Parameters
        ----------
        
        obj:
            object to display
        **kwargs:
            additional keyword arguments passed to display
        ")
                        (reparse-symbol indented_block_body) [11879 12231])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12247 12251])
                            ("obj" variable nil (reparse-symbol function_parameters) [12253 12256])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12258 12266]))                          
                        :documentation "Update existing displays with my id
        
        Parameters
        ----------
        
        obj:
            object to display
        **kwargs:
            additional keyword arguments passed to update_display
        ")
                        (reparse-symbol indented_block_body) [12236 12577]))                  
                :type "class")
                nil [11319 12577])
            ("display_pretty" function
               (:documentation "Display the pretty (default) representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw text data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [12598 12603])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [12605 12613]))                  )
                nil [12579 13126])
            ("display_html" function
               (:documentation "Display the HTML representation of an object.

    Note: If raw=False and the object does not have a HTML
    representation, no HTML will be shown.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw HTML data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13152 13160]))                  )
                nil [13128 13763])
            ("display_markdown" function
               (:documentation "Displays the Markdown representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw markdown data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [13786 13791])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13793 13801]))                  )
                nil [13765 14315])
            ("display_svg" function
               (:documentation "Display the SVG representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw svg data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [14333 14338])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14340 14348]))                  )
                nil [14317 14850])
            ("display_png" function
               (:documentation "Display the PNG representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw png data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [14868 14873])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14875 14883]))                  )
                nil [14852 15381])
            ("display_jpeg" function
               (:documentation "Display the JPEG representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw JPEG data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [15400 15405])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [15407 15415]))                  )
                nil [15383 15916])
            ("display_latex" function
               (:documentation "Display the LaTeX representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw latex data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [15936 15941])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [15943 15951]))                  )
                nil [15918 16454])
            ("display_json" function
               (:documentation "Display the JSON representation of an object.

    Note that not many frontends support displaying JSON.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw json data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [16473 16478])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16480 16488]))                  )
                nil [16456 17054])
            ("display_javascript" function
               (:documentation "Display the Javascript representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw javascript data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [17079 17084])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [17086 17094]))                  )
                nil [17056 17619])
            ("display_pdf" function
               (:documentation "Display the PDF representation of an object.

    Parameters
    ----------
    objs : tuple of objects
        The Python objects to display, or if raw=True raw javascript data to
        display.
    raw : bool
        Are the data objects raw data or Python objects that need to be
        formatted before display? [default: False]
    metadata : dict (optional)
        Metadata to be associated with the specific mimetype output.
    "
                :arguments 
                  ( ("objs" variable nil (reparse-symbol function_parameters) [17637 17642])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [17644 17652]))                  )
                nil [17621 18163])
            ("DisplayObject" type
               (:documentation "An object that wraps data to be displayed."
                :superclasses ("object")
                :members 
                  ( ("_read_flags" variable nil (reparse-symbol indented_block_body) [18428 18445])
                    ("_show_mem_addr" variable nil (reparse-symbol indented_block_body) [18450 18472])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a display object given raw data.

        When this object is returned by an expression or passed to the
        display function, it will result in the data being displayed
        in the frontend. The MIME type of the data should match the
        subclasses used, so the Png subclass should be used for 'image/png'
        data. If the data is a URL, the data will first be downloaded
        and then displayed. If

        Parameters
        ----------
        data : unicode, str or bytes
            The raw data or a URL or file to load the data from
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        \"\"\"" code nil (reparse-symbol indented_block_body) [18542 19272])
                            ("if" code nil (reparse-symbol indented_block_body) [19281 19616])
                            ("self" variable nil (reparse-symbol indented_block_body) [19625 19641])
                            ("self" variable nil (reparse-symbol indented_block_body) [19650 19664])
                            ("self" variable nil (reparse-symbol indented_block_body) [19673 19697])
                            ("self" code nil (reparse-symbol indented_block_body) [19707 19720])
                            ("self" code nil (reparse-symbol indented_block_body) [19729 19747]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18491 18495])
                            ("data" variable nil (reparse-symbol function_parameters) [18497 18501])
                            ("url" variable nil (reparse-symbol function_parameters) [18508 18511])
                            ("filename" variable nil (reparse-symbol function_parameters) [18518 18526]))                          
                        :documentation "Create a display object given raw data.

        When this object is returned by an expression or passed to the
        display function, it will result in the data being displayed
        in the frontend. The MIME type of the data should match the
        subclasses used, so the Png subclass should be used for 'image/png'
        data. If the data is a URL, the data will first be downloaded
        and then displayed. If

        Parameters
        ----------
        data : unicode, str or bytes
            The raw data or a URL or file to load the data from
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18478 19748])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19766 19770]))                          )
                        (reparse-symbol indented_block_body) [19753 19993])
                    ("_check_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20014 20018]))                          
                        :documentation "Override in subclasses if there's something to check.")
                        (reparse-symbol indented_block_body) [19998 20102])
                    ("reload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20118 20122]))                          
                        :documentation "Reload the raw data from file or URL.")
                        (reparse-symbol indented_block_body) [20107 21100]))                  
                :type "class")
                nil [18341 21100])
            ("TextDisplayObject" type
               (:documentation "Validate that display data is text"
                :superclasses ("DisplayObject")
                :members 
                  ( ("_check_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21206 21210]))                          )
                        (reparse-symbol indented_block_body) [21190 21376]))                  
                :type "class")
                nil [21101 21376])
            ("Pretty" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_pretty_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21433 21437]))                          )
                        (reparse-symbol indented_block_body) [21415 21465]))                  
                :type "class")
                nil [21377 21465])
            ("HTML" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21519 21523]))                          )
                        (reparse-symbol indented_block_body) [21503 21551])
                    ("__html__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21569 21573]))                          
                        :documentation "
        This method exists to inform other HTML-using modules (e.g. Markupsafe,
        htmltag, etc) that this object is HTML and does not need things like
        special characters (<>&) escaped.
        ")
                        (reparse-symbol indented_block_body) [21556 21833]))                  
                :type "class")
                nil [21467 21833])
            ("Markdown" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_markdown_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21895 21899]))                          )
                        (reparse-symbol indented_block_body) [21875 21927]))                  
                :type "class")
                nil [21835 21927])
            ("Math" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_latex_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21982 21986]))                          )
                        (reparse-symbol indented_block_body) [21965 22050]))                  
                :type "class")
                nil [21929 22050])
            ("Latex" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("_repr_latex_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22106 22110]))                          )
                        (reparse-symbol indented_block_body) [22089 22138]))                  
                :type "class")
                nil [22052 22138])
            ("SVG" type
               (:superclasses ("DisplayObject")
                :members 
                  ( ("_read_flags" variable nil (reparse-symbol indented_block_body) [22171 22189])
                    ("_data" variable nil (reparse-symbol indented_block_body) [22289 22301])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22330 22334]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22307 22363])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22394 22398])
                            ("svg" variable nil (reparse-symbol function_parameters) [22400 22403]))                          
                        :decorators 
                          ( ("data.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22368 22916])
                    ("_repr_svg_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22936 22940]))                          )
                        (reparse-symbol indented_block_body) [22921 22968]))                  
                :type "class")
                nil [22140 22968])
            ("JSON" type
               (:documentation "JSON expects a JSON-able dict or list

    not an already-serialized JSON string.

    Scalar types (None, number, string) are not allowed, only dict or list containers.
    "
                :superclasses ("DisplayObject")
                :members 
                  ( ("_data" variable nil (reparse-symbol indented_block_body) [23267 23279])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a JSON display object given raw data.

        Parameters
        ----------
        data : dict or list
            JSON data to display. Not an already-serialized JSON string.
            Scalar types (None, number, string) are not allowed, only dict
            or list containers.
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        expanded : boolean
            Metadata to control whether a JSON display component is expanded.
        metadata: dict
            Specify extra metadata to attach to the json display object.
        \"\"\"" code nil (reparse-symbol indented_block_body) [23389 24046])
                            ("self" variable nil (reparse-symbol indented_block_body) [24055 24093])
                            ("if" code nil (reparse-symbol indented_block_body) [24102 24158])
                            ("if" code nil (reparse-symbol indented_block_body) [24166 24218])
                            ("super" code nil (reparse-symbol indented_block_body) [24226 24291]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23297 23301])
                            ("data" variable nil (reparse-symbol function_parameters) [23303 23307])
                            ("url" variable nil (reparse-symbol function_parameters) [23314 23317])
                            ("filename" variable nil (reparse-symbol function_parameters) [23324 23332])
                            ("expanded" variable nil (reparse-symbol function_parameters) [23339 23347])
                            ("metadata" variable nil (reparse-symbol function_parameters) [23355 23363])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23370 23378]))                          
                        :documentation "Create a JSON display object given raw data.

        Parameters
        ----------
        data : dict or list
            JSON data to display. Not an already-serialized JSON string.
            Scalar types (None, number, string) are not allowed, only dict
            or list containers.
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        expanded : boolean
            Metadata to control whether a JSON display component is expanded.
        metadata: dict
            Specify extra metadata to attach to the json display object.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23284 24292])
                    ("_check_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24313 24317]))                          )
                        (reparse-symbol indented_block_body) [24297 24509])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24537 24541]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24514 24570])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24601 24605])
                            ("data" variable nil (reparse-symbol function_parameters) [24607 24611]))                          
                        :decorators 
                          ( ("data.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24575 24852])
                    ("_data_and_metadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24880 24884]))                          )
                        (reparse-symbol indented_block_body) [24857 24927])
                    ("_repr_json_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24948 24952]))                          )
                        (reparse-symbol indented_block_body) [24932 24996]))                  
                :type "class")
                nil [22970 24996])
            ("_css_t" variable nil nil [24997 25109])
            ("_lib_t1" variable nil nil [25111 25159])
            ("_lib_t2" variable nil nil [25160 25180])
            ("GeoJSON" type
               (:documentation "GeoJSON expects JSON-able dict

    not an already-serialized JSON string.

    Scalar types (None, number, string) are not allowed, only dict containers.
    "
                :superclasses ("JSON")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a GeoJSON display object given raw data.

        Parameters
        ----------
        data : dict or list
            VegaLite data. Not an already-serialized JSON string.
            Scalar types (None, number, string) are not allowed, only dict
            or list containers.
        url_template : string
            Leaflet TileLayer URL template: http://leafletjs.com/reference.html#url-template
        layer_options : dict
            Leaflet TileLayer options: http://leafletjs.com/reference.html#tilelayer-options
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        metadata: dict
            Specify extra metadata to attach to the json display object.

        Examples
        --------

        The following will display an interactive map of Mars with a point of
        interest on frontend that do support GeoJSON display.

            >>> from IPython.display import GeoJSON

            >>> GeoJSON(data={
            ...     \"type\": \"Feature\",
            ...     \"geometry\": {
            ...         \"type\": \"Point\",
            ...         \"coordinates\": [-81.327, 296.038]
            ...     }
            ... },
            ... url_template=\"http://s3-eu-west-1.amazonaws.com/whereonmars.cartodb.net/{basemap_id}/{z}/{x}/{y}.png\",
            ... layer_options={
            ...     \"basemap_id\": \"celestia_mars-shaded-16k_global\",
            ...     \"attribution\" : \"Celestia/praesepe\",
            ...     \"minZoom\" : 0,
            ...     \"maxZoom\" : 18,
            ... })
            <IPython.core.display.GeoJSON object>

        In the terminal IPython, you will only see the text representation of
        the GeoJSON object.

        \"\"\"" code nil (reparse-symbol indented_block_body) [25427 27219])
                            ("super" code nil (reparse-symbol indented_block_body) [27237 27283]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25395 25399])
                            ("args" variable nil (reparse-symbol function_parameters) [25401 25406])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25408 25416]))                          
                        :documentation "Create a GeoJSON display object given raw data.

        Parameters
        ----------
        data : dict or list
            VegaLite data. Not an already-serialized JSON string.
            Scalar types (None, number, string) are not allowed, only dict
            or list containers.
        url_template : string
            Leaflet TileLayer URL template: http://leafletjs.com/reference.html#url-template
        layer_options : dict
            Leaflet TileLayer options: http://leafletjs.com/reference.html#tilelayer-options
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        metadata: dict
            Specify extra metadata to attach to the json display object.

        Examples
        --------

        The following will display an interactive map of Mars with a point of
        interest on frontend that do support GeoJSON display.

            >>> from IPython.display import GeoJSON

            >>> GeoJSON(data={
            ...     \"type\": \"Feature\",
            ...     \"geometry\": {
            ...         \"type\": \"Point\",
            ...         \"coordinates\": [-81.327, 296.038]
            ...     }
            ... },
            ... url_template=\"http://s3-eu-west-1.amazonaws.com/whereonmars.cartodb.net/{basemap_id}/{z}/{x}/{y}.png\",
            ... layer_options={
            ...     \"basemap_id\": \"celestia_mars-shaded-16k_global\",
            ...     \"attribution\" : \"Celestia/praesepe\",
            ...     \"minZoom\" : 0,
            ...     \"maxZoom\" : 18,
            ... })
            <IPython.core.display.GeoJSON object>

        In the terminal IPython, you will only see the text representation of
        the GeoJSON object.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25382 27284])
                    ("_ipython_display_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27312 27316]))                          )
                        (reparse-symbol indented_block_body) [27290 27590]))                  
                :type "class")
                nil [25182 27590])
            ("Javascript" type
               (:superclasses ("TextDisplayObject")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a Javascript display object given raw data.

        When this object is returned by an expression or passed to the
        display function, it will result in the data being displayed
        in the frontend. If the data is a URL, the data will first be
        downloaded and then displayed.

        In the Notebook, the containing element will be available as `element`,
        and jQuery will be available.  Content appended to `element` will be
        visible in the output area.

        Parameters
        ----------
        data : unicode, str or bytes
            The Javascript source code or a URL to download it from.
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        lib : list or str
            A sequence of Javascript library URLs to load asynchronously before
            running the source code. The full URLs of the libraries should
            be given. A single Javascript library URL can also be given as a
            string.
        css: : list or str
            A sequence of css files to load before running the source code.
            The full URLs of the css files should be given. A single css URL
            can also be given as a string.
        \"\"\"" code nil (reparse-symbol indented_block_body) [27717 29022])
                            ("if" code nil (reparse-symbol indented_block_body) [29031 29127])
                            ("if" code nil (reparse-symbol indented_block_body) [29135 29231])
                            ("if" code nil (reparse-symbol indented_block_body) [29239 29341])
                            ("if" code nil (reparse-symbol indented_block_body) [29349 29451])
                            ("self" variable nil (reparse-symbol indented_block_body) [29459 29473])
                            ("self" variable nil (reparse-symbol indented_block_body) [29482 29496])
                            ("super" code nil (reparse-symbol indented_block_body) [29505 29576]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27646 27650])
                            ("data" variable nil (reparse-symbol function_parameters) [27652 27656])
                            ("url" variable nil (reparse-symbol function_parameters) [27663 27666])
                            ("filename" variable nil (reparse-symbol function_parameters) [27673 27681])
                            ("lib" variable nil (reparse-symbol function_parameters) [27688 27691])
                            ("css" variable nil (reparse-symbol function_parameters) [27698 27701]))                          
                        :documentation "Create a Javascript display object given raw data.

        When this object is returned by an expression or passed to the
        display function, it will result in the data being displayed
        in the frontend. If the data is a URL, the data will first be
        downloaded and then displayed.

        In the Notebook, the containing element will be available as `element`,
        and jQuery will be available.  Content appended to `element` will be
        visible in the output area.

        Parameters
        ----------
        data : unicode, str or bytes
            The Javascript source code or a URL to download it from.
        url : unicode
            A URL to download the data from.
        filename : unicode
            Path to a local file to load the data from.
        lib : list or str
            A sequence of Javascript library URLs to load asynchronously before
            running the source code. The full URLs of the libraries should
            be given. A single Javascript library URL can also be given as a
            string.
        css: : list or str
            A sequence of css files to load before running the source code.
            The full URLs of the css files should be given. A single css URL
            can also be given as a string.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27633 29577])
                    ("_repr_javascript_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29604 29608]))                          )
                        (reparse-symbol indented_block_body) [29582 29812]))                  
                :type "class")
                nil [27591 29812])
            ("'\\x89PNG\\r\\n\\x1a\\n'" code nil nil [29863 29882])
            ("'\\xff\\xd8'" code nil nil [29892 29902])
            ("_pngxy" function
               (:documentation "read the (width, height) from a PNG header"
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [29915 29919]))                  )
                nil [29904 30112])
            ("_jpegxy" function
               (:documentation "read the (width, height) from a JPEG header"
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [30125 30129]))                  )
                nil [30113 30624])
            ("Image" type
               (:superclasses ("DisplayObject")
                :members 
                  ( ("_read_flags" variable nil (reparse-symbol indented_block_body) [30658 30676])
                    ("_FMT_JPEG" variable nil (reparse-symbol indented_block_body) [30681 30700])
                    ("_FMT_PNG" variable nil (reparse-symbol indented_block_body) [30705 30722])
                    ("_ACCEPTABLE_EMBEDDINGS" variable nil (reparse-symbol indented_block_body) [30727 30773])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a PNG/JPEG image object given raw data.

        When this object is returned by an input cell or passed to the
        display function, it will result in the image being displayed
        in the frontend.

        Parameters
        ----------
        data : unicode, str or bytes
            The raw image data or a URL or filename to load the data from.
            This always results in embedded image data.
        url : unicode
            A URL to download the data from. If you specify `url=`,
            the image data will not be embedded unless you also specify `embed=True`.
        filename : unicode
            Path to a local file to load the data from.
            Images from a file are always embedded.
        format : unicode
            The format of the image data (png/jpeg/jpg). If a filename or URL is given
            for format will be inferred from the filename extension.
        embed : bool
            Should the image data be embedded using a data URI (True) or be
            loaded using an <img> tag. Set this to True if you want the image
            to be viewable later with no internet connection in the notebook.

            Default is `True`, unless the keyword argument `url` is set, then
            default value is `False`.

            Note that QtConsole is not able to display images if `embed` is set to `False`
        width : int
            Width in pixels to which to constrain the image in html
        height : int
            Height in pixels to which to constrain the image in html
        retina : bool
            Automatically set the width and height to half of the measured
            width and height.
            This only works for embedded images because it reads the width/height
            from image data.
            For non-embedded images, you can just set the desired display width
            and height directly.
        unconfined: bool
            Set unconfined=True to disable max-width confinement of the image.
        metadata: dict
            Specify extra metadata to attach to the image.

        Examples
        --------
        # embedded image data, works in qtconsole and notebook
        # when passed positionally, the first arg can be any of raw image data,
        # a URL, or a filename from which to load image data.
        # The result is always embedding image data for inline images.
        Image('http://www.google.fr/images/srpr/logo3w.png')
        Image('/path/to/image.jpg')
        Image(b'RAW_PNG_DATA...')

        # Specifying Image(url=...) does not embed the image data,
        # it only generates `<img>` tag with a link to the source.
        # This will not work in the qtconsole or offline.
        Image(url='http://www.google.fr/images/srpr/logo3w.png')

        \"\"\"" code nil (reparse-symbol indented_block_body) [30974 33779])
                            ("if" code nil (reparse-symbol indented_block_body) [33788 34224])
                            ("if" code nil (reparse-symbol indented_block_body) [34233 34760])
                            ("if" code nil (reparse-symbol indented_block_body) [34816 34862])
                            ("if" code nil (reparse-symbol indented_block_body) [34871 34959])
                            ("self" variable nil (reparse-symbol indented_block_body) [34968 34996])
                            ("" code nil (reparse-symbol indented_block_body) [35050 35063])
                            ("if" code nil (reparse-symbol indented_block_body) [35073 35222])
                            ("self" variable nil (reparse-symbol indented_block_body) [35230 35248])
                            ("self" variable nil (reparse-symbol indented_block_body) [35257 35277])
                            ("self" variable nil (reparse-symbol indented_block_body) [35286 35306])
                            ("self" variable nil (reparse-symbol indented_block_body) [35315 35343])
                            ("self" variable nil (reparse-symbol indented_block_body) [35352 35376])
                            ("super" code nil (reparse-symbol indented_block_body) [35385 35451])
                            ("if" code nil (reparse-symbol indented_block_body) [35461 35505]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30792 30796])
                            ("data" variable nil (reparse-symbol function_parameters) [30798 30802])
                            ("url" variable nil (reparse-symbol function_parameters) [30809 30812])
                            ("filename" variable nil (reparse-symbol function_parameters) [30819 30827])
                            ("format" variable nil (reparse-symbol function_parameters) [30834 30840])
                            ("embed" variable nil (reparse-symbol function_parameters) [30864 30869])
                            ("width" variable nil (reparse-symbol function_parameters) [30876 30881])
                            ("height" variable nil (reparse-symbol function_parameters) [30888 30894])
                            ("retina" variable nil (reparse-symbol function_parameters) [30901 30907])
                            ("unconfined" variable nil (reparse-symbol function_parameters) [30932 30942])
                            ("metadata" variable nil (reparse-symbol function_parameters) [30950 30958]))                          
                        :documentation "Create a PNG/JPEG image object given raw data.

        When this object is returned by an input cell or passed to the
        display function, it will result in the image being displayed
        in the frontend.

        Parameters
        ----------
        data : unicode, str or bytes
            The raw image data or a URL or filename to load the data from.
            This always results in embedded image data.
        url : unicode
            A URL to download the data from. If you specify `url=`,
            the image data will not be embedded unless you also specify `embed=True`.
        filename : unicode
            Path to a local file to load the data from.
            Images from a file are always embedded.
        format : unicode
            The format of the image data (png/jpeg/jpg). If a filename or URL is given
            for format will be inferred from the filename extension.
        embed : bool
            Should the image data be embedded using a data URI (True) or be
            loaded using an <img> tag. Set this to True if you want the image
            to be viewable later with no internet connection in the notebook.

            Default is `True`, unless the keyword argument `url` is set, then
            default value is `False`.

            Note that QtConsole is not able to display images if `embed` is set to `False`
        width : int
            Width in pixels to which to constrain the image in html
        height : int
            Height in pixels to which to constrain the image in html
        retina : bool
            Automatically set the width and height to half of the measured
            width and height.
            This only works for embedded images because it reads the width/height
            from image data.
            For non-embedded images, you can just set the desired display width
            and height directly.
        unconfined: bool
            Set unconfined=True to disable max-width confinement of the image.
        metadata: dict
            Specify extra metadata to attach to the image.

        Examples
        --------
        # embedded image data, works in qtconsole and notebook
        # when passed positionally, the first arg can be any of raw image data,
        # a URL, or a filename from which to load image data.
        # The result is always embedding image data for inline images.
        Image('http://www.google.fr/images/srpr/logo3w.png')
        Image('/path/to/image.jpg')
        Image(b'RAW_PNG_DATA...')

        # Specifying Image(url=...) does not embed the image data,
        # it only generates `<img>` tag with a link to the source.
        # This will not work in the qtconsole or offline.
        Image(url='http://www.google.fr/images/srpr/logo3w.png')

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30779 35505])
                    ("_retina_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35528 35532]))                          
                        :documentation "load pixel-doubled width and height from image data")
                        (reparse-symbol indented_block_body) [35510 35920])
                    ("reload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35936 35940]))                          
                        :documentation "Reload the raw data from file or URL.")
                        (reparse-symbol indented_block_body) [35925 36122])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36143 36147]))                          )
                        (reparse-symbol indented_block_body) [36127 36659])
                    ("_data_and_metadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36687 36691]))                          
                        :documentation "shortcut for returning metadata with shape information, if defined")
                        (reparse-symbol indented_block_body) [36664 37143])
                    ("_repr_png_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37163 37167]))                          )
                        (reparse-symbol indented_block_body) [37148 37264])
                    ("_repr_jpeg_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37285 37289]))                          )
                        (reparse-symbol indented_block_body) [37269 37414])
                    ("_find_ext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37433 37437])
                            ("s" variable nil (reparse-symbol function_parameters) [37439 37440]))                          )
                        (reparse-symbol indented_block_body) [37419 37483]))                  
                :type "class")
                nil [30625 37483])
            ("Video" type
               (:superclasses ("DisplayObject")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a video object given raw data or an URL.

        When this object is returned by an input cell or passed to the
        display function, it will result in the video being displayed
        in the frontend.

        Parameters
        ----------
        data : unicode, str or bytes
            The raw video data or a URL or filename to load the data from.
            Raw data will require passing `embed=True`.
        url : unicode
            A URL for the video. If you specify `url=`,
            the image data will not be embedded.
        filename : unicode
            Path to a local file containing the video.
            Will be interpreted as a local URL unless `embed=True`.
        embed : bool
            Should the video be embedded using a data URI (True) or be
            loaded using a <video> tag (False).

            Since videos are large, embedding them should be avoided, if possible.
            You must confirm embedding as your intention by passing `embed=True`.

            Local files can be displayed with URLs without embedding the content, via::

                Video('./video.mp4')

        mimetype: unicode
            Specify the mimetype for embedded videos.
            Default will be guessed from file extension, if available.

        Examples
        --------

        Video('https://archive.org/download/Sita_Sings_the_Blues/Sita_Sings_the_Blues_small.mp4')
        Video('path/to/video.mp4')
        Video('path/to/video.mp4', embed=True)
        Video(b'raw-videodata', embed=True)
        \"\"\"" code nil (reparse-symbol indented_block_body) [37609 39167])
                            ("if" code nil (reparse-symbol indented_block_body) [39176 39393])
                            ("if" code nil (reparse-symbol indented_block_body) [39402 39679])
                            ("self" variable nil (reparse-symbol indented_block_body) [39688 39712])
                            ("self" variable nil (reparse-symbol indented_block_body) [39721 39739])
                            ("super" code nil (reparse-symbol indented_block_body) [39748 39814]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37530 37534])
                            ("data" variable nil (reparse-symbol function_parameters) [37536 37540])
                            ("url" variable nil (reparse-symbol function_parameters) [37547 37550])
                            ("filename" variable nil (reparse-symbol function_parameters) [37557 37565])
                            ("embed" variable nil (reparse-symbol function_parameters) [37572 37577])
                            ("mimetype" variable nil (reparse-symbol function_parameters) [37585 37593]))                          
                        :documentation "Create a video object given raw data or an URL.

        When this object is returned by an input cell or passed to the
        display function, it will result in the video being displayed
        in the frontend.

        Parameters
        ----------
        data : unicode, str or bytes
            The raw video data or a URL or filename to load the data from.
            Raw data will require passing `embed=True`.
        url : unicode
            A URL for the video. If you specify `url=`,
            the image data will not be embedded.
        filename : unicode
            Path to a local file containing the video.
            Will be interpreted as a local URL unless `embed=True`.
        embed : bool
            Should the video be embedded using a data URI (True) or be
            loaded using a <video> tag (False).

            Since videos are large, embedding them should be avoided, if possible.
            You must confirm embedding as your intention by passing `embed=True`.

            Local files can be displayed with URLs without embedding the content, via::

                Video('./video.mp4')

        mimetype: unicode
            Specify the mimetype for embedded videos.
            Default will be guessed from file extension, if available.

        Examples
        --------

        Video('https://archive.org/download/Sita_Sings_the_Blues/Sita_Sings_the_Blues_small.mp4')
        Video('path/to/video.mp4')
        Video('path/to/video.mp4', embed=True)
        Video(b'raw-videodata', embed=True)
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37517 39815])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39836 39840]))                          )
                        (reparse-symbol indented_block_body) [39820 40952])
                    ("reload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40968 40972]))                          )
                        (reparse-symbol indented_block_body) [40957 41003])
                    ("_repr_png_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41023 41027]))                          )
                        (reparse-symbol indented_block_body) [41008 41058])
                    ("_repr_jpeg_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41078 41082]))                          )
                        (reparse-symbol indented_block_body) [41062 41113]))                  
                :type "class")
                nil [37484 41113])
            ("clear_output" function
               (:documentation "Clear the output of the current cell receiving output.

    Parameters
    ----------
    wait : bool [default: false]
        Wait to clear the output until new output is available to replace it."
                :arguments 
                  ( ("wait" variable nil (reparse-symbol function_parameters) [41131 41135]))                  )
                nil [41114 41654])
            ("set_matplotlib_formats" function
               (:documentation "Select figure formats for the inline backend. Optionally pass quality for JPEG.

    For example, this enables PNG and JPEG output with a JPEG quality of 90%::

        In [1]: set_matplotlib_formats('png', 'jpeg', quality=90)

    To set this in your config files use the following::

        c.InlineBackend.figure_formats = {'png', 'jpeg'}
        c.InlineBackend.print_figure_kwargs.update({'quality' : 90})

    Parameters
    ----------
    *formats : strs
        One or more figure formats to enable: 'png', 'retina', 'jpeg', 'svg', 'pdf'.
    **kwargs :
        Keyword args will be relayed to ``figure.canvas.print_figure``.
    "
                :arguments 
                  ( ("formats" variable nil (reparse-symbol function_parameters) [41697 41705])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [41707 41715]))                  
                :decorators 
                  ( ("skip_doctest" function (:type "decorator") nil nil))                  )
                nil [41656 42799])
            ("set_matplotlib_close" function
               (:documentation "Set whether the inline backend closes all figures automatically or not.

    By default, the inline backend used in the IPython Notebook will close all
    matplotlib figures automatically after each cell is run. This means that
    plots in different cells won't interfere. Sometimes, you may want to make
    a plot in one cell and then refine it in later cells. This can be accomplished
    by::

        In [1]: set_matplotlib_close(False)

    To set this in your config files use the following::

        c.InlineBackend.close_figures = False

    Parameters
    ----------
    close : bool
        Should all matplotlib figures be automatically closed after each cell is
        run?
    "
                :arguments 
                  ( ("close" variable nil (reparse-symbol function_parameters) [42839 42844]))                  
                :decorators 
                  ( ("skip_doctest" function (:type "decorator") nil nil))                  )
                nil [42800 43676]))          
      :file "display.py"
      :pointmax 43676
      :fsize 43675
      :lastmodtime '(22831 20631 0 0)
      :unmatched-syntax '((NAME 39987 . 39990) (IF 40002 . 40004) (ELSE 40026 . 40030) (NAME 35005 . 35009) (IF 35024 . 35026) (ELSE 35045 . 35049) (INDENT_BLOCK 30533 . 30554) (NEWLINE 30499 . 30500) (COLON 30498 . 30499) (ELSE 30494 . 30498) (INDENT_BLOCK 30445 . 30486) (NEWLINE 30409 . 30410) (IF 30375 . 30377) (STRING_LITERAL 30398 . 30408) (COLON 30408 . 30409) (MULT 10955 . 10956) (COMMA 10956 . 10957) (MULT 2794 . 2795) (COMMA 2795 . 2796))))
  :file "!drive_c!ProgramData!Anaconda3!Lib!site-packages!IPython!core!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
