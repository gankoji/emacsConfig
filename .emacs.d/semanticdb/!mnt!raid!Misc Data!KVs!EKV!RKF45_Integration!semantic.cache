;; Object semanticdb-project-database-file-1778b90
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1778b90"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1778bac"
      :major-mode python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("math" include nil nil [20 31])
            ("matplotlib.pyplot" include nil nil [32 63])
            ("rkf45" include nil nil [65 84])
            ("dynamics" include nil nil [86 109])
            ("nSteps" variable nil nil [111 124])
            ("t_start" variable nil nil [125 138])
            ("t_end" variable nil nil [139 151])
            ("simTime" variable nil nil [153 198])
            ("r0" variable nil nil [200 272])
            ("v0" variable nil nil [273 336])
            ("q0" variable nil nil [337 364])
            ("w0" variable nil nil [365 387])
            ("y0" variable nil nil [389 411])
            ("y0" variable nil nil [412 434])
            ("y0" variable nil nil [435 457])
            ("yp" variable nil nil [458 479])
            ("y" variable nil nil [481 506])
            ("y" variable nil nil [508 519])
            ("flag" variable nil nil [520 528])
            ("print" code nil nil [530 550])
            ("for" code nil nil [552 820])
            ("fig1, ax1" code nil nil [831 857])
            ("ax1" code nil nil [886 975])
            ("ax1" code nil nil [976 1001])
            ("ax2" code nil nil [1058 1149])
            ("ax2" code nil nil [1150 1175])
            ("fig3, ax3" code nil nil [1177 1203])
            ("ax3" code nil nil [1234 1335])
            ("ax3" code nil nil [1336 1361])
            ("fig4, ax4" code nil nil [1363 1389])
            ("ax4" code nil nil [1419 1515])
            ("plt" code nil nil [1551 1561]))          
      :file "Main.py"
      :pointmax 1562
      :fsize 1561
      :lastmodtime '(23526 7072 804895 400000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1941384"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Translation of fortran 77 rkf45 to python via matlab \"\"\"" code nil nil [24 83])
            ("numpy" include nil nil [84 103])
            ("sys" include nil nil [104 124])
            ("r8_rkf45" function
               (:documentation "
    y, yp, t, flag  = r8_rkf45 ( f, neqn, y, yp, t, tout, relerr, abserr, flag )
#********************************************
#
## R8_RKF45 carries out the Runge-Kutta-Fehlberg method (double precision).
#
#  Discussion:
#
#    This routine is primarily designed to solve non-stiff and mildly stiff
#    differential equations when derivative evaluations are inexpensive.
#    It should generally not be used when the user is demanding
#    high accuracy.
#
#    This function integrates a system of NEQN first-order ordinary differential
#    equations of the form:
#
#      dY(i)/dT = F(T,Y(1),Y(2), ...  ,Y(NEQN))
#
#    where the Y(1:NEQN) are given at T.
#    Typically the subroutine is used to integrate from T to TOUT but it
#    can be used as a one-step integrator to advance the solution a
#    single step in the direction of TOUT.  On return, the parameters in
#    the call list are set for continuing the integration.  The user has
#    only to call again (and perhaps define a new value for TOUT).
#
#    Before the first call, the user must
#
#    * supply the function  F(T,Y) to evaluate the right hand side YP;
#
#    * initialize the parameters:
#      NEQN, Y(1:NEQN), T, TOUT, RELERR, ABSERR, FLAG.
#      In particular, T should initially be the starting point for integration,
#      Y should be the value of the initial conditions, and FLAG should
#      normally be +1.
#
#    Normally, the user only sets the value of FLAG before the first call, and
#    thereafter, the program manages the value.  On the first call, FLAG should
#    normally be +1 (or -1 for single step mode.)  On normal return, FLAG will
#    have been reset by the program to the value of 2 (or -2 in single
#    step mode), and the user can continue to call the routine with that
#    value of FLAG.
#
#    (When the input magnitude of FLAG is 1, this indicates to the program
#    that it is necessary to do some initialization work.  An input magnitude
#    of 2 lets the program know that that initialization can be skipped,
#    and that useful information was computed earlier.)
#
#    The function returns with all the information needed to continue
#    the integration.  If the integration reached TOUT, the user need only
#    define a new TOUT and call again.  In the one-step integrator
#    mode, returning with FLAG = -2, the user must keep in mind that
#    each step taken is in the direction of the current TOUT.  Upon
#    reaching TOUT, indicated by the output value of FLAG switching to 2,
#    the user must define a new TOUT and reset FLAG to -2 to continue
#    in the one-step integrator mode.
#
#    In some cases, an error or difficulty occurs during a call.  In that case,
#    the output value of FLAG is used to indicate that there is a problem
#    that the user must address.  These values include:
#
#    * 3, integration was not completed because the input value of RELERR, the
#      relative error tolerance, was too small.  RELERR has been increased
#      appropriately for continuing.  If the user accepts the output value of
#      RELERR, then simply reset FLAG to 2 and continue.
#
#    * 4, integration was not completed because more than MAXNFE derivative
#      evaluations were needed.  This is approximately (MAXNFE/6) steps.
#      The user may continue by simply calling again.  The function counter
#      will be reset to 0, and another MAXNFE function evaluations are allowed.
#
#    * 5, integration was not completed because the solution vanished,
#      making a pure relative error test impossible.  The user must use
#      a non-zero ABSERR to continue.  Using the one-step integration mode
#      for one step is a good way to proceed.
#
#    * 6, integration was not completed because the requested accuracy
#      could not be achieved, even using the smallest allowable stepsize.
#      The user must increase the error tolerances ABSERR or RELERR before
#      continuing.  It is also necessary to reset FLAG to 2 (or -2 when
#      the one-step integration mode is being used).  The occurrence of
#      FLAG = 6 indicates a trouble spot.  The solution is changing
#      rapidly, or a singularity may be present.  It often is inadvisable
#      to continue.
#
#    * 7, it is likely that this routine is inefficient for solving
#      this problem.  Too much output is restricting the natural stepsize
#      choice.  The user should use the one-step integration mode with
#      the stepsize determined by the code.  If the user insists upon
#      continuing the integration, reset FLAG to 2 before calling
#      again.  Otherwise, execution will be terminated.
#
#    * 8, invalid input parameters, indicates one of the following:
#      NEQN <= 0;
#      T = TOUT and |FLAG| /= 1;
#      RELERR < 0 or ABSERR < 0;
#      FLAG == 0  or FLAG < -2 or 8 < FLAG.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    05 April 2011
#
#  Author:
#
#    Original FORTRAN77 version by Herman Watts, Lawrence Shampine.
#    MATLAB version by John Burkardt and then to Python by Peter Monk
#
#  Reference:
#
#    Erwin Fehlberg,
#    Low-order Classical Runge-Kutta Formulas with Stepsize Control,
#    NASA Technical Report R-315, 1969.
#
#    Lawrence Shampine, Herman Watts, S Davenport,
#    Solving Non-stiff Ordinary Differential Equations - The State of the Art,
#    SIAM Review,
#    Volume 18, pages 376-411, 1976.
#
#  Parameters:
#
#    Input, function F, a user-supplied function to evaluate the
#    derivatives dYdT(T), of the form:
#     def f ( t, y ):
#         <statements>
#         return(yp)
#
#    Input, integer NEQN, the number of equations to be integrated.
#
#    Input/output, real Y(NEQN), the current solution vector at T.
#
#    Input/output, real YP(NEQN), the current value of the
#    derivative of the dependent variable.  The user should not set or alter
#    this information%
#
#    Input/output, real T, the current value of the independent
#    variable.
#
#    Input, real TOUT, the output point at which solution is
#    desired.  TOUT = T is allowed on the first call only, in which case
#    the routine returns with FLAG = 2 if continuation is possible.
#
#    Input, real RELERR, ABSERR, the relative and absolute
#    error tolerances for the local error test.  At each step the code
#    requires:
#      abs ( local error ) <= RELERR * abs ( Y ) + ABSERR
#    for each component of the local error and the solution vector Y.
#    RELERR cannot be \"too small\".  If the routine believes RELERR has been
#    set too small, it will reset RELERR to an acceptable value and return
#    immediately for user action.
#
#    Input/output, integer FLAG, indicator for status of integration.
#    On the first call, set FLAG to +1 for normal use, or to -1 for single
#    step mode.  On return, a value of 2 or -2 indicates normal progress,
#    while any other value indicates a problem that should be addressed.
#
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [140 141])
                    ("neqn" variable nil (reparse-symbol function_parameters) [143 147])
                    ("y" variable nil (reparse-symbol function_parameters) [149 150])
                    ("yp" variable nil (reparse-symbol function_parameters) [152 154])
                    ("t" variable nil (reparse-symbol function_parameters) [156 157])
                    ("tout" variable nil (reparse-symbol function_parameters) [159 163])
                    ("relerr" variable nil (reparse-symbol function_parameters) [165 171])
                    ("abserr" variable nil (reparse-symbol function_parameters) [173 179])
                    ("flag" variable nil (reparse-symbol function_parameters) [181 185]))                  )
                nil [125 17621])
            ("r8_fehl" function
               (:documentation "
#*****************************************************************************80
#
## R8_FEHL takes one Fehlberg fourth-fifth order step.
#
#  Discussion:
#
#    This routine integrates a system of NEQN first order ordinary differential
#    equations of the form
#      dY(i)/dT = F(T,Y(1:NEQN))
#    where the initial values Y and the initial derivatives
#    YP are specified at the starting point T.
#
#    The routine advances the solution over the fixed step H and returns
#    the fifth order (sixth order accurate locally) solution
#    approximation at T+H in array S.
#
#    The formulas have been grouped to control loss of significance.
#    The routine should be called with an H not smaller than 13 units of
#    roundoff in T so that the various independent arguments can be
#    distinguished.
#
#  Licensing:
#
#    This code is distributed under the GNU LGPL license.
#
#  Modified:
#
#    30 August 2010
#
#  Author:
#
#    Original FORTRAN77 version by Herman Watts, Lawrence Shampine.
#    MATLAB version by John Burkardt.
#
#  Reference:
#
#    Erwin Fehlberg,
#    Low-order Classical Runge-Kutta Formulas with Stepsize Control,
#    NASA Technical Report R-315, 1969.
#
#    Lawrence Shampine, Herman Watts, S Davenport,
#    Solving Non-stiff Ordinary Differential Equations - The State of the Art,
#    SIAM Review,
#    Volume 18, pages 376-411, 1976.
#
#  Parameters:
#
#    Input, function F, a user-supplied function to evaluate the
#    derivatives dYdT, of the form:
#
#      function yp = f ( t, y )
#
#    Input, integer NEQN, the number of equations to be integrated.
#
#    Input, real Y(NEQN), the current value of the
#    dependent variable.
#
#    Input, real T, the current value of the independent
#    variable.
#
#    Input, real H, the step size to take.
#
#    Input, real YP(NEQN), the current value of the
#    derivative of the dependent variable.
#
#    Output, real F1(NEQN), F2(NEQN), F3(NEQN), F4(NEQN),
#    F5(NEQN), derivative values needed for the computation.
#
#    Output, real S(NEQN), the estimate of the solution at T+H.
#
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [17636 17637])
                    ("neqn" variable nil (reparse-symbol function_parameters) [17639 17643])
                    ("y" variable nil (reparse-symbol function_parameters) [17645 17646])
                    ("t" variable nil (reparse-symbol function_parameters) [17648 17649])
                    ("h" variable nil (reparse-symbol function_parameters) [17651 17652])
                    ("yp" variable nil (reparse-symbol function_parameters) [17654 17656]))                  )
                nil [17622 20593])
            ("error" function
               (:documentation "
    Simple error handling
    "
                :arguments 
                  ( ("string" variable nil (reparse-symbol function_parameters) [20604 20610]))                  )
                nil [20594 20700]))          
      :file "rkf45.py"
      :pointmax 20700
      :fsize 20699
      :lastmodtime '(23526 641 873301 600000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-17a7f90"
      :major-mode python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("math" include nil nil [20 31])
            ("GNCUtilities" include nil nil [33 76])
            ("fp" function (:arguments 
              ( ("t" variable nil (reparse-symbol function_parameters) [85 86])
                ("y" variable nil (reparse-symbol function_parameters) [88 89]))              ) nil [78 1030])
            ("grav" function (:arguments 
              ( ("r" variable nil (reparse-symbol function_parameters) [1040 1041]))              ) nil [1031 1202])
            ("Oblateness_J2" function (:arguments 
              ( ("r" variable nil (reparse-symbol function_parameters) [1221 1222]))              ) nil [1203 1759])
            ("getMassProps" function nil nil [1760 1884])
            ("getMomentsForces" function nil nil [1885 1989]))          
      :file "dynamics.py"
      :pointmax 1989
      :fsize 1988
      :lastmodtime '(23526 7085 558940 600000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1b0d030"
      :major-mode python-mode
      :tags 
        '( ("numpy" include nil nil [1 19])
            ("math" include nil nil [20 31])
            ("pi" variable nil nil [33 47])
            ("r2d" code nil nil [48 62])
            ("d2r" code nil nil [63 77])
            ("doUnitTests" variable nil nil [79 98])
            ("EulD2Quat" function (:arguments 
              ( ("eul" variable nil (reparse-symbol function_parameters) [113 116]))              ) nil [99 242])
            ("Eul2Quat" function (:arguments 
              ( ("eul" variable nil (reparse-symbol function_parameters) [256 259]))              ) nil [243 646])
            ("EulD2DCM" function (:arguments 
              ( ("eul" variable nil (reparse-symbol function_parameters) [660 663]))              ) nil [647 722])
            ("Eul2DCM" function (:arguments 
              ( ("eul" variable nil (reparse-symbol function_parameters) [735 738]))              ) nil [723 873])
            ("Quat2Eul" function (:arguments 
              ( ("q" variable nil (reparse-symbol function_parameters) [887 888]))              ) nil [874 1214])
            ("DCM2Quat" function (:arguments 
              ( ("dcm" variable nil (reparse-symbol function_parameters) [1228 1231]))              ) nil [1215 2346])
            ("Quat2DCM" function (:arguments 
              ( ("q" variable nil (reparse-symbol function_parameters) [2360 2361]))              ) nil [2347 2885])
            ("C_x" function (:arguments 
              ( ("theta" variable nil (reparse-symbol function_parameters) [2945 2950]))              ) nil [2937 3183])
            ("C_y" function (:arguments 
              ( ("theta" variable nil (reparse-symbol function_parameters) [3192 3197]))              ) nil [3184 3442])
            ("C_z" function (:arguments 
              ( ("theta" variable nil (reparse-symbol function_parameters) [3451 3456]))              ) nil [3443 3692])
            ("QuatMult" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [3706 3707])
                ("q" variable nil (reparse-symbol function_parameters) [3708 3709]))              ) nil [3693 3972])
            ("DCM2Eul" function (:arguments 
              ( ("dcm" variable nil (reparse-symbol function_parameters) [3985 3988]))              ) nil [3973 4672])
            ("DCM2AxisAngle" function (:arguments 
              ( ("dcm" variable nil (reparse-symbol function_parameters) [4691 4694]))              ) nil [4673 5391])
            ("Quat2AxisAngle" function (:arguments 
              ( ("q" variable nil (reparse-symbol function_parameters) [5411 5412]))              ) nil [5392 5798])
            ("DifferenceQuaternion" function (:arguments 
              ( ("q1" variable nil (reparse-symbol function_parameters) [5824 5826])
                ("q2" variable nil (reparse-symbol function_parameters) [5828 5830]))              ) nil [5799 5939])
            ("QuatConj" function (:arguments 
              ( ("q" variable nil (reparse-symbol function_parameters) [5953 5954]))              ) nil [5940 6017])
            ("GramSchmidt" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [6034 6035]))              ) nil [6018 6574])
            ("if" code nil nil [6575 6674]))          
      :file "GNCUtilities.py"
      :pointmax 6674
      :fsize 6965
      :lastmodtime '(23455 65335 985852 0)
      :unmatched-syntax nil))
  :file "!mnt!raid!Misc Data!KVs!EKV!RKF45_Integration!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
