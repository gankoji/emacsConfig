;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utilities for writing code that runs on Python 2 and 3\"\"\"" code nil nil [1 61])
            ("__future__" include nil nil [1165 1203])
            ("functools" include nil nil [1205 1221])
            ("itertools" include nil nil [1222 1238])
            ("operator" include nil nil [1239 1254])
            ("sys" include nil nil [1255 1265])
            ("types" include nil nil [1266 1278])
            ("__author__" variable nil nil [1280 1334])
            ("__version__" variable nil nil [1335 1357])
            ("PY2" code nil nil [1410 1440])
            ("PY3" code nil nil [1441 1471])
            ("PY34" code nil nil [1472 1510])
            ("if" code nil nil [1512 2319])
            ("_add_doc" function
               (:documentation "Add documentation to a function."
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [2334 2338])
                    ("doc" variable nil (reparse-symbol function_parameters) [2340 2343]))                  )
                nil [2321 2412])
            ("_import_module" function
               (:documentation "Import module, returning the module after the last dot."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2433 2437]))                  )
                nil [2414 2556])
            ("_LazyDescr" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2623 2639]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2602 2606])
                            ("name" variable nil (reparse-symbol function_parameters) [2608 2612]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2589 2640])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2657 2661])
                            ("obj" variable nil (reparse-symbol function_parameters) [2663 2666])
                            ("tp" variable nil (reparse-symbol function_parameters) [2668 2670]))                          )
                        (reparse-symbol indented_block_body) [2645 3005]))                  
                :type "class")
                nil [2558 3005])
            ("MovedModule" type
               (:superclasses ("_LazyDescr")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3092 3131])
                            ("if" code nil (reparse-symbol indented_block_body) [3140 3271]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3056 3060])
                            ("name" variable nil (reparse-symbol function_parameters) [3062 3066])
                            ("old" variable nil (reparse-symbol function_parameters) [3068 3071])
                            ("new" variable nil (reparse-symbol function_parameters) [3073 3076]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3043 3271])
                    ("_resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3289 3293]))                          )
                        (reparse-symbol indented_block_body) [3276 3336])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3357 3361])
                            ("attr" variable nil (reparse-symbol function_parameters) [3363 3367]))                          )
                        (reparse-symbol indented_block_body) [3341 3499]))                  
                :type "class")
                nil [3007 3499])
            ("_LazyModule" type
               (:superclasses ("types.ModuleType")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3577 3616])
                            ("self" variable nil (reparse-symbol indented_block_body) [3625 3662]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3556 3560])
                            ("name" variable nil (reparse-symbol function_parameters) [3562 3566]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3543 3663])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3680 3684]))                          )
                        (reparse-symbol indented_block_body) [3668 3812])
                    ("_moved_attributes" variable nil (reparse-symbol indented_block_body) [3855 3877]))                  
                :type "class")
                nil [3501 3878])
            ("MovedAttribute" type
               (:superclasses ("_LazyDescr")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [4001 4043])
                            ("if" code nil (reparse-symbol indented_block_body) [4052 4498]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3932 3936])
                            ("name" variable nil (reparse-symbol function_parameters) [3938 3942])
                            ("old_mod" variable nil (reparse-symbol function_parameters) [3944 3951])
                            ("new_mod" variable nil (reparse-symbol function_parameters) [3953 3960])
                            ("old_attr" variable nil (reparse-symbol function_parameters) [3962 3970])
                            ("new_attr" variable nil (reparse-symbol function_parameters) [3977 3985]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3919 4498])
                    ("_resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4516 4520]))                          )
                        (reparse-symbol indented_block_body) [4503 4607]))                  
                :type "class")
                nil [3880 4607])
            ("_SixMetaPathImporter" type
               (:documentation "
    A meta path importer to import six.moves and its submodules.

    This class implements a PEP302 finder and loader. It should be compatible
    with Python 2.5 and all existing versions of Python3
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4913 4940])
                            ("self" variable nil (reparse-symbol indented_block_body) [4949 4972]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4881 4885])
                            ("six_module_name" variable nil (reparse-symbol function_parameters) [4887 4902]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4868 4973])
                    ("_add_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4994 4998])
                            ("mod" variable nil (reparse-symbol function_parameters) [5000 5003])
                            ("fullnames" variable nil (reparse-symbol function_parameters) [5005 5015]))                          )
                        (reparse-symbol indented_block_body) [4978 5118])
                    ("_get_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5139 5143])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5145 5153]))                          )
                        (reparse-symbol indented_block_body) [5123 5218])
                    ("find_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5239 5243])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5245 5253])
                            ("path" variable nil (reparse-symbol function_parameters) [5255 5259]))                          )
                        (reparse-symbol indented_block_body) [5223 5354])
                    ("__get_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5376 5380])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5382 5390]))                          )
                        (reparse-symbol indented_block_body) [5359 5557])
                    ("load_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5578 5582])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5584 5592]))                          )
                        (reparse-symbol indented_block_body) [5562 5944])
                    ("is_package" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5964 5968])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5970 5978]))                          
                        :documentation "
        Return true, if the named module is a package.

        We need this method to get correct spec objects with
        Python 3.4 (see PEP451)
        ")
                        (reparse-symbol indented_block_body) [5949 6218])
                    ("get_code" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6236 6240])
                            ("fullname" variable nil (reparse-symbol function_parameters) [6242 6250]))                          
                        :documentation "Return None

        Required, if is_package is implemented")
                        (reparse-symbol indented_block_body) [6223 6416])
                    ("get_source" variable nil (reparse-symbol indented_block_body) [6420 6441]))                  
                :type "class")
                nil [4609 6462])
            ("_importer" variable nil nil [6463 6505])
            ("_MovedItems" type
               (:documentation "Lazy loading of moved objects"
                :superclasses ("_LazyModule")
                :members 
                  ( ("__path__" variable nil (reparse-symbol indented_block_body) [6585 6598]))                  
                :type "class")
                nil [6508 6618])
            ("_moved_attributes" variable nil nil [6620 10822])
            ("if" code nil nil [10855 10958])
            ("for" code nil nil [10959 11128])
            ("del" code nil nil [11128 11136])
            ("_MovedItems" variable nil nil [11138 11187])
            ("moves" variable nil nil [11189 11229])
            ("_importer" code nil nil [11230 11267])
            ("Module_six_moves_urllib_parse" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_parse"
                :superclasses ("_LazyModule")
                :type "class")
                nil [11270 11387])
            ("_urllib_parse_moved_attributes" variable nil nil [11389 12824])
            ("for" code nil nil [12825 12929])
            ("del" code nil nil [12929 12937])
            ("Module_six_moves_urllib_parse" variable nil nil [12939 13019])
            ("_importer" code nil nil [13021 13173])
            ("Module_six_moves_urllib_error" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_error"
                :superclasses ("_LazyModule")
                :type "class")
                nil [13176 13293])
            ("_urllib_error_moved_attributes" variable nil nil [13295 13520])
            ("for" code nil nil [13521 13625])
            ("del" code nil nil [13625 13633])
            ("Module_six_moves_urllib_error" variable nil nil [13635 13715])
            ("_importer" code nil nil [13717 13869])
            ("Module_six_moves_urllib_request" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_request"
                :superclasses ("_LazyModule")
                :type "class")
                nil [13872 13993])
            ("_urllib_request_moved_attributes" variable nil nil [13995 16272])
            ("for" code nil nil [16273 16381])
            ("del" code nil nil [16381 16389])
            ("Module_six_moves_urllib_request" variable nil nil [16391 16475])
            ("_importer" code nil nil [16477 16637])
            ("Module_six_moves_urllib_response" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_response"
                :superclasses ("_LazyModule")
                :type "class")
                nil [16640 16763])
            ("_urllib_response_moved_attributes" variable nil nil [16765 17052])
            ("for" code nil nil [17053 17163])
            ("del" code nil nil [17163 17171])
            ("Module_six_moves_urllib_response" variable nil nil [17173 17259])
            ("_importer" code nil nil [17261 17425])
            ("Module_six_moves_urllib_robotparser" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_robotparser"
                :superclasses ("_LazyModule")
                :type "class")
                nil [17428 17557])
            ("_urllib_robotparser_moved_attributes" variable nil nil [17559 17677])
            ("for" code nil nil [17678 17794])
            ("del" code nil nil [17794 17802])
            ("Module_six_moves_urllib_robotparser" variable nil nil [17804 17896])
            ("_importer" code nil nil [17898 18074])
            ("Module_six_moves_urllib" type
               (:documentation "Create a six.moves.urllib namespace that resembles the Python 3 namespace"
                :superclasses ("types.ModuleType")
                :members 
                  ( ("__path__" variable nil (reparse-symbol indented_block_body) [18215 18228])
                    ("parse" variable nil (reparse-symbol indented_block_body) [18252 18303])
                    ("error" variable nil (reparse-symbol indented_block_body) [18308 18359])
                    ("request" variable nil (reparse-symbol indented_block_body) [18364 18419])
                    ("response" variable nil (reparse-symbol indented_block_body) [18424 18481])
                    ("robotparser" variable nil (reparse-symbol indented_block_body) [18486 18549])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18567 18571]))                          )
                        (reparse-symbol indented_block_body) [18555 18646]))                  
                :type "class")
                nil [18077 18646])
            ("_importer" code nil nil [18647 18759])
            ("add_move" function
               (:documentation "Add an item to six.moves."
                :arguments 
                  ( ("move" variable nil (reparse-symbol function_parameters) [18775 18779]))                  )
                nil [18762 18860])
            ("remove_move" function
               (:documentation "Remove item from six.moves."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [18878 18882]))                  )
                nil [18862 19132])
            ("if" code nil nil [19134 19528])
            ("try" code nil nil [19530 19636])
            ("next" variable nil nil [19636 19659])
            ("try" code nil nil [19662 19812])
            ("if" code nil nil [19814 20405])
            ("_add_doc" code nil nil [20405 20503])
            ("get_method_function" variable nil nil [20506 20559])
            ("get_method_self" variable nil nil [20560 20609])
            ("get_function_closure" variable nil nil [20610 20667])
            ("get_function_code" variable nil nil [20668 20719])
            ("get_function_defaults" variable nil nil [20720 20779])
            ("get_function_globals" variable nil nil [20780 20837])
            ("if" code nil nil [20840 21656])
            ("_add_doc" code nil nil [21657 21728])
            ("_add_doc" code nil nil [21729 21804])
            ("_add_doc" code nil nil [21805 21900])
            ("_add_doc" code nil nil [21901 21999])
            ("if" code nil nil [22002 30099]))          
      :file "six.py"
      :pointmax 30099
      :fsize 30098
      :lastmodtime '(22036 39846 0 0)
      :unmatched-syntax '((NEWLINE 30098 . 30099) (RPAREN 30097 . 30098) (DEDENT 30067 . 30067) (NAME 30067 . 30070) (LPAREN 30087 . 30088) (NEWLINE 29213 . 29214) (COLON 29212 . 29213) (IS 29201 . 29203) (RPAREN 29199 . 29200) (LPAREN 29188 . 29189) (PERIOD 29184 . 29185) (RPAREN 29183 . 29184) (IF 29172 . 29174) (LPAREN 29182 . 29183) (NEWLINE 29113 . 29114) (RBRACK 29076 . 29077) (DEDENT 29064 . 29064) (NAME 29064 . 29072) (LBRACK 29075 . 29076) (NEWLINE 28266 . 28267) (COLON 28265 . 28266) (RPAREN 28264 . 28265) (DEDENT 28227 . 28227) (DEF 28227 . 28230) (LPAREN 28258 . 28259) (NEWLINE 27709 . 27710) (COLON 27708 . 27709) (RPAREN 27707 . 27708) (DEDENT 27680 . 27680) (DEF 27680 . 27683) (LPAREN 27697 . 27698) (NEWLINE 27269 . 27270) (COLON 27268 . 27269) (RPAREN 27267 . 27268) (MULT 27261 . 27262) (DEDENT 27236 . 27236) (DEF 27236 . 27239) (LPAREN 27254 . 27255) (NEWLINE 27205 . 27206) (COLON 27204 . 27205) (DEDENT 27200 . 27200) (ELSE 27200 . 27204) (NEWLINE 26919 . 26920) (COLON 26918 . 26919) (RPAREN 26917 . 26918) (LPAREN 26912 . 26913) (LT 26910 . 26911) (RBRACK 26908 . 26909) (COLON 26906 . 26907) (LBRACK 26904 . 26905) (NEWLINE 26883 . 26884) (RPAREN 26882 . 26883) (DEDENT 26837 . 26837) (NAME 26837 . 26845) (LPAREN 26845 . 26846) (NEWLINE 26602 . 26603) (COLON 26601 . 26602) (RPAREN 26600 . 26601) (LPAREN 26595 . 26596) (LT 26593 . 26594) (RBRACK 26591 . 26592) (COLON 26589 . 26590) (DEDENT 26569 . 26569) (IF 26569 . 26571) (LBRACK 26588 . 26589) (NEWLINE 24674 . 24675) (RPAREN 24673 . 24674) (DEDENT 24627 . 24627) (NAME 24627 . 24633) (LPAREN 24643 . 24644) (NEWLINE 24565 . 24566) (COLON 24564 . 24565) (DEDENT 24560 . 24560) (ELSE 24560 . 24564) (NEWLINE 24474 . 24475) (COLON 24473 . 24474) (RPAREN 24472 . 24473) (LPAREN 24467 . 24468) (GT 24465 . 24466) (RBRACK 24463 . 24464) (COLON 24461 . 24462) (LBRACK 24460 . 24461) (DEDENT 24439 . 24439) (ELIF 24439 . 24443) (NEWLINE 24306 . 24307) (COLON 24305 . 24306) (RPAREN 24304 . 24305) (LPAREN 24299 . 24300) (EQ 24296 . 24298) (RBRACK 24294 . 24295) (COLON 24292 . 24293) (DEDENT 24272 . 24272) (IF 24272 . 24274) (LBRACK 24291 . 24292) (NEWLINE 23795 . 23796) (COLON 23794 . 23795) (DEDENT 23790 . 23790) (ELSE 23790 . 23794) (NEWLINE 23484 . 23485) (COLON 23483 . 23484) (RPAREN 23482 . 23483) (EXPONENT 23474 . 23476) (MULT 23467 . 23468) (DEDENT 23445 . 23445) (DEF 23445 . 23448) (LPAREN 23460 . 23461) (NEWLINE 23380 . 23381) (COLON 23379 . 23380) (RPAREN 23378 . 23379) (EXPONENT 23370 . 23372) (MULT 23363 . 23364) (DEDENT 23335 . 23335) (DEF 23335 . 23338) (LPAREN 23356 . 23357) (NEWLINE 23271 . 23272) (COLON 23270 . 23271) (RPAREN 23269 . 23270) (EXPONENT 23261 . 23263) (MULT 23254 . 23255) (LPAREN 23247 . 23248) (NEWLINE 23224 . 23225) (RPAREN 23223 . 23224) (LPAREN 23201 . 23202) (NEWLINE 23192 . 23193) (RPAREN 23191 . 23192) (DEDENT 23161 . 23161) (NAME 23161 . 23169) (LPAREN 23169 . 23170)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Cycler
======

Cycling through combinations of values, producing dictionaries.

You can add cyclers::

    from cycler import cycler
    cc = (cycler(color=list('rgb')) +
          cycler(linestyle=['-', '--', '-.']))
    for d in cc:
        print(d)

Results in::

    {'color': 'r', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}


You can multiply cyclers::

    from cycler import cycler
    cc = (cycler(color=list('rgb')) *
          cycler(linestyle=['-', '--', '-.']))
    for d in cc:
        print(d)

Results in::

    {'color': 'r', 'linestyle': '-'}
    {'color': 'r', 'linestyle': '--'}
    {'color': 'r', 'linestyle': '-.'}
    {'color': 'g', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'g', 'linestyle': '-.'}
    {'color': 'b', 'linestyle': '-'}
    {'color': 'b', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}
\"\"\"" code nil nil [1 921])
            ("" code nil nil [946 1031])
            ("six" include nil nil [1033 1043])
            ("itertools" include nil nil [1044 1080])
            ("six.moves" include nil nil [1081 1114])
            ("operator" include nil nil [1115 1144])
            ("copy" include nil nil [1145 1156])
            ("__version__" variable nil nil [1158 1180])
            ("_process_keys" function
               (:documentation "
    Helper function to compose cycler keys

    Parameters
    ----------
    left, right : iterable of dictionaries or None
        The cyclers to be composed
    Returns
    -------
    keys : set
        The keys in the composition of the two cyclers
    "
                :arguments 
                  ( ("left" variable nil (reparse-symbol function_parameters) [1201 1205])
                    ("right" variable nil (reparse-symbol function_parameters) [1207 1212]))                  )
                nil [1183 1775])
            ("Cycler" type
               (:documentation "
    Composable cycles

    This class has compositions methods:

    ``+``
      for 'inner' products (zip)

    ``+=``
      in-place ``+``

    ``*``
      for outer products (itertools.product) and integer multiplication

    ``*=``
      in-place ``*``

    and supports basic slicing via ``[]``

    Parameters
    ----------
    left : Cycler or None
        The 'left' cycler

    right : Cycler or None
        The 'right' cycler

    op : func or None
        Function which composes the 'left' and 'right' cyclers.

    "
                :superclasses ("object")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2358 2362]))                          )
                        (reparse-symbol indented_block_body) [2345 2392])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Semi-private init

        Do not use this directly, use `cycler` function instead.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2452 2550])
                            ("if" code nil (reparse-symbol indented_block_body) [2559 2914])
                            ("if" code nil (reparse-symbol indented_block_body) [2923 3287])
                            ("self" variable nil (reparse-symbol indented_block_body) [3296 3347])
                            ("self" variable nil (reparse-symbol indented_block_body) [3356 3369]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2410 2414])
                            ("left" variable nil (reparse-symbol function_parameters) [2416 2420])
                            ("right" variable nil (reparse-symbol function_parameters) [2422 2427])
                            ("op" variable nil (reparse-symbol function_parameters) [2434 2436]))                          
                        :documentation "Semi-private init

        Do not use this directly, use `cycler` function instead.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2397 3370])
                    ("keys" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3398 3402]))                          
                        :documentation "
        The keys this Cycler knows about
        ")
                        (reparse-symbol indented_block_body) [3375 3501])
                    ("change_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3521 3525])
                            ("old" variable nil (reparse-symbol function_parameters) [3527 3530])
                            ("new" variable nil (reparse-symbol function_parameters) [3532 3535]))                          
                        :documentation "
        Change a key in this cycler to a new name.
        Modification is performed in-place.

        Does nothing if the old key is the same as the new key.
        Raises a ValueError if the new key is already a key.
        Raises a KeyError if the old key isn't a key.

        ")
                        (reparse-symbol indented_block_body) [3506 4758])
                    ("_compose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4776 4780]))                          
                        :documentation "
        Compose the 'left' and 'right' components of this cycle
        with the proper operation (zip or product as of now)
        ")
                        (reparse-symbol indented_block_body) [4763 5086])
                    ("_from_iter" function
                       (:documentation "
        Class method to create 'base' Cycler objects
        that do not have a 'right' or 'op' and for which
        the 'left' object is not another Cycler.

        Parameters
        ----------
        label : str
            The property key.

        itr : iterable
            Finite length iterable of the property values.

        Returns
        -------
        cycler : Cycler
            New 'base' `Cycler`
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5123 5126])
                            ("label" variable nil (reparse-symbol function_parameters) [5128 5133])
                            ("itr" variable nil (reparse-symbol function_parameters) [5135 5138]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5091 5711])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5732 5736])
                            ("key" variable nil (reparse-symbol function_parameters) [5738 5741]))                          )
                        (reparse-symbol indented_block_body) [5716 6074])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6092 6096]))                          )
                        (reparse-symbol indented_block_body) [6079 6216])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6233 6237])
                            ("other" variable nil (reparse-symbol function_parameters) [6239 6244]))                          
                        :documentation "
        Pair-wise combine two equal length cycles (zip)

        Parameters
        ----------
        other : Cycler
           The second Cycler
        ")
                        (reparse-symbol indented_block_body) [6221 6638])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6655 6659])
                            ("other" variable nil (reparse-symbol function_parameters) [6661 6666]))                          
                        :documentation "
        Outer product of two cycles (`itertools.product`) or integer
        multiplication.

        Parameters
        ----------
        other : Cycler or int
           The second Cycler or integer
        ")
                        (reparse-symbol indented_block_body) [6643 7219])
                    ("__rmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7237 7241])
                            ("other" variable nil (reparse-symbol function_parameters) [7243 7248]))                          )
                        (reparse-symbol indented_block_body) [7224 7279])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7296 7300]))                          )
                        (reparse-symbol indented_block_body) [7284 7525])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7543 7547])
                            ("other" variable nil (reparse-symbol function_parameters) [7549 7554]))                          
                        :documentation "
        In-place pair-wise combine two equal length cycles (zip)

        Parameters
        ----------
        other : Cycler
           The second Cycler
        ")
                        (reparse-symbol indented_block_body) [7530 8139])
                    ("__imul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8157 8161])
                            ("other" variable nil (reparse-symbol function_parameters) [8163 8168]))                          
                        :documentation "
        In-place outer product of two cycles (`itertools.product`)

        Parameters
        ----------
        other : Cycler
           The second Cycler
        ")
                        (reparse-symbol indented_block_body) [8144 8759])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8775 8779])
                            ("other" variable nil (reparse-symbol function_parameters) [8781 8786]))                          
                        :documentation "
        Check equality
        ")
                        (reparse-symbol indented_block_body) [8764 9014])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9032 9036]))                          )
                        (reparse-symbol indented_block_body) [9019 9439])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9460 9464]))                          )
                        (reparse-symbol indented_block_body) [9444 9938])
                    ("by_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9954 9958]))                          
                        :documentation "Values by key

        This returns the transposed values of the cycler.  Iterating
        over a `Cycler` yields dicts with a single value for each key,
        this method returns a `dict` of `list` which are the values
        for the given key.

        The returned value can be used to create an equivalent `Cycler`
        using only `+`.

        Returns
        -------
        transpose : dict
            dict of lists of the values for each key.
        ")
                        (reparse-symbol indented_block_body) [9943 10784])
                    ("_transpose" variable nil (reparse-symbol indented_block_body) [10818 10837])
                    ("simplify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10856 10860]))                          
                        :documentation "Simplify the Cycler

        Returned as a composition using only sums (no multiplications)

        Returns
        -------
        simple : Cycler
            An equivalent cycler using only summation")
                        (reparse-symbol indented_block_body) [10843 11433])
                    ("concat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11449 11453])
                            ("other" variable nil (reparse-symbol function_parameters) [11455 11460]))                          
                        :documentation "Concatenate this cycler and an other.

        The keys must match exactly.

        This returns a single Cycler which is equivalent to
        `itertools.chain(self, other)`

        Examples
        --------

        >>> num = cycler('a', range(3))
        >>> let = cycler('a', 'abc')
        >>> num.concat(let)
        cycler('a', [0, 1, 2, 'a', 'b', 'c'])

        Parameters
        ----------
        other : `Cycler`
            The `Cycler` to concatenate to this one.

        Returns
        -------
        ret : `Cycler`
            The concatenated `Cycler`
        ")
                        (reparse-symbol indented_block_body) [11438 12095]))                  
                :type "class")
                nil [1777 12095])
            ("concat" function
               (:documentation "Concatenate two cyclers.

    The keys must match exactly.

    This returns a single Cycler which is equivalent to
    `itertools.chain(left, right)`

    Examples
    --------

    >>> num = cycler('a', range(3))
    >>> let = cycler('a', 'abc')
    >>> num.concat(let)
    cycler('a', [0, 1, 2, 'a', 'b', 'c'])

    Parameters
    ----------
    left, right : `Cycler`
        The two `Cycler` instances to concatenate

    Returns
    -------
    ret : `Cycler`
        The concatenated `Cycler`
    "
                :arguments 
                  ( ("left" variable nil (reparse-symbol function_parameters) [12108 12112])
                    ("right" variable nil (reparse-symbol function_parameters) [12114 12119]))                  )
                nil [12097 13107])
            ("cycler" function
               (:documentation "
    Create a new `Cycler` object from a single positional argument,
    a pair of positional arguments, or the combination of keyword arguments.

    cycler(arg)
    cycler(label1=itr1[, label2=iter2[, ...]])
    cycler(label, itr)

    Form 1 simply copies a given `Cycler` object.

    Form 2 composes a `Cycler` as an inner product of the
    pairs of keyword arguments. In other words, all of the
    iterables are cycled simultaneously, as if through zip().

    Form 3 creates a `Cycler` from a label and an iterable.
    This is useful for when the label cannot be a keyword argument
    (e.g., an integer or a name that has a space in it).

    Parameters
    ----------
    arg : Cycler
        Copy constructor for Cycler (does a shallow copy of iterables).

    label : name
        The property key. In the 2-arg form of the function,
        the label can be any hashable object. In the keyword argument
        form of the function, it must be a valid python identifier.

    itr : iterable
        Finite length iterable of the property values.
        Can be a single-property `Cycler` that would
        be like a key change, but as a shallow copy.

    Returns
    -------
    cycler : Cycler
        New `Cycler` for the given property

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [13120 13125])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13127 13135]))                  )
                nil [13109 15191])
            ("_cycler" function
               (:documentation "
    Create a new `Cycler` object from a property name and
    iterable of values.

    Parameters
    ----------
    label : hashable
        The property key.

    itr : iterable
        Finite length iterable of the property values.

    Returns
    -------
    cycler : Cycler
        New `Cycler` for the given property
    "
                :arguments 
                  ( ("label" variable nil (reparse-symbol function_parameters) [15205 15210])
                    ("itr" variable nil (reparse-symbol function_parameters) [15212 15215]))                  )
                nil [15193 15960]))          
      :file "cycler.py"
      :pointmax 15960
      :fsize 15959
      :lastmodtime '(22210 47444 0 0)
      :unmatched-syntax '((NAME 1547 . 1553) (IF 1574 . 1576) (ELSE 1595 . 1599) (NAME 1489 . 1495) (IF 1515 . 1517) (ELSE 1535 . 1539)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__doc__" variable nil nil [1130 2767])
            ("__version__" variable nil nil [2769 2790])
            ("__versionTime__" variable nil nil [2791 2832])
            ("__author__" variable nil nil [2833 2890])
            ("string" include nil nil [2892 2905])
            ("weakref" include nil nil [2906 2938])
            ("copy" include nil nil [2939 2950])
            ("sys" include nil nil [2951 2961])
            ("warnings" include nil nil [2962 2977])
            ("re" include nil nil [2978 2987])
            ("sre_constants" include nil nil [2988 3008])
            ("collections" include nil nil [3009 3027])
            ("pprint" include nil nil [3028 3041])
            ("traceback" include nil nil [3042 3058])
            ("types" include nil nil [3059 3071])
            ("datetime" include nil nil [3072 3101])
            ("try" code nil nil [3103 3190])
            ("try" code nil nil [3191 3393])
            ("__all__" variable nil nil [3496 5044])
            ("system_version" variable nil nil [5046 5090])
            ("PY_3" code nil nil [5091 5120])
            ("if" code nil nil [5121 6668])
            ("_generatorType" variable nil nil [6681 6725])
            ("_xml_escape" function
               (:documentation "Escape &, <, >, \", ', etc. in a string of data."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [6744 6748]))                  )
                nil [6728 7053])
            ("_Constants" type
               (:superclasses ("object")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [7084 7088]))                  
                :type "class")
                nil [7054 7089])
            ("alphas" code nil nil [7090 7150])
            ("nums" variable nil nil [7151 7176])
            ("hexnums" code nil nil [7177 7211])
            ("alphanums" code nil nil [7212 7238])
            ("_bslash" variable nil nil [7239 7259])
            ("printables" variable nil nil [7260 7339])
            ("ParseBaseException" type
               (:documentation "base exception class for all parsing runtime exceptions"
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7630 7644])
                            ("if" code nil (reparse-symbol indented_block_body) [7653 7794])
                            ("self" variable nil (reparse-symbol indented_block_body) [7802 7827])
                            ("self" variable nil (reparse-symbol indented_block_body) [7836 7864]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7580 7584])
                            ("pstr" variable nil (reparse-symbol function_parameters) [7586 7590])
                            ("loc" variable nil (reparse-symbol function_parameters) [7592 7595])
                            ("msg" variable nil (reparse-symbol function_parameters) [7599 7602])
                            ("elem" variable nil (reparse-symbol function_parameters) [7609 7613]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7566 7865])
                    ("_from_exception" function
                       (:documentation "
        internal factory method to simplify creating one type of ParseException 
        from another - avoids having __init__ signature conflicts among subclasses
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7907 7910])
                            ("pe" variable nil (reparse-symbol function_parameters) [7912 7914]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7870 8167])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8189 8193])
                            ("aname" variable nil (reparse-symbol function_parameters) [8195 8200]))                          
                        :documentation "supported attributes by name are:
            - lineno - returns the line number of the exception text
            - col - returns the column number of the exception text
            - line - returns the line containing the exception text
        ")
                        (reparse-symbol indented_block_body) [8172 8772])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8790 8794]))                          )
                        (reparse-symbol indented_block_body) [8777 8919])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8937 8941]))                          )
                        (reparse-symbol indented_block_body) [8923 8972])
                    ("markInputline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8995 8999])
                            ("markerString" variable nil (reparse-symbol function_parameters) [9001 9013]))                          
                        :documentation "Extracts the exception line from the input string, and marks
           the location of the exception with a special symbol.
        ")
                        (reparse-symbol indented_block_body) [8976 9424])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9440 9444]))                          )
                        (reparse-symbol indented_block_body) [9428 9506]))                  
                :type "class")
                nil [7341 9506])
            ("ParseException" type
               (:documentation "
    Exception thrown when parse expressions don't match class;
    supported attributes by name are:
     - lineno - returns the line number of the exception text
     - col - returns the column number of the exception text
     - line - returns the line containing the exception text
        
    Example::
        try:
            Word(nums).setName(\"integer\").parseString(\"ABC\")
        except ParseException as pe:
            print(pe)
            print(\"column: {}\".format(pe.col))
            
    prints::
       Expected integer (at char 0), (line:1, col:1)
        column: 1
    "
                :superclasses ("ParseBaseException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10154 10158]))                  
                :type "class")
                nil [9507 10159])
            ("ParseFatalException" type
               (:documentation "user-throwable exception thrown when inconsistent parse content
       is found; stops all parsing immediately"
                :superclasses ("ParseBaseException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10332 10336]))                  
                :type "class")
                nil [10160 10337])
            ("ParseSyntaxException" type
               (:documentation "just like L{ParseFatalException}, but thrown internally when an
       L{ErrorStop<And._ErrorStop>} ('-' operator) indicates that parsing is to stop 
       immediately because an unbacktrackable syntax error has been found"
                :superclasses ("ParseFatalException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [10625 10629]))                  
                :type "class")
                nil [10338 10630])
            ("RecursiveGrammarException" type
               (:documentation "exception thrown by L{ParserElement.validate} if the grammar could be improperly recursive"
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11482 11523]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11448 11452])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [11454 11470]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11434 11524])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11542 11546]))                          )
                        (reparse-symbol indented_block_body) [11529 11622]))                  
                :type "class")
                nil [11285 11622])
            ("_ParseResultsWithOffset" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11700 11718]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11679 11683])
                            ("p1" variable nil (reparse-symbol function_parameters) [11684 11686])
                            ("p2" variable nil (reparse-symbol function_parameters) [11687 11689]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11666 11719])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11739 11743])
                            ("i" variable nil (reparse-symbol function_parameters) [11744 11745]))                          )
                        (reparse-symbol indented_block_body) [11723 11775])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11792 11796]))                          )
                        (reparse-symbol indented_block_body) [11779 11832])
                    ("setOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11850 11854])
                            ("i" variable nil (reparse-symbol function_parameters) [11855 11856]))                          )
                        (reparse-symbol indented_block_body) [11836 11894]))                  
                :type "class")
                nil [11623 11894])
            ("ParseResults" type
               (:documentation "
    Structured parse results, to provide multiple means of access to the parsed data:
       - as a list (C{len(results)})
       - by list index (C{results[0], results[1]}, etc.)
       - by attribute (C{results.<resultsName>} - see L{ParserElement.setResultsName})

    Example::
        integer = Word(nums)
        date_str = (integer.setResultsName(\"year\") + '/' 
                        + integer.setResultsName(\"month\") + '/' 
                        + integer.setResultsName(\"day\"))
        # equivalent form:
        # date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")

        # parseString returns a ParseResults object
        result = date_str.parseString(\"1999/12/31\")

        def test(s, fn=repr):
            print(\"%s -> %s\" % (s, fn(eval(s))))
        test(\"list(result)\")
        test(\"result[0]\")
        test(\"result['month']\")
        test(\"result.day\")
        test(\"'month' in result\")
        test(\"'minutes' in result\")
        test(\"result.dump()\", str)
    prints::
        list(result) -> ['1999', '/', '12', '/', '31']
        result[0] -> '1999'
        result['month'] -> '12'
        result.day -> '31'
        'month' in result -> True
        'minutes' in result -> False
        result.dump() -> ['1999', '/', '12', '/', '31']
        - day: 31
        - month: 12
        - year: 1999
    "
                :superclasses ("object")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [13303 13306])
                        ("toklist" variable nil (reparse-symbol function_parameters) [13308 13315])
                        ("name" variable nil (reparse-symbol function_parameters) [13322 13326])
                        ("asList" variable nil (reparse-symbol function_parameters) [13333 13339])
                        ("modal" variable nil (reparse-symbol function_parameters) [13346 13351]))                      ) (reparse-symbol indented_block_body) [13291 13514])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [13740 14304])
                            ("if" code nil (reparse-symbol indented_block_body) [14313 15292]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13651 13655])
                            ("toklist" variable nil (reparse-symbol function_parameters) [13657 13664])
                            ("name" variable nil (reparse-symbol function_parameters) [13671 13675])
                            ("asList" variable nil (reparse-symbol function_parameters) [13682 13688])
                            ("modal" variable nil (reparse-symbol function_parameters) [13695 13700])
                            ("isinstance" variable nil (reparse-symbol function_parameters) [13707 13717]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13637 15292])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15314 15318])
                            ("i" variable nil (reparse-symbol function_parameters) [15320 15321]))                          )
                        (reparse-symbol indented_block_body) [15297 15599])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15621 15625])
                            ("k" variable nil (reparse-symbol function_parameters) [15627 15628])
                            ("v" variable nil (reparse-symbol function_parameters) [15630 15631])
                            ("isinstance" variable nil (reparse-symbol function_parameters) [15633 15643]))                          )
                        (reparse-symbol indented_block_body) [15604 16100])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16122 16126])
                            ("i" variable nil (reparse-symbol function_parameters) [16128 16129]))                          )
                        (reparse-symbol indented_block_body) [16105 16887])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16910 16914])
                            ("k" variable nil (reparse-symbol function_parameters) [16916 16917]))                          )
                        (reparse-symbol indented_block_body) [16892 16956])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16974 16978]))                          )
                        (reparse-symbol indented_block_body) [16961 17011])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17028 17032]))                          )
                        (reparse-symbol indented_block_body) [17015 17069])
                    ("__nonzero__" variable nil (reparse-symbol indented_block_body) [17073 17095])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17114 17118]))                          )
                        (reparse-symbol indented_block_body) [17100 17152])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17174 17178]))                          )
                        (reparse-symbol indented_block_body) [17156 17218])
                    ("_iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17237 17241]))                          )
                        (reparse-symbol indented_block_body) [17222 17392])
                    ("_itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17414 17418]))                          )
                        (reparse-symbol indented_block_body) [17397 17473])
                    ("_iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17506 17510]))                          )
                        (reparse-symbol indented_block_body) [17490 17570])
                    ("if" code nil (reparse-symbol indented_block_body) [17575 18835])
                    ("haskeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18853 18857]))                          
                        :documentation "Since keys() returns an iterator, this method is helpful in bypassing
           code that looks for the existence of any defined results names.")
                        (reparse-symbol indented_block_body) [18840 19056])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19078 19082])
                            ("args" variable nil (reparse-symbol function_parameters) [19084 19089])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19091 19099]))                          
                        :documentation "
        Removes and returns item at specified index (default=C{last}).
        Supports both C{list} and C{dict} semantics for C{pop()}. If passed no
        argument or an integer argument, it will use C{list} semantics
        and pop tokens from the list of parsed tokens. If passed a 
        non-integer argument (most likely a string), it will use C{dict}
        semantics and pop the corresponding value from any defined 
        results names. A second default return value argument is 
        supported, just as in C{dict.pop()}.

        Example::
            def remove_first(tokens):
                tokens.pop(0)
            print(OneOrMore(Word(nums)).parseString(\"0 123 321\")) # -> ['0', '123', '321']
            print(OneOrMore(Word(nums)).addParseAction(remove_first).parseString(\"0 123 321\")) # -> ['123', '321']

            label = Word(alphas)
            patt = label(\"LABEL\") + OneOrMore(Word(nums))
            print(patt.parseString(\"AAB 123 321\").dump())

            # Use pop() in a parse action to remove named result (note that corresponding value is not
            # removed from list form of results)
            def remove_LABEL(tokens):
                tokens.pop(\"LABEL\")
                return tokens
            patt.addParseAction(remove_LABEL)
            print(patt.parseString(\"AAB 123 321\").dump())
        prints::
            ['AAB', '123', '321']
            - LABEL: AAB

            ['AAB', '123', '321']
        ")
                        (reparse-symbol indented_block_body) [19069 21148])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21161 21165])
                            ("key" variable nil (reparse-symbol function_parameters) [21167 21170])
                            ("defaultValue" variable nil (reparse-symbol function_parameters) [21172 21184]))                          
                        :documentation "
        Returns named result matching the given key, or if there is no
        such name, then returns the given C{defaultValue} or C{None} if no
        C{defaultValue} is specified.

        Similar to C{dict.get()}.
        
        Example::
            integer = Word(nums)
            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")           

            result = date_str.parseString(\"1999/12/31\")
            print(result.get(\"year\")) # -> '1999'
            print(result.get(\"hour\", \"not specified\")) # -> 'not specified'
            print(result.get(\"hour\")) # -> None
        ")
                        (reparse-symbol indented_block_body) [21153 21923])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21940 21944])
                            ("index" variable nil (reparse-symbol function_parameters) [21946 21951])
                            ("insStr" variable nil (reparse-symbol function_parameters) [21953 21959]))                          
                        :documentation "
        Inserts new element at location index in the list of parsed tokens.
        
        Similar to C{list.insert()}.

        Example::
            print(OneOrMore(Word(nums)).parseString(\"0 123 321\")) # -> ['0', '123', '321']

            # use a parse action to insert the parse location in the front of the parsed results
            def insert_locn(locn, tokens):
                tokens.insert(0, locn)
            print(OneOrMore(Word(nums)).addParseAction(insert_locn).parseString(\"0 123 321\")) # -> [0, '0', '123', '321']
        ")
                        (reparse-symbol indented_block_body) [21928 22825])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22842 22846])
                            ("item" variable nil (reparse-symbol function_parameters) [22848 22852]))                          
                        :documentation "
        Add single element to end of ParseResults list of elements.

        Example::
            print(OneOrMore(Word(nums)).parseString(\"0 123 321\")) # -> ['0', '123', '321']
            
            # use a parse action to compute the sum of the parsed integers, and add it to the end
            def append_sum(tokens):
                tokens.append(sum(map(int, tokens)))
            print(OneOrMore(Word(nums)).addParseAction(append_sum).parseString(\"0 123 321\")) # -> ['0', '123', '321', 444]
        ")
                        (reparse-symbol indented_block_body) [22830 23417])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23434 23438])
                            ("itemseq" variable nil (reparse-symbol function_parameters) [23440 23447]))                          
                        :documentation "
        Add sequence of elements to end of ParseResults list of elements.

        Example::
            patt = OneOrMore(Word(alphas))
            
            # use a parse action to append the reverse of the matched strings, to make a palindrome
            def make_palindrome(tokens):
                tokens.extend(reversed([t[::-1] for t in tokens]))
                return ''.join(tokens)
            print(patt.addParseAction(make_palindrome).parseString(\"lskdj sdlkjf lksd\")) # -> 'lskdjsdlkjflksddsklfjkldsjdksl'
        ")
                        (reparse-symbol indented_block_body) [23422 24129])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24145 24149]))                          
                        :documentation "
        Clear all elements and results names.
        ")
                        (reparse-symbol indented_block_body) [24134 24284])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24306 24310])
                            ("name" variable nil (reparse-symbol function_parameters) [24312 24316]))                          )
                        (reparse-symbol indented_block_body) [24289 24685])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24703 24707])
                            ("other" variable nil (reparse-symbol function_parameters) [24709 24714]))                          )
                        (reparse-symbol indented_block_body) [24690 24784])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24803 24807])
                            ("other" variable nil (reparse-symbol function_parameters) [24809 24814]))                          )
                        (reparse-symbol indented_block_body) [24789 25451])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25469 25473])
                            ("other" variable nil (reparse-symbol function_parameters) [25475 25480]))                          )
                        (reparse-symbol indented_block_body) [25456 25732])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25759 25763]))                          )
                        (reparse-symbol indented_block_body) [25745 25846])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25864 25868]))                          )
                        (reparse-symbol indented_block_body) [25851 25987])
                    ("_asStringList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26011 26015])
                            ("sep" variable nil (reparse-symbol function_parameters) [26017 26020]))                          )
                        (reparse-symbol indented_block_body) [25992 26312])
                    ("asList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26329 26333]))                          
                        :documentation "
        Returns the parse results as a nested list of matching tokens, all converted to strings.

        Example::
            patt = OneOrMore(Word(alphas))
            result = patt.parseString(\"sldkj lsdkj sldkj\")
            # even though the result prints in string-like form, it is actually a pyparsing ParseResults
            print(type(result), result) # -> <class 'pyparsing.ParseResults'> ['sldkj', 'lsdkj', 'sldkj']
            
            # Use asList() to create an actual list
            result_list = result.asList()
            print(type(result_list), result_list) # -> <class 'list'> ['sldkj', 'lsdkj', 'sldkj']
        ")
                        (reparse-symbol indented_block_body) [26317 27092])
                    ("asDict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27109 27113]))                          
                        :documentation "
        Returns the named parse results as a nested dictionary.

        Example::
            integer = Word(nums)
            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")
            
            result = date_str.parseString('12/31/1999')
            print(type(result), repr(result)) # -> <class 'pyparsing.ParseResults'> (['12', '/', '31', '/', '1999'], {'day': [('1999', 4)], 'year': [('12', 0)], 'month': [('31', 2)]})
            
            result_dict = result.asDict()
            print(type(result_dict), repr(result_dict)) # -> <class 'dict'> {'day': '1999', 'year': '12', 'month': '31'}

            # even though a ParseResults supports dict-like access, sometime you just need to have a dict
            import json
            print(json.dumps(result)) # -> Exception: TypeError: ... is not JSON serializable
            print(json.dumps(result.asDict())) # -> {\"month\": \"31\", \"day\": \"1999\", \"year\": \"12\"}
        ")
                        (reparse-symbol indented_block_body) [27097 28546])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28561 28565]))                          
                        :documentation "
        Returns a new copy of a C{ParseResults} object.
        ")
                        (reparse-symbol indented_block_body) [28551 28882])
                    ("asXML" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28898 28902])
                            ("doctag" variable nil (reparse-symbol function_parameters) [28904 28910])
                            ("namedItemsOnly" variable nil (reparse-symbol function_parameters) [28917 28931])
                            ("indent" variable nil (reparse-symbol function_parameters) [28939 28945])
                            ("formatted" variable nil (reparse-symbol function_parameters) [28950 28959]))                          
                        :documentation "
        (Deprecated) Returns the parse results as XML. Tags are created for tokens and lists that have defined results names.
        ")
                        (reparse-symbol indented_block_body) [28887 31162])
                    ("__lookup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31180 31184])
                            ("sub" variable nil (reparse-symbol function_parameters) [31185 31188]))                          )
                        (reparse-symbol indented_block_body) [31167 31348])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31365 31369]))                          )
                        (reparse-symbol indented_block_body) [31353 32658])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32672 32676])
                            ("indent" variable nil (reparse-symbol function_parameters) [32678 32684])
                            ("depth" variable nil (reparse-symbol function_parameters) [32689 32694])
                            ("full" variable nil (reparse-symbol function_parameters) [32698 32702]))                          
                        :documentation "
        Diagnostic method for listing out the contents of a C{ParseResults}.
        Accepts an optional C{indent} argument so that this string can be embedded
        in a nested display of other data.

        Example::
            integer = Word(nums)
            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")
            
            result = date_str.parseString('12/31/1999')
            print(result.dump())
        prints::
            ['12', '/', '31', '/', '1999']
            - day: 1999
            - month: 31
            - year: 12
        ")
                        (reparse-symbol indented_block_body) [32663 34487])
                    ("pprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34503 34507])
                            ("args" variable nil (reparse-symbol function_parameters) [34509 34514])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34516 34524]))                          
                        :documentation "
        Pretty-printer for parsed results as a list, using the C{pprint} module.
        Accepts additional positional or keyword args as defined for the 
        C{pprint.pprint} method. (U{http://docs.python.org/3/library/pprint.html#pprint.pprint})

        Example::
            ident = Word(alphas, alphanums)
            num = Word(nums)
            func = Forward()
            term = ident | num | Group('(' + func + ')')
            func <<= ident + Group(Optional(delimitedList(term)))
            result = func.parseString(\"fna a,b,(fnb c,d,200),100\")
            result.pprint(width=40)
        prints::
            ['fna',
             ['a',
              'b',
              ['(', 'fnb', ['c', 'd', '200'], ')'],
              '100']]
        ")
                        (reparse-symbol indented_block_body) [34492 35353])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35413 35417]))                          )
                        (reparse-symbol indented_block_body) [35396 35642])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35664 35668])
                            ("state" variable nil (reparse-symbol function_parameters) [35669 35674]))                          )
                        (reparse-symbol indented_block_body) [35647 35998])
                    ("__getnewargs__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36022 36026]))                          )
                        (reparse-symbol indented_block_body) [36003 36101])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36118 36122]))                          )
                        (reparse-symbol indented_block_body) [36106 36178]))                  
                :type "class")
                nil [11895 36178])
            ("collections" code nil nil [36179 36228])
            ("col" function
               (:documentation "Returns current column within a string, counting newlines as line separators.
   The first column is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   "
                :arguments 
                  ( ("loc" variable nil (reparse-symbol function_parameters) [36239 36242])
                    ("strg" variable nil (reparse-symbol function_parameters) [36243 36247]))                  )
                nil [36230 36873])
            ("lineno" function
               (:documentation "Returns current line number within a string, counting newlines as line separators.
   The first line is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   "
                :arguments 
                  ( ("loc" variable nil (reparse-symbol function_parameters) [36885 36888])
                    ("strg" variable nil (reparse-symbol function_parameters) [36889 36893]))                  )
                nil [36874 37464])
            ("line" function
               (:documentation "Returns the line of text containing loc within a string, counting newlines as line separators.
       "
                :arguments 
                  ( ("loc" variable nil (reparse-symbol function_parameters) [37475 37478])
                    ("strg" variable nil (reparse-symbol function_parameters) [37480 37484]))                  )
                nil [37465 37771])
            ("_defaultStartDebugAction" function (:arguments 
              ( ("instring" variable nil (reparse-symbol function_parameters) [37802 37810])
                ("loc" variable nil (reparse-symbol function_parameters) [37812 37815])
                ("expr" variable nil (reparse-symbol function_parameters) [37817 37821]))              ) nil [37772 37946])
            ("_defaultSuccessDebugAction" function (:arguments 
              ( ("instring" variable nil (reparse-symbol function_parameters) [37979 37987])
                ("startloc" variable nil (reparse-symbol function_parameters) [37989 37997])
                ("endloc" variable nil (reparse-symbol function_parameters) [37999 38005])
                ("expr" variable nil (reparse-symbol function_parameters) [38007 38011])
                ("toks" variable nil (reparse-symbol function_parameters) [38013 38017]))              ) nil [37947 38088])
            ("_defaultExceptionDebugAction" function (:arguments 
              ( ("instring" variable nil (reparse-symbol function_parameters) [38123 38131])
                ("loc" variable nil (reparse-symbol function_parameters) [38133 38136])
                ("expr" variable nil (reparse-symbol function_parameters) [38138 38142])
                ("exc" variable nil (reparse-symbol function_parameters) [38144 38147]))              ) nil [38089 38196])
            ("nullDebugAction" function
               (:documentation "'Do-nothing' debug action, to suppress debugging output during parsing."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [38217 38222]))                  )
                nil [38197 38316])
            ("'decorator to trim function calls to match the arity of the target'" code nil nil [39076 39143])
            ("_trim_arity" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [39160 39164])
                ("maxargs" variable nil (reparse-symbol function_parameters) [39166 39173]))              ) nil [39144 41567])
            ("ParserElement" type
               (:documentation "Abstract base level parser element class."
                :superclasses ("object")
                :members 
                  ( ("DEFAULT_WHITE_CHARS" variable nil (reparse-symbol indented_block_body) [41653 41684])
                    ("verbose_stacktrace" variable nil (reparse-symbol indented_block_body) [41689 41715])
                    ("setDefaultWhitespaceChars" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("chars" variable nil (reparse-symbol function_parameters) [41770 41775]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [41721 42310])
                    ("inlineLiteralsUsing" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [42357 42360]))                          
                        :documentation "
        Set class to be used for inclusion of string literals into a parser.
        
        Example::
            # default literal class used is Literal
            integer = Word(nums)
            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")           

            date_str.parseString(\"1999/12/31\")  # -> ['1999', '/', '12', '/', '31']


            # change to Suppress
            ParserElement.inlineLiteralsUsing(Suppress)
            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")           

            date_str.parseString(\"1999/12/31\")  # -> ['1999', '12', '31']
        ")
                        (reparse-symbol indented_block_body) [42315 43071])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [43122 43147])
                            ("self" variable nil (reparse-symbol indented_block_body) [43156 43178])
                            ("self" variable nil (reparse-symbol indented_block_body) [43282 43301])
                            ("self" variable nil (reparse-symbol indented_block_body) [43310 43333])
                            ("self" variable nil (reparse-symbol indented_block_body) [43342 43368])
                            ("self" variable nil (reparse-symbol indented_block_body) [43377 43403])
                            ("self" variable nil (reparse-symbol indented_block_body) [43412 43463])
                            ("self" variable nil (reparse-symbol indented_block_body) [43472 43505])
                            ("self" variable nil (reparse-symbol indented_block_body) [43514 43541])
                            ("self" variable nil (reparse-symbol indented_block_body) [43590 43611])
                            ("self" variable nil (reparse-symbol indented_block_body) [43620 43645])
                            ("self" variable nil (reparse-symbol indented_block_body) [43654 43672])
                            ("self" variable nil (reparse-symbol indented_block_body) [43681 43705])
                            ("self" variable nil (reparse-symbol indented_block_body) [43714 43739])
                            ("self" variable nil (reparse-symbol indented_block_body) [43832 43848])
                            ("self" variable nil (reparse-symbol indented_block_body) [43857 43881])
                            ("self" variable nil (reparse-symbol indented_block_body) [43972 44012])
                            ("self" variable nil (reparse-symbol indented_block_body) [44043 44057])
                            ("self" variable nil (reparse-symbol indented_block_body) [44066 44090])
                            ("self" variable nil (reparse-symbol indented_block_body) [44143 44169]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43090 43094])
                            ("savelist" variable nil (reparse-symbol function_parameters) [43096 43104]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43076 44170])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44185 44189]))                          
                        :documentation "
        Make a copy of this C{ParserElement}.  Useful for defining different parse actions
        for the same parsing pattern, using copies of the original parse element.
        
        Example::
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            integerK = integer.copy().addParseAction(lambda toks: toks[0]*1024) + Suppress(\"K\")
            integerM = integer.copy().addParseAction(lambda toks: toks[0]*1024*1024) + Suppress(\"M\")
            
            print(OneOrMore(integerK | integerM | integer).parseString(\"5K 100 640K 256M\"))
        prints::
            [5120, 100, 655360, 268435456]
        Equivalent form of C{expr.copy()} is just C{expr()}::
            integerM = integer().addParseAction(lambda toks: toks[0]*1024*1024) + Suppress(\"M\")
        ")
                        (reparse-symbol indented_block_body) [44175 45257])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45275 45279])
                            ("name" variable nil (reparse-symbol function_parameters) [45281 45285]))                          
                        :documentation "
        Define name for this expression, makes debugging and exception messages clearer.
        
        Example::
            Word(nums).parseString(\"ABC\")  # -> Exception: Expected W:(0123...) (at char 0), (line:1, col:1)
            Word(nums).setName(\"integer\").parseString(\"ABC\")  # -> Exception: Expected integer (at char 0), (line:1, col:1)
        ")
                        (reparse-symbol indented_block_body) [45262 45836])
                    ("setResultsName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45861 45865])
                            ("name" variable nil (reparse-symbol function_parameters) [45867 45871])
                            ("listAllMatches" variable nil (reparse-symbol function_parameters) [45873 45887]))                          
                        :documentation "
        Define name for referencing matching tokens as a nested attribute
        of the returned parse results.
        NOTE: this returns a *copy* of the original C{ParserElement} object;
        this is so that the client can define a basic element, such as an
        integer, and reference it in multiple places with different names.

        You can also set results names using the abbreviated syntax,
        C{expr(\"name\")} in place of C{expr.setResultsName(\"name\")} - 
        see L{I{__call__}<__call__>}.

        Example::
            date_str = (integer.setResultsName(\"year\") + '/' 
                        + integer.setResultsName(\"month\") + '/' 
                        + integer.setResultsName(\"day\"))

            # equivalent form:
            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")
        ")
                        (reparse-symbol indented_block_body) [45841 46990])
                    ("setBreak" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47008 47012])
                            ("breakFlag" variable nil (reparse-symbol function_parameters) [47013 47022]))                          
                        :documentation "Method to invoke the Python pdb debugger when this element is
           about to be parsed. Set C{breakFlag} to True to enable, False to
           disable.
        ")
                        (reparse-symbol indented_block_body) [46995 47733])
                    ("setParseAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47758 47762])
                            ("fns" variable nil (reparse-symbol function_parameters) [47764 47768])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47770 47778]))                          
                        :documentation "
        Define one or more actions to perform when successfully matching parse element definition.
        Parse action fn is a callable method with 0-3 arguments, called as C{fn(s,loc,toks)},
        C{fn(loc,toks)}, C{fn(toks)}, or just C{fn()}, where:
         - s   = the original string being parsed (see note below)
         - loc = the location of the matching substring
         - toks = a list of the matched tokens, packaged as a C{L{ParseResults}} object
        If the functions in fns modify the tokens, they can return them as the return
        value from fn, and the modified list of tokens will replace the original.
        Otherwise, fn does not need to return any value.

        Optional keyword arguments:
         - callDuringTry = (default=C{False}) indicate if parse action should be run during lookaheads and alternate testing

        Note: the default parsing behavior is to expand tabs in the input string
        before starting the parsing process.  See L{I{parseString}<parseString>} for more information
        on parsing strings containing C{<TAB>}s, and suggested methods to maintain a
        consistent view of the parsed string, the parse location, and line and column
        positions within the parsed string.
        
        Example::
            integer = Word(nums)
            date_str = integer + '/' + integer + '/' + integer

            date_str.parseString(\"1999/12/31\")  # -> ['1999', '/', '12', '/', '31']

            # use parse action to convert to ints at parse time
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            date_str = integer + '/' + integer + '/' + integer

            # note that integer fields are now ints, not strings
            date_str.parseString(\"1999/12/31\")  # -> [1999, '/', 12, '/', 31]
        ")
                        (reparse-symbol indented_block_body) [47738 49758])
                    ("addParseAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49783 49787])
                            ("fns" variable nil (reparse-symbol function_parameters) [49789 49793])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49795 49803]))                          
                        :documentation "
        Add one or more parse actions to expression's list of parse actions. See L{I{setParseAction}<setParseAction>}.
        
        See examples in L{I{copy}<copy>}.
        ")
                        (reparse-symbol indented_block_body) [49763 50169])
                    ("addCondition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50191 50195])
                            ("fns" variable nil (reparse-symbol function_parameters) [50197 50201])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50203 50211]))                          
                        :documentation "Add a boolean predicate function to expression's list of parse actions. See 
        L{I{setParseAction}<setParseAction>} for function call signatures. Unlike C{setParseAction}, 
        functions passed to C{addCondition} need to return boolean success/fail of the condition.

        Optional keyword arguments:
         - message = define a custom message to be used in the raised exception
         - fatal   = if True, will raise ParseFatalException to stop parsing immediately; otherwise will raise ParseException
         
        Example::
            integer = Word(nums).setParseAction(lambda toks: int(toks[0]))
            year_int = integer.copy()
            year_int.addCondition(lambda toks: toks[0] >= 2000, message=\"Only support years 2000 and later\")
            date_str = year_int + '/' + integer + '/' + integer

            result = date_str.parseString(\"1999/12/31\")  # -> Exception: Only support years 2000 and later (at char 0), (line:1, col:1)
        ")
                        (reparse-symbol indented_block_body) [50174 51659])
                    ("setFailAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51683 51687])
                            ("fn" variable nil (reparse-symbol function_parameters) [51689 51691]))                          
                        :documentation "Define action to perform if parsing fails at this expression.
           Fail acton fn is a callable function that takes the arguments
           C{fn(s,loc,expr,err)} where:
            - s = string being parsed
            - loc = location where expression match was attempted and failed
            - expr = the parse expression that failed
            - err = the exception thrown
           The function returns no value.  It may throw C{L{ParseFatalException}}
           if it is desired to stop parsing immediately.")
                        (reparse-symbol indented_block_body) [51664 52282])
                    ("_skipIgnorables" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52308 52312])
                            ("instring" variable nil (reparse-symbol function_parameters) [52314 52322])
                            ("loc" variable nil (reparse-symbol function_parameters) [52324 52327]))                          )
                        (reparse-symbol indented_block_body) [52287 52690])
                    ("preParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52709 52713])
                            ("instring" variable nil (reparse-symbol function_parameters) [52715 52723])
                            ("loc" variable nil (reparse-symbol function_parameters) [52725 52728]))                          )
                        (reparse-symbol indented_block_body) [52695 53023])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53043 53047])
                            ("instring" variable nil (reparse-symbol function_parameters) [53049 53057])
                            ("loc" variable nil (reparse-symbol function_parameters) [53059 53062])
                            ("doActions" variable nil (reparse-symbol function_parameters) [53064 53073]))                          )
                        (reparse-symbol indented_block_body) [53028 53105])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53125 53129])
                            ("instring" variable nil (reparse-symbol function_parameters) [53131 53139])
                            ("loc" variable nil (reparse-symbol function_parameters) [53141 53144])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [53146 53155]))                          )
                        (reparse-symbol indented_block_body) [53110 53184])
                    ("_parseNoCache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53224 53228])
                            ("instring" variable nil (reparse-symbol function_parameters) [53230 53238])
                            ("loc" variable nil (reparse-symbol function_parameters) [53240 53243])
                            ("doActions" variable nil (reparse-symbol function_parameters) [53245 53254])
                            ("callPreParse" variable nil (reparse-symbol function_parameters) [53261 53273]))                          )
                        (reparse-symbol indented_block_body) [53205 56725])
                    ("tryParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56744 56748])
                            ("instring" variable nil (reparse-symbol function_parameters) [56750 56758])
                            ("loc" variable nil (reparse-symbol function_parameters) [56760 56763]))                          )
                        (reparse-symbol indented_block_body) [56730 56952])
                    ("canParseNext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56978 56982])
                            ("instring" variable nil (reparse-symbol function_parameters) [56984 56992])
                            ("loc" variable nil (reparse-symbol function_parameters) [56994 56997]))                          )
                        (reparse-symbol indented_block_body) [56961 57162])
                    ("_UnboundedCache" type
                       (:superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("cache" variable nil (reparse-symbol indented_block_body) [57238 57248])
                                    ("self" variable nil (reparse-symbol indented_block_body) [57261 57304])
                                    ("get" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [57326 57330])
                                            ("key" variable nil (reparse-symbol function_parameters) [57332 57335]))                                          )
                                        (reparse-symbol indented_block_body) [57318 57390])
                                    ("set" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [57411 57415])
                                            ("key" variable nil (reparse-symbol function_parameters) [57417 57420])
                                            ("value" variable nil (reparse-symbol function_parameters) [57422 57427]))                                          )
                                        (reparse-symbol indented_block_body) [57403 57465])
                                    ("clear" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [57488 57492]))                                          )
                                        (reparse-symbol indented_block_body) [57478 57525])
                                    ("cache_len" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [57568 57572]))                                          )
                                        (reparse-symbol indented_block_body) [57554 57609])
                                    ("self" variable nil (reparse-symbol indented_block_body) [57622 57660])
                                    ("self" variable nil (reparse-symbol indented_block_body) [57673 57711])
                                    ("self" variable nil (reparse-symbol indented_block_body) [57724 57766])
                                    ("self" variable nil (reparse-symbol indented_block_body) [57779 57827]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [57219 57223]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [57206 57828]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [57167 57828])
                    ("if" code nil (reparse-symbol indented_block_body) [57833 59753])
                    ("packrat_cache" variable nil (reparse-symbol indented_block_body) [59857 59875])
                    ("packrat_cache_lock" variable nil (reparse-symbol indented_block_body) [59968 59996])
                    ("packrat_cache_stats" variable nil (reparse-symbol indented_block_body) [60001 60029])
                    ("_parseCache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60244 60248])
                            ("instring" variable nil (reparse-symbol function_parameters) [60250 60258])
                            ("loc" variable nil (reparse-symbol function_parameters) [60260 60263])
                            ("doActions" variable nil (reparse-symbol function_parameters) [60265 60274])
                            ("callPreParse" variable nil (reparse-symbol function_parameters) [60281 60293]))                          )
                        (reparse-symbol indented_block_body) [60227 61281])
                    ("_parse" variable nil (reparse-symbol indented_block_body) [61286 61308])
                    ("resetCache" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [61314 61486])
                    ("_packratEnabled" variable nil (reparse-symbol indented_block_body) [61491 61514])
                    ("enablePackrat" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cache_size_limit" variable nil (reparse-symbol function_parameters) [61555 61571]))                          
                        :documentation "Enables \"packrat\" parsing, which adds memoizing to the parsing logic.
           Repeated parse attempts at the same string location (which happens
           often in many complex grammars) can immediately return a cached value,
           instead of re-executing parsing/validating code.  Memoizing is done of
           both valid results and parsing exceptions.
           
           Parameters:
            - cache_size_limit - (default=C{128}) - if an integer value is provided
              will limit the size of the packrat cache; if None is passed, then
              the cache size will be unbounded; if 0 is passed, the cache will
              be effectively disabled.
            
           This speedup may break existing programs that use parse actions that
           have side-effects.  For this reason, packrat parsing is disabled when
           you first import pyparsing.  To activate the packrat feature, your
           program must call the class method C{ParserElement.enablePackrat()}.  If
           your program uses C{psyco} to \"compile as you go\", you must call
           C{enablePackrat} before calling C{psyco.full()}.  If you do not do this,
           Python will crash.  For best results, call C{enablePackrat()} immediately
           after importing pyparsing.
           
           Example::
               import pyparsing
               pyparsing.ParserElement.enablePackrat()
        ")
                        (reparse-symbol indented_block_body) [61519 63405])
                    ("parseString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63427 63431])
                            ("instring" variable nil (reparse-symbol function_parameters) [63433 63441])
                            ("parseAll" variable nil (reparse-symbol function_parameters) [63443 63451]))                          
                        :documentation "
        Execute the parse expression with the given string.
        This is the main interface to the client code, once the complete
        expression has been built.

        If you want the grammar to require that the entire input string be
        successfully parsed, then set C{parseAll} to True (equivalent to ending
        the grammar with C{L{StringEnd()}}).

        Note: C{parseString} implicitly calls C{expandtabs()} on the input string,
        in order to report proper column numbers in parse actions.
        If the input string contains tabs and
        the grammar uses parse actions that use the C{loc} argument to index into the
        string being parsed, you can ensure you have a consistent view of the input
        string by:
         - calling C{parseWithTabs} on your grammar before calling C{parseString}
           (see L{I{parseWithTabs}<parseWithTabs>})
         - define your parse action using the full C{(s,loc,toks)} signature, and
           reference the input string using the parse action's C{s} argument
         - explictly expand the tabs in your input string before calling
           C{parseString}
        
        Example::
            Word('a').parseString('aaaaabaaa')  # -> ['aaaaa']
            Word('a').parseString('aaaaabaaa', parseAll=True)  # -> Exception: Expected end of text
        ")
                        (reparse-symbol indented_block_body) [63410 65622])
                    ("scanString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65643 65647])
                            ("instring" variable nil (reparse-symbol function_parameters) [65649 65657])
                            ("maxMatches" variable nil (reparse-symbol function_parameters) [65659 65669])
                            ("overlap" variable nil (reparse-symbol function_parameters) [65680 65687]))                          
                        :documentation "
        Scan the input string for expression matches.  Each match will return the
        matching tokens, start location, and end location.  May be called with optional
        C{maxMatches} argument, to clip scanning after 'n' matches are found.  If
        C{overlap} is specified, then overlapping matches will be reported.

        Note that the start and end locations are reported relative to the string
        being parsed.  See L{I{parseString}<parseString>} for more information on parsing
        strings with embedded tabs.

        Example::
            source = \"sldjf123lsdjjkf345sldkjf879lkjsfd987\"
            print(source)
            for tokens,start,end in Word(alphas).scanString(source):
                print(' '*start + '^'*(end-start))
                print(' '*start + tokens[0])
        
        prints::
        
            sldjf123lsdjjkf345sldkjf879lkjsfd987
            ^^^^^
            sldjf
                    ^^^^^^^
                    lsdjjkf
                              ^^^^^^
                              sldkjf
                                       ^^^^^^
                                       lkjsfd
        ")
                        (reparse-symbol indented_block_body) [65627 68371])
                    ("transformString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68397 68401])
                            ("instring" variable nil (reparse-symbol function_parameters) [68403 68411]))                          
                        :documentation "
        Extension to C{L{scanString}}, to modify matching text with modified tokens that may
        be returned from a parse action.  To use C{transformString}, define a grammar and
        attach a parse action to it that modifies the returned token list.
        Invoking C{transformString()} on a target string will then scan for matches,
        and replace the matched text patterns according to the logic in the parse
        action.  C{transformString()} returns the resulting transformed string.
        
        Example::
            wd = Word(alphas)
            wd.setParseAction(lambda toks: toks[0].title())
            
            print(wd.transformString(\"now is the winter of our discontent made glorious summer by this sun of york.\"))
        Prints::
            Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York.
        ")
                        (reparse-symbol indented_block_body) [68376 70322])
                    ("searchString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70345 70349])
                            ("instring" variable nil (reparse-symbol function_parameters) [70351 70359])
                            ("maxMatches" variable nil (reparse-symbol function_parameters) [70361 70371]))                          
                        :documentation "
        Another extension to C{L{scanString}}, simplifying the access to the tokens found
        to match the given parse expression.  May be called with optional
        C{maxMatches} argument, to clip searching after 'n' matches are found.
        
        Example::
            # a capitalized word starts with an uppercase letter, followed by zero or more lowercase letters
            cap_word = Word(alphas.upper(), alphas.lower())
            
            print(cap_word.searchString(\"More than Iron, more than Lead, more than Gold I need Electricity\"))

            # the sum() builtin can be used to merge results into a single ParseResults object
            print(sum(cap_word.searchString(\"More than Iron, more than Lead, more than Gold I need Electricity\")))
        prints::
            [['More'], ['Iron'], ['Lead'], ['Gold'], ['I'], ['Electricity']]
            ['More', 'Iron', 'Lead', 'Gold', 'I', 'Electricity']
        ")
                        (reparse-symbol indented_block_body) [70327 71702])
                    ("split" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71717 71721])
                            ("instring" variable nil (reparse-symbol function_parameters) [71723 71731])
                            ("maxsplit" variable nil (reparse-symbol function_parameters) [71733 71741])
                            ("includeSeparators" variable nil (reparse-symbol function_parameters) [71752 71769]))                          
                        :documentation "
        Generator method to split a string using the given expression as a separator.
        May be called with optional C{maxsplit} argument, to limit the number of splits;
        and the optional C{includeSeparators} argument (default=C{False}), if the separating
        matching text should be included in the split results.
        
        Example::        
            punc = oneOf(list(\".,;:/-!?\"))
            print(list(punc.split(\"This, this?, this sentence, is badly punctuated!\")))
        prints::
            ['This', ' this', '', ' this sentence', ' is badly punctuated', '']
        ")
                        (reparse-symbol indented_block_body) [71707 72648])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72665 72669])
                            ("other" variable nil (reparse-symbol function_parameters) [72671 72676]))                          
                        :documentation "
        Implementation of + operator - returns C{L{And}}. Adding strings to a ParserElement
        converts them to L{Literal}s by default.
        
        Example::
            greet = Word(alphas) + \",\" + Word(alphas) + \"!\"
            hello = \"Hello, World!\"
            print (hello, \"->\", greet.parseString(hello))
        Prints::
            Hello, World! -> ['Hello', ',', 'World', '!']
        ")
                        (reparse-symbol indented_block_body) [72653 73466])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73484 73488])
                            ("other" variable nil (reparse-symbol function_parameters) [73490 73495]))                          
                        :documentation "
        Implementation of + operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [73471 73962])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73979 73983])
                            ("other" variable nil (reparse-symbol function_parameters) [73985 73990]))                          
                        :documentation "
        Implementation of - operator, returns C{L{And}} with error stop
        ")
                        (reparse-symbol indented_block_body) [73967 74463])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74481 74485])
                            ("other" variable nil (reparse-symbol function_parameters) [74487 74492]))                          
                        :documentation "
        Implementation of - operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [74468 74959])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74976 74980])
                            ("other" variable nil (reparse-symbol function_parameters) [74981 74986]))                          
                        :documentation "
        Implementation of * operator, allows use of C{expr * 3} in place of
        C{expr + expr + expr}.  Expressions may also me multiplied by a 2-integer
        tuple, similar to C{{min,max}} multipliers in regular expressions.  Tuples
        may also include C{None} as in:
         - C{expr*(n,None)} or C{expr*(n,)} is equivalent
              to C{expr*n + L{ZeroOrMore}(expr)}
              (read as \"at least n instances of C{expr}\")
         - C{expr*(None,n)} is equivalent to C{expr*(0,n)}
              (read as \"0 to n instances of C{expr}\")
         - C{expr*(None,None)} is equivalent to C{L{ZeroOrMore}(expr)}
         - C{expr*(1,None)} is equivalent to C{L{OneOrMore}(expr)}

        Note that C{expr*(None,n)} does not raise an exception if
        more than n exprs exist in the input stream; that is,
        C{expr*(None,n)} does not enforce a maximum number of expr
        occurrences.  If this behavior is desired, then write
        C{expr*(None,n) + ~expr}
        ")
                        (reparse-symbol indented_block_body) [74964 77979])
                    ("__rmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77997 78001])
                            ("other" variable nil (reparse-symbol function_parameters) [78003 78008]))                          )
                        (reparse-symbol indented_block_body) [77984 78046])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78062 78066])
                            ("other" variable nil (reparse-symbol function_parameters) [78068 78073]))                          
                        :documentation "
        Implementation of | operator - returns C{L{MatchFirst}}
        ")
                        (reparse-symbol indented_block_body) [78051 78537])
                    ("__ror__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78554 78558])
                            ("other" variable nil (reparse-symbol function_parameters) [78560 78565]))                          
                        :documentation "
        Implementation of | operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [78542 79032])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79049 79053])
                            ("other" variable nil (reparse-symbol function_parameters) [79055 79060]))                          
                        :documentation "
        Implementation of ^ operator - returns C{L{Or}}
        ")
                        (reparse-symbol indented_block_body) [79037 79508])
                    ("__rxor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79526 79530])
                            ("other" variable nil (reparse-symbol function_parameters) [79532 79537]))                          
                        :documentation "
        Implementation of ^ operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [79513 80004])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80021 80025])
                            ("other" variable nil (reparse-symbol function_parameters) [80027 80032]))                          
                        :documentation "
        Implementation of & operator - returns C{L{Each}}
        ")
                        (reparse-symbol indented_block_body) [80009 80484])
                    ("__rand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80502 80506])
                            ("other" variable nil (reparse-symbol function_parameters) [80508 80513]))                          
                        :documentation "
        Implementation of & operator when left operand is not a C{L{ParserElement}}
        ")
                        (reparse-symbol indented_block_body) [80489 80980])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81001 81005]))                          
                        :documentation "
        Implementation of ~ operator - returns C{L{NotAny}}
        ")
                        (reparse-symbol indented_block_body) [80985 81123])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81141 81145])
                            ("name" variable nil (reparse-symbol function_parameters) [81147 81151]))                          
                        :documentation "
        Shortcut for C{L{setResultsName}}, with C{listAllMatches=False}.
        
        If C{name} is given with a trailing C{'*'} character, then C{listAllMatches} will be
        passed as C{True}.
           
        If C{name} is omitted, same as calling C{L{copy}}.

        Example::
            # these are equivalent
            userdata = Word(alphas).setResultsName(\"name\") + Word(nums+\"-\").setResultsName(\"socsecno\")
            userdata = Word(alphas)(\"name\") + Word(nums+\"-\")(\"socsecno\")             
        ")
                        (reparse-symbol indented_block_body) [81128 81818])
                    ("suppress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81837 81841]))                          
                        :documentation "
        Suppresses the output of this C{ParserElement}; useful to keep punctuation from
        cluttering up returned output.
        ")
                        (reparse-symbol indented_block_body) [81823 82028])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82054 82058]))                          
                        :documentation "
        Disables the skipping of whitespace before matching the characters in the
        C{ParserElement}'s defined pattern.  This is normally only used internally by
        the pyparsing module, but may be needed in some whitespace-sensitive grammars.
        ")
                        (reparse-symbol indented_block_body) [82033 82397])
                    ("setWhitespaceChars" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82426 82430])
                            ("chars" variable nil (reparse-symbol function_parameters) [82432 82437]))                          
                        :documentation "
        Overrides the default whitespace chars
        ")
                        (reparse-symbol indented_block_body) [82402 82642])
                    ("parseWithTabs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82666 82670]))                          
                        :documentation "
        Overrides default behavior to expand C{<TAB>}s to spaces before parsing the input string.
        Must be called before C{parseString} when the input grammar contains elements that
        match C{<TAB>} characters.
        ")
                        (reparse-symbol indented_block_body) [82647 82971])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82988 82992])
                            ("other" variable nil (reparse-symbol function_parameters) [82994 82999]))                          
                        :documentation "
        Define expression to be ignored (e.g., comments) while doing pattern
        matching; may be called repeatedly, to define multiple comment or other
        ignorable patterns.
        
        Example::
            patt = OneOrMore(Word(alphas))
            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj']
            
            patt.ignore(cStyleComment)
            patt.parseString('ablaj /* comment */ lskjd') # -> ['ablaj', 'lskjd']
        ")
                        (reparse-symbol indented_block_body) [82976 83801])
                    ("setDebugActions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83827 83831])
                            ("startAction" variable nil (reparse-symbol function_parameters) [83833 83844])
                            ("successAction" variable nil (reparse-symbol function_parameters) [83846 83859])
                            ("exceptionAction" variable nil (reparse-symbol function_parameters) [83861 83876]))                          
                        :documentation "
        Enable display of debugging messages while doing pattern matching.
        ")
                        (reparse-symbol indented_block_body) [83806 84247])
                    ("setDebug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84266 84270])
                            ("flag" variable nil (reparse-symbol function_parameters) [84272 84276]))                          
                        :documentation "
        Enable display of debugging messages while doing pattern matching.
        Set C{flag} to True to enable, False to disable.

        Example::
            wd = Word(alphas).setName(\"alphaword\")
            integer = Word(nums).setName(\"numword\")
            term = wd | integer
            
            # turn on debugging for wd
            wd.setDebug()

            OneOrMore(term).parseString(\"abc 123 xyz 890\")
        
        prints::
            Match alphaword at loc 0(1,1)
            Matched alphaword -> ['abc']
            Match alphaword at loc 3(1,4)
            Exception raised:Expected alphaword (at char 4), (line:1, col:5)
            Match alphaword at loc 7(1,8)
            Matched alphaword -> ['xyz']
            Match alphaword at loc 11(1,12)
            Exception raised:Expected alphaword (at char 12), (line:1, col:13)
            Match alphaword at loc 15(1,16)
            Exception raised:Expected alphaword (at char 15), (line:1, col:16)

        The output shown is that produced by the default debug actions - custom debug actions can be
        specified using L{setDebugActions}. Prior to attempting
        to match the C{wd} expression, the debugging message C{\"Match <exprname> at loc <n>(<line>,<col>)\"}
        is shown. Then if the parse succeeds, a C{\"Matched\"} message is shown, or an C{\"Exception raised\"}
        message is shown. Also note the use of L{setName} to assign a human-readable name to the expression,
        which makes debugging and exception messages easier to understand - for instance, the default
        name created for the C{Word} expression without calling C{setName} is C{\"W:(ABCD...)\"}.
        ")
                        (reparse-symbol indented_block_body) [84252 86179])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86197 86201]))                          )
                        (reparse-symbol indented_block_body) [86184 86230])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86249 86253]))                          )
                        (reparse-symbol indented_block_body) [86235 86284])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86305 86309]))                          )
                        (reparse-symbol indented_block_body) [86289 86393])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86418 86422])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [86424 86440]))                          )
                        (reparse-symbol indented_block_body) [86398 86457])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86476 86480])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [86482 86495]))                          
                        :documentation "
        Check defined expressions for valid structure, check for infinite recursive definitions.
        ")
                        (reparse-symbol indented_block_body) [86462 86657])
                    ("parseFile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86677 86681])
                            ("file_or_filename" variable nil (reparse-symbol function_parameters) [86683 86699])
                            ("parseAll" variable nil (reparse-symbol function_parameters) [86701 86709]))                          
                        :documentation "
        Execute the parse expression on the given file or filename.
        If a filename is specified (instead of a file object),
        the entire file is opened, read, and closed before parsing.
        ")
                        (reparse-symbol indented_block_body) [86662 87461])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87477 87481])
                            ("other" variable nil (reparse-symbol function_parameters) [87482 87487]))                          )
                        (reparse-symbol indented_block_body) [87466 87746])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87762 87766])
                            ("other" variable nil (reparse-symbol function_parameters) [87767 87772]))                          )
                        (reparse-symbol indented_block_body) [87751 87810])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87828 87832]))                          )
                        (reparse-symbol indented_block_body) [87815 87865])
                    ("__req__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87882 87886])
                            ("other" variable nil (reparse-symbol function_parameters) [87887 87892]))                          )
                        (reparse-symbol indented_block_body) [87870 87924])
                    ("__rne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87941 87945])
                            ("other" variable nil (reparse-symbol function_parameters) [87946 87951]))                          )
                        (reparse-symbol indented_block_body) [87929 87989])
                    ("matches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88006 88010])
                            ("testString" variable nil (reparse-symbol function_parameters) [88012 88022])
                            ("parseAll" variable nil (reparse-symbol function_parameters) [88024 88032]))                          
                        :documentation "
        Method for quick testing of a parser against a test string. Good for simple 
        inline microtests of sub expressions while building up larger parser.
           
        Parameters:
         - testString - to test against this expression for a match
         - parseAll - (default=C{True}) - flag to pass to C{L{parseString}} when running tests
            
        Example::
            expr = Word(nums)
            assert expr.matches(\"100\")
        ")
                        (reparse-symbol indented_block_body) [87994 88686])
                    ("runTests" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88720 88724])
                            ("tests" variable nil (reparse-symbol function_parameters) [88726 88731])
                            ("parseAll" variable nil (reparse-symbol function_parameters) [88733 88741])
                            ("comment" variable nil (reparse-symbol function_parameters) [88748 88755])
                            ("fullDump" variable nil (reparse-symbol function_parameters) [88761 88769])
                            ("printResults" variable nil (reparse-symbol function_parameters) [88776 88788])
                            ("failureTests" variable nil (reparse-symbol function_parameters) [88795 88807]))                          
                        :documentation "
        Execute the parse expression on a series of test strings, showing each
        test, the parsed results or where the parse failed. Quick and easy way to
        run a parse expression against a list of sample strings.
           
        Parameters:
         - tests - a list of separate test strings, or a multiline string of test strings
         - parseAll - (default=C{True}) - flag to pass to C{L{parseString}} when running tests           
         - comment - (default=C{'#'}) - expression for indicating embedded comments in the test 
              string; pass None to disable comment filtering
         - fullDump - (default=C{True}) - dump results as list followed by results names in nested outline;
              if False, only dump nested list
         - printResults - (default=C{True}) prints test output to stdout
         - failureTests - (default=C{False}) indicates if these tests are expected to fail parsing

        Returns: a (success, results) tuple, where success indicates that all tests succeeded
        (or failed if C{failureTests} is True), and the results contain a list of lines of each 
        test's output
        
        Example::
            number_expr = pyparsing_common.number.copy()

            result = number_expr.runTests('''
                # unsigned integer
                100
                # negative integer
                -100
                # float with scientific notation
                6.02e23
                # integer with scientific notation
                1e-12
                ''')
            print(\"Success\" if result[0] else \"Failed!\")

            result = number_expr.runTests('''
                # stray character
                100Z
                # missing leading digit before '.'
                -.100
                # too many '.'
                3.14.159
                ''', failureTests=True)
            print(\"Success\" if result[0] else \"Failed!\")
        prints::
            # unsigned integer
            100
            [100]

            # negative integer
            -100
            [-100]

            # float with scientific notation
            6.02e23
            [6.02e+23]

            # integer with scientific notation
            1e-12
            [1e-12]

            Success
            
            # stray character
            100Z
               ^
            FAIL: Expected end of text (at char 3), (line:1, col:4)

            # missing leading digit before '.'
            -.100
            ^
            FAIL: Expected {real number with scientific notation | real number | signed integer} (at char 0), (line:1, col:1)

            # too many '.'
            3.14.159
                ^
            FAIL: Expected end of text (at char 4), (line:1, col:5)

            Success

        Each test string must be on a single line. If you want to test a string that spans multiple
        lines, create a test like this::

            expr.runTest(r\"this is a test\\\\n of strings that spans \\\\n 3 lines\")
        
        (Note that this is a raw string literal, you must include the leading 'r'.)
        ")
                        (reparse-symbol indented_block_body) [88707 93613]))                  
                :type "class")
                nil [41568 93613])
            ("Token" type
               (:documentation "
    Abstract C{ParserElement} subclass, for defining atomic matching patterns.
    "
                :superclasses ("ParserElement")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [93780 93824]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93764 93768]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [93750 93825]))                  
                :type "class")
                nil [93623 93825])
            ("Empty" type
               (:documentation "
    An empty token, will always match.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [93936 93964])
                            ("self" variable nil (reparse-symbol indented_block_body) [93973 93992])
                            ("self" variable nil (reparse-symbol indented_block_body) [94001 94027])
                            ("self" variable nil (reparse-symbol indented_block_body) [94036 94062]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93920 93924]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [93906 94063]))                  
                :type "class")
                nil [93827 94063])
            ("NoMatch" type
               (:documentation "
    A token that will never match.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [94172 94202])
                            ("self" variable nil (reparse-symbol indented_block_body) [94211 94232])
                            ("self" variable nil (reparse-symbol indented_block_body) [94241 94267])
                            ("self" variable nil (reparse-symbol indented_block_body) [94276 94302])
                            ("self" variable nil (reparse-symbol indented_block_body) [94311 94344]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94156 94160]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [94142 94345])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94365 94369])
                            ("instring" variable nil (reparse-symbol function_parameters) [94371 94379])
                            ("loc" variable nil (reparse-symbol function_parameters) [94381 94384])
                            ("doActions" variable nil (reparse-symbol function_parameters) [94386 94395]))                          )
                        (reparse-symbol indented_block_body) [94350 94467]))                  
                :type "class")
                nil [94065 94467])
            ("Literal" type
               (:documentation "
    Token to exactly match a specified string.
    
    Example::
        Literal('blah').parseString('blah')  # -> ['blah']
        Literal('blah').parseString('blahfooblah')  # -> ['blah']
        Literal('blah').parseString('bla')  # -> Exception: Expected \"blah\"
    
    For case-insensitive matching, use L{CaselessLiteral}.
    
    For keyword matching (force word break before and after the matched string),
    use L{Keyword} or L{CaselessKeyword}.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [95013 95043])
                            ("self" variable nil (reparse-symbol indented_block_body) [95052 95076])
                            ("self" variable nil (reparse-symbol indented_block_body) [95085 95117])
                            ("try" code nil (reparse-symbol indented_block_body) [95126 95379])
                            ("self" code nil (reparse-symbol indented_block_body) [95387 95425])
                            ("self" code nil (reparse-symbol indented_block_body) [95434 95471])
                            ("self" variable nil (reparse-symbol indented_block_body) [95480 95507])
                            ("self" variable nil (reparse-symbol indented_block_body) [95516 95542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94984 94988])
                            ("matchString" variable nil (reparse-symbol function_parameters) [94990 95001]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [94970 95543])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95794 95798])
                            ("instring" variable nil (reparse-symbol function_parameters) [95800 95808])
                            ("loc" variable nil (reparse-symbol function_parameters) [95810 95813])
                            ("doActions" variable nil (reparse-symbol function_parameters) [95815 95824]))                          )
                        (reparse-symbol indented_block_body) [95779 96071]))                  
                :type "class")
                nil [94469 96071])
            ("_L" variable nil nil [96071 96083])
            ("ParserElement" variable nil nil [96084 96127])
            ("Keyword" type
               (:documentation "
    Token to exactly match a specified string as a keyword, that is, it must be
    immediately followed by a non-keyword character.  Compare with C{L{Literal}}:
     - C{Literal(\"if\")} will match the leading C{'if'} in C{'ifAndOnlyIf'}.
     - C{Keyword(\"if\")} will not; it will only match the leading C{'if'} in C{'if x=1'}, or C{'if(y==2)'}
    Accepts two optional constructor arguments in addition to the keyword string:
     - C{identChars} is a string of characters that would be valid identifier characters,
          defaulting to all alphanumerics + \"_\" and \"$\"
     - C{caseless} allows case-insensitive matching, default is C{False}.
       
    Example::
        Keyword(\"start\").parseString(\"start\")  # -> ['start']
        Keyword(\"start\").parseString(\"starting\")  # -> Exception

    For case-insensitive matching, use L{CaselessKeyword}.
    "
                :superclasses ("Token")
                :members 
                  ( ("DEFAULT_KEYWORD_CHARS" code nil (reparse-symbol indented_block_body) [97026 97064])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [97146 97176])
                            ("if" code nil (reparse-symbol indented_block_body) [97185 97263])
                            ("self" variable nil (reparse-symbol indented_block_body) [97271 97295])
                            ("self" variable nil (reparse-symbol indented_block_body) [97304 97336])
                            ("try" code nil (reparse-symbol indented_block_body) [97345 97563])
                            ("self" code nil (reparse-symbol indented_block_body) [97571 97602])
                            ("self" code nil (reparse-symbol indented_block_body) [97611 97648])
                            ("self" variable nil (reparse-symbol indented_block_body) [97657 97684])
                            ("self" variable nil (reparse-symbol indented_block_body) [97693 97719])
                            ("self" variable nil (reparse-symbol indented_block_body) [97728 97752])
                            ("if" code nil (reparse-symbol indented_block_body) [97761 97871])
                            ("self" variable nil (reparse-symbol indented_block_body) [97879 97912]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97084 97088])
                            ("matchString" variable nil (reparse-symbol function_parameters) [97090 97101])
                            ("identChars" variable nil (reparse-symbol function_parameters) [97103 97113])
                            ("caseless" variable nil (reparse-symbol function_parameters) [97120 97128]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [97070 97913])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97933 97937])
                            ("instring" variable nil (reparse-symbol function_parameters) [97939 97947])
                            ("loc" variable nil (reparse-symbol function_parameters) [97949 97952])
                            ("doActions" variable nil (reparse-symbol function_parameters) [97954 97963]))                          )
                        (reparse-symbol indented_block_body) [97918 98787])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98801 98805]))                          )
                        (reparse-symbol indented_block_body) [98792 98917])
                    ("setDefaultKeywordChars" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("chars" variable nil (reparse-symbol function_parameters) [98968 98973]))                          
                        :documentation "Overrides the default Keyword chars
        ")
                        (reparse-symbol indented_block_body) [98922 99082]))                  
                :type "class")
                nil [96129 99082])
            ("CaselessLiteral" type
               (:documentation "
    Token to match a specified string, ignoring case of letters.
    Note: the matched results will always be in the case of the given
    match string, NOT the case of the input text.

    Example::
        OneOrMore(CaselessLiteral(\"CMD\")).parseString(\"cmd CMD Cmd10\") # -> ['CMD', 'CMD', 'CMD']
        
    (Contrast with example for L{CaselessKeyword}.)
    "
                :superclasses ("Literal")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [99537 99596])
                            ("self" variable nil (reparse-symbol indented_block_body) [99646 99677])
                            ("self" code nil (reparse-symbol indented_block_body) [99686 99724])
                            ("self" code nil (reparse-symbol indented_block_body) [99733 99770]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99508 99512])
                            ("matchString" variable nil (reparse-symbol function_parameters) [99514 99525]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [99494 99771])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99791 99795])
                            ("instring" variable nil (reparse-symbol function_parameters) [99797 99805])
                            ("loc" variable nil (reparse-symbol function_parameters) [99807 99810])
                            ("doActions" variable nil (reparse-symbol function_parameters) [99812 99821]))                          )
                        (reparse-symbol indented_block_body) [99776 100017]))                  
                :type "class")
                nil [99083 100017])
            ("CaselessKeyword" type
               (:documentation "
    Caseless version of L{Keyword}.

    Example::
        OneOrMore(CaselessKeyword(\"CMD\")).parseString(\"cmd CMD Cmd10\") # -> ['CMD', 'CMD']
        
    (Contrast with example for L{CaselessLiteral}.)
    "
                :superclasses ("Keyword")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [100333 100411]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100287 100291])
                            ("matchString" variable nil (reparse-symbol function_parameters) [100293 100304])
                            ("identChars" variable nil (reparse-symbol function_parameters) [100306 100316]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [100273 100412])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100432 100436])
                            ("instring" variable nil (reparse-symbol function_parameters) [100438 100446])
                            ("loc" variable nil (reparse-symbol function_parameters) [100448 100451])
                            ("doActions" variable nil (reparse-symbol function_parameters) [100453 100462]))                          )
                        (reparse-symbol indented_block_body) [100417 100781]))                  
                :type "class")
                nil [100018 100781])
            ("CloseMatch" type
               (:documentation "
    A variation on L{Literal} which matches \"close\" matches, that is, 
    strings with at most 'n' mismatching characters. C{CloseMatch} takes parameters:
     - C{match_string} - string to be matched
     - C{maxMismatches} - (C{default=1}) maximum number of mismatches allowed to count as a match
    
    The results from a successful parse will contain the matched text from the input string and the following named results:
     - C{mismatches} - a list of the positions within the match_string where mismatches were found
     - C{original} - the original match_string used to compare against the input string
    
    If C{mismatches} is an empty list, then the match was an exact match.
    
    Example::
        patt = CloseMatch(\"ATCATCGAATGGA\")
        patt.parseString(\"ATCATCGAAXGGA\") # -> (['ATCATCGAAXGGA'], {'mismatches': [[9]], 'original': ['ATCATCGAATGGA']})
        patt.parseString(\"ATCAXCGAAXGGA\") # -> Exception: Expected 'ATCATCGAATGGA' (with up to 1 mismatches) (at char 0), (line:1, col:1)

        # exact match
        patt.parseString(\"ATCATCGAATGGA\") # -> (['ATCATCGAATGGA'], {'mismatches': [[]], 'original': ['ATCATCGAATGGA']})

        # close match allowing up to 2 mismatches
        patt = CloseMatch(\"ATCATCGAATGGA\", maxMismatches=2)
        patt.parseString(\"ATCAXCGAAXGGA\") # -> (['ATCAXCGAAXGGA'], {'mismatches': [[4, 9]], 'original': ['ATCATCGAATGGA']})
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [102281 102314])
                            ("self" variable nil (reparse-symbol indented_block_body) [102323 102347])
                            ("self" variable nil (reparse-symbol indented_block_body) [102356 102388])
                            ("self" variable nil (reparse-symbol indented_block_body) [102397 102431])
                            ("self" code nil (reparse-symbol indented_block_body) [102440 102536])
                            ("self" variable nil (reparse-symbol indented_block_body) [102545 102571])
                            ("self" variable nil (reparse-symbol indented_block_body) [102580 102607]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102235 102239])
                            ("match_string" variable nil (reparse-symbol function_parameters) [102241 102253])
                            ("maxMismatches" variable nil (reparse-symbol function_parameters) [102255 102268]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [102222 102608])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102628 102632])
                            ("instring" variable nil (reparse-symbol function_parameters) [102634 102642])
                            ("loc" variable nil (reparse-symbol function_parameters) [102644 102647])
                            ("doActions" variable nil (reparse-symbol function_parameters) [102649 102658]))                          )
                        (reparse-symbol indented_block_body) [102613 103580]))                  
                :type "class")
                nil [100782 103580])
            ("Word" type
               (:documentation "
    Token for matching words composed of allowed character sets.
    Defined with string containing all allowed initial characters,
    an optional string containing allowed body characters (if omitted,
    defaults to the initial character set), and an optional minimum,
    maximum, and/or exact length.  The default value for C{min} is 1 (a
    minimum value < 1 is not valid); the default values for C{max} and C{exact}
    are 0, meaning no maximum or exact length restriction. An optional
    C{excludeChars} parameter can list characters that might be found in 
    the input C{bodyChars} string; useful to define a word of all printables
    except for one or two characters, for instance.
    
    L{srange} is useful for defining custom character set strings for defining 
    C{Word} expressions, using range notation from regular expression character sets.
    
    A common mistake is to use C{Word} to match a specific literal string, as in 
    C{Word(\"Address\")}. Remember that C{Word} uses the string argument to define
    I{sets} of matchable characters. This expression would match \"Add\", \"AAA\",
    \"dAred\", or any other word made up of the characters 'A', 'd', 'r', 'e', and 's'.
    To match an exact literal string, use L{Literal} or L{Keyword}.

    pyparsing includes helper strings for building Words:
     - L{alphas}
     - L{nums}
     - L{alphanums}
     - L{hexnums}
     - L{alphas8bit} (alphabetic characters in ASCII range 128-255 - accented, tilded, umlauted, etc.)
     - L{punc8bit} (non-alphabetic characters in ASCII range 128-255 - currency, symbols, superscripts, diacriticals, etc.)
     - L{printables} (any non-whitespace character)

    Example::
        # a word composed of digits
        integer = Word(nums) # equivalent to Word(\"0123456789\") or Word(srange(\"0-9\"))
        
        # a word with a leading capital, and zero or more lowercase
        capital_word = Word(alphas.upper(), alphas.lower())

        # hostnames are alphanumeric, with leading alpha, and '-'
        hostname = Word(alphas, alphanums+'-')
        
        # roman numeral (not a strict parser, accepts invalid mix of characters)
        roman = Word(\"IVXLCDM\")
        
        # any string of non-whitespace characters, except for ','
        csv_value = Word(printables, excludeChars=\",\")
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [106056 106083])
                            ("if" code nil (reparse-symbol indented_block_body) [106092 106297])
                            ("self" variable nil (reparse-symbol indented_block_body) [106305 106335])
                            ("self" variable nil (reparse-symbol indented_block_body) [106344 106375])
                            ("if" code nil (reparse-symbol indented_block_body) [106384 106587])
                            ("self" code nil (reparse-symbol indented_block_body) [106596 106623])
                            ("if" code nil (reparse-symbol indented_block_body) [106633 106768])
                            ("self" variable nil (reparse-symbol indented_block_body) [106777 106794])
                            ("if" code nil (reparse-symbol indented_block_body) [106804 106895])
                            ("if" code nil (reparse-symbol indented_block_body) [106904 106982])
                            ("self" variable nil (reparse-symbol indented_block_body) [106991 107014])
                            ("self" code nil (reparse-symbol indented_block_body) [107023 107060])
                            ("self" variable nil (reparse-symbol indented_block_body) [107069 107095])
                            ("self" variable nil (reparse-symbol indented_block_body) [107104 107130])
                            ("if" code nil (reparse-symbol indented_block_body) [107140 108071]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105954 105958])
                            ("initChars" variable nil (reparse-symbol function_parameters) [105960 105969])
                            ("bodyChars" variable nil (reparse-symbol function_parameters) [105971 105980])
                            ("min" variable nil (reparse-symbol function_parameters) [105987 105990])
                            ("max" variable nil (reparse-symbol function_parameters) [105994 105997])
                            ("exact" variable nil (reparse-symbol function_parameters) [106001 106006])
                            ("asKeyword" variable nil (reparse-symbol function_parameters) [106010 106019])
                            ("excludeChars" variable nil (reparse-symbol function_parameters) [106027 106039]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [105940 108071])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108091 108095])
                            ("instring" variable nil (reparse-symbol function_parameters) [108097 108105])
                            ("loc" variable nil (reparse-symbol function_parameters) [108107 108110])
                            ("doActions" variable nil (reparse-symbol function_parameters) [108112 108121]))                          )
                        (reparse-symbol indented_block_body) [108076 109280])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109298 109302]))                          )
                        (reparse-symbol indented_block_body) [109285 109888]))                  
                :type "class")
                nil [103582 109888])
            ("Regex" type
               (:superclasses ("Token")
                :members 
                  ( ("r\"\"\"
    Token for matching strings that match a given regular expression.
    Defined with string specifying the regular expression in a form recognized by the inbuilt Python re module.
    If the given regex contains named groups (defined using C{(?P<name>...)}), these will be preserved as 
    named parse results.

    Example::
        realnum = Regex(r\"[+-]?\\d+\\.\\d*\")
        date = Regex(r'(?P<year>\\d{4})-(?P<month>\\d\\d?)-(?P<day>\\d\\d?)')
        # ref: http://stackoverflow.com/questions/267399/how-do-you-match-only-valid-roman-numerals-with-a-regular-expression
        roman = Regex(r\"M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\")
    \"\"\"" code nil (reparse-symbol indented_block_body) [109914 110577])
                    ("compiledREtype" variable nil (reparse-symbol indented_block_body) [110582 110624])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"The parameters C{pattern} and C{flags} are passed to the C{re.compile()} function as-is. See the Python C{re} module for an explanation of the acceptable patterns and flags.\"\"\"" code nil (reparse-symbol indented_block_body) [110676 110855])
                            ("super" code nil (reparse-symbol indented_block_body) [110864 110892])
                            ("if" code nil (reparse-symbol indented_block_body) [110902 111800])
                            ("self" variable nil (reparse-symbol indented_block_body) [111809 111832])
                            ("self" code nil (reparse-symbol indented_block_body) [111841 111878])
                            ("self" variable nil (reparse-symbol indented_block_body) [111887 111913])
                            ("self" variable nil (reparse-symbol indented_block_body) [111922 111948]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110643 110647])
                            ("pattern" variable nil (reparse-symbol function_parameters) [110649 110656])
                            ("flags" variable nil (reparse-symbol function_parameters) [110658 110663]))                          
                        :documentation "The parameters C{pattern} and C{flags} are passed to the C{re.compile()} function as-is. See the Python C{re} module for an explanation of the acceptable patterns and flags."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [110629 111949])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111969 111973])
                            ("instring" variable nil (reparse-symbol function_parameters) [111975 111983])
                            ("loc" variable nil (reparse-symbol function_parameters) [111985 111988])
                            ("doActions" variable nil (reparse-symbol function_parameters) [111990 111999]))                          )
                        (reparse-symbol indented_block_body) [111954 112336])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112354 112358]))                          )
                        (reparse-symbol indented_block_body) [112341 112586]))                  
                :type "class")
                nil [109890 112586])
            ("QuotedString" type
               (:superclasses ("Token")
                :members 
                  ( ("r\"\"\"
    Token for matching strings that are delimited by quoting characters.
    
    Defined with the following parameters:
        - quoteChar - string of one or more characters defining the quote delimiting string
        - escChar - character to escape quotes, typically backslash (default=C{None})
        - escQuote - special quote sequence to escape an embedded quote string (such as SQL's \"\" to escape an embedded \") (default=C{None})
        - multiline - boolean indicating whether quotes can span multiple lines (default=C{False})
        - unquoteResults - boolean indicating whether the matched text should be unquoted (default=C{True})
        - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=C{None} => same as quoteChar)
        - convertWhitespaceEscapes - convert escaped whitespace (C{'\\t'}, C{'\\n'}, etc.) to actual whitespace (default=C{True})

    Example::
        qs = QuotedString('\"')
        print(qs.searchString('lsjdf \"This is the quote\" sldjf'))
        complex_qs = QuotedString('{{', endQuoteChar='}}')
        print(complex_qs.searchString('lsjdf {{This is the \"quote\"}} sldjf'))
        sql_qs = QuotedString('\"', escQuote='\"\"')
        print(sql_qs.searchString('lsjdf \"This is the quote with \"\"embedded\"\" quotes\" sldjf'))
    prints::
        [['This is the quote']]
        [['This is the \"quote\"']]
        [['This is the quote with \"embedded\" quotes']]
    \"\"\"" code nil (reparse-symbol indented_block_body) [112619 114077])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [114239 114274])
                            ("quoteChar" variable nil (reparse-symbol indented_block_body) [114349 114378])
                            ("if" code nil (reparse-symbol indented_block_body) [114387 114530])
                            ("if" code nil (reparse-symbol indented_block_body) [114539 114832])
                            ("self" variable nil (reparse-symbol indented_block_body) [114841 114867])
                            ("self" variable nil (reparse-symbol indented_block_body) [114876 114910])
                            ("self" variable nil (reparse-symbol indented_block_body) [114919 114953])
                            ("self" variable nil (reparse-symbol indented_block_body) [114962 114994])
                            ("self" variable nil (reparse-symbol indented_block_body) [115003 115043])
                            ("self" variable nil (reparse-symbol indented_block_body) [115052 115074])
                            ("self" variable nil (reparse-symbol indented_block_body) [115083 115107])
                            ("self" variable nil (reparse-symbol indented_block_body) [115116 115152])
                            ("self" variable nil (reparse-symbol indented_block_body) [115161 115217])
                            ("if" code nil (reparse-symbol indented_block_body) [115227 115816])
                            ("if" code nil (reparse-symbol indented_block_body) [115824 116170])
                            ("if" code nil (reparse-symbol indented_block_body) [116178 116254])
                            ("if" code nil (reparse-symbol indented_block_body) [116262 116408])
                            ("self" variable nil (reparse-symbol indented_block_body) [116416 116472])
                            ("try" code nil (reparse-symbol indented_block_body) [116482 116767])
                            ("self" variable nil (reparse-symbol indented_block_body) [116776 116799])
                            ("self" code nil (reparse-symbol indented_block_body) [116808 116845])
                            ("self" variable nil (reparse-symbol indented_block_body) [116854 116880])
                            ("self" variable nil (reparse-symbol indented_block_body) [116889 116915]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114096 114100])
                            ("quoteChar" variable nil (reparse-symbol function_parameters) [114102 114111])
                            ("escChar" variable nil (reparse-symbol function_parameters) [114113 114120])
                            ("escQuote" variable nil (reparse-symbol function_parameters) [114127 114135])
                            ("multiline" variable nil (reparse-symbol function_parameters) [114142 114151])
                            ("unquoteResults" variable nil (reparse-symbol function_parameters) [114159 114173])
                            ("endQuoteChar" variable nil (reparse-symbol function_parameters) [114180 114192])
                            ("convertWhitespaceEscapes" variable nil (reparse-symbol function_parameters) [114199 114223]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [114082 116916])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116936 116940])
                            ("instring" variable nil (reparse-symbol function_parameters) [116942 116950])
                            ("loc" variable nil (reparse-symbol function_parameters) [116952 116955])
                            ("doActions" variable nil (reparse-symbol function_parameters) [116957 116966]))                          )
                        (reparse-symbol indented_block_body) [116921 118145])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118163 118167]))                          )
                        (reparse-symbol indented_block_body) [118150 118458]))                  
                :type "class")
                nil [112588 118458])
            ("CharsNotIn" type
               (:documentation "
    Token for matching words composed of characters I{not} in a given set (will
    include whitespace in matched characters if not listed in the provided exclusion set - see example).
    Defined with string containing all disallowed characters, and an optional
    minimum, maximum, and/or exact length.  The default value for C{min} is 1 (a
    minimum value < 1 is not valid); the default values for C{max} and C{exact}
    are 0, meaning no maximum or exact length restriction.

    Example::
        # define a comma-separated-value as anything that is not a ','
        csv_value = CharsNotIn(',')
        print(delimitedList(csv_value).parseString(\"dkls,lsdkjf,s12 34,@!#,213\"))
    prints::
        ['dkls', 'lsdkjf', 's12 34', '@!#', '213']
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [119319 119352])
                            ("self" variable nil (reparse-symbol indented_block_body) [119361 119388])
                            ("self" variable nil (reparse-symbol indented_block_body) [119397 119421])
                            ("if" code nil (reparse-symbol indented_block_body) [119431 119578])
                            ("self" variable nil (reparse-symbol indented_block_body) [119587 119604])
                            ("if" code nil (reparse-symbol indented_block_body) [119614 119705])
                            ("if" code nil (reparse-symbol indented_block_body) [119714 119792])
                            ("self" variable nil (reparse-symbol indented_block_body) [119801 119824])
                            ("self" code nil (reparse-symbol indented_block_body) [119833 119870])
                            ("self" variable nil (reparse-symbol indented_block_body) [119879 119921])
                            ("self" variable nil (reparse-symbol indented_block_body) [119930 119956]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119270 119274])
                            ("notChars" variable nil (reparse-symbol function_parameters) [119276 119284])
                            ("min" variable nil (reparse-symbol function_parameters) [119286 119289])
                            ("max" variable nil (reparse-symbol function_parameters) [119293 119296])
                            ("exact" variable nil (reparse-symbol function_parameters) [119300 119305]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [119256 119957])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119977 119981])
                            ("instring" variable nil (reparse-symbol function_parameters) [119983 119991])
                            ("loc" variable nil (reparse-symbol function_parameters) [119993 119996])
                            ("doActions" variable nil (reparse-symbol function_parameters) [119998 120007]))                          )
                        (reparse-symbol indented_block_body) [119962 120502])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120520 120524]))                          )
                        (reparse-symbol indented_block_body) [120507 120878]))                  
                :type "class")
                nil [118460 120878])
            ("White" type
               (:documentation "
    Special matching class for matching whitespace.  Normally, whitespace is ignored
    by pyparsing grammars.  This class is included when some whitespace structures
    are significant.  Define with a string containing the whitespace characters to be
    matched; default is C{\" \\\\t\\\\r\\\\n\"}.  Also takes optional C{min}, C{max}, and C{exact} arguments,
    as defined for the C{L{Word}} class.
    "
                :superclasses ("Token")
                :members 
                  ( ("whiteStrs" variable nil (reparse-symbol indented_block_body) [121316 121451])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [121521 121549])
                            ("self" variable nil (reparse-symbol indented_block_body) [121558 121578])
                            ("self" code nil (reparse-symbol indented_block_body) [121587 121677])
                            ("self" variable nil (reparse-symbol indented_block_body) [121720 121786])
                            ("self" variable nil (reparse-symbol indented_block_body) [121795 121821])
                            ("self" code nil (reparse-symbol indented_block_body) [121830 121867])
                            ("self" variable nil (reparse-symbol indented_block_body) [121877 121894])
                            ("if" code nil (reparse-symbol indented_block_body) [121904 121995])
                            ("if" code nil (reparse-symbol indented_block_body) [122004 122082]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121469 121473])
                            ("ws" variable nil (reparse-symbol function_parameters) [121475 121477])
                            ("min" variable nil (reparse-symbol function_parameters) [121489 121492])
                            ("max" variable nil (reparse-symbol function_parameters) [121496 121499])
                            ("exact" variable nil (reparse-symbol function_parameters) [121503 121508]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [121456 122082])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122102 122106])
                            ("instring" variable nil (reparse-symbol function_parameters) [122108 122116])
                            ("loc" variable nil (reparse-symbol function_parameters) [122118 122121])
                            ("doActions" variable nil (reparse-symbol function_parameters) [122123 122132]))                          )
                        (reparse-symbol indented_block_body) [122087 122613]))                  
                :type "class")
                nil [120879 122613])
            ("_PositionToken" type
               (:superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [122678 122715])
                            ("self" variable nil (reparse-symbol indented_block_body) [122724 122757])
                            ("self" variable nil (reparse-symbol indented_block_body) [122766 122792])
                            ("self" variable nil (reparse-symbol indented_block_body) [122801 122827]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122662 122666]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [122648 122828]))                  
                :type "class")
                nil [122615 122828])
            ("GoToColumn" type
               (:documentation "
    Token to advance to a specific column of input text; useful for tabular report scraping.
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [123013 123046])
                            ("self" variable nil (reparse-symbol indented_block_body) [123055 123071]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122990 122994])
                            ("colno" variable nil (reparse-symbol function_parameters) [122996 123001]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [122976 123072])
                    ("preParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123091 123095])
                            ("instring" variable nil (reparse-symbol function_parameters) [123097 123105])
                            ("loc" variable nil (reparse-symbol function_parameters) [123107 123110]))                          )
                        (reparse-symbol indented_block_body) [123077 123430])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123450 123454])
                            ("instring" variable nil (reparse-symbol function_parameters) [123456 123464])
                            ("loc" variable nil (reparse-symbol function_parameters) [123466 123469])
                            ("doActions" variable nil (reparse-symbol function_parameters) [123471 123480]))                          )
                        (reparse-symbol indented_block_body) [123435 123753]))                  
                :type "class")
                nil [122829 123753])
            ("LineStart" type
               (:documentation "
    Matches if current position is at the beginning of a line within the parse string
    
    Example::
    
        test = '''\\
        AAA this line
        AAA and this line
          AAA but not this one
        B AAA and definitely not this one
        '''

        for t in (LineStart() + 'AAA' + restOfLine).searchString(test):
            print(t)
    
    Prints::
        ['AAA', ' this line']
        ['AAA', ' and this line']    

    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [124282 124314])
                            ("self" variable nil (reparse-symbol indented_block_body) [124323 124361]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124266 124270]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [124252 124362])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124382 124386])
                            ("instring" variable nil (reparse-symbol function_parameters) [124388 124396])
                            ("loc" variable nil (reparse-symbol function_parameters) [124398 124401])
                            ("doActions" variable nil (reparse-symbol function_parameters) [124403 124412]))                          )
                        (reparse-symbol indented_block_body) [124367 124547]))                  
                :type "class")
                nil [123755 124547])
            ("LineEnd" type
               (:documentation "
    Matches if current position is at the end of a line within the parse string
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [124709 124739])
                            ("self" code nil (reparse-symbol indented_block_body) [124748 124825])
                            ("self" variable nil (reparse-symbol indented_block_body) [124834 124870]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124693 124697]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [124679 124871])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124891 124895])
                            ("instring" variable nil (reparse-symbol function_parameters) [124897 124905])
                            ("loc" variable nil (reparse-symbol function_parameters) [124907 124910])
                            ("doActions" variable nil (reparse-symbol function_parameters) [124912 124921]))                          )
                        (reparse-symbol indented_block_body) [124876 125267]))                  
                :type "class")
                nil [124548 125267])
            ("StringStart" type
               (:documentation "
    Matches if current position is at the beginning of the parse string
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [125425 125459])
                            ("self" variable nil (reparse-symbol indented_block_body) [125468 125506]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125409 125413]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [125395 125507])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125527 125531])
                            ("instring" variable nil (reparse-symbol function_parameters) [125533 125541])
                            ("loc" variable nil (reparse-symbol function_parameters) [125543 125546])
                            ("doActions" variable nil (reparse-symbol function_parameters) [125548 125557]))                          )
                        (reparse-symbol indented_block_body) [125512 125814]))                  
                :type "class")
                nil [125268 125814])
            ("StringEnd" type
               (:documentation "
    Matches if current position is at the end of the parse string
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [125964 125996])
                            ("self" variable nil (reparse-symbol indented_block_body) [126005 126041]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125948 125952]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [125934 126042])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [126062 126066])
                            ("instring" variable nil (reparse-symbol function_parameters) [126068 126076])
                            ("loc" variable nil (reparse-symbol function_parameters) [126078 126081])
                            ("doActions" variable nil (reparse-symbol function_parameters) [126083 126092]))                          )
                        (reparse-symbol indented_block_body) [126047 126406]))                  
                :type "class")
                nil [125815 126406])
            ("WordStart" type
               (:documentation "
    Matches if the current position is at the beginning of a Word, and
    is not preceded by any character in a given set of C{wordChars}
    (default=C{printables}). To emulate the C{\\b} behavior of regular expressions,
    use C{WordStart(alphanums)}. C{WordStart} will also match at the beginning of
    the string being parsed, or at the beginning of a line.
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [126876 126908])
                            ("self" variable nil (reparse-symbol indented_block_body) [126917 126948])
                            ("self" variable nil (reparse-symbol indented_block_body) [126957 126999]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [126837 126841])
                            ("wordChars" variable nil (reparse-symbol function_parameters) [126843 126852]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [126824 127000])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127019 127023])
                            ("instring" variable nil (reparse-symbol function_parameters) [127025 127033])
                            ("loc" variable nil (reparse-symbol function_parameters) [127035 127038])
                            ("doActions" variable nil (reparse-symbol function_parameters) [127040 127049]))                          )
                        (reparse-symbol indented_block_body) [127005 127280]))                  
                :type "class")
                nil [126407 127280])
            ("WordEnd" type
               (:documentation "
    Matches if the current position is at the end of a Word, and
    is not followed by any character in a given set of C{wordChars}
    (default=C{printables}). To emulate the C{\\b} behavior of regular expressions,
    use C{WordEnd(alphanums)}. C{WordEnd} will also match at the end of
    the string being parsed, or at the end of a line.
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [127726 127756])
                            ("self" variable nil (reparse-symbol indented_block_body) [127765 127796])
                            ("self" variable nil (reparse-symbol indented_block_body) [127805 127832])
                            ("self" variable nil (reparse-symbol indented_block_body) [127841 127881]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127687 127691])
                            ("wordChars" variable nil (reparse-symbol function_parameters) [127693 127702]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [127674 127882])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127901 127905])
                            ("instring" variable nil (reparse-symbol function_parameters) [127907 127915])
                            ("loc" variable nil (reparse-symbol function_parameters) [127917 127920])
                            ("doActions" variable nil (reparse-symbol function_parameters) [127922 127931]))                          )
                        (reparse-symbol indented_block_body) [127887 128214]))                  
                :type "class")
                nil [127281 128214])
            ("ParseExpression" type
               (:documentation "
    Abstract subclass of ParserElement, for combining and post-processing parsed tokens.
    "
                :superclasses ("ParserElement")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [128418 128464])
                            ("if" code nil (reparse-symbol indented_block_body) [128473 128545])
                            ("if" code nil (reparse-symbol indented_block_body) [128554 129133])
                            ("self" variable nil (reparse-symbol indented_block_body) [129141 129166]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [128377 128381])
                            ("exprs" variable nil (reparse-symbol function_parameters) [128383 128388])
                            ("savelist" variable nil (reparse-symbol function_parameters) [128390 128398]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [128363 129167])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129189 129193])
                            ("i" variable nil (reparse-symbol function_parameters) [129195 129196]))                          )
                        (reparse-symbol indented_block_body) [129172 129229])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129246 129250])
                            ("other" variable nil (reparse-symbol function_parameters) [129252 129257]))                          )
                        (reparse-symbol indented_block_body) [129234 129344])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129370 129374]))                          
                        :documentation "Extends C{leaveWhitespace} defined in base class, and also invokes C{leaveWhitespace} on
           all contained expressions.")
                        (reparse-symbol indented_block_body) [129349 129690])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129707 129711])
                            ("other" variable nil (reparse-symbol function_parameters) [129713 129718]))                          )
                        (reparse-symbol indented_block_body) [129695 130136])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130154 130158]))                          )
                        (reparse-symbol indented_block_body) [130141 130423])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130444 130448]))                          )
                        (reparse-symbol indented_block_body) [130428 131776])
                    ("setResultsName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131801 131805])
                            ("name" variable nil (reparse-symbol function_parameters) [131807 131811])
                            ("listAllMatches" variable nil (reparse-symbol function_parameters) [131813 131827]))                          )
                        (reparse-symbol indented_block_body) [131781 131934])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131953 131957])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [131959 131972]))                          )
                        (reparse-symbol indented_block_body) [131939 132108])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132130 132134]))                          )
                        (reparse-symbol indented_block_body) [132121 132256]))                  
                :type "class")
                nil [128216 132256])
            ("And" type
               (:documentation "
    Requires all given C{ParseExpression}s to be found in the given order.
    Expressions may be separated by whitespace.
    May be constructed using the C{'+'} operator.
    May also be constructed using the C{'-'} operator, which will suppress backtracking.

    Example::
        integer = Word(nums)
        name_expr = OneOrMore(Word(alphas))

        expr = And([integer(\"id\"),name_expr(\"name\"),integer(\"age\")])
        # more easily written as:
        expr = integer(\"id\") + name_expr(\"name\") + integer(\"age\")
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("_ErrorStop" type
                       (:superclasses ("Empty")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [132908 132960])
                                    ("self" variable nil (reparse-symbol indented_block_body) [132973 132988])
                                    ("self" code nil (reparse-symbol indented_block_body) [133001 133023]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [132872 132876])
                                    ("args" variable nil (reparse-symbol function_parameters) [132878 132883])
                                    ("kwargs" variable nil (reparse-symbol function_parameters) [132885 132893]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [132859 133024]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [132826 133024])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [133083 133124])
                            ("self" variable nil (reparse-symbol indented_block_body) [133133 133196])
                            ("self" code nil (reparse-symbol indented_block_body) [133205 133256])
                            ("self" variable nil (reparse-symbol indented_block_body) [133265 133315])
                            ("self" variable nil (reparse-symbol indented_block_body) [133324 133348]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133043 133047])
                            ("exprs" variable nil (reparse-symbol function_parameters) [133049 133054])
                            ("savelist" variable nil (reparse-symbol function_parameters) [133056 133064]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [133029 133349])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133369 133373])
                            ("instring" variable nil (reparse-symbol function_parameters) [133375 133383])
                            ("loc" variable nil (reparse-symbol function_parameters) [133385 133388])
                            ("doActions" variable nil (reparse-symbol function_parameters) [133390 133399]))                          )
                        (reparse-symbol indented_block_body) [133354 134499])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134517 134521])
                            ("other" variable nil (reparse-symbol function_parameters) [134523 134528]))                          )
                        (reparse-symbol indented_block_body) [134504 134699])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134724 134728])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [134730 134746]))                          )
                        (reparse-symbol indented_block_body) [134704 134943])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134961 134965]))                          )
                        (reparse-symbol indented_block_body) [134948 135172]))                  
                :type "class")
                nil [132257 135172])
            ("Or" type
               (:documentation "
    Requires that at least one C{ParseExpression} is found.
    If two expressions match, the expression that matches the longest string will be used.
    May be constructed using the C{'^'} operator.

    Example::
        # construct Or using '^' operator
        
        number = Word(nums) ^ Combine(Word(nums) + '.' + Word(nums))
        print(number.searchString(\"123 3.1416 789\"))
    prints::
        [['123'], ['3.1416'], ['789']]
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [135717 135757])
                            ("if" code nil (reparse-symbol indented_block_body) [135766 135910]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135676 135680])
                            ("exprs" variable nil (reparse-symbol function_parameters) [135682 135687])
                            ("savelist" variable nil (reparse-symbol function_parameters) [135689 135697]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [135662 135910])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135930 135934])
                            ("instring" variable nil (reparse-symbol function_parameters) [135936 135944])
                            ("loc" variable nil (reparse-symbol function_parameters) [135946 135949])
                            ("doActions" variable nil (reparse-symbol function_parameters) [135951 135960]))                          )
                        (reparse-symbol indented_block_body) [135915 137310])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137329 137333])
                            ("other" variable nil (reparse-symbol function_parameters) [137335 137340]))                          )
                        (reparse-symbol indented_block_body) [137316 137510])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137528 137532]))                          )
                        (reparse-symbol indented_block_body) [137515 137741])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137766 137770])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [137772 137788]))                          )
                        (reparse-symbol indented_block_body) [137746 137926]))                  
                :type "class")
                nil [135174 137926])
            ("MatchFirst" type
               (:documentation "
    Requires that at least one C{ParseExpression} is found.
    If two expressions match, the first one listed is the one that will match.
    May be constructed using the C{'|'} operator.

    Example::
        # construct MatchFirst using '|' operator
        
        # watch the order of expressions to match
        number = Word(nums) | Combine(Word(nums) + '.' + Word(nums))
        print(number.searchString(\"123 3.1416 789\")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]

        # put more selective expression first
        number = Combine(Word(nums) + '.' + Word(nums)) | Word(nums)
        print(number.searchString(\"123 3.1416 789\")) #  Better -> [['123'], ['3.1416'], ['789']]
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [138734 138782])
                            ("if" code nil (reparse-symbol indented_block_body) [138791 138935]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138693 138697])
                            ("exprs" variable nil (reparse-symbol function_parameters) [138699 138704])
                            ("savelist" variable nil (reparse-symbol function_parameters) [138706 138714]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [138679 138935])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138955 138959])
                            ("instring" variable nil (reparse-symbol function_parameters) [138961 138969])
                            ("loc" variable nil (reparse-symbol function_parameters) [138971 138974])
                            ("doActions" variable nil (reparse-symbol function_parameters) [138976 138985]))                          )
                        (reparse-symbol indented_block_body) [138940 139901])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139918 139922])
                            ("other" variable nil (reparse-symbol function_parameters) [139924 139929]))                          )
                        (reparse-symbol indented_block_body) [139906 140107])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140125 140129]))                          )
                        (reparse-symbol indented_block_body) [140112 140338])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140363 140367])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [140369 140385]))                          )
                        (reparse-symbol indented_block_body) [140343 140523]))                  
                :type "class")
                nil [137928 140523])
            ("Each" type
               (:documentation "
    Requires all given C{ParseExpression}s to be found, but in any order.
    Expressions may be separated by whitespace.
    May be constructed using the C{'&'} operator.

    Example::
        color = oneOf(\"RED ORANGE YELLOW GREEN BLUE PURPLE BLACK WHITE BROWN\")
        shape_type = oneOf(\"SQUARE CIRCLE TRIANGLE STAR HEXAGON OCTAGON\")
        integer = Word(nums)
        shape_attr = \"shape:\" + shape_type(\"shape\")
        posn_attr = \"posn:\" + Group(integer(\"x\") + ',' + integer(\"y\"))(\"posn\")
        color_attr = \"color:\" + color(\"color\")
        size_attr = \"size:\" + integer(\"size\")

        # use Each (using operator '&') to accept attributes in any order 
        # (shape and posn are required, color and size are optional)
        shape_spec = shape_attr & posn_attr & Optional(color_attr) & Optional(size_attr)

        shape_spec.runTests('''
            shape: SQUARE color: BLACK posn: 100, 120
            shape: CIRCLE size: 50 color: BLUE posn: 50,80
            color:GREEN size:20 shape:TRIANGLE posn:20,40
            '''
            )
    prints::
        shape: SQUARE color: BLACK posn: 100, 120
        ['shape:', 'SQUARE', 'color:', 'BLACK', 'posn:', ['100', ',', '120']]
        - color: BLACK
        - posn: ['100', ',', '120']
          - x: 100
          - y: 120
        - shape: SQUARE


        shape: CIRCLE size: 50 color: BLUE posn: 50,80
        ['shape:', 'CIRCLE', 'size:', '50', 'color:', 'BLUE', 'posn:', ['50', ',', '80']]
        - color: BLUE
        - posn: ['50', ',', '80']
          - x: 50
          - y: 80
        - shape: CIRCLE
        - size: 50


        color: GREEN size: 20 shape: TRIANGLE posn: 20,40
        ['color:', 'GREEN', 'size:', '20', 'shape:', 'TRIANGLE', 'posn:', ['20', ',', '40']]
        - color: GREEN
        - posn: ['20', ',', '40']
          - x: 20
          - y: 40
        - shape: TRIANGLE
        - size: 20
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [142524 142566])
                            ("self" variable nil (reparse-symbol indented_block_body) [142575 142638])
                            ("self" variable nil (reparse-symbol indented_block_body) [142647 142673])
                            ("self" variable nil (reparse-symbol indented_block_body) [142682 142708]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142484 142488])
                            ("exprs" variable nil (reparse-symbol function_parameters) [142490 142495])
                            ("savelist" variable nil (reparse-symbol function_parameters) [142497 142505]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [142470 142709])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142729 142733])
                            ("instring" variable nil (reparse-symbol function_parameters) [142735 142743])
                            ("loc" variable nil (reparse-symbol function_parameters) [142745 142748])
                            ("doActions" variable nil (reparse-symbol function_parameters) [142750 142759]))                          )
                        (reparse-symbol indented_block_body) [142714 144880])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144898 144902]))                          )
                        (reparse-symbol indented_block_body) [144885 145111])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145136 145140])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [145142 145158]))                          )
                        (reparse-symbol indented_block_body) [145116 145296]))                  
                :type "class")
                nil [140525 145296])
            ("ParseElementEnhance" type
               (:documentation "
    Abstract subclass of C{ParserElement}, for combining and post-processing parsed tokens.
    "
                :superclasses ("ParserElement")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [145504 145554])
                            ("if" code nil (reparse-symbol indented_block_body) [145563 145820])
                            ("self" variable nil (reparse-symbol indented_block_body) [145828 145844])
                            ("self" variable nil (reparse-symbol indented_block_body) [145853 145872])
                            ("if" code nil (reparse-symbol indented_block_body) [145881 146267]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145466 145470])
                            ("expr" variable nil (reparse-symbol function_parameters) [145472 145476])
                            ("savelist" variable nil (reparse-symbol function_parameters) [145478 145486]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [145452 146267])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146287 146291])
                            ("instring" variable nil (reparse-symbol function_parameters) [146293 146301])
                            ("loc" variable nil (reparse-symbol function_parameters) [146303 146306])
                            ("doActions" variable nil (reparse-symbol function_parameters) [146308 146317]))                          )
                        (reparse-symbol indented_block_body) [146272 146516])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146542 146546]))                          )
                        (reparse-symbol indented_block_body) [146521 146717])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146734 146738])
                            ("other" variable nil (reparse-symbol function_parameters) [146740 146745]))                          )
                        (reparse-symbol indented_block_body) [146722 147197])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147218 147222]))                          )
                        (reparse-symbol indented_block_body) [147202 147368])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147393 147397])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [147399 147415]))                          )
                        (reparse-symbol indented_block_body) [147373 147674])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147693 147697])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [147699 147712]))                          )
                        (reparse-symbol indented_block_body) [147679 147861])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147879 147883]))                          )
                        (reparse-symbol indented_block_body) [147866 148177]))                  
                :type "class")
                nil [145298 148177])
            ("FollowedBy" type
               (:documentation "
    Lookahead matching of the given parse expression.  C{FollowedBy}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression matches at the current
    position.  C{FollowedBy} always returns a null token list.

    Example::
        # use FollowedBy to match a label only if it is followed by a ':'
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        
        OneOrMore(attr_expr).parseString(\"shape: SQUARE color: BLACK posn: upper left\").pprint()
    prints::
        [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [149026 149063])
                            ("self" variable nil (reparse-symbol indented_block_body) [149072 149098]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149004 149008])
                            ("expr" variable nil (reparse-symbol function_parameters) [149010 149014]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [148990 149099])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149119 149123])
                            ("instring" variable nil (reparse-symbol function_parameters) [149125 149133])
                            ("loc" variable nil (reparse-symbol function_parameters) [149135 149138])
                            ("doActions" variable nil (reparse-symbol function_parameters) [149140 149149]))                          )
                        (reparse-symbol indented_block_body) [149104 149225]))                  
                :type "class")
                nil [148179 149225])
            ("NotAny" type
               (:documentation "
    Lookahead to disallow matching with the given parse expression.  C{NotAny}
    does I{not} advance the parsing position within the input string, it only
    verifies that the specified parse expression does I{not} match at the current
    position.  Also, C{NotAny} does I{not} skip over leading whitespace. C{NotAny}
    always returns a null token list.  May be constructed using the '~' operator.

    Example::
        
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [149746 149779])
                            ("self" variable nil (reparse-symbol indented_block_body) [149822 149849])
                            ("self" variable nil (reparse-symbol indented_block_body) [149929 149955])
                            ("self" code nil (reparse-symbol indented_block_body) [149964 150019]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149724 149728])
                            ("expr" variable nil (reparse-symbol function_parameters) [149730 149734]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [149710 150020])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150040 150044])
                            ("instring" variable nil (reparse-symbol function_parameters) [150046 150054])
                            ("loc" variable nil (reparse-symbol function_parameters) [150056 150059])
                            ("doActions" variable nil (reparse-symbol function_parameters) [150061 150070]))                          )
                        (reparse-symbol indented_block_body) [150025 150219])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150237 150241]))                          )
                        (reparse-symbol indented_block_body) [150224 150427]))                  
                :type "class")
                nil [149227 150427])
            ("_MultipleMatch" type
               (:superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [150523 150565])
                            ("self" variable nil (reparse-symbol indented_block_body) [150574 150596])
                            ("ender" variable nil (reparse-symbol indented_block_body) [150605 150619])
                            ("if" code nil (reparse-symbol indented_block_body) [150628 150723])
                            ("None" code nil (reparse-symbol indented_block_body) [150781 150785]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150489 150493])
                            ("expr" variable nil (reparse-symbol function_parameters) [150495 150499])
                            ("stopOn" variable nil (reparse-symbol function_parameters) [150501 150507]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [150475 150786])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150806 150810])
                            ("instring" variable nil (reparse-symbol function_parameters) [150812 150820])
                            ("loc" variable nil (reparse-symbol function_parameters) [150822 150825])
                            ("doActions" variable nil (reparse-symbol function_parameters) [150827 150836]))                          )
                        (reparse-symbol indented_block_body) [150791 151915]))                  
                :type "class")
                nil [150428 151915])
            ("OneOrMore" type
               (:documentation "
    Repetition of one or more of the given expression.
    
    Parameters:
     - expr - expression that must match one or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition 
          expression)          

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = \"shape: SQUARE posn: upper left color: BLACK\"
        OneOrMore(attr_expr).parseString(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]

        # use stopOn attribute for OneOrMore to avoid reading label string as part of the data
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        OneOrMore(attr_expr).parseString(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]
        
        # could also be written as
        (attr_expr * (1,)).parseString(text).pprint()
    "
                :superclasses ("_MultipleMatch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153141 153145]))                          )
                        (reparse-symbol indented_block_body) [153128 153333]))                  
                :type "class")
                nil [151924 153333])
            ("ZeroOrMore" type
               (:documentation "
    Optional repetition of zero or more of the given expression.
    
    Parameters:
     - expr - expression that must match zero or more times
     - stopOn - (default=C{None}) - expression for a terminating sentinel
          (only required if the sentinel would ordinarily match the repetition 
          expression)          

    Example: similar to L{OneOrMore}
    "
                :superclasses ("_MultipleMatch")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [153806 153858])
                            ("self" variable nil (reparse-symbol indented_block_body) [153867 153893]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153772 153776])
                            ("expr" variable nil (reparse-symbol function_parameters) [153778 153782])
                            ("stopOn" variable nil (reparse-symbol function_parameters) [153784 153790]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [153758 153894])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153922 153926])
                            ("instring" variable nil (reparse-symbol function_parameters) [153928 153936])
                            ("loc" variable nil (reparse-symbol function_parameters) [153938 153941])
                            ("doActions" variable nil (reparse-symbol function_parameters) [153943 153952]))                          )
                        (reparse-symbol indented_block_body) [153907 154124])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154142 154146]))                          )
                        (reparse-symbol indented_block_body) [154129 154334]))                  
                :type "class")
                nil [153334 154334])
            ("_NullToken" type
               (:superclasses ("object")
                :members 
                  ( ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154378 154382]))                          )
                        (reparse-symbol indented_block_body) [154365 154406])
                    ("__nonzero__" variable nil (reparse-symbol indented_block_body) [154410 154432])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154449 154453]))                          )
                        (reparse-symbol indented_block_body) [154437 154474]))                  
                :type "class")
                nil [154335 154474])
            ("_optionalNotMatched" variable nil nil [154475 154509])
            ("Optional" type
               (:documentation "
    Optional matching of the given expression.

    Parameters:
     - expr - expression that must match zero or more times
     - default (optional) - value to be returned if the optional expression is not found.

    Example::
        # US postal code can be a 5-digit zip, plus optional 4-digit qualifier
        zip = Combine(Word(nums, exact=5) + Optional('-' + Word(nums, exact=4)))
        zip.runTests('''
            # traditional ZIP code
            12345
            
            # ZIP+4 form
            12101-0001
            
            # invalid ZIP
            98765-
            ''')
    prints::
        # traditional ZIP code
        12345
        ['12345']

        # ZIP+4 form
        12101-0001
        ['12101-0001']

        # invalid ZIP
        98765-
             ^
        FAIL: Expected end of text (at char 5), (line:1, col:6)
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [155492 155545])
                            ("self" variable nil (reparse-symbol indented_block_body) [155554 155592])
                            ("self" variable nil (reparse-symbol indented_block_body) [155601 155628])
                            ("self" variable nil (reparse-symbol indented_block_body) [155637 155663]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155441 155445])
                            ("expr" variable nil (reparse-symbol function_parameters) [155447 155451])
                            ("default" variable nil (reparse-symbol function_parameters) [155453 155460]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [155427 155664])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155684 155688])
                            ("instring" variable nil (reparse-symbol function_parameters) [155690 155698])
                            ("loc" variable nil (reparse-symbol function_parameters) [155700 155703])
                            ("doActions" variable nil (reparse-symbol function_parameters) [155705 155714]))                          )
                        (reparse-symbol indented_block_body) [155669 156255])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156273 156277]))                          )
                        (reparse-symbol indented_block_body) [156260 156462]))                  
                :type "class")
                nil [154510 156462])
            ("SkipTo" type
               (:documentation "
    Token for skipping over all undefined text until the matched expression is found.

    Parameters:
     - expr - target expression marking the end of the data to be skipped
     - include - (default=C{False}) if True, the target expression is also parsed 
          (the skipped text and target expression are returned as a 2-element list).
     - ignore - (default=C{None}) used to define grammars (typically quoted strings and 
          comments) that might contain false matches to the target expression
     - failOn - (default=C{None}) define expressions that are not allowed to be 
          included in the skipped test; if found before the target expression is found, 
          the SkipTo is not a match

    Example::
        report = '''
            Outstanding Issues Report - 1 Jan 2000

               # | Severity | Description                               |  Days Open
            -----+----------+-------------------------------------------+-----------
             101 | Critical | Intermittent system crash                 |          6
              94 | Cosmetic | Spelling error on Login ('log|n')         |         14
              79 | Minor    | System slow when running too many reports |         47
            '''
        integer = Word(nums)
        SEP = Suppress('|')
        # use SkipTo to simply match everything up until the next SEP
        # - ignore quoted strings, so that a '|' character inside a quoted string does not match
        # - parse action will call token.strip() for each matched token, i.e., the description body
        string_data = SkipTo(SEP, ignore=quotedString)
        string_data.setParseAction(tokenMap(str.strip))
        ticket_expr = (integer(\"issue_num\") + SEP 
                      + string_data(\"sev\") + SEP 
                      + string_data(\"desc\") + SEP 
                      + integer(\"days_open\"))
        
        for tkt in ticket_expr.searchString(report):
            print tkt.dump()
    prints::
        ['101', 'Critical', 'Intermittent system crash', '6']
        - days_open: 6
        - desc: Intermittent system crash
        - issue_num: 101
        - sev: Critical
        ['94', 'Cosmetic', \"Spelling error on Login ('log|n')\", '14']
        - days_open: 14
        - desc: Spelling error on Login ('log|n')
        - issue_num: 94
        - sev: Cosmetic
        ['79', 'Minor', 'System slow when running too many reports', '47']
        - days_open: 47
        - desc: System slow when running too many reports
        - issue_num: 79
        - sev: Minor
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [159150 159189])
                            ("self" variable nil (reparse-symbol indented_block_body) [159198 159222])
                            ("self" variable nil (reparse-symbol indented_block_body) [159231 159257])
                            ("self" variable nil (reparse-symbol indented_block_body) [159266 159292])
                            ("self" variable nil (reparse-symbol indented_block_body) [159301 159328])
                            ("self" variable nil (reparse-symbol indented_block_body) [159337 159356])
                            ("if" code nil (reparse-symbol indented_block_body) [159365 159515])
                            ("self" code nil (reparse-symbol indented_block_body) [159523 159575]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159086 159090])
                            ("other" variable nil (reparse-symbol function_parameters) [159092 159097])
                            ("include" variable nil (reparse-symbol function_parameters) [159099 159106])
                            ("ignore" variable nil (reparse-symbol function_parameters) [159114 159120])
                            ("failOn" variable nil (reparse-symbol function_parameters) [159127 159133]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [159072 159576])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159596 159600])
                            ("instring" variable nil (reparse-symbol function_parameters) [159602 159610])
                            ("loc" variable nil (reparse-symbol function_parameters) [159612 159615])
                            ("doActions" variable nil (reparse-symbol function_parameters) [159617 159626]))                          )
                        (reparse-symbol indented_block_body) [159581 161347]))                  
                :type "class")
                nil [156463 161347])
            ("Forward" type
               (:documentation "
    Forward declaration of an expression to be defined later -
    used for recursive grammars, such as algebraic infix notation.
    When the expression is known, it is assigned to the C{Forward} variable using the '<<' operator.

    Note: take care when assigning to C{Forward} not to overlook precedence of operators.
    Specifically, '|' has a lower precedence than '<<', so that::
        fwdExpr << a | b | c
    will actually be evaluated as::
        (fwdExpr << a) | b | c
    thereby leaving b and c out as parseable alternatives.  It is recommended that you
    explicitly group the values inserted into the C{Forward}::
        fwdExpr << (a | b | c)
    Converting to use the '<<=' operator instead will avoid this problem.

    See L{ParseResults.pprint} for an example of a recursive parser created using
    C{Forward}.
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [162284 162337]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162256 162260])
                            ("other" variable nil (reparse-symbol function_parameters) [162262 162267]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [162242 162338])
                    ("__lshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162359 162363])
                            ("other" variable nil (reparse-symbol function_parameters) [162365 162370]))                          )
                        (reparse-symbol indented_block_body) [162343 162874])
                    ("__ilshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162903 162907])
                            ("other" variable nil (reparse-symbol function_parameters) [162909 162914]))                          )
                        (reparse-symbol indented_block_body) [162887 162946])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162976 162980]))                          )
                        (reparse-symbol indented_block_body) [162955 163040])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163061 163065]))                          )
                        (reparse-symbol indented_block_body) [163045 163235])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163254 163258])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [163260 163273]))                          )
                        (reparse-symbol indented_block_body) [163240 163470])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163488 163492]))                          )
                        (reparse-symbol indented_block_body) [163475 164034])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [164048 164052]))                          )
                        (reparse-symbol indented_block_body) [164039 164225]))                  
                :type "class")
                nil [161348 164225])
            ("_ForwardNoRecurse" type
               (:superclasses ("Forward")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [164277 164281]))                          )
                        (reparse-symbol indented_block_body) [164264 164306]))                  
                :type "class")
                nil [164226 164306])
            ("TokenConverter" type
               (:documentation "
    Abstract subclass of C{ParseExpression}, for converting parsed results.
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [164498 164541])
                            ("self" variable nil (reparse-symbol indented_block_body) [164563 164586]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [164460 164464])
                            ("expr" variable nil (reparse-symbol function_parameters) [164466 164470])
                            ("savelist" variable nil (reparse-symbol function_parameters) [164472 164480]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [164446 164587]))                  
                :type "class")
                nil [164307 164587])
            ("Combine" type
               (:documentation "
    Converter to concatenate all matching tokens to a single string.
    By default, the matching patterns must also be contiguous in the input string;
    this can be disabled by specifying C{'adjacent=False'} in the constructor.

    Example::
        real = Word(nums) + '.' + Word(nums)
        print(real.parseString('3.1416')) # -> ['3', '.', '1416']
        # will also erroneously match the following
        print(real.parseString('3. 1416')) # -> ['3', '.', '1416']

        real = Combine(Word(nums) + '.' + Word(nums))
        print(real.parseString('3.1416')) # -> ['3.1416']
        # no match when there are internal spaces
        print(real.parseString('3. 1416')) # -> Exception: Expected W:(0123...)
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [165424 165460])
                            ("if" code nil (reparse-symbol indented_block_body) [165580 165628])
                            ("self" variable nil (reparse-symbol indented_block_body) [165636 165660])
                            ("self" variable nil (reparse-symbol indented_block_body) [165669 165695])
                            ("self" variable nil (reparse-symbol indented_block_body) [165704 165732])
                            ("self" variable nil (reparse-symbol indented_block_body) [165741 165765]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165372 165376])
                            ("expr" variable nil (reparse-symbol function_parameters) [165378 165382])
                            ("joinString" variable nil (reparse-symbol function_parameters) [165384 165394])
                            ("adjacent" variable nil (reparse-symbol function_parameters) [165399 165407]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [165358 165766])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165783 165787])
                            ("other" variable nil (reparse-symbol function_parameters) [165789 165794]))                          )
                        (reparse-symbol indented_block_body) [165771 165954])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165974 165978])
                            ("instring" variable nil (reparse-symbol function_parameters) [165980 165988])
                            ("loc" variable nil (reparse-symbol function_parameters) [165990 165993])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [165995 166004]))                          )
                        (reparse-symbol indented_block_body) [165959 166302]))                  
                :type "class")
                nil [164588 166302])
            ("Group" type
               (:documentation "
    Converter to return the matched tokens as a list - useful for returning tokens of C{L{ZeroOrMore}} and C{L{OneOrMore}} expressions.

    Example::
        ident = Word(alphas)
        num = Word(nums)
        term = ident | num
        func = ident + Optional(delimitedList(term))
        print(func.parseString(\"fn a,b,100\"))  # -> ['fn', 'a', 'b', '100']

        func = ident + Group(Optional(delimitedList(term)))
        print(func.parseString(\"fn a,b,100\"))  # -> ['fn', ['a', 'b', '100']]
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [166888 166922])
                            ("self" variable nil (reparse-symbol indented_block_body) [166931 166953]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166866 166870])
                            ("expr" variable nil (reparse-symbol function_parameters) [166872 166876]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [166852 166954])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166974 166978])
                            ("instring" variable nil (reparse-symbol function_parameters) [166980 166988])
                            ("loc" variable nil (reparse-symbol function_parameters) [166990 166993])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [166995 167004]))                          )
                        (reparse-symbol indented_block_body) [166959 167037]))                  
                :type "class")
                nil [166303 167037])
            ("Dict" type
               (:documentation "
    Converter to return a repetitive expression as a list, but also as a dictionary.
    Each element can also be referenced using the first token in the expression as its key.
    Useful for tabular report scraping when the first column can be used as a item key.

    Example::
        data_word = Word(alphas)
        label = data_word + FollowedBy(':')
        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).setParseAction(' '.join))

        text = \"shape: SQUARE posn: upper left color: light blue texture: burlap\"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        
        # print attributes as plain groups
        print(OneOrMore(attr_expr).parseString(text).dump())
        
        # instead of OneOrMore(expr), parse using Dict(OneOrMore(Group(expr))) - Dict will auto-assign names
        result = Dict(OneOrMore(Group(attr_expr))).parseString(text)
        print(result.dump())
        
        # access named fields as dict entries, or output as dict
        print(result['shape'])        
        print(result.asDict())
    prints::
        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']

        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}
    See more examples at L{ParseResults} of accessing fields by results name.
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [168740 168773])
                            ("self" variable nil (reparse-symbol indented_block_body) [168782 168804]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168718 168722])
                            ("expr" variable nil (reparse-symbol function_parameters) [168724 168728]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [168704 168805])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168825 168829])
                            ("instring" variable nil (reparse-symbol function_parameters) [168831 168839])
                            ("loc" variable nil (reparse-symbol function_parameters) [168841 168844])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [168846 168855]))                          )
                        (reparse-symbol indented_block_body) [168810 169786]))                  
                :type "class")
                nil [167038 169786])
            ("Suppress" type
               (:documentation "
    Converter for ignoring the results of a parsed expression.

    Example::
        source = \"a, b, c,d\"
        wd = Word(alphas)
        wd_list1 = wd + ZeroOrMore(',' + wd)
        print(wd_list1.parseString(source))

        # often, delimiters that are useful during parsing are just in the
        # way afterward - use Suppress to keep them out of the parsed output
        wd_list2 = wd + ZeroOrMore(Suppress(',') + wd)
        print(wd_list2.parseString(source))
    prints::
        ['a', ',', 'b', ',', 'c', ',', 'd']
        ['a', 'b', 'c', 'd']
    (See also L{delimitedList}.)
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170448 170452])
                            ("instring" variable nil (reparse-symbol function_parameters) [170454 170462])
                            ("loc" variable nil (reparse-symbol function_parameters) [170464 170467])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [170469 170478]))                          )
                        (reparse-symbol indented_block_body) [170433 170500])
                    ("suppress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170519 170523]))                          )
                        (reparse-symbol indented_block_body) [170505 170547]))                  
                :type "class")
                nil [169788 170547])
            ("OnlyOnce" type
               (:documentation "
    Wrapper for parse actions, to ensure they are only called once.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [170701 170740])
                            ("self" variable nil (reparse-symbol indented_block_body) [170749 170768]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170674 170678])
                            ("methodCall" variable nil (reparse-symbol function_parameters) [170680 170690]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [170661 170769])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170786 170790])
                            ("s" variable nil (reparse-symbol function_parameters) [170791 170792])
                            ("l" variable nil (reparse-symbol function_parameters) [170793 170794])
                            ("t" variable nil (reparse-symbol function_parameters) [170795 170796]))                          )
                        (reparse-symbol indented_block_body) [170773 170965])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170979 170983]))                          )
                        (reparse-symbol indented_block_body) [170969 171014]))                  
                :type "class")
                nil [170549 171014])
            ("traceParseAction" function
               (:documentation "
    Decorator for debugging parse actions. 
    
    When the parse action is called, this decorator will print C{\">> entering I{method-name}(line:I{current_source_line}, I{parse_location}, I{matched_tokens})\".}
    When the parse action completes, the decorator will print C{\"<<\"} followed by the returned value, or any exception that the parse action raised.

    Example::
        wd = Word(alphas)

        @traceParseAction
        def remove_duplicate_chars(tokens):
            return ''.join(sorted(set(''.join(tokens)))

        wds = OneOrMore(wd).setParseAction(remove_duplicate_chars)
        print(wds.parseString(\"slkdjs sld sldd sdlf sdljf\"))
    prints::
        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))
        <<leaving remove_duplicate_chars (ret: 'dfjkls')
        ['dfjkls']
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [171036 171037]))                  )
                nil [171015 172583])
            ("delimitedList" function
               (:documentation "
    Helper to define a delimited list of expressions - the delimiter defaults to ','.
    By default, the list elements and delimiters can have intervening whitespace, and
    comments, but this can be overridden by passing C{combine=True} in the constructor.
    If C{combine} is set to C{True}, the matching tokens are returned as a single token
    string, with the delimiters included; otherwise, the matching tokens are returned
    as a list of tokens, with the delimiters suppressed.

    Example::
        delimitedList(Word(alphas)).parseString(\"aa,bb,cc\") # -> ['aa', 'bb', 'cc']
        delimitedList(Word(hexnums), delim=':', combine=True).parseString(\"AA:BB:CC:DD:EE\") # -> ['AA:BB:CC:DD:EE']
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [172624 172628])
                    ("delim" variable nil (reparse-symbol function_parameters) [172630 172635])
                    ("combine" variable nil (reparse-symbol function_parameters) [172641 172648]))                  )
                nil [172605 173629])
            ("countedArray" function
               (:documentation "
    Helper to define a counted list of expressions.
    This helper defines a pattern of the form::
        integer expr expr expr...
    where the leading integer tells how many expr expressions follow.
    The matched tokens returns the array of expr tokens as a list - the leading count token is suppressed.
    
    If C{intExpr} is specified, it should be a pyparsing expression that produces an integer value.

    Example::
        countedArray(Word(alphas)).parseString('2 ab cd ef')  # -> ['ab', 'cd']

        # in this parser, the leading integer value is given in binary,
        # '10' indicating that 2 values are in the array
        binaryConstant = Word('01').setParseAction(lambda t: int(t[0], 2))
        countedArray(Word(alphas), intExpr=binaryConstant).parseString('10 ab cd ef')  # -> ['ab', 'cd']
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [173648 173652])
                    ("intExpr" variable nil (reparse-symbol function_parameters) [173654 173661]))                  )
                nil [173630 174980])
            ("_flatten" function (:arguments 
              ( ("L" variable nil (reparse-symbol function_parameters) [174994 174995]))              ) nil [174981 175149])
            ("matchPreviousLiteral" function
               (:documentation "
    Helper to define an expression that is indirectly defined from
    the tokens matched in a previous expression, that is, it looks
    for a 'repeat' of a previous expression.  For example::
        first = Word(nums)
        second = matchPreviousLiteral(first)
        matchExpr = first + \":\" + second
    will match C{\"1:1\"}, but not C{\"1:2\"}.  Because this matches a
    previous literal, will also match the leading C{\"1:1\"} in C{\"1:10\"}.
    If this is not desired, use C{matchPreviousExpr}.
    Do I{not} use with packrat parsing enabled.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [175175 175179]))                  )
                nil [175150 176189])
            ("matchPreviousExpr" function
               (:documentation "
    Helper to define an expression that is indirectly defined from
    the tokens matched in a previous expression, that is, it looks
    for a 'repeat' of a previous expression.  For example::
        first = Word(nums)
        second = matchPreviousExpr(first)
        matchExpr = first + \":\" + second
    will match C{\"1:1\"}, but not C{\"1:2\"}.  Because this matches by
    expressions, will I{not} match the leading C{\"1:1\"} in C{\"1:10\"};
    the expressions are evaluated first, and then compared, so
    C{\"1\"} is compared with C{\"10\"}.
    Do I{not} use with packrat parsing enabled.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [176212 176216]))                  )
                nil [176190 177330])
            ("_escapeRegexRangeChars" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [177358 177359]))              ) nil [177331 177531])
            ("oneOf" function
               (:documentation "
    Helper to quickly define a set of alternative Literals, and makes sure to do
    longest-first testing when there is a conflict, regardless of the input order,
    but returns a C{L{MatchFirst}} for best performance.

    Parameters:
     - strs - a string of space-delimited literals, or a collection of string literals
     - caseless - (default=C{False}) - treat all literals as caseless
     - useRegex - (default=C{True}) - as an optimization, will generate a Regex
          object; otherwise, will generate a C{MatchFirst} object (if C{caseless=True}, or
          if creating a C{Regex} raises an exception)

    Example::
        comp_oper = oneOf(\"< = > <= >= !=\")
        var = Word(alphas)
        number = Word(nums)
        term = var | number
        comparison_expr = term + comp_oper + term
        print(comparison_expr.searchString(\"B = 12  AA=23 B<=AA AA>12\"))
    prints::
        [['B', '=', '12'], ['AA', '=', '23'], ['B', '<=', 'AA'], ['AA', '>', '12']]
    "
                :arguments 
                  ( ("strs" variable nil (reparse-symbol function_parameters) [177543 177547])
                    ("caseless" variable nil (reparse-symbol function_parameters) [177549 177557])
                    ("useRegex" variable nil (reparse-symbol function_parameters) [177565 177573]))                  )
                nil [177532 180381])
            ("dictOf" function
               (:documentation "
    Helper to easily and clearly define a dictionary by specifying the respective patterns
    for the key and value.  Takes care of defining the C{L{Dict}}, C{L{ZeroOrMore}}, and C{L{Group}} tokens
    in the proper order.  The key pattern can include delimiting markers or punctuation,
    as long as they are suppressed, thereby leaving the significant key text.  The value
    pattern can include named results, so that the C{Dict} results can include named token
    fields.

    Example::
        text = \"shape: SQUARE posn: upper left color: light blue texture: burlap\"
        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))
        print(OneOrMore(attr_expr).parseString(text).dump())
        
        attr_label = label
        attr_value = Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join)

        # similar to Dict, but simpler call format
        result = dictOf(attr_label, attr_value).parseString(text)
        print(result.dump())
        print(result['shape'])
        print(result.shape)  # object attribute access works too
        print(result.asDict())
    prints::
        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]
        - color: light blue
        - posn: upper left
        - shape: SQUARE
        - texture: burlap
        SQUARE
        SQUARE
        {'color': 'light blue', 'shape': 'SQUARE', 'posn': 'upper left', 'texture': 'burlap'}
    "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [180394 180397])
                    ("value" variable nil (reparse-symbol function_parameters) [180399 180404]))                  )
                nil [180382 181974])
            ("originalTextFor" function
               (:documentation "
    Helper to return the original, untokenized text for a given expression.  Useful to
    restore the parsed fields of an HTML start tag into the raw tag text itself, or to
    revert separate tokens with intervening whitespace back to the original matching
    input text. By default, returns astring containing the original parsed text.  
       
    If the optional C{asString} argument is passed as C{False}, then the return value is a 
    C{L{ParseResults}} containing any results names that were originally matched, and a 
    single token containing the original matched text from the input string.  So if 
    the expression passed to C{L{originalTextFor}} contains expressions with defined
    results names, you must set C{asString} to C{False} if you want to preserve those
    results name values.

    Example::
        src = \"this is test <b> bold <i>text</i> </b> normal text \"
        for tag in (\"b\",\"i\"):
            opener,closer = makeHTMLTags(tag)
            patt = originalTextFor(opener + SkipTo(closer) + closer)
            print(patt.searchString(src)[0])
    prints::
        ['<b> bold <i>text</i> </b>']
        ['<i>text</i>']
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [181995 181999])
                    ("asString" variable nil (reparse-symbol function_parameters) [182001 182009]))                  )
                nil [181975 183723])
            ("ungroup" function
               (:documentation "
    Helper to undo pyparsing's default grouping of And expressions, even
    if all but one are non-empty.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [183736 183740]))                  )
                nil [183724 183929])
            ("locatedExpr" function
               (:documentation "
    Helper to decorate a returned token with its starting and ending locations in the input string.
    This helper adds the following results names:
     - locn_start = location where matched expression begins
     - locn_end = location where matched expression ends
     - value = the actual parsed results

    Be careful if the input text contains C{<TAB>} characters, you may want to call
    C{L{ParserElement.parseWithTabs}}

    Example::
        wd = Word(alphas)
        for match in locatedExpr(wd).searchString(\"ljsdf123lksdjjf123lkkjj1222\"):
            print(match)
    prints::
        [[0, 'ljsdf', 5]]
        [[8, 'lksdjjf', 15]]
        [[18, 'lkkjj', 23]]
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [183946 183950]))                  )
                nil [183930 184802])
            ("empty" variable nil nil [184855 184893])
            ("lineStart" variable nil nil [184894 184940])
            ("lineEnd" variable nil nil [184941 184983])
            ("stringStart" variable nil nil [184984 185034])
            ("stringEnd" variable nil nil [185035 185081])
            ("_escapedPunc" variable nil nil [185083 185178])
            ("_escapedHexChar" variable nil nil [185179 185292])
            ("_escapedOctChar" variable nil nil [185293 185383])
            ("_singleChar" code nil nil [185384 185521])
            ("_charRange" variable nil nil [185522 185583])
            ("_reBracketExpr" code nil nil [185584 185732])
            ("srange" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [185745 185746]))              ) nil [185734 187009])
            ("matchOnlyAtCol" function
               (:documentation "
    Helper method for defining parse actions that require matching at a specific
    column in the input text.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [187029 187030]))                  )
                nil [187010 187329])
            ("replaceWith" function
               (:documentation "
    Helper method for common parse actions that simply return a literal value.  Especially
    useful when used with C{L{transformString<ParserElement.transformString>}()}.

    Example::
        num = Word(nums).setParseAction(lambda toks: int(toks[0]))
        na = oneOf(\"N/A NA\").setParseAction(replaceWith(math.nan))
        term = na | num
        
        OneOrMore(term).parseString(\"324 234 N/A 234\") # -> [324, 234, nan, 234]
    "
                :arguments 
                  ( ("replStr" variable nil (reparse-symbol function_parameters) [187346 187353]))                  )
                nil [187330 187843])
            ("removeQuotes" function
               (:documentation "
    Helper parse action for removing quotation marks from parsed quoted strings.

    Example::
        # by default, quotation marks are included in parsed results
        quotedString.parseString(\"'Now is the Winter of our Discontent'\") # -> [\"'Now is the Winter of our Discontent'\"]

        # use removeQuotes to strip quotation marks from parsed results
        quotedString.setParseAction(removeQuotes)
        quotedString.parseString(\"'Now is the Winter of our Discontent'\") # -> [\"Now is the Winter of our Discontent\"]
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [187861 187862])
                    ("l" variable nil (reparse-symbol function_parameters) [187863 187864])
                    ("t" variable nil (reparse-symbol function_parameters) [187865 187866]))                  )
                nil [187844 188435])
            ("tokenMap" function
               (:documentation "
    Helper to define a parse action by mapping a function to all elements of a ParseResults list.If any additional 
    args are passed, they are forwarded to the given function as additional arguments after
    the token, as in C{hex_integer = Word(hexnums).setParseAction(tokenMap(int, 16))}, which will convert the
    parsed data to an integer using base 16.

    Example (compare the last to example in L{ParserElement.transformString}::
        hex_ints = OneOrMore(Word(hexnums)).setParseAction(tokenMap(int, 16))
        hex_ints.runTests('''
            00 11 22 aa FF 0a 0d 1a
            ''')
        
        upperword = Word(alphas).setParseAction(tokenMap(str.upper))
        OneOrMore(upperword).runTests('''
            my kingdom for a horse
            ''')

        wd = Word(alphas).setParseAction(tokenMap(str.title))
        OneOrMore(wd).setParseAction(' '.join).runTests('''
            now is the winter of our discontent made glorious summer by this sun of york
            ''')
    prints::
        00 11 22 aa FF 0a 0d 1a
        [0, 17, 34, 170, 255, 10, 13, 26]

        my kingdom for a horse
        ['MY', 'KINGDOM', 'FOR', 'A', 'HORSE']

        now is the winter of our discontent made glorious summer by this sun of york
        ['Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York']
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [188449 188453])
                    ("args" variable nil (reparse-symbol function_parameters) [188455 188460]))                  )
                nil [188436 190110])
            ("upcaseTokens" variable nil nil [190111 190162])
            ("\"\"\"(Deprecated) Helper parse action to convert tokens to upper case. Deprecated in favor of L{pyparsing_common.upcaseTokens}\"\"\"" code nil nil [190163 190290])
            ("downcaseTokens" variable nil nil [190292 190345])
            ("\"\"\"(Deprecated) Helper parse action to convert tokens to lower case. Deprecated in favor of L{pyparsing_common.downcaseTokens}\"\"\"" code nil nil [190346 190475])
            ("_makeTags" function
               (:documentation "Internal helper to construct opening and closing tag expressions, given a tag name"
                :arguments 
                  ( ("tagStr" variable nil (reparse-symbol function_parameters) [190495 190501])
                    ("xml" variable nil (reparse-symbol function_parameters) [190503 190506]))                  )
                nil [190481 192059])
            ("makeHTMLTags" function
               (:documentation "
    Helper to construct opening and closing tag expressions for HTML, given a tag name. Matches
    tags in either upper or lower case, attributes with namespaces and with quoted or unquoted values.

    Example::
        text = '<td>More info at the <a href=\"http://pyparsing.wikispaces.com\">pyparsing</a> wiki page</td>'
        # makeHTMLTags returns pyparsing expressions for the opening and closing tags as a 2-tuple
        a,a_end = makeHTMLTags(\"A\")
        link_expr = a + SkipTo(a_end)(\"link_text\") + a_end
        
        for link in link_expr.searchString(text):
            # attributes in the <A> tag (like \"href\" shown here) are also accessible as named results
            print(link.link_text, '->', link.href)
    prints::
        pyparsing -> http://pyparsing.wikispaces.com
    "
                :arguments 
                  ( ("tagStr" variable nil (reparse-symbol function_parameters) [192077 192083]))                  )
                nil [192060 192935])
            ("makeXMLTags" function
               (:documentation "
    Helper to construct opening and closing tag expressions for XML, given a tag name. Matches
    tags only in the given upper/lower case.

    Example: similar to L{makeHTMLTags}
    "
                :arguments 
                  ( ("tagStr" variable nil (reparse-symbol function_parameters) [192952 192958]))                  )
                nil [192936 193195])
            ("withAttribute" function
               (:documentation "
    Helper to create a validating parse action to be used with start tags created
    with C{L{makeXMLTags}} or C{L{makeHTMLTags}}. Use C{withAttribute} to qualify a starting tag
    with a required attribute value, to avoid false matches on common tags such as
    C{<TD>} or C{<DIV>}.

    Call C{withAttribute} with a series of attribute names and values. Specify the list
    of filter attributes names and values as:
     - keyword arguments, as in C{(align=\"right\")}, or
     - as an explicit dict with C{**} operator, when an attribute name is also a Python
          reserved word, as in C{**{\"class\":\"Customer\", \"align\":\"right\"}}
     - a list of name-value tuples, as in ( (\"ns1:class\", \"Customer\"), (\"ns2:align\",\"right\") )
    For attribute names with a namespace prefix, you must use the second form.  Attribute
    names are matched insensitive to upper/lower case.
       
    If just testing for C{class} (with or without a namespace), use C{L{withClass}}.

    To verify that the attribute exists, but without specifying a value, pass
    C{withAttribute.ANY_VALUE} as the value.

    Example::
        html = '''
            <div>
            Some text
            <div type=\"grid\">1 4 0 1 0</div>
            <div type=\"graph\">1,3 2,3 1,1</div>
            <div>this has no type</div>
            </div>
                
        '''
        div,div_end = makeHTMLTags(\"div\")

        # only match div tag having a type attribute with value \"grid\"
        div_grid = div().setParseAction(withAttribute(type=\"grid\"))
        grid_expr = div_grid + SkipTo(div | div_end)(\"body\")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)
        
        # construct a match with any div tag having a type attribute, regardless of the value
        div_any_type = div().setParseAction(withAttribute(type=withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)(\"body\")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [193214 193219])
                    ("attrDict" variable nil (reparse-symbol function_parameters) [193220 193230]))                  )
                nil [193196 195926])
            ("withAttribute" variable nil nil [195926 195960])
            ("withClass" function
               (:documentation "
    Simplified version of C{L{withAttribute}} when matching on a div class - made
    difficult because C{class} is a reserved word in Python.

    Example::
        html = '''
            <div>
            Some text
            <div class=\"grid\">1 4 0 1 0</div>
            <div class=\"graph\">1,3 2,3 1,1</div>
            <div>this &lt;div&gt; has no class</div>
            </div>
                
        '''
        div,div_end = makeHTMLTags(\"div\")
        div_grid = div().setParseAction(withClass(\"grid\"))
        
        grid_expr = div_grid + SkipTo(div | div_end)(\"body\")
        for grid_header in grid_expr.searchString(html):
            print(grid_header.body)
        
        div_any_type = div().setParseAction(withClass(withAttribute.ANY_VALUE))
        div_expr = div_any_type + SkipTo(div | div_end)(\"body\")
        for div_header in div_expr.searchString(html):
            print(div_header.body)
    prints::
        1 4 0 1 0

        1 4 0 1 0
        1,3 2,3 1,1
    "
                :arguments 
                  ( ("classname" variable nil (reparse-symbol function_parameters) [195976 195985])
                    ("namespace" variable nil (reparse-symbol function_parameters) [195987 195996]))                  )
                nil [195962 197133])
            ("opAssoc" variable nil nil [197134 197156])
            ("opAssoc" variable nil nil [197157 197180])
            ("opAssoc" variable nil nil [197181 197205])
            ("infixNotation" function
               (:documentation "
    Helper method for constructing grammars of expressions made up of
    operators working in a precedence hierarchy.  Operators may be unary or
    binary, left- or right-associative.  Parse actions can also be attached
    to operator expressions. The generated parser will also recognize the use 
    of parentheses to override operator precedences (see example below).
    
    Note: if you define a deep operator list, you may see performance issues
    when using infixNotation. See L{ParserElement.enablePackrat} for a
    mechanism to potentially improve your parser performance.

    Parameters:
     - baseExpr - expression representing the most basic element for the nested
     - opList - list of tuples, one for each operator precedence level in the
      expression grammar; each tuple is of the form
      (opExpr, numTerms, rightLeftAssoc, parseAction), where:
       - opExpr is the pyparsing expression for the operator;
          may also be a string, which will be converted to a Literal;
          if numTerms is 3, opExpr is a tuple of two expressions, for the
          two operators separating the 3 terms
       - numTerms is the number of terms for this operator (must
          be 1, 2, or 3)
       - rightLeftAssoc is the indicator whether the operator is
          right or left associative, using the pyparsing-defined
          constants C{opAssoc.RIGHT} and C{opAssoc.LEFT}.
       - parseAction is the parse action to be associated with
          expressions matching this operator expression (the
          parse action tuple member may be omitted); if the parse action
          is passed a tuple or list of functions, this is equivalent to
          calling C{setParseAction(*fn)} (L{ParserElement.setParseAction})
     - lpar - expression for matching left-parentheses (default=C{Suppress('(')})
     - rpar - expression for matching right-parentheses (default=C{Suppress(')')})

    Example::
        # simple example of four-function arithmetic with ints and variable names
        integer = pyparsing_common.signed_integer
        varname = pyparsing_common.identifier 
        
        arith_expr = infixNotation(integer | varname,
            [
            ('-', 1, opAssoc.RIGHT),
            (oneOf('* /'), 2, opAssoc.LEFT),
            (oneOf('+ -'), 2, opAssoc.LEFT),
            ])
        
        arith_expr.runTests('''
            5+3*6
            (5+3)*6
            -2--11
            ''', fullDump=False)
    prints::
        5+3*6
        [[5, '+', [3, '*', 6]]]

        (5+3)*6
        [[[5, '+', 3], '*', 6]]

        -2--11
        [[['-', 2], '-', ['-', 11]]]
    "
                :arguments 
                  ( ("baseExpr" variable nil (reparse-symbol function_parameters) [197226 197234])
                    ("opList" variable nil (reparse-symbol function_parameters) [197236 197242])
                    ("lpar" variable nil (reparse-symbol function_parameters) [197244 197248])
                    ("rpar" variable nil (reparse-symbol function_parameters) [197264 197268]))                  )
                nil [197207 202605])
            ("operatorPrecedence" variable nil nil [202606 202640])
            ("\"\"\"(Deprecated) Former name of C{L{infixNotation}}, will be dropped in a future release.\"\"\"" code nil nil [202641 202732])
            ("dblQuotedString" variable nil nil [202734 202871])
            ("sglQuotedString" variable nil nil [202872 203009])
            ("quotedString" variable nil nil [203010 203245])
            ("unicodeString" variable nil nil [203246 203334])
            ("nestedExpr" function
               (:documentation "
    Helper method for defining nested lists enclosed in opening and closing
    delimiters (\"(\" and \")\" are the default).

    Parameters:
     - opener - opening character for a nested list (default=C{\"(\"}); can also be a pyparsing expression
     - closer - closing character for a nested list (default=C{\")\"}); can also be a pyparsing expression
     - content - expression for items within the nested lists (default=C{None})
     - ignoreExpr - expression for ignoring opening and closing delimiters (default=C{quotedString})

    If an expression is not provided for the content argument, the nested
    expression will capture all whitespace-delimited content between delimiters
    as a list of separate values.

    Use the C{ignoreExpr} argument to define expressions that may contain
    opening or closing characters that should not be treated as opening
    or closing characters for nesting, such as quotedString or a comment
    expression.  Specify multiple expressions using an C{L{Or}} or C{L{MatchFirst}}.
    The default is L{quotedString}, but if no expressions are to be ignored,
    then pass C{None} for this argument.

    Example::
        data_type = oneOf(\"void int short long char float double\")
        decl_data_type = Combine(data_type + Optional(Word('*')))
        ident = Word(alphas+'_', alphanums+'_')
        number = pyparsing_common.number
        arg = Group(decl_data_type + ident)
        LPAR,RPAR = map(Suppress, \"()\")

        code_body = nestedExpr('{', '}', ignoreExpr=(quotedString | cStyleComment))

        c_function = (decl_data_type(\"type\") 
                      + ident(\"name\")
                      + LPAR + Optional(delimitedList(arg), [])(\"args\") + RPAR 
                      + code_body(\"body\"))
        c_function.ignore(cStyleComment)
        
        source_code = '''
            int is_odd(int x) { 
                return (x%2); 
            }
                
            int dec_to_hex(char hchar) { 
                if (hchar >= '0' && hchar <= '9') { 
                    return (ord(hchar)-ord('0')); 
                } else { 
                    return (10+ord(hchar)-ord('A'));
                } 
            }
        '''
        for func in c_function.searchString(source_code):
            print(\"%(name)s (%(type)s) args: %(args)s\" % func)

    prints::
        is_odd (int) args: [['int', 'x']]
        dec_to_hex (int) args: [['char', 'hchar']]
    "
                :arguments 
                  ( ("opener" variable nil (reparse-symbol function_parameters) [203351 203357])
                    ("closer" variable nil (reparse-symbol function_parameters) [203363 203369])
                    ("content" variable nil (reparse-symbol function_parameters) [203375 203382])
                    ("ignoreExpr" variable nil (reparse-symbol function_parameters) [203389 203399]))                  )
                nil [203336 207691])
            ("indentedBlock" function
               (:documentation "
    Helper method for defining space-delimited indentation blocks, such as
    those used to define block statements in Python source code.

    Parameters:
     - blockStatementExpr - expression defining syntax of statement that
            is repeated within the indented block
     - indentStack - list created by caller to manage indentation stack
            (multiple statementWithIndentedBlock expressions within a single grammar
            should share a common indentStack)
     - indent - boolean indicating whether block must be indented beyond the
            the current level; set to False for block of left-most statements
            (default=C{True})

    A valid block must contain at least one C{blockStatement}.

    Example::
        data = '''
        def A(z):
          A1
          B = 100
          G = A2
          A2
          A3
        B
        def BB(a,b,c):
          BB1
          def BBA():
            bba1
            bba2
            bba3
        C
        D
        def spam(x,y):
             def eggs(z):
                 pass
        '''


        indentStack = [1]
        stmt = Forward()

        identifier = Word(alphas, alphanums)
        funcDecl = (\"def\" + identifier + Group( \"(\" + Optional( delimitedList(identifier) ) + \")\" ) + \":\")
        func_body = indentedBlock(stmt, indentStack)
        funcDef = Group( funcDecl + func_body )

        rvalue = Forward()
        funcCall = Group(identifier + \"(\" + Optional(delimitedList(rvalue)) + \")\")
        rvalue << (funcCall | identifier | Word(nums))
        assignment = Group(identifier + \"=\" + rvalue)
        stmt << ( funcDef | assignment | identifier )

        module_body = OneOrMore(stmt)

        parseTree = module_body.parseString(data)
        parseTree.pprint()
    prints::
        [['def',
          'A',
          ['(', 'z', ')'],
          ':',
          [['A1'], [['B', '=', '100']], [['G', '=', 'A2']], ['A2'], ['A3']]],
         'B',
         ['def',
          'BB',
          ['(', 'a', 'b', 'c', ')'],
          ':',
          [['BB1'], [['def', 'BBA', ['(', ')'], ':', [['bba1'], ['bba2'], ['bba3']]]]]],
         'C',
         'D',
         ['def',
          'spam',
          ['(', 'x', 'y', ')'],
          ':',
          [[['def', 'eggs', ['(', 'z', ')'], ':', [['pass']]]]]]] 
    "
                :arguments 
                  ( ("blockStatementExpr" variable nil (reparse-symbol function_parameters) [207710 207728])
                    ("indentStack" variable nil (reparse-symbol function_parameters) [207730 207741])
                    ("indent" variable nil (reparse-symbol function_parameters) [207743 207749]))                  )
                nil [207692 211538])
            ("alphas8bit" variable nil nil [211539 211598])
            ("punc8bit" variable nil nil [211599 211644])
            ("anyOpenTag, anyCloseTag" code nil nil [211646 211731])
            ("_htmlEntityMap" variable nil nil [211732 211804])
            ("commonHTMLEntity" variable nil nil [211805 211915])
            ("replaceHTMLEntity" function
               (:documentation "Helper parser action to replace common HTML entities with their special characters"
                :arguments 
                  ( ("t" variable nil (reparse-symbol function_parameters) [211938 211939]))                  )
                nil [211916 212075])
            ("cStyleComment" variable nil nil [212184 212273])
            ("\"Comment of the form C{/* ... */}\"" code nil nil [212274 212308])
            ("htmlComment" variable nil nil [212310 212373])
            ("\"Comment of the form C{<!-- ... -->}\"" code nil nil [212374 212411])
            ("restOfLine" variable nil nil [212413 212480])
            ("dblSlashComment" variable nil nil [212481 212548])
            ("\"Comment of the form C{// ... (to end of line)}\"" code nil nil [212549 212597])
            ("cppStyleComment" variable nil nil [212599 212709])
            ("\"Comment of either form C{L{cStyleComment}} or C{L{dblSlashComment}}\"" code nil nil [212710 212779])
            ("javaStyleComment" variable nil nil [212781 212815])
            ("\"Same as C{L{cppStyleComment}}\"" code nil nil [212816 212847])
            ("pythonStyleComment" variable nil nil [212849 212915])
            ("\"Comment of the form C{# ... (to end of line)}\"" code nil nil [212916 212963])
            ("_commasepitem" variable nil nil [212965 213204])
            ("commaSeparatedList" variable nil nil [213205 213331])
            ("\"\"\"(Deprecated) Predefined expression of 1 or more printable words or quoted strings, separated by commas.
   This expression is deprecated in favor of L{pyparsing_common.comma_separated_list}.\"\"\"" code nil nil [213332 213528])
            ("pyparsing_common" type
               (:documentation "
    Here are some common low-level expressions that may be useful in jump-starting parser development:
     - numeric forms (L{integers<integer>}, L{reals<real>}, L{scientific notation<sci_real>})
     - common L{programming identifiers<identifier>}
     - network addresses (L{MAC<mac_address>}, L{IPv4<ipv4_address>}, L{IPv6<ipv6_address>})
     - ISO8601 L{dates<iso8601_date>} and L{datetime<iso8601_datetime>}
     - L{UUID<uuid>}
     - L{comma-separated list<comma_separated_list>}
    Parse actions:
     - C{L{convertToInteger}}
     - C{L{convertToFloat}}
     - C{L{convertToDate}}
     - C{L{convertToDatetime}}
     - C{L{stripHTMLTags}}
     - C{L{upcaseTokens}}
     - C{L{downcaseTokens}}

    Example::
        pyparsing_common.number.runTests('''
            # any int or real number, returned as the appropriate type
            100
            -100
            +100
            3.14159
            6.02e23
            1e-12
            ''')

        pyparsing_common.fnumber.runTests('''
            # any int or real number, returned as float
            100
            -100
            +100
            3.14159
            6.02e23
            1e-12
            ''')

        pyparsing_common.hex_integer.runTests('''
            # hex numbers
            100
            FF
            ''')

        pyparsing_common.fraction.runTests('''
            # fractions
            1/2
            -3/4
            ''')

        pyparsing_common.mixed_integer.runTests('''
            # mixed fractions
            1
            1/2
            -3/4
            1-3/4
            ''')

        import uuid
        pyparsing_common.uuid.setParseAction(tokenMap(uuid.UUID))
        pyparsing_common.uuid.runTests('''
            # uuid
            12345678-1234-5678-1234-567812345678
            ''')
    prints::
        # any int or real number, returned as the appropriate type
        100
        [100]

        -100
        [-100]

        +100
        [100]

        3.14159
        [3.14159]

        6.02e23
        [6.02e+23]

        1e-12
        [1e-12]

        # any int or real number, returned as float
        100
        [100.0]

        -100
        [-100.0]

        +100
        [100.0]

        3.14159
        [3.14159]

        6.02e23
        [6.02e+23]

        1e-12
        [1e-12]

        # hex numbers
        100
        [256]

        FF
        [255]

        # fractions
        1/2
        [0.5]

        -3/4
        [-0.75]

        # mixed fractions
        1
        [1]

        1/2
        [0.5]

        -3/4
        [-0.75]

        1-3/4
        [1.75]

        # uuid
        12345678-1234-5678-1234-567812345678
        [UUID('12345678-1234-5678-1234-567812345678')]
    "
                :members 
                  ( ("convertToInteger" variable nil (reparse-symbol indented_block_body) [216412 216444])
                    ("\"\"\"
    Parse action for converting parsed integers to Python int
    \"\"\"" code nil (reparse-symbol indented_block_body) [216449 216522])
                    ("convertToFloat" variable nil (reparse-symbol indented_block_body) [216528 216560])
                    ("\"\"\"
    Parse action for converting parsed numbers to Python float
    \"\"\"" code nil (reparse-symbol indented_block_body) [216565 216639])
                    ("integer" variable nil (reparse-symbol indented_block_body) [216645 216717])
                    ("\"\"\"expression that parses an unsigned integer, returns an int\"\"\"" code nil (reparse-symbol indented_block_body) [216722 216786])
                    ("hex_integer" variable nil (reparse-symbol indented_block_body) [216792 216875])
                    ("\"\"\"expression that parses a hexadecimal integer, returns an int\"\"\"" code nil (reparse-symbol indented_block_body) [216880 216946])
                    ("signed_integer" variable nil (reparse-symbol indented_block_body) [216952 217046])
                    ("\"\"\"expression that parses an integer with optional leading sign, returns an int\"\"\"" code nil (reparse-symbol indented_block_body) [217051 217133])
                    ("fraction" variable nil (reparse-symbol indented_block_body) [217139 217275])
                    ("\"\"\"fractional expression of an integer divided by an integer, returns a float\"\"\"" code nil (reparse-symbol indented_block_body) [217280 217360])
                    ("fraction" code nil (reparse-symbol indented_block_body) [217365 217410])
                    ("mixed_integer" variable nil (reparse-symbol indented_block_body) [217416 217553])
                    ("\"\"\"mixed integer of the form 'integer - fraction', with optional leading integer, returns float\"\"\"" code nil (reparse-symbol indented_block_body) [217558 217656])
                    ("mixed_integer" code nil (reparse-symbol indented_block_body) [217661 217694])
                    ("real" variable nil (reparse-symbol indented_block_body) [217700 217784])
                    ("\"\"\"expression that parses a floating point number and returns a float\"\"\"" code nil (reparse-symbol indented_block_body) [217789 217861])
                    ("sci_real" variable nil (reparse-symbol indented_block_body) [217867 218010])
                    ("\"\"\"expression that parses a floating point number with optional scientific notation and returns a float\"\"\"" code nil (reparse-symbol indented_block_body) [218015 218121])
                    ("number" variable nil (reparse-symbol indented_block_body) [218191 218247])
                    ("\"\"\"any numeric expression, returns the corresponding Python type\"\"\"" code nil (reparse-symbol indented_block_body) [218252 218319])
                    ("fnumber" variable nil (reparse-symbol indented_block_body) [218325 218424])
                    ("\"\"\"any int or real number, returned as float\"\"\"" code nil (reparse-symbol indented_block_body) [218429 218476])
                    ("identifier" variable nil (reparse-symbol indented_block_body) [218486 218552])
                    ("\"\"\"typical code identifier (leading alpha or '_', followed by 0 or more alphas, nums, or '_')\"\"\"" code nil (reparse-symbol indented_block_body) [218557 218653])
                    ("ipv4_address" variable nil (reparse-symbol indented_block_body) [218663 218787])
                    ("\"IPv4 address (C{0.0.0.0 - 255.255.255.255})\"" code nil (reparse-symbol indented_block_body) [218792 218837])
                    ("_ipv6_part" variable nil (reparse-symbol indented_block_body) [218843 218905])
                    ("_full_ipv6_address" variable nil (reparse-symbol indented_block_body) [218910 218995])
                    ("_short_ipv6_address" variable nil (reparse-symbol indented_block_body) [219000 219158])
                    ("_short_ipv6_address" code nil (reparse-symbol indented_block_body) [219163 219272])
                    ("_mixed_ipv6_address" variable nil (reparse-symbol indented_block_body) [219277 219355])
                    ("ipv6_address" variable nil (reparse-symbol indented_block_body) [219360 219496])
                    ("\"IPv6 address (long, short, or mixed form)\"" code nil (reparse-symbol indented_block_body) [219501 219544])
                    ("mac_address" variable nil (reparse-symbol indented_block_body) [219554 219659])
                    ("\"MAC address xx:xx:xx:xx:xx (may also have '-' or '.' delimiters)\"" code nil (reparse-symbol indented_block_body) [219664 219730])
                    ("convertToDate" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("fmt" variable nil (reparse-symbol function_parameters) [219772 219775]))                          
                        :documentation "
        Helper to create a parse action for converting parsed date string to Python datetime.date

        Params -
         - fmt - format to be passed to datetime.strptime (default=C{\"%Y-%m-%d\"})

        Example::
            date_expr = pyparsing_common.iso8601_date.copy()
            date_expr.setParseAction(pyparsing_common.convertToDate())
            print(date_expr.parseString(\"1999-12-31\"))
        prints::
            [datetime.date(1999, 12, 31)]
        ")
                        (reparse-symbol indented_block_body) [219736 220490])
                    ("convertToDatetime" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("fmt" variable nil (reparse-symbol function_parameters) [220535 220538]))                          
                        :documentation "
        Helper to create a parse action for converting parsed datetime string to Python datetime.datetime

        Params -
         - fmt - format to be passed to datetime.strptime (default=C{\"%Y-%m-%dT%H:%M:%S.%f\"})

        Example::
            dt_expr = pyparsing_common.iso8601_datetime.copy()
            dt_expr.setParseAction(pyparsing_common.convertToDatetime())
            print(dt_expr.parseString(\"1999-12-31T23:59:59.999\"))
        prints::
            [datetime.datetime(1999, 12, 31, 23, 59, 59, 999000)]
        ")
                        (reparse-symbol indented_block_body) [220495 221317])
                    ("iso8601_date" variable nil (reparse-symbol indented_block_body) [221322 221426])
                    ("\"ISO8601 date (C{yyyy-mm-dd})\"" code nil (reparse-symbol indented_block_body) [221431 221461])
                    ("iso8601_datetime" variable nil (reparse-symbol indented_block_body) [221467 221658])
                    ("\"ISO8601 datetime (C{yyyy-mm-ddThh:mm:ss.s(Z|+-00:00)}) - trailing seconds, milliseconds, and timezone optional; accepts separating C{'T'} or C{' '}\"" code nil (reparse-symbol indented_block_body) [221663 221812])
                    ("uuid" variable nil (reparse-symbol indented_block_body) [221818 221901])
                    ("\"UUID (C{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx})\"" code nil (reparse-symbol indented_block_body) [221906 221954])
                    ("_html_stripper" code nil (reparse-symbol indented_block_body) [221960 222023])
                    ("stripHTMLTags" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("s" variable nil (reparse-symbol function_parameters) [222064 222065])
                            ("l" variable nil (reparse-symbol function_parameters) [222067 222068])
                            ("tokens" variable nil (reparse-symbol function_parameters) [222070 222076]))                          
                        :documentation "
        Parse action to remove HTML tags from web page HTML source

        Example::
            # strip HTML links from normal text 
            text = '<td>More info at the <a href=\"http://pyparsing.wikispaces.com\">pyparsing</a> wiki page</td>'
            td,td_end = makeHTMLTags(\"TD\")
            table_text = td + SkipTo(td_end).setParseAction(pyparsing_common.stripHTMLTags)(\"body\") + td_end
            
            print(table_text.parseString(text).body) # -> 'More info at the pyparsing wiki page'
        ")
                        (reparse-symbol indented_block_body) [222028 222687])
                    ("_commasepitem" variable nil (reparse-symbol indented_block_body) [222692 222895])
                    ("comma_separated_list" variable nil (reparse-symbol indented_block_body) [222900 223030])
                    ("\"\"\"Predefined expression of 1 or more printable words or quoted strings, separated by commas.\"\"\"" code nil (reparse-symbol indented_block_body) [223035 223131])
                    ("upcaseTokens" variable nil (reparse-symbol indented_block_body) [223137 223202])
                    ("\"\"\"Parse action to convert tokens to upper case.\"\"\"" code nil (reparse-symbol indented_block_body) [223207 223258])
                    ("downcaseTokens" variable nil (reparse-symbol indented_block_body) [223264 223331])
                    ("\"\"\"Parse action to convert tokens to lower case.\"\"\"" code nil (reparse-symbol indented_block_body) [223336 223387]))                  
                :type "class")
                nil [213638 223388])
            ("if" code nil nil [223390 225320]))          
      :file "pyparsing.py"
      :pointmax 225320
      :fsize 231039
      :lastmodtime '(22716 53790 0 0)
      :unmatched-syntax '((INDENT_BLOCK 221243 . 221295) (NEWLINE 221242 . 221243) (COLON 221241 . 221242) (TRY 221149 . 221152) (AS 221236 . 221238) (INDENT_BLOCK 220416 . 220468) (NEWLINE 220415 . 220416) (COLON 220414 . 220415) (TRY 220315 . 220318) (AS 220409 . 220411) (NAME 200106 . 200114) (IF 200136 . 200138) (ELSE 200149 . 200153) (NAME 197012 . 197021) (IF 197047 . 197049) (ELSE 197060 . 197064) (NAME 186753 . 186762) (IF 186777 . 186779) (ELSE 186811 . 186815) (INDENT_BLOCK 172298 . 172398) (NEWLINE 172297 . 172298) (COLON 172296 . 172297) (TRY 172231 . 172234) (AS 172290 . 172292) (NAME 159859 . 159883) (IF 159911 . 159913) (ELSE 159942 . 159946) (NAME 159762 . 159786) (IF 159814 . 159816) (ELSE 159841 . 159845) (NAME 150731 . 150735) (IF 150755 . 150757) (ELSE 150776 . 150780) (INDENT_BLOCK 139369 . 139549) (NEWLINE 139368 . 139369) (COLON 139367 . 139368) (EXCEPT 139350 . 139356) (INDENT_BLOCK 139219 . 139338) (NEWLINE 139218 . 139219) (COLON 139217 . 139218) (TRY 139086 . 139089) (AS 139211 . 139213) (INDENT_BLOCK 136918 . 137094) (NEWLINE 136917 . 136918) (COLON 136916 . 136917) (TRY 136803 . 136806) (AS 136910 . 136912) (INDENT_BLOCK 136646 . 136688) (NEWLINE 136568 . 136569) (COLON 136567 . 136568) (ELSE 136563 . 136567) (INDENT_BLOCK 136371 . 136551) (NEWLINE 136370 . 136371) (COLON 136369 . 136370) (EXCEPT 136352 . 136358) (INDENT_BLOCK 136180 . 136340) (NEWLINE 136179 . 136180) (COLON 136178 . 136179) (TRY 136082 . 136085) (AS 136172 . 136174) (INDENT_BLOCK 134196 . 134287) (NEWLINE 134195 . 134196) (COLON 134194 . 134195) (EXCEPT 134177 . 134183) (INDENT_BLOCK 134050 . 134161) (NEWLINE 134049 . 134050) (COLON 134048 . 134049) (TRY 133850 . 133853) (AS 134043 . 134045) (INDENT_BLOCK 93255 . 93393) (NEWLINE 93254 . 93255) (COLON 93253 . 93254) (AS 93247 . 93249) (EXCEPT 93230 . 93236) (INDENT_BLOCK 92786 . 93218) (NEWLINE 92785 . 92786) (COLON 92784 . 92785) (TRY 92520 . 92523) (AS 92779 . 92781) (INDENT_BLOCK 87246 . 87461) (NEWLINE 87245 . 87246) (COLON 87244 . 87245) (TRY 87138 . 87141) (AS 87238 . 87240) (INDENT_BLOCK 71487 . 71702) (NEWLINE 71486 . 71487) (COLON 71485 . 71486) (TRY 71348 . 71351) (AS 71479 . 71481) (INDENT_BLOCK 70107 . 70322) (NEWLINE 70106 . 70107) (COLON 70105 . 70106) (TRY 69541 . 69544) (AS 70099 . 70101) (INDENT_BLOCK 68156 . 68371) (NEWLINE 68155 . 68156) (COLON 68154 . 68155) (TRY 67255 . 67258) (AS 68148 . 68150) (INDENT_BLOCK 65596 . 65622) (NEWLINE 65595 . 65596) (COLON 65594 . 65595) (ELSE 65590 . 65594) (INDENT_BLOCK 65367 . 65582) (NEWLINE 65366 . 65367) (COLON 65365 . 65366) (TRY 65103 . 65106) (AS 65359 . 65361) (INDENT_BLOCK 60971 . 61071) (NEWLINE 60970 . 60971) (COLON 60969 . 60970) (ELSE 60965 . 60969) (INDENT_BLOCK 60861 . 60949) (NEWLINE 60785 . 60786) (COLON 60784 . 60785) (TRY 60645 . 60648) (AS 60779 . 60781) (INDENT_BLOCK 55838 . 55993) (NEWLINE 55762 . 55763) (COLON 55761 . 55762) (TRY 55206 . 55209) (AS 55755 . 55757) (INDENT_BLOCK 54105 . 54353) (NEWLINE 54052 . 54053) (COLON 54051 . 54052) (TRY 53780 . 53783) (AS 54045 . 54047) (NAME 51285 . 51293) (IF 51316 . 51318) (ELSE 51346 . 51350) (NAME 39544 . 39550) (IF 39556 . 39558) (ELSE 39585 . 39589) (RETURN 36794 . 36800) (IF 36803 . 36805) (ELSE 36840 . 36844) (NAME 24899 . 24908) (IF 24928 . 24930) (ELSE 24935 . 24939))))
  :file "!drive_c!ProgramData!Anaconda3!Lib!site-packages!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
