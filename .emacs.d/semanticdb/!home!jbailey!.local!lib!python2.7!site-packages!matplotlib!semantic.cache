;; Object semanticdb-project-database-file-15ef68c
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-15ef68c"
  :tables
  (list
    (semanticdb-table "semanticdb-table-ded4a0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
`matplotlib.pyplot` is a state-based interface to matplotlib. It provides
a MATLAB-like way of plotting.

pyplot is mainly intended for interactive plots and simple cases of programmatic
plot generation::

    import numpy as np
    import matplotlib.pyplot as plt

    x = np.arange(0, 5, 0.1)
    y = np.sin(x)
    plt.plot(x, y)

The object-oriented API is recommended for more complex plots.
\"\"\"" code nil nil [133 536])
            ("" code nil nil [560 645])
            ("six" include nil nil [647 657])
            ("sys" include nil nil [659 669])
            ("time" include nil nil [670 681])
            ("warnings" include nil nil [682 697])
            ("cycler" include nil nil [699 724])
            ("matplotlib" include nil nil [725 742])
            ("matplotlib.colorbar" include nil nil [743 769])
            ("matplotlib" include nil nil [770 798])
            ("matplotlib" include nil nil [799 849])
            ("matplotlib.cbook" include nil nil [850 910])
            ("matplotlib.cbook" include nil nil [911 955])
            ("matplotlib.cbook" include nil nil [956 1012])
            ("matplotlib" include nil nil [1013 1045])
            ("matplotlib.backend_bases" include nil nil [1046 1099])
            ("matplotlib.figure" include nil nil [1100 1147])
            ("matplotlib.gridspec" include nil nil [1148 1188])
            ("matplotlib.image" include nil nil [1189 1235])
            ("matplotlib.image" include nil nil [1236 1282])
            ("matplotlib" include nil nil [1283 1344])
            ("matplotlib" include nil nil [1345 1378])
            ("matplotlib.rcsetup" include nil nil [1379 1443])
            ("matplotlib.artist" include nil nil [1444 1491])
            ("matplotlib.artist" include nil nil [1492 1535])
            ("matplotlib.axes" include nil nil [1536 1577])
            ("matplotlib.projections" include nil nil [1578 1622])
            ("matplotlib" include nil nil [1623 1650])
            ("matplotlib.scale" include nil nil [1696 1756])
            ("matplotlib" include nil nil [1758 1783])
            ("matplotlib.cm" include nil nil [1784 1833])
            ("numpy" include nil nil [1835 1853])
            ("matplotlib.colors" include nil nil [1901 1940])
            ("matplotlib.lines" include nil nil [1941 1976])
            ("matplotlib.text" include nil nil [1977 2021])
            ("matplotlib.patches" include nil nil [2022 2086])
            ("matplotlib.widgets" include nil nil [2087 2153])
            ("MaxNLocator" include nil nil [2168 2517])
            ("MultipleLocator" include nil nil [2168 2517])
            ("AutoLocator" include nil nil [2168 2517])
            ("LogLocator" include nil nil [2168 2517])
            ("LinearLocator" include nil nil [2168 2517])
            ("NullLocator" include nil nil [2168 2517])
            ("FixedLocator" include nil nil [2168 2517])
            ("IndexLocator" include nil nil [2168 2517])
            ("Locator" include nil nil [2168 2517])
            ("LogFormatterMathtext" include nil nil [2168 2517])
            ("LogFormatterExponent" include nil nil [2168 2517])
            ("LogFormatter" include nil nil [2168 2517])
            ("ScalarFormatter" include nil nil [2168 2517])
            ("FormatStrFormatter" include nil nil [2168 2517])
            ("FuncFormatter" include nil nil [2168 2517])
            ("NullFormatter" include nil nil [2168 2517])
            ("FixedFormatter" include nil nil [2168 2517])
            ("Formatter" include nil nil [2168 2517])
            ("TickHelper" include nil nil [2168 2517])
            ("matplotlib.backends" include nil nil [2518 2561])
            ("_backend_selection" function (:documentation " If rcParams['backend_fallback'] is true, check to see if the
        current backend is compatible with the current running event
        loop, and if not switches to a compatible one.
    ") nil [2587 4157])
            ("_backend_selection" code nil nil [4158 4178])
            ("_backend_mod, new_figure_manager, draw_if_interactive, _show" code nil nil [4194 4270])
            ("_IP_REGISTERED" variable nil nil [4272 4293])
            ("_INSTALL_FIG_OBSERVER" variable nil nil [4294 4323])
            ("install_repl_displayhook" function (:documentation "
    Install a repl display hook so that any stale figure are automatically
    redrawn when control is returned to the repl.

    This works with IPython terminals and kernels,
    as well as vanilla python shells.
    ") nil [4326 5870])
            ("uninstall_repl_displayhook" function (:documentation "
    Uninstalls the matplotlib display hook.

    .. warning

       Need IPython >= 2 for this to work.  For IPython < 2 will raise a
       ``NotImplementedError``

    .. warning

       If you are using vanilla python and have installed another
       display hook this will reset ``sys.displayhook`` to what ever
       function was there when matplotlib installed it's displayhook,
       possibly discarding your changes.
    ") nil [5872 6832])
            ("draw_all" variable nil nil [6834 6872])
            ("" code nil nil [6897 6913])
            ("findobj" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [6926 6927])
                ("match" variable nil (reparse-symbol function_parameters) [6934 6939])
                ("include_self" variable nil (reparse-symbol function_parameters) [6946 6958]))              ) nil [6914 7057])
            ("switch_backend" function
               (:documentation "
    Switch the default backend.  This feature is **experimental**, and
    is only expected to work switching to an image backend.  e.g., if
    you have a bunch of PostScript scripts that you want to run from
    an interactive ipython session, you may want to switch to the PS
    backend before running them to avoid having a bunch of GUI windows
    popup.  If you try to interactively switch from one GUI backend to
    another, you will explode.

    Calling this command will close all open windows.
    "
                :arguments 
                  ( ("newbackend" variable nil (reparse-symbol function_parameters) [7078 7088]))                  )
                nil [7059 7887])
            ("show" function
               (:documentation "
    Display a figure.
    When running in ipython with its pylab mode, display all
    figures and return to the ipython prompt.

    In non-interactive mode, display all figures and block until
    the figures have been closed; in interactive mode it has no
    effect unless figures were created prior to a change from
    non-interactive to interactive mode (not recommended).  In
    that case it displays the figures but does not block.

    A single experimental keyword argument, *block*, may be
    set to True or False to override the blocking behavior
    described above.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [7898 7903])
                    ("kw" variable nil (reparse-symbol function_parameters) [7905 7909]))                  )
                nil [7889 8558])
            ("isinteractive" function (:documentation "
    Return status of interactive mode.
    ") nil [8560 8675])
            ("ioff" function (:documentation "Turn interactive mode off.") nil [8677 8793])
            ("ion" function (:documentation "Turn interactive mode on.") nil [8795 8906])
            ("pause" function
               (:documentation "
    Pause for *interval* seconds.

    If there is an active figure, it will be updated and displayed before the
    pause, and the GUI event loop (if any) will run during the pause.

    This can be used for crude animation.  For more complex animation, see
    :mod:`matplotlib.animation`.

    Notes
    -----
    This function is experimental; its behavior may be changed or extended in a
    future release.
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [8918 8926]))                  )
                nil [8908 9634])
            ("" code nil nil [9658 9673])
            ("rc" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [9681 9686])
                ("kwargs" variable nil (reparse-symbol function_parameters) [9688 9696]))              ) nil [9674 9734])
            ("" code nil nil [9758 9781])
            ("rc_context" function (:arguments 
              ( ("rc" variable nil (reparse-symbol function_parameters) [9797 9799])
                ("fname" variable nil (reparse-symbol function_parameters) [9806 9811]))              ) nil [9782 9863])
            ("" code nil nil [9887 9910])
            ("rcdefaults" function nil nil [9911 10012])
            ("gci" function (:documentation "
    Get the current colorable artist.  Specifically, returns the
    current :class:`~matplotlib.cm.ScalarMappable` instance (image or
    patch collection), or *None* if no images or patch collections
    have been defined.  The commands :func:`~matplotlib.pyplot.imshow`
    and :func:`~matplotlib.pyplot.figimage` create
    :class:`~matplotlib.image.Image` instances, and the commands
    :func:`~matplotlib.pyplot.pcolor` and
    :func:`~matplotlib.pyplot.scatter` create
    :class:`~matplotlib.collections.Collection` instances.  The
    current image is an attribute of the current axes, or the nearest
    earlier axes in the current figure that contains an image.
    ") nil [10142 10867])
            ("sci" function
               (:documentation "
    Set the current image.  This image will be the target of colormap
    commands like :func:`~matplotlib.pyplot.jet`,
    :func:`~matplotlib.pyplot.hot` or
    :func:`~matplotlib.pyplot.clim`).  The current image is an
    attribute of the current axes.
    "
                :arguments 
                  ( ("im" variable nil (reparse-symbol function_parameters) [10877 10879]))                  )
                nil [10869 11173])
            ("" code nil nil [11235 11242])
            ("setp" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [11252 11257])
                ("kwargs" variable nil (reparse-symbol function_parameters) [11259 11267]))              ) nil [11243 11304])
            ("xkcd" function
               (:documentation "
    Turns on `xkcd <https://xkcd.com/>`_ sketch-style drawing mode.
    This will only have effect on things drawn after this function is
    called.

    For best results, the \"Humor Sans\" font should be installed: it is
    not included with matplotlib.

    Parameters
    ----------
    scale : float, optional
        The amplitude of the wiggle perpendicular to the source line.
    length : float, optional
        The length of the wiggle along the line.
    randomness : float, optional
        The scale factor by which the length is shrunken or expanded.

    Notes
    -----
    This function works by a number of rcParams, so it will probably
    override others you have set before.

    If you want the effects of this function to be temporary, it can
    be used as a context manager, for example::

        with plt.xkcd():
            # This figure will be in XKCD-style
            fig1 = plt.figure()
            # ...

        # This figure will be in regular style
        fig2 = plt.figure()
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [11315 11320])
                    ("length" variable nil (reparse-symbol function_parameters) [11324 11330])
                    ("randomness" variable nil (reparse-symbol function_parameters) [11336 11346]))                  )
                nil [11306 13675])
            ("figure" function
               (:documentation "
    Creates a new figure.

    Parameters
    ----------

    num : integer or string, optional, default: none
        If not provided, a new figure will be created, and the figure number
        will be incremented. The figure objects holds this number in a `number`
        attribute.
        If num is provided, and a figure with this id already exists, make
        it active, and returns a reference to it. If this figure does not
        exists, create it and returns it.
        If num is a string, the window title will be set to this figure's
        `num`.

    figsize : tuple of integers, optional, default: None
        width, height in inches. If not provided, defaults to rc
        figure.figsize.

    dpi : integer, optional, default: None
        resolution of the figure. If not provided, defaults to rc figure.dpi.

    facecolor :
        the background color. If not provided, defaults to rc figure.facecolor.

    edgecolor :
        the border color. If not provided, defaults to rc figure.edgecolor.

    frameon : bool, optional, default: True
        If False, suppress drawing the figure frame.

    FigureClass : class derived from matplotlib.figure.Figure
        Optionally use a custom Figure instance.

    clear : bool, optional, default: False
        If True and the figure already exists, then it is cleared.

    Returns
    -------
    figure : Figure
        The Figure instance returned will also be passed to new_figure_manager
        in the backends, which allows to hook custom Figure classes into the
        pylab interface. Additional kwargs will be passed to the figure init
        function.

    Notes
    -----
    If you are creating many figures, make sure you explicitly call \"close\"
    on the figures you are not using, because this will enable pylab
    to properly clean up the memory.

    rcParams defines the default values, which can be modified in the
    matplotlibrc file

    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [13703 13706])
                    ("figsize" variable nil (reparse-symbol function_parameters) [13772 13779])
                    ("dpi" variable nil (reparse-symbol function_parameters) [13830 13833])
                    ("facecolor" variable nil (reparse-symbol function_parameters) [13880 13889])
                    ("edgecolor" variable nil (reparse-symbol function_parameters) [13942 13951])
                    ("frameon" variable nil (reparse-symbol function_parameters) [14004 14011])
                    ("FigureClass" variable nil (reparse-symbol function_parameters) [14029 14040])
                    ("clear" variable nil (reparse-symbol function_parameters) [14060 14065])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14084 14092]))                  )
                nil [13692 19071])
            ("_auto_draw_if_interactive" function
               (:documentation "
    This is an internal helper function for making sure that auto-redrawing
    works as intended in the plain python repl.

    Parameters
    ----------
    fig : Figure
        A figure object which is assumed to be associated with a canvas
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [19103 19106])
                    ("val" variable nil (reparse-symbol function_parameters) [19108 19111]))                  )
                nil [19073 19480])
            ("gcf" function (:documentation "Get a reference to the current figure.") nil [19482 19696])
            ("fignum_exists" function (:arguments 
              ( ("num" variable nil (reparse-symbol function_parameters) [19716 19719]))              ) nil [19698 19794])
            ("get_fignums" function (:documentation "Return a list of existing figure numbers.") nil [19796 19910])
            ("get_figlabels" function (:documentation "Return a list of existing figure labels.") nil [19912 20148])
            ("get_current_fig_manager" function nil nil [20150 20391])
            ("" code nil nil [20415 20445])
            ("connect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [20458 20459])
                ("func" variable nil (reparse-symbol function_parameters) [20461 20465]))              ) nil [20446 20533])
            ("" code nil nil [20557 20590])
            ("disconnect" function (:arguments 
              ( ("cid" variable nil (reparse-symbol function_parameters) [20606 20609]))              ) nil [20591 20676])
            ("close" function
               (:documentation "
    Close a figure window.

    ``close()`` by itself closes the current figure

    ``close(fig)`` closes the `.Figure` instance *fig*

    ``close(num)`` closes the figure number *num*

    ``close(name)`` where *name* is a string, closes figure with that label

    ``close('all')`` closes all the figure windows
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [20688 20693]))                  )
                nil [20678 22093])
            ("clf" function (:documentation "
    Clear the current figure.
    ") nil [22095 22168])
            ("draw" function (:documentation "Redraw the current figure.

    This is used to update a figure that has been altered, but not
    automatically re-drawn.  If interactive mode is on (:func:`.ion()`), this
    should be only rarely needed, but there may be ways to modify the state of
    a figure without marking it as `stale`.  Please report these cases as
    bugs.

    A more object-oriented alternative, given any
    :class:`~matplotlib.figure.Figure` instance, :attr:`fig`, that
    was created using a :mod:`~matplotlib.pyplot` function, is::

        fig.canvas.draw_idle()
    ") nil [22170 22797])
            ("" code nil nil [22821 22837])
            ("savefig" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [22850 22855])
                ("kwargs" variable nil (reparse-symbol function_parameters) [22857 22865]))              ) nil [22838 23017])
            ("" code nil nil [23041 23056])
            ("ginput" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* clicks from the user and return a list of the
    coordinates of each click.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [23068 23073])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [23075 23083]))                  )
                nil [23057 23344])
            ("" code nil nil [23368 23395])
            ("waitforbuttonpress" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* key or mouse clicks from the user and
    return a list containing True's for keyboard clicks and False's
    for mouse clicks.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [23419 23424])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [23426 23434]))                  )
                nil [23396 23758])
            ("" code nil nil [23811 23824])
            ("figtext" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23837 23842])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23844 23852]))              ) nil [23825 23894])
            ("" code nil nil [23918 23935])
            ("suptitle" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23949 23954])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23956 23964]))              ) nil [23936 24010])
            ("" code nil nil [24034 24051])
            ("figimage" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [24065 24070])
                ("kwargs" variable nil (reparse-symbol function_parameters) [24072 24080]))              ) nil [24052 24126])
            ("figlegend" function
               (:documentation "
    Place a legend in the figure.

    *labels*
      a sequence of strings

    *handles*
      a sequence of :class:`~matplotlib.lines.Line2D` or
      :class:`~matplotlib.patches.Patch` instances

    *loc*
      can be a string or an integer specifying the legend
      location

    A :class:`matplotlib.legend.Legend` instance is returned.

    Examples
    --------

    To make a legend from existing artists on every axes::

      figlegend()

    To make a legend for a list of lines and labels::

      figlegend( (line1, line2, line3),
                 ('label1', 'label2', 'label3'),
                 'upper right' )

    .. seealso::

       :func:`~matplotlib.pyplot.legend`

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [24142 24147])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [24149 24157]))                  )
                nil [24128 24908])
            ("_hold_msg" variable nil nil [24940 25133])
            ("" code nil nil [25146 25172])
            ("hold" function
               (:documentation "
    Set the hold state.  If *b* is None (default), toggle the
    hold state, else set the hold state to boolean value *b*::

      hold()      # toggle hold
      hold(True)  # hold is on
      hold(False) # hold is off

    When *hold* is *True*, subsequent plot commands will add elements to
    the current axes.  When *hold* is *False*, the current axes and
    figure will be cleared on the next plot command.

    "
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [25182 25183]))                  )
                nil [25173 26110])
            ("" code nil nil [26122 26148])
            ("ishold" function (:documentation "
    Return the hold status of the current axes.
    ") nil [26149 26250])
            ("" code nil nil [26263 26289])
            ("over" function
               (:documentation "
    Call a function with hold(True).

    Calls::

      func(*args, **kwargs)

    with ``hold(True)`` and then restores the hold state.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [26299 26303])
                    ("args" variable nil (reparse-symbol function_parameters) [26305 26310])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [26312 26320]))                  )
                nil [26290 26573])
            ("axes" function
               (:documentation "
    Add an axes to the current figure and make it the current axes.

    Parameters
    ----------
    arg : None or 4-tuple or Axes
        The exact behavior of this function depends on the type:

        - *None*: A new full window axes is added using
          ``subplot(111, **kwargs)``
        - 4-tuple of floats *rect* = ``[left, bottom, width, height]``.
          A new axes is added with dimensions *rect* in normalized
          (0, 1) units using `~.Figure.add_axes` on the current figure.
        - `.Axes`: This is equivalent to `.pyplot.sca`. It sets the current
          axes to *arg*. Note: This implicitly changes the current figure to
          the parent of *arg*.

          .. note:: The use of an Axes as an argument is deprecated and will be
                    removed in v3.0. Please use `.pyplot.sca` instead.

    Other Parameters
    ----------------
    **kwargs :
        For allowed keyword arguments see `.pyplot.subplot` and
        `.Figure.add_axes` respectively. Some common keyword arguments are
        listed below:

        ========= =========== =================================================
        kwarg     Accepts     Description
        ========= =========== =================================================
        facecolor color       the axes background color
        frameon   bool        whether to display the frame
        sharex    otherax     share x-axis with *otherax*
        sharey    otherax     share y-axis with *otherax*
        polar     bool        whether to use polar axes
        aspect    [str | num] ['equal', 'auto'] or a number.  If a number, the
                              ratio of y-unit/x-unit in screen-space.  See also
                              `~.Axes.set_aspect`.
        ========= =========== =================================================

    Returns
    -------
    axes : Axes
        The created or activated axes.

    Examples
    --------
    Creating a new full window axes::

        >>> plt.axes()

    Creating a new axes with specified dimensions and some kwargs::

        >>> plt.axes((left, bottom, width, height), facecolor='w')

    "
                :arguments 
                  ( ("arg" variable nil (reparse-symbol function_parameters) [26596 26599])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [26606 26614]))                  )
                nil [26587 29227])
            ("delaxes" function
               (:documentation "
    Remove the given `Axes` *ax* from the current figure. If *ax* is *None*,
    the current axes is removed. A KeyError is raised if the axes doesn't exist.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [29241 29243]))                  )
                nil [29229 29485])
            ("sca" function
               (:documentation "
    Set the current Axes instance to *ax*.

    The current Figure is updated to the parent of *ax*.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [29495 29497]))                  )
                nil [29487 29910])
            ("gca" function
               (:documentation "
    Get the current :class:`~matplotlib.axes.Axes` instance on the
    current figure matching the given keyword args, or create one.

    Examples
    --------
    To get the current polar axes on the current figure::

        plt.gca(projection='polar')

    If the current axes doesn't exist, or isn't a polar one, the appropriate
    axes will be created and then returned.

    See Also
    --------
    matplotlib.figure.Figure.gca : The figure's gca method.
    "
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [29920 29928]))                  )
                nil [29912 30443])
            ("subplot" function
               (:documentation "
    Return a subplot axes at the given grid position.

    Call signature::

       subplot(nrows, ncols, index, **kwargs)

    In the current figure, create and return an `.Axes`, at position *index*
    of a (virtual) grid of *nrows* by *ncols* axes.  Indexes go from 1 to
    ``nrows * ncols``, incrementing in row-major order.

    If *nrows*, *ncols* and *index* are all less than 10, they can also be
    given as a single, concatenated, three-digit number.

    For example, ``subplot(2, 3, 3)`` and ``subplot(233)`` both create an
    `.Axes` at the top right corner of the current figure, occupying half of
    the figure height and a third of the figure width.

    .. note::

       Creating a subplot will delete any pre-existing subplot that overlaps
       with it beyond sharing a boundary::

          import matplotlib.pyplot as plt
          # plot a line, implicitly creating a subplot(111)
          plt.plot([1,2,3])
          # now create a subplot which represents the top plot of a grid
          # with 2 rows and 1 column. Since this subplot will overlap the
          # first, the plot (and its axes) previously created, will be removed
          plt.subplot(211)
          plt.plot(range(12))
          plt.subplot(212, facecolor='y') # creates 2nd subplot with yellow background

       If you do not want this behavior, use the
       :meth:`~matplotlib.figure.Figure.add_subplot` method or the
       :func:`~matplotlib.pyplot.axes` function instead.

    Keyword arguments:

      *facecolor*:
        The background color of the subplot, which can be any valid
        color specifier.  See :mod:`matplotlib.colors` for more
        information.

      *polar*:
        A boolean flag indicating whether the subplot plot should be
        a polar projection.  Defaults to *False*.

      *projection*:
        A string giving the name of a custom projection to be used
        for the subplot. This projection must have been previously
        registered. See :mod:`matplotlib.projections`.

    .. seealso::

        :func:`~matplotlib.pyplot.axes`
            For additional information on :func:`axes` and
            :func:`subplot` keyword arguments.

        :file:`gallery/pie_and_polar_charts/polar_scatter.py`
            For an example

    **Example:**

    .. plot:: gallery/subplots_axes_and_figures/subplot.py

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [30488 30493])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [30495 30503]))                  )
                nil [30476 33820])
            ("subplots" function
               (:documentation "
    Create a figure and a set of subplots

    This utility wrapper makes it convenient to create common layouts of
    subplots, including the enclosing figure object, in a single call.

    Parameters
    ----------
    nrows, ncols : int, optional, default: 1
        Number of rows/columns of the subplot grid.

    sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False
        Controls sharing of properties among x (`sharex`) or y (`sharey`)
        axes:

            - True or 'all': x- or y-axis will be shared among all
              subplots.
            - False or 'none': each subplot x- or y-axis will be
              independent.
            - 'row': each subplot row will share an x- or y-axis.
            - 'col': each subplot column will share an x- or y-axis.

        When subplots have a shared x-axis along a column, only the x tick
        labels of the bottom subplot are visible.  Similarly, when subplots
        have a shared y-axis along a row, only the y tick labels of the first
        column subplot are visible.

    squeeze : bool, optional, default: True
        - If True, extra dimensions are squeezed out from the returned Axes
          object:

            - if only one subplot is constructed (nrows=ncols=1), the
              resulting single Axes object is returned as a scalar.
            - for Nx1 or 1xN subplots, the returned object is a 1D numpy
              object array of Axes objects are returned as numpy 1D arrays.
            - for NxM, subplots with N>1 and M>1 are returned as a 2D arrays.

        - If False, no squeezing at all is done: the returned Axes object is
          always a 2D array containing Axes instances, even if it ends up
          being 1x1.

    subplot_kw : dict, optional
        Dict with keywords passed to the
        :meth:`~matplotlib.figure.Figure.add_subplot` call used to create each
        subplot.

    gridspec_kw : dict, optional
        Dict with keywords passed to the
        :class:`~matplotlib.gridspec.GridSpec` constructor used to create the
        grid the subplots are placed on.

    **fig_kw :
        All additional keyword arguments are passed to the :func:`figure` call.

    Returns
    -------
    fig : :class:`matplotlib.figure.Figure` object

    ax : Axes object or array of Axes objects.

        ax can be either a single :class:`matplotlib.axes.Axes` object or an
        array of Axes objects if more than one subplot was created.  The
        dimensions of the resulting array can be controlled with the squeeze
        keyword, see above.

    Examples
    --------
    First create some toy data:

    >>> x = np.linspace(0, 2*np.pi, 400)
    >>> y = np.sin(x**2)

    Creates just a figure and only one subplot

    >>> fig, ax = plt.subplots()
    >>> ax.plot(x, y)
    >>> ax.set_title('Simple plot')

    Creates two subplots and unpacks the output array immediately

    >>> f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
    >>> ax1.plot(x, y)
    >>> ax1.set_title('Sharing Y axis')
    >>> ax2.scatter(x, y)

    Creates four polar axes, and accesses them through the returned array

    >>> fig, axes = plt.subplots(2, 2, subplot_kw=dict(polar=True))
    >>> axes[0, 0].plot(x, y)
    >>> axes[1, 1].scatter(x, y)

    Share a X axis with each column of subplots

    >>> plt.subplots(2, 2, sharex='col')

    Share a Y axis with each row of subplots

    >>> plt.subplots(2, 2, sharey='row')

    Share both X and Y axes with all subplots

    >>> plt.subplots(2, 2, sharex='all', sharey='all')

    Note that this is the same as

    >>> plt.subplots(2, 2, sharex=True, sharey=True)

    See Also
    --------
    figure
    subplot
    "
                :arguments 
                  ( ("nrows" variable nil (reparse-symbol function_parameters) [33835 33840])
                    ("ncols" variable nil (reparse-symbol function_parameters) [33844 33849])
                    ("sharex" variable nil (reparse-symbol function_parameters) [33853 33859])
                    ("sharey" variable nil (reparse-symbol function_parameters) [33867 33873])
                    ("squeeze" variable nil (reparse-symbol function_parameters) [33881 33888])
                    ("subplot_kw" variable nil (reparse-symbol function_parameters) [33908 33918])
                    ("gridspec_kw" variable nil (reparse-symbol function_parameters) [33925 33936])
                    ("fig_kw" variable nil (reparse-symbol function_parameters) [33943 33951]))                  )
                nil [33822 37896])
            ("subplot2grid" function
               (:documentation "
    Create an axis at specific location inside a regular grid.

    Parameters
    ----------
    shape : sequence of 2 ints
        Shape of grid in which to place axis.
        First entry is number of rows, second entry is number of columns.

    loc : sequence of 2 ints
        Location to place axis within grid.
        First entry is row number, second entry is column number.

    rowspan : int
        Number of rows for the axis to span to the right.

    colspan : int
        Number of columns for the axis to span downwards.

    fig : `Figure`, optional
        Figure to place axis in. Defaults to current figure.

    **kwargs
        Additional keyword arguments are handed to `add_subplot`.


    Notes
    -----
    The following call ::

        subplot2grid(shape, loc, rowspan=1, colspan=1)

    is identical to ::

        gridspec=GridSpec(shape[0], shape[1])
        subplotspec=gridspec.new_subplotspec(loc, rowspan, colspan)
        subplot(subplotspec)
    "
                :arguments 
                  ( ("shape" variable nil (reparse-symbol function_parameters) [37915 37920])
                    ("loc" variable nil (reparse-symbol function_parameters) [37922 37925])
                    ("rowspan" variable nil (reparse-symbol function_parameters) [37927 37934])
                    ("colspan" variable nil (reparse-symbol function_parameters) [37938 37945])
                    ("fig" variable nil (reparse-symbol function_parameters) [37949 37952])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [37959 37967]))                  )
                nil [37898 39506])
            ("twinx" function
               (:documentation "
    Make a second axes that shares the *x*-axis.  The new axes will
    overlay *ax* (or the current axes if *ax* is *None*).  The ticks
    for *ax2* will be placed on the right, and the *ax2* instance is
    returned.

    .. seealso::

       :file:`examples/api_examples/two_scales.py`
          For an example
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [39518 39520]))                  )
                nil [39508 39931])
            ("twiny" function
               (:documentation "
    Make a second axes that shares the *y*-axis.  The new axis will
    overlay *ax* (or the current axes if *ax* is *None*).  The ticks
    for *ax2* will be placed on the top, and the *ax2* instance is
    returned.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [39943 39945]))                  )
                nil [39933 40259])
            ("subplots_adjust" function
               (:documentation "
    Tune the subplot layout.

    call signature::

      subplots_adjust(left=None, bottom=None, right=None, top=None,
                      wspace=None, hspace=None)

    The parameter meanings (and suggested defaults) are::

      left  = 0.125  # the left side of the subplots of the figure
      right = 0.9    # the right side of the subplots of the figure
      bottom = 0.1   # the bottom of the subplots of the figure
      top = 0.9      # the top of the subplots of the figure
      wspace = 0.2   # the amount of width reserved for space between subplots,
                     # expressed as a fraction of the average axis width
      hspace = 0.2   # the amount of height reserved for space between subplots,
                     # expressed as a fraction of the average axis height

    The actual defaults are controlled by the rc file
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [40281 40286])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [40288 40296]))                  )
                nil [40261 41223])
            ("subplot_tool" function
               (:documentation "
    Launch a subplot tool window for a figure.

    A :class:`matplotlib.widgets.SubplotTool` instance is returned.
    "
                :arguments 
                  ( ("targetfig" variable nil (reparse-symbol function_parameters) [41242 41251]))                  )
                nil [41225 42088])
            ("tight_layout" function
               (:documentation "
    Automatically adjust subplot parameters to give specified padding.

    Parameters
    ----------
    pad : float
        padding between the figure edge and the edges of subplots, as a fraction of the font-size.
    h_pad, w_pad : float
        padding (height/width) between edges of adjacent subplots.
        Defaults to `pad_inches`.
    rect : if rect is given, it is interpreted as a rectangle
        (left, bottom, right, top) in the normalized figure
        coordinate that the whole subplots area (including
        labels) will fit into. Default is (0, 0, 1, 1).

    "
                :arguments 
                  ( ("pad" variable nil (reparse-symbol function_parameters) [42107 42110])
                    ("h_pad" variable nil (reparse-symbol function_parameters) [42117 42122])
                    ("w_pad" variable nil (reparse-symbol function_parameters) [42129 42134])
                    ("rect" variable nil (reparse-symbol function_parameters) [42141 42145]))                  )
                nil [42090 42833])
            ("box" function
               (:documentation "
    Turn the axes box on or off.

    Parameters
    ----------
    on : bool or None
        The new axes box state.  If ``None``, toggle the state.
    "
                :arguments 
                  ( ("on" variable nil (reparse-symbol function_parameters) [42843 42845]))                  )
                nil [42835 43141])
            ("title" function
               (:documentation "
    Set a title of the current axes.

    Set one of the three available axes titles. The available titles are
    positioned above the axes in the center, flush with the left edge,
    and flush with the right edge.

    .. seealso::
        See :func:`~matplotlib.pyplot.text` for adding text
        to the current axes

    Parameters
    ----------
    label : str
        Text to use for the title

    fontdict : dict
        A dictionary controlling the appearance of the title text,
        the default `fontdict` is:

            {'fontsize': rcParams['axes.titlesize'],
            'fontweight' : rcParams['axes.titleweight'],
            'verticalalignment': 'baseline',
            'horizontalalignment': loc}

    loc : {'center', 'left', 'right'}, str, optional
        Which title to set, defaults to 'center'

    Returns
    -------
    text : :class:`~matplotlib.text.Text`
        The matplotlib text instance representing the title

    Other parameters
    ----------------
    kwargs : text properties
        Other keyword arguments are text properties, see
        :class:`~matplotlib.text.Text` for a list of valid text
        properties.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43153 43154])
                    ("args" variable nil (reparse-symbol function_parameters) [43156 43161])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [43163 43171]))                  )
                nil [43143 44404])
            ("axis" function
               (:documentation "
    Convenience method to get or set axis properties.

    Calling with no arguments::

      >>> axis()

    returns the current axes limits ``[xmin, xmax, ymin, ymax]``.::

      >>> axis(v)

    sets the min and max of the x and y axes, with
    ``v = [xmin, xmax, ymin, ymax]``.::

      >>> axis('off')

    turns off the axis lines and labels.::

      >>> axis('equal')

    changes limits of *x* or *y* axis so that equal increments of *x*
    and *y* have the same length; a circle is circular.::

      >>> axis('scaled')

    achieves the same result by changing the dimensions of the plot box instead
    of the axis data limits.::

      >>> axis('tight')

    changes *x* and *y* axis limits such that all data is shown. If
    all data is already shown, it will move it to the center of the
    figure without modifying (*xmax* - *xmin*) or (*ymax* -
    *ymin*). Note this is slightly different than in MATLAB.::

      >>> axis('image')

    is 'scaled' with the axis limits equal to the data limits.::

      >>> axis('auto')

    and::

      >>> axis('normal')

    are deprecated. They restore default behavior; axis limits are automatically
    scaled to make the data fit comfortably within the plot box.

    if ``len(*v)==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*
    as kwargs selectively to alter just those limits without changing
    the others.

      >>> axis('square')

    changes the limit ranges (*xmax*-*xmin*) and (*ymax*-*ymin*) of
    the *x* and *y* axes to be the same, and have the same scaling,
    resulting in a square plot.

    The xmin, xmax, ymin, ymax tuple is returned

    .. seealso::

        :func:`xlim`, :func:`ylim`
           For setting the x- and y-limits individually.
    "
                :arguments 
                  ( ("v" variable nil (reparse-symbol function_parameters) [44427 44429])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [44431 44439]))                  )
                nil [44418 46235])
            ("xlabel" function
               (:documentation "
    Set the x-axis label of the current axes.

    Call signature::

        xlabel(label, fontdict=None, labelpad=None, **kwargs)

    This is the pyplot equivalent of calling `.set_xlabel` on the current axes.
    See there for a full parameter description.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [46248 46249])
                    ("args" variable nil (reparse-symbol function_parameters) [46251 46256])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [46258 46266]))                  )
                nil [46237 46593])
            ("ylabel" function
               (:documentation "
    Set the y-axis label of the current axes.

    Call signature::

        ylabel(label, fontdict=None, labelpad=None, **kwargs)

    This is the pyplot equivalent of calling `.set_ylabel` on the current axes.
    See there for a full parameter description.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [46606 46607])
                    ("args" variable nil (reparse-symbol function_parameters) [46609 46614])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [46616 46624]))                  )
                nil [46595 46951])
            ("xlim" function
               (:documentation "
    Get or set the x limits of the current axes.

    Call signatures::

        xmin, xmax = xlim()  # return the current xlim
        xlim((xmin, xmax))   # set the xlim to xmin, xmax
        xlim(xmin, xmax)     # set the xlim to xmin, xmax

    If you do not specify args, you can pass *xmin* or *xmax* as kwargs, i.e.::

        xlim(xmax=3)  # adjust the max leaving min unchanged
        xlim(xmin=1)  # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the x-axis.

    Returns
    -------
    xmin, xmax
        A tuple of the new x-axis limits.

    Notes
    -----
    Calling this function with no arguments (e.g. ``xlim()``) is the pyplot
    equivalent of calling `~.Axes.get_xlim` on the current axes.
    Calling this function with arguments is the pyplot equivalent of calling
    `~.Axes.set_xlim` on the current axes. All arguments are passed though.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [46962 46967])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [46969 46977]))                  )
                nil [46953 48029])
            ("ylim" function
               (:documentation "
    Get or set the y-limits of the current axes.

    Call signatures::

        ymin, ymax = ylim()  # return the current ylim
        ylim((ymin, ymax))   # set the ylim to ymin, ymax
        ylim(ymin, ymax)     # set the ylim to ymin, ymax

    If you do not specify args, you can alternatively pass *ymin* or *ymax* as
    kwargs, i.e.::

        ylim(ymax=3)  # adjust the max leaving min unchanged
        ylim(ymin=1)  # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the y-axis.

    Returns
    -------
    ymin, ymax
        A tuple of the new y-axis limits.

    Notes
    -----
    Calling this function with no arguments (e.g. ``ylim()``) is the pyplot
    equivalent of calling `~.Axes.get_ylim` on the current axes.
    Calling this function with arguments is the pyplot equivalent of calling
    `~.Axes.set_ylim` on the current axes. All arguments are passed though.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [48040 48045])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [48047 48055]))                  )
                nil [48031 49125])
            ("xscale" function
               (:documentation "
    Set the scaling of the x-axis.

    Call signature::

        xscale(scale, **kwargs)

    Parameters
    ----------
    scale : [%(scale)s]
        The scaling type.
    **kwargs
        Additional parameters depend on *scale*. See Notes.

    Notes
    -----
    This is the pyplot equivalent of calling `~.Axes.set_xscale` on the
    current axes.

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [49164 49169])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [49171 49179]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [49127 49676])
            ("yscale" function
               (:documentation "
    Set the scaling of the y-axis.

    Call signature::

        yscale(scale, **kwargs)

    Parameters
    ----------
    scale : [%(scale)s]
        The scaling type.
    **kwargs
        Additional parameters depend on *scale*. See Notes.

    Notes
    -----
    This is the pyplot equivalent of calling `~.Axes.set_yscale` on the
    current axes.

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [49715 49720])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [49722 49730]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [49678 50227])
            ("xticks" function
               (:documentation "
    Get or set the current tick locations and labels of the x-axis.

    Call signatures::

        locs, labels = xticks()           # Get locations and labels

        xticks(locs, [labels], **kwargs)  # Set locations and labels

    Parameters
    ----------
    locs : array_like
        A list of positions at which ticks should be placed. You can pass an
        empty list to disable xticks.

    labels : array_like, optional
        A list of explicit labels to place at the given *locs*.

    **kwargs
        :class:`.Text` properties can be used to control the appearance of
        the labels.

    Returns
    -------
    locs
        An array of label locations.
    labels
        A list of `.Text` objects.

    Notes
    -----
    Calling this function with no arguments (e.g. ``xticks()``) is the pyplot
    equivalent of calling `~.Axes.get_xticks` and `~.Axes.get_xticklabels` on
    the current axes.
    Calling this function with arguments is the pyplot equivalent of calling
    `~.Axes.set_xticks` and `~.Axes.set_xticklabels` on the current axes.

    Examples
    --------
    Get the current locations and labels:

        >>> locs, labels = xticks()

    Set label locations:

        >>> xticks(np.arange(0, 1, step=0.2))

    Set text labels:

        >>> xticks(np.arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue'))

    Set text labels and properties:

        >>> xticks(np.arange(12), calendar.month_name[1:13], rotation=20)

    Disable xticks:

        >>> xticks([])
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [50240 50245])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [50247 50255]))                  )
                nil [50229 52301])
            ("yticks" function
               (:documentation "
    Get or set the current tick locations and labels of the y-axis.

    Call signatures::

        locs, labels = yticks()           # Get locations and labels

        yticks(locs, [labels], **kwargs)  # Set locations and labels

    Parameters
    ----------
    locs : array_like
        A list of positions at which ticks should be placed. You can pass an
        empty list to disable yticks.

    labels : array_like, optional
        A list of explicit labels to place at the given *locs*.

    **kwargs
        :class:`.Text` properties can be used to control the appearance of
        the labels.

    Returns
    -------
    locs
        An array of label locations.
    labels
        A list of `.Text` objects.

    Notes
    -----
    Calling this function with no arguments (e.g. ``yticks()``) is the pyplot
    equivalent of calling `~.Axes.get_yticks` and `~.Axes.get_yticklabels` on
    the current axes.
    Calling this function with arguments is the pyplot equivalent of calling
    `~.Axes.set_yticks` and `~.Axes.set_yticklabels` on the current axes.

    Examples
    --------
    Get the current locations and labels:

        >>> locs, labels = yticks()

    Set label locations:

        >>> yticks(np.arange(0, 1, step=0.2))

    Set text labels:

        >>> yticks(np.arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue'))

    Set text labels and properties:

        >>> yticks(np.arange(12), calendar.month_name[1:13], rotation=45)

    Disable yticks:

        >>> yticks([])
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [52314 52319])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [52321 52329]))                  )
                nil [52303 54406])
            ("minorticks_on" function (:documentation "
    Display minor ticks on the current plot.

    Displaying minor ticks reduces performance; turn them off using
    minorticks_off() if drawing speed is a problem.
    ") nil [54408 54637])
            ("minorticks_off" function (:documentation "
    Remove minor ticks from the current plot.
    ") nil [54639 54750])
            ("rgrids" function
               (:documentation "
    Get or set the radial gridlines on a polar plot.

    call signatures::

      lines, labels = rgrids()
      lines, labels = rgrids(radii, labels=None, angle=22.5, **kwargs)

    When called with no arguments, :func:`rgrid` simply returns the
    tuple (*lines*, *labels*), where *lines* is an array of radial
    gridlines (:class:`~matplotlib.lines.Line2D` instances) and
    *labels* is an array of tick labels
    (:class:`~matplotlib.text.Text` instances). When called with
    arguments, the labels will appear at the specified radial
    distances and angles.

    *labels*, if not *None*, is a len(*radii*) list of strings of the
    labels to use at each angle.

    If *labels* is None, the rformatter will be used

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0), ('Tom', 'Dick', 'Harry' )

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [54763 54768])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [54770 54778]))                  )
                nil [54752 56198])
            ("thetagrids" function
               (:documentation "
    Get or set the theta locations of the gridlines in a polar plot.

    If no arguments are passed, return a tuple (*lines*, *labels*)
    where *lines* is an array of radial gridlines
    (:class:`~matplotlib.lines.Line2D` instances) and *labels* is an
    array of tick labels (:class:`~matplotlib.text.Text` instances)::

      lines, labels = thetagrids()

    Otherwise the syntax is::

      lines, labels = thetagrids(angles, labels=None, fmt='%d', frac = 1.1)

    set the angles at which to place the theta grids (these gridlines
    are equal along the theta dimension).

    *angles* is in degrees.

    *labels*, if not *None*, is a len(angles) list of strings of the
    labels to use at each angle.

    If *labels* is *None*, the labels will be ``fmt%angle``.

    *frac* is the fraction of the polar axes radius at which to place
    the label (1 is the edge). e.g., 1.05 is outside the axes and 0.95
    is inside the axes.

    Return value is a list of tuples (*lines*, *labels*):

      - *lines* are :class:`~matplotlib.lines.Line2D` instances

      - *labels* are :class:`~matplotlib.text.Text` instances.

    Note that on input, the *labels* argument is a list of strings,
    and on output it is a list of :class:`~matplotlib.text.Text`
    instances.

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90), ('NE', 'NW', 'SW','SE') )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [56215 56220])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [56222 56230]))                  )
                nil [56200 58229])
            ("plotting" function nil nil [58252 58277])
            ("get_plot_commands" function (:documentation "
    Get a sorted list of all of the plotting commands.
    ") nil [58279 59187])
            ("" code nil nil [59200 59207])
            ("colors" function (:documentation "
    This is a do-nothing function to provide you with help on how
    matplotlib handles colors.

    Commands which take color arguments can use several formats to
    specify the colors.  For the basic built-in colors, you can use a
    single letter

      =====   =======
      Alias   Color
      =====   =======
      'b'     blue
      'g'     green
      'r'     red
      'c'     cyan
      'm'     magenta
      'y'     yellow
      'k'     black
      'w'     white
      =====   =======

    For a greater range of colors, you have two options.  You can
    specify the color using an html hex string, as in::

      color = '#eeefff'

    or you can pass an R,G,B tuple, where each of R,G,B are in the
    range [0,1].

    You can also use any legal html name for a color, for example::

      color = 'red'
      color = 'burlywood'
      color = 'chartreuse'

    The example below creates a subplot with a dark
    slate gray background::

       subplot(111, facecolor=(0.1843, 0.3098, 0.3098))

    Here is an example that creates a pale turquoise title::

      title('Is this the best color?', color='#afeeee')

    ") nil [59208 60380])
            ("colormaps" function (:documentation "
    Matplotlib provides a number of colormaps, and others can be added using
    :func:`~matplotlib.cm.register_cmap`.  This function documents the built-in
    colormaps, and will also return a list of all registered colormaps if called.

    You can set the colormap for an image, pcolor, scatter, etc,
    using a keyword argument::

      imshow(X, cmap=cm.hot)

    or using the :func:`set_cmap` function::

      imshow(X)
      pyplot.set_cmap('hot')
      pyplot.set_cmap('jet')

    In interactive mode, :func:`set_cmap` will update the colormap post-hoc,
    allowing you to see which one works best for your data.

    All built-in colormaps can be reversed by appending ``_r``: For instance,
    ``gray_r`` is the reverse of ``gray``.

    There are several common color schemes used in visualization:

    Sequential schemes
      for unipolar data that progresses from low to high
    Diverging schemes
      for bipolar data that emphasizes positive or negative deviations from a
      central value
    Cyclic schemes
      meant for plotting values that wrap around at the
      endpoints, such as phase angle, wind direction, or time of day
    Qualitative schemes
      for nominal data that has no inherent ordering, where color is used
      only to distinguish categories

    Matplotlib ships with 4 perceptually uniform color maps which are
    the recommended color maps for sequential data:

      =========   ===================================================
      Colormap    Description
      =========   ===================================================
      inferno     perceptually uniform shades of black-red-yellow
      magma       perceptually uniform shades of black-red-white
      plasma      perceptually uniform shades of blue-red-yellow
      viridis     perceptually uniform shades of blue-green-yellow
      =========   ===================================================

    The following colormaps are based on the `ColorBrewer
    <http://colorbrewer2.org>`_ color specifications and designs developed by
    Cynthia Brewer:

    ColorBrewer Diverging (luminance is highest at the midpoint, and
    decreases towards differently-colored endpoints):

      ========  ===================================
      Colormap  Description
      ========  ===================================
      BrBG      brown, white, blue-green
      PiYG      pink, white, yellow-green
      PRGn      purple, white, green
      PuOr      orange, white, purple
      RdBu      red, white, blue
      RdGy      red, white, gray
      RdYlBu    red, yellow, blue
      RdYlGn    red, yellow, green
      Spectral  red, orange, yellow, green, blue
      ========  ===================================

    ColorBrewer Sequential (luminance decreases monotonically):

      ========  ====================================
      Colormap  Description
      ========  ====================================
      Blues     white to dark blue
      BuGn      white, light blue, dark green
      BuPu      white, light blue, dark purple
      GnBu      white, light green, dark blue
      Greens    white to dark green
      Greys     white to black (not linear)
      Oranges   white, orange, dark brown
      OrRd      white, orange, dark red
      PuBu      white, light purple, dark blue
      PuBuGn    white, light purple, dark green
      PuRd      white, light purple, dark red
      Purples   white to dark purple
      RdPu      white, pink, dark purple
      Reds      white to dark red
      YlGn      light yellow, dark green
      YlGnBu    light yellow, light green, dark blue
      YlOrBr    light yellow, orange, dark brown
      YlOrRd    light yellow, orange, dark red
      ========  ====================================

    ColorBrewer Qualitative:

    (For plotting nominal data, :class:`ListedColormap` is used,
    not :class:`LinearSegmentedColormap`.  Different sets of colors are
    recommended for different numbers of categories.)

    * Accent
    * Dark2
    * Paired
    * Pastel1
    * Pastel2
    * Set1
    * Set2
    * Set3

    A set of colormaps derived from those of the same name provided
    with Matlab are also included:

      =========   =======================================================
      Colormap    Description
      =========   =======================================================
      autumn      sequential linearly-increasing shades of red-orange-yellow
      bone        sequential increasing black-white color map with
                  a tinge of blue, to emulate X-ray film
      cool        linearly-decreasing shades of cyan-magenta
      copper      sequential increasing shades of black-copper
      flag        repetitive red-white-blue-black pattern (not cyclic at
                  endpoints)
      gray        sequential linearly-increasing black-to-white
                  grayscale
      hot         sequential black-red-yellow-white, to emulate blackbody
                  radiation from an object at increasing temperatures
      hsv         cyclic red-yellow-green-cyan-blue-magenta-red, formed
                  by changing the hue component in the HSV color space
      jet         a spectral map with dark endpoints, blue-cyan-yellow-red;
                  based on a fluid-jet simulation by NCSA [#]_
      pink        sequential increasing pastel black-pink-white, meant
                  for sepia tone colorization of photographs
      prism       repetitive red-yellow-green-blue-purple-...-green pattern
                  (not cyclic at endpoints)
      spring      linearly-increasing shades of magenta-yellow
      summer      sequential linearly-increasing shades of green-yellow
      winter      linearly-increasing shades of blue-green
      =========   =======================================================

    A set of palettes from the `Yorick scientific visualisation
    package <https://dhmunro.github.io/yorick-doc/>`_, an evolution of
    the GIST package, both by David H. Munro are included:

      ============  =======================================================
      Colormap      Description
      ============  =======================================================
      gist_earth    mapmaker's colors from dark blue deep ocean to green
                    lowlands to brown highlands to white mountains
      gist_heat     sequential increasing black-red-orange-white, to emulate
                    blackbody radiation from an iron bar as it grows hotter
      gist_ncar     pseudo-spectral black-blue-green-yellow-red-purple-white
                    colormap from National Center for Atmospheric
                    Research [#]_
      gist_rainbow  runs through the colors in spectral order from red to
                    violet at full saturation (like *hsv* but not cyclic)
      gist_stern    \"Stern special\" color table from Interactive Data
                    Language software
      ============  =======================================================


    Other miscellaneous schemes:

      ============= =======================================================
      Colormap      Description
      ============= =======================================================
      afmhot        sequential black-orange-yellow-white blackbody
                    spectrum, commonly used in atomic force microscopy
      brg           blue-red-green
      bwr           diverging blue-white-red
      coolwarm      diverging blue-gray-red, meant to avoid issues with 3D
                    shading, color blindness, and ordering of colors [#]_
      CMRmap        \"Default colormaps on color images often reproduce to
                    confusing grayscale images. The proposed colormap
                    maintains an aesthetically pleasing color image that
                    automatically reproduces to a monotonic grayscale with
                    discrete, quantifiable saturation levels.\" [#]_
      cubehelix     Unlike most other color schemes cubehelix was designed
                    by D.A. Green to be monotonically increasing in terms
                    of perceived brightness. Also, when printed on a black
                    and white postscript printer, the scheme results in a
                    greyscale with monotonically increasing brightness.
                    This color scheme is named cubehelix because the r,g,b
                    values produced can be visualised as a squashed helix
                    around the diagonal in the r,g,b color cube.
      gnuplot       gnuplot's traditional pm3d scheme
                    (black-blue-red-yellow)
      gnuplot2      sequential color printable as gray
                    (black-blue-violet-yellow-white)
      ocean         green-blue-white
      rainbow       spectral purple-blue-green-yellow-orange-red colormap
                    with diverging luminance
      seismic       diverging blue-white-red
      nipy_spectral black-purple-blue-green-yellow-red-white spectrum,
                    originally from the Neuroimaging in Python project
      terrain       mapmaker's colors, blue-green-yellow-brown-white,
                    originally from IGOR Pro
      ============= =======================================================

    The following colormaps are redundant and may be removed in future
    versions.  It's recommended to use the names in the descriptions
    instead, which produce identical output:

      =========  =======================================================
      Colormap   Description
      =========  =======================================================
      gist_gray  identical to *gray*
      gist_yarg  identical to *gray_r*
      binary     identical to *gray_r*
      spectral   identical to *nipy_spectral* [#]_
      =========  =======================================================

    .. rubric:: Footnotes

    .. [#] Rainbow colormaps, ``jet`` in particular, are considered a poor
      choice for scientific visualization by many researchers: `Rainbow Color
      Map (Still) Considered Harmful
      <http://ieeexplore.ieee.org/document/4118486/?arnumber=4118486>`_

    .. [#] Resembles \"BkBlAqGrYeOrReViWh200\" from NCAR Command
      Language. See `Color Table Gallery
      <https://www.ncl.ucar.edu/Document/Graphics/color_table_gallery.shtml>`_

    .. [#] See `Diverging Color Maps for Scientific Visualization
      <http://www.kennethmoreland.com/color-maps/>`_ by Kenneth Moreland.

    .. [#] See `A Color Map for Effective Black-and-White Rendering of
      Color-Scale Images
      <https://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m>`_
      by Carey Rappaport

    .. [#] Changed to distinguish from ColorBrewer's *Spectral* map.
      :func:`spectral` still works, but
      ``set_cmap('nipy_spectral')`` is recommended for clarity.


    ") nil [60382 71319])
            ("_setup_pyplot_info_docstrings" function (:documentation "
    Generates the plotting and docstring.

    These must be done after the entire module is imported, so it is
    called from the end of this module, which is generated by
    boilerplate.py.
    ") nil [71321 72881])
            ("colorbar" function (:arguments 
              ( ("mappable" variable nil (reparse-symbol function_parameters) [72961 72969])
                ("cax" variable nil (reparse-symbol function_parameters) [72976 72979])
                ("ax" variable nil (reparse-symbol function_parameters) [72986 72988])
                ("kw" variable nil (reparse-symbol function_parameters) [72995 72999]))              ) nil [72948 73471])
            ("colorbar" variable nil nil [73471 73522])
            ("clim" function
               (:documentation "
    Set the color limits of the current image.

    To apply clim to all axes images do::

      clim(0, 0.5)

    If either *vmin* or *vmax* is None, the image min/max respectively
    will be used for color scaling.

    If you want to set the clim of multiple images,
    use, for example::

      for im in gca().get_images():
          im.set_clim(0, 0.05)

    "
                :arguments 
                  ( ("vmin" variable nil (reparse-symbol function_parameters) [73534 73538])
                    ("vmax" variable nil (reparse-symbol function_parameters) [73545 73549]))                  )
                nil [73525 74079])
            ("set_cmap" function
               (:documentation "
    Set the default colormap.  Applies to the current image if any.
    See help(colormaps) for more information.

    *cmap* must be a :class:`~matplotlib.colors.Colormap` instance, or
    the name of a registered colormap.

    See :func:`matplotlib.cm.register_cmap` and
    :func:`matplotlib.cm.get_cmap`.
    "
                :arguments 
                  ( ("cmap" variable nil (reparse-symbol function_parameters) [74094 74098]))                  )
                nil [74081 74554])
            ("" code nil nil [74579 74588])
            ("imread" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [74600 74605])
                ("kwargs" variable nil (reparse-symbol function_parameters) [74607 74615]))              ) nil [74589 74654])
            ("" code nil nil [74678 74687])
            ("imsave" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [74699 74704])
                ("kwargs" variable nil (reparse-symbol function_parameters) [74706 74714]))              ) nil [74688 74753])
            ("matshow" function
               (:documentation "
    Display an array as a matrix in a new figure window.

    The origin is set at the upper left hand corner and rows (first
    dimension of the array) are displayed horizontally.  The aspect
    ratio of the figure window is that of the array, unless this would
    make an excessively short or narrow figure.

    Tick labels for the xaxis are placed on top.

    With the exception of *fignum*, keyword arguments are passed to
    :func:`~matplotlib.pyplot.imshow`.  You may set the *origin*
    kwarg to \"lower\" if you want the first row in the array to be
    at the bottom instead of the top.


    *fignum*: [ None | integer | False ]
      By default, :func:`matshow` creates a new figure window with
      automatic numbering.  If *fignum* is given as an integer, the
      created figure will use this figure number.  Because of how
      :func:`matshow` tries to set the figure aspect ratio to be the
      one of the array, if you provide the number of an already
      existing figure, strange things may happen.

      If *fignum* is *False* or 0, a new figure window will **NOT** be created.
    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [74767 74768])
                    ("fignum" variable nil (reparse-symbol function_parameters) [74770 74776])
                    ("kw" variable nil (reparse-symbol function_parameters) [74783 74787]))                  )
                nil [74755 76254])
            ("polar" function
               (:documentation "
    Make a polar plot.

    call signature::

      polar(theta, r, **kwargs)

    Multiple *theta*, *r* arguments are supported, with format
    strings, as in :func:`~matplotlib.pyplot.plot`.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [76266 76271])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [76273 76281]))                  )
                nil [76256 76844])
            ("plotfile" function
               (:documentation "
    Plot the data in a file.

    *cols* is a sequence of column identifiers to plot.  An identifier
    is either an int or a string.  If it is an int, it indicates the
    column number.  If it is a string, it indicates the column header.
    matplotlib will make column headers lower case, replace spaces with
    underscores, and remove all illegal characters; so ``'Adj Close*'``
    will have name ``'adj_close'``.

    - If len(*cols*) == 1, only that column will be plotted on the *y* axis.

    - If len(*cols*) > 1, the first element will be an identifier for
      data for the *x* axis and the remaining elements will be the
      column indexes for multiple subplots if *subplots* is *True*
      (the default), or for lines in a single subplot if *subplots*
      is *False*.

    *plotfuncs*, if not *None*, is a dictionary mapping identifier to
    an :class:`~matplotlib.axes.Axes` plotting function as a string.
    Default is 'plot', other choices are 'semilogy', 'fill', 'bar',
    etc.  You must use the same type of identifier in the *cols*
    vector as you use in the *plotfuncs* dictionary, e.g., integer
    column numbers in both or column names in both. If *subplots*
    is *False*, then including any function such as 'semilogy'
    that changes the axis scaling will set the scaling for all
    columns.

    *comments*, *skiprows*, *checkrows*, *delimiter*, and *names*
    are all passed on to :func:`matplotlib.pylab.csv2rec` to
    load the data into a record array.

    If *newfig* is *True*, the plot always will be made in a new figure;
    if *False*, it will be made in the current figure if one exists,
    else in a new figure.

    kwargs are passed on to plotting functions.

    Example usage::

      # plot the 2nd and 4th column against the 1st in two subplots
      plotfile(fname, (0,1,3))

      # plot using column names; specify an alternate plot type for volume
      plotfile(fname, ('date', 'volume', 'adj_close'),
                                    plotfuncs={'volume': 'semilogy'})

    Note: plotfile is intended as a convenience for quickly plotting
    data from flat files; it is not intended as an alternative
    interface to general plotting with pyplot or matplotlib.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [76859 76864])
                    ("cols" variable nil (reparse-symbol function_parameters) [76866 76870])
                    ("plotfuncs" variable nil (reparse-symbol function_parameters) [76877 76886])
                    ("comments" variable nil (reparse-symbol function_parameters) [76906 76914])
                    ("skiprows" variable nil (reparse-symbol function_parameters) [76920 76928])
                    ("checkrows" variable nil (reparse-symbol function_parameters) [76932 76941])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [76945 76954])
                    ("names" variable nil (reparse-symbol function_parameters) [76973 76978])
                    ("subplots" variable nil (reparse-symbol function_parameters) [76985 76993])
                    ("newfig" variable nil (reparse-symbol function_parameters) [77000 77006])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [77013 77021]))                  )
                nil [76846 81255])
            ("_autogen_docstring" function
               (:documentation "Autogenerated wrappers will get their docstring from a base function
    with an addendum."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [81280 81284]))                  )
                nil [81257 81601])
            ("" code nil nil [81719 81729])
            ("spy" function (:arguments 
              ( ("Z" variable nil (reparse-symbol function_parameters) [81738 81739])
                ("precision" variable nil (reparse-symbol function_parameters) [81741 81750])
                ("marker" variable nil (reparse-symbol function_parameters) [81754 81760])
                ("markersize" variable nil (reparse-symbol function_parameters) [81767 81777])
                ("aspect" variable nil (reparse-symbol function_parameters) [81784 81790])
                ("kwargs" variable nil (reparse-symbol function_parameters) [81800 81808]))              ) nil [81730 82374])
            ("install_repl_displayhook" code nil nil [82672 82698])
            ("" code nil nil [82873 82885])
            ("acorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [82896 82897])
                ("hold" variable nil (reparse-symbol function_parameters) [82899 82903])
                ("data" variable nil (reparse-symbol function_parameters) [82910 82914])
                ("kwargs" variable nil (reparse-symbol function_parameters) [82921 82929]))              ) nil [82886 83392])
            ("" code nil nil [83485 83506])
            ("angle_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [83526 83527])
                ("Fs" variable nil (reparse-symbol function_parameters) [83529 83531])
                ("Fc" variable nil (reparse-symbol function_parameters) [83538 83540])
                ("window" variable nil (reparse-symbol function_parameters) [83547 83553])
                ("pad_to" variable nil (reparse-symbol function_parameters) [83560 83566])
                ("sides" variable nil (reparse-symbol function_parameters) [83573 83578])
                ("hold" variable nil (reparse-symbol function_parameters) [83604 83608])
                ("data" variable nil (reparse-symbol function_parameters) [83615 83619])
                ("kwargs" variable nil (reparse-symbol function_parameters) [83626 83634]))              ) nil [83507 84195])
            ("" code nil nil [84288 84300])
            ("arrow" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [84311 84312])
                ("y" variable nil (reparse-symbol function_parameters) [84314 84315])
                ("dx" variable nil (reparse-symbol function_parameters) [84317 84319])
                ("dy" variable nil (reparse-symbol function_parameters) [84321 84323])
                ("hold" variable nil (reparse-symbol function_parameters) [84325 84329])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84336 84344]))              ) nil [84301 84807])
            ("" code nil nil [84900 84914])
            ("axhline" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [84927 84928])
                ("xmin" variable nil (reparse-symbol function_parameters) [84932 84936])
                ("xmax" variable nil (reparse-symbol function_parameters) [84940 84944])
                ("hold" variable nil (reparse-symbol function_parameters) [84948 84952])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84959 84967]))              ) nil [84915 85445])
            ("" code nil nil [85538 85552])
            ("axhspan" function (:arguments 
              ( ("ymin" variable nil (reparse-symbol function_parameters) [85565 85569])
                ("ymax" variable nil (reparse-symbol function_parameters) [85571 85575])
                ("xmin" variable nil (reparse-symbol function_parameters) [85577 85581])
                ("xmax" variable nil (reparse-symbol function_parameters) [85585 85589])
                ("hold" variable nil (reparse-symbol function_parameters) [85593 85597])
                ("kwargs" variable nil (reparse-symbol function_parameters) [85604 85612]))              ) nil [85553 86097])
            ("" code nil nil [86190 86204])
            ("axvline" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [86217 86218])
                ("ymin" variable nil (reparse-symbol function_parameters) [86222 86226])
                ("ymax" variable nil (reparse-symbol function_parameters) [86230 86234])
                ("hold" variable nil (reparse-symbol function_parameters) [86238 86242])
                ("kwargs" variable nil (reparse-symbol function_parameters) [86249 86257]))              ) nil [86205 86735])
            ("" code nil nil [86828 86842])
            ("axvspan" function (:arguments 
              ( ("xmin" variable nil (reparse-symbol function_parameters) [86855 86859])
                ("xmax" variable nil (reparse-symbol function_parameters) [86861 86865])
                ("ymin" variable nil (reparse-symbol function_parameters) [86867 86871])
                ("ymax" variable nil (reparse-symbol function_parameters) [86875 86879])
                ("hold" variable nil (reparse-symbol function_parameters) [86883 86887])
                ("kwargs" variable nil (reparse-symbol function_parameters) [86894 86902]))              ) nil [86843 87387])
            ("" code nil nil [87480 87490])
            ("bar" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [87499 87504])
                ("kwargs" variable nil (reparse-symbol function_parameters) [87506 87514]))              ) nil [87491 88003])
            ("" code nil nil [88096 88107])
            ("barh" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [88117 88122])
                ("kwargs" variable nil (reparse-symbol function_parameters) [88124 88132]))              ) nil [88108 88622])
            ("" code nil nil [88715 88733])
            ("broken_barh" function (:arguments 
              ( ("xranges" variable nil (reparse-symbol function_parameters) [88750 88757])
                ("yrange" variable nil (reparse-symbol function_parameters) [88759 88765])
                ("hold" variable nil (reparse-symbol function_parameters) [88767 88771])
                ("data" variable nil (reparse-symbol function_parameters) [88778 88782])
                ("kwargs" variable nil (reparse-symbol function_parameters) [88789 88797]))              ) nil [88734 89280])
            ("" code nil nil [89373 89387])
            ("boxplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [89400 89401])
                ("notch" variable nil (reparse-symbol function_parameters) [89403 89408])
                ("sym" variable nil (reparse-symbol function_parameters) [89415 89418])
                ("vert" variable nil (reparse-symbol function_parameters) [89425 89429])
                ("whis" variable nil (reparse-symbol function_parameters) [89436 89440])
                ("positions" variable nil (reparse-symbol function_parameters) [89447 89456])
                ("widths" variable nil (reparse-symbol function_parameters) [89475 89481])
                ("patch_artist" variable nil (reparse-symbol function_parameters) [89488 89500])
                ("bootstrap" variable nil (reparse-symbol function_parameters) [89507 89516])
                ("usermedians" variable nil (reparse-symbol function_parameters) [89523 89534])
                ("conf_intervals" variable nil (reparse-symbol function_parameters) [89553 89567])
                ("meanline" variable nil (reparse-symbol function_parameters) [89574 89582])
                ("showmeans" variable nil (reparse-symbol function_parameters) [89589 89598])
                ("showcaps" variable nil (reparse-symbol function_parameters) [89605 89613])
                ("showbox" variable nil (reparse-symbol function_parameters) [89632 89639])
                ("showfliers" variable nil (reparse-symbol function_parameters) [89646 89656])
                ("boxprops" variable nil (reparse-symbol function_parameters) [89663 89671])
                ("labels" variable nil (reparse-symbol function_parameters) [89678 89684])
                ("flierprops" variable nil (reparse-symbol function_parameters) [89703 89713])
                ("medianprops" variable nil (reparse-symbol function_parameters) [89720 89731])
                ("meanprops" variable nil (reparse-symbol function_parameters) [89738 89747])
                ("capprops" variable nil (reparse-symbol function_parameters) [89754 89762])
                ("whiskerprops" variable nil (reparse-symbol function_parameters) [89781 89793])
                ("manage_xticks" variable nil (reparse-symbol function_parameters) [89800 89813])
                ("autorange" variable nil (reparse-symbol function_parameters) [89820 89829])
                ("zorder" variable nil (reparse-symbol function_parameters) [89837 89843])
                ("hold" variable nil (reparse-symbol function_parameters) [89862 89866])
                ("data" variable nil (reparse-symbol function_parameters) [89873 89877]))              ) nil [89388 91134])
            ("" code nil nil [91227 91240])
            ("cohere" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [91252 91253])
                ("y" variable nil (reparse-symbol function_parameters) [91255 91256])
                ("NFFT" variable nil (reparse-symbol function_parameters) [91258 91262])
                ("Fs" variable nil (reparse-symbol function_parameters) [91268 91270])
                ("Fc" variable nil (reparse-symbol function_parameters) [91274 91276])
                ("detrend" variable nil (reparse-symbol function_parameters) [91280 91287])
                ("window" variable nil (reparse-symbol function_parameters) [91318 91324])
                ("noverlap" variable nil (reparse-symbol function_parameters) [91346 91354])
                ("pad_to" variable nil (reparse-symbol function_parameters) [91358 91364])
                ("sides" variable nil (reparse-symbol function_parameters) [91371 91376])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [91399 91412])
                ("hold" variable nil (reparse-symbol function_parameters) [91419 91423])
                ("data" variable nil (reparse-symbol function_parameters) [91430 91434])
                ("kwargs" variable nil (reparse-symbol function_parameters) [91441 91449]))              ) nil [91241 92121])
            ("" code nil nil [92214 92227])
            ("clabel" function (:arguments 
              ( ("CS" variable nil (reparse-symbol function_parameters) [92239 92241])
                ("args" variable nil (reparse-symbol function_parameters) [92243 92248])
                ("kwargs" variable nil (reparse-symbol function_parameters) [92250 92258]))              ) nil [92228 92754])
            ("" code nil nil [92847 92861])
            ("contour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [92874 92879])
                ("kwargs" variable nil (reparse-symbol function_parameters) [92881 92889]))              ) nil [92862 93417])
            ("" code nil nil [93510 93525])
            ("contourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [93539 93544])
                ("kwargs" variable nil (reparse-symbol function_parameters) [93546 93554]))              ) nil [93526 94083])
            ("" code nil nil [94176 94186])
            ("csd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [94195 94196])
                ("y" variable nil (reparse-symbol function_parameters) [94198 94199])
                ("NFFT" variable nil (reparse-symbol function_parameters) [94201 94205])
                ("Fs" variable nil (reparse-symbol function_parameters) [94212 94214])
                ("Fc" variable nil (reparse-symbol function_parameters) [94221 94223])
                ("detrend" variable nil (reparse-symbol function_parameters) [94230 94237])
                ("window" variable nil (reparse-symbol function_parameters) [94244 94250])
                ("noverlap" variable nil (reparse-symbol function_parameters) [94265 94273])
                ("pad_to" variable nil (reparse-symbol function_parameters) [94280 94286])
                ("sides" variable nil (reparse-symbol function_parameters) [94293 94298])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [94305 94318])
                ("return_line" variable nil (reparse-symbol function_parameters) [94333 94344])
                ("hold" variable nil (reparse-symbol function_parameters) [94351 94355])
                ("data" variable nil (reparse-symbol function_parameters) [94362 94366])
                ("kwargs" variable nil (reparse-symbol function_parameters) [94373 94381]))              ) nil [94187 95066])
            ("" code nil nil [95159 95174])
            ("errorbar" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [95188 95189])
                ("y" variable nil (reparse-symbol function_parameters) [95191 95192])
                ("yerr" variable nil (reparse-symbol function_parameters) [95194 95198])
                ("xerr" variable nil (reparse-symbol function_parameters) [95205 95209])
                ("fmt" variable nil (reparse-symbol function_parameters) [95216 95219])
                ("ecolor" variable nil (reparse-symbol function_parameters) [95224 95230])
                ("elinewidth" variable nil (reparse-symbol function_parameters) [95237 95247])
                ("capsize" variable nil (reparse-symbol function_parameters) [95267 95274])
                ("barsabove" variable nil (reparse-symbol function_parameters) [95281 95290])
                ("lolims" variable nil (reparse-symbol function_parameters) [95298 95304])
                ("uplims" variable nil (reparse-symbol function_parameters) [95312 95318])
                ("xlolims" variable nil (reparse-symbol function_parameters) [95339 95346])
                ("xuplims" variable nil (reparse-symbol function_parameters) [95354 95361])
                ("errorevery" variable nil (reparse-symbol function_parameters) [95369 95379])
                ("capthick" variable nil (reparse-symbol function_parameters) [95383 95391])
                ("hold" variable nil (reparse-symbol function_parameters) [95411 95415])
                ("data" variable nil (reparse-symbol function_parameters) [95422 95426])
                ("kwargs" variable nil (reparse-symbol function_parameters) [95433 95441]))              ) nil [95175 96253])
            ("" code nil nil [96346 96362])
            ("eventplot" function (:arguments 
              ( ("positions" variable nil (reparse-symbol function_parameters) [96377 96386])
                ("orientation" variable nil (reparse-symbol function_parameters) [96388 96399])
                ("lineoffsets" variable nil (reparse-symbol function_parameters) [96414 96425])
                ("linelengths" variable nil (reparse-symbol function_parameters) [96429 96440])
                ("linewidths" variable nil (reparse-symbol function_parameters) [96458 96468])
                ("colors" variable nil (reparse-symbol function_parameters) [96475 96481])
                ("linestyles" variable nil (reparse-symbol function_parameters) [96488 96498])
                ("hold" variable nil (reparse-symbol function_parameters) [96508 96512])
                ("data" variable nil (reparse-symbol function_parameters) [96533 96537])
                ("kwargs" variable nil (reparse-symbol function_parameters) [96544 96552]))              ) nil [96363 97244])
            ("" code nil nil [97337 97348])
            ("fill" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [97358 97363])
                ("kwargs" variable nil (reparse-symbol function_parameters) [97365 97373]))              ) nil [97349 97863])
            ("" code nil nil [97956 97975])
            ("fill_between" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [97993 97994])
                ("y1" variable nil (reparse-symbol function_parameters) [97996 97998])
                ("y2" variable nil (reparse-symbol function_parameters) [98000 98002])
                ("where" variable nil (reparse-symbol function_parameters) [98006 98011])
                ("interpolate" variable nil (reparse-symbol function_parameters) [98018 98029])
                ("step" variable nil (reparse-symbol function_parameters) [98037 98041])
                ("hold" variable nil (reparse-symbol function_parameters) [98065 98069])
                ("data" variable nil (reparse-symbol function_parameters) [98076 98080])
                ("kwargs" variable nil (reparse-symbol function_parameters) [98087 98095]))              ) nil [97976 98685])
            ("" code nil nil [98778 98798])
            ("fill_betweenx" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [98817 98818])
                ("x1" variable nil (reparse-symbol function_parameters) [98820 98822])
                ("x2" variable nil (reparse-symbol function_parameters) [98824 98826])
                ("where" variable nil (reparse-symbol function_parameters) [98830 98835])
                ("step" variable nil (reparse-symbol function_parameters) [98842 98846])
                ("interpolate" variable nil (reparse-symbol function_parameters) [98853 98864])
                ("hold" variable nil (reparse-symbol function_parameters) [98890 98894])
                ("data" variable nil (reparse-symbol function_parameters) [98901 98905])
                ("kwargs" variable nil (reparse-symbol function_parameters) [98912 98920]))              ) nil [98799 99482])
            ("" code nil nil [99575 99588])
            ("hexbin" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [99600 99601])
                ("y" variable nil (reparse-symbol function_parameters) [99603 99604])
                ("C" variable nil (reparse-symbol function_parameters) [99606 99607])
                ("gridsize" variable nil (reparse-symbol function_parameters) [99614 99622])
                ("bins" variable nil (reparse-symbol function_parameters) [99628 99632])
                ("xscale" variable nil (reparse-symbol function_parameters) [99639 99645])
                ("yscale" variable nil (reparse-symbol function_parameters) [99667 99673])
                ("extent" variable nil (reparse-symbol function_parameters) [99684 99690])
                ("cmap" variable nil (reparse-symbol function_parameters) [99697 99701])
                ("norm" variable nil (reparse-symbol function_parameters) [99708 99712])
                ("vmin" variable nil (reparse-symbol function_parameters) [99719 99723])
                ("vmax" variable nil (reparse-symbol function_parameters) [99741 99745])
                ("alpha" variable nil (reparse-symbol function_parameters) [99752 99757])
                ("linewidths" variable nil (reparse-symbol function_parameters) [99764 99774])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [99781 99791])
                ("reduce_C_function" variable nil (reparse-symbol function_parameters) [99811 99828])
                ("mincnt" variable nil (reparse-symbol function_parameters) [99838 99844])
                ("marginals" variable nil (reparse-symbol function_parameters) [99851 99860])
                ("hold" variable nil (reparse-symbol function_parameters) [99868 99872])
                ("data" variable nil (reparse-symbol function_parameters) [99890 99894])
                ("kwargs" variable nil (reparse-symbol function_parameters) [99901 99909]))              ) nil [99589 100764])
            ("" code nil nil [100857 100868])
            ("hist" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [100878 100879])
                ("bins" variable nil (reparse-symbol function_parameters) [100881 100885])
                ("range" variable nil (reparse-symbol function_parameters) [100892 100897])
                ("density" variable nil (reparse-symbol function_parameters) [100904 100911])
                ("weights" variable nil (reparse-symbol function_parameters) [100918 100925])
                ("cumulative" variable nil (reparse-symbol function_parameters) [100932 100942])
                ("bottom" variable nil (reparse-symbol function_parameters) [100959 100965])
                ("histtype" variable nil (reparse-symbol function_parameters) [100972 100980])
                ("align" variable nil (reparse-symbol function_parameters) [100988 100993])
                ("orientation" variable nil (reparse-symbol function_parameters) [101001 101012])
                ("rwidth" variable nil (reparse-symbol function_parameters) [101034 101040])
                ("log" variable nil (reparse-symbol function_parameters) [101047 101050])
                ("color" variable nil (reparse-symbol function_parameters) [101058 101063])
                ("label" variable nil (reparse-symbol function_parameters) [101070 101075])
                ("stacked" variable nil (reparse-symbol function_parameters) [101082 101089])
                ("normed" variable nil (reparse-symbol function_parameters) [101106 101112])
                ("hold" variable nil (reparse-symbol function_parameters) [101119 101123])
                ("data" variable nil (reparse-symbol function_parameters) [101130 101134])
                ("kwargs" variable nil (reparse-symbol function_parameters) [101141 101149]))              ) nil [100869 101934])
            ("" code nil nil [102027 102040])
            ("hist2d" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [102052 102053])
                ("y" variable nil (reparse-symbol function_parameters) [102055 102056])
                ("bins" variable nil (reparse-symbol function_parameters) [102058 102062])
                ("range" variable nil (reparse-symbol function_parameters) [102067 102072])
                ("normed" variable nil (reparse-symbol function_parameters) [102079 102085])
                ("weights" variable nil (reparse-symbol function_parameters) [102093 102100])
                ("cmin" variable nil (reparse-symbol function_parameters) [102107 102111])
                ("cmax" variable nil (reparse-symbol function_parameters) [102129 102133])
                ("hold" variable nil (reparse-symbol function_parameters) [102140 102144])
                ("data" variable nil (reparse-symbol function_parameters) [102151 102155])
                ("kwargs" variable nil (reparse-symbol function_parameters) [102162 102170]))              ) nil [102041 102779])
            ("" code nil nil [102872 102885])
            ("hlines" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [102897 102898])
                ("xmin" variable nil (reparse-symbol function_parameters) [102900 102904])
                ("xmax" variable nil (reparse-symbol function_parameters) [102906 102910])
                ("colors" variable nil (reparse-symbol function_parameters) [102912 102918])
                ("linestyles" variable nil (reparse-symbol function_parameters) [102924 102934])
                ("label" variable nil (reparse-symbol function_parameters) [102944 102949])
                ("hold" variable nil (reparse-symbol function_parameters) [102954 102958])
                ("data" variable nil (reparse-symbol function_parameters) [102976 102980])
                ("kwargs" variable nil (reparse-symbol function_parameters) [102987 102995]))              ) nil [102886 103546])
            ("" code nil nil [103639 103652])
            ("imshow" function (:arguments 
              ( ("X" variable nil (reparse-symbol function_parameters) [103664 103665])
                ("cmap" variable nil (reparse-symbol function_parameters) [103667 103671])
                ("norm" variable nil (reparse-symbol function_parameters) [103678 103682])
                ("aspect" variable nil (reparse-symbol function_parameters) [103689 103695])
                ("interpolation" variable nil (reparse-symbol function_parameters) [103702 103715])
                ("alpha" variable nil (reparse-symbol function_parameters) [103722 103727])
                ("vmin" variable nil (reparse-symbol function_parameters) [103745 103749])
                ("vmax" variable nil (reparse-symbol function_parameters) [103756 103760])
                ("origin" variable nil (reparse-symbol function_parameters) [103767 103773])
                ("extent" variable nil (reparse-symbol function_parameters) [103780 103786])
                ("shape" variable nil (reparse-symbol function_parameters) [103793 103798])
                ("filternorm" variable nil (reparse-symbol function_parameters) [103816 103826])
                ("filterrad" variable nil (reparse-symbol function_parameters) [103830 103839])
                ("imlim" variable nil (reparse-symbol function_parameters) [103845 103850])
                ("resample" variable nil (reparse-symbol function_parameters) [103857 103865])
                ("url" variable nil (reparse-symbol function_parameters) [103872 103875])
                ("hold" variable nil (reparse-symbol function_parameters) [103893 103897])
                ("data" variable nil (reparse-symbol function_parameters) [103904 103908])
                ("kwargs" variable nil (reparse-symbol function_parameters) [103915 103923]))              ) nil [103653 104748])
            ("" code nil nil [104841 104854])
            ("loglog" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [104866 104871])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104873 104881]))              ) nil [104855 105373])
            ("" code nil nil [105466 105491])
            ("magnitude_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [105515 105516])
                ("Fs" variable nil (reparse-symbol function_parameters) [105518 105520])
                ("Fc" variable nil (reparse-symbol function_parameters) [105527 105529])
                ("window" variable nil (reparse-symbol function_parameters) [105536 105542])
                ("pad_to" variable nil (reparse-symbol function_parameters) [105549 105555])
                ("sides" variable nil (reparse-symbol function_parameters) [105585 105590])
                ("scale" variable nil (reparse-symbol function_parameters) [105597 105602])
                ("hold" variable nil (reparse-symbol function_parameters) [105609 105613])
                ("data" variable nil (reparse-symbol function_parameters) [105620 105624])
                ("kwargs" variable nil (reparse-symbol function_parameters) [105631 105639]))              ) nil [105492 106257])
            ("" code nil nil [106350 106363])
            ("pcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [106375 106380])
                ("kwargs" variable nil (reparse-symbol function_parameters) [106382 106390]))              ) nil [106364 106894])
            ("" code nil nil [106987 107004])
            ("pcolormesh" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [107020 107025])
                ("kwargs" variable nil (reparse-symbol function_parameters) [107027 107035]))              ) nil [107005 107543])
            ("" code nil nil [107636 107657])
            ("phase_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [107677 107678])
                ("Fs" variable nil (reparse-symbol function_parameters) [107680 107682])
                ("Fc" variable nil (reparse-symbol function_parameters) [107689 107691])
                ("window" variable nil (reparse-symbol function_parameters) [107698 107704])
                ("pad_to" variable nil (reparse-symbol function_parameters) [107711 107717])
                ("sides" variable nil (reparse-symbol function_parameters) [107724 107729])
                ("hold" variable nil (reparse-symbol function_parameters) [107755 107759])
                ("data" variable nil (reparse-symbol function_parameters) [107766 107770])
                ("kwargs" variable nil (reparse-symbol function_parameters) [107777 107785]))              ) nil [107658 108346])
            ("" code nil nil [108439 108449])
            ("pie" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [108458 108459])
                ("explode" variable nil (reparse-symbol function_parameters) [108461 108468])
                ("labels" variable nil (reparse-symbol function_parameters) [108475 108481])
                ("colors" variable nil (reparse-symbol function_parameters) [108488 108494])
                ("autopct" variable nil (reparse-symbol function_parameters) [108501 108508])
                ("pctdistance" variable nil (reparse-symbol function_parameters) [108523 108534])
                ("shadow" variable nil (reparse-symbol function_parameters) [108540 108546])
                ("labeldistance" variable nil (reparse-symbol function_parameters) [108554 108567])
                ("startangle" variable nil (reparse-symbol function_parameters) [108573 108583])
                ("radius" variable nil (reparse-symbol function_parameters) [108598 108604])
                ("counterclock" variable nil (reparse-symbol function_parameters) [108611 108623])
                ("wedgeprops" variable nil (reparse-symbol function_parameters) [108630 108640])
                ("textprops" variable nil (reparse-symbol function_parameters) [108647 108656])
                ("center" variable nil (reparse-symbol function_parameters) [108671 108677])
                ("frame" variable nil (reparse-symbol function_parameters) [108686 108691])
                ("rotatelabels" variable nil (reparse-symbol function_parameters) [108699 108711])
                ("hold" variable nil (reparse-symbol function_parameters) [108719 108723])
                ("data" variable nil (reparse-symbol function_parameters) [108730 108734]))              ) nil [108450 109592])
            ("" code nil nil [109685 109696])
            ("plot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [109706 109711])
                ("kwargs" variable nil (reparse-symbol function_parameters) [109713 109721]))              ) nil [109697 110211])
            ("" code nil nil [110304 110320])
            ("plot_date" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [110335 110336])
                ("y" variable nil (reparse-symbol function_parameters) [110338 110339])
                ("fmt" variable nil (reparse-symbol function_parameters) [110341 110344])
                ("tz" variable nil (reparse-symbol function_parameters) [110350 110352])
                ("xdate" variable nil (reparse-symbol function_parameters) [110359 110364])
                ("ydate" variable nil (reparse-symbol function_parameters) [110371 110376])
                ("hold" variable nil (reparse-symbol function_parameters) [110384 110388])
                ("data" variable nil (reparse-symbol function_parameters) [110409 110413])
                ("kwargs" variable nil (reparse-symbol function_parameters) [110420 110428]))              ) nil [110321 110967])
            ("" code nil nil [111060 111070])
            ("psd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [111079 111080])
                ("NFFT" variable nil (reparse-symbol function_parameters) [111082 111086])
                ("Fs" variable nil (reparse-symbol function_parameters) [111093 111095])
                ("Fc" variable nil (reparse-symbol function_parameters) [111102 111104])
                ("detrend" variable nil (reparse-symbol function_parameters) [111111 111118])
                ("window" variable nil (reparse-symbol function_parameters) [111125 111131])
                ("noverlap" variable nil (reparse-symbol function_parameters) [111146 111154])
                ("pad_to" variable nil (reparse-symbol function_parameters) [111161 111167])
                ("sides" variable nil (reparse-symbol function_parameters) [111174 111179])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [111186 111199])
                ("return_line" variable nil (reparse-symbol function_parameters) [111214 111225])
                ("hold" variable nil (reparse-symbol function_parameters) [111232 111236])
                ("data" variable nil (reparse-symbol function_parameters) [111243 111247])
                ("kwargs" variable nil (reparse-symbol function_parameters) [111254 111262]))              ) nil [111071 111944])
            ("" code nil nil [112037 112050])
            ("quiver" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [112062 112067])
                ("kw" variable nil (reparse-symbol function_parameters) [112069 112073]))              ) nil [112051 112569])
            ("" code nil nil [112662 112678])
            ("quiverkey" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [112693 112698])
                ("kw" variable nil (reparse-symbol function_parameters) [112700 112704]))              ) nil [112679 113191])
            ("" code nil nil [113284 113298])
            ("scatter" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [113311 113312])
                ("y" variable nil (reparse-symbol function_parameters) [113314 113315])
                ("s" variable nil (reparse-symbol function_parameters) [113317 113318])
                ("c" variable nil (reparse-symbol function_parameters) [113325 113326])
                ("marker" variable nil (reparse-symbol function_parameters) [113333 113339])
                ("cmap" variable nil (reparse-symbol function_parameters) [113346 113350])
                ("norm" variable nil (reparse-symbol function_parameters) [113357 113361])
                ("vmin" variable nil (reparse-symbol function_parameters) [113368 113372])
                ("vmax" variable nil (reparse-symbol function_parameters) [113391 113395])
                ("alpha" variable nil (reparse-symbol function_parameters) [113402 113407])
                ("linewidths" variable nil (reparse-symbol function_parameters) [113414 113424])
                ("verts" variable nil (reparse-symbol function_parameters) [113431 113436])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [113443 113453])
                ("hold" variable nil (reparse-symbol function_parameters) [113472 113476])
                ("data" variable nil (reparse-symbol function_parameters) [113483 113487])
                ("kwargs" variable nil (reparse-symbol function_parameters) [113494 113502]))              ) nil [113299 114198])
            ("" code nil nil [114291 114306])
            ("semilogx" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [114320 114325])
                ("kwargs" variable nil (reparse-symbol function_parameters) [114327 114335]))              ) nil [114307 114829])
            ("" code nil nil [114922 114937])
            ("semilogy" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [114951 114956])
                ("kwargs" variable nil (reparse-symbol function_parameters) [114958 114966]))              ) nil [114938 115460])
            ("" code nil nil [115553 115568])
            ("specgram" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [115582 115583])
                ("NFFT" variable nil (reparse-symbol function_parameters) [115585 115589])
                ("Fs" variable nil (reparse-symbol function_parameters) [115596 115598])
                ("Fc" variable nil (reparse-symbol function_parameters) [115605 115607])
                ("detrend" variable nil (reparse-symbol function_parameters) [115614 115621])
                ("window" variable nil (reparse-symbol function_parameters) [115628 115634])
                ("noverlap" variable nil (reparse-symbol function_parameters) [115654 115662])
                ("cmap" variable nil (reparse-symbol function_parameters) [115669 115673])
                ("xextent" variable nil (reparse-symbol function_parameters) [115680 115687])
                ("pad_to" variable nil (reparse-symbol function_parameters) [115694 115700])
                ("sides" variable nil (reparse-symbol function_parameters) [115707 115712])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [115732 115745])
                ("mode" variable nil (reparse-symbol function_parameters) [115752 115756])
                ("scale" variable nil (reparse-symbol function_parameters) [115763 115768])
                ("vmin" variable nil (reparse-symbol function_parameters) [115775 115779])
                ("vmax" variable nil (reparse-symbol function_parameters) [115786 115790])
                ("hold" variable nil (reparse-symbol function_parameters) [115810 115814])
                ("data" variable nil (reparse-symbol function_parameters) [115821 115825])
                ("kwargs" variable nil (reparse-symbol function_parameters) [115832 115840]))              ) nil [115569 116633])
            ("" code nil nil [116726 116742])
            ("stackplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [116757 116758])
                ("args" variable nil (reparse-symbol function_parameters) [116760 116765])
                ("kwargs" variable nil (reparse-symbol function_parameters) [116767 116775]))              ) nil [116743 117273])
            ("" code nil nil [117366 117377])
            ("stem" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [117387 117392])
                ("kwargs" variable nil (reparse-symbol function_parameters) [117394 117402]))              ) nil [117378 117892])
            ("" code nil nil [117985 117996])
            ("step" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [118006 118007])
                ("y" variable nil (reparse-symbol function_parameters) [118009 118010])
                ("args" variable nil (reparse-symbol function_parameters) [118012 118017])
                ("kwargs" variable nil (reparse-symbol function_parameters) [118019 118027]))              ) nil [117997 118523])
            ("" code nil nil [118616 118633])
            ("streamplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [118649 118650])
                ("y" variable nil (reparse-symbol function_parameters) [118652 118653])
                ("u" variable nil (reparse-symbol function_parameters) [118655 118656])
                ("v" variable nil (reparse-symbol function_parameters) [118658 118659])
                ("density" variable nil (reparse-symbol function_parameters) [118661 118668])
                ("linewidth" variable nil (reparse-symbol function_parameters) [118672 118681])
                ("color" variable nil (reparse-symbol function_parameters) [118688 118693])
                ("cmap" variable nil (reparse-symbol function_parameters) [118700 118704])
                ("norm" variable nil (reparse-symbol function_parameters) [118726 118730])
                ("arrowsize" variable nil (reparse-symbol function_parameters) [118737 118746])
                ("arrowstyle" variable nil (reparse-symbol function_parameters) [118750 118760])
                ("minlength" variable nil (reparse-symbol function_parameters) [118768 118777])
                ("transform" variable nil (reparse-symbol function_parameters) [118798 118807])
                ("zorder" variable nil (reparse-symbol function_parameters) [118814 118820])
                ("start_points" variable nil (reparse-symbol function_parameters) [118827 118839])
                ("maxlength" variable nil (reparse-symbol function_parameters) [118846 118855])
                ("integration_direction" variable nil (reparse-symbol function_parameters) [118876 118897])
                ("hold" variable nil (reparse-symbol function_parameters) [118906 118910])
                ("data" variable nil (reparse-symbol function_parameters) [118917 118921]))              ) nil [118634 119874])
            ("" code nil nil [119967 119984])
            ("tricontour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [120000 120005])
                ("kwargs" variable nil (reparse-symbol function_parameters) [120007 120015]))              ) nil [119985 120546])
            ("" code nil nil [120639 120657])
            ("tricontourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [120674 120679])
                ("kwargs" variable nil (reparse-symbol function_parameters) [120681 120689]))              ) nil [120658 121221])
            ("" code nil nil [121314 121330])
            ("tripcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [121345 121350])
                ("kwargs" variable nil (reparse-symbol function_parameters) [121352 121360]))              ) nil [121331 121867])
            ("" code nil nil [121960 121974])
            ("triplot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [121987 121992])
                ("kwargs" variable nil (reparse-symbol function_parameters) [121994 122002]))              ) nil [121975 122495])
            ("" code nil nil [122588 122605])
            ("violinplot" function (:arguments 
              ( ("dataset" variable nil (reparse-symbol function_parameters) [122621 122628])
                ("positions" variable nil (reparse-symbol function_parameters) [122630 122639])
                ("vert" variable nil (reparse-symbol function_parameters) [122646 122650])
                ("widths" variable nil (reparse-symbol function_parameters) [122657 122663])
                ("showmeans" variable nil (reparse-symbol function_parameters) [122669 122678])
                ("showextrema" variable nil (reparse-symbol function_parameters) [122701 122712])
                ("showmedians" variable nil (reparse-symbol function_parameters) [122719 122730])
                ("points" variable nil (reparse-symbol function_parameters) [122738 122744])
                ("bw_method" variable nil (reparse-symbol function_parameters) [122750 122759])
                ("hold" variable nil (reparse-symbol function_parameters) [122781 122785])
                ("data" variable nil (reparse-symbol function_parameters) [122792 122796]))              ) nil [122606 123503])
            ("" code nil nil [123596 123609])
            ("vlines" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [123621 123622])
                ("ymin" variable nil (reparse-symbol function_parameters) [123624 123628])
                ("ymax" variable nil (reparse-symbol function_parameters) [123630 123634])
                ("colors" variable nil (reparse-symbol function_parameters) [123636 123642])
                ("linestyles" variable nil (reparse-symbol function_parameters) [123648 123658])
                ("label" variable nil (reparse-symbol function_parameters) [123668 123673])
                ("hold" variable nil (reparse-symbol function_parameters) [123678 123682])
                ("data" variable nil (reparse-symbol function_parameters) [123700 123704])
                ("kwargs" variable nil (reparse-symbol function_parameters) [123711 123719]))              ) nil [123610 124270])
            ("" code nil nil [124363 124375])
            ("xcorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [124386 124387])
                ("y" variable nil (reparse-symbol function_parameters) [124389 124390])
                ("normed" variable nil (reparse-symbol function_parameters) [124392 124398])
                ("detrend" variable nil (reparse-symbol function_parameters) [124405 124412])
                ("usevlines" variable nil (reparse-symbol function_parameters) [124432 124441])
                ("maxlags" variable nil (reparse-symbol function_parameters) [124458 124465])
                ("hold" variable nil (reparse-symbol function_parameters) [124470 124474])
                ("data" variable nil (reparse-symbol function_parameters) [124481 124485])
                ("kwargs" variable nil (reparse-symbol function_parameters) [124492 124500]))              ) nil [124376 125082])
            ("" code nil nil [125175 125187])
            ("barbs" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [125198 125203])
                ("kw" variable nil (reparse-symbol function_parameters) [125205 125209]))              ) nil [125188 125692])
            ("" code nil nil [125788 125798])
            ("cla" function nil nil [125799 125847])
            ("" code nil nil [125943 125954])
            ("grid" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [125964 125965])
                ("which" variable nil (reparse-symbol function_parameters) [125972 125977])
                ("axis" variable nil (reparse-symbol function_parameters) [125987 125991])
                ("kwargs" variable nil (reparse-symbol function_parameters) [126000 126008]))              ) nil [125955 126086])
            ("" code nil nil [126182 126195])
            ("legend" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [126207 126212])
                ("kwargs" variable nil (reparse-symbol function_parameters) [126214 126222]))              ) nil [126196 126280])
            ("" code nil nil [126376 126388])
            ("table" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [126399 126407]))              ) nil [126389 126457])
            ("" code nil nil [126553 126564])
            ("text" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [126574 126575])
                ("y" variable nil (reparse-symbol function_parameters) [126577 126578])
                ("s" variable nil (reparse-symbol function_parameters) [126580 126581])
                ("fontdict" variable nil (reparse-symbol function_parameters) [126583 126591])
                ("withdash" variable nil (reparse-symbol function_parameters) [126598 126606])
                ("kwargs" variable nil (reparse-symbol function_parameters) [126614 126622]))              ) nil [126565 126718])
            ("" code nil nil [126814 126829])
            ("annotate" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [126843 126848])
                ("kwargs" variable nil (reparse-symbol function_parameters) [126850 126858]))              ) nil [126830 126918])
            ("" code nil nil [127014 127037])
            ("ticklabel_format" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [127059 127067]))              ) nil [127038 127128])
            ("" code nil nil [127224 127245])
            ("locator_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [127265 127269])
                ("tight" variable nil (reparse-symbol function_parameters) [127278 127283])
                ("kwargs" variable nil (reparse-symbol function_parameters) [127290 127298]))              ) nil [127246 127381])
            ("" code nil nil [127477 127495])
            ("tick_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [127512 127516])
                ("kwargs" variable nil (reparse-symbol function_parameters) [127525 127533]))              ) nil [127496 127600])
            ("" code nil nil [127696 127710])
            ("margins" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [127723 127728])
                ("kw" variable nil (reparse-symbol function_parameters) [127730 127734]))              ) nil [127711 127789])
            ("" code nil nil [127885 127901])
            ("autoscale" function (:arguments 
              ( ("enable" variable nil (reparse-symbol function_parameters) [127916 127922])
                ("axis" variable nil (reparse-symbol function_parameters) [127929 127933])
                ("tight" variable nil (reparse-symbol function_parameters) [127942 127947]))              ) nil [127902 128035])
            ("autumn" function (:documentation "
    Set the colormap to \"autumn\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [128109 128347])
            ("bone" function (:documentation "
    Set the colormap to \"bone\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [128422 128654])
            ("cool" function (:documentation "
    Set the colormap to \"cool\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [128729 128961])
            ("copper" function (:documentation "
    Set the colormap to \"copper\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [129036 129274])
            ("flag" function (:documentation "
    Set the colormap to \"flag\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [129349 129581])
            ("gray" function (:documentation "
    Set the colormap to \"gray\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [129656 129888])
            ("hot" function (:documentation "
    Set the colormap to \"hot\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [129963 130192])
            ("hsv" function (:documentation "
    Set the colormap to \"hsv\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [130267 130496])
            ("jet" function (:documentation "
    Set the colormap to \"jet\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [130571 130800])
            ("pink" function (:documentation "
    Set the colormap to \"pink\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [130875 131107])
            ("prism" function (:documentation "
    Set the colormap to \"prism\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [131182 131417])
            ("spring" function (:documentation "
    Set the colormap to \"spring\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [131492 131730])
            ("summer" function (:documentation "
    Set the colormap to \"summer\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [131805 132043])
            ("winter" function (:documentation "
    Set the colormap to \"winter\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [132118 132356])
            ("magma" function (:documentation "
    Set the colormap to \"magma\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [132431 132666])
            ("inferno" function (:documentation "
    Set the colormap to \"inferno\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [132741 132982])
            ("plasma" function (:documentation "
    Set the colormap to \"plasma\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [133057 133295])
            ("viridis" function (:documentation "
    Set the colormap to \"viridis\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [133370 133611])
            ("nipy_spectral" function (:documentation "
    Set the colormap to \"nipy_spectral\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [133686 133945])
            ("spectral" function (:documentation "
    Set the colormap to \"spectral\".

    This changes the default colormap as well as the colormap of the current
    image if there is one. See ``help(colormaps)`` for more information.
    ") nil [134020 134460])
            ("_setup_pyplot_info_docstrings" code nil nil [134461 134492]))          
      :file "pyplot.py"
      :pointmax 134493
      :fsize 134492
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax '((NAME 16373 . 16381) (IF 16401 . 16403) (ELSE 16412 . 16416) (FROM 2155 . 2159) (PERIOD 2160 . 2161)))
    (semanticdb-table "semanticdb-table-deed8c"
      :major-mode python-mode
      :tags 
        '( ("'''
Colorbar toolkit with two classes and a function:

    :class:`ColorbarBase`
        the base class with full colorbar drawing functionality.
        It can be used as-is to make a colorbar for a given colormap;
        a mappable object (e.g., image) is not needed.

    :class:`Colorbar`
        the derived class for use with images or contour plots.

    :func:`make_axes`
        a function for resizing an axes and adding a second axes
        suitable for a colorbar

The :meth:`~matplotlib.figure.Figure.colorbar` method uses :func:`make_axes`
and :class:`Colorbar`; the :func:`~matplotlib.pyplot.colorbar` function
is a thin wrapper over :meth:`~matplotlib.figure.Figure.colorbar`.

'''" code nil nil [1 700])
            ("" code nil nil [724 809])
            ("six" include nil nil [811 821])
            ("six.moves" include nil nil [822 855])
            ("warnings" include nil nil [857 872])
            ("numpy" include nil nil [874 892])
            ("matplotlib" include nil nil [894 918])
            ("matplotlib.artist" include nil nil [919 954])
            ("matplotlib.cbook" include nil nil [955 987])
            ("matplotlib.collections" include nil nil [988 1032])
            ("matplotlib.colors" include nil nil [1033 1067])
            ("matplotlib.contour" include nil nil [1068 1104])
            ("matplotlib.cm" include nil nil [1105 1131])
            ("matplotlib.gridspec" include nil nil [1132 1170])
            ("matplotlib.patches" include nil nil [1171 1208])
            ("matplotlib.path" include nil nil [1209 1240])
            ("matplotlib.ticker" include nil nil [1241 1275])
            ("matplotlib.transforms" include nil nil [1276 1319])
            ("matplotlib._layoutbox" include nil nil [1320 1361])
            ("matplotlib._constrained_layout" include nil nil [1362 1421])
            ("matplotlib" include nil nil [1422 1454])
            ("make_axes_kw_doc" variable nil nil [1456 2434])
            ("colormap_kw_doc" variable nil nil [2436 5845])
            ("colorbar_doc" code nil nil [5847 8565])
            ("docstring" code nil nil [8567 8618])
            ("_set_ticks_on_axis_warn" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [8649 8654])
                ("kw" variable nil (reparse-symbol function_parameters) [8656 8660]))              ) nil [8621 8828])
            ("ColorbarBase" type
               (:superclasses ("cm.ScalarMappable")
                :members 
                  ( ("'''
    Draw a colorbar in an existing axes.

    This is a base class for the :class:`Colorbar` class, which is the
    basis for the :func:`~matplotlib.pyplot.colorbar` function and the
    :meth:`~matplotlib.figure.Figure.colorbar` method, which are the
    usual ways of creating a colorbar.

    It is also useful by itself for showing a colormap.  If the *cmap*
    kwarg is given but *boundaries* and *values* are left as None,
    then the colormap will be displayed on a 0-1 scale. To show the
    under- and over-value colors, specify the *norm* as::

        colors.Normalize(clip=False)

    To show the colors versus index instead of on the 0-1 scale,
    use::

        norm=colors.NoNorm.

    Useful public methods are :meth:`set_label` and :meth:`add_lines`.

    Attributes
    ----------
    ax : Axes
        The `Axes` instance in which the colorbar is drawn.

    lines : list
        A list of `LineCollection` if lines were drawn, otherwise
        an empty list.

    dividers : LineCollection
        A LineCollection if *drawedges* is ``True``, otherwise ``None``.
    '''" code nil (reparse-symbol indented_block_body) [8873 9972])
                    ("_slice_dict" variable nil (reparse-symbol indented_block_body) [9977 10141])
                    ("n_rasterize" variable nil (reparse-symbol indented_block_body) [10147 10163])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10852 10864])
                            ("self" code nil (reparse-symbol indented_block_body) [10873 10889])
                            ("if" code nil (reparse-symbol indented_block_body) [10898 10948])
                            ("if" code nil (reparse-symbol indented_block_body) [10956 11011])
                            ("self" variable nil (reparse-symbol indented_block_body) [11019 11037])
                            ("cm" code nil (reparse-symbol indented_block_body) [11046 11100])
                            ("self" variable nil (reparse-symbol indented_block_body) [11109 11129])
                            ("self" variable nil (reparse-symbol indented_block_body) [11138 11166])
                            ("self" variable nil (reparse-symbol indented_block_body) [11175 11195])
                            ("self" variable nil (reparse-symbol indented_block_body) [11204 11243])
                            ("self" variable nil (reparse-symbol indented_block_body) [11252 11274])
                            ("self" variable nil (reparse-symbol indented_block_body) [11283 11313])
                            ("self" variable nil (reparse-symbol indented_block_body) [11322 11348])
                            ("self" variable nil (reparse-symbol indented_block_body) [11357 11377])
                            ("self" variable nil (reparse-symbol indented_block_body) [11386 11414])
                            ("self" variable nil (reparse-symbol indented_block_body) [11423 11451])
                            ("self" variable nil (reparse-symbol indented_block_body) [11460 11478])
                            ("self" variable nil (reparse-symbol indented_block_body) [11487 11506])
                            ("self" variable nil (reparse-symbol indented_block_body) [11515 11534])
                            ("self" variable nil (reparse-symbol indented_block_body) [11543 11560])
                            ("self" variable nil (reparse-symbol indented_block_body) [11569 11589])
                            ("if" code nil (reparse-symbol indented_block_body) [11599 11706])
                            ("self" variable nil (reparse-symbol indented_block_body) [11714 11746])
                            ("self" code nil (reparse-symbol indented_block_body) [11756 11777])
                            ("if" code nil (reparse-symbol indented_block_body) [11786 11964])
                            ("if" code nil (reparse-symbol indented_block_body) [11972 12574])
                            ("self" code nil (reparse-symbol indented_block_body) [12657 12675])
                            ("self" code nil (reparse-symbol indented_block_body) [12684 12699]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10237 10241])
                            ("ax" variable nil (reparse-symbol function_parameters) [10243 10245])
                            ("cmap" variable nil (reparse-symbol function_parameters) [10247 10251])
                            ("norm" variable nil (reparse-symbol function_parameters) [10275 10279])
                            ("alpha" variable nil (reparse-symbol function_parameters) [10303 10308])
                            ("values" variable nil (reparse-symbol function_parameters) [10332 10338])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [10362 10372])
                            ("orientation" variable nil (reparse-symbol function_parameters) [10396 10407])
                            ("ticklocation" variable nil (reparse-symbol function_parameters) [10437 10449])
                            ("extend" variable nil (reparse-symbol function_parameters) [10475 10481])
                            ("spacing" variable nil (reparse-symbol function_parameters) [10510 10517])
                            ("ticks" variable nil (reparse-symbol function_parameters) [10573 10578])
                            ("format" variable nil (reparse-symbol function_parameters) [10602 10608])
                            ("drawedges" variable nil (reparse-symbol function_parameters) [10632 10641])
                            ("filled" variable nil (reparse-symbol function_parameters) [10666 10672])
                            ("extendfrac" variable nil (reparse-symbol function_parameters) [10696 10706])
                            ("extendrect" variable nil (reparse-symbol function_parameters) [10730 10740])
                            ("label" variable nil (reparse-symbol function_parameters) [10765 10770]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10224 12700])
                    ("_extend_lower" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12723 12727]))                          
                        :documentation "Returns whether the lower limit is open ended.")
                        (reparse-symbol indented_block_body) [12705 12837])
                    ("_extend_upper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12860 12864]))                          
                        :documentation "Returns whether the uper limit is open ended.")
                        (reparse-symbol indented_block_body) [12842 12973])
                    ("_patch_ax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12992 12996]))                          )
                        (reparse-symbol indented_block_body) [12978 13198])
                    ("draw_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13216 13220]))                          )
                        (reparse-symbol indented_block_body) [13203 13574])
                    ("config_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13595 13599]))                          )
                        (reparse-symbol indented_block_body) [13579 14129])
                    ("update_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14151 14155]))                          
                        :documentation "
        Force the update of the ticks and ticklabels. This must be
        called whenever the tick locator and/or tick formatter changes.
        ")
                        (reparse-symbol indented_block_body) [14134 14772])
                    ("set_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14791 14795])
                            ("ticks" variable nil (reparse-symbol function_parameters) [14797 14802])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [14804 14816]))                          
                        :documentation "
        Set tick locations.

        Parameters
        ----------
        ticks : {None, sequence, :class:`~matplotlib.ticker.Locator` instance}
            If None, a default Locator will be used.

        update_ticks : {True, False}, optional
            If True, tick locations are updated immediately.  If False,
            use :meth:`update_ticks` to manually update the ticks.

        ")
                        (reparse-symbol indented_block_body) [14777 15472])
                    ("get_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15491 15495])
                            ("minor" variable nil (reparse-symbol function_parameters) [15497 15502]))                          
                        :documentation "Return the x ticks as a list of locations")
                        (reparse-symbol indented_block_body) [15477 15605])
                    ("set_ticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15629 15633])
                            ("ticklabels" variable nil (reparse-symbol function_parameters) [15635 15645])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [15647 15659]))                          
                        :documentation "
        set tick labels. Tick labels are updated immediately unless
        update_ticks is *False*. To manually update the ticks, call
        *update_ticks* method explicitly.
        ")
                        (reparse-symbol indented_block_body) [15610 16159])
                    ("_config_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16181 16185])
                            ("X" variable nil (reparse-symbol function_parameters) [16187 16188])
                            ("Y" variable nil (reparse-symbol function_parameters) [16190 16191]))                          )
                        (reparse-symbol indented_block_body) [16164 17290])
                    ("_set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17310 17314]))                          )
                        (reparse-symbol indented_block_body) [17295 17522])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17541 17545])
                            ("label" variable nil (reparse-symbol function_parameters) [17547 17552])
                            ("kw" variable nil (reparse-symbol function_parameters) [17554 17558]))                          )
                        (reparse-symbol indented_block_body) [17527 17721])
                    ("_outline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17739 17743])
                            ("X" variable nil (reparse-symbol function_parameters) [17745 17746])
                            ("Y" variable nil (reparse-symbol function_parameters) [17748 17749]))                          )
                        (reparse-symbol indented_block_body) [17726 18257])
                    ("_edges" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18273 18277])
                            ("X" variable nil (reparse-symbol function_parameters) [18279 18280])
                            ("Y" variable nil (reparse-symbol function_parameters) [18282 18283]))                          )
                        (reparse-symbol indented_block_body) [18262 18710])
                    ("_add_solids" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18731 18735])
                            ("X" variable nil (reparse-symbol function_parameters) [18737 18738])
                            ("Y" variable nil (reparse-symbol function_parameters) [18740 18741])
                            ("C" variable nil (reparse-symbol function_parameters) [18743 18744]))                          )
                        (reparse-symbol indented_block_body) [18715 20210])
                    ("add_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20229 20233])
                            ("levels" variable nil (reparse-symbol function_parameters) [20235 20241])
                            ("colors" variable nil (reparse-symbol function_parameters) [20243 20249])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [20251 20261])
                            ("erase" variable nil (reparse-symbol function_parameters) [20263 20268]))                          )
                        (reparse-symbol indented_block_body) [20215 21389])
                    ("_ticker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21406 21410]))                          )
                        (reparse-symbol indented_block_body) [21394 23985])
                    ("_process_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24010 24014])
                            ("b" variable nil (reparse-symbol function_parameters) [24016 24017]))                          )
                        (reparse-symbol indented_block_body) [23990 27294])
                    ("_find_range" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27315 27319]))                          )
                        (reparse-symbol indented_block_body) [27299 27567])
                    ("_central_N" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27587 27591]))                          )
                        (reparse-symbol indented_block_body) [27572 27829])
                    ("_extended_N" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27850 27854]))                          )
                        (reparse-symbol indented_block_body) [27834 28134])
                    ("_get_extension_lengths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28166 28170])
                            ("frac" variable nil (reparse-symbol function_parameters) [28172 28176])
                            ("automin" variable nil (reparse-symbol function_parameters) [28178 28185])
                            ("automax" variable nil (reparse-symbol function_parameters) [28187 28194])
                            ("default" variable nil (reparse-symbol function_parameters) [28196 28203]))                          )
                        (reparse-symbol indented_block_body) [28139 29376])
                    ("_uniform_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29396 29400])
                            ("N" variable nil (reparse-symbol function_parameters) [29402 29403]))                          )
                        (reparse-symbol indented_block_body) [29381 30351])
                    ("_proportional_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30376 30380]))                          )
                        (reparse-symbol indented_block_body) [30356 31984])
                    ("_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31999 32003]))                          )
                        (reparse-symbol indented_block_body) [31989 32669])
                    ("_locate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32686 32690])
                            ("x" variable nil (reparse-symbol function_parameters) [32692 32693]))                          )
                        (reparse-symbol indented_block_body) [32674 33658])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33677 33681])
                            ("alpha" variable nil (reparse-symbol function_parameters) [33683 33688]))                          )
                        (reparse-symbol indented_block_body) [33663 33718])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33734 33738]))                          
                        :documentation "
        Remove this colorbar from the figure
        ")
                        (reparse-symbol indented_block_body) [33723 33869]))                  
                :type "class")
                nil [8830 33869])
            ("Colorbar" type
               (:documentation "
    This class connects a :class:`ColorbarBase` to a
    :class:`~matplotlib.cm.ScalarMappable` such as a
    :class:`~matplotlib.image.AxesImage` generated via
    :meth:`~matplotlib.axes.Axes.imshow`.

    It is not intended to be instantiated directly; instead,
    use :meth:`~matplotlib.figure.Figure.colorbar` or
    :func:`~matplotlib.pyplot.colorbar` to make your colorbar.

    "
                :superclasses ("ColorbarBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("mappable" code nil (reparse-symbol indented_block_body) [34486 34511])
                            ("self" variable nil (reparse-symbol indented_block_body) [34521 34545])
                            ("kw" variable nil (reparse-symbol indented_block_body) [34554 34587])
                            ("kw" variable nil (reparse-symbol indented_block_body) [34596 34629])
                            ("if" code nil (reparse-symbol indented_block_body) [34639 35442]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34317 34321])
                            ("ax" variable nil (reparse-symbol function_parameters) [34323 34325])
                            ("mappable" variable nil (reparse-symbol function_parameters) [34327 34335])
                            ("kw" variable nil (reparse-symbol function_parameters) [34337 34341]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34304 35442])
                    ("on_mappable_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35471 35475])
                            ("mappable" variable nil (reparse-symbol function_parameters) [35477 35485]))                          
                        :documentation "
        Updates this colorbar to match the mappable's properties.

        Typically this is automatically registered as an event handler
        by :func:`colorbar_factory` and should not be called manually.

        ")
                        (reparse-symbol indented_block_body) [35447 35845])
                    ("add_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35864 35868])
                            ("CS" variable nil (reparse-symbol function_parameters) [35870 35872])
                            ("erase" variable nil (reparse-symbol function_parameters) [35874 35879]))                          )
                        (reparse-symbol indented_block_body) [35850 36893])
                    ("update_normal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36916 36920])
                            ("mappable" variable nil (reparse-symbol function_parameters) [36922 36930]))                          )
                        (reparse-symbol indented_block_body) [36898 37367])
                    ("update_bruteforce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37394 37398])
                            ("mappable" variable nil (reparse-symbol function_parameters) [37400 37408]))                          )
                        (reparse-symbol indented_block_body) [37372 38516])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38893 38897]))                          
                        :documentation "
        Remove this colorbar from the figure.  If the colorbar was created with
        ``use_gridspec=True`` then restore the gridspec to its previous value.
        ")
                        (reparse-symbol indented_block_body) [38882 39738]))                  
                :type "class")
                nil [33871 39738])
            ("" code nil nil [39763 39781])
            ("make_axes" function (:arguments 
              ( ("parents" variable nil (reparse-symbol function_parameters) [39796 39803])
                ("location" variable nil (reparse-symbol function_parameters) [39805 39813])
                ("orientation" variable nil (reparse-symbol function_parameters) [39820 39831])
                ("fraction" variable nil (reparse-symbol function_parameters) [39838 39846])
                ("shrink" variable nil (reparse-symbol function_parameters) [39867 39873])
                ("aspect" variable nil (reparse-symbol function_parameters) [39879 39885])
                ("kw" variable nil (reparse-symbol function_parameters) [39890 39894]))              ) nil [39782 46183])
            ("" code nil nil [46208 46226])
            ("make_axes_gridspec" function (:arguments 
              ( ("parent" variable nil (reparse-symbol function_parameters) [46250 46256])
                ("kw" variable nil (reparse-symbol function_parameters) [46258 46262]))              ) nil [46227 49407])
            ("ColorbarPatch" type
               (:documentation "
    A Colorbar which is created using :class:`~matplotlib.patches.Patch`
    rather than the default :func:`~matplotlib.axes.pcolor`.

    It uses a list of Patch instances instead of a
    :class:`~matplotlib.collections.PatchCollection` because the
    latter does not allow the hatch pattern to vary among the
    members of the collection.
    "
                :superclasses ("Colorbar")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [50016 50040])
                            ("Colorbar" code nil (reparse-symbol indented_block_body) [50049 50092]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49817 49821])
                            ("ax" variable nil (reparse-symbol function_parameters) [49823 49825])
                            ("mappable" variable nil (reparse-symbol function_parameters) [49827 49835])
                            ("kw" variable nil (reparse-symbol function_parameters) [49837 49841]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49804 50093])
                    ("_add_solids" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50114 50118])
                            ("X" variable nil (reparse-symbol function_parameters) [50120 50121])
                            ("Y" variable nil (reparse-symbol function_parameters) [50123 50124])
                            ("C" variable nil (reparse-symbol function_parameters) [50126 50127]))                          
                        :documentation "
        Draw the colors using :class:`~matplotlib.patches.Patch`;
        optionally add separators.
        ")
                        (reparse-symbol indented_block_body) [50098 52056]))                  
                :type "class")
                nil [49409 52056])
            ("colorbar_factory" function
               (:documentation "
    Creates a colorbar on the given axes for the given mappable.

    Typically, for automatic colorbar placement given only a mappable use
    :meth:`~matplotlib.figure.Figure.colorbar`.

    "
                :arguments 
                  ( ("cax" variable nil (reparse-symbol function_parameters) [52079 52082])
                    ("mappable" variable nil (reparse-symbol function_parameters) [52084 52092])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [52094 52102]))                  )
                nil [52058 52795]))          
      :file "colorbar.py"
      :pointmax 52795
      :fsize 52794
      :lastmodtime '(23240 23001 117461 0)
      :unmatched-syntax '((NAME 41230 . 41238) (IF 41249 . 41251) (ELSE 41278 . 41282) (NAME 11638 . 11650) (IF 11662 . 11664) (ELSE 11693 . 11697)))
    (semanticdb-table "semanticdb-table-14792d0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Abstract base classes define the primitives that renderers and
graphics contexts must implement to serve as a matplotlib backend

:class:`RendererBase`
    An abstract base class to handle drawing/rendering operations.

:class:`FigureCanvasBase`
    The abstraction layer that separates the
    :class:`matplotlib.figure.Figure` from the backend specific
    details like a user interface drawing area

:class:`GraphicsContextBase`
    An abstract base class that provides color, line styles, etc...

:class:`Event`
    The base class for all of the matplotlib event
    handling.  Derived classes such as :class:`KeyEvent` and
    :class:`MouseEvent` store the meta data like keys and buttons
    pressed, x and y locations in pixel and
    :class:`~matplotlib.axes.Axes` coordinates.

:class:`ShowBase`
    The base class for the Show class of each interactive backend;
    the 'show' callable is then set to Show.__call__, inherited from
    ShowBase.

:class:`ToolContainerBase`
     The base class for the Toolbar class of each interactive backend.

:class:`StatusbarBase`
    The base class for the messaging area.
\"\"\"" code nil nil [1 1129])
            ("" code nil nil [1154 1239])
            ("six" include nil nil [1241 1251])
            ("six.moves" include nil nil [1252 1280])
            ("contextlib" include nil nil [1282 1319])
            ("functools" include nil nil [1320 1349])
            ("importlib" include nil nil [1350 1366])
            ("io" include nil nil [1367 1376])
            ("os" include nil nil [1377 1386])
            ("sys" include nil nil [1387 1397])
            ("time" include nil nil [1398 1409])
            ("warnings" include nil nil [1410 1425])
            ("weakref" include nil nil [1426 1463])
            ("numpy" include nil nil [1465 1483])
            ("" code nil nil [1508 1638])
            ("matplotlib._pylab_helpers" include nil nil [1639 1680])
            ("matplotlib.transforms" include nil nil [1681 1746])
            ("matplotlib.path" include nil nil [1747 1779])
            ("try" code nil nil [1781 1887])
            ("_default_filetypes" variable nil nil [1889 2226])
            ("_default_backends" variable nil nil [2229 2665])
            ("register_backend" function
               (:documentation "
    Register a backend for saving to a given file format.

    Parameters
    ----------
    format : str
        File extension

    backend : module string or canvas class
        Backend for handling file output

    description : str, optional
        Description of the file type.  Defaults to an empty string
    "
                :arguments 
                  ( ("format" variable nil (reparse-symbol function_parameters) [2689 2695])
                    ("backend" variable nil (reparse-symbol function_parameters) [2697 2704])
                    ("description" variable nil (reparse-symbol function_parameters) [2706 2717]))                  )
                nil [2668 3194])
            ("get_registered_canvas_class" function
               (:documentation "
    Return the registered default canvas for given file format.
    Handles deferred import of required backend.
    "
                :arguments 
                  ( ("format" variable nil (reparse-symbol function_parameters) [3228 3234]))                  )
                nil [3196 3675])
            ("_Backend" type
               (:superclasses ("object")
                :members 
                  ( ("FigureCanvas" variable nil (reparse-symbol indented_block_body) [4046 4065])
                    ("FigureManager" variable nil (reparse-symbol indented_block_body) [4070 4090])
                    ("trigger_manager_draw" variable nil (reparse-symbol indented_block_body) [4419 4446])
                    ("mainloop" variable nil (reparse-symbol indented_block_body) [4451 4466])
                    ("new_figure_manager" function
                       (:documentation "Create a new figure manager instance.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4614 4617])
                            ("num" variable nil (reparse-symbol function_parameters) [4619 4622])
                            ("args" variable nil (reparse-symbol function_parameters) [4624 4629])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4631 4639]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4574 4968])
                    ("new_figure_manager_given_figure" function
                       (:documentation "Create a new figure manager instance for the given figure.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5026 5029])
                            ("num" variable nil (reparse-symbol function_parameters) [5031 5034])
                            ("figure" variable nil (reparse-symbol function_parameters) [5036 5042]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4973 5241])
                    ("draw_if_interactive" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5287 5290]))                          )
                        (reparse-symbol indented_block_body) [5246 5476])
                    ("show" function
                       (:documentation "Show all figures.

        `show` blocks by calling `mainloop` if *block* is ``True``, or if it
        is ``None`` and we are neither in IPython's ``%pylab`` mode, nor in
        `interactive` mode.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5507 5510])
                            ("block" variable nil (reparse-symbol function_parameters) [5512 5517]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5481 6712])
                    ("export" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6817 6820]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6788 7391]))                  
                :type "class")
                nil [3677 7391])
            ("ShowBase" type
               (:documentation "
    Simple base class to generate a show() callable in backends.

    Subclass must override mainloop() method.
    "
                :superclasses ("_Backend")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7565 7569])
                            ("block" variable nil (reparse-symbol function_parameters) [7571 7576]))                          )
                        (reparse-symbol indented_block_body) [7552 7622]))                  
                :type "class")
                nil [7393 7622])
            ("RendererBase" type
               (:documentation "An abstract base class to handle drawing/rendering operations.

    The following methods must be implemented in the backend for full
    functionality (though just implementing :meth:`draw_path` alone would
    give a highly capable backend):

    * :meth:`draw_path`
    * :meth:`draw_image`
    * :meth:`draw_gouraud_triangle`

    The following methods *should* be implemented in the backend for
    optimization reasons:

    * :meth:`draw_text`
    * :meth:`draw_markers`
    * :meth:`draw_path_collection`
    * :meth:`draw_quad_mesh`

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8242 8265])
                            ("self" variable nil (reparse-symbol indented_block_body) [8274 8313]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8227 8231]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8214 8314])
                    ("open_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8334 8338])
                            ("s" variable nil (reparse-symbol function_parameters) [8340 8341])
                            ("gid" variable nil (reparse-symbol function_parameters) [8343 8346]))                          
                        :documentation "
        Open a grouping element with label *s*. If *gid* is given, use
        *gid* as the id of the group. Is only currently used by
        :mod:`~matplotlib.backends.backend_svg`.
        ")
                        (reparse-symbol indented_block_body) [8319 8562])
                    ("close_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8583 8587])
                            ("s" variable nil (reparse-symbol function_parameters) [8589 8590]))                          
                        :documentation "
        Close a grouping element with label *s*
        Is only currently used by :mod:`~matplotlib.backends.backend_svg`
        ")
                        (reparse-symbol indented_block_body) [8567 8739])
                    ("draw_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8758 8762])
                            ("gc" variable nil (reparse-symbol function_parameters) [8764 8766])
                            ("path" variable nil (reparse-symbol function_parameters) [8768 8772])
                            ("transform" variable nil (reparse-symbol function_parameters) [8774 8783])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [8785 8792]))                          
                        :documentation "
        Draws a :class:`~matplotlib.path.Path` instance using the
        given affine transform.
        ")
                        (reparse-symbol indented_block_body) [8744 8956])
                    ("draw_markers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8978 8982])
                            ("gc" variable nil (reparse-symbol function_parameters) [8984 8986])
                            ("marker_path" variable nil (reparse-symbol function_parameters) [8988 8999])
                            ("marker_trans" variable nil (reparse-symbol function_parameters) [9001 9013])
                            ("path" variable nil (reparse-symbol function_parameters) [9015 9019])
                            ("trans" variable nil (reparse-symbol function_parameters) [9042 9047])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [9049 9056]))                          
                        :documentation "
        Draws a marker at each of the vertices in path.  This includes
        all vertices, including control points on curves.  To avoid
        that behavior, those vertices should be removed before calling
        this function.

        This provides a fallback implementation of draw_markers that
        makes multiple calls to :meth:`draw_path`.  Some backends may
        want to override this method in order to draw the marker only
        once and reuse it multiple times.

        Parameters
        ----------
        gc : `GraphicsContextBase`
            The graphics context

        marker_trans : `matplotlib.transforms.Transform`
            An affine transform applied to the marker.

        trans : `matplotlib.transforms.Transform`
            An affine transform applied to the path.

        ")
                        (reparse-symbol indented_block_body) [8961 10243])
                    ("draw_path_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10273 10277])
                            ("gc" variable nil (reparse-symbol function_parameters) [10279 10281])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [10283 10299])
                            ("paths" variable nil (reparse-symbol function_parameters) [10301 10306])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [10308 10322])
                            ("offsets" variable nil (reparse-symbol function_parameters) [10353 10360])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [10362 10373])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [10375 10385])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [10387 10397])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [10428 10438])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [10440 10450])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [10452 10464])
                            ("urls" variable nil (reparse-symbol function_parameters) [10466 10470])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [10501 10516]))                          
                        :documentation "
        Draws a collection of paths selecting drawing properties from
        the lists *facecolors*, *edgecolors*, *linewidths*,
        *linestyles* and *antialiaseds*. *offsets* is a list of
        offsets to apply to each of the paths.  The offsets in
        *offsets* are first transformed by *offsetTrans* before being
        applied.  *offset_position* may be either \"screen\" or \"data\"
        depending on the space that the offsets are in.

        This provides a fallback implementation of
        :meth:`draw_path_collection` that makes multiple calls to
        :meth:`draw_path`.  Some backends may want to override this in
        order to render each set of path data only once, and then
        reference that path multiple times with the different offsets,
        colors, styles etc.  The generator methods
        :meth:`_iter_collection_raw_paths` and
        :meth:`_iter_collection` are provided to help with (and
        standardize) the implementation across backends.  It is highly
        recommended to use those generators, so that changes to the
        behavior of :meth:`draw_path_collection` can be made globally.
        ")
                        (reparse-symbol indented_block_body) [10248 12389])
                    ("draw_quad_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12413 12417])
                            ("gc" variable nil (reparse-symbol function_parameters) [12419 12421])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [12423 12439])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [12441 12450])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [12452 12462])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [12487 12498])
                            ("offsets" variable nil (reparse-symbol function_parameters) [12500 12507])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [12509 12520])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [12522 12532])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [12557 12568])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [12570 12580]))                          
                        :documentation "
        This provides a fallback implementation of
        :meth:`draw_quad_mesh` that generates paths and then calls
        :meth:`draw_path_collection`.
        ")
                        (reparse-symbol indented_block_body) [12394 13234])
                    ("draw_gouraud_triangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13265 13269])
                            ("gc" variable nil (reparse-symbol function_parameters) [13271 13273])
                            ("points" variable nil (reparse-symbol function_parameters) [13275 13281])
                            ("colors" variable nil (reparse-symbol function_parameters) [13283 13289])
                            ("transform" variable nil (reparse-symbol function_parameters) [13291 13300]))                          
                        :documentation "
        Draw a Gouraud-shaded triangle.

        Parameters
        ----------
        points : array_like, shape=(3, 2)
            Array of (x, y) points for the triangle.

        colors : array_like, shape=(3, 4)
            RGBA colors for each point of the triangle.

        transform : `matplotlib.transforms.Transform`
            An affine transform to apply to the points.

        ")
                        (reparse-symbol indented_block_body) [13239 13746])
                    ("draw_gouraud_triangles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13778 13782])
                            ("gc" variable nil (reparse-symbol function_parameters) [13784 13786])
                            ("triangles_array" variable nil (reparse-symbol function_parameters) [13788 13803])
                            ("colors_array" variable nil (reparse-symbol function_parameters) [13805 13817])
                            ("transform" variable nil (reparse-symbol function_parameters) [13850 13859]))                          
                        :documentation "
        Draws a series of Gouraud triangles.

        Parameters
        ----------
        points : array_like, shape=(N, 3, 2)
            Array of *N* (x, y) points for the triangles.

        colors : array_like, shape=(N, 3, 4)
            Array of *N* RGBA colors for each point of the triangles.

        transform : `matplotlib.transforms.Transform`
            An affine transform to apply to the points.
        ")
                        (reparse-symbol indented_block_body) [13751 14463])
                    ("_iter_collection_raw_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14499 14503])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [14505 14521])
                            ("paths" variable nil (reparse-symbol function_parameters) [14523 14528])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [14565 14579]))                          
                        :documentation "
        This is a helper method (along with :meth:`_iter_collection`) to make
        it easier to write a space-efficient :meth:`draw_path_collection`
        implementation in a backend.

        This method yields all of the base path/transform
        combinations, given a master transform, a list of paths and
        list of transforms.

        The arguments should be exactly what is passed in to
        :meth:`draw_path_collection`.

        The backend should take each yielded path and transform and
        create an object that can be referenced (reused) later.
        ")
                        (reparse-symbol indented_block_body) [14468 15602])
                    ("_iter_collection_uses_per_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15642 15646])
                            ("paths" variable nil (reparse-symbol function_parameters) [15648 15653])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [15655 15669])
                            ("offsets" variable nil (reparse-symbol function_parameters) [15710 15717])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [15719 15729])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [15731 15741]))                          
                        :documentation "
        Compute how many times each raw path object returned by
        _iter_collection_raw_paths would be used when calling
        _iter_collection. This is intended for the backend to decide
        on the tradeoff between using the paths in-line and storing
        them once and reusing. Rounds up in case the number of uses
        is not the same for every path.
        ")
                        (reparse-symbol indented_block_body) [15607 16405])
                    ("_iter_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16431 16435])
                            ("gc" variable nil (reparse-symbol function_parameters) [16437 16439])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [16441 16457])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [16459 16473])
                            ("path_ids" variable nil (reparse-symbol function_parameters) [16500 16508])
                            ("offsets" variable nil (reparse-symbol function_parameters) [16510 16517])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [16519 16530])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [16532 16542])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [16569 16579])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [16581 16591])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [16593 16603])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [16630 16642])
                            ("urls" variable nil (reparse-symbol function_parameters) [16644 16648])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [16650 16665]))                          
                        :documentation "
        This is a helper method (along with
        :meth:`_iter_collection_raw_paths`) to make it easier to write
        a space-efficient :meth:`draw_path_collection` implementation in a
        backend.

        This method yields all of the path, offset and graphics
        context combinations to draw the path collection.  The caller
        should already have looped over the results of
        :meth:`_iter_collection_raw_paths` to draw this collection.

        The arguments should be the same as that passed into
        :meth:`draw_path_collection`, with the exception of
        *path_ids*, which is a list of arbitrary objects that the
        backend will use to reference one of the paths created in the
        :meth:`_iter_collection_raw_paths` stage.

        Each yielded result is of the form::

           xo, yo, path_id, gc, rgbFace

        where *xo*, *yo* is an offset; *path_id* is one of the elements of
        *path_ids*; *gc* is a graphics context and *rgbFace* is a color to
        use for filling the path.
        ")
                        (reparse-symbol indented_block_body) [16410 20128])
                    ("get_image_magnification" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20161 20165]))                          
                        :documentation "
        Get the factor by which to magnify images passed to :meth:`draw_image`.
        Allows a backend to have images at a different resolution to other
        artists.
        ")
                        (reparse-symbol indented_block_body) [20133 20383])
                    ("draw_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20403 20407])
                            ("gc" variable nil (reparse-symbol function_parameters) [20409 20411])
                            ("x" variable nil (reparse-symbol function_parameters) [20413 20414])
                            ("y" variable nil (reparse-symbol function_parameters) [20416 20417])
                            ("im" variable nil (reparse-symbol function_parameters) [20419 20421])
                            ("transform" variable nil (reparse-symbol function_parameters) [20423 20432]))                          
                        :documentation "
        Draw an RGBA image.

        Parameters
        ----------
        gc : `GraphicsContextBase`
            a graphics context with clipping information.

        x : scalar
            the distance in physical units (i.e., dots or pixels) from the left
            hand side of the canvas.

        y : scalar
            the distance in physical units (i.e., dots or pixels) from the
            bottom side of the canvas.

        im : array_like, shape=(N, M, 4), dtype=np.uint8
            An array of RGBA pixels.

        transform : `matplotlib.transforms.Affine2DBase`
            If and only if the concrete backend is written such that
            :meth:`option_scale_image` returns ``True``, an affine
            transformation *may* be passed to :meth:`draw_image`. It takes the
            form of a :class:`~matplotlib.transforms.Affine2DBase` instance.
            The translation vector of the transformation is given in physical
            units (i.e., dots or pixels). Note that the transformation does not
            override `x` and `y`, and has to be applied *before* translating
            the result by `x` and `y` (this can be accomplished by adding `x`
            and `y` to the translation vector defined by `transform`).
        ")
                        (reparse-symbol indented_block_body) [20388 21758])
                    ("option_image_nocomposite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21792 21796]))                          
                        :documentation "
        override this method for renderers that do not necessarily always
        want to rescale and composite raster images. (like SVG, PDF, or PS)
        ")
                        (reparse-symbol indented_block_body) [21763 21994])
                    ("option_scale_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22022 22026]))                          
                        :documentation "
        override this method for renderers that support arbitrary affine
        transformations in :meth:`draw_image` (most vector backends).
        ")
                        (reparse-symbol indented_block_body) [21999 22217])
                    ("draw_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22235 22239])
                            ("gc" variable nil (reparse-symbol function_parameters) [22241 22243])
                            ("x" variable nil (reparse-symbol function_parameters) [22245 22246])
                            ("y" variable nil (reparse-symbol function_parameters) [22248 22249])
                            ("s" variable nil (reparse-symbol function_parameters) [22251 22252])
                            ("prop" variable nil (reparse-symbol function_parameters) [22254 22258])
                            ("angle" variable nil (reparse-symbol function_parameters) [22260 22265])
                            ("ismath" variable nil (reparse-symbol function_parameters) [22267 22273])
                            ("mtext" variable nil (reparse-symbol function_parameters) [22282 22287]))                          
                        :documentation "
        ")
                        (reparse-symbol indented_block_body) [22222 22391])
                    ("draw_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22410 22414])
                            ("gc" variable nil (reparse-symbol function_parameters) [22416 22418])
                            ("x" variable nil (reparse-symbol function_parameters) [22420 22421])
                            ("y" variable nil (reparse-symbol function_parameters) [22423 22424])
                            ("s" variable nil (reparse-symbol function_parameters) [22426 22427])
                            ("prop" variable nil (reparse-symbol function_parameters) [22429 22433])
                            ("angle" variable nil (reparse-symbol function_parameters) [22435 22440])
                            ("ismath" variable nil (reparse-symbol function_parameters) [22442 22448])
                            ("mtext" variable nil (reparse-symbol function_parameters) [22456 22461]))                          
                        :documentation "
        Draw the text instance

        Parameters
        ----------
        gc : `GraphicsContextBase`
            the graphics context

        x : scalar
            the x location of the text in display coords

        y : scalar
            the y location of the text baseline in display coords

        s : str
            the text string

        prop : `matplotlib.font_manager.FontProperties`
            font properties

        angle : scalar
            the rotation angle in degrees

        mtext : `matplotlib.text.Text`
            the original text object to be rendered

        Notes
        -----
        **backend implementers note**

        When you are trying to determine if you have gotten your bounding box
        right (which is what enables the text layout/alignment to work
        properly), it helps to change the line in text.py::

            if 0: bbox_artist(self, renderer)

        to if 1, and then the actual bounding box will be plotted along with
        your text.
        ")
                        (reparse-symbol indented_block_body) [22396 23570])
                    ("_get_text_path_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23604 23608])
                            ("x" variable nil (reparse-symbol function_parameters) [23610 23611])
                            ("y" variable nil (reparse-symbol function_parameters) [23613 23614])
                            ("s" variable nil (reparse-symbol function_parameters) [23616 23617])
                            ("prop" variable nil (reparse-symbol function_parameters) [23619 23623])
                            ("angle" variable nil (reparse-symbol function_parameters) [23625 23630])
                            ("ismath" variable nil (reparse-symbol function_parameters) [23632 23638]))                          
                        :documentation "
        return the text path and transform

        Parameters
        ----------
        prop : `matplotlib.font_manager.FontProperties`
          font property

        s : str
          text to be converted

        usetex : bool
          If True, use matplotlib usetex mode.

        ismath : bool
          If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [23575 25041])
                    ("_draw_text_as_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25069 25073])
                            ("gc" variable nil (reparse-symbol function_parameters) [25075 25077])
                            ("x" variable nil (reparse-symbol function_parameters) [25079 25080])
                            ("y" variable nil (reparse-symbol function_parameters) [25082 25083])
                            ("s" variable nil (reparse-symbol function_parameters) [25085 25086])
                            ("prop" variable nil (reparse-symbol function_parameters) [25088 25092])
                            ("angle" variable nil (reparse-symbol function_parameters) [25094 25099])
                            ("ismath" variable nil (reparse-symbol function_parameters) [25101 25107]))                          
                        :documentation "
        draw the text by converting them to paths using textpath module.

        Parameters
        ----------
        prop : `matplotlib.font_manager.FontProperties`
          font property

        s : str
          text to be converted

        usetex : bool
          If True, use matplotlib usetex mode.

        ismath : bool
          If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [25046 25754])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25793 25797])
                            ("s" variable nil (reparse-symbol function_parameters) [25799 25800])
                            ("prop" variable nil (reparse-symbol function_parameters) [25802 25806])
                            ("ismath" variable nil (reparse-symbol function_parameters) [25808 25814]))                          
                        :documentation "
        Get the width, height, and descent (offset from the bottom
        to the baseline), in display coords, of the string *s* with
        :class:`~matplotlib.font_manager.FontProperties` *prop*
        ")
                        (reparse-symbol indented_block_body) [25759 27022])
                    ("flipy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27037 27041]))                          
                        :documentation "
        Return true if y small numbers are top for renderer Is used
        for drawing text (:mod:`matplotlib.text`) and images
        (:mod:`matplotlib.image`) only
        ")
                        (reparse-symbol indented_block_body) [27027 27256])
                    ("get_canvas_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27289 27293]))                          )
                        (reparse-symbol indented_block_body) [27261 27379])
                    ("get_texmanager" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27403 27407]))                          
                        :documentation "
        return the :class:`matplotlib.texmanager.TexManager` instance
        ")
                        (reparse-symbol indented_block_body) [27384 27674])
                    ("new_gc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27690 27694]))                          
                        :documentation "
        Return an instance of a :class:`GraphicsContextBase`
        ")
                        (reparse-symbol indented_block_body) [27679 27819])
                    ("points_to_pixels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27845 27849])
                            ("points" variable nil (reparse-symbol function_parameters) [27851 27857]))                          
                        :documentation "
        Convert points to display units

        You need to override this function (unless your backend
        doesn't have a dpi, e.g., postscript or svg).  Some imaging
        systems assume some value for pixels per inch::

            points to pixels = points * pixels_per_inch/72.0 * dpi/72.0

        Parameters
        ----------
        points : scalar or array_like
            a float or a numpy array of float

        Returns
        -------
        Points converted to pixels
        ")
                        (reparse-symbol indented_block_body) [27824 28399])
                    ("strip_math" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28419 28423])
                            ("s" variable nil (reparse-symbol function_parameters) [28425 28426]))                          )
                        (reparse-symbol indented_block_body) [28404 28464])
                    ("start_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28491 28495]))                          
                        :documentation "
        Used in MixedModeRenderer. Switch to the raster renderer.
        ")
                        (reparse-symbol indented_block_body) [28469 28588])
                    ("stop_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28614 28618]))                          
                        :documentation "
        Used in MixedModeRenderer. Switch back to the vector renderer
        and draw the contents of the raster renderer as an image on
        the vector renderer.
        ")
                        (reparse-symbol indented_block_body) [28593 28812])
                    ("start_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28834 28838]))                          
                        :documentation "
        Used in AggRenderer. Switch to a temporary renderer for image
        filtering effects.
        ")
                        (reparse-symbol indented_block_body) [28817 28962])
                    ("stop_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28983 28987])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [28989 29000]))                          
                        :documentation "
        Used in AggRenderer. Switch back to the original renderer.
        The contents of the temporary renderer is processed with the
        *filter_func* and is drawn on the original renderer as an
        image.
        ")
                        (reparse-symbol indented_block_body) [28967 29244]))                  
                :type "class")
                nil [7624 29244])
            ("GraphicsContextBase" type
               (:documentation "
    An abstract base class that provides color, line styles, etc...
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [29398 29415])
                            ("self" variable nil (reparse-symbol indented_block_body) [29424 29450])
                            ("self" variable nil (reparse-symbol indented_block_body) [29500 29521])
                            ("self" variable nil (reparse-symbol indented_block_body) [29576 29599])
                            ("self" variable nil (reparse-symbol indented_block_body) [29608 29629])
                            ("self" variable nil (reparse-symbol indented_block_body) [29638 29659])
                            ("self" variable nil (reparse-symbol indented_block_body) [29668 29693])
                            ("self" variable nil (reparse-symbol indented_block_body) [29702 29727])
                            ("self" variable nil (reparse-symbol indented_block_body) [29736 29761])
                            ("self" variable nil (reparse-symbol indented_block_body) [29770 29789])
                            ("self" variable nil (reparse-symbol indented_block_body) [29798 29830])
                            ("self" variable nil (reparse-symbol indented_block_body) [29839 29857])
                            ("self" variable nil (reparse-symbol indented_block_body) [29866 29925])
                            ("self" variable nil (reparse-symbol indented_block_body) [29934 29985])
                            ("self" variable nil (reparse-symbol indented_block_body) [29994 30010])
                            ("self" variable nil (reparse-symbol indented_block_body) [30019 30035])
                            ("self" variable nil (reparse-symbol indented_block_body) [30044 30061])
                            ("self" variable nil (reparse-symbol indented_block_body) [30070 30089]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29383 29387]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29370 30090])
                    ("copy_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30115 30119])
                            ("gc" variable nil (reparse-symbol function_parameters) [30121 30123]))                          )
                        (reparse-symbol indented_block_body) [30095 30834])
                    ("restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30851 30855]))                          
                        :documentation "
        Restore the graphics context from the stack - needed only
        for backends that save graphics contexts on a stack
        ")
                        (reparse-symbol indented_block_body) [30839 31008])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31027 31031]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on
        all backends
        ")
                        (reparse-symbol indented_block_body) [31013 31174])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31199 31203]))                          )
                        (reparse-symbol indented_block_body) [31179 31314])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31336 31340]))                          
                        :documentation "
        Return the capstyle as a string in ('butt', 'round', 'projecting')
        ")
                        (reparse-symbol indented_block_body) [31319 31472])
                    ("get_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31500 31504]))                          
                        :documentation "
        Return the clip rectangle as a :class:`~matplotlib.transforms.Bbox`
        instance
        ")
                        (reparse-symbol indented_block_body) [31477 31654])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31677 31681]))                          
                        :documentation "
        Return the clip path in the form (path, transform), where path
        is a :class:`~matplotlib.path.Path` instance, and transform is
        an affine transform to apply to the path before clipping.
        ")
                        (reparse-symbol indented_block_body) [31659 32049])
                    ("get_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32069 32073]))                          
                        :documentation "
        Return the dash information as an offset dashlist tuple.

        The dash list is a even size list that gives the ink on, ink
        off in pixels.

        See p107 of to PostScript `BLUEBOOK
        <https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF>`_
        for more info.

        Default value is None
        ")
                        (reparse-symbol indented_block_body) [32054 32454])
                    ("get_forced_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32480 32484]))                          
                        :documentation "
        Return whether the value given by get_alpha() should be used to
        override any other alpha-channel values.
        ")
                        (reparse-symbol indented_block_body) [32459 32666])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32689 32693]))                          
                        :documentation "
        Return the line join style as one of ('miter', 'round', 'bevel')
        ")
                        (reparse-symbol indented_block_body) [32671 32824])
                    ("" code nil (reparse-symbol indented_block_body) [32846 32853])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32876 32880]))                          
                        :documentation "
        Return the linestyle: one of ('solid', 'dashed', 'dashdot',
        'dotted').
        ")
                        (reparse-symbol indented_block_body) [32858 33025])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33048 33052]))                          
                        :documentation "
        Return the line width in points as a scalar
        ")
                        (reparse-symbol indented_block_body) [33030 33162])
                    ("get_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33179 33183]))                          
                        :documentation "
        returns a tuple of three or four floats from 0-1.
        ")
                        (reparse-symbol indented_block_body) [33167 33293])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33310 33314]))                          
                        :documentation "
        returns a url if one is set, None otherwise
        ")
                        (reparse-symbol indented_block_body) [33298 33418])
                    ("get_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33435 33439]))                          
                        :documentation "
        Return the object identifier if one is set, None otherwise.
        ")
                        (reparse-symbol indented_block_body) [33423 33559])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33577 33581]))                          
                        :documentation "
        returns the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [33564 33908])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33927 33931])
                            ("alpha" variable nil (reparse-symbol function_parameters) [33933 33938]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on all backends.
        If ``alpha=None`` (the default), the alpha components of the
        foreground and fill colors will be used to set their respective
        transparencies (where applicable); otherwise, ``alpha`` will override
        them.
        ")
                        (reparse-symbol indented_block_body) [33913 34512])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34537 34541])
                            ("b" variable nil (reparse-symbol function_parameters) [34543 34544]))                          
                        :documentation "
        True if object should be drawn with antialiased rendering
        ")
                        (reparse-symbol indented_block_body) [34517 34813])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34835 34839])
                            ("cs" variable nil (reparse-symbol function_parameters) [34841 34843]))                          
                        :documentation "
        Set the capstyle as a string in ('butt', 'round', 'projecting')
        ")
                        (reparse-symbol indented_block_body) [34818 35109])
                    ("set_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35137 35141])
                            ("rectangle" variable nil (reparse-symbol function_parameters) [35143 35152]))                          
                        :documentation "
        Set the clip rectangle with sequence (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [35114 35289])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35312 35316])
                            ("path" variable nil (reparse-symbol function_parameters) [35318 35322]))                          
                        :documentation "
        Set the clip path and transformation.  Path should be a
        :class:`~matplotlib.transforms.TransformedPath` instance.
        ")
                        (reparse-symbol indented_block_body) [35294 35737])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35757 35761])
                            ("dash_offset" variable nil (reparse-symbol function_parameters) [35763 35774])
                            ("dash_list" variable nil (reparse-symbol function_parameters) [35776 35785]))                          
                        :documentation "
        Set the dash style for the gc.

        Parameters
        ----------
        dash_offset : float
            is the offset (usually 0).

        dash_list : array_like
            specifies the on-off sequence as points.
            ``(None, None)`` specifies a solid line

        ")
                        (reparse-symbol indented_block_body) [35742 36349])
                    ("set_foreground" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36373 36377])
                            ("fg" variable nil (reparse-symbol function_parameters) [36379 36381])
                            ("isRGBA" variable nil (reparse-symbol function_parameters) [36383 36389]))                          
                        :documentation "
        Set the foreground color.  fg can be a MATLAB format string, a
        html hex color string, an rgb or rgba unit tuple, or a float between 0
        and 1.  In the latter case, grayscale is used.

        If you know fg is rgba, set ``isRGBA=True`` for efficiency.
        ")
                        (reparse-symbol indented_block_body) [36354 36980])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37003 37007])
                            ("js" variable nil (reparse-symbol function_parameters) [37009 37011]))                          
                        :documentation "
        Set the join style to be one of ('miter', 'round', 'bevel')
        ")
                        (reparse-symbol indented_block_body) [36985 37271])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37294 37298])
                            ("w" variable nil (reparse-symbol function_parameters) [37300 37301]))                          
                        :documentation "
        Set the linewidth in points
        ")
                        (reparse-symbol indented_block_body) [37276 37399])
                    ("" code nil (reparse-symbol indented_block_body) [37421 37428])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37451 37455])
                            ("style" variable nil (reparse-symbol function_parameters) [37457 37462]))                          
                        :documentation "
        Set the linestyle to be one of ('solid', 'dashed', 'dashdot',
        'dotted'). These are defined in the rcParams
        `lines.dashed_pattern`, `lines.dashdot_pattern` and
        `lines.dotted_pattern`.  One may also specify customized dash
        styles by providing a tuple of (offset, dash pairs).
        ")
                        (reparse-symbol indented_block_body) [37433 37835])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37852 37856])
                            ("url" variable nil (reparse-symbol function_parameters) [37858 37861]))                          
                        :documentation "
        Sets the url for links in compatible backends
        ")
                        (reparse-symbol indented_block_body) [37840 37966])
                    ("set_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37983 37987])
                            ("id" variable nil (reparse-symbol function_parameters) [37989 37991]))                          
                        :documentation "
        Sets the id.
        ")
                        (reparse-symbol indented_block_body) [37971 38062])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38080 38084])
                            ("snap" variable nil (reparse-symbol function_parameters) [38086 38090]))                          
                        :documentation "
        Sets the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [38067 38414])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38433 38437])
                            ("hatch" variable nil (reparse-symbol function_parameters) [38439 38444]))                          
                        :documentation "
        Sets the hatch style for filling
        ")
                        (reparse-symbol indented_block_body) [38419 38540])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38559 38563]))                          
                        :documentation "
        Gets the current hatch style
        ")
                        (reparse-symbol indented_block_body) [38545 38654])
                    ("get_hatch_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38678 38682])
                            ("density" variable nil (reparse-symbol function_parameters) [38684 38691]))                          
                        :documentation "
        Returns a Path for the current hatch.
        ")
                        (reparse-symbol indented_block_body) [38659 38893])
                    ("get_hatch_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38918 38922]))                          
                        :documentation "
        Gets the color to use for hatching.
        ")
                        (reparse-symbol indented_block_body) [38898 39026])
                    ("set_hatch_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39051 39055])
                            ("hatch_color" variable nil (reparse-symbol function_parameters) [39057 39068]))                          
                        :documentation "
        sets the color to use for hatching.
        ")
                        (reparse-symbol indented_block_body) [39031 39179])
                    ("get_hatch_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39208 39212]))                          
                        :documentation "
        Gets the linewidth to use for hatching.
        ")
                        (reparse-symbol indented_block_body) [39184 39324])
                    ("get_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39351 39355]))                          
                        :documentation "
        Returns the sketch parameters for the artist.

        Returns
        -------
        sketch_params : tuple or `None`

        A 3-tuple with the following elements:

          * `scale`: The amplitude of the wiggle perpendicular to the
            source line.

          * `length`: The length of the wiggle along the line.

          * `randomness`: The scale factor by which the length is
            shrunken or expanded.

        May return `None` if no sketch parameters were set.
        ")
                        (reparse-symbol indented_block_body) [39329 39907])
                    ("set_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39934 39938])
                            ("scale" variable nil (reparse-symbol function_parameters) [39940 39945])
                            ("length" variable nil (reparse-symbol function_parameters) [39952 39958])
                            ("randomness" variable nil (reparse-symbol function_parameters) [39965 39975]))                          
                        :documentation "
        Sets the sketch parameters.

        Parameters
        ----------

        scale : float, optional
            The amplitude of the wiggle perpendicular to the source
            line, in pixels.  If scale is `None`, or not provided, no
            sketch filter will be provided.

        length : float, optional
             The length of the wiggle along the line, in pixels
             (default 128)

        randomness : float, optional
            The scale factor by which the length is shrunken or
            expanded (default 16)
        ")
                        (reparse-symbol indented_block_body) [39912 40678]))                  
                :type "class")
                nil [29246 40678])
            ("TimerBase" type
               (:superclasses ("object")
                :members 
                  ( ("'''
    A base class for providing timer events, useful for things animations.
    Backends need to implement a few specific methods in order to use their
    own timing mechanisms so that the timer events are integrated into their
    event loops.

    Mandatory functions that must be implemented:

        * `_timer_start`: Contains backend-specific code for starting
          the timer

        * `_timer_stop`: Contains backend-specific code for stopping
          the timer

    Optional overrides:

        * `_timer_set_single_shot`: Code for setting the timer to
          single shot operating mode, if supported by the timer
          object. If not, the `Timer` class itself will store the flag
          and the `_on_timer` method should be overridden to support
          such behavior.

        * `_timer_set_interval`: Code for setting the interval on the
          timer, if there is a method for doing so on the timer
          object.

        * `_on_timer`: This is the internal function that any timer
          object should call, which will handle the task of running
          all callbacks that have been set.

    Attributes
    ----------
    interval : scalar
        The time between timer events in milliseconds. Default is 1000 ms.

    single_shot : bool
        Boolean flag indicating whether this timer should operate as single
        shot (run once and then stop). Defaults to `False`.

    callbacks : List[Tuple[callable, Tuple, Dict]]
        Stores list of (func, args, kwargs) tuples that will be called upon
        timer events. This list can be manipulated directly, or the
        functions `add_callback` and `remove_callback` can be used.

    '''" code nil (reparse-symbol indented_block_body) [40709 42405])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [42549 42676])
                            ("if" code nil (reparse-symbol indented_block_body) [42685 42792])
                            ("self" variable nil (reparse-symbol indented_block_body) [42801 42821])
                            ("self" variable nil (reparse-symbol indented_block_body) [42901 42919]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42423 42427])
                            ("interval" variable nil (reparse-symbol function_parameters) [42429 42437])
                            ("callbacks" variable nil (reparse-symbol function_parameters) [42444 42453]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42410 42920])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42937 42941]))                          )
                        (reparse-symbol indented_block_body) [42925 43031])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43046 43050])
                            ("interval" variable nil (reparse-symbol function_parameters) [43052 43060]))                          )
                        (reparse-symbol indented_block_body) [43036 43321])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43335 43339]))                          )
                        (reparse-symbol indented_block_body) [43326 43417])
                    ("_timer_start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43439 43443]))                          )
                        (reparse-symbol indented_block_body) [43422 43459])
                    ("_timer_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43480 43484]))                          )
                        (reparse-symbol indented_block_body) [43464 43500])
                    ("_get_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43523 43527]))                          )
                        (reparse-symbol indented_block_body) [43505 43560])
                    ("_set_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43583 43587])
                            ("interval" variable nil (reparse-symbol function_parameters) [43589 43597]))                          )
                        (reparse-symbol indented_block_body) [43565 43837])
                    ("interval" variable nil (reparse-symbol indented_block_body) [43842 43891])
                    ("_get_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43918 43922]))                          )
                        (reparse-symbol indented_block_body) [43897 43953])
                    ("_set_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43979 43983])
                            ("ss" variable nil (reparse-symbol function_parameters) [43985 43987]))                          )
                        (reparse-symbol indented_block_body) [43958 44059])
                    ("single_shot" variable nil (reparse-symbol indented_block_body) [44064 44122])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44145 44149])
                            ("func" variable nil (reparse-symbol function_parameters) [44151 44155])
                            ("args" variable nil (reparse-symbol function_parameters) [44157 44162])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44164 44172]))                          )
                        (reparse-symbol indented_block_body) [44128 44387])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44412 44416])
                            ("func" variable nil (reparse-symbol function_parameters) [44418 44422])
                            ("args" variable nil (reparse-symbol function_parameters) [44424 44429])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44431 44439]))                          )
                        (reparse-symbol indented_block_body) [44392 44903])
                    ("_timer_set_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44932 44936]))                          
                        :documentation "Used to set interval on underlying timer object.")
                        (reparse-symbol indented_block_body) [44908 45002])
                    ("_timer_set_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45034 45038]))                          
                        :documentation "Used to set single shot on underlying timer object.")
                        (reparse-symbol indented_block_body) [45007 45107])
                    ("_on_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45126 45130]))                          )
                        (reparse-symbol indented_block_body) [45112 45909]))                  
                :type "class")
                nil [40680 45909])
            ("Event" type
               (:documentation "
    A matplotlib event.  Attach additional attributes as defined in
    :meth:`FigureCanvasBase.mpl_connect`.  The following attributes
    are defined and shown with their default values

    Attributes
    ----------
    name : str
        the event name

    canvas : `FigureCanvasBase`
        the backend-specific canvas instance generating the event

    guiEvent
        the GUI event that triggered the matplotlib event

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [46438 46454])
                            ("self" variable nil (reparse-symbol indented_block_body) [46463 46483])
                            ("self" variable nil (reparse-symbol indented_block_body) [46492 46516]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46394 46398])
                            ("name" variable nil (reparse-symbol function_parameters) [46400 46404])
                            ("canvas" variable nil (reparse-symbol function_parameters) [46406 46412])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [46414 46422]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46381 46517]))                  
                :type "class")
                nil [45911 46517])
            ("" code nil nil [46536 46543])
            ("IdleEvent" type
               (:documentation "
    An event triggered by the GUI backend when it is idle -- useful
    for passive animation
    "
                :superclasses ("Event")
                :type "class")
                nil [46544 46678])
            ("DrawEvent" type
               (:documentation "
    An event triggered by a draw operation on the canvas

    In most backends callbacks subscribed to this callback will be
    fired after the rendering is complete but before the screen is
    updated.  Any extra artists drawn to the canvas's renderer will
    be reflected without an explicit call to ``blit``.

    .. warning ::

       Calling ``canvas.draw`` and ``canvas.blit`` in these callbacks may
       not be safe with all backends and may cause infinite recursion.

    In addition to the :class:`Event` attributes, the following event
    attributes are defined:

    Attributes
    ----------
    renderer : `RendererBase`
        the renderer for the draw event

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [47457 47491])
                            ("self" variable nil (reparse-symbol indented_block_body) [47500 47524]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47418 47422])
                            ("name" variable nil (reparse-symbol function_parameters) [47424 47428])
                            ("canvas" variable nil (reparse-symbol function_parameters) [47430 47436])
                            ("renderer" variable nil (reparse-symbol function_parameters) [47438 47446]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47405 47525]))                  
                :type "class")
                nil [46680 47525])
            ("ResizeEvent" type
               (:documentation "
    An event triggered by a canvas resize

    In addition to the :class:`Event` attributes, the following event
    attributes are defined:

    Attributes
    ----------
    width : scalar
        width of the canvas in pixels

    height : scalar
        height of the canvas in pixels

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [47905 47939])
                            ("self, self" code nil (reparse-symbol indented_block_body) [47948 47999]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47876 47880])
                            ("name" variable nil (reparse-symbol function_parameters) [47882 47886])
                            ("canvas" variable nil (reparse-symbol function_parameters) [47888 47894]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47863 48000]))                  
                :type "class")
                nil [47527 48000])
            ("CloseEvent" type
               (:documentation "
    An event triggered by a figure being closed

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [48153 48197]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48109 48113])
                            ("name" variable nil (reparse-symbol function_parameters) [48115 48119])
                            ("canvas" variable nil (reparse-symbol function_parameters) [48121 48127])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [48129 48137]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48096 48198]))                  
                :type "class")
                nil [48002 48198])
            ("LocationEvent" type
               (:documentation "
    An event that has a screen location

    The following additional attributes are defined and shown with
    their default values.

    In addition to the :class:`Event` attributes, the following
    event attributes are defined:

    Attributes
    ----------
    x : scalar
        x position - pixels from left of canvas

    y : scalar
        y position - pixels from bottom of canvas

    inaxes : bool
        the :class:`~matplotlib.axes.Axes` instance if mouse is over axes

    xdata : scalar
        x coord of mouse in data coords

    ydata : scalar
        y coord of mouse in data coords

    "
                :superclasses ("Event")
                :members 
                  ( ("x" variable nil (reparse-symbol indented_block_body) [48855 48863])
                    ("y" variable nil (reparse-symbol indented_block_body) [48916 48924])
                    ("inaxes" variable nil (reparse-symbol indented_block_body) [48978 48991])
                    ("xdata" variable nil (reparse-symbol indented_block_body) [49039 49051])
                    ("ydata" variable nil (reparse-symbol indented_block_body) [49092 49104])
                    ("lastevent" variable nil (reparse-symbol indented_block_body) [49202 49218])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *x*, *y* in figure coords, 0,0 = bottom, left
        \"\"\"" code nil (reparse-symbol indented_block_body) [49287 49356])
                            ("Event" code nil (reparse-symbol indented_block_body) [49365 49418])
                            ("self" variable nil (reparse-symbol indented_block_body) [49427 49437])
                            ("self" variable nil (reparse-symbol indented_block_body) [49446 49456])
                            ("if" code nil (reparse-symbol indented_block_body) [49466 49645])
                            ("if" code nil (reparse-symbol indented_block_body) [49699 49914])
                            ("if" code nil (reparse-symbol indented_block_body) [49923 50363])
                            ("self" code nil (reparse-symbol indented_block_body) [50372 50398]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49237 49241])
                            ("name" variable nil (reparse-symbol function_parameters) [49243 49247])
                            ("canvas" variable nil (reparse-symbol function_parameters) [49249 49255])
                            ("x" variable nil (reparse-symbol function_parameters) [49257 49258])
                            ("y" variable nil (reparse-symbol function_parameters) [49260 49261])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [49263 49271]))                          
                        :documentation "
        *x*, *y* in figure coords, 0,0 = bottom, left
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49224 50399])
                    ("_update_enter_leave" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50428 50432]))                          )
                        (reparse-symbol indented_block_body) [50404 51490]))                  
                :type "class")
                nil [48200 51490])
            ("MouseEvent" type
               (:documentation "
    A mouse event ('button_press_event',
                   'button_release_event',
                   'scroll_event',
                   'motion_notify_event').

    In addition to the :class:`Event` and :class:`LocationEvent`
    attributes, the following attributes are defined:

    Attributes
    ----------
    button : None, scalar, or str
        button pressed None, 1, 2, 3, 'up', 'down' (up and down are used
        for scroll events).  Note that in the nbagg backend, both the
        middle and right clicks return 3 since right clicking will bring
        up the context menu in some browsers.

    key : None, or str
        the key depressed when the mouse event triggered (see
        :class:`KeyEvent`)

    step : scalar
        number of scroll steps (positive for 'up', negative for 'down')

    Examples
    --------
    Usage::

        def on_press(event):
            print('you pressed', event.button, event.xdata, event.ydata)

        cid = fig.canvas.mpl_connect('button_press_event', on_press)

    "
                :superclasses ("LocationEvent")
                :members 
                  ( ("x" variable nil (reparse-symbol indented_block_body) [52571 52579])
                    ("y" variable nil (reparse-symbol indented_block_body) [52634 52642])
                    ("button" variable nil (reparse-symbol indented_block_body) [52698 52711])
                    ("dblclick" variable nil (reparse-symbol indented_block_body) [52750 52765])
                    ("inaxes" variable nil (reparse-symbol indented_block_body) [52830 52843])
                    ("xdata" variable nil (reparse-symbol indented_block_body) [52893 52905])
                    ("ydata" variable nil (reparse-symbol indented_block_body) [52948 52960])
                    ("step" variable nil (reparse-symbol indented_block_body) [53003 53014])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        x, y in figure coords, 0,0 = bottom, left
        button pressed None, 1, 2, 3, 'up', 'down'
        \"\"\"" code nil (reparse-symbol indented_block_body) [53185 53301])
                            ("LocationEvent" code nil (reparse-symbol indented_block_body) [53310 53377])
                            ("self" variable nil (reparse-symbol indented_block_body) [53386 53406])
                            ("self" variable nil (reparse-symbol indented_block_body) [53415 53429])
                            ("self" variable nil (reparse-symbol indented_block_body) [53438 53454])
                            ("self" variable nil (reparse-symbol indented_block_body) [53463 53487]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53071 53075])
                            ("name" variable nil (reparse-symbol function_parameters) [53077 53081])
                            ("canvas" variable nil (reparse-symbol function_parameters) [53083 53089])
                            ("x" variable nil (reparse-symbol function_parameters) [53091 53092])
                            ("y" variable nil (reparse-symbol function_parameters) [53094 53095])
                            ("button" variable nil (reparse-symbol function_parameters) [53097 53103])
                            ("key" variable nil (reparse-symbol function_parameters) [53110 53113])
                            ("step" variable nil (reparse-symbol function_parameters) [53137 53141])
                            ("dblclick" variable nil (reparse-symbol function_parameters) [53145 53153])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [53161 53169]))                          
                        :documentation "
        x, y in figure coords, 0,0 = bottom, left
        button pressed None, 1, 2, 3, 'up', 'down'
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53058 53488])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53505 53509]))                          )
                        (reparse-symbol indented_block_body) [53493 53798]))                  
                :type "class")
                nil [51492 53798])
            ("PickEvent" type
               (:documentation "
    a pick event, fired when the user picks a location on the canvas
    sufficiently close to an artist.

    Attrs: all the :class:`Event` attributes plus

    Attributes
    ----------
    mouseevent : `MouseEvent`
        the mouse event that generated the pick

    artist : `matplotlib.artist.Artist`
        the picked artist

    other
        extra class dependent attrs -- e.g., a
        :class:`~matplotlib.lines.Line2D` pick may define different
        extra attributes than a
        :class:`~matplotlib.collections.PatchCollection` pick event

    Examples
    --------
    Usage::

        ax.plot(np.rand(100), 'o', picker=5)  # 5 points tolerance

        def on_pick(event):
            line = event.artist
            xdata, ydata = line.get_data()
            ind = event.ind
            print('on pick line:', np.array([xdata[ind], ydata[ind]]).T)

        cid = fig.canvas.mpl_connect('pick_event', on_pick)

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [54881 54925])
                            ("self" variable nil (reparse-symbol indented_block_body) [54934 54962])
                            ("self" variable nil (reparse-symbol indented_block_body) [54971 54991])
                            ("self" code nil (reparse-symbol indented_block_body) [55000 55028]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54790 54794])
                            ("name" variable nil (reparse-symbol function_parameters) [54796 54800])
                            ("canvas" variable nil (reparse-symbol function_parameters) [54802 54808])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [54810 54820])
                            ("artist" variable nil (reparse-symbol function_parameters) [54822 54828])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [54847 54855])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [54862 54870]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54777 55029]))                  
                :type "class")
                nil [53800 55029])
            ("KeyEvent" type
               (:documentation "
    A key event (key press, key release).

    Attach additional attributes as defined in
    :meth:`FigureCanvasBase.mpl_connect`.

    In addition to the :class:`Event` and :class:`LocationEvent`
    attributes, the following attributes are defined:

    Attributes
    ----------
    key : None or str
        the key(s) pressed. Could be **None**, a single case sensitive ascii
        character (\"g\", \"G\", \"#\", etc.), a special key
        (\"control\", \"shift\", \"f1\", \"up\", etc.) or a
        combination of the above (e.g., \"ctrl+alt+g\", \"ctrl+alt+G\").

    Notes
    -----
    Modifier keys will be prefixed to the pressed key and will be in the order
    \"ctrl\", \"alt\", \"super\". The exception to this rule is when the pressed key
    is itself a modifier key, therefore \"ctrl+alt\" and \"alt+control\" can both
    be valid key values.

    Examples
    --------
    Usage::

        def on_key(event):
            print('you pressed', event.key, event.xdata, event.ydata)

        cid = fig.canvas.mpl_connect('key_press_event', on_key)

    "
                :superclasses ("LocationEvent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("LocationEvent" code nil (reparse-symbol indented_block_body) [56197 56264])
                            ("self" variable nil (reparse-symbol indented_block_body) [56273 56287]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56138 56142])
                            ("name" variable nil (reparse-symbol function_parameters) [56144 56148])
                            ("canvas" variable nil (reparse-symbol function_parameters) [56150 56156])
                            ("key" variable nil (reparse-symbol function_parameters) [56158 56161])
                            ("x" variable nil (reparse-symbol function_parameters) [56163 56164])
                            ("y" variable nil (reparse-symbol function_parameters) [56168 56169])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [56173 56181]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56125 56288]))                  
                :type "class")
                nil [55031 56288])
            ("FigureCanvasBase" type
               (:documentation "
    The canvas the figure renders into.

    Public attributes

    Attributes
    ----------
    figure : `matplotlib.figure.Figure`
        A high-level figure instance

    "
                :superclasses ("object")
                :members 
                  ( ("events" variable nil (reparse-symbol indented_block_body) [56514 56931])
                    ("supports_blit" variable nil (reparse-symbol indented_block_body) [56937 56957])
                    ("fixed_dpi" variable nil (reparse-symbol indented_block_body) [56962 56978])
                    ("filetypes" variable nil (reparse-symbol indented_block_body) [56984 57014])
                    ("if" code nil (reparse-symbol indented_block_body) [57019 57576])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [57617 57645])
                            ("self" variable nil (reparse-symbol indented_block_body) [57654 57677])
                            ("figure" code nil (reparse-symbol indented_block_body) [57686 57709])
                            ("self" variable nil (reparse-symbol indented_block_body) [57718 57738])
                            ("self" variable nil (reparse-symbol indented_block_body) [57822 57863])
                            ("self" variable nil (reparse-symbol indented_block_body) [57872 57908])
                            ("self" variable nil (reparse-symbol indented_block_body) [57917 57936])
                            ("self" variable nil (reparse-symbol indented_block_body) [57967 57983])
                            ("self, self" code nil (reparse-symbol indented_block_body) [58011 58048])
                            ("self" variable nil (reparse-symbol indented_block_body) [58057 58128])
                            ("self" variable nil (reparse-symbol indented_block_body) [58137 58202])
                            ("self" variable nil (reparse-symbol indented_block_body) [58211 58236])
                            ("self" variable nil (reparse-symbol indented_block_body) [58282 58301])
                            ("self" variable nil (reparse-symbol indented_block_body) [58344 58373]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57594 57598])
                            ("figure" variable nil (reparse-symbol function_parameters) [57600 57606]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [57581 58374])
                    ("_idle_draw_cntx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58419 58423]))                          
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58379 58515])
                    ("is_saving" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58534 58538]))                          
                        :documentation "
        Returns whether the renderer is in the process of saving
        to a file, rather than rendering for an on-screen buffer.
        ")
                        (reparse-symbol indented_block_body) [58520 58727])
                    ("" code nil (reparse-symbol indented_block_body) [58749 58756])
                    ("onRemove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58774 58778])
                            ("ev" variable nil (reparse-symbol function_parameters) [58780 58782]))                          
                        :documentation "
        Mouse event processor which removes the top artist
        under the cursor.  Connect this to the 'mouse_press_event'
        using::

            canvas.mpl_connect('mouse_press_event',canvas.onRemove)
        ")
                        (reparse-symbol indented_block_body) [58761 59558])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59572 59576])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [59578 59588]))                          )
                        (reparse-symbol indented_block_body) [59563 59673])
                    ("blit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59687 59691])
                            ("bbox" variable nil (reparse-symbol function_parameters) [59693 59697]))                          
                        :documentation "Blit the canvas in bbox (default entire canvas).")
                        (reparse-symbol indented_block_body) [59678 59768])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59784 59788])
                            ("w" variable nil (reparse-symbol function_parameters) [59790 59791])
                            ("h" variable nil (reparse-symbol function_parameters) [59793 59794]))                          
                        :documentation "Set the canvas size in pixels.")
                        (reparse-symbol indented_block_body) [59773 59842])
                    ("draw_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59862 59866])
                            ("renderer" variable nil (reparse-symbol function_parameters) [59868 59876]))                          
                        :documentation "Pass a `DrawEvent` to all functions connected to ``draw_event``.")
                        (reparse-symbol indented_block_body) [59847 60069])
                    ("resize_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60091 60095]))                          
                        :documentation "Pass a `ResizeEvent` to all functions connected to ``resize_event``.
        ")
                        (reparse-symbol indented_block_body) [60074 60320])
                    ("close_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60341 60345])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [60347 60355]))                          
                        :documentation "Pass a `CloseEvent` to all functions connected to ``close_event``.
        ")
                        (reparse-symbol indented_block_body) [60325 60657])
                    ("key_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61028 61032])
                            ("key" variable nil (reparse-symbol function_parameters) [61034 61037])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [61039 61047]))                          
                        :documentation "Pass a `KeyEvent` to all functions connected to ``key_press_event``.
        ")
                        (reparse-symbol indented_block_body) [61008 61339])
                    ("key_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61366 61370])
                            ("key" variable nil (reparse-symbol function_parameters) [61372 61375])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [61377 61385]))                          
                        :documentation "
        Pass a `KeyEvent` to all functions connected to ``key_release_event``.
        ")
                        (reparse-symbol indented_block_body) [61344 61691])
                    ("pick_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61711 61715])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [61717 61727])
                            ("artist" variable nil (reparse-symbol function_parameters) [61729 61735])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [61737 61745]))                          
                        :documentation "
        This method will be called by artists who are picked and will
        fire off :class:`PickEvent` callbacks registered listeners
        ")
                        (reparse-symbol indented_block_body) [61696 62122])
                    ("scroll_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62144 62148])
                            ("x" variable nil (reparse-symbol function_parameters) [62150 62151])
                            ("y" variable nil (reparse-symbol function_parameters) [62153 62154])
                            ("step" variable nil (reparse-symbol function_parameters) [62156 62160])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [62162 62170]))                          
                        :documentation "
        Backend derived classes should call this function on any
        scroll wheel event.  x,y are the canvas coords: 0,0 is lower,
        left.  button and key are as defined in MouseEvent.

        This method will be call all functions connected to the
        'scroll_event' with a :class:`MouseEvent` instance.
        ")
                        (reparse-symbol indented_block_body) [62127 62831])
                    ("button_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62859 62863])
                            ("x" variable nil (reparse-symbol function_parameters) [62865 62866])
                            ("y" variable nil (reparse-symbol function_parameters) [62868 62869])
                            ("button" variable nil (reparse-symbol function_parameters) [62871 62877])
                            ("dblclick" variable nil (reparse-symbol function_parameters) [62879 62887])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [62895 62903]))                          
                        :documentation "
        Backend derived classes should call this function on any mouse
        button press.  x,y are the canvas coords: 0,0 is lower, left.
        button and key are as defined in :class:`MouseEvent`.

        This method will be call all functions connected to the
        'button_press_event' with a :class:`MouseEvent` instance.
        ")
                        (reparse-symbol indented_block_body) [62836 63514])
                    ("button_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63544 63548])
                            ("x" variable nil (reparse-symbol function_parameters) [63550 63551])
                            ("y" variable nil (reparse-symbol function_parameters) [63553 63554])
                            ("button" variable nil (reparse-symbol function_parameters) [63556 63562])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [63564 63572]))                          
                        :documentation "
        Backend derived classes should call this function on any mouse
        button release.

        This method will call all functions connected to the
        'button_release_event' with a :class:`MouseEvent` instance.

        Parameters
        ----------
        x : scalar
            the canvas coordinates where 0=left

        y : scalar
            the canvas coordinates where 0=bottom

        guiEvent
            the native UI event that generated the mpl event

        ")
                        (reparse-symbol indented_block_body) [63519 64269])
                    ("motion_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64298 64302])
                            ("x" variable nil (reparse-symbol function_parameters) [64304 64305])
                            ("y" variable nil (reparse-symbol function_parameters) [64307 64308])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [64310 64318]))                          
                        :documentation "
        Backend derived classes should call this function on any
        motion-notify-event.

        This method will call all functions connected to the
        'motion_notify_event' with a :class:`MouseEvent` instance.

        Parameters
        ----------
        x : scalar
            the canvas coordinates where 0=left

        y : scalar
            the canvas coordinates where 0=bottom

        guiEvent
            the native UI event that generated the mpl event

        ")
                        (reparse-symbol indented_block_body) [64274 65057])
                    ("leave_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65085 65089])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [65091 65099]))                          
                        :documentation "
        Backend derived classes should call this function when leaving
        canvas

        Parameters
        ----------
        guiEvent
            the native UI event that generated the mpl event

        ")
                        (reparse-symbol indented_block_body) [65062 65499])
                    ("enter_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65527 65531])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [65533 65541])
                            ("xy" variable nil (reparse-symbol function_parameters) [65548 65550]))                          
                        :documentation "
        Backend derived classes should call this function when entering
        canvas

        Parameters
        ----------
        guiEvent
            the native UI event that generated the mpl event
        xy : tuple of 2 scalars
            the coordinate location of the pointer when the canvas is
            entered

        ")
                        (reparse-symbol indented_block_body) [65504 66123])
                    ("" code nil (reparse-symbol indented_block_body) [66145 66152])
                    ("idle_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66172 66176])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [66178 66186]))                          
                        :documentation "Called when GUI is idle.")
                        (reparse-symbol indented_block_body) [66157 66353])
                    ("grab_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66373 66377])
                            ("ax" variable nil (reparse-symbol function_parameters) [66379 66381]))                          
                        :documentation "
        Set the child axes which are currently grabbing the mouse events.
        Usually called by the widgets themselves.
        It is an error to call this if the mouse is already grabbed by
        another axes.
        ")
                        (reparse-symbol indented_block_body) [66358 66779])
                    ("release_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66802 66806])
                            ("ax" variable nil (reparse-symbol function_parameters) [66808 66810]))                          
                        :documentation "
        Release the mouse grab held by the axes, ax.
        Usually called by the widgets.
        It is ok to call this even if you ax doesn't have the mouse
        grab currently.
        ")
                        (reparse-symbol indented_block_body) [66784 67096])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67110 67114])
                            ("args" variable nil (reparse-symbol function_parameters) [67116 67121])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [67123 67131]))                          
                        :documentation "Render the :class:`~matplotlib.figure.Figure`.")
                        (reparse-symbol indented_block_body) [67101 67195])
                    ("draw_idle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67214 67218])
                            ("args" variable nil (reparse-symbol function_parameters) [67220 67225])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [67227 67235]))                          
                        :documentation "
        :meth:`draw` only if idle; defaults to draw but backends can override
        ")
                        (reparse-symbol indented_block_body) [67200 67462])
                    ("draw_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67483 67487])
                            ("event" variable nil (reparse-symbol function_parameters) [67489 67494]))                          
                        :documentation "
        Draw a cursor in the event.axes if inaxes is not None.  Use
        native GUI drawing for efficiency if possible
        ")
                        (reparse-symbol indented_block_body) [67467 67643])
                    ("get_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67669 67673]))                          
                        :documentation "
        Return the figure width and height in points or pixels
        (depending on the backend), truncated to integers
        ")
                        (reparse-symbol indented_block_body) [67648 67894])
                    ("get_supported_filetypes" function
                       (:documentation "Return dict of savefig file formats supported by this backend"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [67944 67947]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [67899 68055])
                    ("get_supported_filetypes_grouped" function
                       (:documentation "Return a dict of savefig file formats supported by this backend,
        where the keys are a file type name, such as 'Joint Photographic
        Experts Group', and the values are a list of filename extensions used
        for that filetype, such as ['jpg', 'jpeg']."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [68113 68116]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [68060 68594])
                    ("_get_output_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68622 68626])
                            ("fmt" variable nil (reparse-symbol function_parameters) [68628 68631]))                          
                        :documentation "
        Return a canvas suitable for saving figures to a specified file format.

        If necessary, this function will switch to a registered backend that
        supports the format.
        ")
                        (reparse-symbol indented_block_body) [68599 69451])
                    ("print_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69473 69477])
                            ("filename" variable nil (reparse-symbol function_parameters) [69479 69487])
                            ("dpi" variable nil (reparse-symbol function_parameters) [69489 69492])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [69499 69508])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [69515 69524])
                            ("orientation" variable nil (reparse-symbol function_parameters) [69552 69563])
                            ("format" variable nil (reparse-symbol function_parameters) [69576 69582])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [69589 69597]))                          
                        :documentation "
        Render the figure to hardcopy. Set the figure patch face and edge
        colors.  This is useful because some of the GUIs have a gray figure
        face color background and you'll probably want to override this on
        hardcopy.

        Parameters
        ----------
        filename
            can also be a file object on image backends

        orientation : {'landscape', 'portrait'}, optional
            only currently applies to PostScript printing.

        dpi : scalar, optional
            the dots per inch to save the figure in; if None, use savefig.dpi

        facecolor : color spec or None, optional
            the facecolor of the figure; if None, defaults to savefig.facecolor

        edgecolor : color spec or None, optional
            the edgecolor of the figure; if None, defaults to savefig.edgecolor

        format : str, optional
            when set, forcibly set the file format to save to

        bbox_inches : str or `~matplotlib.transforms.Bbox`, optional
            Bbox in inches. Only the given portion of the figure is
            saved. If 'tight', try to figure out the tight bbox of
            the figure. If None, use savefig.bbox

        pad_inches : scalar, optional
            Amount of padding around the figure when bbox_inches is
            'tight'. If None, use savefig.pad_inches

        bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional
            A list of extra artists that will be considered when the
            tight bbox is calculated.

        ")
                        (reparse-symbol indented_block_body) [69456 76359])
                    ("get_default_filetype" function
                       (:documentation "
        Get the default savefig file format as specified in rcParam
        ``savefig.format``. Returned string excludes period. Overridden
        in backends that only support a single file type.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [76406 76409]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [76364 76676])
                    ("get_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76702 76706]))                          
                        :documentation "
        Get the title text of the window containing the figure.
        Return None if there is no window (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [76681 76949])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76975 76979])
                            ("title" variable nil (reparse-symbol function_parameters) [76981 76986]))                          
                        :documentation "
        Set the title text of the window containing the figure.  Note that
        this has no effect if there is no window (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [76954 77245])
                    ("get_default_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77275 77279]))                          
                        :documentation "
        Return a string, which includes extension, suitable for use as
        a default filename.
        ")
                        (reparse-symbol indented_block_body) [77250 78069])
                    ("switch_backends" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78094 78098])
                            ("FigureCanvasClass" variable nil (reparse-symbol function_parameters) [78100 78117]))                          
                        :documentation "
        Instantiate an instance of FigureCanvasClass

        This is used for backend switching, e.g., to instantiate a
        FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is
        not done, so any changes to one of the instances (e.g., setting
        figure size or line props), will be reflected in the other
        ")
                        (reparse-symbol indented_block_body) [78074 78597])
                    ("mpl_connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78618 78622])
                            ("s" variable nil (reparse-symbol function_parameters) [78624 78625])
                            ("func" variable nil (reparse-symbol function_parameters) [78627 78631]))                          
                        :documentation "
        Connect event with string *s* to *func*.  The signature of *func* is::

          def func(event)

        where event is a :class:`matplotlib.backend_bases.Event`.  The
        following events are recognized

        - 'button_press_event'
        - 'button_release_event'
        - 'draw_event'
        - 'key_press_event'
        - 'key_release_event'
        - 'motion_notify_event'
        - 'pick_event'
        - 'resize_event'
        - 'scroll_event'
        - 'figure_enter_event',
        - 'figure_leave_event',
        - 'axes_enter_event',
        - 'axes_leave_event'
        - 'close_event'

        For the location events (button and key press/release), if the
        mouse is over the axes, the variable ``event.inaxes`` will be
        set to the :class:`~matplotlib.axes.Axes` the event occurs is
        over, and additionally, the variables ``event.xdata`` and
        ``event.ydata`` will be defined.  This is the mouse location
        in data coords.  See
        :class:`~matplotlib.backend_bases.KeyEvent` and
        :class:`~matplotlib.backend_bases.MouseEvent` for more info.

        Return value is a connection id that can be used with
        :meth:`~matplotlib.backend_bases.Event.mpl_disconnect`.

        Examples
        --------
        Usage::

            def on_press(event):
                print('you pressed', event.button, event.xdata, event.ydata)

            cid = canvas.mpl_connect('button_press_event', on_press)

        ")
                        (reparse-symbol indented_block_body) [78602 80434])
                    ("mpl_disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80458 80462])
                            ("cid" variable nil (reparse-symbol function_parameters) [80464 80467]))                          
                        :documentation "
        Disconnect callback id cid

        Examples
        --------
        Usage::

            cid = canvas.mpl_connect('button_press_event', on_press)
            #...later
            canvas.mpl_disconnect(cid)
        ")
                        (reparse-symbol indented_block_body) [80439 80757])
                    ("new_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80776 80780])
                            ("args" variable nil (reparse-symbol function_parameters) [80782 80787])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [80789 80797]))                          
                        :documentation "
        Creates a new backend-specific subclass of
        :class:`backend_bases.Timer`. This is useful for getting periodic
        events through the backend's native event loop. Implemented only for
        backends with GUIs.

        Other Parameters
        ----------------
        interval : scalar
            Timer interval in milliseconds

        callbacks : List[Tuple[callable, Tuple, Dict]]
            Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``
            will be executed by the timer every *interval*.

            callbacks which return ``False`` or ``0`` will be removed from the
            timer.

        Examples
        --------

        >>> timer = fig.canvas.new_timer(callbacks=[(f1, (1, ), {'a': 3}),])

        ")
                        (reparse-symbol indented_block_body) [80762 81622])
                    ("flush_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81644 81648]))                          
                        :documentation "Flush the GUI events for the figure.

        Interactive backends need to reimplement this method.
        ")
                        (reparse-symbol indented_block_body) [81627 81774])
                    ("start_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81800 81804])
                            ("timeout" variable nil (reparse-symbol function_parameters) [81806 81813]))                          
                        :documentation "Start a blocking event loop.

        Such an event loop is used by interactive functions, such as `ginput`
        and `waitforbuttonpress`, to wait for events.

        The event loop blocks until a callback function triggers
        `stop_event_loop`, or *timeout* is reached.

        If *timeout* is negative, never timeout.

        Only interactive backends need to reimplement this method and it relies
        on `flush_events` being properly implemented.

        Interactive backends should implement this in a more native way.
        ")
                        (reparse-symbol indented_block_body) [81779 82659])
                    ("stop_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82684 82688]))                          
                        :documentation "Stop the current blocking event loop.

        Interactive backends need to reimplement this to match
        `start_event_loop`
        ")
                        (reparse-symbol indented_block_body) [82664 82873])
                    ("start_event_loop_default" variable nil (reparse-symbol indented_block_body) [82878 82988])
                    ("stop_event_loop_default" variable nil (reparse-symbol indented_block_body) [82993 83100]))                  
                :type "class")
                nil [56290 83101])
            ("key_press_handler" function
               (:documentation "
    Implement the default mpl key bindings for the canvas and toolbar
    described at :ref:`key-event-handling`

    Parameters
    ----------
    event : :class:`KeyEvent`
        a key press/release event
    canvas : :class:`FigureCanvasBase`
        the backend-specific canvas instance
    toolbar : :class:`NavigationToolbar2`
        the navigation cursor toolbar

    "
                :arguments 
                  ( ("event" variable nil (reparse-symbol function_parameters) [83125 83130])
                    ("canvas" variable nil (reparse-symbol function_parameters) [83132 83138])
                    ("toolbar" variable nil (reparse-symbol function_parameters) [83140 83147]))                  )
                nil [83103 89762])
            ("NonGuiException" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [89802 89806]))                  
                :type "class")
                nil [89764 89807])
            ("FigureManagerBase" type
               (:documentation "
    Helper class for pyplot mode, wraps everything up into a neat bundle

    Attributes
    ----------
    canvas : :class:`FigureCanvasBase`
        The backend-specific canvas instance

    num : int or str
        The figure number

    key_press_handler_id : int
        The default key handler cid, when using the toolmanager.  Can be used
        to disable default key press handling ::

            figure.canvas.mpl_disconnect(
                figure.canvas.manager.key_press_handler_id)
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [90401 90421])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [90430 90451])
                            ("self" variable nil (reparse-symbol indented_block_body) [90489 90503])
                            ("self" variable nil (reparse-symbol indented_block_body) [90513 90545])
                            ("if" code nil (reparse-symbol indented_block_body) [90554 90727]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90373 90377])
                            ("canvas" variable nil (reparse-symbol function_parameters) [90379 90385])
                            ("num" variable nil (reparse-symbol function_parameters) [90387 90390]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [90360 90727])
                    ("show" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90741 90745]))                          
                        :documentation "
        For GUI backends, show the figure window and redraw.
        For non-GUI backends, raise an exception to be caught
        by :meth:`~matplotlib.figure.Figure.show`, for an
        optional warning.
        ")
                        (reparse-symbol indented_block_body) [90732 91011])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91028 91032]))                          )
                        (reparse-symbol indented_block_body) [91016 91048])
                    ("full_screen_toggle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91076 91080]))                          )
                        (reparse-symbol indented_block_body) [91053 91096])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91112 91116])
                            ("w" variable nil (reparse-symbol function_parameters) [91118 91119])
                            ("h" variable nil (reparse-symbol function_parameters) [91121 91122]))                          
                        :documentation "\"For GUI backends, resize the window (in pixels).")
                        (reparse-symbol indented_block_body) [91101 91189])
                    ("key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91208 91212])
                            ("event" variable nil (reparse-symbol function_parameters) [91214 91219]))                          
                        :documentation "
        Implement the default mpl key bindings defined at
        :ref:`key-event-handling`
        ")
                        (reparse-symbol indented_block_body) [91194 91458])
                    ("" code nil (reparse-symbol indented_block_body) [91480 91487])
                    ("show_popup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91507 91511])
                            ("msg" variable nil (reparse-symbol function_parameters) [91513 91516]))                          
                        :documentation "Display message in a popup -- GUI only.")
                        (reparse-symbol indented_block_body) [91492 91573])
                    ("get_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91599 91603]))                          
                        :documentation "Get the title text of the window containing the figure.

        Return None for non-GUI (e.g., PS) backends.
        ")
                        (reparse-symbol indented_block_body) [91578 91762])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91788 91792])
                            ("title" variable nil (reparse-symbol function_parameters) [91794 91799]))                          
                        :documentation "Set the title text of the window containing the figure.

        This has no effect for non-GUI (e.g., PS) backends.
        ")
                        (reparse-symbol indented_block_body) [91767 91942]))                  
                :type "class")
                nil [89809 91942])
            ("cursors" variable nil nil [91944 91967])
            ("NavigationToolbar2" type
               (:documentation "
    Base class for the navigation cursor, version 2

    backends must implement a canvas that handles connections for
    'button_press_event' and 'button_release_event'.  See
    :meth:`FigureCanvasBase.mpl_connect` for more information


    They must also define

      :meth:`save_figure`
         save the current figure

      :meth:`set_cursor`
         if you want the pointer icon to change

      :meth:`_init_toolbar`
         create your toolbar widget

      :meth:`draw_rubberband` (optional)
         draw the zoom to rect \"rubberband\" rectangle

      :meth:`press`  (optional)
         whenever a mouse button is pressed, you'll be notified with
         the event

      :meth:`release` (optional)
         whenever a mouse button is released, you'll be notified with
         the event

      :meth:`set_message` (optional)
         display message

      :meth:`set_history_buttons` (optional)
         you can change the history back / forward buttons to
         indicate disabled / enabled state.

    That's it, we'll do the rest!
    "
                :superclasses ("object")
                :members 
                  ( ("toolitems" variable nil (reparse-symbol indented_block_body) [93445 94000])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [94042 94062])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [94071 94092])
                            ("self" variable nil (reparse-symbol indented_block_body) [94101 94132])
                            ("self" variable nil (reparse-symbol indented_block_body) [94141 94161])
                            ("self" variable nil (reparse-symbol indented_block_body) [94257 94277])
                            ("self" variable nil (reparse-symbol indented_block_body) [94286 94308])
                            ("self" variable nil (reparse-symbol indented_block_body) [94317 94336])
                            ("self" variable nil (reparse-symbol indented_block_body) [94403 94437])
                            ("self" code nil (reparse-symbol indented_block_body) [94446 94466])
                            ("self" variable nil (reparse-symbol indented_block_body) [94475 94566])
                            ("self" variable nil (reparse-symbol indented_block_body) [94576 94595])
                            ("self" variable nil (reparse-symbol indented_block_body) [94604 94626])
                            ("self" variable nil (reparse-symbol indented_block_body) [94636 94663])
                            ("self" variable nil (reparse-symbol indented_block_body) [94757 94771])
                            ("self" code nil (reparse-symbol indented_block_body) [94816 94842]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94019 94023])
                            ("canvas" variable nil (reparse-symbol function_parameters) [94025 94031]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [94006 94843])
                    ("set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94864 94868])
                            ("s" variable nil (reparse-symbol function_parameters) [94870 94871]))                          
                        :documentation "Display a message on toolbar or in status bar.")
                        (reparse-symbol indented_block_body) [94848 94935])
                    ("back" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94949 94953])
                            ("args" variable nil (reparse-symbol function_parameters) [94955 94960]))                          
                        :documentation "move back up the view lim stack")
                        (reparse-symbol indented_block_body) [94940 95103])
                    ("" code nil (reparse-symbol indented_block_body) [95125 95164])
                    ("dynamic_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95188 95192]))                          )
                        (reparse-symbol indented_block_body) [95169 95227])
                    ("draw_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95252 95256])
                            ("event" variable nil (reparse-symbol function_parameters) [95258 95263])
                            ("x0" variable nil (reparse-symbol function_parameters) [95265 95267])
                            ("y0" variable nil (reparse-symbol function_parameters) [95269 95271])
                            ("x1" variable nil (reparse-symbol function_parameters) [95273 95275])
                            ("y1" variable nil (reparse-symbol function_parameters) [95277 95279]))                          
                        :documentation "Draw a rectangle rubberband to indicate zoom limits.

        Note that it is not guaranteed that ``x0 <= x1`` and ``y0 <= y1``.
        ")
                        (reparse-symbol indented_block_body) [95232 95434])
                    ("remove_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95461 95465]))                          
                        :documentation "Remove the rubberband.")
                        (reparse-symbol indented_block_body) [95439 95505])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95522 95526])
                            ("args" variable nil (reparse-symbol function_parameters) [95528 95533]))                          
                        :documentation "Move forward in the view lim stack.")
                        (reparse-symbol indented_block_body) [95510 95683])
                    ("home" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95697 95701])
                            ("args" variable nil (reparse-symbol function_parameters) [95703 95708]))                          
                        :documentation "Restore the original view.")
                        (reparse-symbol indented_block_body) [95688 95846])
                    ("_init_toolbar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95869 95873]))                          
                        :documentation "
        This is where you actually build the GUI widgets (called by
        __init__).  The icons ``home.xpm``, ``back.xpm``, ``forward.xpm``,
        ``hand.xpm``, ``zoom_to_rect.xpm`` and ``filesave.xpm`` are standard
        across backends (there are ppm versions in CVS also).

        You just need to set the callbacks

        home         : self.home
        back         : self.back
        forward      : self.forward
        hand         : self.pan
        zoom_to_rect : self.zoom
        filesave     : self.save_figure

        You only need to define the last one - the others are in the base
        class implementation.

        ")
                        (reparse-symbol indented_block_body) [95851 96574])
                    ("_set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96595 96599])
                            ("event" variable nil (reparse-symbol function_parameters) [96601 96606]))                          )
                        (reparse-symbol indented_block_body) [96579 97234])
                    ("mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97254 97258])
                            ("event" variable nil (reparse-symbol function_parameters) [97260 97265]))                          )
                        (reparse-symbol indented_block_body) [97239 98192])
                    ("pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98205 98209])
                            ("args" variable nil (reparse-symbol function_parameters) [98211 98216]))                          
                        :documentation "Activate the pan/zoom tool. pan with left button, zoom with right")
                        (reparse-symbol indented_block_body) [98197 99300])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99315 99319])
                            ("event" variable nil (reparse-symbol function_parameters) [99321 99326]))                          
                        :documentation "Called whenever a mouse button is pressed.")
                        (reparse-symbol indented_block_body) [99305 99386])
                    ("press_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99405 99409])
                            ("event" variable nil (reparse-symbol function_parameters) [99411 99416]))                          
                        :documentation "Callback for mouse button press in pan/zoom mode.")
                        (reparse-symbol indented_block_body) [99391 100386])
                    ("press_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100406 100410])
                            ("event" variable nil (reparse-symbol function_parameters) [100412 100417]))                          
                        :documentation "Callback for mouse button press in zoom to rect mode.")
                        (reparse-symbol indented_block_body) [100391 101973])
                    ("_switch_on_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102003 102007])
                            ("event" variable nil (reparse-symbol function_parameters) [102009 102014]))                          )
                        (reparse-symbol indented_block_body) [101978 102084])
                    ("_switch_off_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102115 102119])
                            ("event" variable nil (reparse-symbol function_parameters) [102121 102126]))                          )
                        (reparse-symbol indented_block_body) [102089 102191])
                    ("push_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102213 102217]))                          
                        :documentation "Push the current view limits and position onto the stack.")
                        (reparse-symbol indented_block_body) [102196 102659])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102676 102680])
                            ("event" variable nil (reparse-symbol function_parameters) [102682 102687]))                          
                        :documentation "Callback for mouse button release.")
                        (reparse-symbol indented_block_body) [102664 102739])
                    ("release_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102760 102764])
                            ("event" variable nil (reparse-symbol function_parameters) [102766 102771]))                          
                        :documentation "Callback for mouse button release in pan/zoom mode.")
                        (reparse-symbol indented_block_body) [102744 103299])
                    ("drag_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103317 103321])
                            ("event" variable nil (reparse-symbol function_parameters) [103323 103328]))                          
                        :documentation "Callback for dragging in pan/zoom mode.")
                        (reparse-symbol indented_block_body) [103304 103670])
                    ("drag_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103689 103693])
                            ("event" variable nil (reparse-symbol function_parameters) [103695 103700]))                          
                        :documentation "Callback for dragging in zoom mode.")
                        (reparse-symbol indented_block_body) [103675 104201])
                    ("release_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104223 104227])
                            ("event" variable nil (reparse-symbol function_parameters) [104229 104234]))                          
                        :documentation "Callback for mouse button release in zoom to rect mode.")
                        (reparse-symbol indented_block_body) [104206 105967])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105981 105985]))                          
                        :documentation "Redraw the canvases, update the locators.")
                        (reparse-symbol indented_block_body) [105972 106610])
                    ("_update_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106632 106636]))                          
                        :documentation "Update the viewlim and position from the view and
        position stack for each axes.
        ")
                        (reparse-symbol indented_block_body) [106615 107286])
                    ("save_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107307 107311])
                            ("args" variable nil (reparse-symbol function_parameters) [107313 107318]))                          
                        :documentation "Save the current figure.")
                        (reparse-symbol indented_block_body) [107291 107394])
                    ("set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107414 107418])
                            ("cursor" variable nil (reparse-symbol function_parameters) [107420 107426]))                          
                        :documentation "Set the current cursor to one of the :class:`Cursors` enums values.

        If required by the backend, this method should trigger an update in
        the backend event loop after the cursor is set, as this method may be
        called e.g. before a long-running task during which the GUI is not
        updated.
        ")
                        (reparse-symbol indented_block_body) [107399 107767])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107783 107787]))                          
                        :documentation "Reset the axes stack.")
                        (reparse-symbol indented_block_body) [107772 107893])
                    ("zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107907 107911])
                            ("args" variable nil (reparse-symbol function_parameters) [107913 107918]))                          
                        :documentation "Activate zoom to rect mode.")
                        (reparse-symbol indented_block_body) [107898 108948])
                    ("set_history_buttons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108977 108981]))                          
                        :documentation "Enable or disable the back/forward button.")
                        (reparse-symbol indented_block_body) [108953 109041]))                  
                :type "class")
                nil [91970 109041])
            ("ToolContainerBase" type
               (:documentation "
    Base class for all tool containers, e.g. toolbars.

    Attributes
    ----------
    toolmanager : `ToolManager`
        The tools with which this `ToolContainer` wants to communicate.
    "
                :superclasses ("object")
                :members 
                  ( ("_icon_extension" variable nil (reparse-symbol indented_block_body) [109287 109311])
                    ("\"\"\"
    Toolcontainer button icon image format extension

    **String**: Image extension
    \"\"\"" code nil (reparse-symbol indented_block_body) [109316 109413])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [109460 109490])
                            ("self" code nil (reparse-symbol indented_block_body) [109499 109625]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109432 109436])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [109438 109449]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [109419 109626])
                    ("_tool_toggled_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109653 109657])
                            ("event" variable nil (reparse-symbol function_parameters) [109659 109664]))                          
                        :documentation "
        Captures the 'tool_trigger_[name]'

        This only gets used for toggled tools
        ")
                        (reparse-symbol indented_block_body) [109631 109847])
                    ("add_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109865 109869])
                            ("tool" variable nil (reparse-symbol function_parameters) [109871 109875])
                            ("group" variable nil (reparse-symbol function_parameters) [109877 109882])
                            ("position" variable nil (reparse-symbol function_parameters) [109884 109892]))                          
                        :documentation "
        Adds a tool to this container

        Parameters
        ----------
        tool : tool_like
            The tool to add, see `ToolManager.get_tool`.
        group : str
            The name of the group to add this tool to.
        position : int (optional)
            The position within the group to place this tool.  Defaults to end.
        ")
                        (reparse-symbol indented_block_body) [109852 110833])
                    ("_remove_tool_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110859 110863])
                            ("event" variable nil (reparse-symbol function_parameters) [110865 110870]))                          
                        :documentation "Captures the 'tool_removed_event' signal and removes the tool.")
                        (reparse-symbol indented_block_body) [110838 110996])
                    ("_get_image_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111025 111029])
                            ("image" variable nil (reparse-symbol function_parameters) [111031 111036]))                          
                        :documentation "Find the image based on its name.")
                        (reparse-symbol indented_block_body) [111001 111499])
                    ("trigger_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111521 111525])
                            ("name" variable nil (reparse-symbol function_parameters) [111527 111531]))                          
                        :documentation "
        Trigger the tool

        Parameters
        ----------
        name : String
            Name (id) of the tool triggered from within the container
        ")
                        (reparse-symbol indented_block_body) [111504 111771])
                    ("add_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111793 111797])
                            ("name" variable nil (reparse-symbol function_parameters) [111799 111803])
                            ("group" variable nil (reparse-symbol function_parameters) [111805 111810])
                            ("position" variable nil (reparse-symbol function_parameters) [111812 111820])
                            ("image" variable nil (reparse-symbol function_parameters) [111822 111827])
                            ("description" variable nil (reparse-symbol function_parameters) [111829 111840])
                            ("toggle" variable nil (reparse-symbol function_parameters) [111842 111848]))                          
                        :documentation "
        Add a toolitem to the container

        This method must get implemented per backend

        The callback associated with the button click event,
        must be **EXACTLY** `self.trigger_tool(name)`

        Parameters
        ----------
        name : string
            Name of the tool to add, this gets used as the tool's ID and as the
            default label of the buttons
        group : String
            Name of the group that this tool belongs to
        position : Int
            Position of the tool within its group, if -1 it goes at the End
        image_file : String
            Filename of the image for the button or `None`
        description : String
            Description of the tool, used for the tooltips
        toggle : Bool
            * `True` : The button is a toggle (change the pressed/unpressed
              state between consecutive clicks)
            * `False` : The button is a normal button (returns to unpressed
              state after release)
        ")
                        (reparse-symbol indented_block_body) [111776 112911])
                    ("toggle_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112936 112940])
                            ("name" variable nil (reparse-symbol function_parameters) [112942 112946])
                            ("toggled" variable nil (reparse-symbol function_parameters) [112948 112955]))                          
                        :documentation "
        Toggle the toolitem without firing event

        Parameters
        ----------
        name : String
            Id of the tool to toggle
        toggled : bool
            Whether to set this tool as toggled or not.
        ")
                        (reparse-symbol indented_block_body) [112916 113242])
                    ("remove_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113267 113271])
                            ("name" variable nil (reparse-symbol function_parameters) [113273 113277]))                          
                        :documentation "
        Remove a toolitem from the `ToolContainer`

        This method must get implemented per backend

        Called when `ToolManager` emits a `tool_removed_event`

        Parameters
        ----------
        name : string
            Name of the tool to remove
        ")
                        (reparse-symbol indented_block_body) [113247 113607]))                  
                :type "class")
                nil [109043 113607])
            ("StatusbarBase" type
               (:documentation "Base class for the statusbar"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [113722 113752])
                            ("self" code nil (reparse-symbol indented_block_body) [113761 113883]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113694 113698])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [113700 113711]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [113681 113884])
                    ("_message_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113906 113910])
                            ("event" variable nil (reparse-symbol function_parameters) [113912 113917]))                          
                        :documentation "Captures the 'tool_message_event' and set the message")
                        (reparse-symbol indented_block_body) [113889 114028])
                    ("set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114049 114053])
                            ("s" variable nil (reparse-symbol function_parameters) [114055 114056]))                          
                        :documentation "
        Display a message on toolbar or in status bar

        Parameters
        ----------
        s : str
            Message text
        ")
                        (reparse-symbol indented_block_body) [114033 114230]))                  
                :type "class")
                nil [113609 114230]))          
      :file "backend_bases.py"
      :pointmax 114230
      :fsize 114229
      :lastmodtime '(23240 23001 121461 0)
      :unmatched-syntax '((INDENT_BLOCK 88885 . 88965) (NEWLINE 88884 . 88885) (COLON 88883 . 88884) (TRY 88805 . 88808) (AS 88877 . 88879) (INDENT_BLOCK 88384 . 88464) (NEWLINE 88383 . 88384) (COLON 88382 . 88383) (TRY 88304 . 88307) (AS 88376 . 88378)))
    (semanticdb-table "semanticdb-table-150c484"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The figure module provides the top-level
:class:`~matplotlib.artist.Artist`, the :class:`Figure`, which
contains all the plot elements.  The following classes are defined

:class:`SubplotParams`
    control the default spacing of the subplots

:class:`Figure`
    top level container for all plot elements

\"\"\"" code nil nil [1 315])
            ("" code nil nil [340 425])
            ("six" include nil nil [427 437])
            ("logging" include nil nil [439 453])
            ("warnings" include nil nil [454 469])
            ("numpy" include nil nil [471 489])
            ("matplotlib" include nil nil [491 522])
            ("matplotlib" include nil nil [523 555])
            ("matplotlib" include nil nil [556 606])
            ("matplotlib.artist" include nil nil [608 643])
            ("matplotlib.artist" include nil nil [644 701])
            ("matplotlib.cbook" include nil nil [703 735])
            ("matplotlib.cbook" include nil nil [737 781])
            ("matplotlib" include nil nil [783 821])
            ("matplotlib.image" include nil nil [822 862])
            ("matplotlib.colorbar" include nil nil [864 898])
            ("matplotlib.axes" include nil nil [900 968])
            ("matplotlib.blocking_input" include nil nil [969 1048])
            ("matplotlib.gridspec" include nil nil [1049 1089])
            ("matplotlib.legend" include nil nil [1090 1125])
            ("matplotlib.patches" include nil nil [1126 1166])
            ("" code nil nil [1202 1293])
            ("matplotlib.text" include nil nil [1294 1346])
            ("" code nil nil [1381 1466])
            ("matplotlib._layoutbox" include nil nil [1467 1508])
            ("matplotlib.backend_bases" include nil nil [1509 1561])
            ("_log" variable nil nil [1563 1597])
            ("docstring" code nil nil [1599 1664])
            ("_stale_figure_callback" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1694 1698])
                    ("val" variable nil (reparse-symbol function_parameters) [1700 1703]))                  )
                nil [1667 1758])
            ("AxesStack" type
               (:documentation "
    Specialization of the Stack to handle all tracking of Axes in a Figure.
    This stack stores ``key, (ind, axes)`` pairs, where:

        * **key** should be a hash of the args and kwargs
          used in generating the Axes.
        * **ind** is a serial number for tracking the order
          in which axes were added.

    The AxesStack is a callable, where ``ax_stack()`` returns
    the current axes. Alternatively the :meth:`current_key_axes` will
    return the current key and associated axes.

    "
                :superclasses ("Stack")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Stack" code nil (reparse-symbol indented_block_body) [2341 2361])
                            ("self" variable nil (reparse-symbol indented_block_body) [2370 2383]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2326 2330]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2313 2384])
                    ("as_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2401 2405]))                          
                        :documentation "
        Return a list of the Axes instances that have been added to the figure
        ")
                        (reparse-symbol indented_block_body) [2389 2622])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2635 2639])
                            ("key" variable nil (reparse-symbol function_parameters) [2641 2644]))                          
                        :documentation "
        Return the Axes instance that was added with *key*.
        If it is not present, return None.
        ")
                        (reparse-symbol indented_block_body) [2627 3314])
                    ("_entry_from_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3340 3344])
                            ("e" variable nil (reparse-symbol function_parameters) [3346 3347]))                          )
                        (reparse-symbol indented_block_body) [3319 3447])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3463 3467])
                            ("a" variable nil (reparse-symbol function_parameters) [3469 3470]))                          
                        :documentation "Remove the axes from the stack.")
                        (reparse-symbol indented_block_body) [3452 3572])
                    ("bubble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3588 3592])
                            ("a" variable nil (reparse-symbol function_parameters) [3594 3595]))                          
                        :documentation "
        Move the given axes, which must already exist in the
        stack, to the top.
        ")
                        (reparse-symbol indented_block_body) [3577 3770])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3783 3787])
                            ("key" variable nil (reparse-symbol function_parameters) [3789 3792])
                            ("a" variable nil (reparse-symbol function_parameters) [3794 3795]))                          
                        :documentation "
        Add Axes *a*, with key *key*, to the stack, and return the stack.

        If *key* is unhashable, replace it by a unique, arbitrary object.

        If *a* is already on the stack, don't add it again, but
        return *None*.
        ")
                        (reparse-symbol indented_block_body) [3775 4806])
                    ("current_key_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4832 4836]))                          
                        :documentation "
        Return a tuple of ``(key, axes)`` for the active axes.

        If no axes exists on the stack, then returns ``(None, None)``.

        ")
                        (reparse-symbol indented_block_body) [4811 5185])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5203 5207]))                          )
                        (reparse-symbol indented_block_body) [5190 5252])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5274 5278])
                            ("a" variable nil (reparse-symbol function_parameters) [5280 5281]))                          )
                        (reparse-symbol indented_block_body) [5257 5319]))                  
                :type "class")
                nil [1760 5319])
            ("SubplotParams" type
               (:documentation "
    A class to hold the parameters for a subplot
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        All dimensions are fraction of the figure width or height.
        All values default to their rc params

        The following attributes are available

        left  : 0.125
            The left side of the subplots of the figure

        right : 0.9
            The right side of the subplots of the figure

        bottom : 0.1
            The bottom of the subplots of the figure

        top : 0.9
            The top of the subplots of the figure

        wspace : 0.2
            The amount of width reserved for space between subplots,
            expressed as a fraction of the average axis width

        hspace : 0.2
            The amount of height reserved for space between subplots,
            expressed as a fraction of the average axis height
        \"\"\"" code nil (reparse-symbol indented_block_body) [5536 6321])
                            ("self" variable nil (reparse-symbol indented_block_body) [6331 6351])
                            ("self" code nil (reparse-symbol indented_block_body) [6360 6413]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5432 5436])
                            ("left" variable nil (reparse-symbol function_parameters) [5438 5442])
                            ("bottom" variable nil (reparse-symbol function_parameters) [5449 5455])
                            ("right" variable nil (reparse-symbol function_parameters) [5462 5467])
                            ("top" variable nil (reparse-symbol function_parameters) [5474 5477])
                            ("wspace" variable nil (reparse-symbol function_parameters) [5501 5507])
                            ("hspace" variable nil (reparse-symbol function_parameters) [5514 5520]))                          
                        :documentation "
        All dimensions are fraction of the figure width or height.
        All values default to their rc params

        The following attributes are available

        left  : 0.125
            The left side of the subplots of the figure

        right : 0.9
            The right side of the subplots of the figure

        bottom : 0.1
            The bottom of the subplots of the figure

        top : 0.9
            The top of the subplots of the figure

        wspace : 0.2
            The amount of width reserved for space between subplots,
            expressed as a fraction of the average axis width

        hspace : 0.2
            The amount of height reserved for space between subplots,
            expressed as a fraction of the average axis height
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5419 6414])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6430 6434])
                            ("left" variable nil (reparse-symbol function_parameters) [6436 6440])
                            ("bottom" variable nil (reparse-symbol function_parameters) [6447 6453])
                            ("right" variable nil (reparse-symbol function_parameters) [6460 6465])
                            ("top" variable nil (reparse-symbol function_parameters) [6472 6475])
                            ("wspace" variable nil (reparse-symbol function_parameters) [6497 6503])
                            ("hspace" variable nil (reparse-symbol function_parameters) [6510 6516]))                          
                        :documentation "
        Update the current values.  If any kwarg is None, default to
        the current value, if set, otherwise to rc

        ")
                        (reparse-symbol indented_block_body) [6419 7725])
                    ("_update_this" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7747 7751])
                            ("s" variable nil (reparse-symbol function_parameters) [7753 7754])
                            ("val" variable nil (reparse-symbol function_parameters) [7756 7759]))                          )
                        (reparse-symbol indented_block_body) [7730 7966]))                  
                :type "class")
                nil [5321 7966])
            ("Figure" type
               (:documentation "
    The Figure instance supports callbacks through a *callbacks* attribute
    which is a `.CallbackRegistry` instance.  The events you can connect to
    are 'dpi_changed', and the callback will be called with ``func(fig)`` where
    fig is the `Figure` instance.

    Attributes
    ----------
    patch
        The `.Rectangle` instance representing the figure patch.

    suppressComposite
        For multiple figure images, the figure will make composite images
        depending on the renderer option_image_nocomposite function.  If
        *suppressComposite* is a boolean, this will override the renderer.
    "
                :superclasses ("Artist")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8640 8644]))                          )
                        (reparse-symbol indented_block_body) [8628 8702])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8720 8724]))                          )
                        (reparse-symbol indented_block_body) [8707 8942])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        figsize : 2-tuple of floats
            ``(width, height)`` tuple in inches

        dpi : float
            Dots per inch

        facecolor
            The figure patch facecolor; defaults to rc ``figure.facecolor``

        edgecolor
            The figure patch edge color; defaults to rc ``figure.edgecolor``

        linewidth : float
            The figure patch edge linewidth; the default linewidth of the frame

        frameon : bool
            If ``False``, suppress drawing the figure frame

        subplotpars : :class:`SubplotParams`
            Subplot parameters, defaults to rc

        tight_layout : bool
            If ``False`` use *subplotpars*; if ``True`` adjust subplot
            parameters using `.tight_layout` with default padding.
            When providing a dict containing the keys
            ``pad``, ``w_pad``, ``h_pad``, and ``rect``, the default
            `.tight_layout` paddings will be overridden.
            Defaults to rc ``figure.autolayout``.

        constrained_layout : bool
            If ``True`` use constrained layout to adjust positioning of plot
            elements.  Like ``tight_layout``, but designed to be more
            flexible.  See
            :doc:`/tutorials/intermediate/constrainedlayout_guide`
            for examples.  (Note: does not work with :meth:`.subplot` or
            :meth:`.subplot2grid`.)
            Defaults to rc ``figure.constrained_layout.use``.
        \"\"\"" code nil (reparse-symbol indented_block_body) [9649 11152])
                            ("Artist" code nil (reparse-symbol indented_block_body) [11161 11182])
                            ("del" code nil (reparse-symbol indented_block_body) [11426 11440])
                            ("self" variable nil (reparse-symbol indented_block_body) [11449 11490])
                            ("if" code nil (reparse-symbol indented_block_body) [11500 11569])
                            ("if" code nil (reparse-symbol indented_block_body) [11577 11634])
                            ("if" code nil (reparse-symbol indented_block_body) [11642 11717])
                            ("if" code nil (reparse-symbol indented_block_body) [11725 11800])
                            ("if" code nil (reparse-symbol indented_block_body) [11808 11877])
                            ("if" code nil (reparse-symbol indented_block_body) [11886 12035])
                            ("self" variable nil (reparse-symbol indented_block_body) [12043 12094])
                            ("self" variable nil (reparse-symbol indented_block_body) [12104 12153])
                            ("self" variable nil (reparse-symbol indented_block_body) [12211 12226])
                            ("self" variable nil (reparse-symbol indented_block_body) [12235 12302])
                            ("self" variable nil (reparse-symbol indented_block_body) [12312 12334])
                            ("self" variable nil (reparse-symbol indented_block_body) [12344 12389])
                            ("self" variable nil (reparse-symbol indented_block_body) [12399 12539])
                            ("self" code nil (reparse-symbol indented_block_body) [12548 12582])
                            ("self" code nil (reparse-symbol indented_block_body) [12591 12615])
                            ("self" variable nil (reparse-symbol indented_block_body) [12625 12659])
                            ("if" code nil (reparse-symbol indented_block_body) [12668 12721])
                            ("self" variable nil (reparse-symbol indented_block_body) [12730 12748])
                            ("self" variable nil (reparse-symbol indented_block_body) [12757 12778])
                            ("if" code nil (reparse-symbol indented_block_body) [12788 12854])
                            ("self" variable nil (reparse-symbol indented_block_body) [12863 12893])
                            ("self" variable nil (reparse-symbol indented_block_body) [12932 12954])
                            ("self" code nil (reparse-symbol indented_block_body) [13010 13057])
                            ("self" code nil (reparse-symbol indented_block_body) [13067 13102])
                            ("self" variable nil (reparse-symbol indented_block_body) [13112 13139])
                            ("self" code nil (reparse-symbol indented_block_body) [13190 13200])
                            ("self" variable nil (reparse-symbol indented_block_body) [13209 13236])
                            ("self" variable nil (reparse-symbol indented_block_body) [13415 13455])
                            ("self" variable nil (reparse-symbol indented_block_body) [13464 13504]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8960 8964])
                            ("figsize" variable nil (reparse-symbol function_parameters) [8983 8990])
                            ("dpi" variable nil (reparse-symbol function_parameters) [9047 9050])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [9103 9112])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [9171 9180])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [9239 9248])
                            ("frameon" variable nil (reparse-symbol function_parameters) [9309 9316])
                            ("subplotpars" variable nil (reparse-symbol function_parameters) [9383 9394])
                            ("tight_layout" variable nil (reparse-symbol function_parameters) [9435 9447])
                            ("constrained_layout" variable nil (reparse-symbol function_parameters) [9506 9524]))                          
                        :documentation "
        Parameters
        ----------
        figsize : 2-tuple of floats
            ``(width, height)`` tuple in inches

        dpi : float
            Dots per inch

        facecolor
            The figure patch facecolor; defaults to rc ``figure.facecolor``

        edgecolor
            The figure patch edge color; defaults to rc ``figure.edgecolor``

        linewidth : float
            The figure patch edge linewidth; the default linewidth of the frame

        frameon : bool
            If ``False``, suppress drawing the figure frame

        subplotpars : :class:`SubplotParams`
            Subplot parameters, defaults to rc

        tight_layout : bool
            If ``False`` use *subplotpars*; if ``True`` adjust subplot
            parameters using `.tight_layout` with default padding.
            When providing a dict containing the keys
            ``pad``, ``w_pad``, ``h_pad``, and ``rect``, the default
            `.tight_layout` paddings will be overridden.
            Defaults to rc ``figure.autolayout``.

        constrained_layout : bool
            If ``True`` use constrained layout to adjust positioning of plot
            elements.  Like ``tight_layout``, but designed to be more
            flexible.  See
            :doc:`/tutorials/intermediate/constrainedlayout_guide`
            for examples.  (Note: does not work with :meth:`.subplot` or
            :meth:`.subplot2grid`.)
            Defaults to rc ``figure.constrained_layout.use``.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8947 13505])
                    ("" code nil (reparse-symbol indented_block_body) [13541 13576])
                    ("figurePatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13597 13601]))                          )
                        (reparse-symbol indented_block_body) [13581 13630])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13813 13817]))                          )
                        (reparse-symbol indented_block_body) [13797 14155])
                    ("show" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14169 14173])
                            ("warn" variable nil (reparse-symbol function_parameters) [14175 14179]))                          
                        :documentation "
        If using a GUI backend with pyplot, display the figure window.

        If the figure was not created using
        :func:`~matplotlib.pyplot.figure`, it will lack a
        :class:`~matplotlib.backend_bases.FigureManagerBase`, and
        will raise an AttributeError.

        Parameters
        ----------
        warm : bool
            If ``True``, issue warning when called on a non-GUI backend

        Notes
        -----
        For non-GUI backends, this does nothing, in which case a warning will
        be issued if *warn* is ``True`` (default).
        ")
                        (reparse-symbol indented_block_body) [14160 15474])
                    ("_get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15493 15497]))                          )
                        (reparse-symbol indented_block_body) [15479 15539])
                    ("axes" variable nil (reparse-symbol indented_block_body) [15544 15616])
                    ("_get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15635 15639]))                          )
                        (reparse-symbol indented_block_body) [15622 15667])
                    ("_set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15685 15689])
                            ("dpi" variable nil (reparse-symbol function_parameters) [15691 15694])
                            ("forward" variable nil (reparse-symbol function_parameters) [15696 15703]))                          
                        :documentation "
        Parameters
        ----------
        dpi : float

        forward : bool
            Passed on to `~.Figure.set_size_inches`
        ")
                        (reparse-symbol indented_block_body) [15672 16088])
                    ("dpi" variable nil (reparse-symbol indented_block_body) [16093 16127])
                    ("get_tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16154 16158]))                          
                        :documentation "
        Return whether and how `.tight_layout` is called when drawing.
        ")
                        (reparse-symbol indented_block_body) [16133 16283])
                    ("set_tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16309 16313])
                            ("tight" variable nil (reparse-symbol function_parameters) [16315 16320]))                          
                        :documentation "
        Set whether and how `.tight_layout` is called when drawing.

        Parameters
        ----------
        tight : bool or dict with keys \"pad\", \"w_pad\", \"h_pad\", \"rect\" or None
            If a bool, sets whether to call `.tight_layout` upon drawing.
            If ``None``, use the ``figure.autolayout`` rcparam instead.
            If a dict, pass it as kwargs to `.tight_layout`, overriding the
            default paddings.

            ..
                ACCEPTS: [ bool
                         | dict with keys \"pad\", \"w_pad\", \"h_pad\", \"rect\"
                         | None ]
        ")
                        (reparse-symbol indented_block_body) [16288 17151])
                    ("get_constrained_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17183 17187]))                          
                        :documentation "
        Return a boolean: True means constrained layout is being used.

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`
        ")
                        (reparse-symbol indented_block_body) [17156 17386])
                    ("set_constrained_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17418 17422])
                            ("constrained" variable nil (reparse-symbol function_parameters) [17424 17435]))                          
                        :documentation "
        Set whether ``constrained_layout`` is used upon drawing. If None,
        the rcParams['figure.constrained_layout.use'] value will be used.

        When providing a dict containing the keys `w_pad`, `h_pad`
        the default ``constrained_layout`` paddings will be
        overridden.  These pads are in inches and default to 3.0/72.0.
        ``w_pad`` is the width padding and ``h_pad`` is the height padding.

        ACCEPTS: [True | False | dict | None ]

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`
        ")
                        (reparse-symbol indented_block_body) [17391 18602])
                    ("set_constrained_layout_pads" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18639 18643])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18645 18653]))                          
                        :documentation "
        Set padding for ``constrained_layout``.  Note the kwargs can be passed
        as a dictionary ``fig.set_constrained_layout(**paddict)``.

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`

        Parameters
        ----------

        w_pad : scalar
            Width padding in inches.  This is the pad around axes
            and is meant to make sure there is enough room for fonts to
            look good.  Defaults to 3 pts = 0.04167 inches

        h_pad : scalar
            Height padding in inches. Defaults to 3 pts.

        wspace: scalar
            Width padding between subplots, expressed as a fraction of the
            subplot width.  The total padding ends up being w_pad + wspace.

        hspace: scalar
            Height padding between subplots, expressed as a fraction of the
            subplot width. The total padding ends up being h_pad + hspace.

        ")
                        (reparse-symbol indented_block_body) [18607 19921])
                    ("get_constrained_layout_pads" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19958 19962])
                            ("relative" variable nil (reparse-symbol function_parameters) [19964 19972]))                          
                        :documentation "
        Get padding for ``constrained_layout``.

        Returns a list of `w_pad, h_pad` in inches and
        `wspace` and `hspace` as fractions of the subplot.

        See :doc:`/tutorials/intermediate/constrainedlayout_guide`

        Parameters
        ----------

        relative : boolean
            If `True`, then convert from inches to figure relative.
        ")
                        (reparse-symbol indented_block_body) [19926 20897])
                    ("autofmt_xdate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20920 20924])
                            ("bottom" variable nil (reparse-symbol function_parameters) [20926 20932])
                            ("rotation" variable nil (reparse-symbol function_parameters) [20938 20946])
                            ("ha" variable nil (reparse-symbol function_parameters) [20951 20953])
                            ("which" variable nil (reparse-symbol function_parameters) [20963 20968]))                          
                        :documentation "
        Date ticklabels often overlap, so it is useful to rotate them
        and right align them.  Also, a common use case is a number of
        subplots with shared xaxes where the x-axis is date data.  The
        ticklabels are often long, and it helps to rotate them on the
        bottom subplot and turn them off on other subplots, as well as
        turn off xlabels.

        Parameters
        ----------
        bottom : scalar
            The bottom of the subplots for :meth:`subplots_adjust`

        rotation : angle in degrees
            The rotation of the xtick labels

        ha : string
            The horizontal alignment of the xticklabels

        which : {None, 'major', 'minor', 'both'}
            Selects which ticklabels to rotate (default is None which works
            same as major)
        ")
                        (reparse-symbol indented_block_body) [20902 22660])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22682 22686]))                          
                        :documentation "Get a list of artists contained in the figure.")
                        (reparse-symbol indented_block_body) [22665 23064])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23082 23086])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [23088 23098]))                          
                        :documentation "
        Test whether the mouse event occurred on the figure.

        Returns True, {}.
        ")
                        (reparse-symbol indented_block_body) [23069 23392])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23419 23423])
                            ("args" variable nil (reparse-symbol function_parameters) [23425 23430])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23432 23440]))                          
                        :documentation "
        Return figure bounding box in display space; arguments are ignored.
        ")
                        (reparse-symbol indented_block_body) [23397 23568])
                    ("suptitle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23586 23590])
                            ("t" variable nil (reparse-symbol function_parameters) [23592 23593])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23595 23603]))                          
                        :documentation "
        Add a centered title to the figure.

        kwargs are :class:`matplotlib.text.Text` properties.  Using figure
        coordinates, the defaults are:

          x : 0.5
            The x location of the text in figure coords

          y : 0.98
            The y location of the text in figure coords

          horizontalalignment : 'center'
            The horizontal alignment of the text

          verticalalignment : 'top'
            The vertical alignment of the text

        If the `fontproperties` keyword argument is given then the
        rcParams defaults for `fontsize` (`figure.titlesize`) and
        `fontweight` (`figure.titleweight`) will be ignored in favour
        of the `FontProperties` defaults.

        A :class:`matplotlib.text.Text` instance is returned.

        Example::

          fig.suptitle('this is the figure title', fontsize=12)
        ")
                        (reparse-symbol indented_block_body) [23573 26214])
                    ("set_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26234 26238])
                            ("canvas" variable nil (reparse-symbol function_parameters) [26240 26246]))                          
                        :documentation "
        Set the canvas that contains the figure

        ACCEPTS: a FigureCanvas instance
        ")
                        (reparse-symbol indented_block_body) [26219 26392])
                    ("" code nil (reparse-symbol indented_block_body) [26414 26421])
                    ("hold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26435 26439])
                            ("b" variable nil (reparse-symbol function_parameters) [26441 26442]))                          
                        :documentation "
        Set the hold state.  If hold is None (default), toggle the
        hold state.  Else set the hold state to boolean value b.

        e.g.::

            hold()      # toggle hold
            hold(True)  # hold is on
            hold(False) # hold is off

        All \"hold\" machinery is deprecated.
        ")
                        (reparse-symbol indented_block_body) [26426 26884])
                    ("figimage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26902 26906])
                            ("X" variable nil (reparse-symbol function_parameters) [26908 26909])
                            ("xo" variable nil (reparse-symbol function_parameters) [26928 26930])
                            ("yo" variable nil (reparse-symbol function_parameters) [26951 26953])
                            ("alpha" variable nil (reparse-symbol function_parameters) [26974 26979])
                            ("norm" variable nil (reparse-symbol function_parameters) [27003 27007])
                            ("cmap" variable nil (reparse-symbol function_parameters) [27031 27035])
                            ("vmin" variable nil (reparse-symbol function_parameters) [27059 27063])
                            ("vmax" variable nil (reparse-symbol function_parameters) [27087 27091])
                            ("origin" variable nil (reparse-symbol function_parameters) [27115 27121])
                            ("resize" variable nil (reparse-symbol function_parameters) [27145 27151])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27176 27184]))                          
                        :documentation "
        Adds a non-resampled image to the figure.

        call signatures::

          figimage(X, **kwargs)

        adds a non-resampled array *X* to the figure.

        ::

          figimage(X, xo, yo)

        with pixel offsets *xo*, *yo*,

        *X* must be a float array:

        * If *X* is MxN, assume luminance (grayscale)
        * If *X* is MxNx3, assume RGB
        * If *X* is MxNx4, assume RGBA

        Optional keyword arguments:

          =========   =========================================================
          Keyword     Description
          =========   =========================================================
          resize      a boolean, True or False. If \"True\", then re-size the
                      Figure to match the given image size.
          xo or yo    An integer, the *x* and *y* image offset in pixels
          cmap        a :class:`matplotlib.colors.Colormap` instance, e.g.,
                      cm.jet. If *None*, default to the rc ``image.cmap``
                      value
          norm        a :class:`matplotlib.colors.Normalize` instance. The
                      default is normalization().  This scales luminance -> 0-1
          vmin|vmax   are used to scale a luminance image to 0-1.  If either
                      is *None*, the min and max of the luminance values will
                      be used.  Note if you pass a norm instance, the settings
                      for *vmin* and *vmax* will be ignored.
          alpha       the alpha blending value, default is *None*
          origin      [ 'upper' | 'lower' ] Indicates where the [0,0] index of
                      the array is in the upper left or lower left corner of
                      the axes. Defaults to the rc image.origin value
          =========   =========================================================

        figimage complements the axes image
        (:meth:`~matplotlib.axes.Axes.imshow`) which will be resampled
        to fit the current axes.  If you want a resampled image to
        fill the entire figure, you can define an
        :class:`~matplotlib.axes.Axes` with extent [0,0,1,1].

        An :class:`matplotlib.image.FigureImage` instance is returned.

        Additional kwargs are Artist kwargs passed on to
        :class:`~matplotlib.image.FigureImage`
        ")
                        (reparse-symbol indented_block_body) [26889 30136])
                    ("set_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30161 30165])
                            ("w" variable nil (reparse-symbol function_parameters) [30167 30168])
                            ("h" variable nil (reparse-symbol function_parameters) [30170 30171])
                            ("forward" variable nil (reparse-symbol function_parameters) [30178 30185]))                          
                        :documentation "Set the figure size in inches (1in == 2.54cm)

        Usage ::

             fig.set_size_inches(w, h)  # OR
             fig.set_size_inches((w, h))

        optional kwarg *forward=True* will cause the canvas size to be
        automatically updated; e.g., you can resize the figure window
        from the shell

        ACCEPTS: a w, h tuple with w, h in inches

        See Also
        --------
        matplotlib.Figure.get_size_inches
        ")
                        (reparse-symbol indented_block_body) [30141 31490])
                    ("get_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31515 31519]))                          
                        :documentation "
        Returns the current size of the figure in inches (1in == 2.54cm)
        as an numpy array.

        Returns
        -------
        size : ndarray
           The size of the figure in inches

        See Also
        --------
        matplotlib.Figure.set_size_inches
        ")
                        (reparse-symbol indented_block_body) [31495 31868])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31891 31895]))                          
                        :documentation "Get the edge color of the Figure rectangle.")
                        (reparse-symbol indented_block_body) [31873 31998])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32021 32025]))                          
                        :documentation "Get the face color of the Figure rectangle.")
                        (reparse-symbol indented_block_body) [32003 32128])
                    ("get_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32150 32154]))                          
                        :documentation "Return the figwidth as a float.")
                        (reparse-symbol indented_block_body) [32133 32241])
                    ("get_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32264 32268]))                          
                        :documentation "Return the figheight as a float.")
                        (reparse-symbol indented_block_body) [32246 32357])
                    ("get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32374 32378]))                          
                        :documentation "Return the dpi as a float.")
                        (reparse-symbol indented_block_body) [32362 32446])
                    ("get_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32467 32471]))                          
                        :documentation "Get the boolean indicating frameon.")
                        (reparse-symbol indented_block_body) [32451 32552])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32575 32579])
                            ("color" variable nil (reparse-symbol function_parameters) [32581 32586]))                          
                        :documentation "
        Set the edge color of the Figure rectangle

        ACCEPTS: any matplotlib color - see help(colors)
        ")
                        (reparse-symbol indented_block_body) [32557 32762])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32785 32789])
                            ("color" variable nil (reparse-symbol function_parameters) [32791 32796]))                          
                        :documentation "
        Set the face color of the Figure rectangle

        ACCEPTS: any matplotlib color - see help(colors)
        ")
                        (reparse-symbol indented_block_body) [32767 32972])
                    ("set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32989 32993])
                            ("val" variable nil (reparse-symbol function_parameters) [32995 32998]))                          
                        :documentation "
        Set the dots-per-inch of the figure

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [32977 33142])
                    ("set_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33164 33168])
                            ("val" variable nil (reparse-symbol function_parameters) [33170 33173])
                            ("forward" variable nil (reparse-symbol function_parameters) [33175 33182]))                          
                        :documentation "
        Set the width of the figure in inches

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [33147 33357])
                    ("set_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33380 33384])
                            ("val" variable nil (reparse-symbol function_parameters) [33386 33389])
                            ("forward" variable nil (reparse-symbol function_parameters) [33391 33398]))                          
                        :documentation "
        Set the height of the figure in inches

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [33362 33573])
                    ("set_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33594 33598])
                            ("b" variable nil (reparse-symbol function_parameters) [33600 33601]))                          
                        :documentation "
        Set whether the figure frame (background) is displayed or invisible

        ACCEPTS: boolean
        ")
                        (reparse-symbol indented_block_body) [33578 33781])
                    ("delaxes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33798 33802])
                            ("ax" variable nil (reparse-symbol function_parameters) [33804 33806]))                          
                        :documentation "
        Remove the `.Axes` *ax* from the figure and update the current axes.
        ")
                        (reparse-symbol indented_block_body) [33786 34031])
                    ("_make_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34050 34054])
                            ("args" variable nil (reparse-symbol function_parameters) [34056 34061])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34063 34071]))                          
                        :documentation "Make a hashable key out of args and kwargs.")
                        (reparse-symbol indented_block_body) [34036 35070])
                    ("add_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35088 35092])
                            ("args" variable nil (reparse-symbol function_parameters) [35094 35099])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35101 35109]))                          
                        :documentation "
        Add an axes at position *rect* [*left*, *bottom*, *width*,
        *height*] where all quantities are in fractions of figure
        width and height.

        Parameters
        ----------
        rect : sequence of float
            A 4-length sequence of [left, bottom, width, height] quantities.

        projection :
            ['aitoff' | 'hammer' | 'lambert' | 'mollweide' | \\
'polar' | 'rectilinear'], optional
            The projection type of the axes.

        polar : boolean, optional
            If True, equivalent to projection='polar'.

        **kwargs
            This method also takes the keyword arguments for
            :class:`~matplotlib.axes.Axes`.

        Returns
        -------
        axes : Axes
            The added axes.

        Examples
        --------
        A simple example::

            rect = l,b,w,h
            fig.add_axes(rect)
            fig.add_axes(rect, frameon=False, facecolor='g')
            fig.add_axes(rect, polar=True)
            fig.add_axes(rect, projection='polar')
            fig.add_axes(ax)

        If the figure already has an axes with the same parameters, then it
        will simply make that axes current and return it.  This behavior
        has been deprecated as of Matplotlib 2.1.  Meanwhile, if you do
        not want this behavior (i.e., you want to force the creation of a
        new Axes), you must use a unique set of args and kwargs.  The axes
        :attr:`~matplotlib.axes.Axes.label` attribute has been exposed for this
        purpose: if you want two axes that are otherwise identical to be added
        to the figure, make sure you give them unique labels::

            fig.add_axes(rect, label='axes1')
            fig.add_axes(rect, label='axes2')

        In rare circumstances, add_axes may be called with a single
        argument, an Axes instance already created in the present
        figure but not in the figure's list of axes.  For example,
        if an axes has been removed with :meth:`delaxes`, it can
        be restored with::

            fig.add_axes(ax)

        In all cases, the :class:`~matplotlib.axes.Axes` instance
        will be returned.
        ")
                        (reparse-symbol indented_block_body) [35075 38781])
                    ("add_subplot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38802 38806])
                            ("args" variable nil (reparse-symbol function_parameters) [38808 38813])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38815 38823]))                          
                        :documentation "
        Add a subplot.

        Parameters
        ----------
        *args
            Either a 3-digit integer or three separate integers
            describing the position of the subplot. If the three
            integers are R, C, and P in order, the subplot will take
            the Pth position on a grid with R rows and C columns.

        projection : ['aitoff' | 'hammer' | 'lambert' | \\
'mollweide' | 'polar' | 'rectilinear'], optional
            The projection type of the axes.

        polar : boolean, optional
            If True, equivalent to projection='polar'.

        **kwargs
            This method also takes the keyword arguments for
            :class:`~matplotlib.axes.Axes`.

        Returns
        -------
        axes : Axes
            The axes of the subplot.

        Notes
        -----
        If the figure already has a subplot with key (*args*,
        *kwargs*) then it will simply make that subplot current and
        return it.  This behavior is deprecated.

        Examples
        --------
        ::

            fig.add_subplot(111)

            # equivalent but more general
            fig.add_subplot(1, 1, 1)

            # add subplot with red background
            fig.add_subplot(212, facecolor='r')

            # add a polar subplot
            fig.add_subplot(111, projection='polar')

            # add Subplot instance sub
            fig.add_subplot(sub)

        See Also
        --------
        matplotlib.pyplot.subplot : for an explanation of the args.
        ")
                        (reparse-symbol indented_block_body) [38786 42203])
                    ("subplots" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42221 42225])
                            ("nrows" variable nil (reparse-symbol function_parameters) [42227 42232])
                            ("ncols" variable nil (reparse-symbol function_parameters) [42236 42241])
                            ("sharex" variable nil (reparse-symbol function_parameters) [42245 42251])
                            ("sharey" variable nil (reparse-symbol function_parameters) [42259 42265])
                            ("squeeze" variable nil (reparse-symbol function_parameters) [42290 42297])
                            ("subplot_kw" variable nil (reparse-symbol function_parameters) [42304 42314])
                            ("gridspec_kw" variable nil (reparse-symbol function_parameters) [42321 42332]))                          
                        :documentation "
        Add a set of subplots to this figure.

        Parameters
        ----------
        nrows, ncols : int, default: 1
            Number of rows/cols of the subplot grid.

        sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False
            Controls sharing of properties among x (`sharex`) or y (`sharey`)
            axes:

                - True or 'all': x- or y-axis will be shared among all
                  subplots.
                - False or 'none': each subplot x- or y-axis will be
                  independent.
                - 'row': each subplot row will share an x- or y-axis.
                - 'col': each subplot column will share an x- or y-axis.

            When subplots have a shared x-axis along a column, only the x tick
            labels of the bottom subplot are visible.  Similarly, when
            subplots have a shared y-axis along a row, only the y tick labels
            of the first column subplot are visible.

        squeeze : bool, default: True
            - If True, extra dimensions are squeezed out from the returned
              axis object:

                - if only one subplot is constructed (nrows=ncols=1), the
                  resulting single Axes object is returned as a scalar.
                - for Nx1 or 1xN subplots, the returned object is a 1D numpy
                  object array of Axes objects are returned as numpy 1D
                  arrays.
                - for NxM, subplots with N>1 and M>1 are returned as a 2D
                  arrays.

            - If False, no squeezing at all is done: the returned Axes object
              is always a 2D array containing Axes instances, even if it ends
              up being 1x1.

        subplot_kw : dict, default: {}
            Dict with keywords passed to the
            :meth:`~matplotlib.figure.Figure.add_subplot` call used to create
            each subplots.

        gridspec_kw : dict, default: {}
            Dict with keywords passed to the
            :class:`~matplotlib.gridspec.GridSpec` constructor used to create
            the grid the subplots are placed on.

        Returns
        -------
        ax : single Axes object or array of Axes objects
            The added axes.  The dimensions of the resulting array can be
            controlled with the squeeze keyword, see above.

        See Also
        --------
        pyplot.subplots : pyplot API; docstring includes examples.
        ")
                        (reparse-symbol indented_block_body) [42208 47868])
                    ("__remove_ax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47889 47893])
                            ("ax" variable nil (reparse-symbol function_parameters) [47895 47897]))                          )
                        (reparse-symbol indented_block_body) [47873 48815])
                    ("clf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48828 48832])
                            ("keep_observers" variable nil (reparse-symbol function_parameters) [48834 48848]))                          
                        :documentation "
        Clear the figure.

        Set *keep_observers* to True if, for example,
        a gui widget is tracking the axes in the figure.
        ")
                        (reparse-symbol indented_block_body) [48820 49771])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49786 49790])
                            ("keep_observers" variable nil (reparse-symbol function_parameters) [49792 49806]))                          
                        :documentation "
        Clear the figure -- synonym for :meth:`clf`.
        ")
                        (reparse-symbol indented_block_body) [49776 49940])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49979 49983])
                            ("renderer" variable nil (reparse-symbol function_parameters) [49985 49993]))                          
                        :documentation "
        Render the figure using :class:`matplotlib.backend_bases.RendererBase`
        instance *renderer*.
        ")
                        (reparse-symbol indented_block_body) [49945 51503])
                    ("draw_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51524 51528])
                            ("a" variable nil (reparse-symbol function_parameters) [51530 51531]))                          
                        :documentation "
        Draw :class:`matplotlib.artist.Artist` instance *a* only.
        This is available only after the figure is drawn.
        ")
                        (reparse-symbol indented_block_body) [51508 51909])
                    ("get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51927 51931]))                          )
                        (reparse-symbol indented_block_body) [51914 51959])
                    ("legend" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52005 52009])
                            ("args" variable nil (reparse-symbol function_parameters) [52011 52016])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52018 52026]))                          
                        :documentation "
        Place a legend on the figure.

        To make a legend from existing artists on every axes::

          legend()

        To make a legend for a list of lines and labels::

          legend( (line1, line2, line3),
                  ('label1', 'label2', 'label3'),
                  loc='upper right')

        These can also be specified by keyword::

          legend(handles=(line1, line2, line3),
                labels=('label1', 'label2', 'label3'),
                loc='upper right')

        Parameters
        ----------

        handles : sequence of `.Artist`, optional
            A list of Artists (lines, patches) to be added to the legend.
            Use this together with *labels*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.

            The length of handles and labels should be the same in this
            case. If they are not, they are truncated to the smaller length.

        labels : sequence of strings, optional
            A list of labels to show next to the artists.
            Use this together with *handles*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.

        Other Parameters
        ----------------

        loc : int or string or pair of floats, default: 'upper right'
            The location of the legend. Possible codes are:

                ===============   =============
                Location String   Location Code
                ===============   =============
                'best'            0
                'upper right'     1
                'upper left'      2
                'lower left'      3
                'lower right'     4
                'right'           5
                'center left'     6
                'center right'    7
                'lower center'    8
                'upper center'    9
                'center'          10
                ===============   =============


            Alternatively can be a 2-tuple giving ``x, y`` of the lower-left
            corner of the legend in axes coordinates (in which case
            ``bbox_to_anchor`` will be ignored).

        bbox_to_anchor : `.BboxBase` or pair of floats
            Specify any arbitrary location for the legend in `bbox_transform`
            coordinates (default Axes coordinates).

            For example, to put the legend's upper right hand corner in the
            center of the axes the following keywords can be used::

               loc='upper right', bbox_to_anchor=(0.5, 0.5)

        ncol : integer
            The number of columns that the legend has. Default is 1.

        prop : None or :class:`matplotlib.font_manager.FontProperties` or dict
            The font properties of the legend. If None (default), the current
            :data:`matplotlib.rcParams` will be used.

        fontsize : int or float or {'xx-small', 'x-small', 'small', 'medium', \\
'large', 'x-large', 'xx-large'}
            Controls the font size of the legend. If the value is numeric the
            size will be the absolute font size in points. String values are
            relative to the current default font size. This argument is only
            used if `prop` is not specified.

        numpoints : None or int
            The number of marker points in the legend when creating a legend
            entry for a `.Line2D` (line).
            Default is ``None``, which will take the value from
            :rc:`legend.numpoints`.

        scatterpoints : None or int
            The number of marker points in the legend when creating
            a legend entry for a `.PathCollection` (scatter plot).
            Default is ``None``, which will take the value from
            :rc:`legend.scatterpoints`.

        scatteryoffsets : iterable of floats
            The vertical offset (relative to the font size) for the markers
            created for a scatter plot legend entry. 0.0 is at the base the
            legend text, and 1.0 is at the top. To draw all markers at the
            same height, set to ``[0.5]``. Default is ``[0.375, 0.5, 0.3125]``.

        markerscale : None or int or float
            The relative size of legend markers compared with the originally
            drawn ones.
            Default is ``None``, which will take the value from
            :rc:`legend.markerscale`.

        markerfirst : bool
            If *True*, legend marker is placed to the left of the legend label.
            If *False*, legend marker is placed to the right of the legend
            label.
            Default is *True*.

        frameon : None or bool
            Control whether the legend should be drawn on a patch
            (frame).
            Default is ``None``, which will take the value from
            :rc:`legend.frameon`.

        fancybox : None or bool
            Control whether round edges should be enabled around the
            :class:`~matplotlib.patches.FancyBboxPatch` which makes up the
            legend's background.
            Default is ``None``, which will take the value from
            :rc:`legend.fancybox`.

        shadow : None or bool
            Control whether to draw a shadow behind the legend.
            Default is ``None``, which will take the value from
            :rc:`legend.shadow`.

        framealpha : None or float
            Control the alpha transparency of the legend's background.
            Default is ``None``, which will take the value from
            :rc:`legend.framealpha`.  If shadow is activated and
            *framealpha* is ``None``, the default value is ignored.

        facecolor : None or \"inherit\" or a color spec
            Control the legend's background color.
            Default is ``None``, which will take the value from
            :rc:`legend.facecolor`.  If ``\"inherit\"``, it will take
            :rc:`axes.facecolor`.

        edgecolor : None or \"inherit\" or a color spec
            Control the legend's background patch edge color.
            Default is ``None``, which will take the value from
            :rc:`legend.edgecolor` If ``\"inherit\"``, it will take
            :rc:`axes.edgecolor`.

        mode : {\"expand\", None}
            If `mode` is set to ``\"expand\"`` the legend will be horizontally
            expanded to fill the axes area (or `bbox_to_anchor` if defines
            the legend's size).

        bbox_transform : None or :class:`matplotlib.transforms.Transform`
            The transform for the bounding box (`bbox_to_anchor`). For a value
            of ``None`` (default) the Axes'
            :data:`~matplotlib.axes.Axes.transAxes` transform will be used.

        title : str or None
            The legend's title. Default is no title (``None``).

        borderpad : float or None
            The fractional whitespace inside the legend border.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.borderpad`.

        labelspacing : float or None
            The vertical space between the legend entries.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.labelspacing`.

        handlelength : float or None
            The length of the legend handles.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.handlelength`.

        handletextpad : float or None
            The pad between the legend handle and text.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.handletextpad`.

        borderaxespad : float or None
            The pad between the axes and legend border.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.borderaxespad`.

        columnspacing : float or None
            The spacing between columns.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.columnspacing`.

        handler_map : dict or None
            The custom dictionary mapping instances or types to a legend
            handler. This `handler_map` updates the default handler map
            found at :func:`matplotlib.legend.Legend.get_legend_handler_map`.

        Returns
        -------
        :class:`matplotlib.legend.Legend` instance

        Notes
        -----
        Not all kinds of artist are supported by the legend command. See
        :ref:`sphx_glr_tutorials_intermediate_legend_guide.py` for details.
        ")
                        (reparse-symbol indented_block_body) [51964 61661])
                    ("text" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61705 61709])
                            ("x" variable nil (reparse-symbol function_parameters) [61711 61712])
                            ("y" variable nil (reparse-symbol function_parameters) [61714 61715])
                            ("s" variable nil (reparse-symbol function_parameters) [61717 61718])
                            ("args" variable nil (reparse-symbol function_parameters) [61720 61725])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [61727 61735]))                          
                        :documentation "
        Add text to figure.

        Call signature::

          text(x, y, s, fontdict=None, **kwargs)

        Add text to figure at location *x*, *y* (relative 0-1
        coords). See :func:`~matplotlib.pyplot.text` for the meaning
        of the other arguments.

        kwargs control the :class:`~matplotlib.text.Text` properties:

        %(Text)s
        ")
                        (reparse-symbol indented_block_body) [61666 62406])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62433 62437])
                            ("a" variable nil (reparse-symbol function_parameters) [62439 62440]))                          )
                        (reparse-symbol indented_block_body) [62411 62588])
                    ("gca" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62631 62635])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [62637 62645]))                          
                        :documentation "
        Get the current axes, creating one if necessary

        The following kwargs are supported for ensuring the returned axes
        adheres to the given projection etc., and for axes creation if
        the active axes does not exist:

        %(Axes)s

        ")
                        (reparse-symbol indented_block_body) [62593 64528])
                    ("sca" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64541 64545])
                            ("a" variable nil (reparse-symbol function_parameters) [64547 64548]))                          
                        :documentation "Set the current axes to be a and return a.")
                        (reparse-symbol indented_block_body) [64533 64719])
                    ("_gci" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64733 64737]))                          
                        :documentation "
        Helper for :func:`~matplotlib.pyplot.gci`. Do not use elsewhere.
        ")
                        (reparse-symbol indented_block_body) [64724 65399])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65421 65425]))                          )
                        (reparse-symbol indented_block_body) [65404 66747])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66769 66773])
                            ("state" variable nil (reparse-symbol function_parameters) [66775 66780]))                          )
                        (reparse-symbol indented_block_body) [66752 68313])
                    ("add_axobserver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68337 68341])
                            ("func" variable nil (reparse-symbol function_parameters) [68343 68347]))                          
                        :documentation "Whenever the axes state change, ``func(self)`` will be called.")
                        (reparse-symbol indented_block_body) [68318 68466])
                    ("savefig" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68483 68487])
                            ("fname" variable nil (reparse-symbol function_parameters) [68489 68494])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [68496 68504]))                          
                        :documentation "
        Save the current figure.

        Call signature::

          savefig(fname, dpi=None, facecolor='w', edgecolor='w',
                  orientation='portrait', papertype=None, format=None,
                  transparent=False, bbox_inches=None, pad_inches=0.1,
                  frameon=None)

        The output formats available depend on the backend being used.

        Parameters
        ----------

        fname : str or file-like object
            A string containing a path to a filename, or a Python
            file-like object, or possibly some backend-dependent object
            such as :class:`~matplotlib.backends.backend_pdf.PdfPages`.

            If *format* is *None* and *fname* is a string, the output
            format is deduced from the extension of the filename. If
            the filename has no extension, the value of the rc parameter
            ``savefig.format`` is used.

            If *fname* is not a string, remember to specify *format* to
            ensure that the correct backend is used.

        Other Parameters
        ----------------

        dpi : [ *None* | scalar > 0 | 'figure']
            The resolution in dots per inch.  If *None* it will default to
            the value ``savefig.dpi`` in the matplotlibrc file. If 'figure'
            it will set the dpi to be the value of the figure.

        facecolor : color spec or None, optional
            the facecolor of the figure; if None, defaults to savefig.facecolor

        edgecolor : color spec or None, optional
            the edgecolor of the figure; if None, defaults to savefig.edgecolor

        orientation : {'landscape', 'portrait'}
            not supported on all backends; currently only on postscript output

        papertype : str
            One of 'letter', 'legal', 'executive', 'ledger', 'a0' through
            'a10', 'b0' through 'b10'. Only supported for postscript
            output.

        format : str
            One of the file extensions supported by the active
            backend.  Most backends support png, pdf, ps, eps and svg.

        transparent : bool
            If *True*, the axes patches will all be transparent; the
            figure patch will also be transparent unless facecolor
            and/or edgecolor are specified via kwargs.
            This is useful, for example, for displaying
            a plot on top of a colored background on a web page.  The
            transparency of these patches will be restored to their
            original values upon exit of this function.

        frameon : bool
            If *True*, the figure patch will be colored, if *False*, the
            figure background will be transparent.  If not provided, the
            rcParam 'savefig.frameon' will be used.

        bbox_inches : str or `~matplotlib.transforms.Bbox`, optional
            Bbox in inches. Only the given portion of the figure is
            saved. If 'tight', try to figure out the tight bbox of
            the figure. If None, use savefig.bbox

        pad_inches : scalar, optional
            Amount of padding around the figure when bbox_inches is
            'tight'. If None, use savefig.pad_inches

        bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional
            A list of extra artists that will be considered when the
            tight bbox is calculated.

        ")
                        (reparse-symbol indented_block_body) [68471 73175])
                    ("colorbar" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73223 73227])
                            ("mappable" variable nil (reparse-symbol function_parameters) [73229 73237])
                            ("cax" variable nil (reparse-symbol function_parameters) [73239 73242])
                            ("ax" variable nil (reparse-symbol function_parameters) [73249 73251])
                            ("use_gridspec" variable nil (reparse-symbol function_parameters) [73258 73270])
                            ("kw" variable nil (reparse-symbol function_parameters) [73277 73281]))                          
                        :documentation "
        Create a colorbar for a ScalarMappable instance, *mappable*.

        Documentation for the pylab thin wrapper:
        %(colorbar_doc)s
        ")
                        (reparse-symbol indented_block_body) [73180 74302])
                    ("subplots_adjust" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74327 74331])
                            ("args" variable nil (reparse-symbol function_parameters) [74333 74338])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [74340 74348]))                          
                        :documentation "
        Call signature::

          subplots_adjust(left=None, bottom=None, right=None, top=None,
                              wspace=None, hspace=None)

        Update the :class:`SubplotParams` with *kwargs* (defaulting to rc when
        *None*) and update the subplot locations.

        ")
                        (reparse-symbol indented_block_body) [74307 75277])
                    ("ginput" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75293 75297])
                            ("n" variable nil (reparse-symbol function_parameters) [75299 75300])
                            ("timeout" variable nil (reparse-symbol function_parameters) [75304 75311])
                            ("show_clicks" variable nil (reparse-symbol function_parameters) [75316 75327])
                            ("mouse_add" variable nil (reparse-symbol function_parameters) [75334 75343])
                            ("mouse_pop" variable nil (reparse-symbol function_parameters) [75362 75371])
                            ("mouse_stop" variable nil (reparse-symbol function_parameters) [75375 75385]))                          
                        :documentation "
        Blocking call to interact with a figure.

        Wait until the user clicks *n* times on the figure, and return the
        coordinates of each click in a list.

        The buttons used for the various actions (adding points, removing
        points, terminating the inputs) can be overridden via the
        arguments *mouse_add*, *mouse_pop* and *mouse_stop*, that give
        the associated mouse button: 1 for left, 2 for middle, 3 for
        right.

        Parameters
        ----------
        n : int, optional, default: 1
            Number of mouse clicks to accumulate. If negative, accumulate
            clicks until the input is terminated manually.
        timeout : scalar, optional, default: 30
            Number of seconds to wait before timing out. If zero or negative
            will never timeout.
        show_clicks : bool, optional, default: False
            If True, show a red cross at the location of each click.
        mouse_add : int, one of (1, 2, 3), optional, default: 1 (left click)
            Mouse button used to add points.
        mouse_pop : int, one of (1, 2, 3), optional, default: 3 (right click)
            Mouse button used to remove the most recently added point.
        mouse_stop : int, one of (1, 2, 3), optional, default: 2 (middle click)
            Mouse button used to stop input.

        Returns
        -------
        points : list of tuples
            A list of the clicked (x, y) coordinates.

        Notes
        -----
        The keyboard can also be used to select points in case your mouse
        does not have one or more of the buttons.  The delete and backspace
        keys act like right clicking (i.e., remove last point), the enter key
        terminates input and any other key (not already used by the window
        manager) selects a point.
        ")
                        (reparse-symbol indented_block_body) [75282 77641])
                    ("waitforbuttonpress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77669 77673])
                            ("timeout" variable nil (reparse-symbol function_parameters) [77675 77682]))                          
                        :documentation "
        Blocking call to interact with the figure.

        This will return True is a key was pressed, False if a mouse
        button was pressed and None if *timeout* was reached without
        either being pressed.

        If *timeout* is negative, does not timeout.
        ")
                        (reparse-symbol indented_block_body) [77646 78086])
                    ("get_default_bbox_extra_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78126 78130]))                          )
                        (reparse-symbol indented_block_body) [78091 78527])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78550 78554])
                            ("renderer" variable nil (reparse-symbol function_parameters) [78556 78564]))                          
                        :documentation "
        Return a (tight) bounding box of the figure in inches.

        It only accounts axes title, axis labels, and axis
        ticklabels. Needs improvement.
        ")
                        (reparse-symbol indented_block_body) [78532 79171])
                    ("init_layoutbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79195 79199]))                          
                        :documentation "
        initilaize the layoutbox for use in constrained_layout.
        ")
                        (reparse-symbol indented_block_body) [79176 79553])
                    ("execute_constrained_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79589 79593])
                            ("renderer" variable nil (reparse-symbol function_parameters) [79595 79603]))                          
                        :documentation "
        Use ``layoutbox`` to determine pos positions within axes.

        See also set_constrained_layout_pads
        ")
                        (reparse-symbol indented_block_body) [79558 80745])
                    ("tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80767 80771])
                            ("renderer" variable nil (reparse-symbol function_parameters) [80773 80781])
                            ("pad" variable nil (reparse-symbol function_parameters) [80788 80791])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [80798 80803])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [80810 80815])
                            ("rect" variable nil (reparse-symbol function_parameters) [80843 80847]))                          
                        :documentation "
        Adjust subplot parameters to give specified padding.

        Parameters
        ----------
        pad : float
            padding between the figure edge and the edges of subplots,
            as a fraction of the font-size.

        h_pad, w_pad : float, optional
            padding (height/width) between edges of adjacent subplots.
            Defaults to `pad_inches`.

        rect : tuple (left, bottom, right, top), optional
            a rectangle (left, bottom, right, top) in the normalized
            figure coordinate that the whole subplots area (including
            labels) will fit into. Default is (0, 0, 1, 1).
        ")
                        (reparse-symbol indented_block_body) [80750 82155])
                    ("align_xlabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82178 82182])
                            ("axs" variable nil (reparse-symbol function_parameters) [82184 82187]))                          
                        :documentation "
        Align the ylabels of subplots in the same subplot column if label
        alignment is being done automatically (i.e. the label position is
        not manually set).

        Alignment persists for draw events after this is called.

        If a label is on the bottom, it is aligned with labels on axes that
        also have their label on the bottom and that have the same
        bottom-most subplot row.  If the label is on the top,
        it is aligned with labels on axes with the same top-most row.

        Parameters
        ----------
        axs : list of `~matplotlib.axes.Axes` (None)
            Optional list of (or ndarray) `~matplotlib.axes.Axes` to align
            the xlabels.  Default is to align all axes on the figure.

        See Also
        --------
        matplotlib.figure.Figure.align_ylabels

        matplotlib.figure.Figure.align_labels

        Notes
        -----
        This assumes that ``axs`` are from the same `.GridSpec`, so that
        their `.SubplotSpec` positions correspond to figure positions.

        Examples
        --------
        Example with rotated xtick labels::

            fig, axs = plt.subplots(1, 2)
            for tick in axs[0].get_xticklabels():
                tick.set_rotation(55)
            axs[0].set_xlabel('XLabel 0')
            axs[1].set_xlabel('XLabel 1')
            fig.align_xlabels()

        ")
                        (reparse-symbol indented_block_body) [82160 84790])
                    ("align_ylabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84813 84817])
                            ("axs" variable nil (reparse-symbol function_parameters) [84819 84822]))                          
                        :documentation "
        Align the ylabels of subplots in the same subplot column if label
        alignment is being done automatically (i.e. the label position is
        not manually set).

        Alignment persists for draw events after this is called.

        If a label is on the left, it is aligned with labels on axes that
        also have their label on the left and that have the same
        left-most subplot column.  If the label is on the right,
        it is aligned with labels on axes with the same right-most column.

        Parameters
        ----------
        axs : list of `~matplotlib.axes.Axes` (None)
            Optional list (or ndarray) of `~matplotlib.axes.Axes` to align
            the ylabels. Default is to align all axes on the figure.

        See Also
        --------
        matplotlib.figure.Figure.align_xlabels

        matplotlib.figure.Figure.align_labels

        Notes
        -----
        This assumes that ``axs`` are from the same `.GridSpec`, so that
        their `.SubplotSpec` positions correspond to figure positions.

        Examples
        --------
        Example with large yticks labels::

            fig, axs = plt.subplots(2, 1)
            axs[0].plot(np.arange(0, 1000, 50))
            axs[0].set_ylabel('YLabel 0')
            axs[1].set_ylabel('YLabel 1')
            fig.align_ylabels()

        ")
                        (reparse-symbol indented_block_body) [84795 87471])
                    ("align_labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87493 87497])
                            ("axs" variable nil (reparse-symbol function_parameters) [87499 87502]))                          
                        :documentation "
        Align the xlabels and ylabels of subplots with the same subplots
        row or column (respectively) if label alignment is being
        done automatically (i.e. the label position is not manually set).

        Alignment persists for draw events after this is called.

        Parameters
        ----------
        axs : list of `~matplotlib.axes.Axes` (None)
            Optional list (or ndarray) of `~matplotlib.axes.Axes` to
            align the labels.  Default is to align all axes on the figure.

        See Also
        --------
        matplotlib.figure.Figure.align_xlabels

        matplotlib.figure.Figure.align_ylabels
        ")
                        (reparse-symbol indented_block_body) [87476 88250]))                  
                :type "class")
                nil [7968 88250])
            ("figaspect" function
               (:documentation "
    Create a figure with specified aspect ratio.  If *arg* is a number,
    use that aspect ratio.  If *arg* is an array, figaspect will
    determine the width and height for a figure that would fit array
    preserving aspect ratio.  The figure width, height in inches are
    returned.  Be sure to create an axes with equal with and height,
    e.g.,

    Example usage::

      # make a figure twice as tall as it is wide
      w, h = figaspect(2.)
      fig = Figure(figsize=(w,h))
      ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
      ax.imshow(A, **kwargs)


      # make a figure with the proper aspect for an array
      A = rand(5,3)
      w, h = figaspect(A)
      fig = Figure(figsize=(w,h))
      ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
      ax.imshow(A, **kwargs)

    Thanks to Fernando Perez for this function
    "
                :arguments 
                  ( ("arg" variable nil (reparse-symbol function_parameters) [88266 88269]))                  )
                nil [88252 90256])
            ("docstring" code nil nil [90257 90311]))          
      :file "figure.py"
      :pointmax 90312
      :fsize 90311
      :lastmodtime '(23240 23001 117461 0)
      :unmatched-syntax '((FROM 81530 . 81534) (PERIOD 81535 . 81536) (NAME 67565 . 67568) (IF 67588 . 67590) (ELSE 67599 . 67603) (RETURN 47692 . 47698) (IF 47712 . 47714) (ELSE 47731 . 47735) (NAME 44993 . 44999) (IF 45008 . 45010) (ELSE 45018 . 45022) (NAME 44907 . 44913) (IF 44922 . 44924) (ELSE 44932 . 44936) (NAME 17059 . 17063) (IF 17090 . 17092) (ELSE 17117 . 17121) (INDENT_BLOCK 14883 . 15128) (NEWLINE 14882 . 14883) (COLON 14881 . 14882) (TRY 14786 . 14789) (AS 14875 . 14877)))
    (semanticdb-table "semanticdb-table-150cc74"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
:mod:`~matplotlib.gridspec` is a module which specifies the location
of the subplot in the figure.

    `GridSpec`
        specifies the geometry of the grid that a subplot will be
        placed. The number of rows and number of columns of the grid
        need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.

    `SubplotSpec`
        specifies the location of the subplot in the given `GridSpec`.

\"\"\"" code nil nil [1 463])
            ("__future__" include nil nil [465 529])
            ("six" include nil nil [531 541])
            ("copy" include nil nil [543 554])
            ("logging" include nil nil [555 569])
            ("warnings" include nil nil [570 585])
            ("numpy" include nil nil [587 605])
            ("matplotlib" include nil nil [607 631])
            ("matplotlib" include nil nil [632 693])
            ("matplotlib.transforms" include nil nil [694 732])
            ("matplotlib._layoutbox" include nil nil [733 774])
            ("matplotlib.cbook" include nil nil [775 818])
            ("_log" variable nil nil [820 854])
            ("GridSpecBase" type
               (:documentation "
    A base class of GridSpec that specifies the geometry of the grid
    that a subplot will be placed.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the grid need to
        be set. Optionally, the ratio of heights and widths of rows and
        columns can be specified.
        \"\"\"" code nil (reparse-symbol indented_block_body) [1091 1281])
                            ("self, self" code nil (reparse-symbol indented_block_body) [1290 1329])
                            ("self" code nil (reparse-symbol indented_block_body) [1338 1375])
                            ("self" code nil (reparse-symbol indented_block_body) [1384 1419]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1023 1027])
                            ("nrows" variable nil (reparse-symbol function_parameters) [1029 1034])
                            ("ncols" variable nil (reparse-symbol function_parameters) [1036 1041])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [1043 1056])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [1063 1075]))                          
                        :documentation "
        The number of rows and number of columns of the grid need to
        be set. Optionally, the ratio of heights and widths of rows and
        columns can be specified.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1010 1420])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1442 1446]))                          )
                        (reparse-symbol indented_block_body) [1425 1539])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1567 1571])
                            ("figure" variable nil (reparse-symbol function_parameters) [1573 1579])
                            ("fig" variable nil (reparse-symbol function_parameters) [1586 1589]))                          )
                        (reparse-symbol indented_block_body) [1544 1610])
                    ("new_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1635 1639])
                            ("loc" variable nil (reparse-symbol function_parameters) [1641 1644])
                            ("rowspan" variable nil (reparse-symbol function_parameters) [1646 1653])
                            ("colspan" variable nil (reparse-symbol function_parameters) [1657 1664]))                          
                        :documentation "
        create and return a SuplotSpec instance.
        ")
                        (reparse-symbol indented_block_body) [1615 1859])
                    ("set_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1885 1889])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [1891 1903]))                          )
                        (reparse-symbol indented_block_body) [1864 2175])
                    ("get_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2201 2205]))                          )
                        (reparse-symbol indented_block_body) [2180 2246])
                    ("set_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2273 2277])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [2279 2292]))                          )
                        (reparse-symbol indented_block_body) [2251 2566])
                    ("get_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2593 2597]))                          )
                        (reparse-symbol indented_block_body) [2571 2639])
                    ("get_grid_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2667 2671])
                            ("fig" variable nil (reparse-symbol function_parameters) [2673 2676])
                            ("raw" variable nil (reparse-symbol function_parameters) [2678 2681]))                          
                        :documentation "
        return lists of bottom and top position of rows, left and
        right positions of columns.

        If raw=True, then these are all in units relative to the container
        with no margins.  (used for constrained_layout).
        ")
                        (reparse-symbol indented_block_body) [2644 4739])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4760 4764])
                            ("key" variable nil (reparse-symbol function_parameters) [4766 4769]))                          
                        :documentation "Create and return a SuplotSpec instance.
        ")
                        (reparse-symbol indented_block_body) [4744 5733]))                  
                :type "class")
                nil [857 5733])
            ("GridSpec" type
               (:documentation "
    A class that specifies the geometry of the grid that a subplot
    will be placed. The location of grid is determined by similar way
    as the SubplotParams.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the grid need to be set.
        Optionally, the subplot layout parameters (e.g., left, right, etc.)
        can be tuned.

        Parameters
        ----------
        nrows : int
            Number of rows in grid.

        ncols : int
            Number or columns in grid.

        Notes
        -----
        See `~.figure.SubplotParams` for descriptions of the layout parameters.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6166 6620])
                            ("self" variable nil (reparse-symbol indented_block_body) [6629 6645])
                            ("self" variable nil (reparse-symbol indented_block_body) [6654 6674])
                            ("self" variable nil (reparse-symbol indented_block_body) [6683 6701])
                            ("self" variable nil (reparse-symbol indented_block_body) [6710 6724])
                            ("self" variable nil (reparse-symbol indented_block_body) [6733 6753])
                            ("self" variable nil (reparse-symbol indented_block_body) [6762 6782])
                            ("self" variable nil (reparse-symbol indented_block_body) [6791 6811])
                            ("GridSpecBase" code nil (reparse-symbol indented_block_body) [6821 6978])
                            ("if" code nil (reparse-symbol indented_block_body) [6988 7329]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5962 5966])
                            ("nrows" variable nil (reparse-symbol function_parameters) [5968 5973])
                            ("ncols" variable nil (reparse-symbol function_parameters) [5975 5980])
                            ("figure" variable nil (reparse-symbol function_parameters) [5982 5988])
                            ("left" variable nil (reparse-symbol function_parameters) [6012 6016])
                            ("bottom" variable nil (reparse-symbol function_parameters) [6023 6029])
                            ("right" variable nil (reparse-symbol function_parameters) [6036 6041])
                            ("top" variable nil (reparse-symbol function_parameters) [6048 6051])
                            ("wspace" variable nil (reparse-symbol function_parameters) [6075 6081])
                            ("hspace" variable nil (reparse-symbol function_parameters) [6088 6094])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [6118 6130])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [6137 6150]))                          
                        :documentation "
        The number of rows and number of columns of the grid need to be set.
        Optionally, the subplot layout parameters (e.g., left, right, etc.)
        can be tuned.

        Parameters
        ----------
        nrows : int
            Number of rows in grid.

        ncols : int
            Number or columns in grid.

        Notes
        -----
        See `~.figure.SubplotParams` for descriptions of the layout parameters.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5949 7329])
                    ("_AllowedKeys" variable nil (reparse-symbol indented_block_body) [7523 7592])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7615 7619]))                          )
                        (reparse-symbol indented_block_body) [7598 7764])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7786 7790])
                            ("state" variable nil (reparse-symbol function_parameters) [7792 7797]))                          )
                        (reparse-symbol indented_block_body) [7769 7909])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7925 7929])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7931 7939]))                          
                        :documentation "
        Update the current values.  If any kwarg is None, default to
        the current value, if set, otherwise to rc.
        ")
                        (reparse-symbol indented_block_body) [7914 9360])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9388 9392])
                            ("figure" variable nil (reparse-symbol function_parameters) [9394 9400])
                            ("fig" variable nil (reparse-symbol function_parameters) [9407 9410]))                          
                        :documentation "
        Return a dictionary of subplot layout parameters. The default
        parameters are from rcParams unless a figure attribute is set.
        ")
                        (reparse-symbol indented_block_body) [9365 10160])
                    ("locally_modified_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10201 10205]))                          )
                        (reparse-symbol indented_block_body) [10165 10274])
                    ("tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10296 10300])
                            ("figure" variable nil (reparse-symbol function_parameters) [10302 10308])
                            ("renderer" variable nil (reparse-symbol function_parameters) [10310 10318])
                            ("pad" variable nil (reparse-symbol function_parameters) [10346 10349])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [10356 10361])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [10368 10373])
                            ("rect" variable nil (reparse-symbol function_parameters) [10380 10384]))                          
                        :documentation "
        Adjust subplot parameters to give specified padding.

        Parameters
        ----------

        pad : float
            Padding between the figure edge and the edges of subplots, as a
            fraction of the font-size.
        h_pad, w_pad : float, optional
            Padding (height/width) between edges of adjacent subplots.
            Defaults to ``pad_inches``.
        rect : tuple of 4 floats, optional
            (left, bottom, right, top) rectangle in normalized figure
            coordinates that the whole subplots area (including labels) will
            fit into.  Default is (0, 0, 1, 1).
        ")
                        (reparse-symbol indented_block_body) [10279 11631]))                  
                :type "class")
                nil [5735 11631])
            ("GridSpecFromSubplotSpec" type
               (:documentation "
    GridSpec whose subplot layout parameters are inherited from the
    location specified by a given SubplotSpec.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the grid need to
        be set. An instance of SubplotSpec is also needed to be set
        from which the layout parameters will be inherited. The wspace
        and hspace of the layout can be optionally specified or the
        default values (from the figure or rcParams) will be used.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11985 12343])
                            ("self" variable nil (reparse-symbol indented_block_body) [12352 12373])
                            ("self" variable nil (reparse-symbol indented_block_body) [12382 12403])
                            ("self" variable nil (reparse-symbol indented_block_body) [12412 12445])
                            ("GridSpecBase" code nil (reparse-symbol indented_block_body) [12454 12611])
                            ("subspeclb" variable nil (reparse-symbol indented_block_body) [12649 12684])
                            ("if" code nil (reparse-symbol indented_block_body) [12693 13027]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11826 11830])
                            ("nrows" variable nil (reparse-symbol function_parameters) [11832 11837])
                            ("ncols" variable nil (reparse-symbol function_parameters) [11839 11844])
                            ("subplot_spec" variable nil (reparse-symbol function_parameters) [11863 11875])
                            ("wspace" variable nil (reparse-symbol function_parameters) [11894 11900])
                            ("hspace" variable nil (reparse-symbol function_parameters) [11907 11913])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [11937 11950])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [11957 11969]))                          
                        :documentation "
        The number of rows and number of columns of the grid need to
        be set. An instance of SubplotSpec is also needed to be set
        from which the layout parameters will be inherited. The wspace
        and hspace of the layout can be optionally specified or the
        default values (from the figure or rcParams) will be used.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11813 13027])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13055 13059])
                            ("figure" variable nil (reparse-symbol function_parameters) [13061 13067])
                            ("fig" variable nil (reparse-symbol function_parameters) [13074 13077]))                          
                        :documentation "Return a dictionary of subplot layout parameters.
        ")
                        (reparse-symbol indented_block_body) [13032 14047])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14080 14084]))                          
                        :documentation "Get the topmost SubplotSpec instance associated with the subplot.")
                        (reparse-symbol indented_block_body) [14052 14227]))                  
                :type "class")
                nil [11633 14227])
            ("SubplotSpec" type
               (:documentation "Specifies the location of the subplot in the given `GridSpec`.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell.

        The index starts from 0.
        \"\"\"" code nil (reparse-symbol indented_block_body) [14394 14614])
                            ("self" variable nil (reparse-symbol indented_block_body) [14623 14648])
                            ("self" variable nil (reparse-symbol indented_block_body) [14657 14673])
                            ("self" variable nil (reparse-symbol indented_block_body) [14682 14698])
                            ("if" code nil (reparse-symbol indented_block_body) [14707 15251]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14352 14356])
                            ("gridspec" variable nil (reparse-symbol function_parameters) [14358 14366])
                            ("num1" variable nil (reparse-symbol function_parameters) [14368 14372])
                            ("num2" variable nil (reparse-symbol function_parameters) [14374 14378]))                          
                        :documentation "
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell.

        The index starts from 0.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14339 15251])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15273 15277]))                          )
                        (reparse-symbol indented_block_body) [15256 15422])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15444 15448])
                            ("state" variable nil (reparse-symbol function_parameters) [15450 15455]))                          )
                        (reparse-symbol indented_block_body) [15427 15567])
                    ("get_gridspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15589 15593]))                          )
                        (reparse-symbol indented_block_body) [15572 15626])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15648 15652]))                          
                        :documentation "
        Get the subplot geometry (``n_rows, n_cols, start, stop``).

        start and stop are the index of the start and stop of the
        subplot.
        ")
                        (reparse-symbol indented_block_body) [15631 15935])
                    ("get_rows_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15961 15965]))                          
                        :documentation "
        Get the subplot row and column numbers:
        (``n_rows, n_cols, row_start, row_stop, col_start, col_stop``)
        ")
                        (reparse-symbol indented_block_body) [15940 16495])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16517 16521])
                            ("figure" variable nil (reparse-symbol function_parameters) [16523 16529])
                            ("return_all" variable nil (reparse-symbol function_parameters) [16531 16541]))                          
                        :documentation "Update the subplot position from ``figure.subplotpars``.
        ")
                        (reparse-symbol indented_block_body) [16500 17330])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17363 17367]))                          )
                        (reparse-symbol indented_block_body) [17335 17633])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17649 17653])
                            ("other" variable nil (reparse-symbol function_parameters) [17655 17660]))                          )
                        (reparse-symbol indented_block_body) [17638 17952])
                    ("if" code nil (reparse-symbol indented_block_body) [17957 18039])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18057 18061]))                          )
                        (reparse-symbol indented_block_body) [18044 18124]))                  
                :type "class")
                nil [14229 18124]))          
      :file "gridspec.py"
      :pointmax 18124
      :fsize 18123
      :lastmodtime '(23240 23001 117461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-15180ec"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The image module supports basic image loading, rescaling and display
operations.

\"\"\"" code nil nil [1 90])
            ("" code nil nil [114 199])
            ("six" include nil nil [201 211])
            ("six.moves.urllib.parse" include nil nil [212 255])
            ("six.moves.urllib.request" include nil nil [256 300])
            ("io" include nil nil [301 323])
            ("math" include nil nil [325 346])
            ("os" include nil nil [347 356])
            ("logging" include nil nil [357 371])
            ("numpy" include nil nil [373 391])
            ("matplotlib" include nil nil [393 424])
            ("matplotlib.artist" include nil nil [425 460])
            ("matplotlib.artist" include nil nil [461 510])
            ("matplotlib.colors" include nil nil [511 546])
            ("matplotlib.cm" include nil nil [547 573])
            ("matplotlib.cbook" include nil nil [574 606])
            ("matplotlib._image" include nil nil [678 712])
            ("matplotlib._png" include nil nil [713 743])
            ("matplotlib._image" include nil nil [837 868])
            ("" code nil nil [904 1016])
            ("_log" variable nil nil [1018 1052])
            ("_interpd_" variable nil nil [1102 1715])
            ("interpolations_names" variable nil nil [1717 1754])
            ("composite_images" function
               (:documentation "
    Composite a number of RGBA images into one.  The images are
    composited in the order in which they appear in the `images` list.

    Parameters
    ----------
    images : list of Images
        Each must have a `make_image` method.  For each image,
        `can_composite` should return `True`, though this is not
        enforced by this function.  Each image must have a purely
        affine transformation with no shear.

    renderer : RendererBase instance

    magnification : float
        The additional magnification to apply for the renderer in use.

    Returns
    -------
    tuple : image, offset_x, offset_y
        Returns the tuple:

        - image: A numpy array of the same type as the input images.

        - offset_x, offset_y: The offset of the image (left, bottom)
          in the output figure.
    "
                :arguments 
                  ( ("images" variable nil (reparse-symbol function_parameters) [1778 1784])
                    ("renderer" variable nil (reparse-symbol function_parameters) [1786 1794])
                    ("magnification" variable nil (reparse-symbol function_parameters) [1796 1809]))                  )
                nil [1757 3611])
            ("_draw_list_compositing_images" function
               (:documentation "
    Draw a sorted list of artists, compositing images into a single
    image where possible.

    For internal matplotlib use only: It is here to reduce duplication
    between `Figure.draw` and `Axes.draw`, but otherwise should not be
    generally useful.
    "
                :arguments 
                  ( ("renderer" variable nil (reparse-symbol function_parameters) [3656 3664])
                    ("parent" variable nil (reparse-symbol function_parameters) [3666 3672])
                    ("artists" variable nil (reparse-symbol function_parameters) [3674 3681])
                    ("suppress_composite" variable nil (reparse-symbol function_parameters) [3683 3701]))                  )
                nil [3613 5279])
            ("_rgb_to_rgba" function
               (:documentation "
    Convert an RGB image to RGBA, as required by the image resample C++
    extension.
    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [5298 5299]))                  )
                nil [5281 5605])
            ("_ImageBase" type
               (:superclasses ("martist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [5664 5674])
                    ("" code nil (reparse-symbol indented_block_body) [5711 5718])
                    ("_interpd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5736 5740]))                          )
                        (reparse-symbol indented_block_body) [5723 5768])
                    ("" code nil (reparse-symbol indented_block_body) [5804 5811])
                    ("_interpdr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5830 5834]))                          )
                        (reparse-symbol indented_block_body) [5816 5896])
                    ("" code nil (reparse-symbol indented_block_body) [5932 5984])
                    ("iterpnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6004 6008]))                          )
                        (reparse-symbol indented_block_body) [5989 6047])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6064 6068]))                          )
                        (reparse-symbol indented_block_body) [6052 6142])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [6443 6897])
                            ("martist" code nil (reparse-symbol indented_block_body) [6906 6935])
                            ("cm" code nil (reparse-symbol indented_block_body) [6944 6988])
                            ("self" variable nil (reparse-symbol indented_block_body) [6997 7019])
                            ("if" code nil (reparse-symbol indented_block_body) [7028 7093])
                            ("self" variable nil (reparse-symbol indented_block_body) [7101 7121])
                            ("self" code nil (reparse-symbol indented_block_body) [7130 7161])
                            ("self" code nil (reparse-symbol indented_block_body) [7170 7199])
                            ("self" code nil (reparse-symbol indented_block_body) [7208 7245])
                            ("self" code nil (reparse-symbol indented_block_body) [7254 7281])
                            ("self" variable nil (reparse-symbol indented_block_body) [7290 7304])
                            ("self" variable nil (reparse-symbol indented_block_body) [7314 7334])
                            ("self" code nil (reparse-symbol indented_block_body) [7344 7363]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6160 6164])
                            ("ax" variable nil (reparse-symbol function_parameters) [6166 6168])
                            ("cmap" variable nil (reparse-symbol function_parameters) [6187 6191])
                            ("norm" variable nil (reparse-symbol function_parameters) [6215 6219])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [6243 6256])
                            ("origin" variable nil (reparse-symbol function_parameters) [6280 6286])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [6310 6320])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [6341 6350])
                            ("resample" variable nil (reparse-symbol function_parameters) [6373 6381])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6406 6414]))                          
                        :documentation "
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6147 7364])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7386 7390]))                          )
                        (reparse-symbol indented_block_body) [7369 7555])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7573 7577]))                          
                        :documentation "Get the numrows, numcols of the input image")
                        (reparse-symbol indented_block_body) [7560 7769])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7788 7792])
                            ("alpha" variable nil (reparse-symbol function_parameters) [7794 7799]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [7774 8011])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8028 8032]))                          
                        :documentation "
        Call this whenever the mappable is changed so observers can
        update state
        ")
                        (reparse-symbol indented_block_body) [8016 8248])
                    ("_make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8269 8273])
                            ("A" variable nil (reparse-symbol function_parameters) [8275 8276])
                            ("in_bbox" variable nil (reparse-symbol function_parameters) [8278 8285])
                            ("out_bbox" variable nil (reparse-symbol function_parameters) [8287 8295])
                            ("clip_bbox" variable nil (reparse-symbol function_parameters) [8297 8306])
                            ("magnification" variable nil (reparse-symbol function_parameters) [8308 8321])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [8347 8356])
                            ("round_to_pixel_border" variable nil (reparse-symbol function_parameters) [8364 8385]))                          
                        :documentation "
        Normalize, rescale and color the image `A` from the given
        in_bbox (in data space), to the given out_bbox (in pixel
        space) clipped to the given clip_bbox (also in pixel space),
        and magnified by the magnification factor.

        `A` may be a greyscale image (MxN) with a dtype of `float32`,
        `float64`, `uint16` or `uint8`, or an RGBA image (MxNx4) with
        a dtype of `float32`, `float64`, or `uint8`.

        If `unsampled` is True, the image will not be scaled, but an
        appropriate affine transformation will be returned instead.

        If `round_to_pixel_border` is True, the output image size will
        be rounded to the nearest pixel boundary.  This makes the
        images align correctly with the axes.  It should not be used
        in cases where you want exact scaling, however, such as
        FigureImage.

        Returns the resulting (image, x, y, trans), where (x, y) is
        the upper left corner of the result in pixel space, and
        `trans` is the affine transformation from the image to pixel
        space.
        ")
                        (reparse-symbol indented_block_body) [8253 20633])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20653 20657])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20659 20667])
                            ("magnification" variable nil (reparse-symbol function_parameters) [20669 20682])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [20688 20697]))                          )
                        (reparse-symbol indented_block_body) [20638 20778])
                    ("_draw_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20809 20813])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20815 20823])
                            ("gc" variable nil (reparse-symbol function_parameters) [20825 20827]))                          
                        :documentation "
        draw unsampled image. The renderer should support a draw_image method
        with scale parameter.
        ")
                        (reparse-symbol indented_block_body) [20783 21192])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21224 21228])
                            ("renderer" variable nil (reparse-symbol function_parameters) [21230 21238]))                          
                        :documentation "
        return True if the image is better to be drawn unsampled.
        The derived class needs to override it.
        ")
                        (reparse-symbol indented_block_body) [21197 21400])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21439 21443])
                            ("renderer" variable nil (reparse-symbol function_parameters) [21445 21453])
                            ("args" variable nil (reparse-symbol function_parameters) [21455 21460])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21462 21470]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21405 22372])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22390 22394])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [22396 22406]))                          
                        :documentation "
        Test whether the mouse event occurred within the image.
        ")
                        (reparse-symbol indented_block_body) [22377 23237])
                    ("write_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23256 23260])
                            ("fname" variable nil (reparse-symbol function_parameters) [23262 23267]))                          
                        :documentation "Write the image to png file with fname")
                        (reparse-symbol indented_block_body) [23242 23486])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23504 23508])
                            ("A" variable nil (reparse-symbol function_parameters) [23510 23511]))                          
                        :documentation "
        Set the image array.

        ACCEPTS: numpy/PIL Image A

        Note that this function does *not* update the normalization used.
        ")
                        (reparse-symbol indented_block_body) [23491 25457])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25476 25480])
                            ("A" variable nil (reparse-symbol function_parameters) [25482 25483]))                          
                        :documentation "
        Retained for backwards compatibility - use set_data instead

        ACCEPTS: numpy array A or PIL Image
        ")
                        (reparse-symbol indented_block_body) [25462 25800])
                    ("get_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25827 25831]))                          
                        :documentation "
        Return the interpolation method the image uses when resizing.

        One of 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36',
        'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom',
        'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', or 'none'.

        ")
                        (reparse-symbol indented_block_body) [25805 26182])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26209 26213])
                            ("s" variable nil (reparse-symbol function_parameters) [26215 26216]))                          
                        :documentation "
        Set the interpolation method the image uses when resizing.

        if None, use a value from rc setting. If 'none', the image is
        shown as is without interpolating. 'none' is only supported in
        agg, ps and pdf backends and will fall back to 'nearest' mode
        for other backends.

        .. ACCEPTS: ['nearest' | 'bilinear' | 'bicubic' | 'spline16' |
           'spline36' | 'hanning' | 'hamming' | 'hermite' | 'kaiser' |
           'quadric' | 'catrom' | 'gaussian' | 'bessel' | 'mitchell' |
           'sinc' | 'lanczos' | 'none' ]

        ")
                        (reparse-symbol indented_block_body) [26187 27048])
                    ("can_composite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27071 27075]))                          
                        :documentation "
        Returns `True` if the image can be composited with its neighbors.
        ")
                        (reparse-symbol indented_block_body) [27053 27340])
                    ("set_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27362 27366])
                            ("v" variable nil (reparse-symbol function_parameters) [27368 27369]))                          
                        :documentation "
        Set whether or not image resampling is used.

        ACCEPTS: True|False
        ")
                        (reparse-symbol indented_block_body) [27345 27596])
                    ("get_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27618 27622]))                          
                        :documentation "Return the image resample boolean.")
                        (reparse-symbol indented_block_body) [27601 27704])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27728 27732])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [27734 27744]))                          
                        :documentation "
        Set whether the resize filter norms the weights -- see
        help for imshow

        ACCEPTS: 0 or 1
        ")
                        (reparse-symbol indented_block_body) [27709 28013])
                    ("get_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28037 28041]))                          
                        :documentation "Return the filternorm setting.")
                        (reparse-symbol indented_block_body) [28018 28121])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28144 28148])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [28150 28159]))                          
                        :documentation "
        Set the resize filter radius only applicable to some
        interpolation schemes -- see help for imshow

        ACCEPTS: positive float
        ")
                        (reparse-symbol indented_block_body) [28126 28511])
                    ("get_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28534 28538]))                          
                        :documentation "Return the filterrad setting.")
                        (reparse-symbol indented_block_body) [28516 28616]))                  
                :type "class")
                nil [5607 28616])
            ("AxesImage" type
               (:superclasses ("_ImageBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28663 28667]))                          )
                        (reparse-symbol indented_block_body) [28651 28741])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [29073 29527])
                            ("self" variable nil (reparse-symbol indented_block_body) [29537 29558])
                            ("super" code nil (reparse-symbol indented_block_body) [29568 29860]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28759 28763])
                            ("ax" variable nil (reparse-symbol function_parameters) [28765 28767])
                            ("cmap" variable nil (reparse-symbol function_parameters) [28786 28790])
                            ("norm" variable nil (reparse-symbol function_parameters) [28814 28818])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [28842 28855])
                            ("origin" variable nil (reparse-symbol function_parameters) [28879 28885])
                            ("extent" variable nil (reparse-symbol function_parameters) [28909 28915])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [28939 28949])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [28970 28979])
                            ("resample" variable nil (reparse-symbol function_parameters) [29002 29010])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29035 29043]))                          
                        :documentation "
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28746 29861])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29888 29892])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29894 29902]))                          )
                        (reparse-symbol indented_block_body) [29866 30052])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30072 30076])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30078 30086])
                            ("magnification" variable nil (reparse-symbol function_parameters) [30088 30101])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [30107 30116]))                          )
                        (reparse-symbol indented_block_body) [30057 30509])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30541 30545])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30547 30555]))                          
                        :documentation "
        Return whether the image would be better drawn unsampled.
        ")
                        (reparse-symbol indented_block_body) [30514 30750])
                    ("set_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30770 30774])
                            ("extent" variable nil (reparse-symbol function_parameters) [30776 30782]))                          
                        :documentation "
        extent is data axes (left, right, bottom, top) for making image plots

        This updates ax.dataLim, and, if autoscaling, sets viewLim
        to tightly fit the image, regardless of dataLim.  Autoscaling
        state is not changed, so following this with ax.autoscale_view
        will redo the autoscaling in accord with dataLim.
        ")
                        (reparse-symbol indented_block_body) [30755 31598])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31618 31622]))                          
                        :documentation "Get the image extent: left, right, bottom, top")
                        (reparse-symbol indented_block_body) [31603 32017])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32042 32046])
                            ("event" variable nil (reparse-symbol function_parameters) [32048 32053]))                          
                        :documentation "Get the cursor data for a given event")
                        (reparse-symbol indented_block_body) [32022 32802]))                  
                :type "class")
                nil [28618 32802])
            ("NonUniformImage" type
               (:superclasses ("AxesImage")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        kwargs are identical to those for AxesImage, except
        that 'nearest' and 'bilinear' are the only supported 'interpolation'
        options.
        \"\"\"" code nil (reparse-symbol indented_block_body) [32884 33053])
                            ("interp" variable nil (reparse-symbol indented_block_body) [33062 33109])
                            ("super" code nil (reparse-symbol indented_block_body) [33118 33169])
                            ("self" code nil (reparse-symbol indented_block_body) [33178 33208]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32855 32859])
                            ("ax" variable nil (reparse-symbol function_parameters) [32861 32863])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [32865 32873]))                          
                        :documentation "
        kwargs are identical to those for AxesImage, except
        that 'nearest' and 'bilinear' are the only supported 'interpolation'
        options.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32842 33209])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33241 33245])
                            ("renderer" variable nil (reparse-symbol function_parameters) [33247 33255]))                          
                        :documentation "
        return False. Do not use unsampled image.
        ")
                        (reparse-symbol indented_block_body) [33214 33353])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33373 33377])
                            ("renderer" variable nil (reparse-symbol function_parameters) [33379 33387])
                            ("magnification" variable nil (reparse-symbol function_parameters) [33389 33402])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [33408 33417]))                          )
                        (reparse-symbol indented_block_body) [33358 34835])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34853 34857])
                            ("x" variable nil (reparse-symbol function_parameters) [34859 34860])
                            ("y" variable nil (reparse-symbol function_parameters) [34862 34863])
                            ("A" variable nil (reparse-symbol function_parameters) [34865 34866]))                          
                        :documentation "
        Set the grid for the pixel centers, and the pixel values.

          *x* and *y* are monotonic 1-D ndarrays of lengths N and M,
             respectively, specifying pixel centers

          *A* is an (M,N) ndarray or masked array of values to be
            colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA
            array.
        ")
                        (reparse-symbol indented_block_body) [34840 35967])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35986 35990])
                            ("args" variable nil (reparse-symbol function_parameters) [35992 35997]))                          )
                        (reparse-symbol indented_block_body) [35972 36058])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36085 36089])
                            ("s" variable nil (reparse-symbol function_parameters) [36091 36092]))                          
                        :documentation "
        Parameters
        ----------
        s : str, None
            Either 'nearest', 'bilinear', or ``None``.
        ")
                        (reparse-symbol indented_block_body) [36063 36488])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36508 36512]))                          )
                        (reparse-symbol indented_block_body) [36493 36665])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36689 36693])
                            ("s" variable nil (reparse-symbol function_parameters) [36695 36696]))                          )
                        (reparse-symbol indented_block_body) [36670 36712])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36735 36739])
                            ("s" variable nil (reparse-symbol function_parameters) [36741 36742]))                          )
                        (reparse-symbol indented_block_body) [36717 36758])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36776 36780])
                            ("norm" variable nil (reparse-symbol function_parameters) [36782 36786]))                          )
                        (reparse-symbol indented_block_body) [36763 36947])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36965 36969])
                            ("cmap" variable nil (reparse-symbol function_parameters) [36971 36975]))                          )
                        (reparse-symbol indented_block_body) [36952 37136]))                  
                :type "class")
                nil [32804 37136])
            ("PcolorImage" type
               (:documentation "
    Make a pcolor-style plot with an irregular rectangular grid.

    This uses a variation of the original irregular image code,
    and it is used by pcolorfast for the corresponding grid type.
    "
                :superclasses ("AxesImage")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap defaults to its rc setting

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        Additional kwargs are matplotlib.artist properties
        \"\"\"" code nil (reparse-symbol indented_block_body) [37592 37819])
                            ("super" code nil (reparse-symbol indented_block_body) [37828 37887])
                            ("self" code nil (reparse-symbol indented_block_body) [37896 37915])
                            ("if" code nil (reparse-symbol indented_block_body) [37924 37977]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37397 37401])
                            ("ax" variable nil (reparse-symbol function_parameters) [37403 37405])
                            ("x" variable nil (reparse-symbol function_parameters) [37424 37425])
                            ("y" variable nil (reparse-symbol function_parameters) [37449 37450])
                            ("A" variable nil (reparse-symbol function_parameters) [37474 37475])
                            ("cmap" variable nil (reparse-symbol function_parameters) [37499 37503])
                            ("norm" variable nil (reparse-symbol function_parameters) [37527 37531])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37555 37563]))                          
                        :documentation "
        cmap defaults to its rc setting

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        Additional kwargs are matplotlib.artist properties
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37384 37977])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37997 38001])
                            ("renderer" variable nil (reparse-symbol function_parameters) [38003 38011])
                            ("magnification" variable nil (reparse-symbol function_parameters) [38013 38026])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [38032 38041]))                          )
                        (reparse-symbol indented_block_body) [37982 39240])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39272 39276])
                            ("renderer" variable nil (reparse-symbol function_parameters) [39278 39286]))                          )
                        (reparse-symbol indented_block_body) [39245 39310])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39328 39332])
                            ("x" variable nil (reparse-symbol function_parameters) [39334 39335])
                            ("y" variable nil (reparse-symbol function_parameters) [39337 39338])
                            ("A" variable nil (reparse-symbol function_parameters) [39340 39341]))                          
                        :documentation "
        Set the grid for the rectangle boundaries, and the data values.

          *x* and *y* are monotonic 1-D ndarrays of lengths N+1 and M+1,
             respectively, specifying rectangle boundaries.  If None,
             they will be created as uniform arrays from 0 through N
             and 0 through M, respectively.

          *A* is an (M,N) ndarray or masked array of values to be
            colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA
            array.

        ")
                        (reparse-symbol indented_block_body) [39315 41257])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41276 41280])
                            ("args" variable nil (reparse-symbol function_parameters) [41282 41287]))                          )
                        (reparse-symbol indented_block_body) [41262 41348])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41373 41377])
                            ("event" variable nil (reparse-symbol function_parameters) [41379 41384]))                          
                        :documentation "Get the cursor data for a given event")
                        (reparse-symbol indented_block_body) [41353 41795]))                  
                :type "class")
                nil [37138 41795])
            ("FigureImage" type
               (:superclasses ("_ImageBase")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [41832 41842])
                    ("_interpolation" variable nil (reparse-symbol indented_block_body) [41848 41874])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        \"\"\"" code nil (reparse-symbol indented_block_body) [42100 42286])
                            ("super" code nil (reparse-symbol indented_block_body) [42295 42429])
                            ("self" variable nil (reparse-symbol indented_block_body) [42438 42455])
                            ("self" variable nil (reparse-symbol indented_block_body) [42464 42481])
                            ("self" variable nil (reparse-symbol indented_block_body) [42490 42507])
                            ("self" code nil (reparse-symbol indented_block_body) [42516 42535])
                            ("self" variable nil (reparse-symbol indented_block_body) [42544 42568]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41893 41897])
                            ("fig" variable nil (reparse-symbol function_parameters) [41899 41902])
                            ("cmap" variable nil (reparse-symbol function_parameters) [41921 41925])
                            ("norm" variable nil (reparse-symbol function_parameters) [41949 41953])
                            ("offsetx" variable nil (reparse-symbol function_parameters) [41977 41984])
                            ("offsety" variable nil (reparse-symbol function_parameters) [42005 42012])
                            ("origin" variable nil (reparse-symbol function_parameters) [42033 42039])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42063 42071]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41880 42569])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42589 42593]))                          
                        :documentation "Get the image extent: left, right, bottom, top")
                        (reparse-symbol indented_block_body) [42574 42810])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42830 42834])
                            ("renderer" variable nil (reparse-symbol function_parameters) [42836 42844])
                            ("magnification" variable nil (reparse-symbol function_parameters) [42846 42859])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [42865 42874]))                          )
                        (reparse-symbol indented_block_body) [42815 43620])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43638 43642])
                            ("A" variable nil (reparse-symbol function_parameters) [43644 43645]))                          
                        :documentation "Set the image array.")
                        (reparse-symbol indented_block_body) [43625 43828]))                  
                :type "class")
                nil [41797 43828])
            ("BboxImage" type
               (:documentation "The Image class whose size is determined by the given bbox."
                :superclasses ("_ImageBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        interp_at_native is a flag that determines whether or not
        interpolation should still be applied when the image is
        displayed at its native resolution.  A common use case for this
        is when displaying an image for annotational purposes; it is
        treated similarly to Photoshop (interpolation is only used when
        displaying the image at non-native resolutions).


        kwargs are an optional list of Artist keyword args

        \"\"\"" code nil (reparse-symbol indented_block_body) [44271 44860])
                            ("super" code nil (reparse-symbol indented_block_body) [44869 45163])
                            ("self" variable nil (reparse-symbol indented_block_body) [45173 45189])
                            ("self" variable nil (reparse-symbol indented_block_body) [45198 45238])
                            ("self" variable nil (reparse-symbol indented_block_body) [45247 45284]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43946 43950])
                            ("bbox" variable nil (reparse-symbol function_parameters) [43952 43956])
                            ("cmap" variable nil (reparse-symbol function_parameters) [43975 43979])
                            ("norm" variable nil (reparse-symbol function_parameters) [44003 44007])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [44031 44044])
                            ("origin" variable nil (reparse-symbol function_parameters) [44068 44074])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [44098 44108])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [44129 44138])
                            ("resample" variable nil (reparse-symbol function_parameters) [44161 44169])
                            ("interp_at_native" variable nil (reparse-symbol function_parameters) [44194 44210])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44234 44242]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        interp_at_native is a flag that determines whether or not
        interpolation should still be applied when the image is
        displayed at its native resolution.  A common use case for this
        is when displaying an image for annotational purposes; it is
        treated similarly to Photoshop (interpolation is only used when
        displaying the image at non-native resolutions).


        kwargs are an optional list of Artist keyword args

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43933 45285])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45308 45312]))                          )
                        (reparse-symbol indented_block_body) [45290 45346])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45373 45377])
                            ("renderer" variable nil (reparse-symbol function_parameters) [45379 45387]))                          )
                        (reparse-symbol indented_block_body) [45351 45695])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45713 45717])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [45719 45729]))                          
                        :documentation "Test whether the mouse event occurred within the image.")
                        (reparse-symbol indented_block_body) [45700 46126])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46146 46150])
                            ("renderer" variable nil (reparse-symbol function_parameters) [46152 46160])
                            ("magnification" variable nil (reparse-symbol function_parameters) [46162 46175])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [46181 46190]))                          )
                        (reparse-symbol indented_block_body) [46131 46659]))                  
                :type "class")
                nil [43830 46659])
            ("imread" function
               (:documentation "
    Read an image from a file into an array.

    *fname* may be a string path, a valid URL, or a Python
    file-like object.  If using a file object, it must be opened in binary
    mode.

    If *format* is provided, will try to read file of that type,
    otherwise the format is deduced from the filename.  If nothing can
    be deduced, PNG is tried.

    Return value is a :class:`numpy.array`.  For grayscale images, the
    return array is MxN.  For RGB images, the return value is MxNx3.
    For RGBA images the return value is MxNx4.

    matplotlib can only read PNGs natively, but if `PIL
    <http://www.pythonware.com/products/pil/>`_ is installed, it will
    use it to load the image and return an array (if possible) which
    can be used with :func:`~matplotlib.pyplot.imshow`. Note, URL strings
    may not be compatible with PIL. Check the PIL documentation for more
    information.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [46672 46677])
                    ("format" variable nil (reparse-symbol function_parameters) [46679 46685]))                  )
                nil [46661 49316])
            ("imsave" function
               (:documentation "
    Save an array as in image file.

    The output formats available depend on the backend being used.

    Parameters
    ----------
    fname : str or file-like
        Path string to a filename, or a Python file-like object.
        If *format* is *None* and *fname* is a string, the output
        format is deduced from the extension of the filename.
    arr : array-like
        An MxN (luminance), MxNx3 (RGB) or MxNx4 (RGBA) array.
    vmin, vmax: [ None | scalar ]
        *vmin* and *vmax* set the color scaling for the image by fixing the
        values that map to the colormap color limits. If either *vmin*
        or *vmax* is None, that limit is determined from the *arr*
        min/max value.
    cmap : matplotlib.colors.Colormap, optional
        For example, ``cm.viridis``.  If ``None``, defaults to the
        ``image.cmap`` rcParam.
    format : str
        One of the file extensions supported by the active backend.  Most
        backends support png, pdf, ps, eps and svg.
    origin : [ 'upper' | 'lower' ]
        Indicates whether the ``(0, 0)`` index of the array is in the
        upper left or lower left corner of the axes.  Defaults to the
        ``image.origin`` rcParam.
    dpi : int
        The DPI to store in the metadata of the file.  This does not affect the
        resolution of the output image.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [49329 49334])
                    ("arr" variable nil (reparse-symbol function_parameters) [49336 49339])
                    ("vmin" variable nil (reparse-symbol function_parameters) [49341 49345])
                    ("vmax" variable nil (reparse-symbol function_parameters) [49352 49356])
                    ("cmap" variable nil (reparse-symbol function_parameters) [49363 49367])
                    ("format" variable nil (reparse-symbol function_parameters) [49374 49380])
                    ("origin" variable nil (reparse-symbol function_parameters) [49398 49404])
                    ("dpi" variable nil (reparse-symbol function_parameters) [49411 49414]))                  )
                nil [49318 51554])
            ("pil_to_array" function
               (:documentation "Load a PIL image and return it as a numpy array.

    Grayscale images are returned as ``(M, N)`` arrays.  RGB images are
    returned as ``(M, N, 3)`` arrays.  RGBA images are returned as ``(M, N,
    4)`` arrays.
    "
                :arguments 
                  ( ("pilImage" variable nil (reparse-symbol function_parameters) [51573 51581]))                  )
                nil [51556 52557])
            ("thumbnail" function
               (:documentation "
    make a thumbnail of image in *infile* with output filename
    *thumbfile*.

      *infile* the image file -- must be PNG or Pillow-readable if you
         have `Pillow <http://python-pillow.org/>`_ installed

      *thumbfile*
        the thumbnail filename

      *scale*
        the scale factor for the thumbnail

      *interpolation*
        the interpolation scheme used in the resampling


      *preview*
        if True, the default backend (presumably a user interface
        backend) will be used which will cause a figure to be raised
        if :func:`~matplotlib.pyplot.show` is called.  If it is False,
        a pure image backend will be used depending on the extension,
        'png'->FigureCanvasAgg, 'pdf'->FigureCanvasPdf,
        'svg'->FigureCanvasSVG


    See examples/misc/image_thumbnail.py.

    .. htmlonly::

        :ref:`sphx_glr_gallery_misc_image_thumbnail_sgskip.py`

    Return value is the figure instance containing the thumbnail

    "
                :arguments 
                  ( ("infile" variable nil (reparse-symbol function_parameters) [52573 52579])
                    ("thumbfile" variable nil (reparse-symbol function_parameters) [52581 52590])
                    ("scale" variable nil (reparse-symbol function_parameters) [52592 52597])
                    ("interpolation" variable nil (reparse-symbol function_parameters) [52603 52616])
                    ("preview" variable nil (reparse-symbol function_parameters) [52643 52650]))                  )
                nil [52559 55142]))          
      :file "image.py"
      :pointmax 55142
      :fsize 55141
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax '((NAME 24744 . 24748) (IF 24755 . 24757) (ELSE 24799 . 24803)))
    (semanticdb-table "semanticdb-table-15190b4"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The rcsetup module contains the default values and the validation code for
customization using matplotlib's rc settings.

Each rc setting is assigned a default value and a function used to validate
any attempted changes to that setting. The default values and validation
functions are defined in the rcsetup module, and are used to construct the
rcParams global object which stores the settings and is referenced throughout
matplotlib.

These default values should be consistent with the default matplotlibrc file
that actually reflects the values given here. Any additions or deletions to the
parameter set listed here should also be visited to the
:file:`matplotlibrc.template` in matplotlib's root source directory.
\"\"\"" code nil nil [1 727])
            ("__future__" include nil nil [728 792])
            ("six" include nil nil [794 804])
            ("collections" include nil nil [806 847])
            ("functools" include nil nil [848 876])
            ("operator" include nil nil [877 892])
            ("os" include nil nil [893 902])
            ("warnings" include nil nil [903 918])
            ("re" include nil nil [919 928])
            ("matplotlib" include nil nil [930 967])
            ("matplotlib.cbook" include nil nil [968 1034])
            ("matplotlib.fontconfig_pattern" include nil nil [1035 1101])
            ("matplotlib.colors" include nil nil [1102 1145])
            ("cycler" include nil nil [1214 1258])
            ("interactive_bk" variable nil nil [1358 1537])
            ("interactive_bk" variable nil nil [1538 1835])
            ("non_interactive_bk" variable nil nil [1836 1941])
            ("all_backends" code nil nil [1942 1992])
            ("ValidateInStrings" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("'valid is a list of legal strings'" code nil (reparse-symbol indented_block_body) [2090 2124])
                            ("self" variable nil (reparse-symbol indented_block_body) [2133 2147])
                            ("self" variable nil (reparse-symbol indented_block_body) [2156 2184])
                            ("func" function (:arguments 
                              ( ("s" variable nil (reparse-symbol function_parameters) [2203 2204]))                              ) (reparse-symbol indented_block_body) [2194 2310])
                            ("self" variable nil (reparse-symbol indented_block_body) [2318 2358]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2045 2049])
                            ("key" variable nil (reparse-symbol function_parameters) [2051 2054])
                            ("valid" variable nil (reparse-symbol function_parameters) [2056 2061])
                            ("ignorecase" variable nil (reparse-symbol function_parameters) [2063 2073]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2032 2359])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2377 2381])
                            ("s" variable nil (reparse-symbol function_parameters) [2383 2384]))                          )
                        (reparse-symbol indented_block_body) [2364 2655]))                  
                :type "class")
                nil [1995 2655])
            ("_listify_validator" function (:arguments 
              ( ("scalar_validator" variable nil (reparse-symbol function_parameters) [2680 2696])
                ("allow_stringlist" variable nil (reparse-symbol function_parameters) [2698 2714]))              ) nil [2657 4392])
            ("validate_any" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4411 4412]))              ) nil [4394 4428])
            ("validate_anylist" variable nil nil [4428 4479])
            ("validate_path_exists" function
               (:documentation "If s is a path, return s, else False"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4507 4508]))                  )
                nil [4482 4727])
            ("validate_bool" function
               (:documentation "Convert b to a boolean or raise"
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [4747 4748]))                  )
                nil [4729 5094])
            ("validate_bool_maybe_none" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [5125 5126]))              ) nil [5096 5521])
            ("deprecate_axes_hold" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [5547 5552]))              ) nil [5523 5819])
            ("validate_float" function
               (:documentation "convert s to float or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5840 5841]))                  )
                nil [5821 6002])
            ("validate_floatlist" variable nil nil [6002 6057])
            ("validate_float_or_None" function
               (:documentation "convert s to float, None or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6087 6088]))                  )
                nil [6060 6618])
            ("validate_string_or_None" function
               (:documentation "convert s to string or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6648 6649]))                  )
                nil [6620 6860])
            ("validate_axisbelow" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [6885 6886]))              ) nil [6862 7193])
            ("validate_dpi" function
               (:documentation "confirm s is string 'figure' or convert s to float or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7212 7213]))                  )
                nil [7195 7496])
            ("validate_int" function
               (:documentation "convert s to int or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7515 7516]))                  )
                nil [7498 7671])
            ("validate_int_or_None" function
               (:documentation "if not None, tries to validate as an int"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7698 7699]))                  )
                nil [7673 7942])
            ("validate_fonttype" function
               (:documentation "
    confirm that this is a Postscript of PDF font type that we know how to
    convert to
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7966 7967]))                  )
                nil [7944 8626])
            ("_validate_standard_backends" variable nil nil [8628 8722])
            ("validate_backend" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8746 8747]))              ) nil [8725 8857])
            ("validate_qt4" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8876 8877]))              ) nil [8859 8997])
            ("validate_qt5" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [9016 9017]))              ) nil [8999 9127])
            ("validate_toolbar" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [9150 9151]))              ) nil [9129 9326])
            ("_seq_err_msg" variable nil nil [9328 9432])
            ("_str_err_msg" variable nil nil [9434 9570])
            ("validate_nseq_float" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9666 9676])
                            ("self" variable nil (reparse-symbol indented_block_body) [9685 9713]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9625 9629])
                            ("n" variable nil (reparse-symbol function_parameters) [9631 9632])
                            ("allow_none" variable nil (reparse-symbol function_parameters) [9639 9649]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9612 9714])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9732 9736])
                            ("s" variable nil (reparse-symbol function_parameters) [9738 9739]))                          
                        :documentation "return a seq of n floats or raise")
                        (reparse-symbol indented_block_body) [9719 10362]))                  
                :type "class")
                nil [9573 10362])
            ("validate_nseq_int" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10437 10447]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10414 10418])
                            ("n" variable nil (reparse-symbol function_parameters) [10420 10421]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10401 10448])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10466 10470])
                            ("s" variable nil (reparse-symbol function_parameters) [10472 10473]))                          
                        :documentation "return a seq of n ints or raise")
                        (reparse-symbol indented_block_body) [10453 10979]))                  
                :type "class")
                nil [10364 10979])
            ("validate_color_or_inherit" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11011 11012]))              ) nil [10981 11115])
            ("validate_color_or_auto" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11144 11145]))              ) nil [11117 11214])
            ("validate_color_for_prop_cycle" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11250 11251]))              ) nil [11216 11853])
            ("validate_color" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11874 11875]))              ) nil [11855 12902])
            ("validate_colorlist" variable nil nil [12904 12982])
            ("validate_colorlist" variable nil nil [12983 13041])
            ("validate_string" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13063 13064]))              ) nil [13043 13217])
            ("validate_stringlist" variable nil nil [13218 13263])
            ("validate_stringlist" variable nil nil [13264 13309])
            ("validate_orientation" variable nil nil [13311 13398])
            ("validate_aspect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13421 13422]))              ) nil [13401 13590])
            ("validate_fontsize" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13614 13615]))              ) nil [13592 14043])
            ("validate_fontsizelist" variable nil nil [14045 14106])
            ("validate_font_properties" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [14138 14139]))              ) nil [14109 14187])
            ("validate_fontset" variable nil nil [14189 14312])
            ("validate_mathtext_default" variable nil nil [14314 14445])
            ("validate_verbose" variable nil nil [14447 14553])
            ("_validate_alignment" variable nil nil [14555 14681])
            ("validate_whiskers" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [14705 14706]))              ) nil [14683 15112])
            ("update_savefig_format" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [15140 15145]))              ) nil [15114 15383])
            ("validate_ps_papersize" variable nil nil [15385 15655])
            ("validate_ps_distiller" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [15684 15685]))              ) nil [15658 16043])
            ("validate_joinstyle" variable nil nil [16044 16219])
            ("validate_joinstylelist" variable nil nil [16220 16283])
            ("validate_capstyle" variable nil nil [16285 16460])
            ("validate_capstylelist" variable nil nil [16461 16522])
            ("validate_fillstyle" variable nil nil [16524 16714])
            ("validate_fillstylelist" variable nil nil [16715 16778])
            ("_validate_negative_linestyle" variable nil nil [16780 16986])
            ("" code nil nil [17000 17144])
            ("validate_negative_linestyle" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17177 17178]))              ) nil [17145 17224])
            ("" code nil nil [17237 17452])
            ("validate_negative_linestyle_legacy" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17492 17493]))              ) nil [17453 17690])
            ("validate_legend_loc" variable nil nil [17692 17971])
            ("validate_svg_fonttype" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [18000 18001]))              ) nil [17974 18314])
            ("validate_hinting" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [18337 18338]))              ) nil [18316 18547])
            ("validate_pgf_texsystem" variable nil nil [18548 18687])
            ("validate_movie_writer" variable nil nil [18689 18864])
            ("validate_movie_frame_fmt" variable nil nil [18866 18980])
            ("validate_axis_locator" variable nil nil [18982 19060])
            ("validate_movie_html_fmt" variable nil nil [19062 19156])
            ("validate_bbox" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [19176 19177]))              ) nil [19158 19576])
            ("validate_sketch" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [19597 19598]))              ) nil [19577 20033])
            ("ValidateInterval" type
               (:documentation "
    Value must be in interval
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20188 20204])
                            ("self" variable nil (reparse-symbol indented_block_body) [20213 20229])
                            ("self" variable nil (reparse-symbol indented_block_body) [20238 20259])
                            ("self" variable nil (reparse-symbol indented_block_body) [20268 20289]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20129 20133])
                            ("vmin" variable nil (reparse-symbol function_parameters) [20135 20139])
                            ("vmax" variable nil (reparse-symbol function_parameters) [20141 20145])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [20147 20156])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [20163 20172]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20116 20290])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20308 20312])
                            ("s" variable nil (reparse-symbol function_parameters) [20314 20315]))                          )
                        (reparse-symbol indented_block_body) [20295 21102]))                  
                :type "class")
                nil [20034 21102])
            ("validate_grid_axis" variable nil nil [21103 21179])
            ("validate_hatch" function
               (:documentation "
    Validate a hatch pattern.
    A hatch pattern string can have any sequence of the following
    characters: ``\\\\ / | - + * . x o O``.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [21201 21202]))                  )
                nil [21182 57868]))          
      :file "rcsetup.py"
      :pointmax 57868
      :fsize 57867
      :lastmodtime '(23240 23001 121461 0)
      :unmatched-syntax '((INDENT_BLOCK 29206 . 29281) (NEWLINE 29205 . 29206) (COLON 29204 . 29205) (TRY 29135 . 29138) (AS 29200 . 29202) (INDENT_BLOCK 26327 . 26441) (NEWLINE 26326 . 26327) (COLON 26325 . 26326) (TRY 25291 . 25294) (AS 26321 . 26323) (INDENT_BLOCK 22552 . 22558) (INDENT_BLOCK 21794 . 22552) (NEWLINE 21793 . 21794) (LBRACE 21792 . 21793) (NEWLINE 21771 . 21772) (RPAREN 21770 . 21771) (LPAREN 21733 . 21734) (NEWLINE 21694 . 21695) (RPAREN 21693 . 21694) (DEDENT 21639 . 21639) (NAME 21639 . 21657) (LPAREN 21678 . 21679)))
    (semanticdb-table "semanticdb-table-151b8e8"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("collections" include nil nil [123 170])
            ("functools" include nil nil [171 198])
            ("inspect" include nil nil [199 213])
            ("re" include nil nil [214 223])
            ("warnings" include nil nil [224 239])
            ("numpy" include nil nil [241 259])
            ("matplotlib" include nil nil [261 278])
            ("rcParams" include nil nil [286 319])
            ("docstring" include nil nil [286 319])
            ("cbook" include nil nil [286 319])
            ("Path" include nil nil [331 342])
            ("" code nil nil [367 484])
            ("allow_rasterization" function
               (:documentation "
    Decorator for Artist.draw method. Provides routines
    that run before and after the draw call. The before and after functions
    are useful for changing artist-dependent renderer attributes or making
    other setup function calls, such as starting and flushing a mixed-mode
    renderer.
    "
                :arguments 
                  ( ("draw" variable nil (reparse-symbol function_parameters) [1247 1251]))                  )
                nil [1223 2251])
            ("_stale_axes_callback" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [2278 2282])
                    ("val" variable nil (reparse-symbol function_parameters) [2284 2287]))                  )
                nil [2253 2338])
            ("_XYPair" variable nil nil [2340 2378])
            ("Artist" type
               (:documentation "
    Abstract base class for someone who renders into a
    :class:`FigureCanvas`.
    "
                :superclasses ("object")
                :members 
                  ( ("aname" variable nil (reparse-symbol indented_block_body) [2506 2522])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [2527 2537])
                    ("_prop_order" variable nil (reparse-symbol indented_block_body) [2689 2717])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2751 2769])
                            ("self" variable nil (reparse-symbol indented_block_body) [2778 2804])
                            ("self" variable nil (reparse-symbol indented_block_body) [2813 2830])
                            ("self" variable nil (reparse-symbol indented_block_body) [2839 2857])
                            ("self" variable nil (reparse-symbol indented_block_body) [2867 2889])
                            ("self" variable nil (reparse-symbol indented_block_body) [2898 2924])
                            ("self" variable nil (reparse-symbol indented_block_body) [2933 2953])
                            ("self" variable nil (reparse-symbol indented_block_body) [2962 2984])
                            ("self" variable nil (reparse-symbol indented_block_body) [2993 3011])
                            ("self" variable nil (reparse-symbol indented_block_body) [3020 3039])
                            ("self" variable nil (reparse-symbol indented_block_body) [3048 3069])
                            ("self" variable nil (reparse-symbol indented_block_body) [3078 3097])
                            ("self" variable nil (reparse-symbol indented_block_body) [3106 3122])
                            ("self" variable nil (reparse-symbol indented_block_body) [3131 3150])
                            ("self" variable nil (reparse-symbol indented_block_body) [3159 3180])
                            ("self" variable nil (reparse-symbol indented_block_body) [3189 3212])
                            ("self" variable nil (reparse-symbol indented_block_body) [3221 3244])
                            ("self" variable nil (reparse-symbol indented_block_body) [3253 3276])
                            ("self" variable nil (reparse-symbol indented_block_body) [3285 3306])
                            ("self" variable nil (reparse-symbol indented_block_body) [3347 3360])
                            ("self" variable nil (reparse-symbol indented_block_body) [3387 3411])
                            ("try" code nil (reparse-symbol indented_block_body) [3449 3601])
                            ("self" variable nil (reparse-symbol indented_block_body) [3609 3635])
                            ("self" variable nil (reparse-symbol indented_block_body) [3644 3660])
                            ("self" variable nil (reparse-symbol indented_block_body) [3669 3685])
                            ("self" variable nil (reparse-symbol indented_block_body) [3694 3711])
                            ("self" variable nil (reparse-symbol indented_block_body) [3720 3758])
                            ("self" variable nil (reparse-symbol indented_block_body) [3767 3812])
                            ("self" variable nil (reparse-symbol indented_block_body) [3821 3857]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2736 2740]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2723 3858])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3880 3884]))                          )
                        (reparse-symbol indented_block_body) [3863 4142])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4158 4162]))                          
                        :documentation "
        Remove the artist from the figure if possible.  The effect
        will not be visible until the figure is redrawn, e.g., with
        :meth:`matplotlib.axes.Axes.draw_idle`.  Call
        :meth:`matplotlib.axes.Axes.relim` to update the axes limits
        if desired.

        Note: :meth:`~matplotlib.axes.Axes.relim` will not see
        collections even if the collection was added to axes with
        *autolim* = True.

        Note: there is no support for removing the artist's legend entry.
        ")
                        (reparse-symbol indented_block_body) [4147 5743])
                    ("have_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6101 6105]))                          )
                        (reparse-symbol indented_block_body) [6086 6325])
                    ("convert_xunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6349 6353])
                            ("x" variable nil (reparse-symbol function_parameters) [6355 6356]))                          
                        :documentation "For artists in an axes, if the xaxis has units support,
        convert *x* using xaxis unit type
        ")
                        (reparse-symbol indented_block_body) [6330 6626])
                    ("convert_yunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6650 6654])
                            ("y" variable nil (reparse-symbol function_parameters) [6656 6657]))                          
                        :documentation "For artists in an axes, if the yaxis has units support,
        convert *y* using yaxis unit type
        ")
                        (reparse-symbol indented_block_body) [6631 6927])
                    ("axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6955 6959]))                          
                        :documentation "
        The :class:`~matplotlib.axes.Axes` instance the artist
        resides in, or *None*.
        ")
                        (reparse-symbol indented_block_body) [6932 7106])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7137 7141])
                            ("new_axes" variable nil (reparse-symbol function_parameters) [7143 7151]))                          
                        :decorators 
                          ( ("axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7111 7636])
                    ("stale" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7665 7669]))                          
                        :documentation "
        If the artist is 'stale' and needs to be re-drawn for the output to
        match the internal state of the artist.
        ")
                        (reparse-symbol indented_block_body) [7641 7847])
                    ("stale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7880 7884])
                            ("val" variable nil (reparse-symbol function_parameters) [7886 7889]))                          
                        :decorators 
                          ( ("stale.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7852 8283])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8310 8314])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8316 8324]))                          
                        :documentation "
        Get the axes bounding box in display space.
        Subclasses should override for inclusion in the bounding box
        \"tight\" calculation. Default is to return an empty bounding
        box at 0, 0.

        Be careful when using this function, the results will not update
        if the artist window extent of the artist changes.  The extent
        can change due to any changes in the transform stack, such as
        changing the axes limits, the figure size, or the canvas used
        (as is done when saving a figure).  This can lead to unexpected
        behavior where interactive figures will look fine on the screen,
        but will save incorrectly.
        ")
                        (reparse-symbol indented_block_body) [8288 9064])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9086 9090])
                            ("func" variable nil (reparse-symbol function_parameters) [9092 9096]))                          
                        :documentation "
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        ")
                        (reparse-symbol indented_block_body) [9069 9458])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9483 9487])
                            ("oid" variable nil (reparse-symbol function_parameters) [9489 9492]))                          
                        :documentation "
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        ")
                        (reparse-symbol indented_block_body) [9463 9753])
                    ("pchanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9771 9775]))                          
                        :documentation "
        Fire an event when property changed, calling all of the
        registered callbacks.
        ")
                        (reparse-symbol indented_block_body) [9758 9980])
                    ("is_transform_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10006 10010]))                          
                        :documentation "
        Returns *True* if :class:`Artist` has a transform explicitly
        set.
        ")
                        (reparse-symbol indented_block_body) [9985 10153])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10176 10180])
                            ("t" variable nil (reparse-symbol function_parameters) [10182 10183]))                          
                        :documentation "
        Set the artist transform.

        Parameters
        ----------
        t : `.Transform`
            .. ACCEPTS: `.Transform`
        ")
                        (reparse-symbol indented_block_body) [10158 10457])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10480 10484]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform`
        instance used by this artist.
        ")
                        (reparse-symbol indented_block_body) [10462 10925])
                    ("" code nil (reparse-symbol indented_block_body) [10947 10954])
                    ("hitlist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10971 10975])
                            ("event" variable nil (reparse-symbol function_parameters) [10977 10982]))                          
                        :documentation "
        List the children of the artist which contain the mouse event *event*.
        ")
                        (reparse-symbol indented_block_body) [10959 11450])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11472 11476]))                          
                        :documentation "
        Return a list of the child :class:`Artist`s this
        :class:`Artist` contains.
        ")
                        (reparse-symbol indented_block_body) [11455 11612])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11630 11634])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [11636 11646]))                          
                        :documentation "Test whether the artist contains the mouse event.

        Returns the truth value and a dictionary of artist specific details of
        selection, such as which points are contained in the pick radius.  See
        individual artists for details.
        ")
                        (reparse-symbol indented_block_body) [11617 12115])
                    ("set_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12137 12141])
                            ("picker" variable nil (reparse-symbol function_parameters) [12143 12149]))                          
                        :documentation "
        Replace the contains test used by this artist. The new picker
        should be a callable function which determines whether the
        artist is hit by the mouse event::

            hit, props = picker(artist, mouseevent)

        If the mouse event is over the artist, return *hit* = *True*
        and *props* is a dictionary of properties you want returned
        with the contains test.

        Parameters
        ----------
        picker : callable
            .. ACCEPTS: a callable function
        ")
                        (reparse-symbol indented_block_body) [12120 12720])
                    ("get_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12742 12746]))                          
                        :documentation "
        Return the _contains test used by the artist, or *None* for default.
        ")
                        (reparse-symbol indented_block_body) [12725 12880])
                    ("pickable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12898 12902]))                          )
                        (reparse-symbol indented_block_body) [12885 13098])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13112 13116])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [13118 13128]))                          
                        :documentation "
        Process pick event

        each child artist will fire a pick event if *mouseevent* is over
        the artist and the artist has picker set
        ")
                        (reparse-symbol indented_block_body) [13103 14352])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14372 14376])
                            ("picker" variable nil (reparse-symbol function_parameters) [14378 14384]))                          
                        :documentation "
        Set the epsilon for picking used by this artist

        *picker* can be one of the following:

          * *None*: picking is disabled for this artist (default)

          * A boolean: if *True* then picking will be enabled and the
            artist will fire a pick event if the mouse event is over
            the artist

          * A float: if picker is a number it is interpreted as an
            epsilon tolerance in points and the artist will fire
            off an event if it's data is within epsilon of the mouse
            event.  For some artists like lines and patch collections,
            the artist may provide additional data to the pick event
            that is generated, e.g., the indices of the data within
            epsilon of the pick event

          * A function: if picker is callable, it is a user supplied
            function which determines whether the artist is hit by the
            mouse event::

              hit, props = picker(artist, mouseevent)

            to determine the hit test.  if the mouse event is over the
            artist, return *hit=True* and props is a dictionary of
            properties you want added to the PickEvent attributes.

        Parameters
        ----------
        picker : None or bool or float or callable
            .. ACCEPTS: [None | bool | float | callable]
        ")
                        (reparse-symbol indented_block_body) [14357 15797])
                    ("get_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15817 15821]))                          
                        :documentation "Return the picker object used by this artist.")
                        (reparse-symbol indented_block_body) [15802 15912])
                    ("" code nil (reparse-symbol indented_block_body) [15934 15970])
                    ("is_figure_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15993 15997]))                          
                        :documentation "Returns whether the artist is assigned to a `.Figure`.")
                        (reparse-symbol indented_block_body) [15975 16108])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16125 16129]))                          
                        :documentation "Returns the url.")
                        (reparse-symbol indented_block_body) [16113 16188])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16205 16209])
                            ("url" variable nil (reparse-symbol function_parameters) [16211 16214]))                          
                        :documentation "
        Sets the url for the artist.

        Parameters
        ----------
        url : str
            .. ACCEPTS: a url string
        ")
                        (reparse-symbol indented_block_body) [16193 16396])
                    ("get_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16413 16417]))                          
                        :documentation "Returns the group id.")
                        (reparse-symbol indented_block_body) [16401 16481])
                    ("set_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16498 16502])
                            ("gid" variable nil (reparse-symbol function_parameters) [16504 16507]))                          
                        :documentation "
        Sets the (group) id for the artist.

        Parameters
        ----------
        gid : str
            .. ACCEPTS: an id string
        ")
                        (reparse-symbol indented_block_body) [16486 16696])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16714 16718]))                          
                        :documentation "
        Returns the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.
        ")
                        (reparse-symbol indented_block_body) [16701 17178])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17196 17200])
                            ("snap" variable nil (reparse-symbol function_parameters) [17202 17206]))                          
                        :documentation "
        Sets the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.

        Parameters
        ----------
        snap : bool or None
            .. ACCEPTS: bool or None
        ")
                        (reparse-symbol indented_block_body) [17183 17716])
                    ("get_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17743 17747]))                          
                        :documentation "
        Returns the sketch parameters for the artist.

        Returns
        -------
        sketch_params : tuple or `None`

        A 3-tuple with the following elements:

          * `scale`: The amplitude of the wiggle perpendicular to the
            source line.

          * `length`: The length of the wiggle along the line.

          * `randomness`: The scale factor by which the length is
            shrunken or expanded.

        May return `None` if no sketch parameters were set.
        ")
                        (reparse-symbol indented_block_body) [17721 18299])
                    ("set_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18326 18330])
                            ("scale" variable nil (reparse-symbol function_parameters) [18332 18337])
                            ("length" variable nil (reparse-symbol function_parameters) [18344 18350])
                            ("randomness" variable nil (reparse-symbol function_parameters) [18357 18367]))                          
                        :documentation "
        Sets the sketch parameters.

        Parameters
        ----------

        scale : float, optional
            The amplitude of the wiggle perpendicular to the source
            line, in pixels.  If scale is `None`, or not provided, no
            sketch filter will be provided.

        length : float, optional
             The length of the wiggle along the line, in pixels
             (default 128.0)

        randomness : float, optional
            The scale factor by which the length is shrunken or
            expanded (default 16.0)

            .. ACCEPTS: (scale: float, length: float, randomness: float)
        ")
                        (reparse-symbol indented_block_body) [18304 19198])
                    ("set_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19224 19228])
                            ("path_effects" variable nil (reparse-symbol function_parameters) [19230 19242]))                          
                        :documentation "Set the path effects.

        Parameters
        ----------
        path_effects : `.AbstractPathEffect`
            .. ACCEPTS: `.AbstractPathEffect`
        ")
                        (reparse-symbol indented_block_body) [19203 19488])
                    ("get_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19514 19518]))                          )
                        (reparse-symbol indented_block_body) [19493 19555])
                    ("get_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19575 19579]))                          
                        :documentation "Return the `.Figure` instance the artist belongs to.")
                        (reparse-symbol indented_block_body) [19560 19676])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19696 19700])
                            ("fig" variable nil (reparse-symbol function_parameters) [19702 19705]))                          
                        :documentation "
        Set the `.Figure` instance the artist belongs to.

        Parameters
        ----------
        fig : `.Figure`
            .. ACCEPTS: a `.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [19681 20596])
                    ("set_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20618 20622])
                            ("clipbox" variable nil (reparse-symbol function_parameters) [20624 20631]))                          
                        :documentation "
        Set the artist's clip `.Bbox`.

        Parameters
        ----------
        clipbox : `.Bbox`
            .. ACCEPTS: a `.Bbox` instance
        ")
                        (reparse-symbol indented_block_body) [20601 20886])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20909 20913])
                            ("path" variable nil (reparse-symbol function_parameters) [20915 20919])
                            ("transform" variable nil (reparse-symbol function_parameters) [20921 20930]))                          
                        :documentation "
        Set the artist's clip path, which may be:

        - a :class:`~matplotlib.patches.Patch` (or subclass) instance; or
        - a :class:`~matplotlib.path.Path` instance, in which case a
          :class:`~matplotlib.transforms.Transform` instance, which will be
          applied to the path before using it for clipping, must be provided;
          or
        - ``None``, to remove a previously set clipping path.

        For efficiency, if the path happens to be an axis-aligned rectangle,
        this method will set the clipping box to the corresponding rectangle
        and set the clipping path to ``None``.

        ACCEPTS: [(`~matplotlib.path.Path`, `.Transform`) | `.Patch` | None]
        ")
                        (reparse-symbol indented_block_body) [20891 23033])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23052 23056]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on all
        backends
        ")
                        (reparse-symbol indented_block_body) [23038 23199])
                    ("get_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23220 23224]))                          )
                        (reparse-symbol indented_block_body) [23204 23296])
                    ("get_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23318 23322]))                          )
                        (reparse-symbol indented_block_body) [23301 23400])
                    ("get_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23421 23425]))                          )
                        (reparse-symbol indented_block_body) [23405 23502])
                    ("get_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23524 23528]))                          )
                        (reparse-symbol indented_block_body) [23507 23591])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23614 23618]))                          )
                        (reparse-symbol indented_block_body) [23596 23685])
                    ("get_transformed_clip_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23731 23735]))                          )
                        (reparse-symbol indented_block_body) [23690 24049])
                    ("set_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24070 24074])
                            ("b" variable nil (reparse-symbol function_parameters) [24076 24077]))                          
                        :documentation "
        Set whether artist uses clipping.

        When False artists will be visible out side of the axes which
        can lead to unexpected results.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        ")
                        (reparse-symbol indented_block_body) [24054 24526])
                    ("_set_gc_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24548 24552])
                            ("gc" variable nil (reparse-symbol function_parameters) [24554 24556]))                          )
                        (reparse-symbol indented_block_body) [24531 24854])
                    ("get_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24878 24882]))                          
                        :documentation "Return whether the artist is to be rasterized.")
                        (reparse-symbol indented_block_body) [24859 24978])
                    ("set_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25002 25006])
                            ("rasterized" variable nil (reparse-symbol function_parameters) [25008 25018]))                          
                        :documentation "
        Force rasterized (bitmap) drawing in vector backend output.

        Defaults to None, which implies the backend's default behavior.

        Parameters
        ----------
        rasterized : bool or None
            .. ACCEPTS: bool or None
        ")
                        (reparse-symbol indented_block_body) [24983 25486])
                    ("get_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25510 25514]))                          
                        :documentation "Return filter function to be used for agg filter.")
                        (reparse-symbol indented_block_body) [25491 25613])
                    ("set_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25637 25641])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [25643 25654]))                          
                        :documentation "Set the agg filter.

        Parameters
        ----------
        filter_func : callable
            A filter function, which takes a (m, n, 3) float array and a dpi
            value, and returns a (m, n, 3) array.

            .. ACCEPTS: a filter function, which takes a (m, n, 3) float array
                and a dpi value, and returns a (m, n, 3) array
        ")
                        (reparse-symbol indented_block_body) [25618 26105])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26119 26123])
                            ("renderer" variable nil (reparse-symbol function_parameters) [26125 26133])
                            ("args" variable nil (reparse-symbol function_parameters) [26135 26140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26142 26150]))                          )
                        (reparse-symbol indented_block_body) [26110 26275])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26294 26298])
                            ("alpha" variable nil (reparse-symbol function_parameters) [26300 26305]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends.

        Parameters
        ----------
        alpha : float
            .. ACCEPTS: float (0.0 transparent through 1.0 opaque)
        ")
                        (reparse-symbol indented_block_body) [26280 26625])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26646 26650])
                            ("b" variable nil (reparse-symbol function_parameters) [26652 26653]))                          
                        :documentation "
        Set the artist's visibility.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        ")
                        (reparse-symbol indented_block_body) [26630 26878])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26900 26904])
                            ("b" variable nil (reparse-symbol function_parameters) [26906 26907]))                          
                        :documentation "
        Set the artist's animation state.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        ")
                        (reparse-symbol indented_block_body) [26883 27152])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27168 27172])
                            ("props" variable nil (reparse-symbol function_parameters) [27174 27179]))                          
                        :documentation "
        Update this artist's properties from the dictionary *prop*.
        ")
                        (reparse-symbol indented_block_body) [27157 28474])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28493 28497]))                          
                        :documentation "Get the label used for this artist in the legend.")
                        (reparse-symbol indented_block_body) [28479 28591])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28610 28614])
                            ("s" variable nil (reparse-symbol function_parameters) [28616 28617]))                          
                        :documentation "
        Set the label to *s* for auto legend.

        Parameters
        ----------
        s : object
            *s* will be converted to a string by calling `str` (`unicode` on
            Py2).

            .. ACCEPTS: object
        ")
                        (reparse-symbol indented_block_body) [28596 29039])
                    ("get_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29059 29063]))                          
                        :documentation "Return the artist's zorder.")
                        (reparse-symbol indented_block_body) [29044 29135])
                    ("set_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29155 29159])
                            ("level" variable nil (reparse-symbol function_parameters) [29161 29166]))                          
                        :documentation "
        Set the zorder for the artist.  Artists with lower zorder
        values are drawn first.

        Parameters
        ----------
        level : float
            .. ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [29140 29528])
                    ("sticky_edges" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29564 29568]))                          
                        :documentation "
        `x` and `y` sticky edge lists.

        When performing autoscaling, if a data limit coincides with a value in
        the corresponding sticky_edges list, then no margin will be added--the
        view limit \"sticks\" to the edge. A typical usecase is histograms,
        where one usually expects no margin on the bottom edge (0) of the
        histogram.

        This attribute cannot be assigned to; however, the `x` and `y` lists
        can be modified in place as needed.

        Examples
        --------

        >>> artist.sticky_edges.x[:] = (xmin, xmax)
        >>> artist.sticky_edges.y[:] = (ymin, ymax)

        ")
                        (reparse-symbol indented_block_body) [29533 30257])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30278 30282])
                            ("other" variable nil (reparse-symbol function_parameters) [30284 30289]))                          )
                        (reparse-symbol indented_block_body) [30262 30908])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30928 30932]))                          
                        :documentation "
        return a dictionary mapping property name -> value for all Artist props
        ")
                        (reparse-symbol indented_block_body) [30913 31089])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31102 31106])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31108 31116]))                          
                        :documentation "A property batch setter. Pass *kwargs* to set properties.
        ")
                        (reparse-symbol indented_block_body) [31094 31386])
                    ("findobj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31403 31407])
                            ("match" variable nil (reparse-symbol function_parameters) [31409 31414])
                            ("include_self" variable nil (reparse-symbol function_parameters) [31421 31433]))                          
                        :documentation "
        Find artist objects.

        Recursively find all :class:`~matplotlib.artist.Artist` instances
        contained in self.

        *match* can be

          - None: return all objects contained in artist.

          - function with signature ``boolean = match(artist)``
            used to filter matches

          - class instance: e.g., Line2D.  Only return artists of class type.

        If *include_self* is True (default), include self in the list to be
        checked for a match.

        ")
                        (reparse-symbol indented_block_body) [31391 32603])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32628 32632])
                            ("event" variable nil (reparse-symbol function_parameters) [32634 32639]))                          
                        :documentation "
        Get the cursor data for a given event.
        ")
                        (reparse-symbol indented_block_body) [32608 32733])
                    ("format_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32761 32765])
                            ("data" variable nil (reparse-symbol function_parameters) [32767 32771]))                          
                        :documentation "
        Return *cursor data* string formatted.
        ")
                        (reparse-symbol indented_block_body) [32738 33085])
                    ("mouseover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33118 33122]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33090 33156])
                    ("mouseover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33197 33201])
                            ("val" variable nil (reparse-symbol function_parameters) [33203 33206]))                          
                        :decorators 
                          ( ("mouseover.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33161 33429]))                  
                :type "class")
                nil [2381 33429])
            ("ArtistInspector" type
               (:documentation "
    A helper class to inspect an :class:`~matplotlib.artist.Artist`
    and return information about it's settable properties and their
    current values.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the artist inspector with an
        :class:`~matplotlib.artist.Artist` or iterable of :class:`Artists`.
        If an iterable is used, we assume it is a homogeneous sequence (all
        :class:`Artists` are of the same type) and it is your responsibility
        to make sure this is so.
        \"\"\"" code nil (reparse-symbol indented_block_body) [33669 33994])
                            ("if" code nil (reparse-symbol indented_block_body) [34003 34151])
                            ("self" variable nil (reparse-symbol indented_block_body) [34160 34174])
                            ("if" code nil (reparse-symbol indented_block_body) [34183 34234])
                            ("self" variable nil (reparse-symbol indented_block_body) [34242 34252])
                            ("self" variable nil (reparse-symbol indented_block_body) [34262 34294]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33651 33655])
                            ("o" variable nil (reparse-symbol function_parameters) [33657 33658]))                          
                        :documentation "
        Initialize the artist inspector with an
        :class:`~matplotlib.artist.Artist` or iterable of :class:`Artists`.
        If an iterable is used, we assume it is a homogeneous sequence (all
        :class:`Artists` are of the same type) and it is your responsibility
        to make sure this is so.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33638 34295])
                    ("get_aliases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34316 34320]))                          
                        :documentation "
        Get a dict mapping *fullname* -> *alias* for each *alias* in
        the :class:`~matplotlib.artist.ArtistInspector`.

        e.g., for lines::

          {'markerfacecolor': 'mfc',
           'linewidth'      : 'lw',
          }

        ")
                        (reparse-symbol indented_block_body) [34300 35062])
                    ("_get_valid_values_regex" variable nil (reparse-symbol indented_block_body) [35067 35176])
                    ("get_valid_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35203 35207])
                            ("attr" variable nil (reparse-symbol function_parameters) [35209 35213]))                          
                        :documentation "
        Get the legal arguments for the setter associated with *attr*.

        This is done by querying the docstring of the function *set_attr*
        for a line that begins with \"ACCEPTS\" or \".. ACCEPTS\":

        e.g., for a line linestyle, return
        \"[ ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'steps'`` | ``'None'``
        ]\"
        ")
                        (reparse-symbol indented_block_body) [35182 36103])
                    ("_get_setters_and_targets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36137 36141]))                          
                        :documentation "
        Get the attribute strings and a full path to where the setter
        is defined for all setters in an object.
        ")
                        (reparse-symbol indented_block_body) [36108 37079])
                    ("get_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37100 37104]))                          
                        :documentation "
        Get the attribute strings with setters for object.  e.g., for a line,
        return ``['markerfacecolor', 'linewidth', ....]``.
        ")
                        (reparse-symbol indented_block_body) [37084 37343])
                    ("is_alias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37361 37365])
                            ("o" variable nil (reparse-symbol function_parameters) [37367 37368]))                          
                        :documentation "
        Return *True* if method object *o* is an alias for another
        function.
        ")
                        (reparse-symbol indented_block_body) [37348 37594])
                    ("aliased_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37616 37620])
                            ("s" variable nil (reparse-symbol function_parameters) [37622 37623]))                          
                        :documentation "
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME.

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        ")
                        (reparse-symbol indented_block_body) [37599 38101])
                    ("aliased_name_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38128 38132])
                            ("s" variable nil (reparse-symbol function_parameters) [38134 38135])
                            ("target" variable nil (reparse-symbol function_parameters) [38137 38143]))                          
                        :documentation "
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME formatted for ReST

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        ")
                        (reparse-symbol indented_block_body) [38106 38699])
                    ("pprint_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38723 38727])
                            ("prop" variable nil (reparse-symbol function_parameters) [38729 38733])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [38740 38752]))                          
                        :documentation "
        If *prop* is *None*, return a list of strings of all settable
        properties and their valid values.

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        ")
                        (reparse-symbol indented_block_body) [38704 39574])
                    ("pprint_setters_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39603 39607])
                            ("prop" variable nil (reparse-symbol function_parameters) [39609 39613])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [39620 39632]))                          
                        :documentation "
        If *prop* is *None*, return a list of strings of all settable
        properties and their valid values.  Format the output for ReST

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        ")
                        (reparse-symbol indented_block_body) [39579 41201])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41221 41225]))                          
                        :documentation "
        return a dictionary mapping property name -> value
        ")
                        (reparse-symbol indented_block_body) [41206 41889])
                    ("pprint_getters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41913 41917]))                          
                        :documentation "
        Return the getters and actual values as list of strings.
        ")
                        (reparse-symbol indented_block_body) [41894 42465]))                  
                :type "class")
                nil [33431 42465])
            ("getp" function
               (:documentation "
    Return the value of object's property.  *property* is an optional string
    for the property you want to return

    Example usage::

        getp(obj)  # get all the object properties
        getp(obj, 'linestyle')  # get the linestyle property

    *obj* is a :class:`Artist` instance, e.g.,
    :class:`~matplotllib.lines.Line2D` or an instance of a
    :class:`~matplotlib.axes.Axes` or :class:`matplotlib.text.Text`.
    If the *property* is 'somename', this function returns

      obj.get_somename()

    :func:`getp` can be used to query all the gettable properties with
    ``getp(obj)``. Many properties have aliases for shorter typing, e.g.
    'lw' is an alias for 'linewidth'.  In the output, aliases and full
    property names will be listed as:

      property or alias = value

    e.g.:

      linewidth or lw = 2
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [42476 42479])
                    ("property" variable nil (reparse-symbol function_parameters) [42481 42489]))                  )
                nil [42467 43554])
            ("get" variable nil nil [43563 43573])
            ("setp" function
               (:documentation "
    Set a property on an artist object.

    matplotlib supports the use of :func:`setp` (\"set property\") and
    :func:`getp` to set and get object properties, as well as to do
    introspection on the object.  For example, to set the linestyle of a
    line to be dashed, you can do::

      >>> line, = plot([1,2,3])
      >>> setp(line, linestyle='--')

    If you want to know the valid types of arguments, you can provide
    the name of the property you want to set without a value::

      >>> setp(line, 'linestyle')
          linestyle: [ '-' | '--' | '-.' | ':' | 'steps' | 'None' ]

    If you want to see all the properties that can be set, and their
    possible values, you can do::

      >>> setp(line)
          ... long output listing omitted

    You may specify another output file to `setp` if `sys.stdout` is not
    acceptable for some reason using the `file` keyword-only argument::

      >>> with fopen('output.log') as f:
      >>>     setp(line, file=f)

    :func:`setp` operates on a single instance or a iterable of
    instances. If you are in query mode introspecting the possible
    values, only the first instance in the sequence is used. When
    actually setting values, all the instances will be set.  e.g.,
    suppose you have a list of two lines, the following will make both
    lines thicker and red::

      >>> x = arange(0,1.0,0.01)
      >>> y1 = sin(2*pi*x)
      >>> y2 = sin(4*pi*x)
      >>> lines = plot(x, y1, x, y2)
      >>> setp(lines, linewidth=2, color='r')

    :func:`setp` works with the MATLAB style string/value pairs or
    with python kwargs.  For example, the following are equivalent::

      >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style
      >>> setp(lines, linewidth=2, color='r')        # python style
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [43585 43588])
                    ("args" variable nil (reparse-symbol function_parameters) [43590 43595])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [43597 43605]))                  )
                nil [43576 46350])
            ("kwdoc" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [46362 46363]))              ) nil [46352 46633])
            ("docstring" code nil nil [46634 46680]))          
      :file "artist.py"
      :pointmax 46681
      :fsize 46680
      :lastmodtime '(23240 23001 117461 0)
      :unmatched-syntax '((FROM 343 . 347) (PERIOD 348 . 349) (FROM 320 . 324) (PERIOD 325 . 326) (FROM 279 . 283) (PERIOD 284 . 285)))
    (semanticdb-table "semanticdb-table-1524160"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("numpy" include nil nil [123 141])
            ("numpy" include nil nil [142 162])
            ("matplotlib" include nil nil [164 213])
            ("" code nil nil [244 423])
            ("matplotlib.transforms" include nil nil [424 486])
            ("ScaleBase" type
               (:documentation "
    The base class for all scales.

    Scales are separable transformations, working on a single dimension.

    Any subclasses will want to override:

      - :attr:`name`
      - :meth:`get_transform`
      - :meth:`set_default_locators_and_formatters`

    And optionally:
      - :meth:`limit_range_for_scale`
    "
                :superclasses ("object")
                :members 
                  ( ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [867 871]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` object
        associated with this scale.
        ")
                        (reparse-symbol indented_block_body) [849 1038])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1083 1087])
                            ("axis" variable nil (reparse-symbol function_parameters) [1089 1093]))                          
                        :documentation "
        Set the :class:`~matplotlib.ticker.Locator` and
        :class:`~matplotlib.ticker.Formatter` objects on the given
        axis to match this scale.
        ")
                        (reparse-symbol indented_block_body) [1043 1313])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1344 1348])
                            ("vmin" variable nil (reparse-symbol function_parameters) [1350 1354])
                            ("vmax" variable nil (reparse-symbol function_parameters) [1356 1360])
                            ("minpos" variable nil (reparse-symbol function_parameters) [1362 1368]))                          
                        :documentation "
        Returns the range *vmin*, *vmax*, possibly limited to the
        domain supported by this scale.

        *minpos* should be the minimum positive value in the data.
         This is used by log scales to determine a minimum value.
        ")
                        (reparse-symbol indented_block_body) [1318 1661]))                  
                :type "class")
                nil [489 1661])
            ("LinearScale" type
               (:documentation "
    The default linear scale.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [1744 1759])
                    ("__init__" function
                       (:suite 
                          ( ("pass" code nil (reparse-symbol indented_block_body) [1809 1813]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1778 1782])
                            ("axis" variable nil (reparse-symbol function_parameters) [1784 1788])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1790 1798]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1765 1814])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1859 1863])
                            ("axis" variable nil (reparse-symbol function_parameters) [1865 1869]))                          
                        :documentation "
        Set the locators and formatters to reasonable defaults for
        linear scaling.
        ")
                        (reparse-symbol indented_block_body) [1819 2368])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2391 2395]))                          
                        :documentation "
        The transform for linear scaling is just the
        :class:`~matplotlib.transforms.IdentityTransform`.
        ")
                        (reparse-symbol indented_block_body) [2373 2569]))                  
                :type "class")
                nil [1663 2569])
            ("LogTransformBase" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [2610 2624])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [2629 2644])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [2649 2668])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [2673 2691])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [2740 2764])
                            ("self" variable nil (reparse-symbol indented_block_body) [2773 2823]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2710 2714])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [2716 2722]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2697 2824])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2854 2858])
                            ("a" variable nil (reparse-symbol function_parameters) [2860 2861]))                          )
                        (reparse-symbol indented_block_body) [2829 3779])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3796 3800]))                          )
                        (reparse-symbol indented_block_body) [3784 3904]))                  
                :type "class")
                nil [2571 3904])
            ("InvertedLogTransformBase" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [3953 3967])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [3972 3987])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [3992 4011])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [4016 4034])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4065 4069])
                            ("a" variable nil (reparse-symbol function_parameters) [4071 4072]))                          )
                        (reparse-symbol indented_block_body) [4040 4113])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4130 4134]))                          )
                        (reparse-symbol indented_block_body) [4118 4187]))                  
                :type "class")
                nil [3906 4187])
            ("Log10Transform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [4233 4244])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4263 4267]))                          )
                        (reparse-symbol indented_block_body) [4250 4310]))                  
                :type "class")
                nil [4189 4310])
            ("InvertedLog10Transform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [4372 4383])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4402 4406]))                          )
                        (reparse-symbol indented_block_body) [4389 4441]))                  
                :type "class")
                nil [4312 4441])
            ("Log2Transform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [4486 4496])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4515 4519]))                          )
                        (reparse-symbol indented_block_body) [4502 4561]))                  
                :type "class")
                nil [4443 4561])
            ("InvertedLog2Transform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [4622 4632])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4651 4655]))                          )
                        (reparse-symbol indented_block_body) [4638 4689]))                  
                :type "class")
                nil [4563 4689])
            ("NaturalLogTransform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [4740 4751])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4770 4774]))                          )
                        (reparse-symbol indented_block_body) [4757 4822]))                  
                :type "class")
                nil [4691 4822])
            ("InvertedNaturalLogTransform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [4889 4900])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4919 4923]))                          )
                        (reparse-symbol indented_block_body) [4906 4963]))                  
                :type "class")
                nil [4824 4963])
            ("LogTransform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("LogTransformBase" code nil (reparse-symbol indented_block_body) [5056 5095])
                            ("self" variable nil (reparse-symbol indented_block_body) [5104 5120]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5020 5024])
                            ("base" variable nil (reparse-symbol function_parameters) [5026 5030])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [5032 5038]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5007 5121])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5139 5143]))                          )
                        (reparse-symbol indented_block_body) [5126 5193]))                  
                :type "class")
                nil [4965 5193])
            ("InvertedLogTransform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("InvertedLogTransformBase" code nil (reparse-symbol indented_block_body) [5287 5326])
                            ("self" variable nil (reparse-symbol indented_block_body) [5335 5351]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5266 5270])
                            ("base" variable nil (reparse-symbol function_parameters) [5272 5276]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5253 5352])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5370 5374]))                          )
                        (reparse-symbol indented_block_body) [5357 5416]))                  
                :type "class")
                nil [5195 5416])
            ("LogScale" type
               (:documentation "
    A standard logarithmic scale.  Care is taken so non-positive
    values are not plotted.

    For computational efficiency (to push as much as possible to Numpy
    C code in the common cases), this scale provides different
    transforms depending on the base of the logarithm:

       - base 10 (:class:`Log10Transform`)
       - base 2 (:class:`Log2Transform`)
       - base e (:class:`NaturalLogTransform`)
       - arbitrary base (:class:`LogTransform`)
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [5928 5940])
                    ("LogTransformBase" variable nil (reparse-symbol indented_block_body) [5971 6006])
                    ("Log10Transform" variable nil (reparse-symbol indented_block_body) [6011 6042])
                    ("InvertedLog10Transform" variable nil (reparse-symbol indented_block_body) [6047 6094])
                    ("Log2Transform" variable nil (reparse-symbol indented_block_body) [6099 6128])
                    ("InvertedLog2Transform" variable nil (reparse-symbol indented_block_body) [6133 6178])
                    ("NaturalLogTransform" variable nil (reparse-symbol indented_block_body) [6183 6224])
                    ("InvertedNaturalLogTransform" variable nil (reparse-symbol indented_block_body) [6229 6286])
                    ("LogTransform" variable nil (reparse-symbol indented_block_body) [6291 6318])
                    ("InvertedLogTransform" variable nil (reparse-symbol indented_block_body) [6323 6366])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *basex*/*basey*:
           The base of the logarithm

        *nonposx*/*nonposy*: ['mask' | 'clip' ]
          non-positive values in *x* or *y* can be masked as
          invalid, or clipped to a very small positive number

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6416 6968])
                            ("if" code nil (reparse-symbol indented_block_body) [6977 7299])
                            ("if" code nil (reparse-symbol indented_block_body) [7308 7592])
                            ("if" code nil (reparse-symbol indented_block_body) [7601 7716])
                            ("if" code nil (reparse-symbol indented_block_body) [7724 7819])
                            ("if" code nil (reparse-symbol indented_block_body) [7828 8152])
                            ("self" variable nil (reparse-symbol indented_block_body) [8161 8177])
                            ("self" variable nil (reparse-symbol indented_block_body) [8186 8202]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6385 6389])
                            ("axis" variable nil (reparse-symbol function_parameters) [6391 6395])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6397 6405]))                          
                        :documentation "
        *basex*/*basey*:
           The base of the logarithm

        *nonposx*/*nonposy*: ['mask' | 'clip' ]
          non-positive values in *x* or *y* can be masked as
          invalid, or clipped to a very small positive number

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6372 8203])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8248 8252])
                            ("axis" variable nil (reparse-symbol function_parameters) [8254 8258]))                          
                        :documentation "
        Set the locators and formatters to specialized versions for
        log scaling.
        ")
                        (reparse-symbol indented_block_body) [8208 8719])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8742 8746]))                          
                        :documentation "
        Return a :class:`~matplotlib.transforms.Transform` instance
        appropriate for the given logarithm base.
        ")
                        (reparse-symbol indented_block_body) [8724 8922])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8953 8957])
                            ("vmin" variable nil (reparse-symbol function_parameters) [8959 8963])
                            ("vmax" variable nil (reparse-symbol function_parameters) [8965 8969])
                            ("minpos" variable nil (reparse-symbol function_parameters) [8971 8977]))                          
                        :documentation "
        Limit the domain to positive values.
        ")
                        (reparse-symbol indented_block_body) [8927 9305]))                  
                :type "class")
                nil [5418 9305])
            ("SymmetricalLogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [9353 9367])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [9372 9387])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [9392 9411])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [9416 9434])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [9495 9519])
                            ("self" variable nil (reparse-symbol indented_block_body) [9528 9544])
                            ("self" variable nil (reparse-symbol indented_block_body) [9553 9579])
                            ("self" variable nil (reparse-symbol indented_block_body) [9588 9612])
                            ("self" variable nil (reparse-symbol indented_block_body) [9621 9678])
                            ("self" variable nil (reparse-symbol indented_block_body) [9687 9716]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9453 9457])
                            ("base" variable nil (reparse-symbol function_parameters) [9459 9463])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [9465 9474])
                            ("linscale" variable nil (reparse-symbol function_parameters) [9476 9484]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9440 9717])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9747 9751])
                            ("a" variable nil (reparse-symbol function_parameters) [9753 9754]))                          )
                        (reparse-symbol indented_block_body) [9722 10247])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10265 10269]))                          )
                        (reparse-symbol indented_block_body) [10252 10408]))                  
                :type "class")
                nil [9307 10408])
            ("InvertedSymmetricalLogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [10464 10478])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [10483 10498])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [10503 10522])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [10527 10545])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [10606 10630])
                            ("symlog" variable nil (reparse-symbol indented_block_body) [10639 10698])
                            ("self" variable nil (reparse-symbol indented_block_body) [10707 10723])
                            ("self" variable nil (reparse-symbol indented_block_body) [10732 10758])
                            ("self" variable nil (reparse-symbol indented_block_body) [10767 10814])
                            ("self" variable nil (reparse-symbol indented_block_body) [10823 10847])
                            ("self" variable nil (reparse-symbol indented_block_body) [10856 10913]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10564 10568])
                            ("base" variable nil (reparse-symbol function_parameters) [10570 10574])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [10576 10585])
                            ("linscale" variable nil (reparse-symbol function_parameters) [10587 10595]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10551 10914])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10944 10948])
                            ("a" variable nil (reparse-symbol function_parameters) [10950 10951]))                          )
                        (reparse-symbol indented_block_body) [10919 11381])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11399 11403]))                          )
                        (reparse-symbol indented_block_body) [11386 11526]))                  
                :type "class")
                nil [10410 11526])
            ("SymmetricalLogScale" type
               (:documentation "
    The symmetrical logarithmic scale is logarithmic in both the
    positive and negative directions from the origin.

    Since the values close to zero tend toward infinity, there is a
    need to have a range around zero that is linear.  The parameter
    *linthresh* allows the user to specify the size of this range
    (-*linthresh*, *linthresh*).
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [11941 11956])
                    ("SymmetricalLogTransform" variable nil (reparse-symbol indented_block_body) [11986 12035])
                    ("InvertedSymmetricalLogTransform" variable nil (reparse-symbol indented_block_body) [12040 12105])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *basex*/*basey*:
           The base of the logarithm

        *linthreshx*/*linthreshy*:
          A single float which defines the range (-*x*, *x*), within
          which the plot is linear. This avoids having the plot go to
          infinity around zero.

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.

        *linscalex*/*linscaley*:
           This allows the linear range (-*linthresh* to *linthresh*)
           to be stretched relative to the logarithmic range.  Its
           value is the number of decades to use for each half of the
           linear range.  For example, when *linscale* == 1.0 (the
           default), the space used for the positive and negative
           halves of the linear range will be equal to one decade in
           the logarithmic range.
        \"\"\"" code nil (reparse-symbol indented_block_body) [12155 13219])
                            ("if" code nil (reparse-symbol indented_block_body) [13228 13660])
                            ("if" code nil (reparse-symbol indented_block_body) [13669 13753])
                            ("if" code nil (reparse-symbol indented_block_body) [13761 13855])
                            ("if" code nil (reparse-symbol indented_block_body) [13863 13955])
                            ("self" variable nil (reparse-symbol indented_block_body) [13964 14147])
                            ("self" variable nil (reparse-symbol indented_block_body) [14157 14173])
                            ("self" variable nil (reparse-symbol indented_block_body) [14182 14208])
                            ("self" variable nil (reparse-symbol indented_block_body) [14217 14241])
                            ("self" variable nil (reparse-symbol indented_block_body) [14250 14266]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12124 12128])
                            ("axis" variable nil (reparse-symbol function_parameters) [12130 12134])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12136 12144]))                          
                        :documentation "
        *basex*/*basey*:
           The base of the logarithm

        *linthreshx*/*linthreshy*:
          A single float which defines the range (-*x*, *x*), within
          which the plot is linear. This avoids having the plot go to
          infinity around zero.

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.

        *linscalex*/*linscaley*:
           This allows the linear range (-*linthresh* to *linthresh*)
           to be stretched relative to the logarithmic range.  Its
           value is the number of decades to use for each half of the
           linear range.  For example, when *linscale* == 1.0 (the
           default), the space used for the positive and negative
           halves of the linear range will be equal to one decade in
           the logarithmic range.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12111 14267])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14312 14316])
                            ("axis" variable nil (reparse-symbol function_parameters) [14318 14322]))                          
                        :documentation "
        Set the locators and formatters to specialized versions for
        symmetrical log scaling.
        ")
                        (reparse-symbol indented_block_body) [14272 14785])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14808 14812]))                          
                        :documentation "
        Return a :class:`SymmetricalLogTransform` instance.
        ")
                        (reparse-symbol indented_block_body) [14790 14930]))                  
                :type "class")
                nil [11528 14930])
            ("LogitTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [14969 14983])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [14988 15003])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [15008 15027])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [15032 15050])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [15099 15123])
                            ("self" variable nil (reparse-symbol indented_block_body) [15132 15153])
                            ("self" variable nil (reparse-symbol indented_block_body) [15162 15212]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15069 15073])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [15075 15081]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15056 15213])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15243 15247])
                            ("a" variable nil (reparse-symbol function_parameters) [15249 15250]))                          
                        :documentation "logit transform (base 10), masked or clipped")
                        (reparse-symbol indented_block_body) [15218 15564])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15582 15586]))                          )
                        (reparse-symbol indented_block_body) [15569 15636])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15653 15657]))                          )
                        (reparse-symbol indented_block_body) [15641 15760]))                  
                :type "class")
                nil [14932 15760])
            ("LogisticTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [15802 15816])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [15821 15836])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [15841 15860])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [15865 15883])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [15932 15956])
                            ("self" variable nil (reparse-symbol indented_block_body) [15965 15986]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15902 15906])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [15908 15914]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15889 15987])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16017 16021])
                            ("a" variable nil (reparse-symbol function_parameters) [16023 16024]))                          
                        :documentation "logistic transform (base 10)")
                        (reparse-symbol indented_block_body) [15992 16106])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16124 16128]))                          )
                        (reparse-symbol indented_block_body) [16111 16175])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16192 16196]))                          )
                        (reparse-symbol indented_block_body) [16180 16267]))                  
                :type "class")
                nil [15762 16267])
            ("LogitScale" type
               (:documentation "
    Logit scale for data between zero and one, both excluded.

    This scale is similar to a log scale close to zero and to one, and almost
    linear around 0.5. It maps the interval ]0, 1[ onto ]-infty, +infty[.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [16533 16547])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *nonpos*: ['mask' | 'clip' ]
          values beyond ]0, 1[ can be masked as invalid, or clipped to a number
          very close to 0 or 1
        \"\"\"" code nil (reparse-symbol indented_block_body) [16602 16765])
                            ("if" code nil (reparse-symbol indented_block_body) [16774 16889])
                            ("self" variable nil (reparse-symbol indented_block_body) [16898 16938]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16566 16570])
                            ("axis" variable nil (reparse-symbol function_parameters) [16572 16576])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [16578 16584]))                          
                        :documentation "
        *nonpos*: ['mask' | 'clip' ]
          values beyond ]0, 1[ can be masked as invalid, or clipped to a number
          very close to 0 or 1
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16553 16939])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16962 16966]))                          
                        :documentation "
        Return a :class:`LogitTransform` instance.
        ")
                        (reparse-symbol indented_block_body) [16944 17075])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17120 17124])
                            ("axis" variable nil (reparse-symbol function_parameters) [17126 17130]))                          )
                        (reparse-symbol indented_block_body) [17080 17385])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17416 17420])
                            ("vmin" variable nil (reparse-symbol function_parameters) [17422 17426])
                            ("vmax" variable nil (reparse-symbol function_parameters) [17428 17432])
                            ("minpos" variable nil (reparse-symbol function_parameters) [17434 17440]))                          
                        :documentation "
        Limit the domain to values between 0 and 1 (excluded).
        ")
                        (reparse-symbol indented_block_body) [17390 17789]))                  
                :type "class")
                nil [16269 17789])
            ("_scale_mapping" variable nil nil [17791 17927])
            ("get_scale_names" function nil nil [17930 17987])
            ("scale_factory" function
               (:documentation "
    Return a scale class by name.

    ACCEPTS: [ %(names)s ]
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [18007 18012])
                    ("axis" variable nil (reparse-symbol function_parameters) [18014 18018])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [18020 18028]))                  )
                nil [17989 18329])
            ("scale_factory" code nil nil [18329 18437])
            ("register_scale" function
               (:documentation "
    Register a new kind of scale.

    *scale_class* must be a subclass of :class:`ScaleBase`.
    "
                :arguments 
                  ( ("scale_class" variable nil (reparse-symbol function_parameters) [18459 18470]))                  )
                nil [18440 18635])
            ("get_scale_docs" function (:documentation "
    Helper function for generating docstrings related to scales.
    ") nil [18637 19155])
            ("docstring" code nil nil [19157 19290]))          
      :file "scale.py"
      :pointmax 19291
      :fsize 19290
      :lastmodtime '(23240 23001 125461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1526114"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Builtin colormaps, colormap handling utilities, and the `ScalarMappable` mixin.

See :doc:`/gallery/color/colormap_reference` for a list of builtin colormaps.
See :doc:`/tutorials/colors/colormaps` for an in-depth discussion of colormaps.
\"\"\"" code nil nil [1 247])
            ("" code nil nil [271 356])
            ("six" include nil nil [358 368])
            ("numpy" include nil nil [370 388])
            ("numpy" include nil nil [389 409])
            ("matplotlib" include nil nil [410 434])
            ("matplotlib.colors" include nil nil [435 469])
            ("matplotlib.cbook" include nil nil [470 502])
            ("matplotlib._cm" include nil nil [503 535])
            ("matplotlib._cm_listed" include nil nil [536 591])
            ("cmap_d" variable nil nil [594 605])
            ("_reverser" function (:arguments 
              ( ("f" variable nil (reparse-symbol function_parameters) [706 707]))              ) nil [692 777])
            ("revcmap" function
               (:documentation "Can only handle specification *data* in dictionary format."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [791 795]))                  )
                nil [779 1396])
            ("_reverse_cmap_spec" function
               (:documentation "Reverses cmap specification *spec*, can handle both dict and tuple
    type specs."
                :arguments 
                  ( ("spec" variable nil (reparse-symbol function_parameters) [1421 1425]))                  )
                nil [1398 1841])
            ("_generate_cmap" function
               (:documentation "Generates the requested cmap from its *name*.  The lut size is
    *lutsize*."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1862 1866])
                    ("lutsize" variable nil (reparse-symbol function_parameters) [1868 1875]))                  )
                nil [1843 2289])
            ("LUTSIZE" variable nil nil [2290 2325])
            ("datad" code nil nil [2415 2529])
            ("for" code nil nil [2637 2717])
            ("cmap_d" code nil nil [2718 2745])
            ("locals" code nil nil [2747 2770])
            ("register_cmap" function
               (:documentation "
    Add a colormap to the set recognized by :func:`get_cmap`.

    It can be used in two ways::

        register_cmap(name='swirly', cmap=swirly_cmap)

        register_cmap(name='choppy', data=choppydata, lut=128)

    In the first case, *cmap* must be a :class:`matplotlib.colors.Colormap`
    instance.  The *name* is optional; if absent, the name will
    be the :attr:`~matplotlib.colors.Colormap.name` attribute of the *cmap*.

    In the second case, the three arguments are passed to
    the :class:`~matplotlib.colors.LinearSegmentedColormap` initializer,
    and the resulting colormap is registered.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2825 2829])
                    ("cmap" variable nil (reparse-symbol function_parameters) [2836 2840])
                    ("data" variable nil (reparse-symbol function_parameters) [2847 2851])
                    ("lut" variable nil (reparse-symbol function_parameters) [2858 2861]))                  )
                nil [2807 4056])
            ("get_cmap" function
               (:documentation "
    Get a colormap instance, defaulting to rc values if *name* is None.

    Colormaps added with :func:`register_cmap` take precedence over
    built-in colormaps.

    If *name* is a :class:`matplotlib.colors.Colormap` instance, it will be
    returned.

    If *lut* is not None it must be an integer giving the number of
    entries desired in the lookup table, and *name* must be a standard
    mpl colormap name.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4071 4075])
                    ("lut" variable nil (reparse-symbol function_parameters) [4082 4085]))                  )
                nil [4058 4949])
            ("ScalarMappable" type
               (:documentation "
    This is a mixin class to support scalar data to RGBA mapping.
    The ScalarMappable makes use of data normalization before returning
    RGBA colors from the given colormap.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("r\"\"\"

        Parameters
        ----------
        norm : :class:`matplotlib.colors.Normalize` instance
            The normalizing object which scales data, typically into the
            interval ``[0, 1]``.
            If *None*, *norm* defaults to a *colors.Normalize* object which
            initializes its scaling based on the first data processed.
        cmap : str or :class:`~matplotlib.colors.Colormap` instance
            The colormap used to map normalized data values to RGBA colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5231 5744])
                            ("self" variable nil (reparse-symbol indented_block_body) [5754 5797])
                            ("if" code nil (reparse-symbol indented_block_body) [5807 5854])
                            ("if" code nil (reparse-symbol indented_block_body) [5862 5917])
                            ("self" variable nil (reparse-symbol indented_block_body) [5926 5940])
                            ("self" variable nil (reparse-symbol indented_block_body) [6011 6027])
                            ("self" variable nil (reparse-symbol indented_block_body) [6093 6119])
                            ("self" variable nil (reparse-symbol indented_block_body) [6207 6227])
                            ("self" variable nil (reparse-symbol indented_block_body) [6236 6271]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5194 5198])
                            ("norm" variable nil (reparse-symbol function_parameters) [5200 5204])
                            ("cmap" variable nil (reparse-symbol function_parameters) [5211 5215]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5181 6272])
                    ("to_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6289 6293])
                            ("x" variable nil (reparse-symbol function_parameters) [6295 6296])
                            ("alpha" variable nil (reparse-symbol function_parameters) [6298 6303])
                            ("bytes" variable nil (reparse-symbol function_parameters) [6310 6315])
                            ("norm" variable nil (reparse-symbol function_parameters) [6323 6327]))                          
                        :documentation "
        Return a normalized rgba array corresponding to *x*.

        In the normal case, *x* is a 1-D or 2-D sequence of scalars, and
        the corresponding ndarray of rgba values will be returned,
        based on the norm and colormap set for this ScalarMappable.

        There is one special case, for handling images that are already
        rgb or rgba, such as might have been read from an image file.
        If *x* is an ndarray with 3 dimensions,
        and the last dimension is either 3 or 4, then it will be
        treated as an rgb or rgba array, and no mapping will be done.
        The array can be uint8, or it can be floating point with
        values in the 0-1 range; otherwise a ValueError will be raised.
        If it is a masked array, the mask will be ignored.
        If the last dimension is 3, the *alpha* kwarg (defaulting to 1)
        will be used to fill in the transparency.  If the last dimension
        is 4, the *alpha* kwarg is ignored; it does not
        replace the pre-existing alpha.  A ValueError will be raised
        if the third dimension is other than 3 or 4.

        In either case, if *bytes* is *False* (default), the rgba
        array will be floats in the 0-1 range; if it is *True*,
        the returned rgba array will be uint8 in the 0 to 255 range.

        If norm is False, no normalization of the input data is
        performed, and it is assumed to be in the range (0-1).

        ")
                        (reparse-symbol indented_block_body) [6277 9424])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9443 9447])
                            ("A" variable nil (reparse-symbol function_parameters) [9449 9450]))                          
                        :documentation "Set the image array from numpy array *A*.

        .. ACCEPTS: ndarray

        Parameters
        ----------
        A : ndarray
        ")
                        (reparse-symbol indented_block_body) [9429 9667])
                    ("get_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9686 9690]))                          )
                        (reparse-symbol indented_block_body) [9672 9743])
                    ("get_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9761 9765]))                          )
                        (reparse-symbol indented_block_body) [9748 9823])
                    ("get_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9841 9845]))                          )
                        (reparse-symbol indented_block_body) [9828 9962])
                    ("set_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9980 9984])
                            ("vmin" variable nil (reparse-symbol function_parameters) [9986 9990])
                            ("vmax" variable nil (reparse-symbol function_parameters) [9997 10001]))                          
                        :documentation "
        set the norm limits for image scaling; if *vmin* is a length2
        sequence, interpret it as ``(vmin, vmax)`` which is used to
        support setp

        ACCEPTS: a length 2 sequence of floats; may be overridden in methods
        that have ``vmin`` and ``vmax`` kwargs.
        ")
                        (reparse-symbol indented_block_body) [9967 10660])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10678 10682])
                            ("cmap" variable nil (reparse-symbol function_parameters) [10684 10688]))                          
                        :documentation "
        set the colormap for luminance data

        ACCEPTS: a colormap or registered colormap name
        ")
                        (reparse-symbol indented_block_body) [10665 10894])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10912 10916])
                            ("norm" variable nil (reparse-symbol function_parameters) [10918 10922]))                          
                        :documentation "Set the normalization instance.

        .. ACCEPTS: `.Normalize`

        Parameters
        ----------
        norm : `.Normalize`
        ")
                        (reparse-symbol indented_block_body) [10899 11192])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11211 11215]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array
        ")
                        (reparse-symbol indented_block_body) [11197 11488])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11512 11516]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array, changing only limits that are None
        ")
                        (reparse-symbol indented_block_body) [11493 11830])
                    ("add_checker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11851 11855])
                            ("checker" variable nil (reparse-symbol function_parameters) [11857 11864]))                          
                        :documentation "
        Add an entry to a dictionary of boolean flags
        that are set to True when the mappable is changed.
        ")
                        (reparse-symbol indented_block_body) [11835 12046])
                    ("check_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12068 12072])
                            ("checker" variable nil (reparse-symbol function_parameters) [12074 12081]))                          
                        :documentation "
        If mappable has changed since the last check,
        return True; else return False
        ")
                        (reparse-symbol indented_block_body) [12051 12330])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12347 12351]))                          
                        :documentation "
        Call this whenever the mappable is changed to notify all the
        callbackSM listeners to the 'changed' signal
        ")
                        (reparse-symbol indented_block_body) [12335 12655]))                  
                :type "class")
                nil [4951 12655]))          
      :file "cm.py"
      :pointmax 12655
      :fsize 12654
      :lastmodtime '(23240 23001 109461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1528918"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for converting numbers or color arguments to *RGB* or *RGBA*

*RGB* and *RGBA* are sequences of, respectively, 3 or 4 floats in the
range 0-1.

This module includes functions and classes for color specification
conversions, and for mapping numbers to colors in a 1-D array of colors called
a colormap. Colormapping typically involves two steps: a data array is first
mapped onto the range 0-1 using an instance of :class:`Normalize` or of a
subclass; then this number in the 0-1 range is mapped to a color using an
instance of a subclass of :class:`Colormap`.  Two are provided here:
:class:`LinearSegmentedColormap`, which is used to generate all the built-in
colormap instances, but is also useful for making custom colormaps, and
:class:`ListedColormap`, which is used for generating a custom colormap from a
list of color specifications.

The module also provides functions for checking whether an object can be
interpreted as a color (:func:`is_color_like`), for converting such an object
to an RGBA tuple (:func:`to_rgba`) or to an HTML-like hex string in the
`#rrggbb` format (:func:`to_hex`), and a sequence of colors to an `(n, 4)`
RGBA array (:func:`to_rgba_array`).  Caching is used for efficiency.

Matplotlib recognizes the following formats to specify a color:

* an RGB or RGBA tuple of float values in ``[0, 1]`` (e.g., ``(0.1, 0.2, 0.5)``
  or  ``(0.1, 0.2, 0.5, 0.3)``);
* a hex RGB or RGBA string (e.g., ``'#0F0F0F'`` or ``'#0F0F0F0F'``);
* a string representation of a float value in ``[0, 1]`` inclusive for gray
  level (e.g., ``'0.5'``);
* one of ``{'b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'}``;
* a X11/CSS4 color name;
* a name from the `xkcd color survey <https://xkcd.com/color/rgb/>`__;
  prefixed with ``'xkcd:'`` (e.g., ``'xkcd:sky blue'``);
* one of ``{'tab:blue', 'tab:orange', 'tab:green',
  'tab:red', 'tab:purple', 'tab:brown', 'tab:pink',
  'tab:gray', 'tab:olive', 'tab:cyan'}`` which are the Tableau Colors from the
  'T10' categorical palette (which is the default color cycle);
* a \"CN\" color spec, i.e. `'C'` followed by a single digit, which is an index
  into the default property cycle (``matplotlib.rcParams['axes.prop_cycle']``);
  the indexing occurs at artist creation time and defaults to black if the
  cycle does not include color.

All string specifications of color, other than \"CN\", are case-insensitive.
\"\"\"" code nil nil [1 2373])
            ("" code nil nil [2398 2483])
            ("six" include nil nil [2485 2495])
            ("six.moves" include nil nil [2496 2521])
            ("collections" include nil nil [2523 2552])
            ("itertools" include nil nil [2553 2569])
            ("re" include nil nil [2570 2579])
            ("warnings" include nil nil [2580 2595])
            ("numpy" include nil nil [2597 2615])
            ("matplotlib.cbook" include nil nil [2616 2648])
            ("XKCD_COLORS" include nil nil [2667 2727])
            ("CSS4_COLORS" include nil nil [2667 2727])
            ("TABLEAU_COLORS" include nil nil [2667 2727])
            ("BASE_COLORS" include nil nil [2667 2727])
            ("_ColorMapping" type
               (:superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [2798 2842])
                            ("self" variable nil (reparse-symbol indented_block_body) [2851 2866]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2774 2778])
                            ("mapping" variable nil (reparse-symbol function_parameters) [2780 2787]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2761 2867])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2888 2892])
                            ("key" variable nil (reparse-symbol function_parameters) [2894 2897])
                            ("value" variable nil (reparse-symbol function_parameters) [2899 2904]))                          )
                        (reparse-symbol indented_block_body) [2872 2993])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3014 3018])
                            ("key" variable nil (reparse-symbol function_parameters) [3020 3023]))                          )
                        (reparse-symbol indented_block_body) [2998 3105]))                  
                :type "class")
                nil [2730 3105])
            ("_colors_full_map" variable nil nil [3107 3128])
            ("_colors_full_map" code nil nil [3162 3198])
            ("_colors_full_map" code nil nil [3199 3351])
            ("_colors_full_map" code nil nil [3352 3388])
            ("_colors_full_map" code nil nil [3389 3428])
            ("_colors_full_map" code nil nil [3429 3584])
            ("_colors_full_map" code nil nil [3585 3621])
            ("_colors_full_map" variable nil nil [3622 3672])
            ("get_named_colors_mapping" function (:documentation "Return the global mapping of names to named colors.") nil [3675 3797])
            ("_sanitize_extrema" function (:arguments 
              ( ("ex" variable nil (reparse-symbol function_parameters) [3821 3823]))              ) nil [3799 3968])
            ("_is_nth_color" function
               (:documentation "Return whether *c* can be interpreted as an item in the color cycle."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [3988 3989]))                  )
                nil [3970 4145])
            ("is_color_like" function
               (:documentation "Return whether *c* can be interpreted as an RGB(A) color."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [4165 4166]))                  )
                nil [4147 4468])
            ("same_color" function
               (:documentation "
    Compare two colors to see if they are the same.

    Parameters
    ----------
    c1, c2 : Matplotlib colors

    Returns
    -------
    bool
        ``True`` if *c1* and *c2* are the same color, otherwise ``False``.
    "
                :arguments 
                  ( ("c1" variable nil (reparse-symbol function_parameters) [4485 4487])
                    ("c2" variable nil (reparse-symbol function_parameters) [4489 4491]))                  )
                nil [4470 4791])
            ("to_rgba" function
               (:documentation "
    Convert *c* to an RGBA color.

    Parameters
    ----------
    c : Matplotlib color

    alpha : scalar, optional
        If *alpha* is not ``None``, it forces the alpha value, except if *c* is
        ``\"none\"`` (case-insensitive), which always maps to ``(0, 0, 0, 0)``.

    Returns
    -------
    tuple
        Tuple of ``(r, g, b, a)`` scalars.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [4805 4806])
                    ("alpha" variable nil (reparse-symbol function_parameters) [4808 4813]))                  )
                nil [4793 5774])
            ("_to_rgba_no_colorcycle" function
               (:documentation "Convert *c* to an RGBA color, with no support for color-cycle syntax.

    If *alpha* is not ``None``, it forces the alpha value, except if *c* is
    ``\"none\"`` (case-insensitive), which always maps to ``(0, 0, 0, 0)``.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [5803 5804])
                    ("alpha" variable nil (reparse-symbol function_parameters) [5806 5811]))                  )
                nil [5776 8035])
            ("to_rgba_array" function
               (:documentation "Convert *c* to a (n, 4) array of RGBA colors.

    If *alpha* is not ``None``, it forces the alpha value.  If *c* is
    ``\"none\"`` (case-insensitive) or an empty list, an empty array is returned.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [8055 8056])
                    ("alpha" variable nil (reparse-symbol function_parameters) [8058 8063]))                  )
                nil [8037 9611])
            ("to_rgb" function
               (:documentation "Convert *c* to an RGB color, silently dropping the alpha channel."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [9624 9625]))                  )
                nil [9613 9730])
            ("to_hex" function
               (:documentation "Convert *c* to a hex color.

    Uses the ``#rrggbb`` format if *keep_alpha* is False (the default),
    ``#rrggbbaa`` otherwise.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [9743 9744])
                    ("keep_alpha" variable nil (reparse-symbol function_parameters) [9746 9756]))                  )
                nil [9732 10074])
            ("cnames" variable nil nil [10124 10144])
            ("hexColorPattern" variable nil nil [10145 10197])
            ("rgb2hex" variable nil nil [10198 10214])
            ("hex2color" variable nil nil [10215 10233])
            ("ColorConverter" type
               (:documentation "
    Provides methods for converting color specifications to *RGB* or *RGBA*

    Caching is used for more efficient conversion upon repeated calls
    with the same argument.

    Ordinarily only the single instance instantiated in this module,
    *colorConverter*, is needed.
    "
                :superclasses ("object")
                :members 
                  ( ("colors" variable nil (reparse-symbol indented_block_body) [10565 10590])
                    ("cache" variable nil (reparse-symbol indented_block_body) [10595 10625])
                    ("to_rgb" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("arg" variable nil (reparse-symbol function_parameters) [10660 10663]))                          
                        :documentation "
        Returns an *RGB* tuple of three floats from 0-1.

        *arg* can be an *RGB* or *RGBA* sequence or a string in any of
        several forms:

            1) a letter from the set 'rgbcmykw'
            2) a hex color string, like '#00FFFF'
            3) a standard name, like 'aqua'
            4) a string representation of a float, like '0.4',
               indicating gray on a 0-1 scale

        if *arg* is *RGBA*, the *A* will simply be discarded.
        ")
                        (reparse-symbol indented_block_body) [10631 11184])
                    ("to_rgba" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("arg" variable nil (reparse-symbol function_parameters) [11219 11222])
                            ("alpha" variable nil (reparse-symbol function_parameters) [11224 11229]))                          
                        :documentation "
        Returns an *RGBA* tuple of four floats from 0-1.

        For acceptable values of *arg*, see :meth:`to_rgb`.
        In addition, if *arg* is \"none\" (case-insensitive),
        then (0,0,0,0) will be returned.
        If *arg* is an *RGBA* sequence and *alpha* is not *None*,
        *alpha* will replace the original *A*.
        ")
                        (reparse-symbol indented_block_body) [11189 11628])
                    ("to_rgba_array" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("arg" variable nil (reparse-symbol function_parameters) [11669 11672])
                            ("alpha" variable nil (reparse-symbol function_parameters) [11674 11679]))                          
                        :documentation "
        Returns a numpy array of *RGBA* tuples.

        Accepts a single mpl color spec or a sequence of specs.

        Special case to handle \"no color\": if *c* is \"none\" (case-insensitive),
        then an empty array will be returned.  Same for an empty list.
        ")
                        (reparse-symbol indented_block_body) [11633 12017]))                  
                :type "class")
                nil [10236 12017])
            ("colorConverter" variable nil nil [12019 12052])
            ("makeMappingArray" function
               (:documentation "Create an *N* -element 1-d lookup table

    *data* represented by a list of x,y0,y1 mapping correspondences.
    Each element in this list represents how a value between 0 and 1
    (inclusive) represented by x is mapped to a corresponding value
    between 0 and 1 (inclusive). The two values of y are to allow
    for discontinuous mapping functions (say as might be found in a
    sawtooth) where y0 represents the value of y for values of x
    <= to that given, and y1 is the value to be used for x > than
    that given). The list must start with x=0, end with x=1, and
    all values of x must be in increasing order. Values between
    the given mapping points are determined by simple linear interpolation.

    Alternatively, data can be a function mapping values between 0 - 1
    to 0 - 1.

    The function returns an array \"result\" where ``result[x*(N-1)]``
    gives the closest value for values of x between 0 and 1.
    "
                :arguments 
                  ( ("N" variable nil (reparse-symbol function_parameters) [12131 12132])
                    ("data" variable nil (reparse-symbol function_parameters) [12134 12138])
                    ("gamma" variable nil (reparse-symbol function_parameters) [12140 12145]))                  )
                nil [12110 14271])
            ("Colormap" type
               (:documentation "
    Baseclass for all scalar to RGBA mappings.

    Typically Colormap instances are used to convert data values (floats) from
    the interval ``[0, 1]`` to the RGBA color that the respective Colormap
    represents. For scaling of data into the ``[0, 1]`` interval see
    :class:`matplotlib.colors.Normalize`. It is worth noting that
    :class:`matplotlib.cm.ScalarMappable` subclasses make heavy use of this
    ``data->normalize->map-to-color`` processing chain.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        name : str
            The name of the colormap.
        N : int
            The number of rgb quantization levels.

        \"\"\"" code nil (reparse-symbol indented_block_body) [14828 15006])
                            ("self" variable nil (reparse-symbol indented_block_body) [15015 15031])
                            ("self" variable nil (reparse-symbol indented_block_body) [15040 15055])
                            ("self" variable nil (reparse-symbol indented_block_body) [15095 15132])
                            ("self" variable nil (reparse-symbol indented_block_body) [15174 15197])
                            ("self" variable nil (reparse-symbol indented_block_body) [15206 15228])
                            ("self" variable nil (reparse-symbol indented_block_body) [15237 15259])
                            ("self" code nil (reparse-symbol indented_block_body) [15268 15293])
                            ("self" code nil (reparse-symbol indented_block_body) [15302 15326])
                            ("self" variable nil (reparse-symbol indented_block_body) [15335 15355])
                            ("self" variable nil (reparse-symbol indented_block_body) [15647 15675]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14800 14804])
                            ("name" variable nil (reparse-symbol function_parameters) [14806 14810])
                            ("N" variable nil (reparse-symbol function_parameters) [14812 14813]))                          
                        :documentation "
        Parameters
        ----------
        name : str
            The name of the colormap.
        N : int
            The number of rgb quantization levels.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14787 15676])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15694 15698])
                            ("X" variable nil (reparse-symbol function_parameters) [15700 15701])
                            ("alpha" variable nil (reparse-symbol function_parameters) [15703 15708])
                            ("bytes" variable nil (reparse-symbol function_parameters) [15715 15720]))                          
                        :documentation "
        Parameters
        ----------
        X : scalar, ndarray
            The data value(s) to convert to RGBA.
            For floats, X should be in the interval ``[0.0, 1.0]`` to
            return the RGBA values ``X*100`` percent along the Colormap line.
            For integers, X should be in the interval ``[0, Colormap.N)`` to
            return RGBA values *indexed* from the Colormap with index ``X``.
        alpha : float, None
            Alpha must be a scalar between 0 and 1, or None.
        bytes : bool
            If False (default), the returned RGBA values will be floats in the
            interval ``[0, 1]`` otherwise they will be uint8s in the interval
            ``[0, 255]``.

        Returns
        -------
        Tuple of RGBA values if X is scalar, otherwise an array of
        RGBA values with a shape of ``X.shape + (4, )``.

        ")
                        (reparse-symbol indented_block_body) [15681 19271])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19289 19293]))                          
                        :documentation "Create new object with the same class, update attributes
        ")
                        (reparse-symbol indented_block_body) [19276 19593])
                    ("set_bad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19610 19614])
                            ("color" variable nil (reparse-symbol function_parameters) [19616 19621])
                            ("alpha" variable nil (reparse-symbol function_parameters) [19627 19632]))                          
                        :documentation "Set color to be used for masked values.
        ")
                        (reparse-symbol indented_block_body) [19598 19823])
                    ("set_under" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19842 19846])
                            ("color" variable nil (reparse-symbol function_parameters) [19848 19853])
                            ("alpha" variable nil (reparse-symbol function_parameters) [19859 19864]))                          
                        :documentation "Set color to be used for low out-of-range values.
           Requires norm.clip = False
        ")
                        (reparse-symbol indented_block_body) [19828 20105])
                    ("set_over" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20123 20127])
                            ("color" variable nil (reparse-symbol function_parameters) [20129 20134])
                            ("alpha" variable nil (reparse-symbol function_parameters) [20140 20145]))                          
                        :documentation "Set color to be used for high out-of-range values.
           Requires norm.clip = False
        ")
                        (reparse-symbol indented_block_body) [20110 20386])
                    ("_set_extremes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20409 20413]))                          )
                        (reparse-symbol indented_block_body) [20391 20771])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20786 20790]))                          
                        :documentation "Generate the lookup table, self._lut")
                        (reparse-symbol indented_block_body) [20776 20901])
                    ("is_gray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20918 20922]))                          )
                        (reparse-symbol indented_block_body) [20906 21102])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21121 21125])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [21127 21134]))                          
                        :documentation "
        Return a new color map with *lutsize* entries.
        ")
                        (reparse-symbol indented_block_body) [21107 21252])
                    ("reversed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21270 21274])
                            ("name" variable nil (reparse-symbol function_parameters) [21276 21280]))                          
                        :documentation "
        Make a reversed instance of the Colormap.

        .. note :: Function not implemented for base class.

        Parameters
        ----------
        name : str, optional
            The name for the reversed colormap. If it's None the
            name will be the name of the parent colormap + \"_r\".

        Notes
        -----
        See :meth:`LinearSegmentedColormap.reversed` and
        :meth:`ListedColormap.reversed`
        ")
                        (reparse-symbol indented_block_body) [21257 21783]))                  
                :type "class")
                nil [14273 21783])
            ("LinearSegmentedColormap" type
               (:documentation "Colormap objects based on lookup tables using linear segments.

    The lookup table is generated using linear interpolation for each
    primary color, with the 0-1 domain divided into any number of
    segments.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create color map from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table. Entries for alpha are optional.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.


        .. seealso::

               :meth:`LinearSegmentedColormap.from_list`
               Static method; factory function for generating a
               smoothly-varying LinearSegmentedColormap.

               :func:`makeMappingArray`
               For information about making a mapping array.
        \"\"\"" code nil (reparse-symbol indented_block_body) [22124 23926])
                            ("self" variable nil (reparse-symbol indented_block_body) [24014 24037])
                            ("Colormap" code nil (reparse-symbol indented_block_body) [24046 24078])
                            ("self" variable nil (reparse-symbol indented_block_body) [24087 24118])
                            ("self" variable nil (reparse-symbol indented_block_body) [24127 24146]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22072 22076])
                            ("name" variable nil (reparse-symbol function_parameters) [22078 22082])
                            ("segmentdata" variable nil (reparse-symbol function_parameters) [22084 22095])
                            ("N" variable nil (reparse-symbol function_parameters) [22097 22098])
                            ("gamma" variable nil (reparse-symbol function_parameters) [22104 22109]))                          
                        :documentation "Create color map from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table. Entries for alpha are optional.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.


        .. seealso::

               :meth:`LinearSegmentedColormap.from_list`
               Static method; factory function for generating a
               smoothly-varying LinearSegmentedColormap.

               :func:`makeMappingArray`
               For information about making a mapping array.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22059 24147])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24162 24166]))                          )
                        (reparse-symbol indented_block_body) [24152 24742])
                    ("set_gamma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24761 24765])
                            ("gamma" variable nil (reparse-symbol function_parameters) [24767 24772]))                          
                        :documentation "
        Set a new gamma value and regenerate color map.
        ")
                        (reparse-symbol indented_block_body) [24747 24904])
                    ("from_list" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [24941 24945])
                            ("colors" variable nil (reparse-symbol function_parameters) [24947 24953])
                            ("N" variable nil (reparse-symbol function_parameters) [24955 24956])
                            ("gamma" variable nil (reparse-symbol function_parameters) [24962 24967]))                          
                        :documentation "
        Make a linear segmented colormap with *name* from a sequence
        of *colors* which evenly transitions from colors[0] at val=0
        to colors[-1] at val=1.  *N* is the number of rgb quantization
        levels.
        Alternatively, a list of (value, color) tuples can be given
        to divide the range unevenly.
        ")
                        (reparse-symbol indented_block_body) [24909 26109])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26128 26132])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [26134 26141]))                          
                        :documentation "
        Return a new color map with *lutsize* entries.
        ")
                        (reparse-symbol indented_block_body) [26114 26301])
                    ("reversed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26319 26323])
                            ("name" variable nil (reparse-symbol function_parameters) [26325 26329]))                          
                        :documentation "
        Make a reversed instance of the Colormap.

        Parameters
        ----------
        name : str, optional
            The name for the reversed colormap. If it's None the
            name will be the name of the parent colormap + \"_r\".

        Returns
        -------
        LinearSegmentedColormap
            The reversed colormap.
        ")
                        (reparse-symbol indented_block_body) [26306 27325]))                  
                :type "class")
                nil [21785 27325])
            ("ListedColormap" type
               (:documentation "Colormap object generated from a list of colors.

    This may be most useful when indexing directly into a colormap,
    but it can also be used to generate special colormaps for ordinary
    mapping.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Make a colormap from a list of colors.

        *colors*
            a list of matplotlib color specifications,
            or an equivalent Nx3 or Nx4 floating point array
            (*N* rgb or rgba values)
        *name*
            a string to identify the colormap
        *N*
            the number of entries in the map.  The default is *None*,
            in which case there is one colormap entry for each
            element in the list of colors.  If::

                N < len(colors)

            the list will be truncated at *N*.  If::

                N > len(colors)

            the list will be extended by repetition.
        \"\"\"" code nil (reparse-symbol indented_block_body) [27642 28304])
                            ("self" variable nil (reparse-symbol indented_block_body) [28313 28336])
                            ("if" code nil (reparse-symbol indented_block_body) [28452 29144])
                            ("Colormap" code nil (reparse-symbol indented_block_body) [29152 29184]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27593 27597])
                            ("colors" variable nil (reparse-symbol function_parameters) [27599 27605])
                            ("name" variable nil (reparse-symbol function_parameters) [27607 27611])
                            ("N" variable nil (reparse-symbol function_parameters) [27625 27626]))                          
                        :documentation "
        Make a colormap from a list of colors.

        *colors*
            a list of matplotlib color specifications,
            or an equivalent Nx3 or Nx4 floating point array
            (*N* rgb or rgba values)
        *name*
            a string to identify the colormap
        *N*
            the number of entries in the map.  The default is *None*,
            in which case there is one colormap entry for each
            element in the list of colors.  If::

                N < len(colors)

            the list will be truncated at *N*.  If::

                N > len(colors)

            the list will be extended by repetition.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27580 29185])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29200 29204]))                          )
                        (reparse-symbol indented_block_body) [29190 29404])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29423 29427])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [29429 29436]))                          
                        :documentation "
        Return a new color map with *lutsize* entries.
        ")
                        (reparse-symbol indented_block_body) [29409 29622])
                    ("reversed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29640 29644])
                            ("name" variable nil (reparse-symbol function_parameters) [29646 29650]))                          
                        :documentation "
        Make a reversed instance of the Colormap.

        Parameters
        ----------
        name : str, optional
            The name for the reversed colormap. If it's None the
            name will be the name of the parent colormap + \"_r\".

        Returns
        -------
        ListedColormap
            A reversed instance of the colormap.
        ")
                        (reparse-symbol indented_block_body) [29627 30205]))                  
                :type "class")
                nil [27327 30205])
            ("Normalize" type
               (:documentation "
    A class which, when called, can normalize data into
    the ``[0.0, 1.0]`` interval.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        If *vmin* or *vmax* is not given, they are initialized from the
        minimum and maximum value respectively of the first input
        processed.  That is, *__call__(A)* calls *autoscale_None(A)*.
        If *clip* is *True* and the given value falls outside the range,
        the returned value will be 0 or 1, whichever is closer.
        Returns 0 if::

            vmin==vmax

        Works with scalars or arrays, including masked arrays.  If
        *clip* is *True*, masked values are set to 1; otherwise they
        remain masked.  Clipping silently defeats the purpose of setting
        the over, under, and masked colors in the colormap, so it is
        likely to lead to surprises; therefore the default is
        *clip* = *False*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [30404 31178])
                            ("self" variable nil (reparse-symbol indented_block_body) [31187 31222])
                            ("self" variable nil (reparse-symbol indented_block_body) [31231 31266])
                            ("self" variable nil (reparse-symbol indented_block_body) [31275 31291]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30355 30359])
                            ("vmin" variable nil (reparse-symbol function_parameters) [30361 30365])
                            ("vmax" variable nil (reparse-symbol function_parameters) [30372 30376])
                            ("clip" variable nil (reparse-symbol function_parameters) [30383 30387]))                          
                        :documentation "
        If *vmin* or *vmax* is not given, they are initialized from the
        minimum and maximum value respectively of the first input
        processed.  That is, *__call__(A)* calls *autoscale_None(A)*.
        If *clip* is *True* and the given value falls outside the range,
        the returned value will be 0 or 1, whichever is closer.
        Returns 0 if::

            vmin==vmax

        Works with scalars or arrays, including masked arrays.  If
        *clip* is *True*, masked values are set to 1; otherwise they
        remain masked.  Clipping silently defeats the purpose of setting
        the over, under, and masked colors in the colormap, so it is
        likely to lead to surprises; therefore the default is
        *clip* = *False*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30342 31292])
                    ("process_value" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [31333 31338]))                          
                        :documentation "
        Homogenize the input *value* for easy and efficient normalization.

        *value* can be a scalar or sequence.

        Returns *result*, *is_scalar*, where *result* is a
        masked array matching *value*.  Float dtypes are preserved;
        integer types with two bytes or smaller are converted to
        np.float32, and larger types are converted to np.float64.
        Preserving float32 when possible, and using in-place operations,
        can greatly improve speed for large arrays.

        Experimental; we may want to add an option to force the
        use of float32.
        ")
                        (reparse-symbol indented_block_body) [31297 32590])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32608 32612])
                            ("value" variable nil (reparse-symbol function_parameters) [32614 32619])
                            ("clip" variable nil (reparse-symbol function_parameters) [32621 32625]))                          
                        :documentation "
        Normalize *value* data in the ``[vmin, vmax]`` interval into
        the ``[0.0, 1.0]`` interval and return it.  *clip* defaults
        to *self.clip* (which defaults to *False*).  If not already
        initialized, *vmin* and *vmax* are initialized using
        *autoscale_None(value)*.
        ")
                        (reparse-symbol indented_block_body) [32595 34290])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34307 34311])
                            ("value" variable nil (reparse-symbol function_parameters) [34313 34318]))                          )
                        (reparse-symbol indented_block_body) [34295 34695])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34714 34718])
                            ("A" variable nil (reparse-symbol function_parameters) [34720 34721]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [34700 34880])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34904 34908])
                            ("A" variable nil (reparse-symbol function_parameters) [34910 34911]))                          
                        :documentation "autoscale only None-valued vmin or vmax.")
                        (reparse-symbol indented_block_body) [34885 35144])
                    ("scaled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35160 35164]))                          )
                        (reparse-symbol indented_block_body) [35149 35275]))                  
                :type "class")
                nil [30207 35275])
            ("LogNorm" type
               (:documentation "
    Normalize a given value to the 0-1 range on a log scale
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35396 35400])
                            ("value" variable nil (reparse-symbol function_parameters) [35402 35407])
                            ("clip" variable nil (reparse-symbol function_parameters) [35409 35413]))                          )
                        (reparse-symbol indented_block_body) [35383 36683])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36700 36704])
                            ("value" variable nil (reparse-symbol function_parameters) [36706 36711]))                          )
                        (reparse-symbol indented_block_body) [36688 37044])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37063 37067])
                            ("A" variable nil (reparse-symbol function_parameters) [37069 37070]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [37049 37264])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37288 37292])
                            ("A" variable nil (reparse-symbol function_parameters) [37294 37295]))                          
                        :documentation "autoscale only None-valued vmin or vmax.")
                        (reparse-symbol indented_block_body) [37269 37632]))                  
                :type "class")
                nil [35277 37632])
            ("SymLogNorm" type
               (:documentation "
    The symmetrical logarithmic scale is logarithmic in both the
    positive and negative directions from the origin.

    Since the values close to zero tend toward infinity, there is a
    need to have a range around zero that is linear.  The parameter
    *linthresh* allows the user to specify the size of this range
    (-*linthresh*, *linthresh*).
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *linthresh*:
        The range within which the plot is linear (to
        avoid having the plot go to infinity around zero).

        *linscale*:
        This allows the linear range (-*linthresh* to *linthresh*)
        to be stretched relative to the logarithmic range.  Its
        value is the number of decades to use for each half of the
        linear range.  For example, when *linscale* == 1.0 (the
        default), the space used for the positive and negative
        halves of the linear range will be equal to one decade in
        the logarithmic range. Defaults to 1.
        \"\"\"" code nil (reparse-symbol indented_block_body) [38143 38750])
                            ("Normalize" code nil (reparse-symbol indented_block_body) [38759 38801])
                            ("self" variable nil (reparse-symbol indented_block_body) [38810 38843])
                            ("self" variable nil (reparse-symbol indented_block_body) [38852 38904])
                            ("if" code nil (reparse-symbol indented_block_body) [38913 38995]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38051 38055])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [38058 38067])
                            ("linscale" variable nil (reparse-symbol function_parameters) [38069 38077])
                            ("vmin" variable nil (reparse-symbol function_parameters) [38100 38104])
                            ("vmax" variable nil (reparse-symbol function_parameters) [38111 38115])
                            ("clip" variable nil (reparse-symbol function_parameters) [38122 38126]))                          
                        :documentation "
        *linthresh*:
        The range within which the plot is linear (to
        avoid having the plot go to infinity around zero).

        *linscale*:
        This allows the linear range (-*linthresh* to *linthresh*)
        to be stretched relative to the logarithmic range.  Its
        value is the number of decades to use for each half of the
        linear range.  For example, when *linscale* == 1.0 (the
        default), the space used for the positive and negative
        halves of the linear range will be equal to one decade in
        the logarithmic range. Defaults to 1.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38038 38995])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39013 39017])
                            ("value" variable nil (reparse-symbol function_parameters) [39019 39024])
                            ("clip" variable nil (reparse-symbol function_parameters) [39026 39030]))                          )
                        (reparse-symbol indented_block_body) [39000 39863])
                    ("_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39883 39887])
                            ("a" variable nil (reparse-symbol function_parameters) [39889 39890]))                          
                        :documentation "
        Inplace transformation.
        ")
                        (reparse-symbol indented_block_body) [39868 40226])
                    ("_inv_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40250 40254])
                            ("a" variable nil (reparse-symbol function_parameters) [40256 40257]))                          
                        :documentation "
        Inverse inplace Transformation.
        ")
                        (reparse-symbol indented_block_body) [40231 40621])
                    ("_transform_vmin_vmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40651 40655]))                          
                        :documentation "
        Calculates vmin and vmax in the transformed system.
        ")
                        (reparse-symbol indented_block_body) [40626 40891])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40908 40912])
                            ("value" variable nil (reparse-symbol function_parameters) [40914 40919]))                          )
                        (reparse-symbol indented_block_body) [40896 41149])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41168 41172])
                            ("A" variable nil (reparse-symbol function_parameters) [41174 41175]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [41154 41351])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41375 41379])
                            ("A" variable nil (reparse-symbol function_parameters) [41381 41382]))                          
                        :documentation "autoscale only None-valued vmin or vmax.")
                        (reparse-symbol indented_block_body) [41356 41728]))                  
                :type "class")
                nil [37634 41728])
            ("PowerNorm" type
               (:documentation "
    Normalize a given value to the ``[0, 1]`` interval with a power-law
    scaling. This will clip any negative data points to 0.
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Normalize" code nil (reparse-symbol indented_block_body) [41978 42020])
                            ("self" variable nil (reparse-symbol indented_block_body) [42029 42047]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41922 41926])
                            ("gamma" variable nil (reparse-symbol function_parameters) [41928 41933])
                            ("vmin" variable nil (reparse-symbol function_parameters) [41935 41939])
                            ("vmax" variable nil (reparse-symbol function_parameters) [41946 41950])
                            ("clip" variable nil (reparse-symbol function_parameters) [41957 41961]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41909 42048])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42066 42070])
                            ("value" variable nil (reparse-symbol function_parameters) [42072 42077])
                            ("clip" variable nil (reparse-symbol function_parameters) [42079 42083]))                          )
                        (reparse-symbol indented_block_body) [42053 43039])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43056 43060])
                            ("value" variable nil (reparse-symbol function_parameters) [43062 43067]))                          )
                        (reparse-symbol indented_block_body) [43044 43453])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43472 43476])
                            ("A" variable nil (reparse-symbol function_parameters) [43478 43479]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [43458 43797])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43821 43825])
                            ("A" variable nil (reparse-symbol function_parameters) [43827 43828]))                          
                        :documentation "autoscale only None-valued vmin or vmax.")
                        (reparse-symbol indented_block_body) [43802 44255]))                  
                :type "class")
                nil [41730 44255])
            ("BoundaryNorm" type
               (:documentation "
    Generate a colormap index based on discrete intervals.

    Unlike :class:`Normalize` or :class:`LogNorm`,
    :class:`BoundaryNorm` maps values to integers instead of to the
    interval 0-1.

    Mapping to the 0-1 interval could have been done via
    piece-wise linear interpolation, but using integers seems
    simpler, and reduces the number of conversions back and forth
    between integer and floating point.
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        boundaries : array-like
            Monotonically increasing sequence of boundaries
        ncolors : int
            Number of colors in the colormap to be used
        clip : bool, optional
            If clip is ``True``, out of range values are mapped to 0 if they
            are below ``boundaries[0]`` or mapped to ncolors - 1 if they are
            above ``boundaries[-1]``.

            If clip is ``False``, out of range values are mapped to -1 if
            they are below ``boundaries[0]`` or mapped to ncolors if they are
            above ``boundaries[-1]``. These are then converted to valid indices
            by :meth:`Colormap.__call__`.

        Notes
        -----
        *boundaries* defines the edges of bins, and data falling within a bin
        is mapped to the color with the same index.

        If the number of bins doesn't equal *ncolors*, the color is chosen
        by linear interpolation of the bin number onto color numbers.
        \"\"\"" code nil (reparse-symbol indented_block_body) [44792 45817])
                            ("self" variable nil (reparse-symbol indented_block_body) [45826 45842])
                            ("self" variable nil (reparse-symbol indented_block_body) [45851 45876])
                            ("self" variable nil (reparse-symbol indented_block_body) [45885 45911])
                            ("self" variable nil (reparse-symbol indented_block_body) [45920 45960])
                            ("self" variable nil (reparse-symbol indented_block_body) [45969 45998])
                            ("self" variable nil (reparse-symbol indented_block_body) [46007 46027])
                            ("if" code nil (reparse-symbol indented_block_body) [46036 46144]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44744 44748])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [44750 44760])
                            ("ncolors" variable nil (reparse-symbol function_parameters) [44762 44769])
                            ("clip" variable nil (reparse-symbol function_parameters) [44771 44775]))                          
                        :documentation "
        Parameters
        ----------
        boundaries : array-like
            Monotonically increasing sequence of boundaries
        ncolors : int
            Number of colors in the colormap to be used
        clip : bool, optional
            If clip is ``True``, out of range values are mapped to 0 if they
            are below ``boundaries[0]`` or mapped to ncolors - 1 if they are
            above ``boundaries[-1]``.

            If clip is ``False``, out of range values are mapped to -1 if
            they are below ``boundaries[0]`` or mapped to ncolors if they are
            above ``boundaries[-1]``. These are then converted to valid indices
            by :meth:`Colormap.__call__`.

        Notes
        -----
        *boundaries* defines the edges of bins, and data falling within a bin
        is mapped to the color with the same index.

        If the number of bins doesn't equal *ncolors*, the color is chosen
        by linear interpolation of the bin number onto color numbers.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44731 46144])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46162 46166])
                            ("value" variable nil (reparse-symbol function_parameters) [46168 46173])
                            ("clip" variable nil (reparse-symbol function_parameters) [46175 46179]))                          )
                        (reparse-symbol indented_block_body) [46149 47012])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47029 47033])
                            ("value" variable nil (reparse-symbol function_parameters) [47035 47040]))                          
                        :documentation "
        Raises
        ------
        ValueError
            BoundaryNorm is not invertible, so calling this method will always
            raise an error
        ")
                        (reparse-symbol indented_block_body) [47017 47282]))                  
                :type "class")
                nil [44257 47282])
            ("NoNorm" type
               (:documentation "
    Dummy replacement for Normalize, for the case where we
    want to use indices directly in a
    :class:`~matplotlib.cm.ScalarMappable` .
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47484 47488])
                            ("value" variable nil (reparse-symbol function_parameters) [47490 47495])
                            ("clip" variable nil (reparse-symbol function_parameters) [47497 47501]))                          )
                        (reparse-symbol indented_block_body) [47471 47530])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47547 47551])
                            ("value" variable nil (reparse-symbol function_parameters) [47553 47558]))                          )
                        (reparse-symbol indented_block_body) [47535 47582]))                  
                :type "class")
                nil [47284 47582])
            ("rgb_to_hsv" function
               (:documentation "
    convert float rgb values (in the range [0, 1]), in a numpy array to hsv
    values.

    Parameters
    ----------
    arr : (..., 3) array-like
       All values must be in the range [0, 1]

    Returns
    -------
    hsv : (..., 3) ndarray
       Colors converted to hsv values in range [0, 1]
    "
                :arguments 
                  ( ("arr" variable nil (reparse-symbol function_parameters) [47599 47602]))                  )
                nil [47584 49120])
            ("hsv_to_rgb" function
               (:documentation "
    convert hsv values in a numpy array to rgb values
    all values assumed to be in range [0, 1]

    Parameters
    ----------
    hsv : (..., 3) array-like
       All values assumed to be in range [0, 1]

    Returns
    -------
    rgb : (..., 3) ndarray
       Colors converted to RGB values in range [0, 1]
    "
                :arguments 
                  ( ("hsv" variable nil (reparse-symbol function_parameters) [49137 49140]))                  )
                nil [49122 51032])
            ("_vector_magnitude" function (:arguments 
              ( ("arr" variable nil (reparse-symbol function_parameters) [51056 51059]))              ) nil [51034 51470])
            ("_vector_dot" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [51488 51489])
                ("b" variable nil (reparse-symbol function_parameters) [51491 51492]))              ) nil [51472 51813])
            ("LightSource" type
               (:documentation "
    Create a light source coming from the specified azimuth and elevation.
    Angles are in degrees, with the azimuth measured
    clockwise from north and elevation up from the zero plane of the surface.

    The :meth:`shade` is used to produce \"shaded\" rgb values for a data array.
    :meth:`shade_rgb` can be used to combine an rgb image with
    The :meth:`shade_rgb`
    The :meth:`hillshade` produces an illumination map of a surface.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Specify the azimuth (measured clockwise from south) and altitude
        (measured up from the plane of the surface) of the light source
        in degrees.

        Parameters
        ----------
        azdeg : number, optional
            The azimuth (0-360, degrees clockwise from North) of the light
            source. Defaults to 315 degrees (from the northwest).
        altdeg : number, optional
            The altitude (0-90, degrees up from horizontal) of the light
            source.  Defaults to 45 degrees from horizontal.

        Notes
        -----
        For backwards compatibility, the parameters *hsv_min_val*,
        *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at
        initialization as well.  However, these parameters will only be used if
        \"blend_mode='hsv'\" is passed into :meth:`shade` or :meth:`shade_rgb`.
        See the documentation for :meth:`blend_hsv` for more details.
        \"\"\"" code nil (reparse-symbol indented_block_body) [52433 53393])
                            ("self" variable nil (reparse-symbol indented_block_body) [53402 53420])
                            ("self" variable nil (reparse-symbol indented_block_body) [53429 53449])
                            ("self" variable nil (reparse-symbol indented_block_body) [53458 53488])
                            ("self" variable nil (reparse-symbol indented_block_body) [53497 53527])
                            ("self" variable nil (reparse-symbol indented_block_body) [53536 53566])
                            ("self" variable nil (reparse-symbol indented_block_body) [53575 53605]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52319 52323])
                            ("azdeg" variable nil (reparse-symbol function_parameters) [52325 52330])
                            ("altdeg" variable nil (reparse-symbol function_parameters) [52336 52342])
                            ("hsv_min_val" variable nil (reparse-symbol function_parameters) [52347 52358])
                            ("hsv_max_val" variable nil (reparse-symbol function_parameters) [52362 52373])
                            ("hsv_min_sat" variable nil (reparse-symbol function_parameters) [52394 52405])
                            ("hsv_max_sat" variable nil (reparse-symbol function_parameters) [52409 52420]))                          
                        :documentation "
        Specify the azimuth (measured clockwise from south) and altitude
        (measured up from the plane of the surface) of the light source
        in degrees.

        Parameters
        ----------
        azdeg : number, optional
            The azimuth (0-360, degrees clockwise from North) of the light
            source. Defaults to 315 degrees (from the northwest).
        altdeg : number, optional
            The altitude (0-90, degrees up from horizontal) of the light
            source.  Defaults to 45 degrees from horizontal.

        Notes
        -----
        For backwards compatibility, the parameters *hsv_min_val*,
        *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at
        initialization as well.  However, these parameters will only be used if
        \"blend_mode='hsv'\" is passed into :meth:`shade` or :meth:`shade_rgb`.
        See the documentation for :meth:`blend_hsv` for more details.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52306 53606])
                    ("direction" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53639 53643]))                          
                        :documentation " The unit vector direction towards the light source ")
                        (reparse-symbol indented_block_body) [53611 54066])
                    ("hillshade" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54085 54089])
                            ("elevation" variable nil (reparse-symbol function_parameters) [54091 54100])
                            ("vert_exag" variable nil (reparse-symbol function_parameters) [54102 54111])
                            ("dx" variable nil (reparse-symbol function_parameters) [54115 54117])
                            ("dy" variable nil (reparse-symbol function_parameters) [54121 54123])
                            ("fraction" variable nil (reparse-symbol function_parameters) [54127 54135]))                          
                        :documentation "
        Calculates the illumination intensity for a surface using the defined
        azimuth and elevation for the light source.

        This computes the normal vectors for the surface, and then passes them
        on to `shade_normals`

        Parameters
        ----------
        elevation : array-like
            A 2d array (or equivalent) of the height values used to generate an
            illumination map
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs meters) or to exaggerate
            or de-emphasize topographic effects.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        fraction : number, optional
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.
        Returns
        -------
        intensity : ndarray
            A 2d array of illumination values between 0-1, where 0 is
            completely in shadow and 1 is completely illuminated.
        ")
                        (reparse-symbol indented_block_body) [54071 56407])
                    ("shade_normals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56430 56434])
                            ("normals" variable nil (reparse-symbol function_parameters) [56436 56443])
                            ("fraction" variable nil (reparse-symbol function_parameters) [56445 56453]))                          
                        :documentation "
        Calculates the illumination intensity for the normal vectors of a
        surface using the defined azimuth and elevation for the light source.

        Imagine an artificial sun placed at infinity in some azimuth and
        elevation position illuminating our surface. The parts of the surface
        that slope toward the sun should brighten while those sides facing away
        should become darker.

        Parameters
        ----------
        fraction : number, optional
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.

        Returns
        -------
        intensity : ndarray
            A 2d array of illumination values between 0-1, where 0 is
            completely in shadow and 1 is completely illuminated.
        ")
                        (reparse-symbol indented_block_body) [56412 58350])
                    ("shade" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58365 58369])
                            ("data" variable nil (reparse-symbol function_parameters) [58371 58375])
                            ("cmap" variable nil (reparse-symbol function_parameters) [58377 58381])
                            ("norm" variable nil (reparse-symbol function_parameters) [58383 58387])
                            ("blend_mode" variable nil (reparse-symbol function_parameters) [58394 58404])
                            ("vmin" variable nil (reparse-symbol function_parameters) [58416 58420])
                            ("vmax" variable nil (reparse-symbol function_parameters) [58441 58445])
                            ("vert_exag" variable nil (reparse-symbol function_parameters) [58452 58461])
                            ("dx" variable nil (reparse-symbol function_parameters) [58465 58467])
                            ("dy" variable nil (reparse-symbol function_parameters) [58471 58473])
                            ("fraction" variable nil (reparse-symbol function_parameters) [58477 58485])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58489 58497]))                          
                        :documentation "
        Combine colormapped data values with an illumination intensity map
        (a.k.a.  \"hillshade\") of the values.

        Parameters
        ----------
        data : array-like
            A 2d array (or equivalent) of the height values used to generate a
            shaded map.
        cmap : `~matplotlib.colors.Colormap` instance
            The colormap used to color the *data* array. Note that this must be
            a `~matplotlib.colors.Colormap` instance.  For example, rather than
            passing in `cmap='gist_earth'`, use
            `cmap=plt.get_cmap('gist_earth')` instead.
        norm : `~matplotlib.colors.Normalize` instance, optional
            The normalization used to scale values before colormapping. If
            None, the input will be linearly scaled between its min and max.
        blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional
            The type of blending used to combine the colormapped data
            values with the illumination intensity.  Default is
            \"overlay\".  Note that for most topographic surfaces,
            \"overlay\" or \"soft\" appear more visually realistic. If a
            user-defined function is supplied, it is expected to
            combine an MxNx3 RGB array of floats (ranging 0 to 1) with
            an MxNx1 hillshade array (also 0 to 1).  (Call signature
            `func(rgb, illum, **kwargs)`) Additional kwargs supplied
            to this function will be passed on to the *blend_mode*
            function.
        vmin : scalar or None, optional
            The minimum value used in colormapping *data*. If *None* the
            minimum value in *data* is used. If *norm* is specified, then this
            argument will be ignored.
        vmax : scalar or None, optional
            The maximum value used in colormapping *data*. If *None* the
            maximum value in *data* is used. If *norm* is specified, then this
            argument will be ignored.
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs meters) or to exaggerate
            or de-emphasize topography.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        fraction : number, optional
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.
        Additional kwargs are passed on to the *blend_mode* function.

        Returns
        -------
        rgba : ndarray
            An MxNx4 array of floats ranging between 0-1.
        ")
                        (reparse-symbol indented_block_body) [58355 62187])
                    ("shade_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62206 62210])
                            ("rgb" variable nil (reparse-symbol function_parameters) [62212 62215])
                            ("elevation" variable nil (reparse-symbol function_parameters) [62217 62226])
                            ("fraction" variable nil (reparse-symbol function_parameters) [62228 62236])
                            ("blend_mode" variable nil (reparse-symbol function_parameters) [62241 62251])
                            ("vert_exag" variable nil (reparse-symbol function_parameters) [62277 62286])
                            ("dx" variable nil (reparse-symbol function_parameters) [62290 62292])
                            ("dy" variable nil (reparse-symbol function_parameters) [62296 62298])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [62302 62310]))                          
                        :documentation "
        Take the input RGB array (ny*nx*3) adjust their color values
        to given the impression of a shaded relief map with a
        specified light source using the elevation (ny*nx).
        A new RGB array ((ny*nx*3)) is returned.

        Parameters
        ----------
        rgb : array-like
            An MxNx3 RGB array, assumed to be in the range of 0 to 1.
        elevation : array-like
            A 2d array (or equivalent) of the height values used to generate a
            shaded map.
        fraction : number
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.
        blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional
            The type of blending used to combine the colormapped data values
            with the illumination intensity.  For backwards compatibility, this
            defaults to \"hsv\". Note that for most topographic surfaces,
            \"overlay\" or \"soft\" appear more visually realistic. If a
            user-defined function is supplied, it is expected to combine an
            MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade
            array (also 0 to 1).  (Call signature `func(rgb, illum, **kwargs)`)
            Additional kwargs supplied to this function will be passed on to
            the *blend_mode* function.
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs meters) or to exaggerate
            or de-emphasize topography.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        Additional kwargs are passed on to the *blend_mode* function.

        Returns
        -------
        shaded_rgb : ndarray
            An MxNx3 array of floats ranging between 0-1.
        ")
                        (reparse-symbol indented_block_body) [62192 65726])
                    ("blend_hsv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65745 65749])
                            ("rgb" variable nil (reparse-symbol function_parameters) [65751 65754])
                            ("intensity" variable nil (reparse-symbol function_parameters) [65756 65765])
                            ("hsv_max_sat" variable nil (reparse-symbol function_parameters) [65767 65778])
                            ("hsv_max_val" variable nil (reparse-symbol function_parameters) [65785 65796])
                            ("hsv_min_val" variable nil (reparse-symbol function_parameters) [65821 65832])
                            ("hsv_min_sat" variable nil (reparse-symbol function_parameters) [65839 65850]))                          
                        :documentation "
        Take the input data array, convert to HSV values in the given colormap,
        then adjust those color values to give the impression of a shaded
        relief map with a specified light source.  RGBA values are returned,
        which can then be used to plot the shaded image with imshow.

        The color of the resulting image will be darkened by moving the (s,v)
        values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the
        shaded regions, or lightened by sliding (s,v) toward (hsv_max_sat
        hsv_max_val) in regions that are illuminated.  The default extremes are
        chose so that completely shaded points are nearly black (s = 1, v = 0)
        and completely illuminated points are nearly white (s = 0, v = 1).

        Parameters
        ----------
        rgb : ndarray
            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
        intensity : ndarray
            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).
        hsv_max_sat : number, optional
            The maximum saturation value that the *intensity* map can shift the
            output image to. Defaults to 1.
        hsv_min_sat : number, optional
            The minimum saturation value that the *intensity* map can shift the
            output image to. Defaults to 0.
        hsv_max_val : number, optional
            The maximum value (\"v\" in \"hsv\") that the *intensity* map can shift
            the output image to. Defaults to 1.
        hsv_min_val: number, optional
            The minimum value (\"v\" in \"hsv\") that the *intensity* map can shift
            the output image to. Defaults to 0.

        Returns
        -------
        rgb : ndarray
            An MxNx3 RGB array representing the combined images.
        ")
                        (reparse-symbol indented_block_body) [65731 69565])
                    ("blend_soft_light" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69591 69595])
                            ("rgb" variable nil (reparse-symbol function_parameters) [69597 69600])
                            ("intensity" variable nil (reparse-symbol function_parameters) [69602 69611]))                          
                        :documentation "
        Combines an rgb image with an intensity map using \"soft light\"
        blending.  Uses the \"pegtop\" formula.

        Parameters
        ----------
        rgb : ndarray
            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
        intensity : ndarray
            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).

        Returns
        -------
        rgb : ndarray
            An MxNx3 RGB array representing the combined images.
        ")
                        (reparse-symbol indented_block_body) [69570 70182])
                    ("blend_overlay" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70205 70209])
                            ("rgb" variable nil (reparse-symbol function_parameters) [70211 70214])
                            ("intensity" variable nil (reparse-symbol function_parameters) [70216 70225]))                          
                        :documentation "
        Combines an rgb image with an intensity map using \"overlay\" blending.

        Parameters
        ----------
        rgb : ndarray
            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
        intensity : ndarray
            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).

        Returns
        -------
        rgb : ndarray
            An MxNx3 RGB array representing the combined images.
        ")
                        (reparse-symbol indented_block_body) [70187 70823]))                  
                :type "class")
                nil [51815 70823])
            ("from_levels_and_colors" function
               (:documentation "
    A helper routine to generate a cmap and a norm instance which
    behave similar to contourf's levels and colors arguments.

    Parameters
    ----------
    levels : sequence of numbers
        The quantization levels used to construct the :class:`BoundaryNorm`.
        Values ``v`` are quantizized to level ``i`` if
        ``lev[i] <= v < lev[i+1]``.
    colors : sequence of colors
        The fill color to use for each level. If `extend` is \"neither\" there
        must be ``n_level - 1`` colors. For an `extend` of \"min\" or \"max\" add
        one extra color, and for an `extend` of \"both\" add two colors.
    extend : {'neither', 'min', 'max', 'both'}, optional
        The behaviour when a value falls out of range of the given levels.
        See :func:`~matplotlib.pyplot.contourf` for details.

    Returns
    -------
    (cmap, norm) : tuple containing a :class:`Colormap` and a \\
                   :class:`Normalize` instance
    "
                :arguments 
                  ( ("levels" variable nil (reparse-symbol function_parameters) [70852 70858])
                    ("colors" variable nil (reparse-symbol function_parameters) [70860 70866])
                    ("extend" variable nil (reparse-symbol function_parameters) [70868 70874]))                  )
                nil [70825 73072]))          
      :file "colors.py"
      :pointmax 73072
      :fsize 73071
      :lastmodtime '(23240 23001 113461 0)
      :unmatched-syntax '((NAME 8671 . 8677) (IF 8693 . 8695) (ELSE 8714 . 8718) (FROM 2649 . 2653) (PERIOD 2654 . 2655)))
    (semanticdb-table "semanticdb-table-152cd14"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module contains all the 2D line class which can draw with a
variety of line styles, markers and colors.
\"\"\"" code nil nil [1 117])
            ("" code nil nil [182 267])
            ("six" include nil nil [269 279])
            ("warnings" include nil nil [281 296])
            ("numpy" include nil nil [298 316])
            ("rcParams" include nil nil [325 385])
            ("docstring" include nil nil [325 385])
            ("colors" include nil nil [325 385])
            ("cbook" include nil nil [325 385])
            ("artist" include nil nil [325 385])
            ("allow_rasterization" include nil nil [399 433])
            ("Artist" include nil nil [399 433])
            ("" code nil nil [453 551])
            ("MarkerStyle" include nil nil [566 584])
            ("Path" include nil nil [596 607])
            ("IdentityTransform" include nil nil [625 672])
            ("TransformedPath" include nil nil [625 672])
            ("Bbox" include nil nil [625 672])
            ("_path" include nil nil [765 777])
            ("" code nil nil [799 953])
            ("_get_dash_pattern" function
               (:documentation "Convert linestyle -> dash pattern
    "
                :arguments 
                  ( ("style" variable nil (reparse-symbol function_parameters) [978 983]))                  )
                nil [956 1784])
            ("_scale_dashes" function (:arguments 
              ( ("offset" variable nil (reparse-symbol function_parameters) [1804 1810])
                ("dashes" variable nil (reparse-symbol function_parameters) [1812 1818])
                ("lw" variable nil (reparse-symbol function_parameters) [1820 1822]))              ) nil [1786 2172])
            ("segment_hits" function
               (:documentation "
    Determine if any line segments are within radius of a
    point. Returns the list of line segments that are within that
    radius.
    "
                :arguments 
                  ( ("cx" variable nil (reparse-symbol function_parameters) [2191 2193])
                    ("cy" variable nil (reparse-symbol function_parameters) [2195 2197])
                    ("x" variable nil (reparse-symbol function_parameters) [2199 2200])
                    ("y" variable nil (reparse-symbol function_parameters) [2202 2203])
                    ("radius" variable nil (reparse-symbol function_parameters) [2205 2211]))                  )
                nil [2174 3635])
            ("_mark_every_path" function
               (:documentation "
    Helper function that sorts out how to deal the input
    `markevery` and returns the points where markers should be drawn.

    Takes in the `markevery` value and the line path and returns the
    sub-sampled path.
    "
                :arguments 
                  ( ("markevery" variable nil (reparse-symbol function_parameters) [3658 3667])
                    ("tpath" variable nil (reparse-symbol function_parameters) [3669 3674])
                    ("affine" variable nil (reparse-symbol function_parameters) [3676 3682])
                    ("ax_transform" variable nil (reparse-symbol function_parameters) [3684 3696]))                  )
                nil [3637 8238])
            ("Line2D" type
               (:documentation "
    A line - the line can have both a solid linestyle connecting all
    the vertices, and a marker at each vertex.  Additionally, the
    drawing of the solid line is influenced by the drawstyle, e.g., one
    can create \"stepped\" lines in various styles.


    "
                :superclasses ("Artist")
                :members 
                  ( ("lineStyles" variable nil (reparse-symbol indented_block_body) [8541 8830])
                    ("_drawStyles_l" variable nil (reparse-symbol indented_block_body) [8836 9020])
                    ("_drawStyles_s" variable nil (reparse-symbol indented_block_body) [9026 9085])
                    ("drawStyles" variable nil (reparse-symbol indented_block_body) [9134 9149])
                    ("drawStyles" code nil (reparse-symbol indented_block_body) [9154 9186])
                    ("drawStyles" code nil (reparse-symbol indented_block_body) [9191 9223])
                    ("drawStyleKeys" code nil (reparse-symbol indented_block_body) [9277 9334])
                    ("markers" variable nil (reparse-symbol indented_block_body) [9419 9448])
                    ("filled_markers" variable nil (reparse-symbol indented_block_body) [9453 9496])
                    ("fillStyles" variable nil (reparse-symbol indented_block_body) [9501 9536])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [9542 9552])
                    ("validCap" variable nil (reparse-symbol indented_block_body) [9557 9599])
                    ("validJoin" variable nil (reparse-symbol indented_block_body) [9604 9643])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9661 9665]))                          )
                        (reparse-symbol indented_block_body) [9649 10168])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a :class:`~matplotlib.lines.Line2D` instance with *x*
        and *y* data in sequences *xdata*, *ydata*.

        The kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        See :meth:`set_linestyle` for a decription of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        \"\"\"" code nil (reparse-symbol indented_block_body) [10924 11356])
                            ("Artist" code nil (reparse-symbol indented_block_body) [11365 11386])
                            ("if" code nil (reparse-symbol indented_block_body) [11439 11522])
                            ("if" code nil (reparse-symbol indented_block_body) [11530 11613])
                            ("if" code nil (reparse-symbol indented_block_body) [11622 11696])
                            ("if" code nil (reparse-symbol indented_block_body) [11705 11779])
                            ("if" code nil (reparse-symbol indented_block_body) [11787 11852])
                            ("if" code nil (reparse-symbol indented_block_body) [11860 11922])
                            ("if" code nil (reparse-symbol indented_block_body) [11931 12008])
                            ("if" code nil (reparse-symbol indented_block_body) [12016 12096])
                            ("if" code nil (reparse-symbol indented_block_body) [12104 12190])
                            ("if" code nil (reparse-symbol indented_block_body) [12198 12287])
                            ("if" code nil (reparse-symbol indented_block_body) [12295 12384])
                            ("if" code nil (reparse-symbol indented_block_body) [12392 12484])
                            ("if" code nil (reparse-symbol indented_block_body) [12493 13016])
                            ("if" code nil (reparse-symbol indented_block_body) [13025 13081])
                            ("self" variable nil (reparse-symbol indented_block_body) [13090 13115])
                            ("self" variable nil (reparse-symbol indented_block_body) [13124 13150])
                            ("self" variable nil (reparse-symbol indented_block_body) [13159 13186])
                            ("self" variable nil (reparse-symbol indented_block_body) [13195 13221])
                            ("self" code nil (reparse-symbol indented_block_body) [13230 13267])
                            ("self" code nil (reparse-symbol indented_block_body) [13276 13315])
                            ("self" code nil (reparse-symbol indented_block_body) [13324 13363])
                            ("self" code nil (reparse-symbol indented_block_body) [13372 13413])
                            ("self" variable nil (reparse-symbol indented_block_body) [13423 13446])
                            ("self" variable nil (reparse-symbol indented_block_body) [13455 13477])
                            ("self" variable nil (reparse-symbol indented_block_body) [13486 13513])
                            ("self" variable nil (reparse-symbol indented_block_body) [13554 13574])
                            ("self" variable nil (reparse-symbol indented_block_body) [13583 13603])
                            ("self" variable nil (reparse-symbol indented_block_body) [13708 13731])
                            ("self" variable nil (reparse-symbol indented_block_body) [13740 13763])
                            ("self" code nil (reparse-symbol indented_block_body) [13773 13802])
                            ("self" code nil (reparse-symbol indented_block_body) [13811 13840])
                            ("self" code nil (reparse-symbol indented_block_body) [13849 13878])
                            ("self" variable nil (reparse-symbol indented_block_body) [13888 13906])
                            ("self" code nil (reparse-symbol indented_block_body) [13915 13936])
                            ("self" variable nil (reparse-symbol indented_block_body) [13945 13990])
                            ("self" variable nil (reparse-symbol indented_block_body) [14000 14022])
                            ("self" variable nil (reparse-symbol indented_block_body) [14031 14054])
                            ("self" variable nil (reparse-symbol indented_block_body) [14063 14087])
                            ("self" code nil (reparse-symbol indented_block_body) [14097 14126])
                            ("self" code nil (reparse-symbol indented_block_body) [14135 14168])
                            ("self" code nil (reparse-symbol indented_block_body) [14177 14208])
                            ("self" variable nil (reparse-symbol indented_block_body) [14218 14246])
                            ("self" variable nil (reparse-symbol indented_block_body) [14255 14283])
                            ("self" variable nil (reparse-symbol indented_block_body) [14292 14320])
                            ("self" variable nil (reparse-symbol indented_block_body) [14329 14360])
                            ("self" code nil (reparse-symbol indented_block_body) [14370 14411])
                            ("self" code nil (reparse-symbol indented_block_body) [14420 14467])
                            ("self" code nil (reparse-symbol indented_block_body) [14476 14517])
                            ("self" code nil (reparse-symbol indented_block_body) [14526 14567])
                            ("self" variable nil (reparse-symbol indented_block_body) [14577 14603])
                            ("self" code nil (reparse-symbol indented_block_body) [14734 14753])
                            ("self" variable nil (reparse-symbol indented_block_body) [14762 14790])
                            ("self" variable nil (reparse-symbol indented_block_body) [14799 14818])
                            ("if" code nil (reparse-symbol indented_block_body) [14827 14899])
                            ("self" variable nil (reparse-symbol indented_block_body) [14908 14936])
                            ("self" variable nil (reparse-symbol indented_block_body) [14945 14973])
                            ("self" variable nil (reparse-symbol indented_block_body) [14982 15003])
                            ("self" variable nil (reparse-symbol indented_block_body) [15012 15033])
                            ("self" variable nil (reparse-symbol indented_block_body) [15042 15056])
                            ("self" variable nil (reparse-symbol indented_block_body) [15065 15079])
                            ("self" variable nil (reparse-symbol indented_block_body) [15088 15103])
                            ("self" variable nil (reparse-symbol indented_block_body) [15112 15129])
                            ("self" variable nil (reparse-symbol indented_block_body) [15138 15167])
                            ("self" variable nil (reparse-symbol indented_block_body) [15176 15198])
                            ("self" variable nil (reparse-symbol indented_block_body) [15207 15228])
                            ("self" code nil (reparse-symbol indented_block_body) [15278 15305]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10186 10190])
                            ("xdata" variable nil (reparse-symbol function_parameters) [10192 10197])
                            ("ydata" variable nil (reparse-symbol function_parameters) [10199 10204])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [10223 10232])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [10283 10292])
                            ("color" variable nil (reparse-symbol function_parameters) [10316 10321])
                            ("marker" variable nil (reparse-symbol function_parameters) [10345 10351])
                            ("markersize" variable nil (reparse-symbol function_parameters) [10375 10385])
                            ("markeredgewidth" variable nil (reparse-symbol function_parameters) [10409 10424])
                            ("markeredgecolor" variable nil (reparse-symbol function_parameters) [10448 10463])
                            ("markerfacecolor" variable nil (reparse-symbol function_parameters) [10487 10502])
                            ("markerfacecoloralt" variable nil (reparse-symbol function_parameters) [10526 10544])
                            ("fillstyle" variable nil (reparse-symbol function_parameters) [10570 10579])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [10603 10614])
                            ("dash_capstyle" variable nil (reparse-symbol function_parameters) [10638 10651])
                            ("solid_capstyle" variable nil (reparse-symbol function_parameters) [10675 10689])
                            ("dash_joinstyle" variable nil (reparse-symbol function_parameters) [10713 10727])
                            ("solid_joinstyle" variable nil (reparse-symbol function_parameters) [10751 10766])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [10790 10800])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [10821 10830])
                            ("markevery" variable nil (reparse-symbol function_parameters) [10854 10863])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10887 10895]))                          
                        :documentation "
        Create a :class:`~matplotlib.lines.Line2D` instance with *x*
        and *y* data in sequences *xdata*, *ydata*.

        The kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        See :meth:`set_linestyle` for a decription of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10173 15306])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15324 15328])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [15330 15340]))                          
                        :documentation "
        Test whether the mouse event occurred on the line.  The pick
        radius determines the precision of the location test (usually
        within five points of the value).  Use
        :meth:`~matplotlib.lines.Line2D.get_pickradius` or
        :meth:`~matplotlib.lines.Line2D.set_pickradius` to view or
        modify it.

        Returns *True* if any values are within the radius along with
        ``{'ind': pointlist}``, where *pointlist* is the set of points
        within the radius.

        TODO: sort returned indices by distance
        ")
                        (reparse-symbol indented_block_body) [15311 17870])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17894 17898]))                          
                        :documentation "return the pick radius used for containment tests")
                        (reparse-symbol indented_block_body) [17875 17996])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18020 18024])
                            ("d" variable nil (reparse-symbol function_parameters) [18026 18027]))                          
                        :documentation "Set the pick radius used for containment tests.

        .. ACCEPTS: float distance in points

        Parameters
        ----------
        d : float
            Pick radius, in points.
        ")
                        (reparse-symbol indented_block_body) [18001 18268])
                    ("get_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18291 18295]))                          
                        :documentation "
        return the marker fillstyle
        ")
                        (reparse-symbol indented_block_body) [18273 18402])
                    ("set_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18425 18429])
                            ("fs" variable nil (reparse-symbol function_parameters) [18431 18433]))                          
                        :documentation "
        Set the marker fill style; 'full' means fill the whole marker.
        'none' means no filling; other options are for half-filled markers.

        ACCEPTS: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']
        ")
                        (reparse-symbol indented_block_body) [18407 18746])
                    ("set_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18769 18773])
                            ("every" variable nil (reparse-symbol function_parameters) [18775 18780]))                          
                        :documentation "Set the markevery property to subsample the plot when using markers.

        e.g., if `every=5`, every 5-th marker will be plotted.

        ACCEPTS: [None | int | length-2 tuple of int | slice |
        list/array of int | float | length-2 tuple of float]

        Parameters
        ----------
        every: None | int | length-2 tuple of int | slice | list/array of int \\
| float | length-2 tuple of float
            Which markers to plot.

            - every=None, every point will be plotted.
            - every=N, every N-th marker will be plotted starting with
              marker 0.
            - every=(start, N), every N-th marker, starting at point
              start, will be plotted.
            - every=slice(start, end, N), every N-th marker, starting at
              point start, upto but not including point end, will be plotted.
            - every=[i, j, m, n], only markers at points i, j, m, and n
              will be plotted.
            - every=0.1, (i.e. a float) then markers will be spaced at
              approximately equal distances along the line; the distance
              along the line between markers is determined by multiplying the
              display-coordinate distance of the axes bounding-box diagonal
              by the value of every.
            - every=(0.5, 0.1) (i.e. a length-2 tuple of float), the
              same functionality as every=0.1 is exhibited but the first
              marker will be 0.5 multiplied by the
              display-cordinate-diagonal-distance along the line.

        Notes
        -----
        Setting the markevery property will only show markers at actual data
        points.  When using float arguments to set the markevery property
        on irregularly spaced data, the markers will likely not appear evenly
        spaced because the actual data points do not coincide with the
        theoretical spacing between markers.

        When using a start offset to specify the first marker, the offset will
        be from the first data point which may be different from the first
        the visible data point if the plot is zoomed in.

        If zooming in on a plot when using float arguments then the actual
        data points that have markers will change because the distance between
        markers is always determined from the display-coordinates
        axes-bounding-box-diagonal regardless of the actual axes data limits.

        ")
                        (reparse-symbol indented_block_body) [18751 21343])
                    ("get_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21366 21370]))                          
                        :documentation "return the markevery setting")
                        (reparse-symbol indented_block_body) [21348 21447])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21467 21471])
                            ("p" variable nil (reparse-symbol function_parameters) [21473 21474]))                          
                        :documentation "Sets the event picker details for the line.

        ACCEPTS: float distance in points or callable pick function
        ``fn(artist, event)``
        ")
                        (reparse-symbol indented_block_body) [21452 21769])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21796 21800])
                            ("renderer" variable nil (reparse-symbol function_parameters) [21802 21810]))                          )
                        (reparse-symbol indented_block_body) [21774 22214])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22252 22256])
                            ("ax" variable nil (reparse-symbol function_parameters) [22258 22260]))                          
                        :decorators 
                          ( ("Artist.axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22219 22787])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22805 22809])
                            ("args" variable nil (reparse-symbol function_parameters) [22811 22816]))                          
                        :documentation "
        Set the x and y data

        ACCEPTS: 2D array (rows are x, y) or two 1D arrays
        ")
                        (reparse-symbol indented_block_body) [22792 23077])
                    ("recache_always" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23101 23105]))                          )
                        (reparse-symbol indented_block_body) [23082 23142])
                    ("recache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23159 23163])
                            ("always" variable nil (reparse-symbol function_parameters) [23165 23171]))                          )
                        (reparse-symbol indented_block_body) [23147 24771])
                    ("_transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24796 24800])
                            ("subslice" variable nil (reparse-symbol function_parameters) [24802 24810]))                          
                        :documentation "
        Puts a TransformedPath instance at self._transformed_path;
        all invalidation of the transform is then handled by the
        TransformedPath instance.
        ")
                        (reparse-symbol indented_block_body) [24776 25427])
                    ("_get_transformed_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25458 25462]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.TransformedPath` instance
        of this line.
        ")
                        (reparse-symbol indented_block_body) [25432 25703])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25726 25730])
                            ("t" variable nil (reparse-symbol function_parameters) [25732 25733]))                          
                        :documentation "
        set the Transformation instance used by this artist

        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [25708 26014])
                    ("_is_sorted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26034 26038])
                            ("x" variable nil (reparse-symbol function_parameters) [26040 26041]))                          
                        :documentation "return True if x is sorted in ascending order")
                        (reparse-symbol indented_block_body) [26019 26199])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26238 26242])
                            ("renderer" variable nil (reparse-symbol function_parameters) [26244 26252]))                          
                        :documentation "draw the Line with `renderer` unless visibility is False")
                        (reparse-symbol indented_block_body) [26204 31447])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31472 31476]))                          )
                        (reparse-symbol indented_block_body) [31452 31512])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31531 31535]))                          )
                        (reparse-symbol indented_block_body) [31517 31565])
                    ("get_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31588 31592]))                          )
                        (reparse-symbol indented_block_body) [31570 31626])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31649 31653]))                          )
                        (reparse-symbol indented_block_body) [31631 31687])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31710 31714]))                          )
                        (reparse-symbol indented_block_body) [31692 31748])
                    ("get_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31768 31772]))                          )
                        (reparse-symbol indented_block_body) [31753 31816])
                    ("get_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31845 31849]))                          )
                        (reparse-symbol indented_block_body) [31821 32310])
                    ("get_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32339 32343]))                          )
                        (reparse-symbol indented_block_body) [32315 32383])
                    ("_get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32413 32417])
                            ("alt" variable nil (reparse-symbol function_parameters) [32419 32422]))                          )
                        (reparse-symbol indented_block_body) [32388 32781])
                    ("get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32810 32814]))                          )
                        (reparse-symbol indented_block_body) [32786 32869])
                    ("get_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32901 32905]))                          )
                        (reparse-symbol indented_block_body) [32874 32959])
                    ("get_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32983 32987]))                          )
                        (reparse-symbol indented_block_body) [32964 33022])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33040 33044])
                            ("orig" variable nil (reparse-symbol function_parameters) [33046 33050]))                          
                        :documentation "
        Return the xdata, ydata.

        If *orig* is *True*, return the original data.
        ")
                        (reparse-symbol indented_block_body) [33027 33239])
                    ("get_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33258 33262])
                            ("orig" variable nil (reparse-symbol function_parameters) [33264 33268]))                          
                        :documentation "
        Return the xdata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [33244 33540])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33559 33563])
                            ("orig" variable nil (reparse-symbol function_parameters) [33565 33569]))                          
                        :documentation "
        Return the ydata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [33545 33841])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33859 33863]))                          
                        :documentation "
        Return the :class:`~matplotlib.path.Path` object associated
        with this line.
        ")
                        (reparse-symbol indented_block_body) [33846 34080])
                    ("get_xydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34100 34104]))                          
                        :documentation "
        Return the *xy* data as a Nx2 numpy array.
        ")
                        (reparse-symbol indented_block_body) [34085 34278])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34303 34307])
                            ("b" variable nil (reparse-symbol function_parameters) [34309 34310]))                          
                        :documentation "
        Set whether to use antialiased rendering.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        ")
                        (reparse-symbol indented_block_body) [34283 34567])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34586 34590])
                            ("color" variable nil (reparse-symbol function_parameters) [34592 34597]))                          
                        :documentation "
        Set the color of the line

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [34572 34751])
                    ("set_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34774 34778])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [34780 34789]))                          
                        :documentation "
        Set the drawstyle of the plot

        'default' connects the points with lines. The steps variants
        produce step-plots. 'steps' is equivalent to 'steps-pre' and
        is maintained for backward-compatibility.

        ACCEPTS: ['default' | 'steps' | 'steps-pre' | 'steps-mid' |
                  'steps-post']
        ")
                        (reparse-symbol indented_block_body) [34756 35530])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35553 35557])
                            ("w" variable nil (reparse-symbol function_parameters) [35559 35560]))                          
                        :documentation "
        Set the line width in points

        ACCEPTS: float value in points
        ")
                        (reparse-symbol indented_block_body) [35535 35940])
                    ("_split_drawstyle_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35976 35980])
                            ("ls" variable nil (reparse-symbol function_parameters) [35982 35984]))                          )
                        (reparse-symbol indented_block_body) [35945 36828])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36851 36855])
                            ("ls" variable nil (reparse-symbol function_parameters) [36857 36859]))                          
                        :documentation "
        Set the linestyle of the line (also accepts drawstyles,
        e.g., ``'steps--'``)


        ===========================   =================
        linestyle                     description
        ===========================   =================
        ``'-'`` or ``'solid'``        solid line
        ``'--'`` or  ``'dashed'``     dashed line
        ``'-.'`` or  ``'dashdot'``    dash-dotted line
        ``':'`` or ``'dotted'``       dotted line
        ``'None'``                    draw nothing
        ``' '``                       draw nothing
        ``''``                        draw nothing
        ===========================   =================

        'steps' is equivalent to 'steps-pre' and is maintained for
        backward-compatibility.

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq),

        where ``onoffseq`` is an even length tuple of on and off ink
        in points.


        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
                   (offset, on-off-dash-seq) |
                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
                   ``' '`` | ``''``]

        .. seealso::

            :meth:`set_drawstyle`
               To set the drawing style (stepping) of the plot.

        Parameters
        ----------
        ls : { ``'-'``,  ``'--'``, ``'-.'``, ``':'``} and more see description
            The line style.
        ")
                        (reparse-symbol indented_block_body) [36833 39350])
                    ("set_marker" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39400 39404])
                            ("marker" variable nil (reparse-symbol function_parameters) [39406 39412]))                          
                        :documentation "
        Set the line marker

        ACCEPTS: :mod:`A valid marker style <matplotlib.markers>`

        Parameters
        ----------

        marker: marker style
            See `~matplotlib.markers` for full description of possible
            argument

        ")
                        (reparse-symbol indented_block_body) [39355 39762])
                    ("set_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39791 39795])
                            ("ec" variable nil (reparse-symbol function_parameters) [39797 39799]))                          
                        :documentation "
        Set the marker edge color

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [39767 40105])
                    ("set_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40134 40138])
                            ("ew" variable nil (reparse-symbol function_parameters) [40140 40142]))                          
                        :documentation "
        Set the marker edge width in points

        ACCEPTS: float value in points
        ")
                        (reparse-symbol indented_block_body) [40110 40432])
                    ("set_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40461 40465])
                            ("fc" variable nil (reparse-symbol function_parameters) [40467 40469]))                          
                        :documentation "
        Set the marker face color.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [40437 40730])
                    ("set_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40762 40766])
                            ("fc" variable nil (reparse-symbol function_parameters) [40768 40770]))                          
                        :documentation "
        Set the alternate marker face color.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [40735 41047])
                    ("set_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41071 41075])
                            ("sz" variable nil (reparse-symbol function_parameters) [41077 41079]))                          
                        :documentation "
        Set the marker size in points

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [41052 41286])
                    ("set_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41305 41309])
                            ("x" variable nil (reparse-symbol function_parameters) [41311 41312]))                          
                        :documentation "
        Set the data np.array for x

        ACCEPTS: 1D array
        ")
                        (reparse-symbol indented_block_body) [41291 41482])
                    ("set_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41501 41505])
                            ("y" variable nil (reparse-symbol function_parameters) [41507 41508]))                          
                        :documentation "
        Set the data np.array for y

        ACCEPTS: 1D array
        ")
                        (reparse-symbol indented_block_body) [41487 41678])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41698 41702])
                            ("seq" variable nil (reparse-symbol function_parameters) [41704 41707]))                          
                        :documentation "
        Set the dash sequence, sequence of dashes with on off ink in
        points.  If seq is empty or if seq = (None, None), the
        linestyle will be set to solid.

        ACCEPTS: sequence of on/off ink in points
        ")
                        (reparse-symbol indented_block_body) [41683 42097])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42118 42122])
                            ("other" variable nil (reparse-symbol function_parameters) [42124 42129]))                          
                        :documentation "copy properties from other to self")
                        (reparse-symbol indented_block_body) [42102 43213])
                    ("_get_rgba_face" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43237 43241])
                            ("alt" variable nil (reparse-symbol function_parameters) [43243 43246]))                          )
                        (reparse-symbol indented_block_body) [43218 43335])
                    ("_get_rgba_ln_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43363 43367])
                            ("alt" variable nil (reparse-symbol function_parameters) [43369 43372]))                          )
                        (reparse-symbol indented_block_body) [43340 43438])
                    ("set_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43477 43481])
                            ("val" variable nil (reparse-symbol function_parameters) [43483 43486]))                          )
                        (reparse-symbol indented_block_body) [43466 43559])
                    ("set_c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43574 43578])
                            ("val" variable nil (reparse-symbol function_parameters) [43580 43583]))                          )
                        (reparse-symbol indented_block_body) [43564 43644])
                    ("set_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43660 43664])
                            ("val" variable nil (reparse-symbol function_parameters) [43666 43669]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [43649 43742])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43758 43762])
                            ("val" variable nil (reparse-symbol function_parameters) [43764 43767]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [43747 43840])
                    ("set_mec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43857 43861])
                            ("val" variable nil (reparse-symbol function_parameters) [43863 43866]))                          
                        :documentation "alias for set_markeredgecolor")
                        (reparse-symbol indented_block_body) [43845 43951])
                    ("set_mew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43968 43972])
                            ("val" variable nil (reparse-symbol function_parameters) [43974 43977]))                          
                        :documentation "alias for set_markeredgewidth")
                        (reparse-symbol indented_block_body) [43956 44062])
                    ("set_mfc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44079 44083])
                            ("val" variable nil (reparse-symbol function_parameters) [44085 44088]))                          
                        :documentation "alias for set_markerfacecolor")
                        (reparse-symbol indented_block_body) [44067 44173])
                    ("set_mfcalt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44193 44197])
                            ("val" variable nil (reparse-symbol function_parameters) [44199 44202]))                          
                        :documentation "alias for set_markerfacecoloralt")
                        (reparse-symbol indented_block_body) [44178 44293])
                    ("set_ms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44309 44313])
                            ("val" variable nil (reparse-symbol function_parameters) [44315 44318]))                          
                        :documentation "alias for set_markersize")
                        (reparse-symbol indented_block_body) [44298 44393])
                    ("get_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44409 44413]))                          
                        :documentation "alias for get_antialiased")
                        (reparse-symbol indented_block_body) [44398 44494])
                    ("get_c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44509 44513]))                          
                        :documentation "alias for get_color")
                        (reparse-symbol indented_block_body) [44499 44582])
                    ("get_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44598 44602]))                          
                        :documentation "alias for get_linestyle")
                        (reparse-symbol indented_block_body) [44587 44679])
                    ("get_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44695 44699]))                          
                        :documentation "alias for get_linewidth")
                        (reparse-symbol indented_block_body) [44684 44776])
                    ("get_mec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44793 44797]))                          
                        :documentation "alias for get_markeredgecolor")
                        (reparse-symbol indented_block_body) [44781 44886])
                    ("get_mew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44903 44907]))                          
                        :documentation "alias for get_markeredgewidth")
                        (reparse-symbol indented_block_body) [44891 44996])
                    ("get_mfc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45013 45017]))                          
                        :documentation "alias for get_markerfacecolor")
                        (reparse-symbol indented_block_body) [45001 45106])
                    ("get_mfcalt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45126 45130])
                            ("alt" variable nil (reparse-symbol function_parameters) [45132 45135]))                          
                        :documentation "alias for get_markerfacecoloralt")
                        (reparse-symbol indented_block_body) [45111 45236])
                    ("get_ms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45252 45256]))                          
                        :documentation "alias for get_markersize")
                        (reparse-symbol indented_block_body) [45241 45335])
                    ("set_dash_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45363 45367])
                            ("s" variable nil (reparse-symbol function_parameters) [45369 45370]))                          
                        :documentation "
        Set the join style for dashed linestyles
        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [45340 45800])
                    ("set_solid_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45829 45833])
                            ("s" variable nil (reparse-symbol function_parameters) [45835 45836]))                          
                        :documentation "
        Set the join style for solid linestyles
        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [45805 46269])
                    ("get_dash_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46297 46301]))                          
                        :documentation "
        Get the join style for dashed linestyles
        ")
                        (reparse-symbol indented_block_body) [46274 46412])
                    ("get_solid_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46441 46445]))                          
                        :documentation "
        Get the join style for solid linestyles
        ")
                        (reparse-symbol indented_block_body) [46417 46556])
                    ("set_dash_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46583 46587])
                            ("s" variable nil (reparse-symbol function_parameters) [46589 46590]))                          
                        :documentation "
        Set the cap style for dashed linestyles

        ACCEPTS: ['butt' | 'round' | 'projecting']
        ")
                        (reparse-symbol indented_block_body) [46561 47018])
                    ("set_solid_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47046 47050])
                            ("s" variable nil (reparse-symbol function_parameters) [47052 47053]))                          
                        :documentation "
        Set the cap style for solid linestyles

        ACCEPTS: ['butt' | 'round' |  'projecting']
        ")
                        (reparse-symbol indented_block_body) [47023 47484])
                    ("get_dash_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47511 47515]))                          
                        :documentation "
        Get the cap style for dashed linestyles
        ")
                        (reparse-symbol indented_block_body) [47489 47624])
                    ("get_solid_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47652 47656]))                          
                        :documentation "
        Get the cap style for solid linestyles
        ")
                        (reparse-symbol indented_block_body) [47629 47765])
                    ("is_dashed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47784 47788]))                          )
                        (reparse-symbol indented_block_body) [47770 47886]))                  
                :type "class")
                nil [8240 47886])
            ("VertexSelector" type
               (:documentation "
    Manage the callbacks to maintain a list of selected vertices for
    :class:`matplotlib.lines.Line2D`. Derived classes should override
    :meth:`~matplotlib.lines.VertexSelector.process_selected` to do
    something with the picks.

    Here is an example which highlights the selected verts with red
    circles::

        import numpy as np
        import matplotlib.pyplot as plt
        import matplotlib.lines as lines

        class HighlightSelected(lines.VertexSelector):
            def __init__(self, line, fmt='ro', **kwargs):
                lines.VertexSelector.__init__(self, line)
                self.markers, = self.axes.plot([], [], fmt, **kwargs)

            def process_selected(self, ind, xs, ys):
                self.markers.set_data(xs, ys)
                self.canvas.draw()

        fig = plt.figure()
        ax = fig.add_subplot(111)
        x, y = np.random.rand(2, 30)
        line, = ax.plot(x, y, 'bs-', picker=5)

        selector = HighlightSelected(line)
        plt.show()

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the class with a :class:`matplotlib.lines.Line2D`
        instance.  The line should already be added to some
        :class:`matplotlib.axes.Axes` instance and should have the
        picker property set.
        \"\"\"" code nil (reparse-symbol indented_block_body) [48988 49228])
                            ("if" code nil (reparse-symbol indented_block_body) [49237 49333])
                            ("if" code nil (reparse-symbol indented_block_body) [49342 49491])
                            ("self" variable nil (reparse-symbol indented_block_body) [49500 49521])
                            ("self" variable nil (reparse-symbol indented_block_body) [49530 49546])
                            ("self" variable nil (reparse-symbol indented_block_body) [49555 49592])
                            ("self" variable nil (reparse-symbol indented_block_body) [49601 49662])
                            ("self" variable nil (reparse-symbol indented_block_body) [49672 49688]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48967 48971])
                            ("line" variable nil (reparse-symbol function_parameters) [48973 48977]))                          
                        :documentation "
        Initialize the class with a :class:`matplotlib.lines.Line2D`
        instance.  The line should already be added to some
        :class:`matplotlib.axes.Axes` instance and should have the
        picker property set.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48954 49689])
                    ("process_selected" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49715 49719])
                            ("ind" variable nil (reparse-symbol function_parameters) [49721 49724])
                            ("xs" variable nil (reparse-symbol function_parameters) [49726 49728])
                            ("ys" variable nil (reparse-symbol function_parameters) [49730 49732]))                          
                        :documentation "
        Default \"do nothing\" implementation of the
        :meth:`process_selected` method.

        *ind* are the indices of the selected vertices.  *xs* and *ys*
        are the coordinates of the selected vertices.
        ")
                        (reparse-symbol indented_block_body) [49694 49990])
                    ("onpick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50006 50010])
                            ("event" variable nil (reparse-symbol function_parameters) [50012 50017]))                          
                        :documentation "When the line is picked, update the set of selected indices.")
                        (reparse-symbol indented_block_body) [49995 50325]))                  
                :type "class")
                nil [47888 50325])
            ("lineStyles" variable nil nil [50327 50358])
            ("lineMarkers" variable nil nil [50359 50392])
            ("drawStyles" variable nil nil [50393 50423])
            ("fillStyles" variable nil nil [50424 50459])
            ("docstring" code nil nil [50461 50514])
            ("docstring" code nil nil [50624 50665]))          
      :file "lines.py"
      :pointmax 50666
      :fsize 50665
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax '((FROM 778 . 782) (PERIOD 783 . 784) (FROM 758 . 762) (PERIOD 763 . 764) (FROM 608 . 612) (PERIOD 613 . 614) (FROM 585 . 589) (PERIOD 590 . 591) (FROM 552 . 556) (PERIOD 557 . 558) (FROM 434 . 438) (PERIOD 439 . 440) (FROM 386 . 390) (PERIOD 391 . 392) (FROM 318 . 322) (PERIOD 323 . 324)))
    (semanticdb-table "semanticdb-table-1536ec4"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for including text in a figure.
\"\"\"" code nil nil [1 48])
            ("__future__" include nil nil [49 113])
            ("six" include nil nil [115 125])
            ("six.moves" include nil nil [126 151])
            ("contextlib" include nil nil [153 170])
            ("logging" include nil nil [171 185])
            ("math" include nil nil [186 197])
            ("warnings" include nil nil [198 213])
            ("weakref" include nil nil [214 228])
            ("numpy" include nil nil [230 248])
            ("rcParams" include nil nil [257 298])
            ("docstring" include nil nil [257 298])
            ("cbook" include nil nil [257 298])
            ("artist" include nil nil [257 298])
            ("Artist" include nil nil [312 325])
            ("FontProperties" include nil nil [345 366])
            ("Line2D" include nil nil [379 392])
            ("Rectangle" include nil nil [407 456])
            ("FancyBboxPatch" include nil nil [407 456])
            ("FancyArrowPatch" include nil nil [407 456])
            ("TextPath" include nil nil [472 487])
            ("" code nil nil [547 625])
            ("_log" variable nil nil [628 662])
            ("_process_text_args" function (:arguments 
              ( ("override" variable nil (reparse-symbol function_parameters) [688 696])
                ("fontdict" variable nil (reparse-symbol function_parameters) [698 706])
                ("kwargs" variable nil (reparse-symbol function_parameters) [713 721]))              ) nil [665 913])
            ("_wrap_text" function
               (:documentation "Temporarily inserts newlines to the text if the wrap option is enabled.
    "
                :arguments 
                  ( ("textobj" variable nil (reparse-symbol function_parameters) [957 964]))                  
                :decorators 
                  ( ("contextlib.contextmanager" function (:type "decorator") nil nil))                  )
                nil [915 1304])
            ("get_rotation" function
               (:documentation "
    Return the text angle as float. The returned
    angle is between 0 and 360 deg.

    *rotation* may be 'horizontal', 'vertical', or a numeric value in degrees.
    "
                :arguments 
                  ( ("rotation" variable nil (reparse-symbol function_parameters) [1377 1385]))                  )
                nil [1360 2106])
            ("_get_textbox" function
               (:documentation "
    Calculate the bounding box of the text. Unlike
    :meth:`matplotlib.text.Text.get_extents` method, The bbox size of
    the text before the rotation is calculated.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [2125 2129])
                    ("renderer" variable nil (reparse-symbol function_parameters) [2131 2139]))                  )
                nil [2108 3349])
            ("Text" type
               (:documentation "
    Handle storing and drawing of text in window or data coordinates.
    "
                :superclasses ("Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [3461 3471])
                    ("_cached" variable nil (reparse-symbol indented_block_body) [3476 3503])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3522 3526]))                          )
                        (reparse-symbol indented_block_body) [3509 3600])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
        with string *text*.

        Valid kwargs are
        %(Text)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [4187 4342])
                            ("Artist" code nil (reparse-symbol indented_block_body) [4352 4373])
                            ("self, self" code nil (reparse-symbol indented_block_body) [4382 4405])
                            ("if" code nil (reparse-symbol indented_block_body) [4415 4476])
                            ("if" code nil (reparse-symbol indented_block_body) [4484 4676])
                            ("self" code nil (reparse-symbol indented_block_body) [4685 4704])
                            ("self" code nil (reparse-symbol indented_block_body) [4713 4734])
                            ("self" code nil (reparse-symbol indented_block_body) [4743 4766])
                            ("self" code nil (reparse-symbol indented_block_body) [4775 4794])
                            ("self" variable nil (reparse-symbol indented_block_body) [4803 4846])
                            ("self" variable nil (reparse-symbol indented_block_body) [4855 4902])
                            ("self" variable nil (reparse-symbol indented_block_body) [4911 4948])
                            ("self" variable nil (reparse-symbol indented_block_body) [4957 4982])
                            ("self" variable nil (reparse-symbol indented_block_body) [4991 5028])
                            ("self" variable nil (reparse-symbol indented_block_body) [5037 5060])
                            ("self" variable nil (reparse-symbol indented_block_body) [5098 5119])
                            ("if" code nil (reparse-symbol indented_block_body) [5128 5211])
                            ("self" variable nil (reparse-symbol indented_block_body) [5219 5250])
                            ("self" code nil (reparse-symbol indented_block_body) [5259 5296])
                            ("self" code nil (reparse-symbol indented_block_body) [5305 5324]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3618 3622])
                            ("x" variable nil (reparse-symbol function_parameters) [3641 3642])
                            ("y" variable nil (reparse-symbol function_parameters) [3646 3647])
                            ("text" variable nil (reparse-symbol function_parameters) [3651 3655])
                            ("color" variable nil (reparse-symbol function_parameters) [3677 3682])
                            ("verticalalignment" variable nil (reparse-symbol function_parameters) [3740 3757])
                            ("horizontalalignment" variable nil (reparse-symbol function_parameters) [3787 3806])
                            ("multialignment" variable nil (reparse-symbol function_parameters) [3832 3846])
                            ("fontproperties" variable nil (reparse-symbol function_parameters) [3870 3884])
                            ("rotation" variable nil (reparse-symbol function_parameters) [3940 3948])
                            ("linespacing" variable nil (reparse-symbol function_parameters) [3972 3983])
                            ("rotation_mode" variable nil (reparse-symbol function_parameters) [4007 4020])
                            ("usetex" variable nil (reparse-symbol function_parameters) [4044 4050])
                            ("wrap" variable nil (reparse-symbol function_parameters) [4121 4125])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4150 4158]))                          
                        :documentation "
        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
        with string *text*.

        Valid kwargs are
        %(Text)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3605 5325])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5341 5345])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5347 5353]))                          
                        :documentation "
        Update properties from a dictionary.
        ")
                        (reparse-symbol indented_block_body) [5330 5711])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5733 5737]))                          )
                        (reparse-symbol indented_block_body) [5716 5885])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5903 5907])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [5909 5919]))                          
                        :documentation "Test whether the mouse event occurred in the patch.

        In the case of text, a hit is true anywhere in the
        axis-aligned bounding-box containing the text.

        Returns True or False.
        ")
                        (reparse-symbol indented_block_body) [5890 6884])
                    ("_get_xy_display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6909 6913]))                          )
                        (reparse-symbol indented_block_body) [6889 7099])
                    ("_get_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7128 7132]))                          )
                        (reparse-symbol indented_block_body) [7104 7279])
                    ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7301 7305]))                          )
                        (reparse-symbol indented_block_body) [7284 7434])
                    ("set_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7461 7465])
                            ("m" variable nil (reparse-symbol function_parameters) [7467 7468]))                          
                        :documentation "
        Set text rotation mode.

        .. ACCEPTS: [ None | \"default\" | \"anchor\" ]

        Parameters
        ----------
        m : ``None`` or ``\"default\"`` or ``\"anchor\"``
            If ``None`` or ``\"default\"``, the text will be first rotated, then
            aligned according to their horizontal and vertical alignments.  If
            ``\"anchor\"``, then alignment occurs before rotation.
        ")
                        (reparse-symbol indented_block_body) [7439 8093])
                    ("get_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8120 8124]))                          )
                        (reparse-symbol indented_block_body) [8098 8195])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8216 8220])
                            ("other" variable nil (reparse-symbol function_parameters) [8222 8227]))                          )
                        (reparse-symbol indented_block_body) [8200 8736])
                    ("_get_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8757 8761])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8763 8771]))                          
                        :documentation "
        return the extent (bbox) of the text together with
        multiple-alignment information. Note that it returns an extent
        of a rotated text when necessary.
        ")
                        (reparse-symbol indented_block_body) [8741 14134])
                    ("set_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14152 14156])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [14158 14167]))                          
                        :documentation "
        Draw a bounding box around self.  rectprops are any settable
        properties for a FancyBboxPatch, e.g., facecolor='red', alpha=0.5.

          t.set_bbox(dict(facecolor='red', alpha=0.5))

        The default boxstyle is 'square'. The mutation
        scale of the FancyBboxPatch is set to the fontsize.

        ACCEPTS: FancyBboxPatch prop dict
        ")
                        (reparse-symbol indented_block_body) [14139 15739])
                    ("get_bbox_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15763 15767]))                          
                        :documentation "
        Return the bbox Patch object. Returns None if the
        FancyBboxPatch is not made.
        ")
                        (reparse-symbol indented_block_body) [15744 15920])
                    ("update_bbox_position_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15955 15959])
                            ("renderer" variable nil (reparse-symbol function_parameters) [15961 15969]))                          
                        :documentation "
        Update the location and the size of the bbox. This method
        should be used when the position and size of the bbox needs to
        be updated before actually drawing the bbox.
        ")
                        (reparse-symbol indented_block_body) [15925 17050])
                    ("_draw_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17070 17074])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17076 17084])
                            ("posx" variable nil (reparse-symbol function_parameters) [17086 17090])
                            ("posy" variable nil (reparse-symbol function_parameters) [17092 17096]))                          
                        :documentation " Update the location and the size of the bbox
        (FancyBboxPatch), and draw
        ")
                        (reparse-symbol indented_block_body) [17055 17686])
                    ("_update_clip_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17719 17723]))                          )
                        (reparse-symbol indented_block_body) [17691 17956])
                    ("set_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17978 17982])
                            ("clipbox" variable nil (reparse-symbol function_parameters) [17984 17991]))                          
                        :documentation "
        Set the artist's clip :class:`~matplotlib.transforms.Bbox`.

        ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance
        ")
                        (reparse-symbol indented_block_body) [17961 18238])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18261 18265])
                            ("path" variable nil (reparse-symbol function_parameters) [18267 18271])
                            ("transform" variable nil (reparse-symbol function_parameters) [18273 18282]))                          
                        :documentation "
        Set the artist's clip path, which may be:

          * a :class:`~matplotlib.patches.Patch` (or subclass) instance

          * a :class:`~matplotlib.path.Path` instance, in which case
             an optional :class:`~matplotlib.transforms.Transform`
             instance may be provided, which will be applied to the
             path before using it for clipping.

          * *None*, to remove the clipping path

        For efficiency, if the path happens to be an axis-aligned
        rectangle, this method will set the clipping box to the
        corresponding rectangle and set the clipping path to *None*.

        ACCEPTS: [ (:class:`~matplotlib.path.Path`,
        :class:`~matplotlib.transforms.Transform`) |
        :class:`~matplotlib.patches.Patch` | None ]
        ")
                        (reparse-symbol indented_block_body) [18243 19193])
                    ("set_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19214 19218])
                            ("b" variable nil (reparse-symbol function_parameters) [19220 19221]))                          
                        :documentation "
        Set whether artist uses clipping.

        When False, artists will be visible outside of the axes, which can lead
        to unexpected results.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        ")
                        (reparse-symbol indented_block_body) [19198 19567])
                    ("get_wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19585 19589]))                          
                        :documentation "Returns the wrapping state for the text.")
                        (reparse-symbol indented_block_body) [19572 19673])
                    ("set_wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19691 19695])
                            ("wrap" variable nil (reparse-symbol function_parameters) [19697 19701]))                          
                        :documentation "Sets the wrapping state for the text.

        Parameters
        ----------
        wrap : bool
            .. ACCEPTS: bool
        ")
                        (reparse-symbol indented_block_body) [19678 19879])
                    ("_get_wrap_line_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19909 19913]))                          
                        :documentation "
        Returns the maximum line width for wrapping text based on the
        current orientation.
        ")
                        (reparse-symbol indented_block_body) [19884 20774])
                    ("_get_dist_to_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20800 20804])
                            ("rotation" variable nil (reparse-symbol function_parameters) [20806 20814])
                            ("x0" variable nil (reparse-symbol function_parameters) [20816 20818])
                            ("y0" variable nil (reparse-symbol function_parameters) [20820 20822])
                            ("figure_box" variable nil (reparse-symbol function_parameters) [20824 20834]))                          
                        :documentation "
        Returns the distance from the given points, to the boundaries
        of a rotated box in pixels.
        ")
                        (reparse-symbol indented_block_body) [20779 21702])
                    ("_get_rendered_text_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21736 21740])
                            ("text" variable nil (reparse-symbol function_parameters) [21742 21746]))                          
                        :documentation "
        Returns the width of a given text string, in pixels.
        ")
                        (reparse-symbol indented_block_body) [21707 22002])
                    ("_get_wrapped_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22029 22033]))                          
                        :documentation "
        Return a copy of the text with new lines added, so that
        the text is wrapped relative to the parent figure.
        ")
                        (reparse-symbol indented_block_body) [22007 23309])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23355 23359])
                            ("renderer" variable nil (reparse-symbol function_parameters) [23361 23369]))                          
                        :documentation "
        Draws the :class:`Text` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [23314 26019])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26038 26042]))                          )
                        (reparse-symbol indented_block_body) [26024 26111])
                    ("get_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26139 26143]))                          )
                        (reparse-symbol indented_block_body) [26116 26248])
                    ("get_font_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26277 26281]))                          )
                        (reparse-symbol indented_block_body) [26253 26364])
                    ("get_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26384 26388]))                          )
                        (reparse-symbol indented_block_body) [26369 26504])
                    ("get_fontfamily" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26528 26532]))                          )
                        (reparse-symbol indented_block_body) [26509 26599])
                    ("get_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26617 26621]))                          )
                        (reparse-symbol indented_block_body) [26604 26712])
                    ("get_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26731 26735]))                          )
                        (reparse-symbol indented_block_body) [26717 26828])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26846 26850]))                          )
                        (reparse-symbol indented_block_body) [26833 26952])
                    ("get_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26973 26977]))                          )
                        (reparse-symbol indented_block_body) [26957 27076])
                    ("get_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27101 27105]))                          )
                        (reparse-symbol indented_block_body) [27081 27174])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27194 27198]))                          )
                        (reparse-symbol indented_block_body) [27179 27300])
                    ("get_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27322 27326]))                          )
                        (reparse-symbol indented_block_body) [27305 27389])
                    ("get_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27412 27416]))                          )
                        (reparse-symbol indented_block_body) [27394 27481])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27503 27507]))                          )
                        (reparse-symbol indented_block_body) [27486 27570])
                    ("get_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27594 27598]))                          )
                        (reparse-symbol indented_block_body) [27575 27665])
                    ("get_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27686 27690]))                          )
                        (reparse-symbol indented_block_body) [27670 27796])
                    ("get_fontstretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27821 27825]))                          )
                        (reparse-symbol indented_block_body) [27801 27894])
                    ("get_ha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27910 27914]))                          )
                        (reparse-symbol indented_block_body) [27899 28007])
                    ("get_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28040 28044]))                          
                        :documentation "
        Return the horizontal alignment as string.  Will be one of
        'left', 'center' or 'right'.
        ")
                        (reparse-symbol indented_block_body) [28012 28216])
                    ("get_unitless_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28247 28251]))                          )
                        (reparse-symbol indented_block_body) [28221 28599])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28621 28625]))                          )
                        (reparse-symbol indented_block_body) [28604 28840])
                    ("get_prop_tup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28862 28866])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28868 28876]))                          
                        :documentation "
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (e.g., layouts) and
        need to know if the text has changed.
        ")
                        (reparse-symbol indented_block_body) [28845 29561])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29579 29583]))                          )
                        (reparse-symbol indented_block_body) [29566 29645])
                    ("get_va" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29661 29665]))                          )
                        (reparse-symbol indented_block_body) [29650 29761])
                    ("get_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29792 29796]))                          
                        :documentation "
        Return the vertical alignment as string.  Will be one of
        'top', 'center', 'bottom' or 'baseline'.
        ")
                        (reparse-symbol indented_block_body) [29766 29976])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30003 30007])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30009 30017])
                            ("dpi" variable nil (reparse-symbol function_parameters) [30024 30027]))                          )
                        (reparse-symbol indented_block_body) [29981 31721])
                    ("set_backgroundcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31750 31754])
                            ("color" variable nil (reparse-symbol function_parameters) [31756 31761]))                          
                        :documentation "
        Set the background color of the text by updating the bbox.

        .. seealso::

            :meth:`set_bbox`
               To change the position of the bounding box.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [31726 32247])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32266 32270])
                            ("color" variable nil (reparse-symbol function_parameters) [32272 32277]))                          
                        :documentation "
        Set the foreground color of the text

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [32252 32601])
                    ("set_ha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32617 32621])
                            ("align" variable nil (reparse-symbol function_parameters) [32623 32628]))                          )
                        (reparse-symbol indented_block_body) [32606 32719])
                    ("set_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32752 32756])
                            ("align" variable nil (reparse-symbol function_parameters) [32758 32763]))                          
                        :documentation "
        Set the horizontal alignment to one of

        ACCEPTS: [ 'center' | 'right' | 'left' ]
        ")
                        (reparse-symbol indented_block_body) [32724 33143])
                    ("set_ma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33159 33163])
                            ("align" variable nil (reparse-symbol function_parameters) [33165 33170]))                          )
                        (reparse-symbol indented_block_body) [33148 33251])
                    ("set_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33279 33283])
                            ("align" variable nil (reparse-symbol function_parameters) [33285 33290]))                          
                        :documentation "
        Set the alignment for multiple lines layout.  The layout of the
        bounding box of all the lines is determined bu the horizontalalignment
        and verticalalignment properties, but the multiline text within that
        box can be

        ACCEPTS: ['left' | 'right' | 'center' ]
        ")
                        (reparse-symbol indented_block_body) [33256 33864])
                    ("set_linespacing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33889 33893])
                            ("spacing" variable nil (reparse-symbol function_parameters) [33895 33902]))                          
                        :documentation "
        Set the line spacing as a multiple of the font size.
        Default is 1.2.

        ACCEPTS: float (multiple of font size)
        ")
                        (reparse-symbol indented_block_body) [33869 34124])
                    ("set_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34144 34148])
                            ("fontname" variable nil (reparse-symbol function_parameters) [34150 34158]))                          
                        :documentation "
        Set the font family.  May be either a single string, or a list
        of strings in decreasing priority.  Each string may be either
        a real font name or a generic font class name.  If the latter,
        the specific font names will be looked up in the
        :file:`matplotlibrc` file.

        ACCEPTS: [FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' |
                  'monospace' ]
        ")
                        (reparse-symbol indented_block_body) [34129 34676])
                    ("set_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34697 34701])
                            ("variant" variable nil (reparse-symbol function_parameters) [34703 34710]))                          
                        :documentation "
        Set the font variant, either 'normal' or 'small-caps'.

        ACCEPTS: [ 'normal' | 'small-caps' ]
        ")
                        (reparse-symbol indented_block_body) [34681 34922])
                    ("set_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34947 34951])
                            ("variant" variable nil (reparse-symbol function_parameters) [34953 34960]))                          )
                        (reparse-symbol indented_block_body) [34927 35036])
                    ("set_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35054 35058])
                            ("fontname" variable nil (reparse-symbol function_parameters) [35060 35068]))                          
                        :documentation "alias for set_family")
                        (reparse-symbol indented_block_body) [35041 35147])
                    ("set_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35169 35173])
                            ("fontname" variable nil (reparse-symbol function_parameters) [35175 35183]))                          
                        :documentation "alias for set_family")
                        (reparse-symbol indented_block_body) [35152 35255])
                    ("set_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35274 35278])
                            ("fontstyle" variable nil (reparse-symbol function_parameters) [35280 35289]))                          
                        :documentation "
        Set the font style.

        ACCEPTS: [ 'normal' | 'italic' | 'oblique']
        ")
                        (reparse-symbol indented_block_body) [35260 35473])
                    ("set_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35496 35500])
                            ("fontstyle" variable nil (reparse-symbol function_parameters) [35502 35511]))                          )
                        (reparse-symbol indented_block_body) [35478 35585])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35603 35607])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [35609 35617]))                          
                        :documentation "
        Set the font size.  May be either a size string, relative to
        the default font size, or an absolute font size in points.

        ACCEPTS: [size in points | 'xx-small' | 'x-small' | 'small' |
                  'medium' | 'large' | 'x-large' | 'xx-large' ]
        ")
                        (reparse-symbol indented_block_body) [35590 35989])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36011 36015])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [36017 36025]))                          )
                        (reparse-symbol indented_block_body) [35994 36096])
                    ("set_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36116 36120])
                            ("weight" variable nil (reparse-symbol function_parameters) [36122 36128]))                          
                        :documentation "
        Set the font weight.

        ACCEPTS: [a numeric value in range 0-1000 | 'ultralight' | 'light' |
                  'normal' | 'regular' | 'book' | 'medium' | 'roman' |
                  'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' |
                  'extra bold' | 'black' ]
        ")
                        (reparse-symbol indented_block_body) [36101 36522])
                    ("set_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36546 36550])
                            ("weight" variable nil (reparse-symbol function_parameters) [36552 36558]))                          )
                        (reparse-symbol indented_block_body) [36527 36631])
                    ("set_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36652 36656])
                            ("stretch" variable nil (reparse-symbol function_parameters) [36658 36665]))                          
                        :documentation "
        Set the font stretch (horizontal condensation or expansion).

        ACCEPTS: [a numeric value in range 0-1000 | 'ultra-condensed' |
                  'extra-condensed' | 'condensed' | 'semi-condensed' |
                  'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' |
                  'ultra-expanded' ]
        ")
                        (reparse-symbol indented_block_body) [36636 37097])
                    ("set_fontstretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37122 37126])
                            ("stretch" variable nil (reparse-symbol function_parameters) [37128 37135]))                          )
                        (reparse-symbol indented_block_body) [37102 37211])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37233 37237])
                            ("xy" variable nil (reparse-symbol function_parameters) [37239 37241]))                          
                        :documentation "
        Set the (*x*, *y*) position of the text

        ACCEPTS: (x,y)
        ")
                        (reparse-symbol indented_block_body) [37216 37392])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37407 37411])
                            ("x" variable nil (reparse-symbol function_parameters) [37413 37414]))                          
                        :documentation "
        Set the *x* position of the text

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [37397 37552])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37567 37571])
                            ("y" variable nil (reparse-symbol function_parameters) [37573 37574]))                          
                        :documentation "
        Set the *y* position of the text

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [37557 37712])
                    ("set_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37734 37738])
                            ("s" variable nil (reparse-symbol function_parameters) [37740 37741]))                          
                        :documentation "
        Set the rotation of the text

        ACCEPTS: [ angle in degrees | 'vertical' | 'horizontal' ]
        ")
                        (reparse-symbol indented_block_body) [37717 37925])
                    ("set_va" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37941 37945])
                            ("align" variable nil (reparse-symbol function_parameters) [37947 37952]))                          )
                        (reparse-symbol indented_block_body) [37930 38039])
                    ("set_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38070 38074])
                            ("align" variable nil (reparse-symbol function_parameters) [38076 38081]))                          
                        :documentation "
        Set the vertical alignment

        ACCEPTS: [ 'center' | 'top' | 'bottom' | 'baseline' ]
        ")
                        (reparse-symbol indented_block_body) [38044 38471])
                    ("set_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38489 38493])
                            ("s" variable nil (reparse-symbol function_parameters) [38495 38496]))                          
                        :documentation "
        Set the text string *s*

        It may contain newlines (``\\\\n``) or math in LaTeX syntax.

        ACCEPTS: string or anything printable with '%s' conversion.
        ")
                        (reparse-symbol indented_block_body) [38476 38751])
                    ("is_math_text" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("s" variable nil (reparse-symbol function_parameters) [38791 38792])
                            ("usetex" variable nil (reparse-symbol function_parameters) [38794 38800]))                          
                        :documentation "
        Returns a cleaned string and a boolean flag.
        The flag indicates if the given string *s* contains any mathtext,
        determined by counting unescaped dollar signs. If no mathtext
        is present, the cleaned string has its dollar signs unescaped.
        If usetex is on, the flag always has the value \"TeX\".
        ")
                        (reparse-symbol indented_block_body) [38756 39562])
                    ("set_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39590 39594])
                            ("fp" variable nil (reparse-symbol function_parameters) [39596 39598]))                          
                        :documentation "
        Set the font properties that control the text.  *fp* must be a
        :class:`matplotlib.font_manager.FontProperties` object.

        ACCEPTS: a :class:`matplotlib.font_manager.FontProperties` instance
        ")
                        (reparse-symbol indented_block_body) [39567 39985])
                    ("set_font_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40014 40018])
                            ("fp" variable nil (reparse-symbol function_parameters) [40020 40022]))                          )
                        (reparse-symbol indented_block_body) [39990 40100])
                    ("set_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40120 40124])
                            ("usetex" variable nil (reparse-symbol function_parameters) [40126 40132]))                          
                        :documentation "
        Parameters
        ----------
        usetex : bool or None
            Whether to render using TeX, ``None`` means to use
            :rc:`text.usetex`.

            .. ACCEPTS: bool or None
        ")
                        (reparse-symbol indented_block_body) [40105 40517])
                    ("get_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40537 40541]))                          
                        :documentation "
        Return whether this `Text` object uses TeX for rendering.

        If the user has not manually set this value, it defaults to
        :rc:`text.usetex`.
        ")
                        (reparse-symbol indented_block_body) [40522 40852]))                  
                :type "class")
                nil [3351 40852])
            ("docstring" code nil nil [40853 40902])
            ("docstring" code nil nil [40903 40942])
            ("TextWithDash" type
               (:documentation "
    This is basically a :class:`~matplotlib.text.Text` with a dash
    (drawn with a :class:`~matplotlib.lines.Line2D`) before/after
    it. It is intended to be a drop-in replacement for
    :class:`~matplotlib.text.Text`, and should behave identically to
    it when *dashlength* = 0.0.

    The dash always comes between the point specified by
    :meth:`~matplotlib.text.Text.set_position` and the text. When a
    dash exists, the text alignment arguments (*horizontalalignment*,
    *verticalalignment*) are ignored.

    *dashlength* is the length of the dash in canvas units.
    (default = 0.0).

    *dashdirection* is one of 0 or 1, where 0 draws the dash after the
    text and 1 before.  (default = 0).

    *dashrotation* specifies the rotation of the dash, and should
    generally stay *None*. In this case
    :meth:`~matplotlib.text.TextWithDash.get_dashrotation` returns
    :meth:`~matplotlib.text.Text.get_rotation`.  (i.e., the dash takes
    its rotation from the text's rotation). Because the text center is
    projected onto the dash, major deviations in the rotation cause
    what may be considered visually unappealing results.
    (default = *None*)

    *dashpad* is a padding length to add (or subtract) space
    between the text and the dash, in canvas units.
    (default = 3)

    *dashpush* \"pushes\" the dash and text away from the point
    specified by :meth:`~matplotlib.text.Text.set_position` by the
    amount in canvas units.  (default = 0)

    .. note::

        The alignment of the two objects is based on the bounding box
        of the :class:`~matplotlib.text.Text`, as obtained by
        :meth:`~matplotlib.artist.Artist.get_window_extent`.  This, in
        turn, appears to depend on the font metrics as given by the
        rendering backend. Hence the quality of the \"centering\" of the
        label text with respect to the dash varies depending on the
        backend used.

    .. note::

        I'm not sure that I got the
        :meth:`~matplotlib.text.TextWithDash.get_window_extent` right,
        or whether that's sufficient for providing the object bounding
        box.

    "
                :superclasses ("Text")
                :members 
                  ( ("__name__" variable nil (reparse-symbol indented_block_body) [43132 43157])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43175 43179]))                          )
                        (reparse-symbol indented_block_body) [43163 43261])
                    ("__init__" function
                       (:suite 
                          ( ("Text" code nil (reparse-symbol indented_block_body) [43839 44208])
                            ("self" variable nil (reparse-symbol indented_block_body) [44394 44563])
                            ("self" variable nil (reparse-symbol indented_block_body) [44573 44595])
                            ("self" variable nil (reparse-symbol indented_block_body) [44604 44626])
                            ("self" variable nil (reparse-symbol indented_block_body) [44635 44664])
                            ("self" variable nil (reparse-symbol indented_block_body) [44673 44708])
                            ("self" variable nil (reparse-symbol indented_block_body) [44717 44750])
                            ("self" variable nil (reparse-symbol indented_block_body) [44759 44782])
                            ("self" variable nil (reparse-symbol indented_block_body) [44791 44816]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43279 43283])
                            ("x" variable nil (reparse-symbol function_parameters) [43302 43303])
                            ("y" variable nil (reparse-symbol function_parameters) [43307 43308])
                            ("text" variable nil (reparse-symbol function_parameters) [43312 43316])
                            ("color" variable nil (reparse-symbol function_parameters) [43338 43343])
                            ("verticalalignment" variable nil (reparse-symbol function_parameters) [43400 43417])
                            ("horizontalalignment" variable nil (reparse-symbol function_parameters) [43445 43464])
                            ("multialignment" variable nil (reparse-symbol function_parameters) [43492 43506])
                            ("fontproperties" variable nil (reparse-symbol function_parameters) [43530 43544])
                            ("rotation" variable nil (reparse-symbol function_parameters) [43600 43608])
                            ("linespacing" variable nil (reparse-symbol function_parameters) [43632 43643])
                            ("dashlength" variable nil (reparse-symbol function_parameters) [43667 43677])
                            ("dashdirection" variable nil (reparse-symbol function_parameters) [43700 43713])
                            ("dashrotation" variable nil (reparse-symbol function_parameters) [43734 43746])
                            ("dashpad" variable nil (reparse-symbol function_parameters) [43770 43777])
                            ("dashpush" variable nil (reparse-symbol function_parameters) [43798 43806]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43266 44817])
                    ("get_unitless_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44885 44889]))                          )
                        (reparse-symbol indented_block_body) [44859 45245])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45267 45271]))                          )
                        (reparse-symbol indented_block_body) [45250 45489])
                    ("get_prop_tup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45511 45515])
                            ("renderer" variable nil (reparse-symbol function_parameters) [45517 45525]))                          
                        :documentation "
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (e.g., layouts) and
        need to know if the text has changed.
        ")
                        (reparse-symbol indented_block_body) [45494 46070])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46084 46088])
                            ("renderer" variable nil (reparse-symbol function_parameters) [46090 46098]))                          
                        :documentation "
        Draw the :class:`TextWithDash` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [46075 46375])
                    ("update_coords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46398 46402])
                            ("renderer" variable nil (reparse-symbol function_parameters) [46404 46412]))                          
                        :documentation "
        Computes the actual *x*, *y* coordinates for text based on the
        input *x*, *y* and the *dashlength*. Since the rotation is
        with respect to the actual canvas's coordinates we need to map
        back and forth.
        ")
                        (reparse-symbol indented_block_body) [46380 49620])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49647 49651])
                            ("renderer" variable nil (reparse-symbol function_parameters) [49653 49661]))                          )
                        (reparse-symbol indented_block_body) [49625 50509])
                    ("get_dashlength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50533 50537]))                          
                        :documentation "
        Get the length of the dash.
        ")
                        (reparse-symbol indented_block_body) [50514 50632])
                    ("set_dashlength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50656 50660])
                            ("dl" variable nil (reparse-symbol function_parameters) [50662 50664]))                          
                        :documentation "
        Set the length of the dash.

        ACCEPTS: float (canvas units)
        ")
                        (reparse-symbol indented_block_body) [50637 50822])
                    ("get_dashdirection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50849 50853]))                          
                        :documentation "
        Get the direction dash.  1 is before the text and 0 is after.
        ")
                        (reparse-symbol indented_block_body) [50827 50985])
                    ("set_dashdirection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51012 51016])
                            ("dd" variable nil (reparse-symbol function_parameters) [51018 51020]))                          
                        :documentation "
        Set the direction of the dash following the text.
        1 is before the text and 0 is after. The default
        is 0, which is what you'd want for the typical
        case of ticks below and on the left of the figure.

        ACCEPTS: int (1 is before, 0 is after)
        ")
                        (reparse-symbol indented_block_body) [50990 51383])
                    ("get_dashrotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51409 51413]))                          
                        :documentation "
        Get the rotation of the dash in degrees.
        ")
                        (reparse-symbol indented_block_body) [51388 51619])
                    ("set_dashrotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51645 51649])
                            ("dr" variable nil (reparse-symbol function_parameters) [51651 51653]))                          
                        :documentation "
        Set the rotation of the dash, in degrees

        ACCEPTS: float (degrees)
        ")
                        (reparse-symbol indented_block_body) [51624 51821])
                    ("get_dashpad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51842 51846]))                          
                        :documentation "
        Get the extra spacing between the dash and the text, in canvas units.
        ")
                        (reparse-symbol indented_block_body) [51826 51980])
                    ("set_dashpad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52001 52005])
                            ("dp" variable nil (reparse-symbol function_parameters) [52007 52009]))                          
                        :documentation "
        Set the \"pad\" of the TextWithDash, which is the extra spacing
        between the dash and the text, in canvas units.

        ACCEPTS: float (canvas units)
        ")
                        (reparse-symbol indented_block_body) [51985 52254])
                    ("get_dashpush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52276 52280]))                          
                        :documentation "
        Get the extra spacing between the dash and the specified text
        position, in canvas units.
        ")
                        (reparse-symbol indented_block_body) [52259 52442])
                    ("set_dashpush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52464 52468])
                            ("dp" variable nil (reparse-symbol function_parameters) [52470 52472]))                          
                        :documentation "
        Set the \"push\" of the TextWithDash, which
        is the extra spacing between the beginning
        of the dash and the specified position.

        ACCEPTS: float (canvas units)
        ")
                        (reparse-symbol indented_block_body) [52447 52741])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52763 52767])
                            ("xy" variable nil (reparse-symbol function_parameters) [52769 52771]))                          
                        :documentation "
        Set the (*x*, *y*) position of the :class:`TextWithDash`.

        ACCEPTS: (x, y)
        ")
                        (reparse-symbol indented_block_body) [52746 52941])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52956 52960])
                            ("x" variable nil (reparse-symbol function_parameters) [52962 52963]))                          
                        :documentation "
        Set the *x* position of the :class:`TextWithDash`.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [52946 53130])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53145 53149])
                            ("y" variable nil (reparse-symbol function_parameters) [53151 53152]))                          
                        :documentation "
        Set the *y* position of the :class:`TextWithDash`.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [53135 53319])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53342 53346])
                            ("t" variable nil (reparse-symbol function_parameters) [53348 53349]))                          
                        :documentation "
        Set the :class:`matplotlib.transforms.Transform` instance used
        by this artist.

        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [53324 53642])
                    ("get_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53662 53666]))                          )
                        (reparse-symbol indented_block_body) [53647 53755])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53775 53779])
                            ("fig" variable nil (reparse-symbol function_parameters) [53781 53784]))                          
                        :documentation "
        Set the figure instance the artist belong to.

        ACCEPTS: a :class:`matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [53760 54001]))                  
                :type "class")
                nil [40945 54001])
            ("docstring" code nil nil [54002 54067])
            ("OffsetFrom" type
               (:superclasses ("object")
                :members 
                  ( ("'Callable helper class for working with `Annotation`'" code nil (reparse-symbol indented_block_body) [54100 54153])
                    ("__init__" function
                       (:suite 
                          ( ("'''
        Parameters
        ----------
        artist : `Artist`, `BboxBase`, or `Transform`
            The object to compute the offset from.

        ref_coord : length 2 sequence
            If `artist` is an `Artist` or `BboxBase`, this values is
            the location to of the offset origin in fractions of the
            `artist` bounding box.

            If `artist` is a transform, the offset origin is the
            transform applied to this value.

        unit : {'points, 'pixels'}
            The screen units to use (pixels or points) for the offset
            input.

        '''" code nil (reparse-symbol indented_block_body) [54220 54827])
                            ("self" variable nil (reparse-symbol indented_block_body) [54836 54857])
                            ("self" variable nil (reparse-symbol indented_block_body) [54866 54893])
                            ("self" code nil (reparse-symbol indented_block_body) [54902 54921]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54171 54175])
                            ("artist" variable nil (reparse-symbol function_parameters) [54177 54183])
                            ("ref_coord" variable nil (reparse-symbol function_parameters) [54185 54194])
                            ("unit" variable nil (reparse-symbol function_parameters) [54196 54200]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54158 54922])
                    ("set_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54940 54944])
                            ("unit" variable nil (reparse-symbol function_parameters) [54946 54950]))                          )
                        (reparse-symbol indented_block_body) [54927 55266])
                    ("get_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55284 55288]))                          )
                        (reparse-symbol indented_block_body) [55271 55384])
                    ("_get_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55404 55408])
                            ("renderer" variable nil (reparse-symbol function_parameters) [55410 55418]))                          )
                        (reparse-symbol indented_block_body) [55389 55566])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55584 55588])
                            ("renderer" variable nil (reparse-symbol function_parameters) [55590 55598]))                          )
                        (reparse-symbol indented_block_body) [55571 56643]))                  
                :type "class")
                nil [54070 56643])
            ("_AnnotationBase" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [56803 56815])
                            ("self" variable nil (reparse-symbol indented_block_body) [56824 56848])
                            ("self" code nil (reparse-symbol indented_block_body) [56857 56898])
                            ("self" variable nil (reparse-symbol indented_block_body) [56908 56930]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56693 56697])
                            ("xy" variable nil (reparse-symbol function_parameters) [56716 56718])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [56737 56745])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [56771 56786]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56680 56931])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56948 56952])
                            ("renderer" variable nil (reparse-symbol function_parameters) [56954 56962])
                            ("x" variable nil (reparse-symbol function_parameters) [56964 56965])
                            ("y" variable nil (reparse-symbol function_parameters) [56967 56968])
                            ("s" variable nil (reparse-symbol function_parameters) [56970 56971]))                          )
                        (reparse-symbol indented_block_body) [56936 57329])
                    ("_get_xy_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57356 57360])
                            ("renderer" variable nil (reparse-symbol function_parameters) [57362 57370])
                            ("s" variable nil (reparse-symbol function_parameters) [57372 57373]))                          )
                        (reparse-symbol indented_block_body) [57334 60305])
                    ("_get_ref_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60326 60330])
                            ("renderer" variable nil (reparse-symbol function_parameters) [60332 60340]))                          
                        :documentation "
        return x, y (in display coordinate) that is to be used for a reference
        of any offset coordinate
        ")
                        (reparse-symbol indented_block_body) [60310 61308])
                    ("set_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61762 61766])
                            ("b" variable nil (reparse-symbol function_parameters) [61768 61769]))                          
                        :documentation "
        set *annotation_clip* attribute.

          * True: the annotation will only be drawn when self.xy is inside
                  the axes.
          * False: the annotation will always be drawn regardless of its
                   position.
          * None: the self.xy will be checked only if *xycoords* is \"data\"
        ")
                        (reparse-symbol indented_block_body) [61738 62152])
                    ("get_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62181 62185]))                          
                        :documentation "
        Return *annotation_clip* attribute.
        See :meth:`set_annotation_clip` for the meaning of return values.
        ")
                        (reparse-symbol indented_block_body) [62157 62367])
                    ("_get_position_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62393 62397])
                            ("renderer" variable nil (reparse-symbol function_parameters) [62399 62407]))                          )
                        (reparse-symbol indented_block_body) [62372 62552])
                    ("_check_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62571 62575])
                            ("renderer" variable nil (reparse-symbol function_parameters) [62577 62585])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [62587 62595]))                          
                        :documentation "
        given the xy pixel coordinate, check if the annotation need to
        be drawn.
        ")
                        (reparse-symbol indented_block_body) [62557 62965])
                    ("draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62984 62988])
                            ("state" variable nil (reparse-symbol function_parameters) [62990 62995])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [63002 63010]))                          
                        :documentation "
        Set the draggable state -- if state is

          * None : toggle the current state

          * True : turn draggable on

          * False : turn draggable off

        If draggable is on, you can drag the annotation on the canvas with
        the mouse.  The DraggableAnnotation helper instance is returned if
        draggable is on.
        ")
                        (reparse-symbol indented_block_body) [62970 63904]))                  
                :type "class")
                nil [56645 63904])
            ("Annotation" type
               (:superclasses ("Text" "_AnnotationBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63963 63967]))                          )
                        (reparse-symbol indented_block_body) [63951 64135])
                    ("__init__" function
                       (:suite 
                          ( ("'''
        Annotate the point ``xy`` with text ``s``.

        Additional kwargs are passed to `~matplotlib.text.Text`.

        Parameters
        ----------

        s : str
            The text of the annotation

        xy : iterable
            Length 2 sequence specifying the *(x,y)* point to annotate

        xytext : iterable, optional
            Length 2 sequence specifying the *(x,y)* to place the text
            at.  If None, defaults to ``xy``.

        xycoords : str, Artist, Transform, callable or tuple, optional

            The coordinate system that ``xy`` is given in.

            For a `str` the allowed values are:

            =================   ===============================================
            Property            Description
            =================   ===============================================
            'figure points'     points from the lower left of the figure
            'figure pixels'     pixels from the lower left of the figure
            'figure fraction'   fraction of figure from lower left
            'axes points'       points from lower left corner of axes
            'axes pixels'       pixels from lower left corner of axes
            'axes fraction'     fraction of axes from lower left
            'data'              use the coordinate system of the object being
                                annotated (default)
            'polar'             *(theta,r)* if not native 'data' coordinates
            =================   ===============================================

            If a `~matplotlib.artist.Artist` object is passed in the units are
            fraction if it's bounding box.

            If a `~matplotlib.transforms.Transform` object is passed
            in use that to transform ``xy`` to screen coordinates

            If a callable it must take a
            `~matplotlib.backend_bases.RendererBase` object as input
            and return a `~matplotlib.transforms.Transform` or
            `~matplotlib.transforms.Bbox` object

            If a `tuple` must be length 2 tuple of str, `Artist`,
            `Transform` or callable objects.  The first transform is
            used for the *x* coordinate and the second for *y*.

            See :ref:`plotting-guide-annotation` for more details.

            Defaults to ``'data'``

        textcoords : str, `Artist`, `Transform`, callable or tuple, optional
            The coordinate system that ``xytext`` is given, which
            may be different than the coordinate system used for
            ``xy``.

            All ``xycoords`` values are valid as well as the following
            strings:

            =================   =========================================
            Property            Description
            =================   =========================================
            'offset points'     offset (in points) from the *xy* value
            'offset pixels'     offset (in pixels) from the *xy* value
            =================   =========================================

            defaults to the input of ``xycoords``

        arrowprops : dict, optional
            If not None, properties used to draw a
            `~matplotlib.patches.FancyArrowPatch` arrow between ``xy`` and
            ``xytext``.

            If `arrowprops` does not contain the key ``'arrowstyle'`` the
            allowed keys are:

            ==========   ======================================================
            Key          Description
            ==========   ======================================================
            width        the width of the arrow in points
            headwidth    the width of the base of the arrow head in points
            headlength   the length of the arrow head in points
            shrink       fraction of total length to 'shrink' from both ends
            ?            any key to :class:`matplotlib.patches.FancyArrowPatch`
            ==========   ======================================================

            If the `arrowprops` contains the key ``'arrowstyle'`` the
            above keys are forbidden.  The allowed values of
            ``'arrowstyle'`` are:

            ============   =============================================
            Name           Attrs
            ============   =============================================
            ``'-'``        None
            ``'->'``       head_length=0.4,head_width=0.2
            ``'-['``       widthB=1.0,lengthB=0.2,angleB=None
            ``'|-|'``      widthA=1.0,widthB=1.0
            ``'-|>'``      head_length=0.4,head_width=0.2
            ``'<-'``       head_length=0.4,head_width=0.2
            ``'<->'``      head_length=0.4,head_width=0.2
            ``'<|-'``      head_length=0.4,head_width=0.2
            ``'<|-|>'``    head_length=0.4,head_width=0.2
            ``'fancy'``    head_length=0.4,head_width=0.4,tail_width=0.4
            ``'simple'``   head_length=0.5,head_width=0.5,tail_width=0.2
            ``'wedge'``    tail_width=0.3,shrink_factor=0.5
            ============   =============================================

            Valid keys for `~matplotlib.patches.FancyArrowPatch` are:

            ===============  ==================================================
            Key              Description
            ===============  ==================================================
            arrowstyle       the arrow style
            connectionstyle  the connection style
            relpos           default is (0.5, 0.5)
            patchA           default is bounding box of the text
            patchB           default is None
            shrinkA          default is 2 points
            shrinkB          default is 2 points
            mutation_scale   default is text size (in points)
            mutation_aspect  default is 1.
            ?                any key for :class:`matplotlib.patches.PathPatch`
            ===============  ==================================================

            Defaults to None

        annotation_clip : bool, optional
            Controls the visibility of the annotation when it goes
            outside the axes area.

            If `True`, the annotation will only be drawn when the
            ``xy`` is inside the axes. If `False`, the annotation will
            always be drawn regardless of its position.

            The default is `None`, which behave as `True` only if
            *xycoords* is \"data\".

        Returns
        -------
        Annotation

        '''" code nil (reparse-symbol indented_block_body) [64403 70990])
                            ("_AnnotationBase" code nil (reparse-symbol indented_block_body) [71000 71185])
                            ("if" code nil (reparse-symbol indented_block_body) [71232 71530])
                            ("if" code nil (reparse-symbol indented_block_body) [71588 71650])
                            ("self" variable nil (reparse-symbol indented_block_body) [71658 71687])
                            ("if" code nil (reparse-symbol indented_block_body) [71731 71779])
                            ("x, y" code nil (reparse-symbol indented_block_body) [71787 71800])
                            ("Text" code nil (reparse-symbol indented_block_body) [71810 71848])
                            ("self" variable nil (reparse-symbol indented_block_body) [71858 71886])
                            ("self" variable nil (reparse-symbol indented_block_body) [71896 71913])
                            ("if" code nil (reparse-symbol indented_block_body) [71923 72704]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64183 64187])
                            ("s" variable nil (reparse-symbol function_parameters) [64189 64190])
                            ("xy" variable nil (reparse-symbol function_parameters) [64192 64194])
                            ("xytext" variable nil (reparse-symbol function_parameters) [64213 64219])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [64243 64251])
                            ("textcoords" variable nil (reparse-symbol function_parameters) [64277 64287])
                            ("arrowprops" variable nil (reparse-symbol function_parameters) [64311 64321])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [64345 64360])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [64384 64392]))                          
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [64140 72704])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72722 72726])
                            ("event" variable nil (reparse-symbol function_parameters) [72728 72733]))                          )
                        (reparse-symbol indented_block_body) [72709 73097])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73126 73130]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [73102 73168])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73201 73205])
                            ("xytext" variable nil (reparse-symbol function_parameters) [73207 73213]))                          
                        :decorators 
                          ( ("xyann.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [73173 73250])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73283 73287]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [73255 73322])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73363 73367])
                            ("coords" variable nil (reparse-symbol function_parameters) [73369 73375]))                          
                        :decorators 
                          ( ("anncoords.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [73327 73412])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73432 73436])
                            ("fig" variable nil (reparse-symbol function_parameters) [73438 73441]))                          )
                        (reparse-symbol indented_block_body) [73417 73642])
                    ("update_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73668 73672])
                            ("renderer" variable nil (reparse-symbol function_parameters) [73674 73682]))                          
                        :documentation "\"Update the pixel positions of the annotated point and the
        text.
        ")
                        (reparse-symbol indented_block_body) [73647 73889])
                    ("_update_position_xytext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73922 73926])
                            ("renderer" variable nil (reparse-symbol function_parameters) [73928 73936])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [73938 73946]))                          
                        :documentation "Update the pixel positions of the annotation text and the arrow
        patch.
        ")
                        (reparse-symbol indented_block_body) [73894 77912])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77958 77962])
                            ("renderer" variable nil (reparse-symbol function_parameters) [77964 77972]))                          
                        :documentation "
        Draw the :class:`Annotation` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [77917 78840])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78867 78871])
                            ("renderer" variable nil (reparse-symbol function_parameters) [78873 78881]))                          )
                        (reparse-symbol indented_block_body) [78845 79999]))                  
                :type "class")
                nil [63906 79999])
            ("docstring" code nil nil [80001 80065]))          
      :file "text.py"
      :pointmax 80066
      :fsize 80065
      :lastmodtime '(23240 23001 121461 0)
      :unmatched-syntax '((NAME 24828 . 24833) (IF 24844 . 24846) (ELSE 24862 . 24866) (FROM 523 . 527) (PERIOD 528 . 529) (FROM 457 . 461) (PERIOD 462 . 463) (FROM 393 . 397) (PERIOD 398 . 399) (FROM 367 . 371) (PERIOD 372 . 373) (FROM 326 . 330) (PERIOD 331 . 332) (FROM 299 . 303) (PERIOD 304 . 305) (FROM 250 . 254) (PERIOD 255 . 256)))
    (semanticdb-table "semanticdb-table-15623a8"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [49 134])
            ("six" include nil nil [136 146])
            ("six.moves" include nil nil [147 177])
            ("math" include nil nil [179 190])
            ("warnings" include nil nil [191 206])
            ("numpy" include nil nil [208 226])
            ("matplotlib" include nil nil [228 252])
            ("transforms" include nil nil [260 328])
            ("lines" include nil nil [260 328])
            ("docstring" include nil nil [260 328])
            ("colors" include nil nil [260 328])
            ("cbook" include nil nil [260 328])
            ("artist" include nil nil [260 328])
            ("" code nil nil [349 543])
            ("Path" include nil nil [555 566])
            ("_patch_alias_map" variable nil nil [568 740])
            ("Patch" type
               (:documentation "
    A patch is a 2D artist with a face color and an edge color.

    If any of *edgecolor*, *facecolor*, *linewidth*, or *antialiased*
    are *None*, they default to their rc params setting.
    "
                :superclasses ("artist.Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [983 993])
                    ("validCap" variable nil (reparse-symbol indented_block_body) [998 1040])
                    ("validJoin" variable nil (reparse-symbol indented_block_body) [1045 1084])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [1176 1197])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1215 1219]))                          )
                        (reparse-symbol indented_block_body) [1203 1272])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The following kwarg properties are supported

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [1650 1737])
                            ("artist" code nil (reparse-symbol indented_block_body) [1746 1774])
                            ("if" code nil (reparse-symbol indented_block_body) [1784 1862])
                            ("if" code nil (reparse-symbol indented_block_body) [1870 1924])
                            ("if" code nil (reparse-symbol indented_block_body) [1932 1983])
                            ("if" code nil (reparse-symbol indented_block_body) [1991 2045])
                            ("if" code nil (reparse-symbol indented_block_body) [2053 2137])
                            ("self" variable nil (reparse-symbol indented_block_body) [2146 2209])
                            ("self" variable nil (reparse-symbol indented_block_body) [2218 2235])
                            ("if" code nil (reparse-symbol indented_block_body) [2277 2644])
                            ("self" variable nil (reparse-symbol indented_block_body) [2716 2738])
                            ("self" variable nil (reparse-symbol indented_block_body) [2747 2766])
                            ("self" code nil (reparse-symbol indented_block_body) [2776 2795])
                            ("self" code nil (reparse-symbol indented_block_body) [2804 2833])
                            ("self" code nil (reparse-symbol indented_block_body) [2842 2871])
                            ("self" code nil (reparse-symbol indented_block_body) [2880 2913])
                            ("self" code nil (reparse-symbol indented_block_body) [2922 2943])
                            ("self" code nil (reparse-symbol indented_block_body) [2952 2979])
                            ("self" code nil (reparse-symbol indented_block_body) [2988 3017])
                            ("self" variable nil (reparse-symbol indented_block_body) [3026 3083])
                            ("if" code nil (reparse-symbol indented_block_body) [3093 3141]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1290 1294])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [1313 1322])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [1346 1355])
                            ("color" variable nil (reparse-symbol function_parameters) [1379 1384])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [1408 1417])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [1441 1450])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [1474 1485])
                            ("hatch" variable nil (reparse-symbol function_parameters) [1509 1514])
                            ("fill" variable nil (reparse-symbol function_parameters) [1538 1542])
                            ("capstyle" variable nil (reparse-symbol function_parameters) [1566 1574])
                            ("joinstyle" variable nil (reparse-symbol function_parameters) [1598 1607])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1631 1639]))                          
                        :documentation "
        The following kwarg properties are supported

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1277 3141])
                    ("get_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164]))                          
                        :documentation "
        Return a copy of the vertices used in this patch

        If the patch contains Bezier curves, the curves will be
        interpolated by line segments.  To access the curves as
        curves, use :meth:`get_path`.
        ")
                        (reparse-symbol indented_block_body) [3146 3601])
                    ("_process_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3626 3630])
                            ("radius" variable nil (reparse-symbol function_parameters) [3632 3638]))                          )
                        (reparse-symbol indented_block_body) [3606 3951])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3969 3973])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [3975 3985])
                            ("radius" variable nil (reparse-symbol function_parameters) [3987 3993]))                          
                        :documentation "Test whether the mouse event occurred in the patch.

        Returns T/F, {}
        ")
                        (reparse-symbol indented_block_body) [3956 4383])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4407 4411])
                            ("point" variable nil (reparse-symbol function_parameters) [4413 4418])
                            ("radius" variable nil (reparse-symbol function_parameters) [4420 4426]))                          
                        :documentation "
        Returns ``True`` if the given *point* is inside the path
        (transformed with its transform attribute).

        *radius* allows the path to be made slightly larger or smaller.
        ")
                        (reparse-symbol indented_block_body) [4388 4869])
                    ("contains_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4894 4898])
                            ("points" variable nil (reparse-symbol function_parameters) [4900 4906])
                            ("radius" variable nil (reparse-symbol function_parameters) [4908 4914]))                          
                        :documentation "
        Returns a bool array which is ``True`` if the (closed) path
        contains the corresponding point.
        (transformed with its transform attribute).

        *points* must be Nx2 array.
        *radius* allows the path to be made slightly larger or smaller.
        ")
                        (reparse-symbol indented_block_body) [4874 5442])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5463 5467])
                            ("other" variable nil (reparse-symbol function_parameters) [5469 5474]))                          
                        :documentation "
        Updates this :class:`Patch` from the properties of *other*.
        ")
                        (reparse-symbol indented_block_body) [5447 6164])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6185 6189]))                          
                        :documentation "
        Return a :class:`~matplotlib.transforms.Bbox` object defining
        the axis-aligned extents of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [6169 6407])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6430 6434]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [6412 6639])
                    ("get_data_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6667 6671]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` instance which
        maps data coordinates to physical coordinates.
        ")
                        (reparse-symbol indented_block_body) [6644 6878])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6907 6911]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` instance which
        takes patch coordinates to data coordinates.

        For example, one may define a patch of a circle which represents a
        radius of 5 by providing coordinates for a unit circle, and a
        transform which scales the coordinates (the patch coordinate) by 5.
        ")
                        (reparse-symbol indented_block_body) [6883 7335])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7360 7364]))                          
                        :documentation "
        Returns True if the :class:`Patch` is to be drawn with antialiasing.
        ")
                        (reparse-symbol indented_block_body) [7340 7501])
                    ("get_aa" variable nil (reparse-symbol indented_block_body) [7505 7529])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7553 7557]))                          
                        :documentation "
        Return the edge color of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [7535 7668])
                    ("get_ec" variable nil (reparse-symbol indented_block_body) [7672 7694])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7718 7722]))                          
                        :documentation "
        Return the face color of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [7700 7833])
                    ("get_fc" variable nil (reparse-symbol indented_block_body) [7837 7859])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7883 7887]))                          
                        :documentation "
        Return the line width in points.
        ")
                        (reparse-symbol indented_block_body) [7865 7986])
                    ("get_lw" variable nil (reparse-symbol indented_block_body) [7990 8012])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8036 8040]))                          
                        :documentation "
        Return the linestyle.  Will be one of ['solid' | 'dashed' |
        'dashdot' | 'dotted']
        ")
                        (reparse-symbol indented_block_body) [8018 8196])
                    ("get_ls" variable nil (reparse-symbol indented_block_body) [8200 8222])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8248 8252])
                            ("aa" variable nil (reparse-symbol function_parameters) [8254 8256]))                          
                        :documentation "
        Set whether to use antialiased rendering.

        Parameters
        ----------
        b : bool or None
            .. ACCEPTS: bool or None
        ")
                        (reparse-symbol indented_block_body) [8228 8565])
                    ("set_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8581 8585])
                            ("aa" variable nil (reparse-symbol function_parameters) [8587 8589]))                          
                        :documentation "alias for set_antialiased")
                        (reparse-symbol indented_block_body) [8570 8672])
                    ("_set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8696 8700])
                            ("color" variable nil (reparse-symbol function_parameters) [8702 8707]))                          )
                        (reparse-symbol indented_block_body) [8677 9192])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9215 9219])
                            ("color" variable nil (reparse-symbol function_parameters) [9221 9226]))                          
                        :documentation "
        Set the patch edge color

        ACCEPTS: mpl color spec, None, 'none', or 'auto'
        ")
                        (reparse-symbol indented_block_body) [9197 9420])
                    ("set_ec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9436 9440])
                            ("color" variable nil (reparse-symbol function_parameters) [9442 9447]))                          
                        :documentation "alias for set_edgecolor")
                        (reparse-symbol indented_block_body) [9425 9529])
                    ("_set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9553 9557])
                            ("color" variable nil (reparse-symbol function_parameters) [9559 9564]))                          )
                        (reparse-symbol indented_block_body) [9534 9775])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9798 9802])
                            ("color" variable nil (reparse-symbol function_parameters) [9804 9809]))                          
                        :documentation "
        Set the patch face color

        ACCEPTS: mpl color spec, or None for default, or 'none' for no color
        ")
                        (reparse-symbol indented_block_body) [9780 10023])
                    ("set_fc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10039 10043])
                            ("color" variable nil (reparse-symbol function_parameters) [10045 10050]))                          
                        :documentation "alias for set_facecolor")
                        (reparse-symbol indented_block_body) [10028 10132])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10151 10155])
                            ("c" variable nil (reparse-symbol function_parameters) [10157 10158]))                          
                        :documentation "
        Set both the edgecolor and the facecolor.

        ACCEPTS: matplotlib color spec

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [10137 10479])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10498 10502])
                            ("alpha" variable nil (reparse-symbol function_parameters) [10504 10509]))                          
                        :documentation "
        Set the alpha tranparency of the patch.

        ACCEPTS: float or None
        ")
                        (reparse-symbol indented_block_body) [10484 10940])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10995 10999])
                            ("w" variable nil (reparse-symbol function_parameters) [11001 11002]))                          
                        :documentation "
        Set the patch linewidth in points

        ACCEPTS: float or None for default
        ")
                        (reparse-symbol indented_block_body) [10977 11515])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11531 11535])
                            ("lw" variable nil (reparse-symbol function_parameters) [11537 11539]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [11520 11618])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11641 11645])
                            ("ls" variable nil (reparse-symbol function_parameters) [11647 11649]))                          
                        :documentation "
        Set the patch linestyle

        ===========================   =================
        linestyle                     description
        ===========================   =================
        ``'-'`` or ``'solid'``        solid line
        ``'--'`` or  ``'dashed'``     dashed line
        ``'-.'`` or  ``'dashdot'``    dash-dotted line
        ``':'`` or ``'dotted'``       dotted line
        ===========================   =================

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq),

        where ``onoffseq`` is an even length tuple of on and off ink
        in points.

        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
                   (offset, on-off-dash-seq) |
                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
                   ``' '`` | ``''``]

        Parameters
        ----------
        ls : { '-',  '--', '-.', ':'} and more see description
            The line style.
        ")
                        (reparse-symbol indented_block_body) [11623 13044])
                    ("set_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13060 13064])
                            ("ls" variable nil (reparse-symbol function_parameters) [13066 13068]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [13049 13147])
                    ("set_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13165 13169])
                            ("b" variable nil (reparse-symbol function_parameters) [13171 13172]))                          
                        :documentation "
        Set whether to fill the patch.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        ")
                        (reparse-symbol indented_block_body) [13152 13486])
                    ("get_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13504 13508]))                          )
                        (reparse-symbol indented_block_body) [13491 13574])
                    ("fill" variable nil (reparse-symbol indented_block_body) [13721 13756])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13779 13783])
                            ("s" variable nil (reparse-symbol function_parameters) [13785 13786]))                          
                        :documentation "
        Set the patch capstyle

        ACCEPTS: ['butt' | 'round' | 'projecting']
        ")
                        (reparse-symbol indented_block_body) [13762 14148])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14170 14174]))                          )
                        (reparse-symbol indented_block_body) [14153 14245])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14268 14272])
                            ("s" variable nil (reparse-symbol function_parameters) [14274 14275]))                          
                        :documentation "
        Set the patch joinstyle

        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [14250 14639])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14662 14666]))                          )
                        (reparse-symbol indented_block_body) [14644 14739])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14758 14762])
                            ("hatch" variable nil (reparse-symbol function_parameters) [14764 14769]))                          
                        :documentation "
        Set the hatching pattern

        *hatch* can be one of::

          /   - diagonal hatching
          \\\\   - back diagonal
          |   - vertical
          -   - horizontal
          +   - crossed
          x   - crossed diagonal
          o   - small circle
          O   - large circle
          .   - dots
          *   - stars

        Letters can be combined, in which case all the specified
        hatchings are done.  If same letter repeats, it increases the
        density of hatching of that pattern.

        Hatching is supported in the PostScript, PDF, SVG and Agg
        backends only.

        ACCEPTS: ['/' | '\\\\\\\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']
        ")
                        (reparse-symbol indented_block_body) [14744 15544])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15563 15567]))                          )
                        (reparse-symbol indented_block_body) [15549 15643])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15689 15693])
                            ("renderer" variable nil (reparse-symbol function_parameters) [15695 15703]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15648 17491])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17509 17513]))                          
                        :documentation "
        Return the path of this patch
        ")
                        (reparse-symbol indented_block_body) [17496 17637])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17664 17668])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17670 17678]))                          )
                        (reparse-symbol indented_block_body) [17642 17751]))                  
                :type "class")
                nil [743 17751])
            ("patchdoc" variable nil nil [17753 17783])
            ("for" code nil nil [17784 18016])
            ("docstring" code nil nil [18093 18133])
            ("Shadow" type
               (:superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18173 18177]))                          )
                        (reparse-symbol indented_block_body) [18161 18228])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a shadow of the given *patch* offset by *ox*, *oy*.
        *props*, if not *None*, is a patch property update dictionary.
        If *None*, the shadow will have have the same color as the face,
        but darkened.

        kwargs are
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [18328 18614])
                            ("Patch" code nil (reparse-symbol indented_block_body) [18623 18643])
                            ("self" variable nil (reparse-symbol indented_block_body) [18652 18670])
                            ("self" variable nil (reparse-symbol indented_block_body) [18679 18697])
                            ("self, self" code nil (reparse-symbol indented_block_body) [18706 18733])
                            ("self" variable nil (reparse-symbol indented_block_body) [18742 18788])
                            ("self" code nil (reparse-symbol indented_block_body) [18797 18811]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18276 18280])
                            ("patch" variable nil (reparse-symbol function_parameters) [18282 18287])
                            ("ox" variable nil (reparse-symbol function_parameters) [18289 18291])
                            ("oy" variable nil (reparse-symbol function_parameters) [18293 18295])
                            ("props" variable nil (reparse-symbol function_parameters) [18297 18302])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18309 18317]))                          
                        :documentation "
        Create a shadow of the given *patch* offset by *ox*, *oy*.
        *props*, if not *None*, is a patch property update dictionary.
        If *None*, the shadow will have have the same color as the face,
        but darkened.

        kwargs are
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18233 18812])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18829 18833]))                          )
                        (reparse-symbol indented_block_body) [18817 19385])
                    ("_update_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19412 19416])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19418 19426]))                          )
                        (reparse-symbol indented_block_body) [19390 19584])
                    ("_get_ox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19601 19605]))                          )
                        (reparse-symbol indented_block_body) [19589 19632])
                    ("_set_ox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19649 19653])
                            ("ox" variable nil (reparse-symbol function_parameters) [19655 19657]))                          )
                        (reparse-symbol indented_block_body) [19637 19682])
                    ("_get_oy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19699 19703]))                          )
                        (reparse-symbol indented_block_body) [19687 19730])
                    ("_set_oy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19747 19751])
                            ("oy" variable nil (reparse-symbol function_parameters) [19753 19755]))                          )
                        (reparse-symbol indented_block_body) [19735 19780])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19798 19802]))                          )
                        (reparse-symbol indented_block_body) [19785 19842])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19871 19875]))                          )
                        (reparse-symbol indented_block_body) [19847 19951])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19965 19969])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19971 19979]))                          )
                        (reparse-symbol indented_block_body) [19956 20058]))                  
                :type "class")
                nil [18136 20058])
            ("Rectangle" type
               (:documentation "
    Draw a rectangle with lower left at *xy* = (*x*, *y*) with
    specified *width*, *height* and rotation *angle*.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20234 20238]))                          )
                        (reparse-symbol indented_block_body) [20222 20410])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        xy: length-2 tuple
            The bottom and left rectangle coordinates
        width:
            Rectangle width
        height:
            Rectangle height
        angle: float, optional
          rotation in degrees anti-clockwise about *xy* (default is 0.0)
        fill: bool, optional
            Whether to fill the rectangle (default is ``True``)

        Notes
        -----
        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [20513 21005])
                            ("Patch" code nil (reparse-symbol indented_block_body) [21015 21045])
                            ("self" variable nil (reparse-symbol indented_block_body) [21055 21071])
                            ("self" variable nil (reparse-symbol indented_block_body) [21080 21096])
                            ("self" variable nil (reparse-symbol indented_block_body) [21106 21125])
                            ("self" variable nil (reparse-symbol indented_block_body) [21134 21155])
                            ("self" code nil (reparse-symbol indented_block_body) [21165 21198])
                            ("self" code nil (reparse-symbol indented_block_body) [21207 21241])
                            ("self" variable nil (reparse-symbol indented_block_body) [21251 21276])
                            ("self" variable nil (reparse-symbol indented_block_body) [21358 21411]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20458 20462])
                            ("xy" variable nil (reparse-symbol function_parameters) [20464 20466])
                            ("width" variable nil (reparse-symbol function_parameters) [20468 20473])
                            ("height" variable nil (reparse-symbol function_parameters) [20475 20481])
                            ("angle" variable nil (reparse-symbol function_parameters) [20483 20488])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20494 20502]))                          
                        :documentation "
        Parameters
        ----------
        xy: length-2 tuple
            The bottom and left rectangle coordinates
        width:
            Rectangle width
        height:
            Rectangle height
        angle: float, optional
          rotation in degrees anti-clockwise about *xy* (default is 0.0)
        fill: bool, optional
            Whether to fill the rectangle (default is ``True``)

        Notes
        -----
        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20415 21412])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21430 21434]))                          
                        :documentation "
        Return the vertices of the rectangle
        ")
                        (reparse-symbol indented_block_body) [21417 21543])
                    ("_update_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21576 21580]))                          
                        :documentation "NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 makes it very important to call the accessor method and
                 not directly access the transformation member variable.
        ")
                        (reparse-symbol indented_block_body) [21548 22194])
                    ("_update_x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22214 22218]))                          )
                        (reparse-symbol indented_block_body) [22199 22263])
                    ("_update_y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22283 22287]))                          )
                        (reparse-symbol indented_block_body) [22268 22333])
                    ("_convert_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22357 22361]))                          )
                        (reparse-symbol indented_block_body) [22338 22630])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22659 22663]))                          )
                        (reparse-symbol indented_block_body) [22635 22741])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22756 22760]))                          )
                        (reparse-symbol indented_block_body) [22746 22836])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22851 22855]))                          )
                        (reparse-symbol indented_block_body) [22841 22933])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22949 22953]))                          )
                        (reparse-symbol indented_block_body) [22938 23051])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23070 23074]))                          )
                        (reparse-symbol indented_block_body) [23056 23148])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23168 23172]))                          )
                        (reparse-symbol indented_block_body) [23153 23248])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23263 23267])
                            ("x" variable nil (reparse-symbol function_parameters) [23269 23270]))                          )
                        (reparse-symbol indented_block_body) [23253 23392])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23407 23411])
                            ("y" variable nil (reparse-symbol function_parameters) [23413 23414]))                          )
                        (reparse-symbol indented_block_body) [23397 23538])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23554 23558])
                            ("xy" variable nil (reparse-symbol function_parameters) [23560 23562]))                          
                        :documentation "
        Set the left and bottom coords of the rectangle

        ACCEPTS: 2-item sequence
        ")
                        (reparse-symbol indented_block_body) [23543 23789])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23808 23812])
                            ("w" variable nil (reparse-symbol function_parameters) [23814 23815]))                          )
                        (reparse-symbol indented_block_body) [23794 23935])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23955 23959])
                            ("h" variable nil (reparse-symbol function_parameters) [23961 23962]))                          )
                        (reparse-symbol indented_block_body) [23940 24084])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24104 24108])
                            ("args" variable nil (reparse-symbol function_parameters) [24110 24115]))                          
                        :documentation "
        Set the bounds of the rectangle: l,b,w,h

        ACCEPTS: (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [24089 24512])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24530 24534]))                          )
                        (reparse-symbol indented_block_body) [24517 24644])
                    ("xy" variable nil (reparse-symbol indented_block_body) [24649 24678]))                  
                :type "class")
                nil [20060 24679])
            ("RegularPolygon" type
               (:documentation "
    A regular polygon patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24771 24775]))                          )
                        (reparse-symbol indented_block_body) [24759 24857])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments:

        *xy*
          A length 2 tuple (*x*, *y*) of the center.

        *numVertices*
          the number of vertices.

        *radius*
          The distance from the center to each of the vertices.

        *orientation*
          rotates the polygon (in radians).

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [24989 25353])
                            ("self" variable nil (reparse-symbol indented_block_body) [25362 25375])
                            ("self" variable nil (reparse-symbol indented_block_body) [25384 25415])
                            ("self" variable nil (reparse-symbol indented_block_body) [25424 25455])
                            ("self" variable nil (reparse-symbol indented_block_body) [25464 25485])
                            ("self" variable nil (reparse-symbol indented_block_body) [25494 25545])
                            ("self" variable nil (reparse-symbol indented_block_body) [25554 25598])
                            ("self" code nil (reparse-symbol indented_block_body) [25607 25631])
                            ("Patch" code nil (reparse-symbol indented_block_body) [25641 25671]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24905 24909])
                            ("xy" variable nil (reparse-symbol function_parameters) [24911 24913])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [24915 24926])
                            ("radius" variable nil (reparse-symbol function_parameters) [24928 24934])
                            ("orientation" variable nil (reparse-symbol function_parameters) [24938 24949])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24970 24978]))                          
                        :documentation "
        Constructor arguments:

        *xy*
          A length 2 tuple (*x*, *y*) of the center.

        *numVertices*
          the number of vertices.

        *radius*
          The distance from the center to each of the vertices.

        *orientation*
          rotates the polygon (in radians).

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24862 25672])
                    ("_update_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25699 25703]))                          )
                        (reparse-symbol indented_block_body) [25677 25852])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25869 25873]))                          )
                        (reparse-symbol indented_block_body) [25857 25900])
                    ("_set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25917 25921])
                            ("xy" variable nil (reparse-symbol function_parameters) [25923 25925]))                          )
                        (reparse-symbol indented_block_body) [25905 25983])
                    ("xy" variable nil (reparse-symbol indented_block_body) [25987 26018])
                    ("_get_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26045 26049]))                          )
                        (reparse-symbol indented_block_body) [26024 26085])
                    ("_set_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26111 26115])
                            ("orientation" variable nil (reparse-symbol function_parameters) [26117 26128]))                          )
                        (reparse-symbol indented_block_body) [26090 26204])
                    ("orientation" variable nil (reparse-symbol indented_block_body) [26208 26266])
                    ("_get_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26288 26292]))                          )
                        (reparse-symbol indented_block_body) [26272 26323])
                    ("_set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26344 26348])
                            ("radius" variable nil (reparse-symbol function_parameters) [26350 26356]))                          )
                        (reparse-symbol indented_block_body) [26328 26422])
                    ("radius" variable nil (reparse-symbol indented_block_body) [26426 26469])
                    ("_get_numvertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26496 26500]))                          )
                        (reparse-symbol indented_block_body) [26475 26536])
                    ("_set_numvertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26562 26566])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [26568 26579]))                          )
                        (reparse-symbol indented_block_body) [26541 26622])
                    ("numvertices" variable nil (reparse-symbol indented_block_body) [26627 26685])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26704 26708]))                          )
                        (reparse-symbol indented_block_body) [26691 26737])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26766 26770]))                          )
                        (reparse-symbol indented_block_body) [26742 26842]))                  
                :type "class")
                nil [24681 26842])
            ("PathPatch" type
               (:documentation "
    A general polycurve path patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [26924 26944])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26962 26966]))                          )
                        (reparse-symbol indented_block_body) [26950 27037])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *path* is a :class:`matplotlib.path.Path` object.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        \"\"\"" code nil (reparse-symbol indented_block_body) [27116 27323])
                            ("Patch" code nil (reparse-symbol indented_block_body) [27332 27362])
                            ("self" variable nil (reparse-symbol indented_block_body) [27371 27388]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27085 27089])
                            ("path" variable nil (reparse-symbol function_parameters) [27091 27095])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27097 27105]))                          
                        :documentation "
        *path* is a :class:`matplotlib.path.Path` object.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27042 27389])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27407 27411]))                          )
                        (reparse-symbol indented_block_body) [27394 27440]))                  
                :type "class")
                nil [26844 27440])
            ("Polygon" type
               (:documentation "
    A general polygon patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27525 27529]))                          )
                        (reparse-symbol indented_block_body) [27513 27600])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        \"\"\"" code nil (reparse-symbol indented_block_body) [27690 28000])
                            ("Patch" code nil (reparse-symbol indented_block_body) [28009 28039])
                            ("self" variable nil (reparse-symbol indented_block_body) [28048 28069])
                            ("self" code nil (reparse-symbol indented_block_body) [28078 28093]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27648 27652])
                            ("xy" variable nil (reparse-symbol function_parameters) [27654 27656])
                            ("closed" variable nil (reparse-symbol function_parameters) [27658 27664])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27671 27679]))                          
                        :documentation "
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27605 28094])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28112 28116]))                          
                        :documentation "
        Get the path of the polygon

        Returns
        -------
        path : Path
           The :class:`~matplotlib.path.Path` object for
           the polygon
        ")
                        (reparse-symbol indented_block_body) [28099 28338])
                    ("get_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28358 28362]))                          
                        :documentation "
        Returns if the polygon is closed

        Returns
        -------
        closed : bool
            If the path is closed
        ")
                        (reparse-symbol indented_block_body) [28343 28547])
                    ("set_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28567 28571])
                            ("closed" variable nil (reparse-symbol function_parameters) [28573 28579]))                          
                        :documentation "
        Set if the polygon is closed

        Parameters
        ----------
        closed : bool
           True if the polygon is closed
        ")
                        (reparse-symbol indented_block_body) [28552 28902])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28918 28922]))                          
                        :documentation "
        Get the vertices of the path

        Returns
        -------
        vertices : numpy array
            The coordinates of the vertices as a Nx2
            ndarray.
        ")
                        (reparse-symbol indented_block_body) [28907 29159])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29175 29179])
                            ("xy" variable nil (reparse-symbol function_parameters) [29181 29183]))                          
                        :documentation "
        Set the vertices of the polygon

        Parameters
        ----------
        xy : numpy array or iterable of pairs
            The coordinates of the vertices as a Nx2
            ndarray or iterable of pairs.
        ")
                        (reparse-symbol indented_block_body) [29164 29762])
                    ("_get_xy" variable nil (reparse-symbol indented_block_body) [29767 29783])
                    ("_set_xy" variable nil (reparse-symbol indented_block_body) [29788 29804])
                    ("xy" variable nil (reparse-symbol indented_block_body) [29809 30152]))                  
                :type "class")
                nil [27442 30153])
            ("Wedge" type
               (:documentation "
    Wedge shaped patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30231 30235]))                          )
                        (reparse-symbol indented_block_body) [30219 30451])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draw a wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid kwargs are:

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [30563 30865])
                            ("Patch" code nil (reparse-symbol indented_block_body) [30874 30904])
                            ("self" variable nil (reparse-symbol indented_block_body) [30913 30933])
                            ("self, self" code nil (reparse-symbol indented_block_body) [30942 30971])
                            ("self, self" code nil (reparse-symbol indented_block_body) [30980 31021])
                            ("self" variable nil (reparse-symbol indented_block_body) [31030 31084])
                            ("self" code nil (reparse-symbol indented_block_body) [31093 31115]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30499 30503])
                            ("center" variable nil (reparse-symbol function_parameters) [30505 30511])
                            ("r" variable nil (reparse-symbol function_parameters) [30513 30514])
                            ("theta1" variable nil (reparse-symbol function_parameters) [30516 30522])
                            ("theta2" variable nil (reparse-symbol function_parameters) [30524 30530])
                            ("width" variable nil (reparse-symbol function_parameters) [30532 30537])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30544 30552]))                          
                        :documentation "
        Draw a wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid kwargs are:

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30456 31116])
                    ("_recompute_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31141 31145]))                          )
                        (reparse-symbol indented_block_body) [31121 32326])
                    ("set_center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32346 32350])
                            ("center" variable nil (reparse-symbol function_parameters) [32352 32358]))                          )
                        (reparse-symbol indented_block_body) [32331 32442])
                    ("set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32462 32466])
                            ("radius" variable nil (reparse-symbol function_parameters) [32468 32474]))                          )
                        (reparse-symbol indented_block_body) [32447 32553])
                    ("set_theta1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32573 32577])
                            ("theta1" variable nil (reparse-symbol function_parameters) [32579 32585]))                          )
                        (reparse-symbol indented_block_body) [32558 32669])
                    ("set_theta2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32689 32693])
                            ("theta2" variable nil (reparse-symbol function_parameters) [32695 32701]))                          )
                        (reparse-symbol indented_block_body) [32674 32785])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32804 32808])
                            ("width" variable nil (reparse-symbol function_parameters) [32810 32815]))                          )
                        (reparse-symbol indented_block_body) [32790 32897])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32915 32919]))                          )
                        (reparse-symbol indented_block_body) [32902 33014]))                  
                :type "class")
                nil [30155 33014])
            ("Arrow" type
               (:documentation "
    An arrow patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33142 33146]))                          )
                        (reparse-symbol indented_block_body) [33130 33174])
                    ("_path" variable nil (reparse-symbol indented_block_body) [33179 33376])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draws an arrow from (*x*, *y*) to (*x* + *dx*, *y* + *dy*).
        The width of the arrow is scaled by *width*.

        Parameters
        ----------
        x : scalar
            x coordinate of the arrow tail
        y : scalar
            y coordinate of the arrow tail
        dx : scalar
            Arrow length in the x direction
        dy : scalar
            Arrow length in the y direction
        width : scalar, optional (default: 1)
            Scale factor for the width of the arrow. With a default value of
            1, the tail width is 0.2 and head width is 0.6.
        **kwargs :
            Keyword arguments control the :class:`~matplotlib.patches.Patch`
            properties:

            %(Patch)s

        See Also
        --------
        :class:`FancyArrow` :
            Patch that allows independent control of the head and tail
            properties
        \"\"\"" code nil (reparse-symbol indented_block_body) [33475 34387])
                            ("Patch" code nil (reparse-symbol indented_block_body) [34396 34426])
                            ("L" variable nil (reparse-symbol indented_block_body) [34435 34455])
                            ("if" code nil (reparse-symbol indented_block_body) [34465 34607])
                            ("trans1" variable nil (reparse-symbol indented_block_body) [34616 34662])
                            ("trans2" variable nil (reparse-symbol indented_block_body) [34671 34738])
                            ("trans3" variable nil (reparse-symbol indented_block_body) [34747 34793])
                            ("trans" code nil (reparse-symbol indented_block_body) [34802 34834])
                            ("self" variable nil (reparse-symbol indented_block_body) [34843 34881]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33425 33429])
                            ("x" variable nil (reparse-symbol function_parameters) [33431 33432])
                            ("y" variable nil (reparse-symbol function_parameters) [33434 33435])
                            ("dx" variable nil (reparse-symbol function_parameters) [33437 33439])
                            ("dy" variable nil (reparse-symbol function_parameters) [33441 33443])
                            ("width" variable nil (reparse-symbol function_parameters) [33445 33450])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33456 33464]))                          
                        :documentation "
        Draws an arrow from (*x*, *y*) to (*x* + *dx*, *y* + *dy*).
        The width of the arrow is scaled by *width*.

        Parameters
        ----------
        x : scalar
            x coordinate of the arrow tail
        y : scalar
            y coordinate of the arrow tail
        dx : scalar
            Arrow length in the x direction
        dy : scalar
            Arrow length in the y direction
        width : scalar, optional (default: 1)
            Scale factor for the width of the arrow. With a default value of
            1, the tail width is 0.2 and head width is 0.6.
        **kwargs :
            Keyword arguments control the :class:`~matplotlib.patches.Patch`
            properties:

            %(Patch)s

        See Also
        --------
        :class:`FancyArrow` :
            Patch that allows independent control of the head and tail
            properties
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33382 34882])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34900 34904]))                          )
                        (reparse-symbol indented_block_body) [34887 34933])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34962 34966]))                          )
                        (reparse-symbol indented_block_body) [34938 35006]))                  
                :type "class")
                nil [33070 35006])
            ("FancyArrow" type
               (:documentation "
    Like Arrow, but lets you set head width and head height independently.
    "
                :superclasses ("Polygon")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [35131 35151])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35169 35173]))                          )
                        (reparse-symbol indented_block_body) [35157 35206])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments
          *width*: float (default: 0.001)
            width of full arrow tail

          *length_includes_head*: bool (default: False)
            True if head is to be counted in calculating the length.

          *head_width*: float or None (default: 3*width)
            total width of the full arrow head

          *head_length*: float or None (default: 1.5 * head_width)
            length of arrow head

          *shape*: ['full', 'left', 'right'] (default: 'full')
            draw the left-half, right-half, or full arrow

          *overhang*: float (default: 0)
            fraction that the arrow is swept back (0 overhang means
            triangular shape). Can be negative or greater than one.

          *head_starts_at_zero*: bool (default: False)
            if True, the head starts being drawn at coordinate 0
            instead of ending at coordinate 0.

        Other valid kwargs (inherited from :class:`Patch`) are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [35456 36464])
                            ("if" code nil (reparse-symbol indented_block_body) [36473 36531])
                            ("if" code nil (reparse-symbol indented_block_body) [36539 36606])
                            ("distance" variable nil (reparse-symbol indented_block_body) [36615 36642])
                            ("if" code nil (reparse-symbol indented_block_body) [36652 36765])
                            ("if" code nil (reparse-symbol indented_block_body) [36773 38687])
                            ("Polygon" code nil (reparse-symbol indented_block_body) [38696 38766]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35254 35258])
                            ("x" variable nil (reparse-symbol function_parameters) [35260 35261])
                            ("y" variable nil (reparse-symbol function_parameters) [35263 35264])
                            ("dx" variable nil (reparse-symbol function_parameters) [35266 35268])
                            ("dy" variable nil (reparse-symbol function_parameters) [35270 35272])
                            ("width" variable nil (reparse-symbol function_parameters) [35274 35279])
                            ("length_includes_head" variable nil (reparse-symbol function_parameters) [35287 35307])
                            ("head_width" variable nil (reparse-symbol function_parameters) [35332 35342])
                            ("head_length" variable nil (reparse-symbol function_parameters) [35349 35360])
                            ("shape" variable nil (reparse-symbol function_parameters) [35367 35372])
                            ("overhang" variable nil (reparse-symbol function_parameters) [35381 35389])
                            ("head_starts_at_zero" variable nil (reparse-symbol function_parameters) [35410 35429])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35437 35445]))                          
                        :documentation "
        Constructor arguments
          *width*: float (default: 0.001)
            width of full arrow tail

          *length_includes_head*: bool (default: False)
            True if head is to be counted in calculating the length.

          *head_width*: float or None (default: 3*width)
            total width of the full arrow head

          *head_length*: float or None (default: 1.5 * head_width)
            length of arrow head

          *shape*: ['full', 'left', 'right'] (default: 'full')
            draw the left-half, right-half, or full arrow

          *overhang*: float (default: 0)
            fraction that the arrow is swept back (0 overhang means
            triangular shape). Can be negative or greater than one.

          *head_starts_at_zero*: bool (default: False)
            if True, the head starts being drawn at coordinate 0
            instead of ending at coordinate 0.

        Other valid kwargs (inherited from :class:`Patch`) are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35211 38767]))                  
                :type "class")
                nil [35008 38767])
            ("docstring" code nil nil [38769 38838])
            ("YAArrow" type
               (:documentation "
    Yet another arrow class.

    This is an arrow that is defined in display space and has a tip at
    *x1*, *y1* and a base at *x2*, *y2*.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39037 39041]))                          )
                        (reparse-symbol indented_block_body) [39025 39071])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments:

        *xytip*
          (*x*, *y*) location of arrow tip

        *xybase*
          (*x*, *y*) location the arrow base mid point

        *figure*
          The :class:`~matplotlib.figure.Figure` instance
          (fig.dpi)

        *width*
          The width of the arrow in points

        *frac*
          The fraction of the arrow length occupied by the head

        *headwidth*
          The width of the base of the arrow head in points

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [39217 39759])
                            ("self" variable nil (reparse-symbol indented_block_body) [39768 39786])
                            ("self" variable nil (reparse-symbol indented_block_body) [39795 39815])
                            ("self" variable nil (reparse-symbol indented_block_body) [39824 39842])
                            ("self" variable nil (reparse-symbol indented_block_body) [39851 39867])
                            ("self" variable nil (reparse-symbol indented_block_body) [39876 39902])
                            ("Patch" code nil (reparse-symbol indented_block_body) [39911 39941])
                            ("self" variable nil (reparse-symbol indented_block_body) [40042 40062]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39119 39123])
                            ("figure" variable nil (reparse-symbol function_parameters) [39125 39131])
                            ("xytip" variable nil (reparse-symbol function_parameters) [39133 39138])
                            ("xybase" variable nil (reparse-symbol function_parameters) [39140 39146])
                            ("width" variable nil (reparse-symbol function_parameters) [39165 39170])
                            ("frac" variable nil (reparse-symbol function_parameters) [39174 39178])
                            ("headwidth" variable nil (reparse-symbol function_parameters) [39184 39193])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39198 39206]))                          
                        :documentation "
        Constructor arguments:

        *xytip*
          (*x*, *y*) location of arrow tip

        *xybase*
          (*x*, *y*) location the arrow base mid point

        *figure*
          The :class:`~matplotlib.figure.Figure` instance
          (fig.dpi)

        *width*
          The width of the arrow in points

        *frac*
          The fraction of the arrow length occupied by the head

        *headwidth*
          The width of the base of the arrow head in points

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39076 40063])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40081 40085]))                          )
                        (reparse-symbol indented_block_body) [40068 41058])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41087 41091]))                          )
                        (reparse-symbol indented_block_body) [41063 41140])
                    ("getpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41159 41163])
                            ("x1" variable nil (reparse-symbol function_parameters) [41165 41167])
                            ("y1" variable nil (reparse-symbol function_parameters) [41169 41171])
                            ("x2" variable nil (reparse-symbol function_parameters) [41173 41175])
                            ("y2" variable nil (reparse-symbol function_parameters) [41177 41179])
                            ("k" variable nil (reparse-symbol function_parameters) [41181 41182]))                          
                        :documentation "
        For line segment defined by (*x1*, *y1*) and (*x2*, *y2*)
        return the points on the line that is perpendicular to the
        line and intersects (*x2*, *y2*) and the distance from (*x2*,
        *y2*) of the returned points is *k*.
        ")
                        (reparse-symbol indented_block_body) [41145 42032]))                  
                :type "class")
                nil [38841 42032])
            ("CirclePolygon" type
               (:documentation "
    A polygon-approximation of a circle patch.
    "
                :superclasses ("RegularPolygon")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42150 42154]))                          )
                        (reparse-symbol indented_block_body) [42138 42209])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a circle at *xy* = (*x*, *y*) with given *radius*.
        This circle is approximated by a regular polygon with
        *resolution* sides.  For a smoother circle drawn with splines,
        see :class:`~matplotlib.patches.Circle`.

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [42372 42681])
                            ("RegularPolygon" code nil (reparse-symbol indented_block_body) [42690 42896]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42257 42261])
                            ("xy" variable nil (reparse-symbol function_parameters) [42263 42265])
                            ("radius" variable nil (reparse-symbol function_parameters) [42267 42273])
                            ("resolution" variable nil (reparse-symbol function_parameters) [42294 42304])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42352 42361]))                          
                        :documentation "
        Create a circle at *xy* = (*x*, *y*) with given *radius*.
        This circle is approximated by a regular polygon with
        *resolution* sides.  For a smoother circle drawn with splines,
        see :class:`~matplotlib.patches.Circle`.

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42214 42897]))                  
                :type "class")
                nil [42034 42897])
            ("Ellipse" type
               (:documentation "
    A scale-free ellipse.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42979 42983]))                          )
                        (reparse-symbol indented_block_body) [42967 43181])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy*
          center of ellipse

        *width*
          total length (diameter) of horizontal axis

        *height*
          total length (diameter) of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [43284 43588])
                            ("Patch" code nil (reparse-symbol indented_block_body) [43597 43627])
                            ("self" variable nil (reparse-symbol indented_block_body) [43637 43653])
                            ("self, self" code nil (reparse-symbol indented_block_body) [43662 43701])
                            ("self" variable nil (reparse-symbol indented_block_body) [43710 43728])
                            ("self" variable nil (reparse-symbol indented_block_body) [43737 43768])
                            ("self" variable nil (reparse-symbol indented_block_body) [43850 43904]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43229 43233])
                            ("xy" variable nil (reparse-symbol function_parameters) [43235 43237])
                            ("width" variable nil (reparse-symbol function_parameters) [43239 43244])
                            ("height" variable nil (reparse-symbol function_parameters) [43246 43252])
                            ("angle" variable nil (reparse-symbol function_parameters) [43254 43259])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43265 43273]))                          
                        :documentation "
        *xy*
          center of ellipse

        *width*
          total length (diameter) of horizontal axis

        *height*
          total length (diameter) of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43186 43905])
                    ("_recompute_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43935 43939]))                          
                        :documentation "NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 makes it very important to call the accessor method and
                 not directly access the transformation member variable.
        ")
                        (reparse-symbol indented_block_body) [43910 44624])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44642 44646]))                          
                        :documentation "
        Return the vertices of the rectangle
        ")
                        (reparse-symbol indented_block_body) [44629 44744])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44773 44777]))                          )
                        (reparse-symbol indented_block_body) [44749 44853]))                  
                :type "class")
                nil [42899 44853])
            ("Circle" type
               (:documentation "
    A circle patch.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44930 44934]))                          )
                        (reparse-symbol indented_block_body) [44918 45069])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create true circle at center *xy* = (*x*, *y*) with given
        *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`
        which is a polygonal approximation, this uses Bézier splines
        and is much closer to a scale-free circle.

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [45156 45472])
                            ("Ellipse" code nil (reparse-symbol indented_block_body) [45481 45541])
                            ("self" variable nil (reparse-symbol indented_block_body) [45550 45570]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45117 45121])
                            ("xy" variable nil (reparse-symbol function_parameters) [45123 45125])
                            ("radius" variable nil (reparse-symbol function_parameters) [45127 45133])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45137 45145]))                          
                        :documentation "
        Create true circle at center *xy* = (*x*, *y*) with given
        *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`
        which is a polygonal approximation, this uses Bézier splines
        and is much closer to a scale-free circle.

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45074 45571])
                    ("set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45591 45595])
                            ("radius" variable nil (reparse-symbol function_parameters) [45597 45603]))                          
                        :documentation "
        Set the radius of the circle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [45576 45763])
                    ("get_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45783 45787]))                          )
                        (reparse-symbol indented_block_body) [45768 45863])
                    ("radius" variable nil (reparse-symbol indented_block_body) [45868 45909]))                  
                :type "class")
                nil [44855 45910])
            ("Arc" type
               (:documentation "
    An elliptical arc.  Because it performs various optimizations, it
    can not be filled.

    The arc must be used in an :class:`~matplotlib.axes.Axes`
    instance---it can not be added directly to a
    :class:`~matplotlib.figure.Figure`---because it is optimized to
    only render the segments that are inside the axes bounding box
    with high resolution.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46330 46334]))                          )
                        (reparse-symbol indented_block_body) [46318 46596])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The following args are supported:

        *xy*
          center of ellipse

        *width*
          length of horizontal axis

        *height*
          length of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        *theta1*
          starting angle of the arc in degrees

        *theta2*
          ending angle of the arc in degrees

        If *theta1* and *theta2* are not provided, the arc will form a
        complete ellipse.

        Valid kwargs are:

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [46742 47282])
                            ("fill" variable nil (reparse-symbol indented_block_body) [47291 47330])
                            ("if" code nil (reparse-symbol indented_block_body) [47339 47410])
                            ("Ellipse" code nil (reparse-symbol indented_block_body) [47419 47477])
                            ("self" variable nil (reparse-symbol indented_block_body) [47487 47507])
                            ("self" variable nil (reparse-symbol indented_block_body) [47516 47536]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46644 46648])
                            ("xy" variable nil (reparse-symbol function_parameters) [46650 46652])
                            ("width" variable nil (reparse-symbol function_parameters) [46654 46659])
                            ("height" variable nil (reparse-symbol function_parameters) [46661 46667])
                            ("angle" variable nil (reparse-symbol function_parameters) [46669 46674])
                            ("theta1" variable nil (reparse-symbol function_parameters) [46697 46703])
                            ("theta2" variable nil (reparse-symbol function_parameters) [46709 46715])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [46723 46731]))                          
                        :documentation "
        The following args are supported:

        *xy*
          center of ellipse

        *width*
          length of horizontal axis

        *height*
          length of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        *theta1*
          starting angle of the arc in degrees

        *theta2*
          ending angle of the arc in degrees

        If *theta1* and *theta2* are not provided, the arc will form a
        complete ellipse.

        Valid kwargs are:

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46601 47537])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47583 47587])
                            ("renderer" variable nil (reparse-symbol function_parameters) [47589 47597]))                          
                        :documentation "
        Ellipses are normally drawn using an approximation that uses
        eight cubic bezier splines.  The error of this approximation
        is 1.89818e-6, according to this unverified source:

          Lancaster, Don.  Approximating a Circle or an Ellipse Using
          Four Bezier Cubic Splines.

          http://www.tinaja.com/glib/ellipse4.pdf

        There is a use case where very large ellipses must be drawn
        with very high accuracy, and it is too expensive to render the
        entire ellipse with enough segments (either splines or line
        segments).  Therefore, in the case where either radius of the
        ellipse is large enough that the error of the spline
        approximation will be visible (greater than one pixel offset
        from the ideal), a different technique is used.

        In that case, only the visible parts of the ellipse are drawn,
        with each visible arc using a fixed number of spline segments
        (8).  The algorithm proceeds as follows:

          1. The points where the ellipse intersects the axes bounding
             box are located.  (This is done be performing an inverse
             transformation on the axes bbox such that it is relative
             to the unit circle -- this makes the intersection
             calculation much easier than doing rotated ellipse
             intersection directly).

             This uses the \"line intersecting a circle\" algorithm
             from:

               Vince, John.  Geometry for Computer Graphics: Formulae,
               Examples & Proofs.  London: Springer-Verlag, 2005.

          2. The angles of each of the intersection points are
             calculated.

          3. Proceeding counterclockwise starting in the positive
             x-direction, each of the visible arc-segments between the
             pairs of vertices are drawn using the bezier arc
             approximation technique implemented in
             :meth:`matplotlib.path.Path.arc`.
        ")
                        (reparse-symbol indented_block_body) [47542 53759]))                  
                :type "class")
                nil [45912 53759])
            ("bbox_artist" function
               (:documentation "
    This is a debug function to draw a rectangle around the bounding
    box returned by
    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
    to test whether the artist is returning the correct bbox.

    *props* is a dict of rectangle props with the additional property
    'pad' that sets the padding around the bbox in points.
    "
                :arguments 
                  ( ("artist" variable nil (reparse-symbol function_parameters) [53777 53783])
                    ("renderer" variable nil (reparse-symbol function_parameters) [53785 53793])
                    ("props" variable nil (reparse-symbol function_parameters) [53795 53800])
                    ("fill" variable nil (reparse-symbol function_parameters) [53807 53811]))                  )
                nil [53761 54753])
            ("draw_bbox" function
               (:documentation "
    This is a debug function to draw a rectangle around the bounding
    box returned by
    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
    to test whether the artist is returning the correct bbox.
    "
                :arguments 
                  ( ("bbox" variable nil (reparse-symbol function_parameters) [54769 54773])
                    ("renderer" variable nil (reparse-symbol function_parameters) [54775 54783])
                    ("color" variable nil (reparse-symbol function_parameters) [54785 54790])
                    ("trans" variable nil (reparse-symbol function_parameters) [54796 54801]))                  )
                nil [54755 55348])
            ("_pprint_table" function
               (:documentation "
    Given the list of list of strings, return a string of REST table format.
    "
                :arguments 
                  ( ("_table" variable nil (reparse-symbol function_parameters) [55368 55374])
                    ("leadingspace" variable nil (reparse-symbol function_parameters) [55376 55388]))                  )
                nil [55350 56415])
            ("_pprint_styles" function
               (:documentation "
    A helper function for the _Style class.  Given the dictionary of
    (stylename : styleclass), return a formatted string listing all the
    styles. Used to update the documentation.
    "
                :arguments 
                  ( ("_styles" variable nil (reparse-symbol function_parameters) [56436 56443]))                  )
                nil [56417 57552])
            ("_simpleprint_styles" function
               (:documentation "
    A helper function for the _Style class.  Given the dictionary of
    (stylename : styleclass), return a string rep of the list of keys.
    Used to update the documentation.
    "
                :arguments 
                  ( ("_styles" variable nil (reparse-symbol function_parameters) [57578 57585]))                  )
                nil [57554 57856])
            ("_Style" type
               (:documentation "
    A base class for the Styles. It is meant to be a container class,
    where actual styles are declared as subclass of it, and it
    provides some helper functions.
    "
                :superclasses ("object")
                :members 
                  ( ("__new__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58081 58085])
                            ("stylename" variable nil (reparse-symbol function_parameters) [58087 58096])
                            ("kw" variable nil (reparse-symbol function_parameters) [58098 58102]))                          
                        :documentation "
        return the instance of the subclass with the given style name.
        ")
                        (reparse-symbol indented_block_body) [58069 58845])
                    ("get_styles" function
                       (:documentation "
        A class method which returns a dictionary of available styles.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [58882 58887]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58850 59018])
                    ("pprint_styles" function
                       (:documentation "
        A class method which returns a string of the available styles.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [59058 59063]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [59023 59210])
                    ("register" function
                       (:documentation "
        Register a new style.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [59245 59250])
                            ("name" variable nil (reparse-symbol function_parameters) [59252 59256])
                            ("style" variable nil (reparse-symbol function_parameters) [59258 59263]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [59215 59553]))                  
                :type "class")
                nil [57858 59553])
            ("BoxStyle" type
               (:documentation "
    :class:`BoxStyle` is a container class which defines several
    boxstyle classes, which are used for :class:`FancyBboxPatch`.

    A style object can be created as::

           BoxStyle.Round(pad=0.2)

    or::

           BoxStyle(\"Round\", pad=0.2)

    or::

           BoxStyle(\"Round, pad=0.2\")

    Following boxstyle classes are defined.

    %(AvailableBoxstyles)s

    An instance of any boxstyle class is an callable object,
    whose call signature is::

       __call__(self, x0, y0, width, height, mutation_size, aspect_ratio=1.)

    and returns a :class:`Path` instance. *x0*, *y0*, *width* and
    *height* specify the location and size of the box to be
    drawn. *mutation_scale* determines the overall size of the
    mutation (by which I mean the transformation of the rectangle to
    the fancy box).  *mutation_aspect* determines the aspect-ratio of
    the mutation.
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [60495 60511])
                    ("_Base" type
                       (:documentation "
        :class:`BBoxTransmuterBase` and its derivatives are used to make a
        fancy box around a given rectangle. The :meth:`__call__` method
        returns the :class:`~matplotlib.path.Path` of the fancy box. This
        class is not an artist and actual drawing of the fancy box is done
        by the :class:`FancyBboxPatch` class.
        "
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            initializtion.
            \"\"\"" code nil (reparse-symbol indented_block_body) [61120 61166])
                                    ("super" code nil (reparse-symbol indented_block_body) [61179 61217]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [61101 61105]))                                  
                                :documentation "
            initializtion.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [61088 61218])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [61241 61245])
                                    ("x0" variable nil (reparse-symbol function_parameters) [61247 61249])
                                    ("y0" variable nil (reparse-symbol function_parameters) [61251 61253])
                                    ("width" variable nil (reparse-symbol function_parameters) [61255 61260])
                                    ("height" variable nil (reparse-symbol function_parameters) [61262 61268])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [61270 61283]))                                  
                                :documentation "
            The transmute method is a very core of the
            :class:`BboxTransmuter` class and must be overridden in the
            subclasses. It receives the location and size of the
            rectangle, and the mutation_size, with which the amount of
            padding and etc. will be scaled. It returns a
            :class:`~matplotlib.path.Path` instance.
            ")
                                (reparse-symbol indented_block_body) [61227 61755])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [61777 61781])
                                    ("x0" variable nil (reparse-symbol function_parameters) [61783 61785])
                                    ("y0" variable nil (reparse-symbol function_parameters) [61787 61789])
                                    ("width" variable nil (reparse-symbol function_parameters) [61791 61796])
                                    ("height" variable nil (reparse-symbol function_parameters) [61798 61804])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [61806 61819])
                                    ("aspect_ratio" variable nil (reparse-symbol function_parameters) [61842 61854]))                                  
                                :documentation "
            Given the location and size of the box, return the path of
            the box around it.

              - *x0*, *y0*, *width*, *height* : location and size of the box
              - *mutation_size* : a reference scale for the mutation.
              - *aspect_ratio* : aspect-ration for the mutation.
            ")
                                (reparse-symbol indented_block_body) [61764 62942])
                            ("__reduce__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [62966 62970]))                                  )
                                (reparse-symbol indented_block_body) [62951 63274]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [60517 63274])
                    ("Square" type
                       (:documentation "
        A simple square box.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
             *pad*
                amount of padding
            \"\"\"" code nil (reparse-symbol indented_block_body) [63403 63475])
                                    ("self" variable nil (reparse-symbol indented_block_body) [63489 63503])
                                    ("super" code nil (reparse-symbol indented_block_body) [63516 63555]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [63375 63379])
                                    ("pad" variable nil (reparse-symbol function_parameters) [63381 63384]))                                  
                                :documentation "
             *pad*
                amount of padding
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [63362 63556])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [63579 63583])
                                    ("x0" variable nil (reparse-symbol function_parameters) [63585 63587])
                                    ("y0" variable nil (reparse-symbol function_parameters) [63589 63591])
                                    ("width" variable nil (reparse-symbol function_parameters) [63593 63598])
                                    ("height" variable nil (reparse-symbol function_parameters) [63600 63606])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [63608 63621]))                                  )
                                (reparse-symbol indented_block_body) [63565 64094]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [63279 64094])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [64099 64129])
                    ("Circle" type
                       (:documentation "A simple circle box."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float
                The amount of padding around the original box.
            \"\"\"" code nil (reparse-symbol indented_block_body) [64240 64392])
                                    ("self" variable nil (reparse-symbol indented_block_body) [64405 64419])
                                    ("super" code nil (reparse-symbol indented_block_body) [64432 64471]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [64212 64216])
                                    ("pad" variable nil (reparse-symbol function_parameters) [64218 64221]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float
                The amount of padding around the original box.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [64199 64472])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [64495 64499])
                                    ("x0" variable nil (reparse-symbol function_parameters) [64501 64503])
                                    ("y0" variable nil (reparse-symbol function_parameters) [64505 64507])
                                    ("width" variable nil (reparse-symbol function_parameters) [64509 64514])
                                    ("height" variable nil (reparse-symbol function_parameters) [64516 64522])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [64524 64537]))                                  )
                                (reparse-symbol indented_block_body) [64481 64849]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [64135 64849])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [64854 64884])
                    ("LArrow" type
                       (:documentation "
        (left) Arrow Box
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [65009 65023])
                                    ("super" code nil (reparse-symbol indented_block_body) [65036 65075]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [64981 64985])
                                    ("pad" variable nil (reparse-symbol function_parameters) [64987 64990]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [64968 65076])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65099 65103])
                                    ("x0" variable nil (reparse-symbol function_parameters) [65105 65107])
                                    ("y0" variable nil (reparse-symbol function_parameters) [65109 65111])
                                    ("width" variable nil (reparse-symbol function_parameters) [65113 65118])
                                    ("height" variable nil (reparse-symbol function_parameters) [65120 65126])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [65128 65141]))                                  )
                                (reparse-symbol indented_block_body) [65085 66052]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [64890 66052])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [66056 66086])
                    ("RArrow" type
                       (:documentation "
        (right) Arrow Box
        "
                        :superclasses ("LArrow")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [66214 66256]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [66186 66190])
                                    ("pad" variable nil (reparse-symbol function_parameters) [66192 66195]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [66173 66257])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [66280 66284])
                                    ("x0" variable nil (reparse-symbol function_parameters) [66286 66288])
                                    ("y0" variable nil (reparse-symbol function_parameters) [66290 66292])
                                    ("width" variable nil (reparse-symbol function_parameters) [66294 66299])
                                    ("height" variable nil (reparse-symbol function_parameters) [66301 66307])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [66309 66322]))                                  )
                                (reparse-symbol indented_block_body) [66266 66542]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [66092 66542])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [66547 66577])
                    ("DArrow" type
                       (:documentation "
        (Double) Arrow Box
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [66803 66817])
                                    ("super" code nil (reparse-symbol indented_block_body) [66830 66869]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [66775 66779])
                                    ("pad" variable nil (reparse-symbol function_parameters) [66781 66784]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [66762 66870])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [66893 66897])
                                    ("x0" variable nil (reparse-symbol function_parameters) [66899 66901])
                                    ("y0" variable nil (reparse-symbol function_parameters) [66903 66905])
                                    ("width" variable nil (reparse-symbol function_parameters) [66907 66912])
                                    ("height" variable nil (reparse-symbol function_parameters) [66914 66920])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [66922 66935]))                                  )
                                (reparse-symbol indented_block_body) [66879 68187]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [66583 68187])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [68192 68222])
                    ("Round" type
                       (:documentation "
        A box with round corners.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *rounding_size*
              rounding radius of corners. *pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [68376 68530])
                                    ("self" variable nil (reparse-symbol indented_block_body) [68543 68557])
                                    ("self" variable nil (reparse-symbol indented_block_body) [68570 68604])
                                    ("super" code nil (reparse-symbol indented_block_body) [68617 68655]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [68328 68332])
                                    ("pad" variable nil (reparse-symbol function_parameters) [68334 68337])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [68343 68356]))                                  
                                :documentation "
            *pad*
              amount of padding

            *rounding_size*
              rounding radius of corners. *pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [68315 68656])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [68679 68683])
                                    ("x0" variable nil (reparse-symbol function_parameters) [68685 68687])
                                    ("y0" variable nil (reparse-symbol function_parameters) [68689 68691])
                                    ("width" variable nil (reparse-symbol function_parameters) [68693 68698])
                                    ("height" variable nil (reparse-symbol function_parameters) [68700 68706])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [68708 68721]))                                  )
                                (reparse-symbol indented_block_body) [68665 70070]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [68228 70070])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [70075 70103])
                    ("Round4" type
                       (:documentation "
        Another box with round edges.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *rounding_size*
              rounding size of edges. *pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [70262 70412])
                                    ("self" variable nil (reparse-symbol indented_block_body) [70426 70440])
                                    ("self" variable nil (reparse-symbol indented_block_body) [70453 70487])
                                    ("super" code nil (reparse-symbol indented_block_body) [70500 70539]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [70214 70218])
                                    ("pad" variable nil (reparse-symbol function_parameters) [70220 70223])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [70229 70242]))                                  
                                :documentation "
            *pad*
              amount of padding

            *rounding_size*
              rounding size of edges. *pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [70201 70540])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [70563 70567])
                                    ("x0" variable nil (reparse-symbol function_parameters) [70569 70571])
                                    ("y0" variable nil (reparse-symbol function_parameters) [70573 70575])
                                    ("width" variable nil (reparse-symbol function_parameters) [70577 70582])
                                    ("height" variable nil (reparse-symbol function_parameters) [70584 70590])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [70592 70605]))                                  )
                                (reparse-symbol indented_block_body) [70549 71776]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [70109 71776])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [71781 71811])
                    ("Sawtooth" type
                       (:documentation "
        A sawtooth box.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [71955 72099])
                                    ("self" variable nil (reparse-symbol indented_block_body) [72112 72126])
                                    ("self" variable nil (reparse-symbol indented_block_body) [72139 72167])
                                    ("super" code nil (reparse-symbol indented_block_body) [72180 72221]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [71910 71914])
                                    ("pad" variable nil (reparse-symbol function_parameters) [71916 71919])
                                    ("tooth_size" variable nil (reparse-symbol function_parameters) [71925 71935]))                                  
                                :documentation "
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [71897 72222])
                            ("_get_sawtooth_vertices" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [72258 72262])
                                    ("x0" variable nil (reparse-symbol function_parameters) [72264 72266])
                                    ("y0" variable nil (reparse-symbol function_parameters) [72268 72270])
                                    ("width" variable nil (reparse-symbol function_parameters) [72272 72277])
                                    ("height" variable nil (reparse-symbol function_parameters) [72279 72285])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [72287 72300]))                                  )
                                (reparse-symbol indented_block_body) [72231 75402])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [75425 75429])
                                    ("x0" variable nil (reparse-symbol function_parameters) [75431 75433])
                                    ("y0" variable nil (reparse-symbol function_parameters) [75435 75437])
                                    ("width" variable nil (reparse-symbol function_parameters) [75439 75444])
                                    ("height" variable nil (reparse-symbol function_parameters) [75446 75452])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [75454 75467]))                                  )
                                (reparse-symbol indented_block_body) [75411 75694]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [71817 75694])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [75699 75733])
                    ("Roundtooth" type
                       (:documentation "A rounded tooth box."
                        :superclasses ("Sawtooth")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [75868 76012])
                                    ("super" code nil (reparse-symbol indented_block_body) [76025 76083]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [75823 75827])
                                    ("pad" variable nil (reparse-symbol function_parameters) [75829 75832])
                                    ("tooth_size" variable nil (reparse-symbol function_parameters) [75838 75848]))                                  
                                :documentation "
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [75810 76084])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [76107 76111])
                                    ("x0" variable nil (reparse-symbol function_parameters) [76113 76115])
                                    ("y0" variable nil (reparse-symbol function_parameters) [76117 76119])
                                    ("width" variable nil (reparse-symbol function_parameters) [76121 76126])
                                    ("height" variable nil (reparse-symbol function_parameters) [76128 76134])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [76136 76149]))                                  )
                                (reparse-symbol indented_block_body) [76093 76772]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [75739 76772])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [76777 76815])
                    ("if" code nil (reparse-symbol indented_block_body) [76821 77000]))                  
                :type "class")
                nil [59555 77000])
            ("docstring" code nil nil [77001 77148])
            ("FancyBboxPatch" type
               (:documentation "
    Draw a fancy box around a rectangle with lower left at *xy*=(*x*,
    *y*) with specified width and height.

    :class:`FancyBboxPatch` class is similar to :class:`Rectangle`
    class, but it draws a fancy box around the rectangle. The
    transformation of the rectangle box to the fancy box is delegated
    to the :class:`BoxTransmuterBase` and its derived classes.

    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [77577 77597])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77615 77619]))                          )
                        (reparse-symbol indented_block_body) [77603 77804])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy* = lower left corner

        *width*, *height*

        *boxstyle* determines what kind of fancy box will be drawn. It
        can be a string of the style name with a comma separated
        attribute, or an instance of :class:`BoxStyle`. Following box
        styles are available.

        %(AvailableBoxstyles)s

        *mutation_scale* : a value with which attributes of boxstyle
        (e.g., pad) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
        squeezed by this value before the mutation and the mutated
        box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [78062 78766])
                            ("Patch" code nil (reparse-symbol indented_block_body) [78776 78806])
                            ("self" variable nil (reparse-symbol indented_block_body) [78816 78831])
                            ("self" variable nil (reparse-symbol indented_block_body) [78840 78855])
                            ("self" variable nil (reparse-symbol indented_block_body) [78864 78883])
                            ("self" variable nil (reparse-symbol indented_block_body) [78892 78913])
                            ("if" code nil (reparse-symbol indented_block_body) [78923 79222])
                            ("self" variable nil (reparse-symbol indented_block_body) [79231 79268])
                            ("self" variable nil (reparse-symbol indented_block_body) [79277 79316])
                            ("self" variable nil (reparse-symbol indented_block_body) [79326 79343]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77852 77856])
                            ("xy" variable nil (reparse-symbol function_parameters) [77858 77860])
                            ("width" variable nil (reparse-symbol function_parameters) [77862 77867])
                            ("height" variable nil (reparse-symbol function_parameters) [77869 77875])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [77894 77902])
                            ("bbox_transmuter" variable nil (reparse-symbol function_parameters) [77929 77944])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [77968 77982])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [78004 78019])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [78043 78051]))                          
                        :documentation "
        *xy* = lower left corner

        *width*, *height*

        *boxstyle* determines what kind of fancy box will be drawn. It
        can be a string of the style name with a comma separated
        attribute, or an instance of :class:`BoxStyle`. Following box
        styles are available.

        %(AvailableBoxstyles)s

        *mutation_scale* : a value with which attributes of boxstyle
        (e.g., pad) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
        squeezed by this value before the mutation and the mutated
        box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [77809 79344])
                    ("set_boxstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79396 79400])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [79402 79410])
                            ("kw" variable nil (reparse-symbol function_parameters) [79417 79421]))                          
                        :documentation "
        Set the box style.

        *boxstyle* can be a string with boxstyle name with optional
        comma-separated attributes. Alternatively, the attrs can
        be provided as keywords::

            set_boxstyle(\"round,pad=0.2\")
            set_boxstyle(\"round\", pad=0.2)

        Old attrs simply are forgotten.

        Without argument (or with *boxstyle* = None), it returns
        available box styles.

        The following boxstyles are available:
        %(AvailableBoxstyles)s

        ACCEPTS: %(ListBoxstyles)s

        ")
                        (reparse-symbol indented_block_body) [79349 80273])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80301 80305])
                            ("scale" variable nil (reparse-symbol function_parameters) [80307 80312]))                          
                        :documentation "
        Set the mutation scale.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [80278 80458])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80486 80490]))                          
                        :documentation "
        Return the mutation scale.
        ")
                        (reparse-symbol indented_block_body) [80463 80588])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80617 80621])
                            ("aspect" variable nil (reparse-symbol function_parameters) [80623 80629]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [80593 80796])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80825 80829]))                          
                        :documentation "
        Return the aspect ratio of the bbox mutation.
        ")
                        (reparse-symbol indented_block_body) [80801 80947])
                    ("get_boxstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80969 80973]))                          )
                        (reparse-symbol indented_block_body) [80952 81050])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81068 81072]))                          
                        :documentation "
        Return the mutated path of the rectangle
        ")
                        (reparse-symbol indented_block_body) [81055 81414])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81493 81497]))                          )
                        (reparse-symbol indented_block_body) [81483 81572])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81587 81591]))                          )
                        (reparse-symbol indented_block_body) [81577 81668])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81687 81691]))                          )
                        (reparse-symbol indented_block_body) [81673 81766])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81786 81790]))                          )
                        (reparse-symbol indented_block_body) [81771 81866])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81881 81885])
                            ("x" variable nil (reparse-symbol function_parameters) [81887 81888]))                          
                        :documentation "
        Set the left coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [81871 82029])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82044 82048])
                            ("y" variable nil (reparse-symbol function_parameters) [82050 82051]))                          
                        :documentation "
        Set the bottom coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [82034 82194])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82213 82217])
                            ("w" variable nil (reparse-symbol function_parameters) [82219 82220]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [82199 82353])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82373 82377])
                            ("h" variable nil (reparse-symbol function_parameters) [82379 82380]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [82358 82514])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82534 82538])
                            ("args" variable nil (reparse-symbol function_parameters) [82540 82545]))                          
                        :documentation "
        Set the bounds of the rectangle: l,b,w,h

        ACCEPTS: (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [82519 82888])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82906 82910]))                          )
                        (reparse-symbol indented_block_body) [82893 83044]))                  
                :type "class")
                nil [77151 83044])
            ("ConnectionStyle" type
               (:documentation "
    :class:`ConnectionStyle` is a container class which defines
    several connectionstyle classes, which is used to create a path
    between two points. These are mainly used with
    :class:`FancyArrowPatch`.

    A connectionstyle object can be either created as::

           ConnectionStyle.Arc3(rad=0.2)

    or::

           ConnectionStyle(\"Arc3\", rad=0.2)

    or::

           ConnectionStyle(\"Arc3, rad=0.2\")

    The following classes are defined

    %(AvailableConnectorstyles)s


    An instance of any connection style class is an callable object,
    whose call signature is::

        __call__(self, posA, posB,
                 patchA=None, patchB=None,
                 shrinkA=2., shrinkB=2.)

    and it returns a :class:`Path` instance. *posA* and *posB* are
    tuples of x,y coordinates of the two points to be
    connected. *patchA* (or *patchB*) is given, the returned path is
    clipped so that it start (or end) from the boundary of the
    patch. The path is further shrunk by *shrinkA* (or *shrinkB*)
    which is given in points.

    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [84165 84181])
                    ("_Base" type
                       (:documentation "
        A base class for connectionstyle classes. The subclass needs
        to implement a *connect* method whose call signature is::

          connect(posA, posB)

        where posA and posB are tuples of x, y coordinates to be
        connected.  The method needs to return a path connecting two
        points. This base class defines a __call__ method, and a few
        helper methods.
        "
                        :superclasses ("object")
                        :members 
                          ( ("SimpleEvent" type
                               (:members 
                                  ( ("__init__" function
                                       (:suite 
                                          ( ("self, self" code nil (reparse-symbol indented_block_body) [84706 84725]))                                          
                                        :parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [84679 84683])
                                            ("xy" variable nil (reparse-symbol function_parameters) [84685 84687]))                                          
                                        :constructor-flag t)
                                        (reparse-symbol indented_block_body) [84666 84726]))                                  
                                :type "class")
                                (reparse-symbol indented_block_body) [84635 84726])
                            ("_clip" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [84745 84749])
                                    ("path" variable nil (reparse-symbol function_parameters) [84751 84755])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [84757 84763])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [84765 84771]))                                  
                                :documentation "
            Clip the path to the boundary of the patchA and patchB.
            The starting point of the path needed to be inside of the
            patchA and the end point inside the patch B. The *contains*
            methods of each patch object is utilized to test if the point
            is inside the path.
            ")
                                (reparse-symbol indented_block_body) [84735 85913])
                            ("_shrink" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [85934 85938])
                                    ("path" variable nil (reparse-symbol function_parameters) [85940 85944])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [85946 85953])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [85955 85962]))                                  
                                :documentation "
            Shrink the path by fixed size (in points) with shrinkA and shrinkB
            ")
                                (reparse-symbol indented_block_body) [85922 86702])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [86724 86728])
                                    ("posA" variable nil (reparse-symbol function_parameters) [86730 86734])
                                    ("posB" variable nil (reparse-symbol function_parameters) [86736 86740])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [86763 86770])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [86775 86782])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [86787 86793])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [86800 86806]))                                  
                                :documentation "
            Calls the *connect* method to create a path between *posA*
             and *posB*. The path is clipped and shrunken.
            ")
                                (reparse-symbol indented_block_body) [86711 87185])
                            ("__reduce__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [87209 87213]))                                  )
                                (reparse-symbol indented_block_body) [87194 87524]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [84187 87524])
                    ("Arc3" type
                       (:documentation "
        Creates a simple quadratic bezier curve between two
        points. The curve is created so that the middle control point
        (C1) is located at the same distance from the start (C0) and
        end points(C2) and the distance of the C1 to the line
        connecting C0-C2 is *rad* times the distance of C0-C2.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *rad*
              curvature of the curve.
            \"\"\"" code nil (reparse-symbol indented_block_body) [87945 88020])
                                    ("self" variable nil (reparse-symbol indented_block_body) [88033 88047]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [87918 87922])
                                    ("rad" variable nil (reparse-symbol function_parameters) [87924 87927]))                                  
                                :documentation "
            *rad*
              curvature of the curve.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [87905 88048])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [88069 88073])
                                    ("posA" variable nil (reparse-symbol function_parameters) [88075 88079])
                                    ("posB" variable nil (reparse-symbol function_parameters) [88081 88085]))                                  )
                                (reparse-symbol indented_block_body) [88057 88554]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [87529 88554])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [88559 88585])
                    ("Angle3" type
                       (:documentation "
        Creates a simple quadratic bezier curve between two
        points. The middle control points is placed at the
        intersecting point of two lines which crosses the start (or
        end) point and has a angle of angleA (or angleB).
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            \"\"\"" code nil (reparse-symbol indented_block_body) [88943 89085])
                                    ("self" variable nil (reparse-symbol indented_block_body) [89099 89119])
                                    ("self" variable nil (reparse-symbol indented_block_body) [89132 89152]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [88903 88907])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [88909 88915])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [88920 88926]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [88890 89153])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [89174 89178])
                                    ("posA" variable nil (reparse-symbol function_parameters) [89180 89184])
                                    ("posB" variable nil (reparse-symbol function_parameters) [89186 89190]))                                  )
                                (reparse-symbol indented_block_body) [89162 89740]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [88591 89740])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [89745 89775])
                    ("Angle" type
                       (:documentation "
        Creates a picewise continuous quadratic bezier path between
        two points. The path has a one passing-through point placed at
        the intersecting point of two lines which crosses the start
        (or end) point and has a angle of angleA (or angleB).  The
        connecting edges are rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            \"\"\"" code nil (reparse-symbol indented_block_body) [90218 90421])
                                    ("self" variable nil (reparse-symbol indented_block_body) [90435 90455])
                                    ("self" variable nil (reparse-symbol indented_block_body) [90468 90488])
                                    ("self" variable nil (reparse-symbol indented_block_body) [90502 90516]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [90170 90174])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [90176 90182])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [90187 90193])
                                    ("rad" variable nil (reparse-symbol function_parameters) [90197 90200]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [90157 90517])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [90538 90542])
                                    ("posA" variable nil (reparse-symbol function_parameters) [90544 90548])
                                    ("posB" variable nil (reparse-symbol function_parameters) [90550 90554]))                                  )
                                (reparse-symbol indented_block_body) [90526 91769]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [89781 91769])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [91774 91802])
                    ("Arc" type
                       (:documentation "
        Creates a picewise continuous quadratic bezier path between
        two points. The path can have two passing-through points, a
        point placed at the distance of armA and angle of angleA from
        point A, another point with respect to point B. The edges are
        rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            \"\"\"" code nil (reparse-symbol indented_block_body) [92245 92579])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92593 92613])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92626 92646])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92659 92675])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92688 92704])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92718 92732]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [92176 92180])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [92182 92188])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [92192 92198])
                                    ("armA" variable nil (reparse-symbol function_parameters) [92202 92206])
                                    ("armB" variable nil (reparse-symbol function_parameters) [92213 92217])
                                    ("rad" variable nil (reparse-symbol function_parameters) [92224 92227]))                                  
                                :documentation "
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [92163 92733])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [92754 92758])
                                    ("posA" variable nil (reparse-symbol function_parameters) [92760 92764])
                                    ("posB" variable nil (reparse-symbol function_parameters) [92766 92770]))                                  )
                                (reparse-symbol indented_block_body) [92742 94874]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [91808 94874])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [94879 94903])
                    ("Bar" type
                       (:documentation "
        A line with *angle* between A and B with *armA* and
        *armB*. One of the arms is extended so that they are connected in
        a right angle. The length of armA is determined by (*armA*
        + *fraction* x AB distance). Same for armB.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            armA : float
                minimum length of armA

            armB : float
                minimum length of armB

            fraction : float
                a fraction of the distance between two points that
                will be added to armA and armB.

            angle : float or None
                angle of the connecting line (if None, parallel
                to A and B)
            \"\"\"" code nil (reparse-symbol indented_block_body) [95289 95755])
                                    ("self" variable nil (reparse-symbol indented_block_body) [95768 95784])
                                    ("self" variable nil (reparse-symbol indented_block_body) [95797 95813])
                                    ("self" variable nil (reparse-symbol indented_block_body) [95826 95850])
                                    ("self" variable nil (reparse-symbol indented_block_body) [95863 95881]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [95226 95230])
                                    ("armA" variable nil (reparse-symbol function_parameters) [95232 95236])
                                    ("armB" variable nil (reparse-symbol function_parameters) [95241 95245])
                                    ("fraction" variable nil (reparse-symbol function_parameters) [95250 95258])
                                    ("angle" variable nil (reparse-symbol function_parameters) [95264 95269]))                                  
                                :documentation "
            Parameters
            ----------
            armA : float
                minimum length of armA

            armB : float
                minimum length of armB

            fraction : float
                a fraction of the distance between two points that
                will be added to armA and armB.

            angle : float or None
                angle of the connecting line (if None, parallel
                to A and B)
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [95213 95882])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [95903 95907])
                                    ("posA" variable nil (reparse-symbol function_parameters) [95909 95913])
                                    ("posB" variable nil (reparse-symbol function_parameters) [95915 95919]))                                  )
                                (reparse-symbol indented_block_body) [95891 97235]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [94909 97235])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [97240 97264])
                    ("if" code nil (reparse-symbol indented_block_body) [97270 97399]))                  
                :type "class")
                nil [83046 97399])
            ("_point_along_a_line" function
               (:documentation "
    find a point along a line connecting (x0, y0) -- (x1, y1) whose
    distance from (x0, y0) is d.
    "
                :arguments 
                  ( ("x0" variable nil (reparse-symbol function_parameters) [97425 97427])
                    ("y0" variable nil (reparse-symbol function_parameters) [97429 97431])
                    ("x1" variable nil (reparse-symbol function_parameters) [97433 97435])
                    ("y1" variable nil (reparse-symbol function_parameters) [97437 97439])
                    ("d" variable nil (reparse-symbol function_parameters) [97441 97442]))                  )
                nil [97401 97690])
            ("ArrowStyle" type
               (:documentation "
    :class:`ArrowStyle` is a container class which defines several
    arrowstyle classes, which is used to create an arrow path along a
    given path. These are mainly used with :class:`FancyArrowPatch`.

    A arrowstyle object can be either created as::

           ArrowStyle.Fancy(head_length=.4, head_width=.4, tail_width=.4)

    or::

           ArrowStyle(\"Fancy\", head_length=.4, head_width=.4, tail_width=.4)

    or::

           ArrowStyle(\"Fancy, head_length=.4, head_width=.4, tail_width=.4\")

    The following classes are defined

    %(AvailableArrowstyles)s


    An instance of any arrow style class is a callable object,
    whose call signature is::

        __call__(self, path, mutation_size, linewidth, aspect_ratio=1.)

    and it returns a tuple of a :class:`Path` instance and a boolean
    value. *path* is a :class:`Path` instance along which the arrow
    will be drawn. *mutation_size* and *aspect_ratio* have the same
    meaning as in :class:`BoxStyle`. *linewidth* is a line width to be
    stroked. This is meant to be used to correct the location of the
    head so that it does not overshoot the destination point, but not all
    classes support it.
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [98929 98945])
                    ("_Base" type
                       (:documentation "
        Arrow Transmuter Base class

        ArrowTransmuterBase and its derivatives are used to make a fancy
        arrow around a given path. The __call__ method returns a path
        (which will be used to create a PathPatch instance) and a boolean
        value indicating the path is open therefore is not fillable.  This
        class is not an artist and actual drawing of the fancy arrow is
        done by the FancyArrowPatch class.

        "
                        :superclasses ("object")
                        :members 
                          ( ("ensure_quadratic_bezier" function
                               (:typemodifiers ("static")
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  
                                :arguments 
                                  ( ("path" variable nil (reparse-symbol function_parameters) [99675 99679]))                                  
                                :documentation " Some ArrowStyle class only wokrs with a simple
            quaratic bezier curve (created with Arc3Connetion or
            Angle3Connector). This static method is to check if the
            provided path is a simple quadratic bezier curve and returns
            its control points if true.
            ")
                                (reparse-symbol indented_block_body) [99625 100348])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [100371 100375])
                                    ("path" variable nil (reparse-symbol function_parameters) [100377 100381])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [100383 100396])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [100398 100407]))                                  
                                :documentation "
            The transmute method is the very core of the ArrowStyle
            class and must be overridden in the subclasses. It receives
            the path object along which the arrow will be drawn, and
            the mutation_size, with which the arrow head etc.
            will be scaled. The linewidth may be used to adjust
            the path so that it does not pass beyond the given
            points. It returns a tuple of a Path instance and a
            boolean. The boolean value indicate whether the path can
            be filled or not. The return value can also be a list of paths
            and list of booleans of a same length.
            ")
                                (reparse-symbol indented_block_body) [100357 101163])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [101185 101189])
                                    ("path" variable nil (reparse-symbol function_parameters) [101191 101195])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [101197 101210])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [101212 101221])
                                    ("aspect_ratio" variable nil (reparse-symbol function_parameters) [101244 101256]))                                  
                                :documentation "
            The __call__ method is a thin wrapper around the transmute method
            and take care of the aspect ratio.
            ")
                                (reparse-symbol indented_block_body) [101172 102597])
                            ("__reduce__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [102621 102625]))                                  )
                                (reparse-symbol indented_block_body) [102606 102931]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [98951 102931])
                    ("_Curve" type
                       (:documentation "
        A simple arrow which will work with any path instance. The
        returned path is simply concatenation of the original path + at
        most two paths representing the arrow head at the begin point and the
        at the end point. The arrow heads can be either open or closed.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            The arrows are drawn if *beginarrow* and/or *endarrow* are
            true. *head_length* and *head_width* determines the size
            of the arrow relative to the *mutation scale*.  The
            arrowhead at the begin (or end) is closed if fillbegin (or
            fillend) is True.
            \"\"\"" code nil (reparse-symbol indented_block_body) [103448 103772])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [103785 103838])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [103851 103910])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [103923 103972])
                                    ("super" code nil (reparse-symbol indented_block_body) [103985 104026]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [103292 103296])
                                    ("beginarrow" variable nil (reparse-symbol function_parameters) [103298 103308])
                                    ("endarrow" variable nil (reparse-symbol function_parameters) [103315 103323])
                                    ("fillbegin" variable nil (reparse-symbol function_parameters) [103351 103360])
                                    ("fillend" variable nil (reparse-symbol function_parameters) [103368 103375])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [103404 103415])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [103420 103430]))                                  
                                :documentation "
            The arrows are drawn if *beginarrow* and/or *endarrow* are
            true. *head_length* and *head_width* determines the size
            of the arrow relative to the *mutation scale*.  The
            arrowhead at the begin (or end) is closed if fillbegin (or
            fillend) is True.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [103279 104027])
                            ("_get_arrow_wedge" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [104057 104061])
                                    ("x0" variable nil (reparse-symbol function_parameters) [104063 104065])
                                    ("y0" variable nil (reparse-symbol function_parameters) [104067 104069])
                                    ("x1" variable nil (reparse-symbol function_parameters) [104071 104073])
                                    ("y1" variable nil (reparse-symbol function_parameters) [104075 104077])
                                    ("head_dist" variable nil (reparse-symbol function_parameters) [104108 104117])
                                    ("cos_t" variable nil (reparse-symbol function_parameters) [104119 104124])
                                    ("sin_t" variable nil (reparse-symbol function_parameters) [104126 104131])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [104133 104142]))                                  
                                :documentation "
            Return the paths for arrow heads. Since arrow lines are
            drawn with capstyle=projected, The arrow goes beyond the
            desired point. This method also returns the amount of the path
            to be shrunken so that it does not overshoot.
            ")
                                (reparse-symbol indented_block_body) [104036 105662])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [105685 105689])
                                    ("path" variable nil (reparse-symbol function_parameters) [105691 105695])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [105697 105710])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [105712 105721]))                                  )
                                (reparse-symbol indented_block_body) [105671 108678]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [102936 108678])
                    ("Curve" type
                       (:documentation "
        A simple curve without any arrow head.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [108816 108905]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [108797 108801]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [108784 108906]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [108683 108906])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [108911 108935])
                    ("CurveA" type
                       (:documentation "
        An arrow with a head at its begin point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [109108 109368])
                                    ("super" code nil (reparse-symbol indented_block_body) [109382 109539]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [109058 109062])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [109064 109075])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [109080 109090]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [109045 109540]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [108941 109540])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [109545 109571])
                    ("CurveB" type
                       (:documentation "
        An arrow with a head at its end point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [109742 110002])
                                    ("super" code nil (reparse-symbol indented_block_body) [110016 110169]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [109692 109696])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [109698 109709])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [109714 109724]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [109679 110170]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [109577 110170])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [110175 110201])
                    ("CurveAB" type
                       (:documentation "
        An arrow with heads both at the begin and the end point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [110391 110651])
                                    ("super" code nil (reparse-symbol indented_block_body) [110665 110818]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [110341 110345])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [110347 110358])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [110363 110373]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [110328 110819]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [110207 110819])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [110824 110852])
                    ("CurveFilledA" type
                       (:documentation "
        An arrow with filled triangle head at the begin.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [111039 111299])
                                    ("super" code nil (reparse-symbol indented_block_body) [111313 111519]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [110989 110993])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [110995 111006])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [111011 111021]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [110976 111520]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [110858 111520])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [111525 111558])
                    ("CurveFilledB" type
                       (:documentation "
        An arrow with filled triangle head at the end.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [111743 112003])
                                    ("super" code nil (reparse-symbol indented_block_body) [112017 112223]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [111693 111697])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [111699 111710])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [111715 111725]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [111680 112224]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [111564 112224])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [112229 112262])
                    ("CurveFilledAB" type
                       (:documentation "
        An arrow with filled triangle heads at both ends.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [112451 112711])
                                    ("super" code nil (reparse-symbol indented_block_body) [112725 112930]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [112401 112405])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [112407 112418])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [112423 112433]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [112388 112931]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [112268 112931])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [112936 112972])
                    ("_Bracket" type
                       (:superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self, self" code nil (reparse-symbol indented_block_body) [113256 113305])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [113318 113359])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [113372 113417])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [113430 113471])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [113484 113525]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [113023 113027])
                                    ("bracketA" variable nil (reparse-symbol function_parameters) [113029 113037])
                                    ("bracketB" variable nil (reparse-symbol function_parameters) [113044 113052])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [113080 113086])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [113091 113097])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [113123 113130])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [113136 113143])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [113170 113176])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [113183 113189])
                                    ("scaleA" variable nil (reparse-symbol function_parameters) [113217 113223])
                                    ("scaleB" variable nil (reparse-symbol function_parameters) [113230 113236]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [113010 113526])
                            ("_get_bracket" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [113552 113556])
                                    ("x0" variable nil (reparse-symbol function_parameters) [113558 113560])
                                    ("y0" variable nil (reparse-symbol function_parameters) [113562 113564])
                                    ("cos_t" variable nil (reparse-symbol function_parameters) [113591 113596])
                                    ("sin_t" variable nil (reparse-symbol function_parameters) [113598 113603])
                                    ("width" variable nil (reparse-symbol function_parameters) [113605 113610])
                                    ("length" variable nil (reparse-symbol function_parameters) [113612 113618]))                                  )
                                (reparse-symbol indented_block_body) [113535 114242])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [114265 114269])
                                    ("path" variable nil (reparse-symbol function_parameters) [114271 114275])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [114277 114290])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [114292 114301]))                                  )
                                (reparse-symbol indented_block_body) [114251 115862]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [112978 115862])
                    ("BracketAB" type
                       (:documentation "
        An arrow with a bracket(]) at both ends.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            lengthA : float, optional, default : 0.2
                Length of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line

            widthB : float, optional, default : 1.0
                Width of the bracket

            lengthB : float, optional, default : 0.2
                Length of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [116124 116770])
                                    ("super" code nil (reparse-symbol indented_block_body) [116784 117005]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [115989 115993])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [116016 116022])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [116027 116034])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [116040 116046])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [116074 116080])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [116085 116092])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [116098 116104]))                                  
                                :documentation "
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            lengthA : float, optional, default : 0.2
                Length of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line

            widthB : float, optional, default : 1.0
                Width of the bracket

            lengthB : float, optional, default : 0.2
                Length of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [115976 117006]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [115867 117006])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [117011 117041])
                    ("BracketA" type
                       (:documentation "
        An arrow with a bracket(])  at its end.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            lengthA : float, optional, default : 0.2
                Length of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [117223 117578])
                                    ("super" code nil (reparse-symbol indented_block_body) [117592 117854]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [117167 117171])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [117173 117179])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [117184 117191])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [117197 117203]))                                  
                                :documentation "
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            lengthA : float, optional, default : 0.2
                Length of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [117154 117855]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [117047 117855])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [117860 117888])
                    ("BracketB" type
                       (:documentation "
        An arrow with a bracket([)  at its end.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthB : float, optional, default : 1.0
                Width of the bracket

            lengthB : float, optional, default : 0.2
                Length of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [118070 118425])
                                    ("super" code nil (reparse-symbol indented_block_body) [118439 118701]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [118014 118018])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [118020 118026])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [118031 118038])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [118044 118050]))                                  
                                :documentation "
            Parameters
            ----------
            widthB : float, optional, default : 1.0
                Width of the bracket

            lengthB : float, optional, default : 0.2
                Length of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [118001 118702]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [117894 118702])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [118707 118735])
                    ("BarAB" type
                       (:documentation "
        An arrow with a bar(|) at both ends.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line

            widthB : float, optional, default : 1.0
                Width of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [118964 119426])
                                    ("super" code nil (reparse-symbol indented_block_body) [119440 119621]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [118855 118859])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [118882 118888])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [118893 118899])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [118927 118933])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [118938 118944]))                                  
                                :documentation "
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line

            widthB : float, optional, default : 1.0
                Width of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [118842 119622]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [118741 119622])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [119627 119653])
                    ("Simple" type
                       (:documentation "
        A simple arrow. Only works with a quadratic bezier curve.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.5
                Length of the arrow head

            head_width : float, optional, default : 0.5
                Width of the arrow head

            tail_width : float, optional, default : 0.2
                Width of the arrow tail
            \"\"\"" code nil (reparse-symbol indented_block_body) [119857 120214])
                                    ("self, self, self" code nil (reparse-symbol indented_block_body) [120228 120334])
                                    ("super" code nil (reparse-symbol indented_block_body) [120347 120388]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [119792 119796])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [119798 119809])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [119814 119824])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [119829 119839]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.5
                Length of the arrow head

            head_width : float, optional, default : 0.5
                Width of the arrow head

            tail_width : float, optional, default : 0.2
                Width of the arrow tail
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [119779 120389])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [120412 120416])
                                    ("path" variable nil (reparse-symbol function_parameters) [120418 120422])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [120424 120437])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [120439 120448]))                                  )
                                (reparse-symbol indented_block_body) [120398 123279]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [119659 123279])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [123284 123314])
                    ("Fancy" type
                       (:documentation "
        A fancy arrow. Only works with a quadratic bezier curve.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.4
                Width of the arrow head

            tail_width : float, optional, default : 0.4
                Width of the arrow tail
            \"\"\"" code nil (reparse-symbol indented_block_body) [123516 123873])
                                    ("self, self, self" code nil (reparse-symbol indented_block_body) [123887 123993])
                                    ("super" code nil (reparse-symbol indented_block_body) [124006 124046]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [123451 123455])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [123457 123468])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [123473 123483])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [123488 123498]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.4
                Width of the arrow head

            tail_width : float, optional, default : 0.4
                Width of the arrow tail
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [123438 124047])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [124070 124074])
                                    ("path" variable nil (reparse-symbol function_parameters) [124076 124080])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [124082 124095])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [124097 124106]))                                  )
                                (reparse-symbol indented_block_body) [124056 127463]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [123320 127463])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [127468 127496])
                    ("Wedge" type
                       (:documentation "
        Wedge(?) shape. Only works with a quadratic bezier curve.  The
        begin point has a width of the tail_width and the end point has a
        width of 0. At the middle, the width is shrink_factor*tail_width.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            tail_width : float, optional, default : 0.3
                Width of the tail

            shrink_factor : float, optional, default : 0.5
                Fraction of the arrow width at the middle point
            \"\"\"" code nil (reparse-symbol indented_block_body) [127840 128119])
                                    ("self" variable nil (reparse-symbol indented_block_body) [128133 128161])
                                    ("self" variable nil (reparse-symbol indented_block_body) [128174 128208])
                                    ("super" code nil (reparse-symbol indented_block_body) [128221 128261]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [127787 127791])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [127793 127803])
                                    ("shrink_factor" variable nil (reparse-symbol function_parameters) [127808 127821]))                                  
                                :documentation "
            Parameters
            ----------
            tail_width : float, optional, default : 0.3
                Width of the tail

            shrink_factor : float, optional, default : 0.5
                Fraction of the arrow width at the middle point
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [127774 128262])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [128285 128289])
                                    ("path" variable nil (reparse-symbol function_parameters) [128291 128295])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [128297 128310])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [128312 128321]))                                  )
                                (reparse-symbol indented_block_body) [128271 129197]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [127502 129197])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [129202 129230])
                    ("if" code nil (reparse-symbol indented_block_body) [129236 129361]))                  
                :type "class")
                nil [97692 129361])
            ("docstring" code nil nil [129363 129529])
            ("FancyArrowPatch" type
               (:documentation "
    A fancy arrow patch. It draws an arrow using the :class:`ArrowStyle`.

    The head and tail positions are fixed at the specified start and end points
    of the arrow, but the size and shape (in display coordinates) of the arrow
    does not change when the axis is moved or zoomed.
    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [129870 129890])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129908 129912]))                          )
                        (reparse-symbol indented_block_body) [129896 130218])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        If *posA* and *posB* are given, a path connecting two points is
        created according to *connectionstyle*. The path will be
        clipped with *patchA* and *patchB* and further shrunken by
        *shrinkA* and *shrinkB*. An arrow is drawn along this
        resulting path using the *arrowstyle* parameter.

        Alternatively if *path* is provided, an arrow is drawn along this path
        and *patchA*, *patchB*, *shrinkA*, and *shrinkB* are ignored.

        Parameters
        ----------

        posA, posB : None, tuple, optional (default: None)
            (x,y) coordinates of arrow tail and arrow head respectively.

        path : None, Path (default: None)
            :class:`matplotlib.path.Path` instance. If provided, an arrow is
            drawn along this path and *patchA*, *patchB*, *shrinkA*, and
            *shrinkB* are ignored.

        arrowstyle : str or ArrowStyle, optional (default: 'simple')
            Describes how the fancy arrow will be
            drawn. It can be string of the available arrowstyle names,
            with optional comma-separated attributes, or an
            :class:`ArrowStyle` instance. The optional attributes are meant to
            be scaled with the *mutation_scale*. The following arrow styles are
            available:

            %(AvailableArrowstyles)s

        arrow_transmuter :
            Ignored

        connectionstyle : str, ConnectionStyle, or None, optional
        (default: 'arc3')
            Describes how *posA* and *posB* are connected. It can be an
            instance of the :class:`ConnectionStyle` class or a string of the
            connectionstyle name, with optional comma-separated attributes. The
            following connection styles are available:

            %(AvailableConnectorstyles)s

        connector :
            Ignored

        patchA, patchB : None, Patch, optional (default: None)
            Head and tail patch respectively. :class:`matplotlib.patch.Patch`
            instance.

        shrinkA, shrinkB : scalar, optional (default: 2)
            Shrinking factor of the tail and head of the arrow respectively

        mutation_scale : scalar, optional (default: 1)
            Value with which attributes of *arrowstyle* (e.g., *head_length*)
            will be scaled.

        mutation_aspect : None, scalar, optional (default: None)
            The height of the rectangle will be squeezed by this value before
            the mutation and the mutated box will be stretched by the inverse
            of it.

        dpi_cor : scalar, optional (default: 1)
            dpi_cor is currently used for linewidth-related things and shrink
            factor. Mutation scale is affected by this.

        Notes
        -----
        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [130728 133553])
                            ("Patch" code nil (reparse-symbol indented_block_body) [133562 133592])
                            ("if" code nil (reparse-symbol indented_block_body) [133602 134069])
                            ("self" variable nil (reparse-symbol indented_block_body) [134078 134098])
                            ("self" variable nil (reparse-symbol indented_block_body) [134107 134127])
                            ("self" variable nil (reparse-symbol indented_block_body) [134136 134158])
                            ("self" variable nil (reparse-symbol indented_block_body) [134167 134189])
                            ("self" variable nil (reparse-symbol indented_block_body) [134199 134225])
                            ("self" code nil (reparse-symbol indented_block_body) [134235 134266])
                            ("self" variable nil (reparse-symbol indented_block_body) [134276 134313])
                            ("self" variable nil (reparse-symbol indented_block_body) [134322 134361])
                            ("self" code nil (reparse-symbol indented_block_body) [134371 134396]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130266 130270])
                            ("posA" variable nil (reparse-symbol function_parameters) [130272 130276])
                            ("posB" variable nil (reparse-symbol function_parameters) [130283 130287])
                            ("path" variable nil (reparse-symbol function_parameters) [130311 130315])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [130339 130349])
                            ("arrow_transmuter" variable nil (reparse-symbol function_parameters) [130377 130393])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [130417 130432])
                            ("connector" variable nil (reparse-symbol function_parameters) [130458 130467])
                            ("patchA" variable nil (reparse-symbol function_parameters) [130491 130497])
                            ("patchB" variable nil (reparse-symbol function_parameters) [130521 130527])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [130551 130558])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [130579 130586])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [130607 130621])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [130642 130657])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [130681 130688])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [130709 130717]))                          
                        :documentation "
        If *posA* and *posB* are given, a path connecting two points is
        created according to *connectionstyle*. The path will be
        clipped with *patchA* and *patchB* and further shrunken by
        *shrinkA* and *shrinkB*. An arrow is drawn along this
        resulting path using the *arrowstyle* parameter.

        Alternatively if *path* is provided, an arrow is drawn along this path
        and *patchA*, *patchB*, *shrinkA*, and *shrinkB* are ignored.

        Parameters
        ----------

        posA, posB : None, tuple, optional (default: None)
            (x,y) coordinates of arrow tail and arrow head respectively.

        path : None, Path (default: None)
            :class:`matplotlib.path.Path` instance. If provided, an arrow is
            drawn along this path and *patchA*, *patchB*, *shrinkA*, and
            *shrinkB* are ignored.

        arrowstyle : str or ArrowStyle, optional (default: 'simple')
            Describes how the fancy arrow will be
            drawn. It can be string of the available arrowstyle names,
            with optional comma-separated attributes, or an
            :class:`ArrowStyle` instance. The optional attributes are meant to
            be scaled with the *mutation_scale*. The following arrow styles are
            available:

            %(AvailableArrowstyles)s

        arrow_transmuter :
            Ignored

        connectionstyle : str, ConnectionStyle, or None, optional
        (default: 'arc3')
            Describes how *posA* and *posB* are connected. It can be an
            instance of the :class:`ConnectionStyle` class or a string of the
            connectionstyle name, with optional comma-separated attributes. The
            following connection styles are available:

            %(AvailableConnectorstyles)s

        connector :
            Ignored

        patchA, patchB : None, Patch, optional (default: None)
            Head and tail patch respectively. :class:`matplotlib.patch.Patch`
            instance.

        shrinkA, shrinkB : scalar, optional (default: 2)
            Shrinking factor of the tail and head of the arrow respectively

        mutation_scale : scalar, optional (default: 1)
            Value with which attributes of *arrowstyle* (e.g., *head_length*)
            will be scaled.

        mutation_aspect : None, scalar, optional (default: None)
            The height of the rectangle will be squeezed by this value before
            the mutation and the mutated box will be stretched by the inverse
            of it.

        dpi_cor : scalar, optional (default: 1)
            dpi_cor is currently used for linewidth-related things and shrink
            factor. Mutation scale is affected by this.

        Notes
        -----
        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [130223 134397])
                    ("set_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134418 134422])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [134424 134431]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shrink factor. Mutation scale is affected by this.

        Parameters
        ----------
        dpi_cor : scalar
        ")
                        (reparse-symbol indented_block_body) [134402 134706])
                    ("get_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134727 134731]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shrink factor. Mutation scale is affected by this.

        Returns
        -------
        dpi_cor : scalar
        ")
                        (reparse-symbol indented_block_body) [134711 134971])
                    ("set_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134994 134998])
                            ("posA" variable nil (reparse-symbol function_parameters) [135000 135004])
                            ("posB" variable nil (reparse-symbol function_parameters) [135006 135010]))                          
                        :documentation "
        Set the begin and end positions of the connecting path.

        Parameters
        ----------
        posA, posB : None, tuple
            (x,y) coordinates of arrow tail and arrow head respectively. If
            `None` use current value.
        ")
                        (reparse-symbol indented_block_body) [134976 135447])
                    ("set_patchA" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135467 135471])
                            ("patchA" variable nil (reparse-symbol function_parameters) [135473 135479]))                          
                        :documentation "
        Set the tail patch.

        Parameters
        ----------
        patchA : Patch
            :class:`matplotlib.patch.Patch` instance.
        ")
                        (reparse-symbol indented_block_body) [135452 135705])
                    ("set_patchB" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135725 135729])
                            ("patchB" variable nil (reparse-symbol function_parameters) [135731 135737]))                          
                        :documentation "
        Set the head patch.

        Parameters
        ----------
        patchB : Patch
            :class:`matplotlib.patch.Patch` instance.
        ")
                        (reparse-symbol indented_block_body) [135710 135963])
                    ("set_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135992 135996])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [135998 136013])
                            ("kw" variable nil (reparse-symbol function_parameters) [136015 136019]))                          
                        :documentation "
        Set the connection style. Old attributes are forgotten.

        Parameters
        ----------
        connectionstyle : None, ConnectionStyle instance, or string
            Can be a string with connectionstyle name with
            optional comma-separated attributes, e.g.::

                set_connectionstyle(\"arc,angleA=0,armA=30,rad=10\")

            Alternatively, the attributes can be provided as keywords, e.g.::

                set_connectionstyle(\"arc\", angleA=0,armA=30,rad=10)

            Without any arguments (or with ``connectionstyle=None``), return
            available styles as a list of strings.
        ")
                        (reparse-symbol indented_block_body) [135968 137031])
                    ("get_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137060 137064]))                          
                        :documentation "
        Return the :class:`ConnectionStyle` instance.
        ")
                        (reparse-symbol indented_block_body) [137036 137176])
                    ("set_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137200 137204])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [137206 137216])
                            ("kw" variable nil (reparse-symbol function_parameters) [137223 137227]))                          
                        :documentation "
        Set the arrow style. Old attributes are forgotten. Without arguments
        (or with ``arrowstyle=None``) returns available box styles as a list of
        strings.

        Parameters
        ----------
        arrowstyle : None, ArrowStyle, str, optional (default: None)
            Can be a string with arrowstyle name with optional comma-separated
            attributes, e.g.::

                set_arrowstyle(\"Fancy,head_length=0.2\")

            Alternatively attributes can be provided as keywords, e.g.::

                set_arrowstyle(\"fancy\", head_length=0.2)

        ")
                        (reparse-symbol indented_block_body) [137181 138122])
                    ("get_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138146 138150]))                          
                        :documentation "
        Return the arrowstyle object.
        ")
                        (reparse-symbol indented_block_body) [138127 138253])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138281 138285])
                            ("scale" variable nil (reparse-symbol function_parameters) [138287 138292]))                          
                        :documentation "
        Set the mutation scale.

        Parameters
        ----------
        scale : scalar
        ")
                        (reparse-symbol indented_block_body) [138258 138476])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138504 138508]))                          
                        :documentation "
        Return the mutation scale.

        Returns
        -------
        scale : scalar
        ")
                        (reparse-symbol indented_block_body) [138481 138662])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138691 138695])
                            ("aspect" variable nil (reparse-symbol function_parameters) [138697 138703]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        Parameters
        ----------
        aspect : scalar
        ")
                        (reparse-symbol indented_block_body) [138667 138909])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138938 138942]))                          
                        :documentation "
        Return the aspect ratio of the bbox mutation.
        ")
                        (reparse-symbol indented_block_body) [138914 139060])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139078 139082]))                          
                        :documentation "
        Return the path of the arrow in the data coordinates. Use
        get_path_in_displaycoord() method to retrieve the arrow path
        in display coordinates.
        ")
                        (reparse-symbol indented_block_body) [139065 139487])
                    ("get_path_in_displaycoord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139521 139525]))                          
                        :documentation "
        Return the mutated path of the arrow in display coordinates.
        ")
                        (reparse-symbol indented_block_body) [139492 140636])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140650 140654])
                            ("renderer" variable nil (reparse-symbol function_parameters) [140656 140664]))                          )
                        (reparse-symbol indented_block_body) [140641 142797]))                  
                :type "class")
                nil [129532 142797])
            ("ConnectionPatch" type
               (:documentation "
    A :class:`~matplotlib.patches.ConnectionPatch` class is to make
    connecting lines between two points (possibly in different axes).
    "
                :superclasses ("FancyArrowPatch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143009 143013]))                          )
                        (reparse-symbol indented_block_body) [142997 143138])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*


        Valid keys are


        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for :class:`matplotlib.patches.PathPatch`
        ===============  ======================================================


        *coordsA* and *coordsB* are strings that indicate the
        coordinates of *xyA* and *xyB*.

        =================   ===================================================
        Property            Description
        =================   ===================================================
        'figure points'     points from the lower left corner of the figure
        'figure pixels'     pixels from the lower left corner of the figure
        'figure fraction'   0,0 is lower left of figure and 1,1 is upper, right
        'axes points'       points from lower left corner of axes
        'axes pixels'       pixels from lower left corner of axes
        'axes fraction'     0,1 is lower left of axes and 1,1 is upper right
        'data'              use the coordinate system of the object being
                            annotated (default)
        'offset points'     Specify an offset (in points) from the *xy* value

        'polar'             you can specify *theta*, *r* for the annotation,
                            even in cartesian plots.  Note that if you
                            are using a polar axes, you do not need
                            to specify polar for the coordinate
                            system since that is the native \"data\" coordinate
                            system.
        =================   ===================================================

        \"\"\"" code nil (reparse-symbol indented_block_body) [143704 146014])
                            ("if" code nil (reparse-symbol indented_block_body) [146023 146073])
                            ("self" variable nil (reparse-symbol indented_block_body) [146150 146164])
                            ("self" variable nil (reparse-symbol indented_block_body) [146173 146187])
                            ("self" variable nil (reparse-symbol indented_block_body) [146196 146218])
                            ("self" variable nil (reparse-symbol indented_block_body) [146227 146249])
                            ("self" variable nil (reparse-symbol indented_block_body) [146259 146277])
                            ("self" variable nil (reparse-symbol indented_block_body) [146286 146304])
                            ("FancyArrowPatch" code nil (reparse-symbol indented_block_body) [146314 147116])
                            ("self" variable nil (reparse-symbol indented_block_body) [147196 147224]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143186 143190])
                            ("xyA" variable nil (reparse-symbol function_parameters) [143192 143195])
                            ("xyB" variable nil (reparse-symbol function_parameters) [143197 143200])
                            ("coordsA" variable nil (reparse-symbol function_parameters) [143202 143209])
                            ("coordsB" variable nil (reparse-symbol function_parameters) [143211 143218])
                            ("axesA" variable nil (reparse-symbol function_parameters) [143242 143247])
                            ("axesB" variable nil (reparse-symbol function_parameters) [143254 143259])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [143283 143293])
                            ("arrow_transmuter" variable nil (reparse-symbol function_parameters) [143316 143332])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [143356 143371])
                            ("connector" variable nil (reparse-symbol function_parameters) [143397 143406])
                            ("patchA" variable nil (reparse-symbol function_parameters) [143430 143436])
                            ("patchB" variable nil (reparse-symbol function_parameters) [143460 143466])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [143490 143497])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [143519 143526])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [143548 143562])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [143585 143600])
                            ("clip_on" variable nil (reparse-symbol function_parameters) [143624 143631])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [143656 143663])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [143685 143693]))                          
                        :documentation "
        Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*


        Valid keys are


        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for :class:`matplotlib.patches.PathPatch`
        ===============  ======================================================


        *coordsA* and *coordsB* are strings that indicate the
        coordinates of *xyA* and *xyB*.

        =================   ===================================================
        Property            Description
        =================   ===================================================
        'figure points'     points from the lower left corner of the figure
        'figure pixels'     pixels from the lower left corner of the figure
        'figure fraction'   0,0 is lower left of figure and 1,1 is upper, right
        'axes points'       points from lower left corner of axes
        'axes pixels'       pixels from lower left corner of axes
        'axes fraction'     0,1 is lower left of axes and 1,1 is upper right
        'data'              use the coordinate system of the object being
                            annotated (default)
        'offset points'     Specify an offset (in points) from the *xy* value

        'polar'             you can specify *theta*, *r* for the annotation,
                            even in cartesian plots.  Note that if you
                            are using a polar axes, you do not need
                            to specify polar for the coordinate
                            system since that is the native \"data\" coordinate
                            system.
        =================   ===================================================

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [143143 147225])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147242 147246])
                            ("x" variable nil (reparse-symbol function_parameters) [147248 147249])
                            ("y" variable nil (reparse-symbol function_parameters) [147251 147252])
                            ("s" variable nil (reparse-symbol function_parameters) [147254 147255])
                            ("axes" variable nil (reparse-symbol function_parameters) [147257 147261]))                          
                        :documentation "
        calculate the pixel position of given point
        ")
                        (reparse-symbol indented_block_body) [147230 150285])
                    ("set_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150314 150318])
                            ("b" variable nil (reparse-symbol function_parameters) [150320 150321]))                          
                        :documentation "
        set *annotation_clip* attribute.

          * True: the annotation will only be drawn when self.xy is inside the
                   axes.
          * False: the annotation will always be drawn regardless of its
                    position.
          * None: the self.xy will be checked only if *xycoords* is \"data\"
        ")
                        (reparse-symbol indented_block_body) [150290 150732])
                    ("get_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150761 150765]))                          
                        :documentation "
        Return *annotation_clip* attribute.
        See :meth:`set_annotation_clip` for the meaning of return values.
        ")
                        (reparse-symbol indented_block_body) [150737 150947])
                    ("get_path_in_displaycoord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150981 150985]))                          
                        :documentation "
        Return the mutated path of the arrow in the display coord
        ")
                        (reparse-symbol indented_block_body) [150952 152049])
                    ("_check_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152068 152072])
                            ("renderer" variable nil (reparse-symbol function_parameters) [152074 152082]))                          
                        :documentation "
        check if the annotation need to
        be drawn.
        ")
                        (reparse-symbol indented_block_body) [152054 152817])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152831 152835])
                            ("renderer" variable nil (reparse-symbol function_parameters) [152837 152845]))                          
                        :documentation "
        Draw.
        ")
                        (reparse-symbol indented_block_body) [152822 153119]))                  
                :type "class")
                nil [142799 153119]))          
      :file "patches.py"
      :pointmax 153119
      :fsize 153119
      :lastmodtime '(23240 23001 117461 0)
      :unmatched-syntax '((FROM 124364 . 124368) (PERIOD 124369 . 124370) (FROM 120760 . 120764) (PERIOD 120765 . 120766) (NAME 9653 . 9658) (IF 9673 . 9675) (ELSE 9687 . 9691) (FROM 544 . 548) (PERIOD 549 . 550) (FROM 329 . 333) (PERIOD 334 . 335) (FROM 253 . 257) (PERIOD 258 . 259)))
    (semanticdb-table "semanticdb-table-1471804"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
GUI neutral widgets
===================

Widgets that are designed to work for any of the GUI backends.
All of these widgets require you to predefine a :class:`matplotlib.axes.Axes`
instance and pass that as the first arg.  matplotlib doesn't try to
be too smart with respect to layout -- you will have to figure out how
wide and tall you want your Axes to be to accommodate your widget.
\"\"\"" code nil nil [1 396])
            ("" code nil nil [421 506])
            ("copy" include nil nil [508 519])
            ("six" include nil nil [520 530])
            ("six.moves" include nil nil [531 556])
            ("numpy" include nil nil [558 576])
            ("matplotlib" include nil nil [577 608])
            ("Ellipse" include nil nil [624 657])
            ("Rectangle" include nil nil [624 657])
            ("Circle" include nil nil [624 657])
            ("Line2D" include nil nil [670 683])
            ("blended_transform_factory" include nil nil [701 733])
            ("LockDraw" type
               (:documentation "
    Some widgets, like the cursor, draw onto the canvas, and this is not
    desirable under all circumstances, like when the toolbar is in
    zoom-to-rect mode and drawing a rectangle.  The module level \"lock\"
    allows someone to grab the lock and prevent other widgets from
    drawing.  Use ``matplotlib.widgets.lock(someobj)`` to prevent
    other widgets from drawing while you're interacting with the canvas.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1227 1245]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1212 1216]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1199 1246])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1264 1268])
                            ("o" variable nil (reparse-symbol function_parameters) [1270 1271]))                          
                        :documentation "reserve the lock for *o*")
                        (reparse-symbol indented_block_body) [1251 1418])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1435 1439])
                            ("o" variable nil (reparse-symbol function_parameters) [1441 1442]))                          
                        :documentation "release the lock")
                        (reparse-symbol indented_block_body) [1423 1594])
                    ("available" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1613 1617])
                            ("o" variable nil (reparse-symbol function_parameters) [1619 1620]))                          
                        :documentation "drawing is available to *o*")
                        (reparse-symbol indented_block_body) [1599 1717])
                    ("isowner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1734 1738])
                            ("o" variable nil (reparse-symbol function_parameters) [1740 1741]))                          
                        :documentation "Return True if *o* owns this lock")
                        (reparse-symbol indented_block_body) [1722 1824])
                    ("locked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1840 1844]))                          
                        :documentation "Return True if the lock is currently held by an owner")
                        (reparse-symbol indented_block_body) [1829 1954]))                  
                :type "class")
                nil [736 1954])
            ("Widget" type
               (:documentation "
    Abstract base class for GUI neutral widgets
    "
                :superclasses ("object")
                :members 
                  ( ("drawon" variable nil (reparse-symbol indented_block_body) [2046 2059])
                    ("eventson" variable nil (reparse-symbol indented_block_body) [2064 2079])
                    ("_active" variable nil (reparse-symbol indented_block_body) [2084 2098])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2119 2123])
                            ("active" variable nil (reparse-symbol function_parameters) [2125 2131]))                          
                        :documentation "Set whether the widget is active.
        ")
                        (reparse-symbol indented_block_body) [2104 2221])
                    ("get_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2241 2245]))                          
                        :documentation "Get whether the widget is active.
        ")
                        (reparse-symbol indented_block_body) [2226 2333])
                    ("active" variable nil (reparse-symbol indented_block_body) [2389 2515])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2532 2536])
                            ("event" variable nil (reparse-symbol function_parameters) [2538 2543]))                          
                        :documentation "Return True if event should be ignored.

        This method (or a version of it) should be called at the beginning
        of any event callback.
        ")
                        (reparse-symbol indented_block_body) [2521 2747]))                  
                :type "class")
                nil [1956 2747])
            ("AxesWidget" type
               (:documentation "Widget that is connected to a single
    :class:`~matplotlib.axes.Axes`.

    To guarantee that the widget remains responsive and not garbage-collected,
    a reference to the object should be maintained by the user.

    This is necessary because the callback registry
    maintains only weak-refs to the functions, which are member
    functions of the widget.  If there are no references to the widget
    object it may be garbage collected which will disconnect the
    callbacks.

    Attributes:

    *ax* : :class:`~matplotlib.axes.Axes`
        The parent axes for the widget
    *canvas* : :class:`~matplotlib.backend_bases.FigureCanvasBase` subclass
        The parent figure canvas for the widget.
    *active* : bool
        If False, the widget does not respond to events.
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3612 3624])
                            ("self" variable nil (reparse-symbol indented_block_body) [3633 3663])
                            ("self" variable nil (reparse-symbol indented_block_body) [3672 3686]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3593 3597])
                            ("ax" variable nil (reparse-symbol function_parameters) [3599 3601]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3580 3687])
                    ("connect_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3710 3714])
                            ("event" variable nil (reparse-symbol function_parameters) [3716 3721])
                            ("callback" variable nil (reparse-symbol function_parameters) [3723 3731]))                          
                        :documentation "Connect callback with an event.

        This should be used in lieu of `figure.canvas.mpl_connect` since this
        function stores callback ids for later clean up.
        ")
                        (reparse-symbol indented_block_body) [3692 4010])
                    ("disconnect_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4037 4041]))                          
                        :documentation "Disconnect all events created by this widget.")
                        (reparse-symbol indented_block_body) [4015 4174]))                  
                :type "class")
                nil [2749 4174])
            ("Button" type
               (:documentation "
    A GUI neutral button.

    For the button to remain responsive you must keep a reference to it.
    Call :meth:`on_clicked` to connect to the button.

    Attributes
    ----------
    ax :
        The :class:`matplotlib.axes.Axes` the button renders into.
    label :
        A :class:`matplotlib.text.Text` instance.
    color :
        The color of the button when not hovering.
    hovercolor :
        The color of the button when hovering.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : matplotlib.axes.Axes
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        label : str
            The button text. Accepts string.

        image : array, mpl image, Pillow Image
            The image to place in the button, if not *None*.
            Can be any legal arg to imshow (numpy array,
            matplotlib Image instance, or Pillow Image).

        color : color
            The color of the button when not activated

        hovercolor : color
            The color of the button when the mouse is over it
        \"\"\"" code nil (reparse-symbol indented_block_body) [4774 5417])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [5426 5455])
                            ("if" code nil (reparse-symbol indented_block_body) [5465 5516])
                            ("self" variable nil (reparse-symbol indented_block_body) [5524 5730])
                            ("self" variable nil (reparse-symbol indented_block_body) [5740 5752])
                            ("self" variable nil (reparse-symbol indented_block_body) [5761 5780])
                            ("self" code nil (reparse-symbol indented_block_body) [5790 5843])
                            ("self" code nil (reparse-symbol indented_block_body) [5852 5909])
                            ("self" code nil (reparse-symbol indented_block_body) [5918 5973])
                            ("ax" code nil (reparse-symbol indented_block_body) [5982 6004])
                            ("ax" code nil (reparse-symbol indented_block_body) [6013 6036])
                            ("ax" code nil (reparse-symbol indented_block_body) [6045 6062])
                            ("ax" code nil (reparse-symbol indented_block_body) [6071 6088])
                            ("self" variable nil (reparse-symbol indented_block_body) [6097 6115])
                            ("self" variable nil (reparse-symbol indented_block_body) [6124 6152])
                            ("self" variable nil (reparse-symbol indented_block_body) [6162 6185]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4686 4690])
                            ("ax" variable nil (reparse-symbol function_parameters) [4692 4694])
                            ("label" variable nil (reparse-symbol function_parameters) [4696 4701])
                            ("image" variable nil (reparse-symbol function_parameters) [4703 4708])
                            ("color" variable nil (reparse-symbol function_parameters) [4732 4737])
                            ("hovercolor" variable nil (reparse-symbol function_parameters) [4746 4756]))                          
                        :documentation "
        Parameters
        ----------
        ax : matplotlib.axes.Axes
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        label : str
            The button text. Accepts string.

        image : array, mpl image, Pillow Image
            The image to place in the button, if not *None*.
            Can be any legal arg to imshow (numpy array,
            matplotlib Image instance, or Pillow Image).

        color : color
            The color of the button when not activated

        hovercolor : color
            The color of the button when the mouse is over it
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4673 6186])
                    ("_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6202 6206])
                            ("event" variable nil (reparse-symbol function_parameters) [6208 6213]))                          )
                        (reparse-symbol indented_block_body) [6191 6465])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6483 6487])
                            ("event" variable nil (reparse-symbol function_parameters) [6489 6494]))                          )
                        (reparse-symbol indented_block_body) [6470 6844])
                    ("_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6861 6865])
                            ("event" variable nil (reparse-symbol function_parameters) [6867 6872]))                          )
                        (reparse-symbol indented_block_body) [6849 7209])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7229 7233])
                            ("func" variable nil (reparse-symbol function_parameters) [7235 7239]))                          
                        :documentation "
        When the button is clicked, call this *func* with event.

        A connection id is returned. It can be used to disconnect
        the button from its callback.
        ")
                        (reparse-symbol indented_block_body) [7214 7535])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7555 7559])
                            ("cid" variable nil (reparse-symbol function_parameters) [7561 7564]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [7540 7717]))                  
                :type "class")
                nil [4176 7717])
            ("Slider" type
               (:documentation "
    A slider representing a floating point range.

    Create a slider from *valmin* to *valmax* in axes *ax*. For the slider to
    remain responsive you must maintain a reference to it. Call
    :meth:`on_changed` to connect to the slider event.

    Attributes
    ----------
    val : float
        Slider value.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in.

        label : str
            Slider label.

        valmin : float
            The minimum value of the slider.

        valmax : float
            The maximum value of the slider.

        valinit : float, optional, default: 0.5
            The slider initial position.

        valfmt : str, optional, default: \"%1.2f\"
            Used to format the slider value, fprint format string.

        closedmin : bool, optional, default: True
            Indicate whether the slider interval is closed on the bottom.

        closedmax : bool, optional, default: True
            Indicate whether the slider interval is closed on the top.

        slidermin : Slider, optional, default: None
            Do not allow the current slider to have a value less than
            the value of the Slider `slidermin`.

        slidermax : Slider, optional, default: None
            Do not allow the current slider to have a value greater than
            the value of the Slider `slidermax`.

        dragging : bool, optional, default: True
            If True the slider can be dragged by the mouse.

        valstep : float, optional, default: None
            If given, the slider will snap to multiples of `valstep`.

        Notes
        -----
        Additional kwargs are passed on to ``self.poly`` which is the
        :class:`~matplotlib.patches.Rectangle` that draws the slider
        knob.  See the :class:`~matplotlib.patches.Rectangle` documentation for
        valid property names (e.g., `facecolor`, `edgecolor`, `alpha`).
        \"\"\"" code nil (reparse-symbol indented_block_body) [8303 9953])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [9962 9991])
                            ("if" code nil (reparse-symbol indented_block_body) [10001 10184])
                            ("if" code nil (reparse-symbol indented_block_body) [10192 10375])
                            ("self" variable nil (reparse-symbol indented_block_body) [10383 10409])
                            ("self" variable nil (reparse-symbol indented_block_body) [10418 10444])
                            ("self" variable nil (reparse-symbol indented_block_body) [10453 10479])
                            ("self" variable nil (reparse-symbol indented_block_body) [10488 10514])
                            ("self" variable nil (reparse-symbol indented_block_body) [10523 10547])
                            ("self" variable nil (reparse-symbol indented_block_body) [10556 10576])
                            ("self" variable nil (reparse-symbol indented_block_body) [10585 10605])
                            ("self" variable nil (reparse-symbol indented_block_body) [10614 10636])
                            ("valinit" variable nil (reparse-symbol indented_block_body) [10645 10685])
                            ("if" code nil (reparse-symbol indented_block_body) [10694 10743])
                            ("self" variable nil (reparse-symbol indented_block_body) [10751 10769])
                            ("self" variable nil (reparse-symbol indented_block_body) [10778 10800])
                            ("self" variable nil (reparse-symbol indented_block_body) [10809 10864])
                            ("self" variable nil (reparse-symbol indented_block_body) [10873 10928])
                            ("self" variable nil (reparse-symbol indented_block_body) [10938 10958])
                            ("ax" code nil (reparse-symbol indented_block_body) [10967 10984])
                            ("ax" code nil (reparse-symbol indented_block_body) [10993 11022])
                            ("ax" code nil (reparse-symbol indented_block_body) [11031 11048])
                            ("ax" code nil (reparse-symbol indented_block_body) [11057 11079])
                            ("self" code nil (reparse-symbol indented_block_body) [11089 11143])
                            ("self" code nil (reparse-symbol indented_block_body) [11152 11208])
                            ("if" code nil (reparse-symbol indented_block_body) [11217 11298])
                            ("self" variable nil (reparse-symbol indented_block_body) [11306 11484])
                            ("self" variable nil (reparse-symbol indented_block_body) [11494 11718])
                            ("self" variable nil (reparse-symbol indented_block_body) [11728 11740])
                            ("self" variable nil (reparse-symbol indented_block_body) [11749 11768])
                            ("self" code nil (reparse-symbol indented_block_body) [11778 11799]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8095 8099])
                            ("ax" variable nil (reparse-symbol function_parameters) [8101 8103])
                            ("label" variable nil (reparse-symbol function_parameters) [8105 8110])
                            ("valmin" variable nil (reparse-symbol function_parameters) [8112 8118])
                            ("valmax" variable nil (reparse-symbol function_parameters) [8120 8126])
                            ("valinit" variable nil (reparse-symbol function_parameters) [8128 8135])
                            ("valfmt" variable nil (reparse-symbol function_parameters) [8141 8147])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [8174 8183])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [8190 8199])
                            ("slidermin" variable nil (reparse-symbol function_parameters) [8206 8215])
                            ("slidermax" variable nil (reparse-symbol function_parameters) [8239 8248])
                            ("dragging" variable nil (reparse-symbol function_parameters) [8255 8263])
                            ("valstep" variable nil (reparse-symbol function_parameters) [8270 8277])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8284 8292]))                          
                        :documentation "
        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in.

        label : str
            Slider label.

        valmin : float
            The minimum value of the slider.

        valmax : float
            The maximum value of the slider.

        valinit : float, optional, default: 0.5
            The slider initial position.

        valfmt : str, optional, default: \"%1.2f\"
            Used to format the slider value, fprint format string.

        closedmin : bool, optional, default: True
            Indicate whether the slider interval is closed on the bottom.

        closedmax : bool, optional, default: True
            Indicate whether the slider interval is closed on the top.

        slidermin : Slider, optional, default: None
            Do not allow the current slider to have a value less than
            the value of the Slider `slidermin`.

        slidermax : Slider, optional, default: None
            Do not allow the current slider to have a value greater than
            the value of the Slider `slidermax`.

        dragging : bool, optional, default: True
            If True the slider can be dragged by the mouse.

        valstep : float, optional, default: None
            If given, the slider will snap to multiples of `valstep`.

        Notes
        -----
        Additional kwargs are passed on to ``self.poly`` which is the
        :class:`~matplotlib.patches.Rectangle` that draws the slider
        knob.  See the :class:`~matplotlib.patches.Rectangle` documentation for
        valid property names (e.g., `facecolor`, `edgecolor`, `alpha`).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8082 11800])
                    ("_value_in_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11826 11830])
                            ("val" variable nil (reparse-symbol function_parameters) [11832 11835]))                          
                        :documentation " Makes sure self.val is with given bounds.")
                        (reparse-symbol indented_block_body) [11805 12615])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12632 12636])
                            ("event" variable nil (reparse-symbol function_parameters) [12638 12643]))                          
                        :documentation "update the slider position")
                        (reparse-symbol indented_block_body) [12620 13385])
                    ("set_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13402 13406])
                            ("val" variable nil (reparse-symbol function_parameters) [13408 13411]))                          
                        :documentation "
        Set slider value to *val*

        Parameters
        ----------
        val : float
        ")
                        (reparse-symbol indented_block_body) [13390 13898])
                    ("on_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13918 13922])
                            ("func" variable nil (reparse-symbol function_parameters) [13924 13928]))                          
                        :documentation "
        When the slider value is changed call *func* with the new
        slider value

        Parameters
        ----------
        func : callable
            Function to call when slider is changed.
            The function must accept a single float as its arguments.

        Returns
        -------
        cid : int
            Connection id (which can be used to disconnect *func*)
        ")
                        (reparse-symbol indented_block_body) [13903 14445])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14465 14469])
                            ("cid" variable nil (reparse-symbol function_parameters) [14471 14474]))                          
                        :documentation "
        Remove the observer with connection id *cid*

        Parameters
        ----------
        cid : int
            Connection id of the observer to be removed
        ")
                        (reparse-symbol indented_block_body) [14450 14758])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14773 14777]))                          
                        :documentation "Reset the slider to the initial value")
                        (reparse-symbol indented_block_body) [14763 14910]))                  
                :type "class")
                nil [7719 14910])
            ("CheckButtons" type
               (:documentation "
    A GUI neutral set of check buttons.

    For the check buttons to remain responsive you must keep a
    reference to this object.

    The following attributes are exposed

     *ax*
        The :class:`matplotlib.axes.Axes` instance the buttons are
        located in

     *labels*
        List of :class:`matplotlib.text.Text` instances

     *lines*
        List of (line1, line2) tuples for the x's in the check boxes.
        These lines exist for each box, but have ``set_visible(False)``
        when its box is not checked.

     *rectangles*
        List of :class:`matplotlib.patches.Rectangle` instances

    Connect to the CheckButtons with the :meth:`on_clicked` method
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *actives*
            A len(buttons) list of booleans indicating whether
             the button is active
        \"\"\"" code nil (reparse-symbol indented_block_body) [15701 15976])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [15985 16014])
                            ("ax" code nil (reparse-symbol indented_block_body) [16024 16041])
                            ("ax" code nil (reparse-symbol indented_block_body) [16050 16067])
                            ("ax" code nil (reparse-symbol indented_block_body) [16076 16098])
                            ("if" code nil (reparse-symbol indented_block_body) [16108 16281])
                            ("cnt" variable nil (reparse-symbol indented_block_body) [16290 16297])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [16306 16334])
                            ("self" variable nil (reparse-symbol indented_block_body) [16344 16360])
                            ("self" variable nil (reparse-symbol indented_block_body) [16369 16384])
                            ("self" variable nil (reparse-symbol indented_block_body) [16393 16413])
                            ("lineparams" variable nil (reparse-symbol indented_block_body) [16423 16544])
                            ("for" code nil (reparse-symbol indented_block_body) [16553 17397])
                            ("self" code nil (reparse-symbol indented_block_body) [17406 17461])
                            ("self" variable nil (reparse-symbol indented_block_body) [17471 17483])
                            ("self" variable nil (reparse-symbol indented_block_body) [17492 17511]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15665 15669])
                            ("ax" variable nil (reparse-symbol function_parameters) [15671 15673])
                            ("labels" variable nil (reparse-symbol function_parameters) [15675 15681])
                            ("actives" variable nil (reparse-symbol function_parameters) [15683 15690]))                          
                        :documentation "
        Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *actives*
            A len(buttons) list of booleans indicating whether
             the button is active
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15652 17512])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17530 17534])
                            ("event" variable nil (reparse-symbol function_parameters) [17536 17541]))                          )
                        (reparse-symbol indented_block_body) [17517 17999])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18019 18023])
                            ("index" variable nil (reparse-symbol function_parameters) [18025 18030]))                          
                        :documentation "
        Directly (de)activate a check button by index.

        *index* is an index into the original label list
            that this object was constructed with.
            Raises ValueError if *index* is invalid.

        Callbacks will be triggered if :attr:`eventson` is True.

        ")
                        (reparse-symbol indented_block_body) [18004 18799])
                    ("get_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18819 18823]))                          
                        :documentation "
        returns a tuple of the status (True/False) of all of the check buttons
        ")
                        (reparse-symbol indented_block_body) [18804 18990])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19010 19014])
                            ("func" variable nil (reparse-symbol function_parameters) [19016 19020]))                          
                        :documentation "
        When the button is clicked, call *func* with button label

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [18995 19281])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19301 19305])
                            ("cid" variable nil (reparse-symbol function_parameters) [19307 19310]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [19286 19463]))                  
                :type "class")
                nil [14912 19463])
            ("TextBox" type
               (:documentation "
    A GUI neutral text input box.

    For the text box to remain responsive you must keep a reference to it.

    The following attributes are accessible:

      *ax*
        The :class:`matplotlib.axes.Axes` the button renders into.

      *label*
        A :class:`matplotlib.text.Text` instance.

      *color*
        The color of the text box when not hovering.

      *hovercolor*
        The color of the text box when hovering.

    Call :meth:`on_text_change` to be updated whenever the text changes.

    Call :meth:`on_submit` to be updated whenever the user hits enter or
    leaves the text entry field.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : matplotlib.axes.Axes
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        label : str
            Label for this text box. Accepts string.

        initial : str
            Initial value in the text box

        color : color
            The color of the box

        hovercolor : color
            The color of the box when the mouse is over it

        label_pad : float
            the distance between the label and the right side of the textbox
        \"\"\"" code nil (reparse-symbol indented_block_body) [20243 20815])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [20824 20853])
                            ("self" variable nil (reparse-symbol indented_block_body) [20863 20888])
                            ("self" variable nil (reparse-symbol indented_block_body) [20898 20968])
                            ("self" variable nil (reparse-symbol indented_block_body) [20978 20997])
                            ("self" variable nil (reparse-symbol indented_block_body) [21006 21218])
                            ("self" variable nil (reparse-symbol indented_block_body) [21227 21275])
                            ("self" variable nil (reparse-symbol indented_block_body) [21285 21297])
                            ("self" variable nil (reparse-symbol indented_block_body) [21306 21332])
                            ("self" variable nil (reparse-symbol indented_block_body) [21341 21367])
                            ("self" code nil (reparse-symbol indented_block_body) [21484 21506])
                            ("self" code nil (reparse-symbol indented_block_body) [21515 21537])
                            ("self" variable nil (reparse-symbol indented_block_body) [21547 21568])
                            ("self" variable nil (reparse-symbol indented_block_body) [21673 21710])
                            ("self" code nil (reparse-symbol indented_block_body) [21719 21749])
                            ("self" code nil (reparse-symbol indented_block_body) [21759 21812])
                            ("self" code nil (reparse-symbol indented_block_body) [21821 21878])
                            ("self" code nil (reparse-symbol indented_block_body) [21887 21942])
                            ("self" code nil (reparse-symbol indented_block_body) [21951 22004])
                            ("self" code nil (reparse-symbol indented_block_body) [22013 22061])
                            ("ax" code nil (reparse-symbol indented_block_body) [22070 22092])
                            ("ax" code nil (reparse-symbol indented_block_body) [22101 22124])
                            ("ax" code nil (reparse-symbol indented_block_body) [22133 22150])
                            ("ax" code nil (reparse-symbol indented_block_body) [22159 22176])
                            ("self" variable nil (reparse-symbol indented_block_body) [22185 22203])
                            ("self" variable nil (reparse-symbol indented_block_body) [22212 22240])
                            ("self" variable nil (reparse-symbol indented_block_body) [22250 22273])
                            ("self" variable nil (reparse-symbol indented_block_body) [22283 22313]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20144 20148])
                            ("ax" variable nil (reparse-symbol function_parameters) [20150 20152])
                            ("label" variable nil (reparse-symbol function_parameters) [20154 20159])
                            ("initial" variable nil (reparse-symbol function_parameters) [20161 20168])
                            ("color" variable nil (reparse-symbol function_parameters) [20190 20195])
                            ("hovercolor" variable nil (reparse-symbol function_parameters) [20203 20213])
                            ("label_pad" variable nil (reparse-symbol function_parameters) [20219 20228]))                          
                        :documentation "
        Parameters
        ----------
        ax : matplotlib.axes.Axes
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        label : str
            Label for this text box. Accepts string.

        initial : str
            Initial value in the text box

        color : color
            The color of the box

        hovercolor : color
            The color of the box when the mouse is over it

        label_pad : float
            the distance between the label and the right side of the textbox
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20131 22314])
                    ("_make_text_disp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22339 22343])
                            ("string" variable nil (reparse-symbol function_parameters) [22345 22351]))                          )
                        (reparse-symbol indented_block_body) [22319 22585])
                    ("_rendercursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22608 22612]))                          )
                        (reparse-symbol indented_block_body) [22590 23526])
                    ("_notify_submit_observers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23560 23564]))                          )
                        (reparse-symbol indented_block_body) [23531 23662])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23680 23684])
                            ("event" variable nil (reparse-symbol function_parameters) [23686 23691]))                          )
                        (reparse-symbol indented_block_body) [23667 23857])
                    ("_keypress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23876 23880])
                            ("event" variable nil (reparse-symbol function_parameters) [23882 23887]))                          )
                        (reparse-symbol indented_block_body) [23862 25338])
                    ("set_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25355 25359])
                            ("val" variable nil (reparse-symbol function_parameters) [25361 25364]))                          )
                        (reparse-symbol indented_block_body) [25343 25669])
                    ("_notify_change_observers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25703 25707]))                          )
                        (reparse-symbol indented_block_body) [25674 25801])
                    ("begin_typing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25823 25827])
                            ("x" variable nil (reparse-symbol function_parameters) [25829 25830]))                          )
                        (reparse-symbol indented_block_body) [25806 26147])
                    ("stop_typing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26168 26172]))                          )
                        (reparse-symbol indented_block_body) [26152 26819])
                    ("position_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26844 26848])
                            ("x" variable nil (reparse-symbol function_parameters) [26850 26851]))                          )
                        (reparse-symbol indented_block_body) [26824 27585])
                    ("_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27601 27605])
                            ("event" variable nil (reparse-symbol function_parameters) [27607 27612]))                          )
                        (reparse-symbol indented_block_body) [27590 28011])
                    ("_resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28028 28032])
                            ("event" variable nil (reparse-symbol function_parameters) [28034 28039]))                          )
                        (reparse-symbol indented_block_body) [28016 28069])
                    ("_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28086 28090])
                            ("event" variable nil (reparse-symbol function_parameters) [28092 28097]))                          )
                        (reparse-symbol indented_block_body) [28074 28434])
                    ("on_text_change" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28458 28462])
                            ("func" variable nil (reparse-symbol function_parameters) [28464 28468]))                          
                        :documentation "
        When the text changes, call this *func* with event.

        A connection id is returned which can be used to disconnect.
        ")
                        (reparse-symbol indented_block_body) [28439 28731])
                    ("on_submit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28750 28754])
                            ("func" variable nil (reparse-symbol function_parameters) [28756 28760]))                          
                        :documentation "
        When the user hits enter or leaves the submision box, call this
        *func* with event.

        A connection id is returned which can be used to disconnect.
        ")
                        (reparse-symbol indented_block_body) [28736 29062])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29082 29086])
                            ("cid" variable nil (reparse-symbol function_parameters) [29088 29091]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [29067 29316]))                  
                :type "class")
                nil [19465 29316])
            ("RadioButtons" type
               (:documentation "
    A GUI neutral radio button.

    For the buttons to remain responsive
    you must keep a reference to this object.

    The following attributes are exposed:

     *ax*
        The :class:`matplotlib.axes.Axes` instance the buttons are in

     *activecolor*
        The color of the button when clicked

     *labels*
        A list of :class:`matplotlib.text.Text` instances

     *circles*
        A list of :class:`matplotlib.patches.Circle` instances

     *value_selected*
        A string listing the current value selected

    Connect to the RadioButtons with the :meth:`on_clicked` method
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *active*
            The index into labels for the button that is active

        *activecolor*
            The color of the button when clicked
        \"\"\"" code nil (reparse-symbol indented_block_body) [30044 30357])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [30366 30395])
                            ("self" variable nil (reparse-symbol indented_block_body) [30404 30434])
                            ("self" variable nil (reparse-symbol indented_block_body) [30443 30469])
                            ("ax" code nil (reparse-symbol indented_block_body) [30479 30496])
                            ("ax" code nil (reparse-symbol indented_block_body) [30505 30522])
                            ("ax" code nil (reparse-symbol indented_block_body) [30531 30553])
                            ("dy" code nil (reparse-symbol indented_block_body) [30562 30589])
                            ("ys" variable nil (reparse-symbol indented_block_body) [30598 30639])
                            ("cnt" variable nil (reparse-symbol indented_block_body) [30648 30655])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [30664 30692])
                            ("self" variable nil (reparse-symbol indented_block_body) [30702 30718])
                            ("self" variable nil (reparse-symbol indented_block_body) [30727 30744])
                            ("for" code nil (reparse-symbol indented_block_body) [30753 31380])
                            ("self" code nil (reparse-symbol indented_block_body) [31389 31444])
                            ("self" variable nil (reparse-symbol indented_block_body) [31454 31466])
                            ("self" variable nil (reparse-symbol indented_block_body) [31475 31494]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29987 29991])
                            ("ax" variable nil (reparse-symbol function_parameters) [29993 29995])
                            ("labels" variable nil (reparse-symbol function_parameters) [29997 30003])
                            ("active" variable nil (reparse-symbol function_parameters) [30005 30011])
                            ("activecolor" variable nil (reparse-symbol function_parameters) [30015 30026]))                          
                        :documentation "
        Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *active*
            The index into labels for the button that is active

        *activecolor*
            The color of the button when clicked
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29974 31495])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31513 31517])
                            ("event" variable nil (reparse-symbol function_parameters) [31519 31524]))                          )
                        (reparse-symbol indented_block_body) [31500 32206])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32226 32230])
                            ("index" variable nil (reparse-symbol function_parameters) [32232 32237]))                          
                        :documentation "
        Trigger which radio button to make active.

        *index* is an index into the original label list
            that this object was constructed with.
            Raise ValueError if the index is invalid.

        Callbacks will be triggered if :attr:`eventson` is True.

        ")
                        (reparse-symbol indented_block_body) [32211 33153])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33173 33177])
                            ("func" variable nil (reparse-symbol function_parameters) [33179 33183]))                          
                        :documentation "
        When the button is clicked, call *func* with button label

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [33158 33444])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33464 33468])
                            ("cid" variable nil (reparse-symbol function_parameters) [33470 33473]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [33449 33626]))                  
                :type "class")
                nil [29318 33626])
            ("SubplotTool" type
               (:documentation "
    A tool to adjust the subplot params of a :class:`matplotlib.figure.Figure`.
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *targetfig*
            The figure instance to adjust.

        *toolfig*
            The figure instance to embed the subplot tool into. If
            *None*, a default figure will be created. If you are using
            this from the GUI
        \"\"\"" code nil (reparse-symbol indented_block_body) [33803 34068])
                            ("self" variable nil (reparse-symbol indented_block_body) [34147 34173])
                            ("toolfig" code nil (reparse-symbol indented_block_body) [34182 34226])
                            ("toolbarfmt" type
                               (:members 
                                  ( ("__init__" function
                                       (:suite 
                                          ( ("self" variable nil (reparse-symbol indented_block_body) [34310 34330]))                                          
                                        :parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [34279 34283])
                                            ("slider" variable nil (reparse-symbol function_parameters) [34285 34291]))                                          
                                        :constructor-flag t)
                                        (reparse-symbol indented_block_body) [34266 34331])
                                    ("__call__" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [34357 34361])
                                            ("x" variable nil (reparse-symbol function_parameters) [34363 34364])
                                            ("y" variable nil (reparse-symbol function_parameters) [34366 34367]))                                          )
                                        (reparse-symbol indented_block_body) [34344 34517]))                                  
                                :type "class")
                                (reparse-symbol indented_block_body) [34236 34517])
                            ("self" variable nil (reparse-symbol indented_block_body) [34526 34564])
                            ("self" code nil (reparse-symbol indented_block_body) [34573 34637])
                            ("self" code nil (reparse-symbol indented_block_body) [34646 34677])
                            ("self" variable nil (reparse-symbol indented_block_body) [34687 34849])
                            ("self" code nil (reparse-symbol indented_block_body) [34858 34899])
                            ("self" variable nil (reparse-symbol indented_block_body) [34909 34949])
                            ("self" code nil (reparse-symbol indented_block_body) [34958 34991])
                            ("self" variable nil (reparse-symbol indented_block_body) [35000 35209])
                            ("self" code nil (reparse-symbol indented_block_body) [35218 35263])
                            ("self" variable nil (reparse-symbol indented_block_body) [35273 35312])
                            ("self" code nil (reparse-symbol indented_block_body) [35321 35353])
                            ("self" variable nil (reparse-symbol indented_block_body) [35362 35530])
                            ("self" code nil (reparse-symbol indented_block_body) [35539 35582])
                            ("self" variable nil (reparse-symbol indented_block_body) [35592 35629])
                            ("self" code nil (reparse-symbol indented_block_body) [35638 35668])
                            ("self" variable nil (reparse-symbol indented_block_body) [35677 35833])
                            ("self" code nil (reparse-symbol indented_block_body) [35842 35881])
                            ("self" variable nil (reparse-symbol indented_block_body) [35891 35931])
                            ("self" code nil (reparse-symbol indented_block_body) [35940 35973])
                            ("self" variable nil (reparse-symbol indented_block_body) [35982 36156])
                            ("self" code nil (reparse-symbol indented_block_body) [36165 36210])
                            ("self" variable nil (reparse-symbol indented_block_body) [36220 36260])
                            ("self" code nil (reparse-symbol indented_block_body) [36269 36302])
                            ("self" variable nil (reparse-symbol indented_block_body) [36311 36485])
                            ("self" code nil (reparse-symbol indented_block_body) [36494 36539])
                            ("self" variable nil (reparse-symbol indented_block_body) [36571 36615])
                            ("self" variable nil (reparse-symbol indented_block_body) [36624 36668])
                            ("self" variable nil (reparse-symbol indented_block_body) [36677 36721])
                            ("self" variable nil (reparse-symbol indented_block_body) [36730 36774])
                            ("bax" variable nil (reparse-symbol indented_block_body) [36784 36832])
                            ("self" variable nil (reparse-symbol indented_block_body) [36841 36880])
                            ("sliders" variable nil (reparse-symbol indented_block_body) [36890 37028])
                            ("func" function (:arguments 
                              ( ("event" variable nil (reparse-symbol function_parameters) [37047 37052]))                              ) (reparse-symbol indented_block_body) [37038 37722])
                            ("validate" variable nil (reparse-symbol indented_block_body) [37893 37932])
                            ("toolfig" variable nil (reparse-symbol indented_block_body) [37941 37977])
                            ("self" code nil (reparse-symbol indented_block_body) [37986 38019])
                            ("toolfig" variable nil (reparse-symbol indented_block_body) [38028 38067]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33768 33772])
                            ("targetfig" variable nil (reparse-symbol function_parameters) [33774 33783])
                            ("toolfig" variable nil (reparse-symbol function_parameters) [33785 33792]))                          
                        :documentation "
        *targetfig*
            The figure instance to adjust.

        *toolfig*
            The figure instance to embed the subplot tool into. If
            *None*, a default figure will be created. If you are using
            this from the GUI
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33755 38068])
                    ("funcleft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38086 38090])
                            ("val" variable nil (reparse-symbol function_parameters) [38092 38095]))                          )
                        (reparse-symbol indented_block_body) [38073 38212])
                    ("funcright" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38231 38235])
                            ("val" variable nil (reparse-symbol function_parameters) [38237 38240]))                          )
                        (reparse-symbol indented_block_body) [38217 38358])
                    ("funcbottom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38378 38382])
                            ("val" variable nil (reparse-symbol function_parameters) [38384 38387]))                          )
                        (reparse-symbol indented_block_body) [38363 38506])
                    ("functop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38523 38527])
                            ("val" variable nil (reparse-symbol function_parameters) [38529 38532]))                          )
                        (reparse-symbol indented_block_body) [38511 38648])
                    ("funcwspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38668 38672])
                            ("val" variable nil (reparse-symbol function_parameters) [38674 38677]))                          )
                        (reparse-symbol indented_block_body) [38653 38796])
                    ("funchspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38816 38820])
                            ("val" variable nil (reparse-symbol function_parameters) [38822 38825]))                          )
                        (reparse-symbol indented_block_body) [38801 38944]))                  
                :type "class")
                nil [33628 38944])
            ("Cursor" type
               (:documentation "
    A horizontal and vertical line that spans the axes and moves with
    the pointer.  You can turn off the hline or vline respectively with
    the following attributes:

      *horizOn*
        Controls the visibility of the horizontal line

      *vertOn*
        Controls the visibility of the horizontal line

    and the visibility of the cursor itself with the *visible* attribute.

    For the cursor to remain responsive you must keep a reference to
    it.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add a cursor to *ax*.  If ``useblit=True``, use the backend-dependent
        blitting features for faster updates.  *lineprops* is a dictionary of
        line properties.
        \"\"\"" code nil (reparse-symbol indented_block_body) [39564 39760])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [39769 39798])
                            ("self" code nil (reparse-symbol indented_block_body) [39808 39862])
                            ("self" code nil (reparse-symbol indented_block_body) [39871 39915])
                            ("self" variable nil (reparse-symbol indented_block_body) [39925 39944])
                            ("self" variable nil (reparse-symbol indented_block_body) [39953 39975])
                            ("self" variable nil (reparse-symbol indented_block_body) [39984 40004])
                            ("self" code nil (reparse-symbol indented_block_body) [40013 40065])
                            ("if" code nil (reparse-symbol indented_block_body) [40075 40133])
                            ("self" variable nil (reparse-symbol indented_block_body) [40141 40212])
                            ("self" variable nil (reparse-symbol indented_block_body) [40221 40292])
                            ("self" variable nil (reparse-symbol indented_block_body) [40302 40324])
                            ("self" variable nil (reparse-symbol indented_block_body) [40333 40355]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39473 39477])
                            ("ax" variable nil (reparse-symbol function_parameters) [39479 39481])
                            ("horizOn" variable nil (reparse-symbol function_parameters) [39483 39490])
                            ("vertOn" variable nil (reparse-symbol function_parameters) [39497 39503])
                            ("useblit" variable nil (reparse-symbol function_parameters) [39510 39517])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [39542 39553]))                          
                        :documentation "
        Add a cursor to *ax*.  If ``useblit=True``, use the backend-dependent
        blitting features for faster updates.  *lineprops* is a dictionary of
        line properties.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39460 40356])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40371 40375])
                            ("event" variable nil (reparse-symbol function_parameters) [40377 40382]))                          
                        :documentation "clear the cursor")
                        (reparse-symbol indented_block_body) [40361 40638])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40654 40658])
                            ("event" variable nil (reparse-symbol function_parameters) [40660 40665]))                          
                        :documentation "on mouse motion draw the cursor if visible")
                        (reparse-symbol indented_block_body) [40643 41434])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41451 41455]))                          )
                        (reparse-symbol indented_block_body) [41439 41792]))                  
                :type "class")
                nil [38946 41792])
            ("MultiCursor" type
               (:documentation "
    Provide a vertical (default) and/or horizontal line cursor shared between
    multiple axes.

    For the cursor to remain responsive you must keep a reference to
    it.

    Example usage::

        from matplotlib.widgets import MultiCursor
        from pylab import figure, show, np

        t = np.arange(0.0, 2.0, 0.01)
        s1 = np.sin(2*np.pi*t)
        s2 = np.sin(4*np.pi*t)
        fig = figure()
        ax1 = fig.add_subplot(211)
        ax1.plot(t, s1)


        ax2 = fig.add_subplot(212, sharex=ax1)
        ax2.plot(t, s2)

        multi = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1,
                            horizOn=False, vertOn=True)
        show()

    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [42645 42665])
                            ("self" variable nil (reparse-symbol indented_block_body) [42674 42690])
                            ("self" variable nil (reparse-symbol indented_block_body) [42699 42721])
                            ("self" variable nil (reparse-symbol indented_block_body) [42730 42750])
                            ("xmin, xmax" code nil (reparse-symbol indented_block_body) [42760 42792])
                            ("ymin, ymax" code nil (reparse-symbol indented_block_body) [42801 42833])
                            ("xmid" code nil (reparse-symbol indented_block_body) [42842 42868])
                            ("ymid" code nil (reparse-symbol indented_block_body) [42877 42903])
                            ("self" variable nil (reparse-symbol indented_block_body) [42913 42932])
                            ("self" code nil (reparse-symbol indented_block_body) [42941 42993])
                            ("self" variable nil (reparse-symbol indented_block_body) [43002 43024])
                            ("self" variable nil (reparse-symbol indented_block_body) [43033 43055])
                            ("if" code nil (reparse-symbol indented_block_body) [43065 43123])
                            ("if" code nil (reparse-symbol indented_block_body) [43132 43301])
                            ("if" code nil (reparse-symbol indented_block_body) [43310 43480])
                            ("self" code nil (reparse-symbol indented_block_body) [43489 43503]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42543 42547])
                            ("canvas" variable nil (reparse-symbol function_parameters) [42549 42555])
                            ("axes" variable nil (reparse-symbol function_parameters) [42557 42561])
                            ("useblit" variable nil (reparse-symbol function_parameters) [42563 42570])
                            ("horizOn" variable nil (reparse-symbol function_parameters) [42577 42584])
                            ("vertOn" variable nil (reparse-symbol function_parameters) [42592 42598])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [42622 42633]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42530 43504])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43521 43525]))                          
                        :documentation "connect events")
                        (reparse-symbol indented_block_body) [43509 43767])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43787 43791]))                          
                        :documentation "disconnect events")
                        (reparse-symbol indented_block_body) [43772 43928])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43943 43947])
                            ("event" variable nil (reparse-symbol function_parameters) [43949 43954]))                          
                        :documentation "clear the cursor")
                        (reparse-symbol indented_block_body) [43933 44247])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44263 44267])
                            ("event" variable nil (reparse-symbol function_parameters) [44269 44274]))                          )
                        (reparse-symbol indented_block_body) [44252 44889])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44906 44910]))                          )
                        (reparse-symbol indented_block_body) [44894 45407]))                  
                :type "class")
                nil [41794 45407])
            ("_SelectorWidget" type
               (:superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("AxesWidget" code nil (reparse-symbol indented_block_body) [45562 45591])
                            ("self" variable nil (reparse-symbol indented_block_body) [45601 45620])
                            ("self" variable nil (reparse-symbol indented_block_body) [45629 45653])
                            ("self" code nil (reparse-symbol indented_block_body) [45662 45714])
                            ("self" code nil (reparse-symbol indented_block_body) [45723 45752])
                            ("self" variable nil (reparse-symbol indented_block_body) [45762 45893])
                            ("self" code nil (reparse-symbol indented_block_body) [45902 45960])
                            ("self" variable nil (reparse-symbol indented_block_body) [45970 45992])
                            ("self" variable nil (reparse-symbol indented_block_body) [46001 46018])
                            ("if" code nil (reparse-symbol indented_block_body) [46028 46150])
                            ("self" variable nil (reparse-symbol indented_block_body) [46213 46235])
                            ("self" variable nil (reparse-symbol indented_block_body) [46296 46320])
                            ("self" variable nil (reparse-symbol indented_block_body) [46329 46352])
                            ("self" variable nil (reparse-symbol indented_block_body) [46361 46379]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45462 45466])
                            ("ax" variable nil (reparse-symbol function_parameters) [45468 45470])
                            ("onselect" variable nil (reparse-symbol function_parameters) [45472 45480])
                            ("useblit" variable nil (reparse-symbol function_parameters) [45482 45489])
                            ("button" variable nil (reparse-symbol function_parameters) [45497 45503])
                            ("state_modifier_keys" variable nil (reparse-symbol function_parameters) [45527 45546]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45449 46380])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46400 46404])
                            ("active" variable nil (reparse-symbol function_parameters) [46406 46412]))                          )
                        (reparse-symbol indented_block_body) [46385 46519])
                    ("update_background" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46546 46550])
                            ("event" variable nil (reparse-symbol function_parameters) [46552 46557]))                          
                        :documentation "force an update of the background")
                        (reparse-symbol indented_block_body) [46524 46852])
                    ("connect_default_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46884 46888]))                          
                        :documentation "Connect the major canvas events to methods.")
                        (reparse-symbol indented_block_body) [46857 47396])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47412 47416])
                            ("event" variable nil (reparse-symbol function_parameters) [47418 47423]))                          
                        :documentation "return *True* if *event* should be ignored")
                        (reparse-symbol indented_block_body) [47401 48488])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48504 48508]))                          
                        :documentation "draw using newfangled blit or oldfangled draw depending on
        useblit

        ")
                        (reparse-symbol indented_block_body) [48493 49003])
                    ("_get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49022 49026])
                            ("event" variable nil (reparse-symbol function_parameters) [49028 49033]))                          
                        :documentation "Get the xdata and ydata for event, with limits")
                        (reparse-symbol indented_block_body) [49008 49399])
                    ("_clean_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49421 49425])
                            ("event" variable nil (reparse-symbol function_parameters) [49427 49432]))                          
                        :documentation "Clean up an event

        Use prev event if there is no xdata
        Limit the xdata and ydata to the axes limits
        Set the prev event
        ")
                        (reparse-symbol indented_block_body) [49404 49833])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49848 49852])
                            ("event" variable nil (reparse-symbol function_parameters) [49854 49859]))                          
                        :documentation "Button press handler and validator")
                        (reparse-symbol indented_block_body) [49838 50374])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50390 50394])
                            ("event" variable nil (reparse-symbol function_parameters) [50396 50401]))                          
                        :documentation "Button press handler")
                        (reparse-symbol indented_block_body) [50379 50452])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50469 50473])
                            ("event" variable nil (reparse-symbol function_parameters) [50475 50480]))                          
                        :documentation "Button release event handler and validator")
                        (reparse-symbol indented_block_body) [50457 50867])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50885 50889])
                            ("event" variable nil (reparse-symbol function_parameters) [50891 50896]))                          
                        :documentation "Button release event handler")
                        (reparse-symbol indented_block_body) [50872 50955])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50971 50975])
                            ("event" variable nil (reparse-symbol function_parameters) [50977 50982]))                          
                        :documentation "Cursor move event handler and validator")
                        (reparse-symbol indented_block_body) [50960 51216])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51233 51237])
                            ("event" variable nil (reparse-symbol function_parameters) [51239 51244]))                          
                        :documentation "Cursor move event handler")
                        (reparse-symbol indented_block_body) [51221 51300])
                    ("on_scroll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51319 51323])
                            ("event" variable nil (reparse-symbol function_parameters) [51325 51330]))                          
                        :documentation "Mouse scroll event handler and validator")
                        (reparse-symbol indented_block_body) [51305 51458])
                    ("_on_scroll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51478 51482])
                            ("event" variable nil (reparse-symbol function_parameters) [51484 51489]))                          
                        :documentation "Mouse scroll event handler")
                        (reparse-symbol indented_block_body) [51463 51546])
                    ("on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51568 51572])
                            ("event" variable nil (reparse-symbol function_parameters) [51574 51579]))                          
                        :documentation "Key press event handler and validator for all selection widgets")
                        (reparse-symbol indented_block_body) [51551 52154])
                    ("_on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52177 52181])
                            ("event" variable nil (reparse-symbol function_parameters) [52183 52188]))                          
                        :documentation "Key press event handler - use for widget-specific key press actions.
        ")
                        (reparse-symbol indented_block_body) [52159 52296])
                    ("on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52320 52324])
                            ("event" variable nil (reparse-symbol function_parameters) [52326 52331]))                          
                        :documentation "Key release event handler and validator")
                        (reparse-symbol indented_block_body) [52301 52639])
                    ("_on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52664 52668])
                            ("event" variable nil (reparse-symbol function_parameters) [52670 52675]))                          
                        :documentation "Key release event handler")
                        (reparse-symbol indented_block_body) [52644 52731])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52752 52756])
                            ("visible" variable nil (reparse-symbol function_parameters) [52758 52765]))                          
                        :documentation " Set the visibility of our artists ")
                        (reparse-symbol indented_block_body) [52736 52925]))                  
                :type "class")
                nil [45409 52925])
            ("SpanSelector" type
               (:documentation "
    Visually select a min/max range on a single axis and call a function with
    those values.

    To guarantee that the selector remains responsive, keep a reference to it.

    In order to turn off the SpanSelector, set `span_selector.active=False`. To
    turn it back on, set `span_selector.active=True`.

    Parameters
    ----------
    ax :  :class:`matplotlib.axes.Axes` object

    onselect : func(min, max), min/max are floats

    direction : \"horizontal\" or \"vertical\"
      The axis along which to draw the span selector

    minspan : float, default is None
     If selection is less than *minspan*, do not call *onselect*

    useblit : bool, default is False
      If True, use the backend-dependent blitting features for faster
      canvas updates.

    rectprops : dict, default is None
      Dictionary of :class:`matplotlib.patches.Patch` properties

    onmove_callback : func(min, max), min/max are floats, default is None
      Called on mouse move while the span is being selected

    span_stays : bool, default is False
      If True, the span stays visible after the mouse is released

    button : int or list of ints
      Determines which mouse buttons activate the span selector
        1 = left mouse button\\n
        2 = center mouse button (scroll wheel)\\n
        3 = right mouse button\\n

    Examples
    --------
    >>> import matplotlib.pyplot as plt
    >>> import matplotlib.widgets as mwidgets
    >>> fig, ax = plt.subplots()
    >>> ax.plot([1, 2, 3], [10, 50, 100])
    >>> def onselect(vmin, vmax):
            print(vmin, vmax)
    >>> rectprops = dict(facecolor='blue', alpha=0.5)
    >>> span = mwidgets.SpanSelector(ax, onselect, 'horizontal',
                                     rectprops=rectprops)
    >>> fig.show()

    See also: :ref:`sphx_glr_gallery_widgets_span_selector.py`

    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_SelectorWidget" code nil (reparse-symbol indented_block_body) [55012 55121])
                            ("if" code nil (reparse-symbol indented_block_body) [55131 55210])
                            ("rectprops" variable nil (reparse-symbol indented_block_body) [55219 55255])
                            ("if" code nil (reparse-symbol indented_block_body) [55265 55390])
                            ("self" variable nil (reparse-symbol indented_block_body) [55398 55424])
                            ("self" variable nil (reparse-symbol indented_block_body) [55434 55450])
                            ("self" variable nil (reparse-symbol indented_block_body) [55459 55477])
                            ("self" variable nil (reparse-symbol indented_block_body) [55487 55513])
                            ("self" variable nil (reparse-symbol indented_block_body) [55522 55560])
                            ("self" variable nil (reparse-symbol indented_block_body) [55569 55591])
                            ("self" variable nil (reparse-symbol indented_block_body) [55600 55628])
                            ("self" variable nil (reparse-symbol indented_block_body) [55681 55699])
                            ("self" variable nil (reparse-symbol indented_block_body) [55768 55786])
                            ("self" code nil (reparse-symbol indented_block_body) [55795 55812]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54839 54843])
                            ("ax" variable nil (reparse-symbol function_parameters) [54845 54847])
                            ("onselect" variable nil (reparse-symbol function_parameters) [54849 54857])
                            ("direction" variable nil (reparse-symbol function_parameters) [54859 54868])
                            ("minspan" variable nil (reparse-symbol function_parameters) [54870 54877])
                            ("useblit" variable nil (reparse-symbol function_parameters) [54884 54891])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [54916 54925])
                            ("onmove_callback" variable nil (reparse-symbol function_parameters) [54932 54947])
                            ("span_stays" variable nil (reparse-symbol function_parameters) [54954 54964])
                            ("button" variable nil (reparse-symbol function_parameters) [54989 54995]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54826 55813])
                    ("new_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55831 55835])
                            ("ax" variable nil (reparse-symbol function_parameters) [55837 55839]))                          
                        :documentation "Set SpanSelector to operate on a new Axes")
                        (reparse-symbol indented_block_body) [55818 57098])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57114 57118])
                            ("event" variable nil (reparse-symbol function_parameters) [57120 57125]))                          
                        :documentation "return *True* if *event* should be ignored")
                        (reparse-symbol indented_block_body) [57103 57256])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57272 57276])
                            ("event" variable nil (reparse-symbol function_parameters) [57278 57283]))                          
                        :documentation "on button press event")
                        (reparse-symbol indented_block_body) [57261 57791])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57809 57813])
                            ("event" variable nil (reparse-symbol function_parameters) [57815 57820]))                          
                        :documentation "on button release event")
                        (reparse-symbol indented_block_body) [57796 58776])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58793 58797])
                            ("event" variable nil (reparse-symbol function_parameters) [58799 58804]))                          
                        :documentation "on motion notify event")
                        (reparse-symbol indented_block_body) [58781 59844]))                  
                :type "class")
                nil [52927 59844])
            ("ToolHandles" type
               (:documentation "Control handles for canvas tools.

    Parameters
    ----------
    ax : :class:`matplotlib.axes.Axes`
        Matplotlib axes where tool handles are displayed.
    x, y : 1D arrays
        Coordinates of control handles.
    marker : str
        Shape of marker used to display handle. See `matplotlib.pyplot.plot`.
    marker_props : dict
        Additional marker properties. See :class:`matplotlib.lines.Line2D`.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [60394 60406])
                            ("props" variable nil (reparse-symbol indented_block_body) [60416 60544])
                            ("props" code nil (reparse-symbol indented_block_body) [60553 60615])
                            ("self" variable nil (reparse-symbol indented_block_body) [60624 60679])
                            ("self" code nil (reparse-symbol indented_block_body) [60688 60719])
                            ("self" variable nil (reparse-symbol indented_block_body) [60728 60755]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60324 60328])
                            ("ax" variable nil (reparse-symbol function_parameters) [60330 60332])
                            ("x" variable nil (reparse-symbol function_parameters) [60334 60335])
                            ("y" variable nil (reparse-symbol function_parameters) [60337 60338])
                            ("marker" variable nil (reparse-symbol function_parameters) [60340 60346])
                            ("marker_props" variable nil (reparse-symbol function_parameters) [60352 60364])
                            ("useblit" variable nil (reparse-symbol function_parameters) [60371 60378]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [60311 60756])
                    ("x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60781 60785]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60761 60829])
                    ("y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60854 60858]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60834 60902])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60920 60924])
                            ("pts" variable nil (reparse-symbol function_parameters) [60926 60929])
                            ("y" variable nil (reparse-symbol function_parameters) [60931 60932]))                          
                        :documentation "Set x and y positions of handles")
                        (reparse-symbol indented_block_body) [60907 61104])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61125 61129])
                            ("val" variable nil (reparse-symbol function_parameters) [61131 61134]))                          )
                        (reparse-symbol indented_block_body) [61109 61176])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61198 61202])
                            ("val" variable nil (reparse-symbol function_parameters) [61204 61207]))                          )
                        (reparse-symbol indented_block_body) [61181 61250])
                    ("closest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61267 61271])
                            ("x" variable nil (reparse-symbol function_parameters) [61273 61274])
                            ("y" variable nil (reparse-symbol function_parameters) [61276 61277]))                          
                        :documentation "Return index and pixel distance to closest index.")
                        (reparse-symbol indented_block_body) [61255 61718]))                  
                :type "class")
                nil [59846 61718])
            ("RectangleSelector" type
               (:documentation "
    Select a rectangular region of an axes.

    For the cursor to remain responsive you must keep a reference to
    it.

    Example usage::

        from matplotlib.widgets import  RectangleSelector
        from pylab import *

        def onselect(eclick, erelease):
          'eclick and erelease are matplotlib events at press and release'
          print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))
          print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))
          print(' used button   : ', eclick.button)

        def toggle_selector(event):
            print(' Key pressed.')
            if event.key in ['Q', 'q'] and toggle_selector.RS.active:
                print(' RectangleSelector deactivated.')
                toggle_selector.RS.set_active(False)
            if event.key in ['A', 'a'] and not toggle_selector.RS.active:
                print(' RectangleSelector activated.')
                toggle_selector.RS.set_active(True)

        x = arange(100)/(99.0)
        y = sin(x)
        fig = figure
        ax = subplot(111)
        ax.plot(x,y)

        toggle_selector.RS = RectangleSelector(ax, onselect, drawtype='line')
        connect('key_press_event', toggle_selector)
        show()
    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("_shape_klass" variable nil (reparse-symbol indented_block_body) [63035 63059])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a selector in *ax*.  When a selection is made, clear
        the span and call onselect with::

          onselect(pos_1, pos_2)

        and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are
        arrays of length 2 containing the x- and y-coordinate.

        If *minspanx* is not *None* then events smaller than *minspanx*
        in x direction are ignored (it's the same for y).

        The rectangle is drawn with *rectprops*; default::

          rectprops = dict(facecolor='red', edgecolor = 'black',
                           alpha=0.2, fill=True)

        The line is drawn with *lineprops*; default::

          lineprops = dict(color='black', linestyle='-',
                           linewidth = 2, alpha=0.5)

        Use *drawtype* if you want the mouse to draw a line,
        a box or nothing between click and actual position by setting

        ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.
        Drawing a line would result in a line from vertex A to vertex C in
        a rectangle ABCD.

        *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*
        and *minspanx* will be interpreted in the same coordinates as
        the x and y axis. If 'pixels', they are in pixels.

        *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button

        *interactive* will draw a set of handles and allow you interact
        with the widget after it is drawn.

        *state_modifier_keys* are keyboard modifiers that affect the behavior
        of the widget.

        The defaults are:
        dict(move=' ', clear='escape', square='shift', center='ctrl')

        Keyboard modifiers, which:
        'move': Move the existing shape.
        'clear': Clear the current shape.
        'square': Makes the shape square.
        'center': Make the initial point the center of the shape.
        'square' and 'center' can be combined.
        \"\"\"" code nil (reparse-symbol indented_block_body) [63377 65659])
                            ("_SelectorWidget" code nil (reparse-symbol indented_block_body) [65668 65851])
                            ("self" variable nil (reparse-symbol indented_block_body) [65861 65880])
                            ("self" variable nil (reparse-symbol indented_block_body) [65889 65908])
                            ("self" variable nil (reparse-symbol indented_block_body) [65917 65947])
                            ("if" code nil (reparse-symbol indented_block_body) [65957 66124])
                            ("if" code nil (reparse-symbol indented_block_body) [66133 66582])
                            ("if" code nil (reparse-symbol indented_block_body) [66590 67015])
                            ("self" variable nil (reparse-symbol indented_block_body) [67024 67048])
                            ("self" variable nil (reparse-symbol indented_block_body) [67057 67081])
                            ("if" code nil (reparse-symbol indented_block_body) [67091 67204])
                            ("self" variable nil (reparse-symbol indented_block_body) [67213 67241])
                            ("self" variable nil (reparse-symbol indented_block_body) [67250 67274])
                            ("self" variable nil (reparse-symbol indented_block_body) [67284 67306])
                            ("if" code nil (reparse-symbol indented_block_body) [67316 67448])
                            ("self" variable nil (reparse-symbol indented_block_body) [67456 67501])
                            ("xc, yc" code nil (reparse-symbol indented_block_body) [67510 67531])
                            ("self" variable nil (reparse-symbol indented_block_body) [67540 67676])
                            ("self" variable nil (reparse-symbol indented_block_body) [67686 67725])
                            ("xe, ye" code nil (reparse-symbol indented_block_body) [67734 67760])
                            ("self" variable nil (reparse-symbol indented_block_body) [67769 67954])
                            ("xc, yc" code nil (reparse-symbol indented_block_body) [67964 67984])
                            ("self" variable nil (reparse-symbol indented_block_body) [67993 68185])
                            ("self" variable nil (reparse-symbol indented_block_body) [68195 68220])
                            ("self" variable nil (reparse-symbol indented_block_body) [68230 68391])
                            ("if" code nil (reparse-symbol indented_block_body) [68401 68468])
                            ("self" variable nil (reparse-symbol indented_block_body) [68477 68506]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63078 63082])
                            ("ax" variable nil (reparse-symbol function_parameters) [63084 63086])
                            ("onselect" variable nil (reparse-symbol function_parameters) [63088 63096])
                            ("drawtype" variable nil (reparse-symbol function_parameters) [63098 63106])
                            ("minspanx" variable nil (reparse-symbol function_parameters) [63131 63139])
                            ("minspany" variable nil (reparse-symbol function_parameters) [63146 63154])
                            ("useblit" variable nil (reparse-symbol function_parameters) [63161 63168])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [63193 63202])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [63209 63218])
                            ("spancoords" variable nil (reparse-symbol function_parameters) [63225 63235])
                            ("button" variable nil (reparse-symbol function_parameters) [63261 63267])
                            ("maxdist" variable nil (reparse-symbol function_parameters) [63274 63281])
                            ("marker_props" variable nil (reparse-symbol function_parameters) [63286 63298])
                            ("interactive" variable nil (reparse-symbol function_parameters) [63322 63333])
                            ("state_modifier_keys" variable nil (reparse-symbol function_parameters) [63341 63360]))                          
                        :documentation "
        Create a selector in *ax*.  When a selection is made, clear
        the span and call onselect with::

          onselect(pos_1, pos_2)

        and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are
        arrays of length 2 containing the x- and y-coordinate.

        If *minspanx* is not *None* then events smaller than *minspanx*
        in x direction are ignored (it's the same for y).

        The rectangle is drawn with *rectprops*; default::

          rectprops = dict(facecolor='red', edgecolor = 'black',
                           alpha=0.2, fill=True)

        The line is drawn with *lineprops*; default::

          lineprops = dict(color='black', linestyle='-',
                           linewidth = 2, alpha=0.5)

        Use *drawtype* if you want the mouse to draw a line,
        a box or nothing between click and actual position by setting

        ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.
        Drawing a line would result in a line from vertex A to vertex C in
        a rectangle ABCD.

        *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*
        and *minspanx* will be interpreted in the same coordinates as
        the x and y axis. If 'pixels', they are in pixels.

        *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button

        *interactive* will draw a set of handles and allow you interact
        with the widget after it is drawn.

        *state_modifier_keys* are keyboard modifiers that affect the behavior
        of the widget.

        The defaults are:
        dict(move=' ', clear='escape', square='shift', center='ctrl')

        Keyboard modifiers, which:
        'move': Move the existing shape.
        'clear': Clear the current shape.
        'square': Makes the shape square.
        'center': Make the initial point the center of the shape.
        'square' and 'center' can be combined.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [63065 68507])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68523 68527])
                            ("event" variable nil (reparse-symbol function_parameters) [68529 68534]))                          
                        :documentation "on button press event")
                        (reparse-symbol indented_block_body) [68512 69019])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69037 69041])
                            ("event" variable nil (reparse-symbol function_parameters) [69043 69048]))                          
                        :documentation "on button release event")
                        (reparse-symbol indented_block_body) [69024 70932])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70949 70953])
                            ("event" variable nil (reparse-symbol function_parameters) [70955 70960]))                          
                        :documentation "on motion notify event if box/line is wanted")
                        (reparse-symbol indented_block_body) [70937 72896])
                    ("_rect_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72930 72934]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [72901 73354])
                    ("corners" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73385 73389]))                          
                        :documentation "Corners of rectangle from lower left, moving clockwise.")
                        (reparse-symbol indented_block_body) [73359 73622])
                    ("edge_centers" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73658 73662]))                          
                        :documentation "Midpoint of rectangle edges from left, moving clockwise.")
                        (reparse-symbol indented_block_body) [73627 73942])
                    ("center" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73972 73976]))                          
                        :documentation "Center of rectangle")
                        (reparse-symbol indented_block_body) [73947 74110])
                    ("extents" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74141 74145]))                          
                        :documentation "Return (xmin, xmax, ymin, ymax).")
                        (reparse-symbol indented_block_body) [74115 74374])
                    ("extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74411 74415])
                            ("extents" variable nil (reparse-symbol function_parameters) [74417 74424]))                          
                        :decorators 
                          ( ("extents.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [74379 74749])
                    ("draw_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74769 74773])
                            ("extents" variable nil (reparse-symbol function_parameters) [74775 74782]))                          )
                        (reparse-symbol indented_block_body) [74754 75423])
                    ("_set_active_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75451 75455])
                            ("event" variable nil (reparse-symbol function_parameters) [75457 75462]))                          
                        :documentation "Set active handle based on the location of the mouse event")
                        (reparse-symbol indented_block_body) [75428 76792])
                    ("geometry" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76824 76828]))                          
                        :documentation "
        Returns numpy.ndarray of shape (2,5) containing
        x (``RectangleSelector.geometry[1,:]``) and
        y (``RectangleSelector.geometry[0,:]``)
        coordinates of the four corners of the rectangle starting
        and ending in the top left corner.
        ")
                        (reparse-symbol indented_block_body) [76797 77378]))                  
                :type "class")
                nil [61720 77378])
            ("EllipseSelector" type
               (:documentation "
    Select an elliptical region of an axes.

    For the cursor to remain responsive you must keep a reference to
    it.

    Example usage::

        from matplotlib.widgets import  EllipseSelector
        from pylab import *

        def onselect(eclick, erelease):
          'eclick and erelease are matplotlib events at press and release'
          print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))
          print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))
          print(' used button   : ', eclick.button)

        def toggle_selector(event):
            print(' Key pressed.')
            if event.key in ['Q', 'q'] and toggle_selector.ES.active:
                print(' EllipseSelector deactivated.')
                toggle_selector.RS.set_active(False)
            if event.key in ['A', 'a'] and not toggle_selector.ES.active:
                print(' EllipseSelector activated.')
                toggle_selector.ES.set_active(True)

        x = arange(100)/(99.0)
        y = sin(x)
        fig = figure
        ax = subplot(111)
        ax.plot(x,y)

        toggle_selector.ES = EllipseSelector(ax, onselect, drawtype='line')
        connect('key_press_event', toggle_selector)
        show()
    "
                :superclasses ("RectangleSelector")
                :members 
                  ( ("_shape_klass" variable nil (reparse-symbol indented_block_body) [78686 78708])
                    ("draw_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78729 78733])
                            ("extents" variable nil (reparse-symbol function_parameters) [78735 78742]))                          )
                        (reparse-symbol indented_block_body) [78714 79323])
                    ("_rect_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79357 79361]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [79328 79757]))                  
                :type "class")
                nil [77380 79757])
            ("LassoSelector" type
               (:documentation "
    Selection curve of an arbitrary shape.

    For the selector to remain responsive you must keep a reference to it.

    The selected path can be used in conjunction with `~.Path.contains_point`
    to select data points from an image.

    In contrast to `Lasso`, `LassoSelector` is written with an interface
    similar to `RectangleSelector` and `SpanSelector`, and will continue to
    interact with the axes until disconnected.

    Example usage::

        ax = subplot(111)
        ax.plot(x,y)

        def onselect(verts):
            print(verts)
        lasso = LassoSelector(ax, onselect)

    Parameters
    ----------
    ax : :class:`~matplotlib.axes.Axes`
        The parent axes for the widget.
    onselect : function
        Whenever the lasso is released, the *onselect* function is called and
        passed the vertices of the selected path.
    button : List[Int], optional
        A list of integers indicating which mouse buttons should be used for
        rectangle selection. You can also specify a single integer if only a
        single button is desired.  Default is ``None``, which does not limit
        which button can be used.

        Note, typically:

        - 1 = left mouse button
        - 2 = center mouse button (scroll wheel)
        - 3 = right mouse button

    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_SelectorWidget" code nil (reparse-symbol indented_block_body) [81232 81341])
                            ("self" variable nil (reparse-symbol indented_block_body) [81351 81368])
                            ("if" code nil (reparse-symbol indented_block_body) [81378 81431])
                            ("if" code nil (reparse-symbol indented_block_body) [81439 81492])
                            ("self" variable nil (reparse-symbol indented_block_body) [81500 81539])
                            ("self" code nil (reparse-symbol indented_block_body) [81548 81576])
                            ("self" code nil (reparse-symbol indented_block_body) [81585 81612])
                            ("self" variable nil (reparse-symbol indented_block_body) [81621 81647]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81138 81142])
                            ("ax" variable nil (reparse-symbol function_parameters) [81144 81146])
                            ("onselect" variable nil (reparse-symbol function_parameters) [81148 81156])
                            ("useblit" variable nil (reparse-symbol function_parameters) [81163 81170])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [81177 81186])
                            ("button" variable nil (reparse-symbol function_parameters) [81210 81216]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [81125 81648])
                    ("onpress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81665 81669])
                            ("event" variable nil (reparse-symbol function_parameters) [81671 81676]))                          )
                        (reparse-symbol indented_block_body) [81653 81705])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81721 81725])
                            ("event" variable nil (reparse-symbol function_parameters) [81727 81732]))                          )
                        (reparse-symbol indented_block_body) [81710 81816])
                    ("onrelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81835 81839])
                            ("event" variable nil (reparse-symbol function_parameters) [81841 81846]))                          )
                        (reparse-symbol indented_block_body) [81821 81877])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81895 81899])
                            ("event" variable nil (reparse-symbol function_parameters) [81901 81906]))                          )
                        (reparse-symbol indented_block_body) [81882 82135])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82152 82156])
                            ("event" variable nil (reparse-symbol function_parameters) [82158 82163]))                          )
                        (reparse-symbol indented_block_body) [82140 82340]))                  
                :type "class")
                nil [79759 82340])
            ("PolygonSelector" type
               (:documentation "Select a polygon region of an axes.

    Place vertices with each mouse click, and make the selection by completing
    the polygon (clicking on the first vertex). Hold the *ctrl* key and click
    and drag a vertex to reposition it (the *ctrl* key is not necessary if the
    polygon has already been completed). Hold the *shift* key and click and
    drag anywhere in the axes to move all vertices. Press the *esc* key to
    start a new polygon.

    For the selector to remain responsive you must keep a reference to
    it.

    Parameters
    ----------
    ax : :class:`~matplotlib.axes.Axes`
        The parent axes for the widget.
    onselect : function
        When a polygon is completed or modified after completion,
        the `onselect` function is called and passed a list of the vertices as
        ``(xdata, ydata)`` tuples.
    useblit : bool, optional
    lineprops : dict, optional
        The line for the sides of the polygon is drawn with the properties
        given by `lineprops`. The default is ``dict(color='k', linestyle='-',
        linewidth=2, alpha=0.5)``.
    markerprops : dict, optional
        The markers for the vertices of the polygon are drawn with the
        properties given by `markerprops`. The default is ``dict(marker='o',
        markersize=7, mec='k', mfc='k', alpha=0.5)``.
    vertex_select_radius : float, optional
        A vertex is selected (to complete the polygon or to move a vertex)
        if the mouse click is within `vertex_select_radius` pixels of the
        vertex. The default radius is 15 pixels.

    See Also
    --------
    :ref:`sphx_glr_gallery_widgets_polygon_selector_demo.py`
    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("state_modifier_keys" variable nil (reparse-symbol indented_block_body) [84531 84792])
                            ("_SelectorWidget" code nil (reparse-symbol indented_block_body) [84801 84936])
                            ("self, self" code nil (reparse-symbol indented_block_body) [84946 84975])
                            ("self" variable nil (reparse-symbol indented_block_body) [84984 85015])
                            ("if" code nil (reparse-symbol indented_block_body) [85025 85126])
                            ("lineprops" variable nil (reparse-symbol indented_block_body) [85134 85170])
                            ("self" variable nil (reparse-symbol indented_block_body) [85179 85230])
                            ("self" code nil (reparse-symbol indented_block_body) [85239 85266])
                            ("if" code nil (reparse-symbol indented_block_body) [85276 85373])
                            ("self" variable nil (reparse-symbol indented_block_body) [85381 85581])
                            ("self" code nil (reparse-symbol indented_block_body) [85591 85619])
                            ("self" variable nil (reparse-symbol indented_block_body) [85628 85676])
                            ("self" variable nil (reparse-symbol indented_block_body) [85686 85742])
                            ("self" code nil (reparse-symbol indented_block_body) [85751 85773]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84071 84075])
                            ("ax" variable nil (reparse-symbol function_parameters) [84077 84079])
                            ("onselect" variable nil (reparse-symbol function_parameters) [84081 84089])
                            ("useblit" variable nil (reparse-symbol function_parameters) [84091 84098])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [84123 84132])
                            ("markerprops" variable nil (reparse-symbol function_parameters) [84139 84150])
                            ("vertex_select_radius" variable nil (reparse-symbol function_parameters) [84157 84177]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [84058 85774])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85790 85794])
                            ("event" variable nil (reparse-symbol function_parameters) [85796 85801]))                          
                        :documentation "Button press event handler")
                        (reparse-symbol indented_block_body) [85779 86377])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86395 86399])
                            ("event" variable nil (reparse-symbol function_parameters) [86401 86406]))                          
                        :documentation "Button release event handler")
                        (reparse-symbol indented_block_body) [86382 87109])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87125 87129])
                            ("event" variable nil (reparse-symbol function_parameters) [87131 87136]))                          
                        :documentation "Cursor move event handler and validator")
                        (reparse-symbol indented_block_body) [87114 87609])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87626 87630])
                            ("event" variable nil (reparse-symbol function_parameters) [87632 87637]))                          
                        :documentation "Cursor move event handler")
                        (reparse-symbol indented_block_body) [87614 89338])
                    ("_on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89361 89365])
                            ("event" variable nil (reparse-symbol function_parameters) [89367 89372]))                          
                        :documentation "Key press event handler")
                        (reparse-symbol indented_block_body) [89343 89723])
                    ("_on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89748 89752])
                            ("event" variable nil (reparse-symbol function_parameters) [89754 89759]))                          
                        :documentation "Key release event handler")
                        (reparse-symbol indented_block_body) [89728 90574])
                    ("_draw_polygon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90597 90601]))                          
                        :documentation "Redraw the polygon based on the new vertex positions.")
                        (reparse-symbol indented_block_body) [90579 91245])
                    ("verts" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91274 91278]))                          
                        :documentation "Get the polygon vertices.

        Returns
        -------
        list
            A list of the vertices of the polygon as ``(xdata, ydata)`` tuples.
        ")
                        (reparse-symbol indented_block_body) [91250 91511]))                  
                :type "class")
                nil [82342 91511])
            ("Lasso" type
               (:documentation "Selection curve of an arbitrary shape.

    The selected path can be used in conjunction with
    :func:`~matplotlib.path.Path.contains_point` to select data points
    from an image.

    Unlike :class:`LassoSelector`, this must be initialized with a starting
    point `xy`, and the `Lasso` events are destroyed upon release.

    Parameters
    ----------
    ax : `~matplotlib.axes.Axes`
        The parent axes for the widget.
    xy : array
        Coordinates of the start of the lasso.
    callback : callable
        Whenever the lasso is released, the `callback` function is called and
        passed the vertices of the selected path.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("AxesWidget" code nil (reparse-symbol indented_block_body) [92269 92298])
                            ("self" code nil (reparse-symbol indented_block_body) [92308 92360])
                            ("if" code nil (reparse-symbol indented_block_body) [92369 92457])
                            ("x, y" code nil (reparse-symbol indented_block_body) [92466 92475])
                            ("self" variable nil (reparse-symbol indented_block_body) [92484 92505])
                            ("self" variable nil (reparse-symbol indented_block_body) [92514 92578])
                            ("self" code nil (reparse-symbol indented_block_body) [92587 92614])
                            ("self" variable nil (reparse-symbol indented_block_body) [92623 92647])
                            ("self" code nil (reparse-symbol indented_block_body) [92656 92714])
                            ("self" code nil (reparse-symbol indented_block_body) [92723 92777]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92217 92221])
                            ("ax" variable nil (reparse-symbol function_parameters) [92223 92225])
                            ("xy" variable nil (reparse-symbol function_parameters) [92227 92229])
                            ("callback" variable nil (reparse-symbol function_parameters) [92231 92239])
                            ("useblit" variable nil (reparse-symbol function_parameters) [92246 92253]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92204 92778])
                    ("onrelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92797 92801])
                            ("event" variable nil (reparse-symbol function_parameters) [92803 92808]))                          )
                        (reparse-symbol indented_block_body) [92783 93135])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93151 93155])
                            ("event" variable nil (reparse-symbol function_parameters) [93157 93162]))                          )
                        (reparse-symbol indented_block_body) [93140 93693]))                  
                :type "class")
                nil [91513 93693]))          
      :file "widgets.py"
      :pointmax 93693
      :fsize 93692
      :lastmodtime '(23240 23001 121461 0)
      :unmatched-syntax '((FROM 684 . 688) (PERIOD 689 . 690) (FROM 658 . 662) (PERIOD 663 . 664) (FROM 610 . 614) (PERIOD 615 . 616)))
    (semanticdb-table "semanticdb-table-15b9708"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for the efficient drawing of large collections of objects that
share most properties, e.g., a large number of line segments or
polygons.

The classes are not meant to be as flexible as their single element
counterparts (e.g., you may not be able to select all line styles) but
they are meant to be fast for common use cases (e.g., a large set of solid
line segemnts)
\"\"\"" code nil nil [1 383])
            ("" code nil nil [407 492])
            ("warnings" include nil nil [494 509])
            ("six" include nil nil [511 521])
            ("six.moves" include nil nil [522 547])
            ("try" code nil nil [548 649])
            ("numpy" include nil nil [650 668])
            ("matplotlib" include nil nil [669 693])
            ("" code nil nil [708 823])
            ("CIRCLE_AREA_FACTOR" code nil nil [825 866])
            ("_color_aliases" variable nil nil [869 962])
            ("Collection" type
               (:documentation "
    Base class for Collections.  Must be subclassed to be usable.

    All properties in a collection must be sequences or scalars;
    if scalars, they will be converted to sequences.  The
    property of the ith element of the collection is::

      prop[i % len(props)]

    Exceptions are *capstyle* and *joinstyle* properties, these can
    only be set globally for the whole collection.

    Keyword arguments and default values:

        * *edgecolors*: None
        * *facecolors*: None
        * *linewidths*: None
        * *capstyle*:   None
        * *joinstyle*:  None
        * *antialiaseds*: None
        * *offsets*: None
        * *transOffset*: transforms.IdentityTransform()
        * *offset_position*: 'screen' (default) or 'data'
        * *norm*: None (optional for
          :class:`matplotlib.cm.ScalarMappable`)
        * *cmap*: None (optional for
          :class:`matplotlib.cm.ScalarMappable`)
        * *hatch*: None
        * *zorder*: 1


    *offsets* and *transOffset* are used to translate the patch after
    rendering (default no offsets).  If offset_position is 'screen'
    (default) the offset is applied after the master transform has
    been applied, that is, the offsets are in screen coordinates.  If
    offset_position is 'data', the offset is applied before the master
    transform, i.e., the offsets are in data coordinates.

    If any of *edgecolors*, *facecolors*, *linewidths*, *antialiaseds*
    are None, they default to their :data:`matplotlib.rcParams` patch
    setting, in sequence form.

    The use of :class:`~matplotlib.cm.ScalarMappable` is optional.  If
    the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not None
    (i.e., a call to set_array has been made), at draw time a call to
    scalar mappable will be made to set the face colors.
    "
                :superclasses ("artist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("_offsets" variable nil (reparse-symbol indented_block_body) [2855 2882])
                    ("_transOffset" variable nil (reparse-symbol indented_block_body) [2887 2932])
                    ("_transforms" variable nil (reparse-symbol indented_block_body) [3305 3338])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [3430 3451])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a Collection

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [4092 4159])
                            ("artist" code nil (reparse-symbol indented_block_body) [4168 4196])
                            ("cm" code nil (reparse-symbol indented_block_body) [4205 4249])
                            ("self" variable nil (reparse-symbol indented_block_body) [4363 4399])
                            ("self" variable nil (reparse-symbol indented_block_body) [4440 4473])
                            ("self" variable nil (reparse-symbol indented_block_body) [4530 4547])
                            ("self" variable nil (reparse-symbol indented_block_body) [4556 4578])
                            ("self" variable nil (reparse-symbol indented_block_body) [4587 4609])
                            ("self" variable nil (reparse-symbol indented_block_body) [4658 4722])
                            ("self" code nil (reparse-symbol indented_block_body) [4731 4761])
                            ("self" code nil (reparse-symbol indented_block_body) [4770 4800])
                            ("self" code nil (reparse-symbol indented_block_body) [4809 4839])
                            ("self" code nil (reparse-symbol indented_block_body) [4848 4878])
                            ("self" code nil (reparse-symbol indented_block_body) [4887 4921])
                            ("self" code nil (reparse-symbol indented_block_body) [4930 4961])
                            ("self" code nil (reparse-symbol indented_block_body) [4970 4989])
                            ("self" code nil (reparse-symbol indented_block_body) [4998 5019])
                            ("self" code nil (reparse-symbol indented_block_body) [5028 5069])
                            ("self" code nil (reparse-symbol indented_block_body) [5078 5101])
                            ("if" code nil (reparse-symbol indented_block_body) [5111 5212])
                            ("if" code nil (reparse-symbol indented_block_body) [5221 5326])
                            ("self" variable nil (reparse-symbol indented_block_body) [5335 5367])
                            ("self" variable nil (reparse-symbol indented_block_body) [5376 5404])
                            ("if" code nil (reparse-symbol indented_block_body) [5413 5821])
                            ("self" variable nil (reparse-symbol indented_block_body) [5830 5855])
                            ("self" code nil (reparse-symbol indented_block_body) [5864 5883])
                            ("self" variable nil (reparse-symbol indented_block_body) [5892 5910]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3470 3474])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [3493 3503])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [3527 3537])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [3561 3571])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [3595 3605])
                            ("capstyle" variable nil (reparse-symbol function_parameters) [3632 3640])
                            ("joinstyle" variable nil (reparse-symbol function_parameters) [3664 3673])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [3697 3709])
                            ("offsets" variable nil (reparse-symbol function_parameters) [3733 3740])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [3764 3775])
                            ("norm" variable nil (reparse-symbol function_parameters) [3799 3803])
                            ("cmap" variable nil (reparse-symbol function_parameters) [3858 3862])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [3895 3905])
                            ("hatch" variable nil (reparse-symbol function_parameters) [3928 3933])
                            ("urls" variable nil (reparse-symbol function_parameters) [3957 3961])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [3985 4000])
                            ("zorder" variable nil (reparse-symbol function_parameters) [4028 4034])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4055 4063]))                          
                        :documentation "
        Create a Collection

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3457 5911])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5930 5934]))                          )
                        (reparse-symbol indented_block_body) [5916 5964])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5983 5987]))                          )
                        (reparse-symbol indented_block_body) [5969 6024])
                    ("get_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6048 6052]))                          )
                        (reparse-symbol indented_block_body) [6029 6087])
                    ("get_offset_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6117 6121]))                          )
                        (reparse-symbol indented_block_body) [6092 6324])
                    ("get_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6345 6349])
                            ("transData" variable nil (reparse-symbol function_parameters) [6351 6360]))                          )
                        (reparse-symbol indented_block_body) [6329 7354])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7381 7385])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7387 7395]))                          )
                        (reparse-symbol indented_block_body) [7359 7568])
                    ("_prepare_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7593 7597]))                          
                        :documentation "Point prep for drawing and hit testing")
                        (reparse-symbol indented_block_body) [7573 9054])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9100 9104])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9106 9114]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9059 12423])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12447 12451])
                            ("pr" variable nil (reparse-symbol function_parameters) [12453 12455]))                          
                        :documentation "Set the pick radius used for containment tests.

        .. ACCEPTS: float distance in points

        Parameters
        ----------
        d : float
            Pick radius, in points.
        ")
                        (reparse-symbol indented_block_body) [12428 12698])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12722 12726]))                          )
                        (reparse-symbol indented_block_body) [12703 12761])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12779 12783])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [12785 12795]))                          
                        :documentation "
        Test whether the mouse event occurred in the collection.

        Returns True | False, ``dict(ind=itemlist)``, where every
        item in itemlist contains the event.
        ")
                        (reparse-symbol indented_block_body) [12766 13738])
                    ("set_urls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13756 13760])
                            ("urls" variable nil (reparse-symbol function_parameters) [13762 13766]))                          
                        :documentation "
        Parameters
        ----------
        urls : List[str] or None
            .. ACCEPTS: List[str] or None
        ")
                        (reparse-symbol indented_block_body) [13743 13990])
                    ("get_urls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14008 14012]))                          )
                        (reparse-symbol indented_block_body) [13995 14041])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14060 14064])
                            ("hatch" variable nil (reparse-symbol function_parameters) [14066 14071]))                          )
                        (reparse-symbol indented_block_body) [14046 15019])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15038 15042]))                          
                        :documentation "Return the current hatching pattern.")
                        (reparse-symbol indented_block_body) [15024 15123])
                    ("set_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15144 15148])
                            ("offsets" variable nil (reparse-symbol function_parameters) [15150 15157]))                          
                        :documentation "
        Set the offsets for the collection.  *offsets* can be a scalar
        or a sequence.

        ACCEPTS: float or sequence of floats
        ")
                        (reparse-symbol indented_block_body) [15128 15733])
                    ("get_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15754 15758]))                          
                        :documentation "Return the offsets for the collection.")
                        (reparse-symbol indented_block_body) [15738 16024])
                    ("set_offset_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16053 16057])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [16059 16074]))                          
                        :documentation "
        Set how offsets are applied.  If *offset_position* is 'screen'
        (default) the offset is applied after the master transform has
        been applied, that is, the offsets are in screen coordinates.
        If offset_position is 'data', the offset is applied before the
        master transform, i.e., the offsets are in data coordinates.

        .. ACCEPTS: [ 'screen' | 'data' ]
        ")
                        (reparse-symbol indented_block_body) [16029 16699])
                    ("get_offset_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16728 16732]))                          
                        :documentation "
        Returns how offsets are applied for the collection.  If
        *offset_position* is 'screen', the offset is applied after the
        master transform has been applied, that is, the offsets are in
        screen coordinates.  If offset_position is 'data', the offset
        is applied before the master transform, i.e., the offsets are
        in data coordinates.
        ")
                        (reparse-symbol indented_block_body) [16704 17171])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17194 17198])
                            ("lw" variable nil (reparse-symbol function_parameters) [17200 17202]))                          
                        :documentation "
        Set the linewidth(s) for the collection.  *lw* can be a scalar
        or a sequence; if it is a sequence the patches will cycle
        through the sequence

        ACCEPTS: float or sequence of floats
        ")
                        (reparse-symbol indented_block_body) [17176 17864])
                    ("set_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17888 17892])
                            ("lw" variable nil (reparse-symbol function_parameters) [17894 17896]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [17869 17975])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17991 17995])
                            ("lw" variable nil (reparse-symbol function_parameters) [17997 17999]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [17980 18078])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18101 18105])
                            ("ls" variable nil (reparse-symbol function_parameters) [18107 18109]))                          
                        :documentation "
        Set the linestyle(s) for the collection.

        ===========================   =================
        linestyle                     description
        ===========================   =================
        ``'-'`` or ``'solid'``        solid line
        ``'--'`` or  ``'dashed'``     dashed line
        ``'-.'`` or  ``'dashdot'``    dash-dotted line
        ``':'`` or ``'dotted'``       dotted line
        ===========================   =================

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq),

        where ``onoffseq`` is an even length tuple of on and off ink
        in points.

        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
                   (offset, on-off-dash-seq) |
                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
                   ``' '`` | ``''``]

        Parameters
        ----------
        ls : { '-',  '--', '-.', ':'} and more see description
            The line style.
        ")
                        (reparse-symbol indented_block_body) [18083 19915])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19937 19941])
                            ("cs" variable nil (reparse-symbol function_parameters) [19943 19945]))                          
                        :documentation "
        Set the capstyle for the collection. The capstyle can
        only be set globally for all elements in the collection

        Parameters
        ----------
        cs : ['butt' | 'round' | 'projecting']
            The capstyle
        ")
                        (reparse-symbol indented_block_body) [19920 20376])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20398 20402]))                          )
                        (reparse-symbol indented_block_body) [20381 20435])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20458 20462])
                            ("js" variable nil (reparse-symbol function_parameters) [20464 20466]))                          
                        :documentation "
        Set the joinstyle for the collection. The joinstyle can only be
        set globally for all elements in the collection.

        Parameters
        ----------
        js : ['miter' | 'round' | 'bevel']
            The joinstyle
        ")
                        (reparse-symbol indented_block_body) [20440 20895])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20918 20922]))                          )
                        (reparse-symbol indented_block_body) [20900 20956])
                    ("_bcast_lwls" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("linewidths" variable nil (reparse-symbol function_parameters) [20995 21005])
                            ("dashes" variable nil (reparse-symbol function_parameters) [21007 21013]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20961 22335])
                    ("set_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22359 22363])
                            ("ls" variable nil (reparse-symbol function_parameters) [22365 22367]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [22340 22446])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22466 22470])
                            ("ls" variable nil (reparse-symbol function_parameters) [22472 22474]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [22451 22553])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22578 22582])
                            ("aa" variable nil (reparse-symbol function_parameters) [22584 22586]))                          
                        :documentation "
        Set the antialiasing state for rendering.

        ACCEPTS: Boolean or sequence of booleans
        ")
                        (reparse-symbol indented_block_body) [22558 22878])
                    ("set_antialiaseds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22904 22908])
                            ("aa" variable nil (reparse-symbol function_parameters) [22910 22912]))                          
                        :documentation "alias for set_antialiased")
                        (reparse-symbol indented_block_body) [22883 22995])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23014 23018])
                            ("c" variable nil (reparse-symbol function_parameters) [23020 23021]))                          
                        :documentation "
        Set both the edgecolor and the facecolor.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [23000 23368])
                    ("_set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23392 23396])
                            ("c" variable nil (reparse-symbol function_parameters) [23398 23399]))                          )
                        (reparse-symbol indented_block_body) [23373 23732])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23755 23759])
                            ("c" variable nil (reparse-symbol function_parameters) [23761 23762]))                          
                        :documentation "
        Set the facecolor(s) of the collection.  *c* can be a
        matplotlib color spec (all patches have same color), or a
        sequence of specs; if it is a sequence the patches will
        cycle through the sequence.

        If *c* is 'none', the patch will not be filled.

        ACCEPTS: matplotlib color spec or sequence of specs
        ")
                        (reparse-symbol indented_block_body) [23737 24203])
                    ("set_facecolors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24227 24231])
                            ("c" variable nil (reparse-symbol function_parameters) [24233 24234]))                          
                        :documentation "alias for set_facecolor")
                        (reparse-symbol indented_block_body) [24208 24312])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24335 24339]))                          )
                        (reparse-symbol indented_block_body) [24317 24374])
                    ("get_facecolors" variable nil (reparse-symbol indented_block_body) [24378 24408])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24432 24436]))                          )
                        (reparse-symbol indented_block_body) [24414 24646])
                    ("get_edgecolors" variable nil (reparse-symbol indented_block_body) [24650 24680])
                    ("_set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24705 24709])
                            ("c" variable nil (reparse-symbol function_parameters) [24711 24712]))                          )
                        (reparse-symbol indented_block_body) [24686 25606])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25629 25633])
                            ("c" variable nil (reparse-symbol function_parameters) [25635 25636]))                          
                        :documentation "
        Set the edgecolor(s) of the collection. *c* can be a
        matplotlib color spec (all patches have same color), or a
        sequence of specs; if it is a sequence the patches will
        cycle through the sequence.

        If *c* is 'face', the edge color will always be the same as
        the face color.  If it is 'none', the patch boundary will not
        be drawn.

        ACCEPTS: matplotlib color spec or sequence of specs
        ")
                        (reparse-symbol indented_block_body) [25611 26176])
                    ("set_edgecolors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26200 26204])
                            ("c" variable nil (reparse-symbol function_parameters) [26206 26207]))                          
                        :documentation "alias for set_edgecolor")
                        (reparse-symbol indented_block_body) [26181 26285])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26304 26308])
                            ("alpha" variable nil (reparse-symbol function_parameters) [26310 26315]))                          
                        :documentation "
        Set the alpha tranparencies of the collection.  *alpha* must be
        a float or *None*.

        ACCEPTS: float or None
        ")
                        (reparse-symbol indented_block_body) [26290 26838])
                    ("get_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26862 26866]))                          )
                        (reparse-symbol indented_block_body) [26843 26901])
                    ("get_linewidth" variable nil (reparse-symbol indented_block_body) [26905 26935])
                    ("get_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26960 26964]))                          )
                        (reparse-symbol indented_block_body) [26941 26999])
                    ("get_dashes" variable nil (reparse-symbol indented_block_body) [27003 27046])
                    ("update_scalarmappable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27078 27082]))                          
                        :documentation "
        If the scalar mappable array is not none, update colors
        from scalar data
        ")
                        (reparse-symbol indented_block_body) [27052 27624])
                    ("get_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27642 27646]))                          )
                        (reparse-symbol indented_block_body) [27629 27717])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27738 27742])
                            ("other" variable nil (reparse-symbol function_parameters) [27744 27749]))                          )
                        (reparse-symbol indented_block_body) [27722 28563]))                  
                :type "class")
                nil [965 28563])
            ("docstring" code nil nil [28751 29488])
            ("_CollectionWithSizes" type
               (:documentation "
    Base class for collections that have an array of sizes.
    "
                :superclasses ("Collection")
                :members 
                  ( ("_factor" variable nil (reparse-symbol indented_block_body) [29611 29624])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29644 29648]))                          
                        :documentation "
        Returns the sizes of the elements in the collection.  The
        value represents the 'area' of the element.

        Returns
        -------
        sizes : array
            The 'area' of each element.
        ")
                        (reparse-symbol indented_block_body) [29630 29915])
                    ("set_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29934 29938])
                            ("sizes" variable nil (reparse-symbol function_parameters) [29940 29945])
                            ("dpi" variable nil (reparse-symbol function_parameters) [29947 29950]))                          
                        :documentation "
        Set the sizes of each member of the collection.

        Parameters
        ----------
        sizes : ndarray or None
            The size to set for each element of the collection.  The
            value is the 'area' of the element.

        dpi : float
            The dpi of the canvas. Defaults to 72.0.
        ")
                        (reparse-symbol indented_block_body) [29920 30771])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30817 30821])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30823 30831]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30776 30927]))                  
                :type "class")
                nil [29491 30927])
            ("PathCollection" type
               (:documentation "
    This is the most basic :class:`Collection` subclass.
    "
                :superclasses ("_CollectionWithSizes")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *paths* is a sequence of :class:`matplotlib.path.Path`
        instances.

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [31137 31258])
                            ("Collection" code nil (reparse-symbol indented_block_body) [31268 31303])
                            ("self" code nil (reparse-symbol indented_block_body) [31312 31333])
                            ("self" code nil (reparse-symbol indented_block_body) [31342 31363])
                            ("self" variable nil (reparse-symbol indented_block_body) [31372 31389]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31093 31097])
                            ("paths" variable nil (reparse-symbol function_parameters) [31099 31104])
                            ("sizes" variable nil (reparse-symbol function_parameters) [31106 31111])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31118 31126]))                          
                        :documentation "
        *paths* is a sequence of :class:`matplotlib.path.Path`
        instances.

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31050 31390])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31409 31413])
                            ("paths" variable nil (reparse-symbol function_parameters) [31415 31420]))                          )
                        (reparse-symbol indented_block_body) [31395 31477])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31496 31500]))                          )
                        (reparse-symbol indented_block_body) [31482 31530]))                  
                :type "class")
                nil [30929 31530])
            ("PolyCollection" type
               (:superclasses ("_CollectionWithSizes")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *verts* is a sequence of ( *verts0*, *verts1*, ...) where
        *verts_i* is a sequence of *xy* tuples of vertices, or an
        equivalent :mod:`numpy` array of shape (*nv*, 2).

        *sizes* is *None* (default) or a sequence of floats that
        scale the corresponding *verts_i*.  The scaling is applied
        before the Artist master transform; if the latter is an identity
        transform, then the overall scaling is such that if
        *verts_i* specify a unit square, then *sizes_i* is the area
        of that square in points^2.
        If len(*sizes*) < *nv*, the additional values will be
        taken cyclically from the array.

        *closed*, when *True*, will explicitly close the polygon.

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [31680 32449])
                            ("Collection" code nil (reparse-symbol indented_block_body) [32458 32493])
                            ("self" code nil (reparse-symbol indented_block_body) [32502 32523])
                            ("self" code nil (reparse-symbol indented_block_body) [32532 32561])
                            ("self" variable nil (reparse-symbol indented_block_body) [32570 32587]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31623 31627])
                            ("verts" variable nil (reparse-symbol function_parameters) [31629 31634])
                            ("sizes" variable nil (reparse-symbol function_parameters) [31636 31641])
                            ("closed" variable nil (reparse-symbol function_parameters) [31648 31654])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31661 31669]))                          
                        :documentation "
        *verts* is a sequence of ( *verts0*, *verts1*, ...) where
        *verts_i* is a sequence of *xy* tuples of vertices, or an
        equivalent :mod:`numpy` array of shape (*nv*, 2).

        *sizes* is *None* (default) or a sequence of floats that
        scale the corresponding *verts_i*.  The scaling is applied
        before the Artist master transform; if the latter is an identity
        transform, then the overall scaling is such that if
        *verts_i* specify a unit square, then *sizes_i* is the area
        of that square in points^2.
        If len(*sizes*) < *nv*, the additional values will be
        taken cyclically from the array.

        *closed*, when *True*, will explicitly close the polygon.

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31580 32588])
                    ("set_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32607 32611])
                            ("verts" variable nil (reparse-symbol function_parameters) [32613 32618])
                            ("closed" variable nil (reparse-symbol function_parameters) [32620 32626]))                          )
                        (reparse-symbol indented_block_body) [32593 33702])
                    ("set_paths" variable nil (reparse-symbol indented_block_body) [33707 33728])
                    ("set_verts_and_codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33758 33762])
                            ("verts" variable nil (reparse-symbol function_parameters) [33764 33769])
                            ("codes" variable nil (reparse-symbol function_parameters) [33771 33776]))                          )
                        (reparse-symbol indented_block_body) [33734 34261]))                  
                :type "class")
                nil [31532 34261])
            ("BrokenBarHCollection" type
               (:documentation "
    A collection of horizontal bars spanning *yrange* with a sequence of
    *xranges*.
    "
                :superclasses ("PolyCollection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xranges*
            sequence of (*xmin*, *xwidth*)

        *yrange*
            *ymin*, *ywidth*

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [34500 34647])
                            ("ymin, ywidth" code nil (reparse-symbol indented_block_body) [34656 34677])
                            ("ymax" code nil (reparse-symbol indented_block_body) [34686 34706])
                            ("verts" variable nil (reparse-symbol indented_block_body) [34715 34913])
                            ("PolyCollection" code nil (reparse-symbol indented_block_body) [34922 34968]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34458 34462])
                            ("xranges" variable nil (reparse-symbol function_parameters) [34464 34471])
                            ("yrange" variable nil (reparse-symbol function_parameters) [34473 34479])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34481 34489]))                          
                        :documentation "
        *xranges*
            sequence of (*xmin*, *xwidth*)

        *yrange*
            *ymin*, *ywidth*

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34415 34969])
                    ("span_where" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x" variable nil (reparse-symbol function_parameters) [35007 35008])
                            ("ymin" variable nil (reparse-symbol function_parameters) [35010 35014])
                            ("ymax" variable nil (reparse-symbol function_parameters) [35016 35020])
                            ("where" variable nil (reparse-symbol function_parameters) [35022 35027])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35029 35037]))                          
                        :documentation "
        Create a BrokenBarHCollection to plot horizontal bars from
        over the regions in *x* where *where* is True.  The bars range
        on the y-axis from *ymin* to *ymax*

        A :class:`BrokenBarHCollection` is returned.  *kwargs* are
        passed on to the collection.
        ")
                        (reparse-symbol indented_block_body) [34974 35708]))                  
                :type "class")
                nil [34263 35708])
            ("RegularPolyCollection" type
               (:documentation "Draw a collection of regular polygons with *numsides*."
                :superclasses ("_CollectionWithSizes")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [35830 35879])
                    ("_factor" variable nil (reparse-symbol indented_block_body) [35885 35913])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *numsides*
            the number of sides of the polygon

        *rotation*
            the rotation of the polygon in radians

        *sizes*
            gives the area of the circle circumscribing the
            regular polygon in points^2

        %(Collection)s

        Example: see :file:`examples/dynamic_collection.py` for
        complete example::

            offsets = np.random.rand(20,2)
            facecolors = [cm.jet(x) for x in np.random.rand(20)]
            black = (0,0,0,1)

            collection = RegularPolyCollection(
                numsides=5, # a pentagon
                rotation=0, sizes=(50,),
                facecolors = facecolors,
                edgecolors = (black,),
                linewidths = (1,),
                offsets = offsets,
                transOffset = ax.transData,
                )
        \"\"\"" code nil (reparse-symbol indented_block_body) [36089 36956])
                            ("Collection" code nil (reparse-symbol indented_block_body) [36965 37000])
                            ("self" code nil (reparse-symbol indented_block_body) [37009 37030])
                            ("self" variable nil (reparse-symbol indented_block_body) [37039 37064])
                            ("self" variable nil (reparse-symbol indented_block_body) [37073 37119])
                            ("self" variable nil (reparse-symbol indented_block_body) [37128 37153])
                            ("self" code nil (reparse-symbol indented_block_body) [37162 37212]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35962 35966])
                            ("numsides" variable nil (reparse-symbol function_parameters) [35985 35993])
                            ("rotation" variable nil (reparse-symbol function_parameters) [36012 36020])
                            ("sizes" variable nil (reparse-symbol function_parameters) [36041 36046])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36070 36078]))                          
                        :documentation "
        *numsides*
            the number of sides of the polygon

        *rotation*
            the rotation of the polygon in radians

        *sizes*
            gives the area of the circle circumscribing the
            regular polygon in points^2

        %(Collection)s

        Example: see :file:`examples/dynamic_collection.py` for
        complete example::

            offsets = np.random.rand(20,2)
            facecolors = [cm.jet(x) for x in np.random.rand(20)]
            black = (0,0,0,1)

            collection = RegularPolyCollection(
                numsides=5, # a pentagon
                rotation=0, sizes=(50,),
                facecolors = facecolors,
                edgecolors = (black,),
                linewidths = (1,),
                offsets = offsets,
                transOffset = ax.transData,
                )
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35919 37213])
                    ("get_numsides" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37235 37239]))                          )
                        (reparse-symbol indented_block_body) [37218 37272])
                    ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37294 37298]))                          )
                        (reparse-symbol indented_block_body) [37277 37331])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37377 37381])
                            ("renderer" variable nil (reparse-symbol function_parameters) [37383 37391]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37336 37636]))                  
                :type "class")
                nil [35710 37636])
            ("StarPolygonCollection" type
               (:documentation "
    Draw a collection of regular stars with *numsides* points."
                :superclasses ("RegularPolyCollection")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [37769 37815]))                  
                :type "class")
                nil [37638 37816])
            ("AsteriskPolygonCollection" type
               (:documentation "
    Draw a collection of regular asterisks with *numsides* points."
                :superclasses ("RegularPolyCollection")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [37957 38007]))                  
                :type "class")
                nil [37818 38008])
            ("LineCollection" type
               (:documentation "
    All parameters must be sequences or scalars; if scalars, they will
    be converted to sequences.  The property of the ith line
    segment is::

       prop[i % len(props)]

    i.e., the properties cycle if the ``len`` of props is less than the
    number of segments.
    "
                :superclasses ("Collection")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [38340 38360])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        segments :
            A sequence of (*line0*, *line1*, *line2*), where::

                linen = (x0, y0), (x1, y1), ... (xm, ym)

            or the equivalent numpy array with two columns. Each line
            can be a different length.

        colors : sequence, optional
            A sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        antialiaseds : sequence, optional
            A sequence of ones or zeros.

        linestyles : string, tuple, optional
            Either one of [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ], or
            a dash tuple. The dash tuple is::

                (offset, onoffseq)

            where ``onoffseq`` is an even length tuple of on and off ink
            in points.

        norm : Normalize, optional
            `~.colors.Normalize` instance.

        cmap : string or Colormap, optional
            Colormap name or `~.colors.Colormap` instance.

        pickradius : float, optional
            The tolerance in points for mouse clicks picking a line.
            Default is 5 pt.

        zorder : int, optional
           zorder of the LineCollection. Default is 2.

        facecolors : optional
           The facecolors of the LineCollection. Default is 'none'.
           Setting to a value other than 'none' will lead to a filled
           polygon being drawn between points on each line.

        Notes
        -----
        If *linewidths*, *colors*, or *antialiaseds* is None, they
        default to their rcParams setting, in sequence form.

        If *offsets* and *transOffset* are not None, then
        *offsets* are transformed by *transOffset* and applied after
        the segments have been transformed to display coordinates.

        If *offsets* is not None but *transOffset* is None, then the
        *offsets* are added to the segments before any transformation.
        In this case, a single offset can be specified as::

            offsets=(xo,yo)

        and this value will be added cumulatively to each successive
        segment, so as to produce a set of successively offset curves.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [38821 41366])
                            ("if" code nil (reparse-symbol indented_block_body) [41375 41443])
                            ("if" code nil (reparse-symbol indented_block_body) [41451 41534])
                            ("if" code nil (reparse-symbol indented_block_body) [41542 41631])
                            ("colors" variable nil (reparse-symbol indented_block_body) [41640 41678])
                            ("Collection" code nil (reparse-symbol indented_block_body) [41688 42097])
                            ("self" code nil (reparse-symbol indented_block_body) [42107 42134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38379 38383])
                            ("segments" variable nil (reparse-symbol function_parameters) [38385 38393])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [38431 38441])
                            ("colors" variable nil (reparse-symbol function_parameters) [38465 38471])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [38495 38507])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [38531 38541])
                            ("offsets" variable nil (reparse-symbol function_parameters) [38568 38575])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [38599 38610])
                            ("norm" variable nil (reparse-symbol function_parameters) [38634 38638])
                            ("cmap" variable nil (reparse-symbol function_parameters) [38662 38666])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [38690 38700])
                            ("zorder" variable nil (reparse-symbol function_parameters) [38721 38727])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [38748 38758])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38784 38792]))                          
                        :documentation "
        Parameters
        ----------
        segments :
            A sequence of (*line0*, *line1*, *line2*), where::

                linen = (x0, y0), (x1, y1), ... (xm, ym)

            or the equivalent numpy array with two columns. Each line
            can be a different length.

        colors : sequence, optional
            A sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        antialiaseds : sequence, optional
            A sequence of ones or zeros.

        linestyles : string, tuple, optional
            Either one of [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ], or
            a dash tuple. The dash tuple is::

                (offset, onoffseq)

            where ``onoffseq`` is an even length tuple of on and off ink
            in points.

        norm : Normalize, optional
            `~.colors.Normalize` instance.

        cmap : string or Colormap, optional
            Colormap name or `~.colors.Colormap` instance.

        pickradius : float, optional
            The tolerance in points for mouse clicks picking a line.
            Default is 5 pt.

        zorder : int, optional
           zorder of the LineCollection. Default is 2.

        facecolors : optional
           The facecolors of the LineCollection. Default is 'none'.
           Setting to a value other than 'none' will lead to a filled
           polygon being drawn between points on each line.

        Notes
        -----
        If *linewidths*, *colors*, or *antialiaseds* is None, they
        default to their rcParams setting, in sequence form.

        If *offsets* and *transOffset* are not None, then
        *offsets* are transformed by *transOffset* and applied after
        the segments have been transformed to display coordinates.

        If *offsets* is not None but *transOffset* is None, then the
        *offsets* are added to the segments before any transformation.
        In this case, a single offset can be specified as::

            offsets=(xo,yo)

        and this value will be added cumulatively to each successive
        segment, so as to produce a set of successively offset curves.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38366 42135])
                    ("set_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42157 42161])
                            ("segments" variable nil (reparse-symbol function_parameters) [42163 42171]))                          )
                        (reparse-symbol indented_block_body) [42140 42599])
                    ("set_verts" variable nil (reparse-symbol indented_block_body) [42604 42628])
                    ("set_paths" variable nil (reparse-symbol indented_block_body) [42674 42698])
                    ("get_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42721 42725]))                          
                        :documentation "
        Returns
        -------
        segments : list
            List of segments in the LineCollection. Each list item contains an
            array of vertices.
        ")
                        (reparse-symbol indented_block_body) [42704 43151])
                    ("_add_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43173 43177])
                            ("segs" variable nil (reparse-symbol function_parameters) [43179 43183]))                          )
                        (reparse-symbol indented_block_body) [43156 43546])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43565 43569])
                            ("c" variable nil (reparse-symbol function_parameters) [43571 43572]))                          
                        :documentation "
        Set the color(s) of the LineCollection.

        Parameters
        ----------
        c :
            Matplotlib color argument (all patches have same color), or a
            sequence or rgba tuples; if it is a sequence the patches will
            cycle through the sequence.
        ")
                        (reparse-symbol indented_block_body) [43551 43942])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43961 43965]))                          )
                        (reparse-symbol indented_block_body) [43947 44000])
                    ("get_colors" variable nil (reparse-symbol indented_block_body) [44005 44027]))                  
                :type "class")
                nil [38010 44067])
            ("EventCollection" type
               (:superclasses ("LineCollection")
                :members 
                  ( ("'''
    A collection of discrete events.

    The events are given by a 1-dimensional array, usually the position of
    something along an axis, such as time or length.  They do not have an
    amplitude and are displayed as vertical or horizontal parallel bars.
    '''" code nil (reparse-symbol indented_block_body) [44112 44383])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [44389 44409])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        positions : 1D array-like object
            Each value is an event.

        orientation : {None, 'horizontal', 'vertical'}, optional
            The orientation of the **collection** (the event bars are along
            the orthogonal direction). Defaults to 'horizontal' if not
            specified or None.

        lineoffset : scalar, optional, default: 0
            The offset of the center of the markers from the origin, in the
            direction orthogonal to *orientation*.

        linelength : scalar, optional, default: 1
            The total height of the marker (i.e. the marker stretches from
            ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).

        linewidth : scalar or None, optional, default: None
            If it is None, defaults to its rcParams setting, in sequence form.

        color : color, sequence of colors or None, optional, default: None
            If it is None, defaults to its rcParams setting, in sequence form.

        linestyle : str or tuple, optional, default: 'solid'
            Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',
            '-', '--', '-.', ':']. Dash tuples should be of the form::

                (offset, onoffseq),

            where *onoffseq* is an even length tuple of on and off ink
            in points.

        antialiased : {None, 1, 2}, optional
            If it is None, defaults to its rcParams setting, in sequence form.

        **kwargs : optional
            Other keyword arguments are line collection properties.  See
            :class:`~matplotlib.collections.LineCollection` for a list of
            the valid properties.

        Examples
        --------

        .. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py
        \"\"\"" code nil (reparse-symbol indented_block_body) [44768 46598])
                            ("segment" variable nil (reparse-symbol indented_block_body) [46608 46697])
                            ("if" code nil (reparse-symbol indented_block_body) [46706 47592])
                            ("LineCollection" code nil (reparse-symbol indented_block_body) [47601 47926])
                            ("self" variable nil (reparse-symbol indented_block_body) [47936 47965])
                            ("self" variable nil (reparse-symbol indented_block_body) [47974 48003]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44428 44432])
                            ("positions" variable nil (reparse-symbol function_parameters) [44451 44460])
                            ("orientation" variable nil (reparse-symbol function_parameters) [44501 44512])
                            ("lineoffset" variable nil (reparse-symbol function_parameters) [44536 44546])
                            ("linelength" variable nil (reparse-symbol function_parameters) [44567 44577])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [44598 44607])
                            ("color" variable nil (reparse-symbol function_parameters) [44631 44636])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [44660 44669])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [44696 44707])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44731 44739]))                          
                        :documentation "
        Parameters
        ----------
        positions : 1D array-like object
            Each value is an event.

        orientation : {None, 'horizontal', 'vertical'}, optional
            The orientation of the **collection** (the event bars are along
            the orthogonal direction). Defaults to 'horizontal' if not
            specified or None.

        lineoffset : scalar, optional, default: 0
            The offset of the center of the markers from the origin, in the
            direction orthogonal to *orientation*.

        linelength : scalar, optional, default: 1
            The total height of the marker (i.e. the marker stretches from
            ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).

        linewidth : scalar or None, optional, default: None
            If it is None, defaults to its rcParams setting, in sequence form.

        color : color, sequence of colors or None, optional, default: None
            If it is None, defaults to its rcParams setting, in sequence form.

        linestyle : str or tuple, optional, default: 'solid'
            Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',
            '-', '--', '-.', ':']. Dash tuples should be of the form::

                (offset, onoffseq),

            where *onoffseq* is an even length tuple of on and off ink
            in points.

        antialiased : {None, 1, 2}, optional
            If it is None, defaults to its rcParams setting, in sequence form.

        **kwargs : optional
            Other keyword arguments are line collection properties.  See
            :class:`~matplotlib.collections.LineCollection` for a list of
            the valid properties.

        Examples
        --------

        .. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44415 48004])
                    ("get_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48027 48031]))                          )
                        (reparse-symbol indented_block_body) [48009 48349])
                    ("set_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48372 48376])
                            ("positions" variable nil (reparse-symbol function_parameters) [48378 48387]))                          )
                        (reparse-symbol indented_block_body) [48354 49214])
                    ("add_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49237 49241])
                            ("position" variable nil (reparse-symbol function_parameters) [49243 49251]))                          )
                        (reparse-symbol indented_block_body) [49219 49616])
                    ("extend_positions" variable nil (reparse-symbol indented_block_body) [49620 49671])
                    ("is_horizontal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49695 49699]))                          )
                        (reparse-symbol indented_block_body) [49677 49830])
                    ("get_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49855 49859]))                          )
                        (reparse-symbol indented_block_body) [49835 50047])
                    ("switch_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50075 50079]))                          )
                        (reparse-symbol indented_block_body) [50052 50462])
                    ("set_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50487 50491])
                            ("orientation" variable nil (reparse-symbol function_parameters) [50493 50504]))                          )
                        (reparse-symbol indented_block_body) [50467 51119])
                    ("get_linelength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51143 51147]))                          )
                        (reparse-symbol indented_block_body) [51124 51266])
                    ("set_linelength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51290 51294])
                            ("linelength" variable nil (reparse-symbol function_parameters) [51296 51306]))                          )
                        (reparse-symbol indented_block_body) [51271 51814])
                    ("get_lineoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51838 51842]))                          )
                        (reparse-symbol indented_block_body) [51819 51961])
                    ("set_lineoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51985 51989])
                            ("lineoffset" variable nil (reparse-symbol function_parameters) [51991 52001]))                          )
                        (reparse-symbol indented_block_body) [51966 52509])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52532 52536]))                          )
                        (reparse-symbol indented_block_body) [52514 52662])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52685 52689]))                          )
                        (reparse-symbol indented_block_body) [52667 52866])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52885 52889]))                          )
                        (reparse-symbol indented_block_body) [52871 53011]))                  
                :type "class")
                nil [44069 53011])
            ("CircleCollection" type
               (:documentation "
    A collection of circles, drawn using splines.
    "
                :superclasses ("_CollectionWithSizes")
                :members 
                  ( ("_factor" variable nil (reparse-symbol indented_block_body) [53129 53157])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *sizes*
            Gives the area of the circle in points^2

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [53238 53346])
                            ("Collection" code nil (reparse-symbol indented_block_body) [53355 53390])
                            ("self" code nil (reparse-symbol indented_block_body) [53399 53420])
                            ("self" code nil (reparse-symbol indented_block_body) [53429 53479])
                            ("self" variable nil (reparse-symbol indented_block_body) [53488 53528]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53206 53210])
                            ("sizes" variable nil (reparse-symbol function_parameters) [53212 53217])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [53219 53227]))                          
                        :documentation "
        *sizes*
            Gives the area of the circle in points^2

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53163 53529]))                  
                :type "class")
                nil [53013 53529])
            ("EllipseCollection" type
               (:documentation "
    A collection of ellipses, drawn using splines.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *widths*: sequence
            lengths of first axes (e.g., major axis lengths)

        *heights*: sequence
            lengths of second axes

        *angles*: sequence
            angles of first axes, degrees CCW from the X-axis

        *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'
        | 'x' | 'y' | 'xy']

            units in which majors and minors are given; 'width' and
            'height' refer to the dimensions of the axes, while 'x'
            and 'y' refer to the *offsets* data units. 'xy' differs
            from all others in that the angle as plotted varies with
            the aspect ratio, and equals the specified angle only when
            the aspect ratio is unity.  Hence it behaves the same as
            the :class:`~matplotlib.patches.Ellipse` with
            axes.transData as its transform.

        Additional kwargs inherited from the base :class:`Collection`:

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [53748 54715])
                            ("Collection" code nil (reparse-symbol indented_block_body) [54724 54759])
                            ("self" code nil (reparse-symbol indented_block_body) [54768 54815])
                            ("self" code nil (reparse-symbol indented_block_body) [54824 54873])
                            ("self" variable nil (reparse-symbol indented_block_body) [54882 54923])
                            ("self" variable nil (reparse-symbol indented_block_body) [54932 54951])
                            ("self" code nil (reparse-symbol indented_block_body) [54960 55010])
                            ("self" variable nil (reparse-symbol indented_block_body) [55019 55057])
                            ("self" variable nil (reparse-symbol indented_block_body) [55066 55106]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53682 53686])
                            ("widths" variable nil (reparse-symbol function_parameters) [53688 53694])
                            ("heights" variable nil (reparse-symbol function_parameters) [53696 53703])
                            ("angles" variable nil (reparse-symbol function_parameters) [53705 53711])
                            ("units" variable nil (reparse-symbol function_parameters) [53713 53718])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [53729 53737]))                          
                        :documentation "
        *widths*: sequence
            lengths of first axes (e.g., major axis lengths)

        *heights*: sequence
            lengths of second axes

        *angles*: sequence
            angles of first axes, degrees CCW from the X-axis

        *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'
        | 'x' | 'y' | 'xy']

            units in which majors and minors are given; 'width' and
            'height' refer to the dimensions of the axes, while 'x'
            and 'y' refer to the *offsets* data units. 'xy' differs
            from all others in that the angle as plotted varies with
            the aspect ratio, and equals the specified angle only when
            the aspect ratio is unity.  Hence it behaves the same as
            the :class:`~matplotlib.patches.Ellipse` with
            axes.transData as its transform.

        Additional kwargs inherited from the base :class:`Collection`:

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53639 55107])
                    ("_set_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55132 55136]))                          
                        :documentation "
        Calculate transforms immediately before drawing.
        ")
                        (reparse-symbol indented_block_body) [55112 56583])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56629 56633])
                            ("renderer" variable nil (reparse-symbol function_parameters) [56635 56643]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [56588 56717]))                  
                :type "class")
                nil [53531 56717])
            ("PatchCollection" type
               (:documentation "
    A generic collection of patches.

    This makes it easier to assign a color map to a heterogeneous
    collection of patches.

    This also may improve plotting speed, since PatchCollection will
    draw faster than a large number of patches.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *patches*
            a sequence of Patch objects.  This list may include
            a heterogeneous assortment of different patch types.

        *match_original*
            If True, use the colors and linewidths of the original
            patches.  If False, new colors may be assigned by
            providing the standard collection arguments, facecolor,
            edgecolor, linewidths, norm or cmap.

        If any of *edgecolors*, *facecolors*, *linewidths*,
        *antialiaseds* are None, they default to their
        :data:`matplotlib.rcParams` patch setting, in sequence form.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not
        None (i.e., a call to set_array has been made), at draw time a
        call to scalar mappable will be made to set the face colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [57093 57995])
                            ("if" code nil (reparse-symbol indented_block_body) [58005 58560])
                            ("Collection" code nil (reparse-symbol indented_block_body) [58569 58604])
                            ("self" code nil (reparse-symbol indented_block_body) [58614 58637]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57037 57041])
                            ("patches" variable nil (reparse-symbol function_parameters) [57043 57050])
                            ("match_original" variable nil (reparse-symbol function_parameters) [57052 57066])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57074 57082]))                          
                        :documentation "
        *patches*
            a sequence of Patch objects.  This list may include
            a heterogeneous assortment of different patch types.

        *match_original*
            If True, use the colors and linewidths of the original
            patches.  If False, new colors may be assigned by
            providing the standard collection arguments, facecolor,
            edgecolor, linewidths, norm or cmap.

        If any of *edgecolors*, *facecolors*, *linewidths*,
        *antialiaseds* are None, they default to their
        :data:`matplotlib.rcParams` patch setting, in sequence form.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not
        None (i.e., a call to set_array has been made), at draw time a
        call to scalar mappable will be made to set the face colors.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [57024 58638])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58657 58661])
                            ("patches" variable nil (reparse-symbol function_parameters) [58663 58670]))                          )
                        (reparse-symbol indented_block_body) [58643 58800]))                  
                :type "class")
                nil [56719 58800])
            ("TriMesh" type
               (:documentation "
    Class for the efficient drawing of a triangular mesh using
    Gouraud shading.

    A triangular mesh is a :class:`~matplotlib.tri.Triangulation`
    object.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Collection" code nil (reparse-symbol indented_block_body) [59065 59100])
                            ("self" variable nil (reparse-symbol indented_block_body) [59109 59144])
                            ("self" variable nil (reparse-symbol indented_block_body) [59153 59178])
                            ("self" variable nil (reparse-symbol indented_block_body) [59187 59209])
                            ("self" variable nil (reparse-symbol indented_block_body) [59219 59254])
                            ("xy" variable nil (reparse-symbol indented_block_body) [59356 59460])
                            ("self" code nil (reparse-symbol indented_block_body) [59469 59503]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59025 59029])
                            ("triangulation" variable nil (reparse-symbol function_parameters) [59031 59044])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [59046 59054]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [59012 59504])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59523 59527]))                          )
                        (reparse-symbol indented_block_body) [59509 59618])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59637 59641]))                          )
                        (reparse-symbol indented_block_body) [59623 59714])
                    ("convert_mesh_to_paths" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("tri" variable nil (reparse-symbol function_parameters) [59763 59766]))                          
                        :documentation "
        Converts a given mesh into a sequence of
        :class:`matplotlib.path.Path` objects for easier rendering by
        backends that do not directly support meshes.

        This function is primarily of use to backend implementers.
        ")
                        (reparse-symbol indented_block_body) [59719 60290])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60336 60340])
                            ("renderer" variable nil (reparse-symbol function_parameters) [60342 60350]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [60295 61140]))                  
                :type "class")
                nil [58802 61140])
            ("QuadMesh" type
               (:documentation "
    Class for the efficient drawing of a quadrilateral mesh.

    A quadrilateral mesh consists of a grid of vertices. The
    dimensions of this array are (*meshWidth* + 1, *meshHeight* +
    1). Each vertex in the mesh has a different set of \"mesh
    coordinates\" representing its position in the topology of the
    mesh. For any values (*m*, *n*) such that 0 <= *m* <= *meshWidth*
    and 0 <= *n* <= *meshHeight*, the vertices at mesh coordinates
    (*m*, *n*), (*m*, *n* + 1), (*m* + 1, *n* + 1), and (*m* + 1, *n*)
    form one of the quadrilaterals in the mesh. There are thus
    (*meshWidth* * *meshHeight*) quadrilaterals in the mesh.  The mesh
    need not be regular and the polygons need not be convex.

    A quadrilateral mesh is represented by a (2 x ((*meshWidth* + 1) *
    (*meshHeight* + 1))) numpy array *coordinates*, where each row is
    the *x* and *y* coordinates of one of the vertices.  To define the
    function that maps from a data point to its corresponding color,
    use the :meth:`set_cmap` method.  Each of these arrays is indexed in
    row-major order by the mesh coordinates of the vertex (or the mesh
    coordinates of the lower left vertex, in the case of the
    colors).

    For example, the first entry in *coordinates* is the
    coordinates of the vertex at mesh coordinates (0, 0), then the one
    at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and
    so on.

    *shading* may be 'flat', or 'gouraud'
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Collection" code nil (reparse-symbol indented_block_body) [62786 62821])
                            ("self" variable nil (reparse-symbol indented_block_body) [62830 62857])
                            ("self" variable nil (reparse-symbol indented_block_body) [62866 62895])
                            ("self" variable nil (reparse-symbol indented_block_body) [62976 63083])
                            ("self" variable nil (reparse-symbol indented_block_body) [63092 63123])
                            ("self" variable nil (reparse-symbol indented_block_body) [63132 63155])
                            ("self" variable nil (reparse-symbol indented_block_body) [63165 63200])
                            ("self" code nil (reparse-symbol indented_block_body) [63209 63314]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62674 62678])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [62680 62689])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [62691 62701])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [62703 62714])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [62733 62744])
                            ("shading" variable nil (reparse-symbol function_parameters) [62751 62758])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [62767 62775]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [62661 63315])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63334 63338]))                          )
                        (reparse-symbol indented_block_body) [63320 63429])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63448 63452]))                          )
                        (reparse-symbol indented_block_body) [63434 63597])
                    ("get_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63618 63622])
                            ("transData" variable nil (reparse-symbol function_parameters) [63624 63633]))                          )
                        (reparse-symbol indented_block_body) [63602 63713])
                    ("convert_mesh_to_paths" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("meshWidth" variable nil (reparse-symbol function_parameters) [63762 63771])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [63773 63783])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [63785 63796]))                          
                        :documentation "
        Converts a given mesh into a sequence of
        :class:`matplotlib.path.Path` objects for easier rendering by
        backends that do not directly support quadmeshes.

        This function is primarily of use to backend implementers.
        ")
                        (reparse-symbol indented_block_body) [63718 64558])
                    ("convert_mesh_to_triangles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64593 64597])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [64599 64608])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [64610 64620])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [64622 64633]))                          
                        :documentation "
        Converts a given mesh into a sequence of triangles, each point
        with its own color.  This is useful for experiments using
        `draw_qouraud_triangle`.
        ")
                        (reparse-symbol indented_block_body) [64563 65960])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66006 66010])
                            ("renderer" variable nil (reparse-symbol function_parameters) [66012 66020]))                          
                        :decorators 
                          ( ("artist.allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [65965 67787]))                  
                :type "class")
                nil [61142 67787])
            ("patchstr" variable nil nil [67789 67824])
            ("for" code nil nil [67825 68097])
            ("docstring" code nil nil [68097 68166]))          
      :file "collections.py"
      :pointmax 68167
      :fsize 68166
      :lastmodtime '(23240 23001 101461 0)
      :unmatched-syntax '((NAME 52245 . 52248) (IF 52253 . 52255) (ELSE 52277 . 52281) (NAME 51550 . 51553) (IF 51558 . 51560) (ELSE 51582 . 51586) (RETURN 49987 . 49993) (IF 50007 . 50009) (ELSE 50031 . 50035) (NAME 48183 . 48186) (IF 48191 . 48193) (ELSE 48215 . 48219) (NAME 13914 . 13918) (IF 13932 . 13934) (ELSE 13952 . 13956) (FROM 694 . 698) (PERIOD 699 . 700)))
    (semanticdb-table "semanticdb-table-15c0e50"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
These are classes to support contour plotting and labelling for the Axes class.
\"\"\"" code nil nil [1 88])
            ("" code nil nil [112 197])
            ("six" include nil nil [199 209])
            ("six.moves" include nil nil [210 238])
            ("warnings" include nil nil [240 255])
            ("matplotlib" include nil nil [256 280])
            ("numpy" include nil nil [281 299])
            ("numpy" include nil nil [300 320])
            ("matplotlib._contour" include nil nil [321 359])
            ("matplotlib.path" include nil nil [360 391])
            ("matplotlib.ticker" include nil nil [392 426])
            ("matplotlib.cm" include nil nil [427 453])
            ("matplotlib.colors" include nil nil [454 488])
            ("matplotlib.collections" include nil nil [489 527])
            ("matplotlib.font_manager" include nil nil [528 574])
            ("matplotlib.text" include nil nil [575 605])
            ("matplotlib.cbook" include nil nil [606 638])
            ("matplotlib.mathtext" include nil nil [639 677])
            ("matplotlib.patches" include nil nil [678 715])
            ("matplotlib.texmanager" include nil nil [716 758])
            ("matplotlib.transforms" include nil nil [759 802])
            ("matplotlib.blocking_input" include nil nil [869 929])
            ("ClabelText" type
               (:documentation "
    Unlike the ordinary text, the get_rotation returns an updated
    angle in the pixel coordinate assuming that the input rotation is
    an angle in data coordinate (or whatever transform set).
    "
                :superclasses ("text.Text")
                :members 
                  ( ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1573 1577]))                          )
                        (reparse-symbol indented_block_body) [1556 1853]))                  
                :type "class")
                nil [1310 1853])
            ("ContourLabeler" type
               (:documentation "Mixin to provide labelling capability to ContourSet"
                :superclasses ("object")
                :members 
                  ( ("clabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1963 1967])
                            ("args" variable nil (reparse-symbol function_parameters) [1969 1974])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1976 1984]))                          
                        :documentation "
        Label a contour plot.

        Call signature::

          clabel(cs, **kwargs)

        Adds labels to line contours in *cs*, where *cs* is a
        :class:`~matplotlib.contour.ContourSet` object returned by
        contour.

        ::

          clabel(cs, v, **kwargs)

        only labels contours listed in *v*.

        Parameters
        ----------
        fontsize : string or float, optional
            Size in points or relative size e.g., 'smaller', 'x-large'.
            See `Text.set_size` for accepted string values.

        colors :
            Color of each label

            - if *None*, the color of each label matches the color of
              the corresponding contour

            - if one string color, e.g., *colors* = 'r' or *colors* =
              'red', all labels will be plotted in this color

            - if a tuple of matplotlib color args (string, float, rgb, etc),
              different labels will be plotted in different colors in the order
              specified

        inline : bool, optional
            If ``True`` the underlying contour is removed where the label is
            placed. Default is ``True``.

        inline_spacing : float, optional
            Space in pixels to leave on each side of label when
            placing inline. Defaults to 5.

            This spacing will be exact for labels at locations where the
            contour is straight, less so for labels on curved contours.

        fmt : string or dict, optional
            A format string for the label. Default is '%1.3f'

            Alternatively, this can be a dictionary matching contour
            levels with arbitrary strings to use for each contour level
            (i.e., fmt[level]=string), or it can be any callable, such
            as a :class:`~matplotlib.ticker.Formatter` instance, that
            returns a string when called with a numeric contour level.

        manual : bool or iterable, optional
            If ``True``, contour labels will be placed manually using
            mouse clicks. Click the first button near a contour to
            add a label, click the second button (or potentially both
            mouse buttons at once) to finish adding labels. The third
            button can be used to remove the last label added, but
            only if labels are not inline. Alternatively, the keyboard
            can be used to select label locations (enter to end label
            placement, delete or backspace act like the third mouse button,
            and any other key will select a label location).

            *manual* can also be an iterable object of x,y tuples.
            Contour labels will be created as if mouse is clicked at each
            x,y positions.

        rightside_up : bool, optional
            If ``True``, label rotations will always be plus
            or minus 90 degrees from level. Default is ``True``.

        use_clabeltext : bool, optional
            If ``True``, `ClabelText` class (instead of `Text`) is used to
            create labels. `ClabelText` recalculates rotation angles
            of texts during the drawing time, therefore this can be used if
            aspect of the axes changes. Default is ``False``.
        ")
                        (reparse-symbol indented_block_body) [1952 8821])
                    ("print_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8842 8846])
                            ("linecontour" variable nil (reparse-symbol function_parameters) [8848 8859])
                            ("labelwidth" variable nil (reparse-symbol function_parameters) [8861 8871]))                          )
                        (reparse-symbol indented_block_body) [8826 9064])
                    ("too_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9083 9087])
                            ("x" variable nil (reparse-symbol function_parameters) [9089 9090])
                            ("y" variable nil (reparse-symbol function_parameters) [9092 9093])
                            ("lw" variable nil (reparse-symbol function_parameters) [9095 9097]))                          )
                        (reparse-symbol indented_block_body) [9069 9341])
                    ("get_label_coords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9367 9371])
                            ("distances" variable nil (reparse-symbol function_parameters) [9373 9382])
                            ("XX" variable nil (reparse-symbol function_parameters) [9384 9386])
                            ("YY" variable nil (reparse-symbol function_parameters) [9388 9390])
                            ("ysize" variable nil (reparse-symbol function_parameters) [9392 9397])
                            ("lw" variable nil (reparse-symbol function_parameters) [9399 9401]))                          
                        :documentation "
        Return x, y, and the index of a label location.

        Labels are plotted at a location with the smallest
        deviation of the contour from a straight line
        unless there is another label nearby, in which case
        the next best place on the contour is picked up.
        If all such candidates are rejected, the beginning
        of the contour is chosen.
        ")
                        (reparse-symbol indented_block_body) [9346 10149])
                    ("get_label_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10174 10178])
                            ("lev" variable nil (reparse-symbol function_parameters) [10180 10183])
                            ("fmt" variable nil (reparse-symbol function_parameters) [10185 10188])
                            ("fsize" variable nil (reparse-symbol function_parameters) [10190 10195]))                          
                        :documentation "
        Return the width of the label in points.
        ")
                        (reparse-symbol indented_block_body) [10154 11196])
                    ("" code nil (reparse-symbol indented_block_body) [11218 11225])
                    ("get_real_label_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11255 11259])
                            ("lev" variable nil (reparse-symbol function_parameters) [11261 11264])
                            ("fmt" variable nil (reparse-symbol function_parameters) [11266 11269])
                            ("fsize" variable nil (reparse-symbol function_parameters) [11271 11276]))                          
                        :documentation "
        This computes actual onscreen label width.
        This uses some black magic to determine onscreen extent of non-drawn
        label.  This magic may not be very robust.

        This method is not being used, and may be modified or removed.
        ")
                        (reparse-symbol indented_block_body) [11230 12251])
                    ("set_label_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12276 12280])
                            ("label" variable nil (reparse-symbol function_parameters) [12282 12287])
                            ("text" variable nil (reparse-symbol function_parameters) [12289 12293])
                            ("color" variable nil (reparse-symbol function_parameters) [12295 12300]))                          )
                        (reparse-symbol indented_block_body) [12256 12517])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12535 12539])
                            ("lev" variable nil (reparse-symbol function_parameters) [12541 12544])
                            ("fmt" variable nil (reparse-symbol function_parameters) [12546 12549]))                          )
                        (reparse-symbol indented_block_body) [12522 12869])
                    ("locate_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12891 12895])
                            ("linecontour" variable nil (reparse-symbol function_parameters) [12897 12908])
                            ("labelwidth" variable nil (reparse-symbol function_parameters) [12910 12920]))                          
                        :documentation "
        Find good place to draw a label (relatively flat part of the contour).
        ")
                        (reparse-symbol indented_block_body) [12874 14134])
                    ("calc_label_rot_and_inline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14169 14173])
                            ("slc" variable nil (reparse-symbol function_parameters) [14175 14178])
                            ("ind" variable nil (reparse-symbol function_parameters) [14180 14183])
                            ("lw" variable nil (reparse-symbol function_parameters) [14185 14187])
                            ("lc" variable nil (reparse-symbol function_parameters) [14189 14191])
                            ("spacing" variable nil (reparse-symbol function_parameters) [14198 14205]))                          
                        :documentation "
        This function calculates the appropriate label rotation given
        the linecontour coordinates in screen units, the index of the
        label location and the label width.

        It will also break contour and calculate inlining if *lc* is
        not empty (lc defaults to the empty list if None).  *spacing*
        is the space around the label in pixels to leave empty.

        Do both of these tasks at once to avoid calculating path lengths
        multiple times, which is relatively costly.

        The method used here involves calculating the path length
        along the contour in pixel coordinates and then looking
        approximately label width / 2 away from central point to
        determine rotation and then to break contour if desired.
        ")
                        (reparse-symbol indented_block_body) [14139 17739])
                    ("_get_label_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17764 17768])
                            ("x" variable nil (reparse-symbol function_parameters) [17770 17771])
                            ("y" variable nil (reparse-symbol function_parameters) [17773 17774])
                            ("rotation" variable nil (reparse-symbol function_parameters) [17776 17784]))                          )
                        (reparse-symbol indented_block_body) [17744 18025])
                    ("_get_label_clabeltext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18056 18060])
                            ("x" variable nil (reparse-symbol function_parameters) [18062 18063])
                            ("y" variable nil (reparse-symbol function_parameters) [18065 18066])
                            ("rotation" variable nil (reparse-symbol function_parameters) [18068 18076]))                          )
                        (reparse-symbol indented_block_body) [18030 18737])
                    ("_add_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18757 18761])
                            ("t" variable nil (reparse-symbol function_parameters) [18763 18764])
                            ("x" variable nil (reparse-symbol function_parameters) [18766 18767])
                            ("y" variable nil (reparse-symbol function_parameters) [18769 18770])
                            ("lev" variable nil (reparse-symbol function_parameters) [18772 18775])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [18777 18783]))                          )
                        (reparse-symbol indented_block_body) [18742 19169])
                    ("add_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19188 19192])
                            ("x" variable nil (reparse-symbol function_parameters) [19194 19195])
                            ("y" variable nil (reparse-symbol function_parameters) [19197 19198])
                            ("rotation" variable nil (reparse-symbol function_parameters) [19200 19208])
                            ("lev" variable nil (reparse-symbol function_parameters) [19210 19213])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [19215 19221]))                          
                        :documentation "
        Add contour label using :class:`~matplotlib.text.Text` class.
        ")
                        (reparse-symbol indented_block_body) [19174 19414])
                    ("add_label_clabeltext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19444 19448])
                            ("x" variable nil (reparse-symbol function_parameters) [19450 19451])
                            ("y" variable nil (reparse-symbol function_parameters) [19453 19454])
                            ("rotation" variable nil (reparse-symbol function_parameters) [19456 19464])
                            ("lev" variable nil (reparse-symbol function_parameters) [19466 19469])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [19471 19477]))                          
                        :documentation "
        Add contour label using :class:`ClabelText` class.
        ")
                        (reparse-symbol indented_block_body) [19419 19899])
                    ("add_label_near" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19923 19927])
                            ("x" variable nil (reparse-symbol function_parameters) [19929 19930])
                            ("y" variable nil (reparse-symbol function_parameters) [19932 19933])
                            ("inline" variable nil (reparse-symbol function_parameters) [19935 19941])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [19948 19962])
                            ("transform" variable nil (reparse-symbol function_parameters) [19989 19998]))                          
                        :documentation "
        Add a label near the point (x, y). If transform is None
        (default), (x, y) is in data coordinates; if transform is
        False, (x, y) is in display coordinates; otherwise, the
        specified transform will be used to translate (x, y) into
        display coordinates.

        *inline*:
          controls whether the underlying contour is removed or
          not. Default is *True*.

        *inline_spacing*:
          space in pixels to leave on each side of label when
          placing inline.  Defaults to 5.  This spacing will be
          exact for labels at locations where the contour is
          straight, less so for labels on curved contours.
        ")
                        (reparse-symbol indented_block_body) [19904 23159])
                    ("pop_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23178 23182])
                            ("index" variable nil (reparse-symbol function_parameters) [23184 23189]))                          
                        :documentation "Defaults to removing last label, but any index can be supplied")
                        (reparse-symbol indented_block_body) [23164 23367])
                    ("labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23383 23387])
                            ("inline" variable nil (reparse-symbol function_parameters) [23389 23395])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [23397 23411]))                          )
                        (reparse-symbol indented_block_body) [23372 25761]))                  
                :type "class")
                nil [1855 25761])
            ("_find_closest_point_on_leg" function
               (:documentation "find closest point to p0 on line segment connecting p1 and p2"
                :arguments 
                  ( ("p1" variable nil (reparse-symbol function_parameters) [25794 25796])
                    ("p2" variable nil (reparse-symbol function_parameters) [25798 25800])
                    ("p0" variable nil (reparse-symbol function_parameters) [25802 25804]))                  )
                nil [25763 26295])
            ("_is_closed_polygon" function
               (:documentation "
    Tests whether first and last object in a sequence are the same.  These are
    presumably coordinates on a polygonal curve, in which case this function
    tests if that curve is closed.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [26320 26321]))                  )
                nil [26297 26564])
            ("_find_closest_point_on_path" function
               (:documentation "
    lc: coordinates of vertices
    point: coordinates of test point
    "
                :arguments 
                  ( ("lc" variable nil (reparse-symbol function_parameters) [26598 26600])
                    ("point" variable nil (reparse-symbol function_parameters) [26602 26607]))                  )
                nil [26566 27366])
            ("ContourSet" type
               (:documentation "
    Store a set of contour lines or filled regions.

    User-callable method: clabel

    Attributes
    ----------
    ax:
        The axes object in which the contours are drawn.

    collections:
        A silent_list of LineCollections or PolyCollections.

    levels:
        Contour levels.

    layers:
        Same as levels for line contours; half-way between
        levels for filled contours.  See :meth:`_process_colors`.
    "
                :superclasses ("cm.ScalarMappable" "ContourLabeler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draw contour lines or filled regions, depending on
        whether keyword arg *filled* is ``False`` (default) or ``True``.

        The first three arguments must be:

          *ax*: axes object.

          *levels*: [level0, level1, ..., leveln]
            A list of floating point numbers indicating the contour
            levels.

          *allsegs*: [level0segs, level1segs, ...]
            List of all the polygon segments for all the *levels*.
            For contour lines ``len(allsegs) == len(levels)``, and for
            filled contour regions ``len(allsegs) = len(levels)-1``. The lists
            should look like::

                level0segs = [polygon0, polygon1, ...]
                polygon0 = array_like [[x0,y0], [x1,y1], ...]

          *allkinds*: *None* or [level0kinds, level1kinds, ...]
            Optional list of all the polygon vertex kinds (code types), as
            described and used in Path. This is used to allow multiply-
            connected paths such as holes within filled polygons.
            If not ``None``, ``len(allkinds) == len(allsegs)``. The lists
            should look like::

                level0kinds = [polygon0kinds, ...]
                polygon0kinds = [vertexcode0, vertexcode1, ...]

            If *allkinds* is not ``None``, usually all polygons for a
            particular contour level are grouped together so that
            ``level0segs = [polygon0]`` and ``level0kinds = [polygon0kinds]``.

        Keyword arguments are as described in the docstring of
        `~.Axes.contour`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [27927 29510])
                            ("self" variable nil (reparse-symbol indented_block_body) [29519 29531])
                            ("self" variable nil (reparse-symbol indented_block_body) [29540 29580])
                            ("self" variable nil (reparse-symbol indented_block_body) [29589 29630])
                            ("self" variable nil (reparse-symbol indented_block_body) [29639 29687])
                            ("self" variable nil (reparse-symbol indented_block_body) [29696 29744])
                            ("self" variable nil (reparse-symbol indented_block_body) [29754 29798])
                            ("self" variable nil (reparse-symbol indented_block_body) [29808 29846])
                            ("self" variable nil (reparse-symbol indented_block_body) [29855 29895])
                            ("self" variable nil (reparse-symbol indented_block_body) [29904 29944])
                            ("cmap" variable nil (reparse-symbol indented_block_body) [29953 29984])
                            ("self" variable nil (reparse-symbol indented_block_body) [29993 30033])
                            ("norm" variable nil (reparse-symbol indented_block_body) [30042 30073])
                            ("vmin" variable nil (reparse-symbol indented_block_body) [30082 30113])
                            ("vmax" variable nil (reparse-symbol indented_block_body) [30122 30153])
                            ("self" variable nil (reparse-symbol indented_block_body) [30162 30207])
                            ("self" variable nil (reparse-symbol indented_block_body) [30216 30266])
                            ("if" code nil (reparse-symbol indented_block_body) [30275 30392])
                            ("self" variable nil (reparse-symbol indented_block_body) [30630 30667])
                            ("self" variable nil (reparse-symbol indented_block_body) [30676 30718])
                            ("if" code nil (reparse-symbol indented_block_body) [30727 31143])
                            ("if" code nil (reparse-symbol indented_block_body) [31152 31338])
                            ("if" code nil (reparse-symbol indented_block_body) [31346 31520])
                            ("if" code nil (reparse-symbol indented_block_body) [31528 31644])
                            ("if" code nil (reparse-symbol indented_block_body) [31652 31734])
                            ("self" variable nil (reparse-symbol indented_block_body) [31743 31790])
                            ("kwargs" variable nil (reparse-symbol indented_block_body) [31800 31844])
                            ("self" code nil (reparse-symbol indented_block_body) [31853 31875])
                            ("if" code nil (reparse-symbol indented_block_body) [31885 33127])
                            ("if" code nil (reparse-symbol indented_block_body) [33136 33312])
                            ("self" variable nil (reparse-symbol indented_block_body) [33367 33387])
                            ("self" variable nil (reparse-symbol indented_block_body) [33396 33418])
                            ("kw" variable nil (reparse-symbol indented_block_body) [33428 33447])
                            ("if" code nil (reparse-symbol indented_block_body) [33456 33507])
                            ("cm" code nil (reparse-symbol indented_block_body) [33557 33595])
                            ("if" code nil (reparse-symbol indented_block_body) [33604 33659])
                            ("if" code nil (reparse-symbol indented_block_body) [33667 33722])
                            ("self" code nil (reparse-symbol indented_block_body) [33730 33752])
                            ("self, self" code nil (reparse-symbol indented_block_body) [33762 33824])
                            ("if" code nil (reparse-symbol indented_block_body) [33834 35838])
                            ("for" code nil (reparse-symbol indented_block_body) [35847 36010])
                            ("self" code nil (reparse-symbol indented_block_body) [36018 36066])
                            ("self" code nil (reparse-symbol indented_block_body) [36075 36109])
                            ("self" code nil (reparse-symbol indented_block_body) [36119 36133])
                            ("if" code nil (reparse-symbol indented_block_body) [36161 36324]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27891 27895])
                            ("ax" variable nil (reparse-symbol function_parameters) [27897 27899])
                            ("args" variable nil (reparse-symbol function_parameters) [27901 27906])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27908 27916]))                          
                        :documentation "
        Draw contour lines or filled regions, depending on
        whether keyword arg *filled* is ``False`` (default) or ``True``.

        The first three arguments must be:

          *ax*: axes object.

          *levels*: [level0, level1, ..., leveln]
            A list of floating point numbers indicating the contour
            levels.

          *allsegs*: [level0segs, level1segs, ...]
            List of all the polygon segments for all the *levels*.
            For contour lines ``len(allsegs) == len(levels)``, and for
            filled contour regions ``len(allsegs) = len(levels)-1``. The lists
            should look like::

                level0segs = [polygon0, polygon1, ...]
                polygon0 = array_like [[x0,y0], [x1,y1], ...]

          *allkinds*: *None* or [level0kinds, level1kinds, ...]
            Optional list of all the polygon vertex kinds (code types), as
            described and used in Path. This is used to allow multiply-
            connected paths such as holes within filled polygons.
            If not ``None``, ``len(allkinds) == len(allsegs)``. The lists
            should look like::

                level0kinds = [polygon0kinds, ...]
                polygon0kinds = [vertexcode0, vertexcode1, ...]

            If *allkinds* is not ``None``, usually all polygons for a
            particular contour level are grouped together so that
            ``level0segs = [polygon0]`` and ``level0kinds = [polygon0kinds]``.

        Keyword arguments are as described in the docstring of
        `~.Axes.contour`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27878 36324])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36347 36351]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform`
        instance used by this ContourSet.
        ")
                        (reparse-symbol indented_block_body) [36329 36804])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36826 36830]))                          )
                        (reparse-symbol indented_block_body) [36809 37113])
                    ("legend_elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37138 37142])
                            ("variable_name" variable nil (reparse-symbol function_parameters) [37144 37157])
                            ("str_format" variable nil (reparse-symbol function_parameters) [37163 37173]))                          
                        :documentation "
        Return a list of artist and labels suitable for passing through
        to :func:`plt.legend` which represent this ContourSet.

        Args:

            *variable_name*: the string used inside the inequality used
              on the labels

            *str_format*: function used to format the numbers in the labels
        ")
                        (reparse-symbol indented_block_body) [37118 39233])
                    ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39256 39260])
                            ("args" variable nil (reparse-symbol function_parameters) [39262 39267])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39269 39277]))                          
                        :documentation "
        Process *args* and *kwargs*; override in derived classes.

        Must set self.levels, self.zmin and self.zmax, and update axes
        limits.
        ")
                        (reparse-symbol indented_block_body) [39238 40568])
                    ("_get_allsegs_and_allkinds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40603 40607]))                          
                        :documentation "
        Override in derived classes to create and return allsegs and allkinds.
        allkinds can be None.
        ")
                        (reparse-symbol indented_block_body) [40573 40786])
                    ("_get_lowers_and_uppers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40818 40822]))                          
                        :documentation "
        Return (lowers,uppers) for filled contours.
        ")
                        (reparse-symbol indented_block_body) [40791 41287])
                    ("_make_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41308 41312])
                            ("segs" variable nil (reparse-symbol function_parameters) [41314 41318])
                            ("kinds" variable nil (reparse-symbol function_parameters) [41320 41325]))                          )
                        (reparse-symbol indented_block_body) [41292 41528])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41545 41549]))                          )
                        (reparse-symbol indented_block_body) [41533 42342])
                    ("_autolev" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42360 42364])
                            ("N" variable nil (reparse-symbol function_parameters) [42366 42367]))                          
                        :documentation "
        Select contour levels to span the data.

        We need two more levels for filled contours than for
        line contours, because for the latter we need to specify
        the lower and upper boundary of each range. For example,
        a single contour boundary, say at z = 0, requires only
        one contour line, but two filled regions, and therefore
        three levels to provide boundaries for both regions.
        ")
                        (reparse-symbol indented_block_body) [42347 43133])
                    ("_contour_level_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43162 43166])
                            ("z" variable nil (reparse-symbol function_parameters) [43168 43169])
                            ("args" variable nil (reparse-symbol function_parameters) [43171 43175]))                          
                        :documentation "
        Determine the contour levels and store in self.levels.
        ")
                        (reparse-symbol indented_block_body) [43138 44656])
                    ("_process_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44681 44685]))                          
                        :documentation "
        Assign values to :attr:`layers` based on :attr:`levels`,
        adding extended layers as needed if contours are filled.

        For line contours, layers simply coincide with levels;
        a line is a thin layer.  No extended levels are needed
        with line contours.
        ")
                        (reparse-symbol indented_block_body) [44661 45946])
                    ("_process_colors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45971 45975]))                          
                        :documentation "
        Color argument processing for contouring.

        Note that we base the color mapping on the contour levels
        and layers, not on the actual range of the Z values.  This
        means we don't have to worry about bad values in Z, and we
        always have the full dynamic range available for the selected
        levels.

        The color is based on the midpoint of the layer, except for
        extended end layers.  By default, the norm vmin and vmax
        are the extreme values of the non-extended levels.  Hence,
        the layer color extremes are not the extreme values of
        the colormap itself, but approach those values as the number
        of levels increases.  An advantage of this scheme is that
        line contours, when added to filled contours, take on
        colors that are consistent with those of the filled regions;
        for example, a contour line on the boundary between two
        regions will have a color intermediate between those
        of the regions.

        ")
                        (reparse-symbol indented_block_body) [45951 47759])
                    ("_process_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47844 47848]))                          )
                        (reparse-symbol indented_block_body) [47820 48529])
                    ("_process_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48558 48562]))                          )
                        (reparse-symbol indented_block_body) [48534 49593])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49612 49616]))                          
                        :documentation "returns alpha to be applied to all ContourSet artists")
                        (reparse-symbol indented_block_body) [49598 49713])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49732 49736])
                            ("alpha" variable nil (reparse-symbol function_parameters) [49738 49743]))                          
                        :documentation "sets alpha for all ContourSet artists")
                        (reparse-symbol indented_block_body) [49718 49848])
                    ("find_nearest_contour" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49878 49882])
                            ("x" variable nil (reparse-symbol function_parameters) [49884 49885])
                            ("y" variable nil (reparse-symbol function_parameters) [49887 49888])
                            ("indices" variable nil (reparse-symbol function_parameters) [49890 49897])
                            ("pixel" variable nil (reparse-symbol function_parameters) [49904 49909]))                          
                        :documentation "
        Finds contour that is closest to a point.  Defaults to
        measuring distance in pixels (screen space - useful for manual
        contour labeling), but this can be controlled via a keyword
        argument.

        Returns a tuple containing the contour, segment, index of
        segment, x & y of segment point and distance to minimum point.

        Optional keyword arguments:

          *indices*:
            Indexes of contour levels to consider when looking for
            nearest point.  Defaults to using all levels.

          *pixel*:
            If *True*, measure distance in pixel space, if not, measure
            distance in axes space.  Defaults to *True*.

        ")
                        (reparse-symbol indented_block_body) [49853 52053]))                  
                :type "class")
                nil [27368 52053])
            ("QuadContourSet" type
               (:documentation "
    Create and store a set of contour lines or filled regions.

    User-callable method: :meth:`clabel`

    Attributes
    ----------
    ax:
        The axes object in which the contours are drawn.

    collections:
        A silent_list of LineCollections or PolyCollections.

    levels:
        Contour levels.

    layers:
        Same as levels for line contours; half-way between
        levels for filled contours. See :meth:`_process_colors` method.
    "
                :superclasses ("ContourSet")
                :members 
                  ( ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52589 52593])
                            ("args" variable nil (reparse-symbol function_parameters) [52595 52600])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52602 52610]))                          
                        :documentation "
        Process args and kwargs.
        ")
                        (reparse-symbol indented_block_body) [52571 54303])
                    ("_get_allsegs_and_allkinds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54338 54342]))                          
                        :documentation "Compute ``allsegs`` and ``allkinds`` using C extension.")
                        (reparse-symbol indented_block_body) [54308 55058])
                    ("_contour_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55081 55085])
                            ("args" variable nil (reparse-symbol function_parameters) [55087 55091])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [55093 55099]))                          )
                        (reparse-symbol indented_block_body) [55063 55984])
                    ("_check_xyz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56004 56008])
                            ("args" variable nil (reparse-symbol function_parameters) [56010 56014])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56016 56022]))                          
                        :documentation "
        For functions like contour, check that the dimensions
        of the input arrays match; if x and y are 1D, convert
        them to 2D using meshgrid.

        Possible change: I think we should make and use an ArgumentError
        Exception class (here and elsewhere).
        ")
                        (reparse-symbol indented_block_body) [55989 57834])
                    ("_initialize_x_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57859 57863])
                            ("z" variable nil (reparse-symbol function_parameters) [57865 57866]))                          
                        :documentation "
        Return X, Y arrays such that contour(Z) will match imshow(Z)
        if origin is not None.
        The center of pixel Z[i,j] depends on origin:
        if origin is None, x = j, y = i;
        if origin is 'lower', x = j + 0.5, y = i + 0.5;
        if origin is 'upper', x = j + 0.5, y = Nrows - i - 0.5
        If extent is not None, x and y will be scaled to match,
        as in imshow.
        If origin is None and extent is not None, then extent
        will give the minimum and maximum values of x and y.
        ")
                        (reparse-symbol indented_block_body) [57839 59407])
                    ("_contour_doc" variable nil (reparse-symbol indented_block_body) [59412 67455]))                  
                :type "class")
                nil [52055 67456]))          
      :file "contour.py"
      :pointmax 67456
      :fsize 67455
      :lastmodtime '(23240 23001 121461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-15efec4"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"
A module for dealing with the polylines used throughout Matplotlib.

The primary class for polyline handling in Matplotlib is `Path`.  Almost all
vector drawing makes use of `Path`\\s somewhere in the drawing pipeline.

Whilst a `Path` instance itself cannot be drawn, some `.Artist` subclasses,
such as `.PathPatch` and `.PathCollection`, can be used for convenient `Path`
visualisation.
\"\"\"" code nil nil [1 397])
            ("" code nil nil [422 507])
            ("six" include nil nil [509 519])
            ("weakref" include nil nil [521 560])
            ("numpy" include nil nil [562 580])
            ("rcParams" include nil nil [589 611])
            ("_path" include nil nil [589 611])
            ("" code nil nil [631 715])
            ("Path" type
               (:documentation "
    :class:`Path` represents a series of possibly disconnected,
    possibly closed, line and curve segments.

    The underlying storage is made up of two parallel numpy arrays:
      - *vertices*: an Nx2 float array of vertices
      - *codes*: an N-length uint8 array of vertex types

    These two arrays always have the same length in the first
    dimension.  For example, to represent a cubic curve, you must
    provide three vertices as well as three codes ``CURVE3``.

    The code types are:

       - ``STOP``   :  1 vertex (ignored)
           A marker for the end of the entire path (currently not
           required and ignored)

       - ``MOVETO`` :  1 vertex
            Pick up the pen and move to the given vertex.

       - ``LINETO`` :  1 vertex
            Draw a line from the current position to the given vertex.

       - ``CURVE3`` :  1 control point, 1 endpoint
          Draw a quadratic Bezier curve from the current position,
          with the given control point, to the given end point.

       - ``CURVE4`` :  2 control points, 1 endpoint
          Draw a cubic Bezier curve from the current position, with
          the given control points, to the given end point.

       - ``CLOSEPOLY`` : 1 vertex (ignored)
          Draw a line segment to the start point of the current
          polyline.

    Users of Path objects should not access the vertices and codes
    arrays directly.  Instead, they should use :meth:`iter_segments`
    or :meth:`cleaned` to get the vertex/code pairs.  This is important,
    since many :class:`Path` objects, as an optimization, do not store a
    *codes* at all, but have a default one provided for them by
    :meth:`iter_segments`.

    Some behavior of Path objects can be controlled by rcParams. See
    the rcParams whose keys contain 'path.'.

    .. note::

        The vertices and codes arrays should be treated as
        immutable -- there are a number of optimizations and assumptions
        made up front in the constructor that will not change when the
        data changes.

    "
                :superclasses ("object")
                :members 
                  ( ("STOP" variable nil (reparse-symbol indented_block_body) [2840 2848])
                    ("MOVETO" variable nil (reparse-symbol indented_block_body) [2872 2882])
                    ("LINETO" variable nil (reparse-symbol indented_block_body) [2904 2914])
                    ("CURVE3" variable nil (reparse-symbol indented_block_body) [2936 2946])
                    ("CURVE4" variable nil (reparse-symbol indented_block_body) [2970 2980])
                    ("CLOSEPOLY" variable nil (reparse-symbol indented_block_body) [3004 3018])
                    ("NUM_VERTICES_FOR_CODE" variable nil (reparse-symbol indented_block_body) [3132 3368])
                    ("code_type" variable nil (reparse-symbol indented_block_body) [3374 3394])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new path with the given vertices and codes.

        Parameters
        ----------
        vertices : array_like
            The ``(n, 2)`` float array, masked array or sequence of pairs
            representing the vertices of the path.

            If *vertices* contains masked values, they will be converted
            to NaNs which are then handled correctly by the Agg
            PathIterator and other consumers of path data, such as
            :meth:`iter_segments`.
        codes : {None, array_like}, optional
            n-length array integers representing the codes of the path.
            If not None, codes must be the same length as vertices.
            If None, *vertices* will be treated as a series of line segments.
        _interpolation_steps : int, optional
            Used as a hint to certain projections, such as Polar, that this
            path should be linearly interpolated immediately before drawing.
            This attribute is primarily an implementation detail and is not
            intended for public use.
        closed : bool, optional
            If *codes* is None and closed is True, vertices will be treated as
            line segments of a closed polygon.
        readonly : bool, optional
            Makes the path behave in an immutable way and sets the vertices
            and codes as read-only arrays.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3521 4916])
                            ("vertices" variable nil (reparse-symbol indented_block_body) [4925 4970])
                            ("if" code nil (reparse-symbol indented_block_body) [4979 5134])
                            ("if" code nil (reparse-symbol indented_block_body) [5143 5831])
                            ("self" variable nil (reparse-symbol indented_block_body) [5840 5865])
                            ("self" variable nil (reparse-symbol indented_block_body) [5874 5893])
                            ("self" variable nil (reparse-symbol indented_block_body) [5902 5950])
                            ("self" code nil (reparse-symbol indented_block_body) [5959 5980])
                            ("if" code nil (reparse-symbol indented_block_body) [5990 6229]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3413 3417])
                            ("vertices" variable nil (reparse-symbol function_parameters) [3419 3427])
                            ("codes" variable nil (reparse-symbol function_parameters) [3429 3434])
                            ("_interpolation_steps" variable nil (reparse-symbol function_parameters) [3441 3461])
                            ("closed" variable nil (reparse-symbol function_parameters) [3482 3488])
                            ("readonly" variable nil (reparse-symbol function_parameters) [3496 3504]))                          
                        :documentation "
        Create a new path with the given vertices and codes.

        Parameters
        ----------
        vertices : array_like
            The ``(n, 2)`` float array, masked array or sequence of pairs
            representing the vertices of the path.

            If *vertices* contains masked values, they will be converted
            to NaNs which are then handled correctly by the Agg
            PathIterator and other consumers of path data, such as
            :meth:`iter_segments`.
        codes : {None, array_like}, optional
            n-length array integers representing the codes of the path.
            If not None, codes must be the same length as vertices.
            If None, *vertices* will be treated as a series of line segments.
        _interpolation_steps : int, optional
            Used as a hint to certain projections, such as Polar, that this
            path should be linearly interpolated immediately before drawing.
            This attribute is primarily an implementation detail and is not
            intended for public use.
        closed : bool, optional
            If *codes* is None and closed is True, vertices will be treated as
            line segments of a closed polygon.
        readonly : bool, optional
            Makes the path behave in an immutable way and sets the vertices
            and codes as read-only arrays.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3400 6229])
                    ("_fast_from_codes_and_verts" function
                       (:documentation "
        Creates a Path instance without the expense of calling the constructor

        Parameters
        ----------
        verts : numpy array
        codes : numpy array
        internals : dict or None
            The attributes that the resulting path should have.
            Allowed keys are ``readonly``, ``should_simplify``,
            ``simplify_threshold``, ``has_nonfinite`` and
            ``interpolation_steps``.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6282 6285])
                            ("verts" variable nil (reparse-symbol function_parameters) [6287 6292])
                            ("codes" variable nil (reparse-symbol function_parameters) [6294 6299])
                            ("internals" variable nil (reparse-symbol function_parameters) [6301 6310]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6234 7580])
                    ("_update_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7604 7608]))                          )
                        (reparse-symbol indented_block_body) [7585 7996])
                    ("vertices" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8028 8032]))                          
                        :documentation "
        The list of vertices in the `Path` as an Nx2 numpy array.
        ")
                        (reparse-symbol indented_block_body) [8001 8155])
                    ("vertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8194 8198])
                            ("vertices" variable nil (reparse-symbol function_parameters) [8200 8208]))                          
                        :decorators 
                          ( ("vertices.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8160 8376])
                    ("codes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8405 8409]))                          
                        :documentation "
        The list of codes in the `Path` as a 1-D numpy array.  Each
        code is one of `STOP`, `MOVETO`, `LINETO`, `CURVE3`, `CURVE4`
        or `CLOSEPOLY`.  For codes that correspond to more than one
        vertex (`CURVE3` and `CURVE4`), that code will be repeated so
        that the length of `self.vertices` and `self.codes` is always
        the same.
        ")
                        (reparse-symbol indented_block_body) [8381 8827])
                    ("codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8860 8864])
                            ("codes" variable nil (reparse-symbol function_parameters) [8866 8871]))                          
                        :decorators 
                          ( ("codes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8832 9030])
                    ("simplify_threshold" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9072 9076]))                          
                        :documentation "
        The fraction of a pixel difference below which vertices will
        be simplified out.
        ")
                        (reparse-symbol indented_block_body) [9035 9239])
                    ("simplify_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9298 9302])
                            ("threshold" variable nil (reparse-symbol function_parameters) [9304 9313]))                          
                        :decorators 
                          ( ("simplify_threshold.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9244 9361])
                    ("has_nonfinite" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9398 9402]))                          
                        :documentation "
        `True` if the vertices array has nonfinite values.
        ")
                        (reparse-symbol indented_block_body) [9366 9523])
                    ("should_simplify" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9562 9566]))                          
                        :documentation "
        `True` if the vertices array should be simplified.
        ")
                        (reparse-symbol indented_block_body) [9528 9689])
                    ("should_simplify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9742 9746])
                            ("should_simplify" variable nil (reparse-symbol function_parameters) [9748 9763]))                          
                        :decorators 
                          ( ("should_simplify.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9694 9814])
                    ("readonly" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9846 9850]))                          
                        :documentation "
        `True` if the `Path` is read-only.
        ")
                        (reparse-symbol indented_block_body) [9819 9950])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9968 9972]))                          
                        :documentation "
        Returns a shallow copy of the `Path`, which will share the
        vertices and codes with the source `Path`.
        ")
                        (reparse-symbol indented_block_body) [9955 10168])
                    ("copy" variable nil (reparse-symbol indented_block_body) [10173 10188])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10211 10215])
                            ("memo" variable nil (reparse-symbol function_parameters) [10217 10221]))                          
                        :documentation "
        Returns a deepcopy of the `Path`.  The `Path` will not be
        readonly, even if the source `Path` is.
        ")
                        (reparse-symbol indented_block_body) [10194 10606])
                    ("deepcopy" variable nil (reparse-symbol indented_block_body) [10611 10634])
                    ("make_compound_path_from_polys" function
                       (:documentation "
        Make a compound path object to draw a number
        of polygons with equal numbers of sides XY is a (numpolys x
        numsides x 2) numpy array of vertices.  Return object is a
        :class:`Path`

        .. plot:: gallery/api/histogram_path.py

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10691 10694])
                            ("XY" variable nil (reparse-symbol function_parameters) [10696 10698]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10640 11683])
                    ("make_compound_path" function
                       (:documentation "Make a compound path from a list of Path objects."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11728 11731])
                            ("args" variable nil (reparse-symbol function_parameters) [11733 11738]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11688 12509])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12527 12531]))                          )
                        (reparse-symbol indented_block_body) [12514 12594])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12611 12615]))                          )
                        (reparse-symbol indented_block_body) [12599 12652])
                    ("iter_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12675 12679])
                            ("transform" variable nil (reparse-symbol function_parameters) [12681 12690])
                            ("remove_nans" variable nil (reparse-symbol function_parameters) [12697 12708])
                            ("clip" variable nil (reparse-symbol function_parameters) [12715 12719])
                            ("snap" variable nil (reparse-symbol function_parameters) [12748 12752])
                            ("stroke_width" variable nil (reparse-symbol function_parameters) [12760 12772])
                            ("simplify" variable nil (reparse-symbol function_parameters) [12778 12786])
                            ("curves" variable nil (reparse-symbol function_parameters) [12815 12821])
                            ("sketch" variable nil (reparse-symbol function_parameters) [12828 12834]))                          
                        :documentation "
        Iterates over all of the curve segments in the path.  Each
        iteration returns a 2-tuple (*vertices*, *code*), where
        *vertices* is a sequence of 1 - 3 coordinate pairs, and *code* is
        one of the :class:`Path` codes.

        Additionally, this method can provide a number of standard
        cleanups and conversions to the path.

        Parameters
        ----------
        transform : None or :class:`~matplotlib.transforms.Transform` instance
            If not None, the given affine transformation will
            be applied to the path.
        remove_nans : {False, True}, optional
            If True, will remove all NaNs from the path and
            insert MOVETO commands to skip over them.
        clip : None or sequence, optional
            If not None, must be a four-tuple (x1, y1, x2, y2)
            defining a rectangle in which to clip the path.
        snap : None or bool, optional
            If None, auto-snap to pixels, to reduce
            fuzziness of rectilinear lines.  If True, force snapping, and
            if False, don't snap.
        stroke_width : float, optional
            The width of the stroke being drawn.  Needed
             as a hint for the snapping algorithm.
        simplify : None or bool, optional
            If True, perform simplification, to remove
             vertices that do not affect the appearance of the path.  If
             False, perform no simplification.  If None, use the
             should_simplify member variable.  See also the rcParams
             path.simplify and path.simplify_threshold.
        curves : {True, False}, optional
            If True, curve segments will be returned as curve
            segments.  If False, all curves will be converted to line
            segments.
        sketch : None or sequence, optional
            If not None, must be a 3-tuple of the form
            (scale, length, randomness), representing the sketch
            parameters.
        ")
                        (reparse-symbol indented_block_body) [12657 15806])
                    ("cleaned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15823 15827])
                            ("transform" variable nil (reparse-symbol function_parameters) [15829 15838])
                            ("remove_nans" variable nil (reparse-symbol function_parameters) [15845 15856])
                            ("clip" variable nil (reparse-symbol function_parameters) [15864 15868])
                            ("quantize" variable nil (reparse-symbol function_parameters) [15891 15899])
                            ("simplify" variable nil (reparse-symbol function_parameters) [15907 15915])
                            ("curves" variable nil (reparse-symbol function_parameters) [15923 15929])
                            ("stroke_width" variable nil (reparse-symbol function_parameters) [15953 15965])
                            ("snap" variable nil (reparse-symbol function_parameters) [15971 15975])
                            ("sketch" variable nil (reparse-symbol function_parameters) [15983 15989]))                          
                        :documentation "
        Cleans up the path according to the parameters returning a new
        Path instance.

        .. seealso::

            See :meth:`iter_segments` for details of the keyword arguments.

        Returns
        -------
        Path instance with cleaned up vertices and codes.

        ")
                        (reparse-symbol indented_block_body) [15811 16939])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16960 16964])
                            ("transform" variable nil (reparse-symbol function_parameters) [16966 16975]))                          
                        :documentation "
        Return a transformed copy of the path.

        .. seealso::

            :class:`matplotlib.transforms.TransformedPath`
                A specialized path class that will cache the
                transformed result and automatically update when the
                transform changes.
        ")
                        (reparse-symbol indented_block_body) [16944 17411])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17435 17439])
                            ("point" variable nil (reparse-symbol function_parameters) [17441 17446])
                            ("transform" variable nil (reparse-symbol function_parameters) [17448 17457])
                            ("radius" variable nil (reparse-symbol function_parameters) [17464 17470]))                          
                        :documentation "
        Returns whether the (closed) path contains the given point.

        If *transform* is not ``None``, the path will be transformed before
        performing the test.

        *radius* allows the path to be made slightly larger or smaller.
        ")
                        (reparse-symbol indented_block_body) [17416 18271])
                    ("contains_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18296 18300])
                            ("points" variable nil (reparse-symbol function_parameters) [18302 18308])
                            ("transform" variable nil (reparse-symbol function_parameters) [18310 18319])
                            ("radius" variable nil (reparse-symbol function_parameters) [18326 18332]))                          
                        :documentation "
        Returns a bool array which is ``True`` if the (closed) path contains
        the corresponding point.

        If *transform* is not ``None``, the path will be transformed before
        performing the test.

        *radius* allows the path to be made slightly larger or smaller.
        ")
                        (reparse-symbol indented_block_body) [18276 18837])
                    ("contains_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18860 18864])
                            ("path" variable nil (reparse-symbol function_parameters) [18866 18870])
                            ("transform" variable nil (reparse-symbol function_parameters) [18872 18881]))                          
                        :documentation "
        Returns whether this (closed) path completely contains the given path.

        If *transform* is not ``None``, the path will be transformed before
        performing the test.
        ")
                        (reparse-symbol indented_block_body) [18842 19238])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19259 19263])
                            ("transform" variable nil (reparse-symbol function_parameters) [19265 19274]))                          
                        :documentation "
        Returns the extents (*xmin*, *ymin*, *xmax*, *ymax*) of the
        path.

        Unlike computing the extents on the *vertices* alone, this
        algorithm will take into account the curves and deal with
        control points appropriately.
        ")
                        (reparse-symbol indented_block_body) [19243 19879])
                    ("intersects_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19904 19908])
                            ("other" variable nil (reparse-symbol function_parameters) [19910 19915])
                            ("filled" variable nil (reparse-symbol function_parameters) [19917 19923]))                          
                        :documentation "
        Returns *True* if this path intersects another given path.

        *filled*, when True, treats the paths as if they were filled.
        That is, if one path completely encloses the other,
        :meth:`intersects_path` will return True.
        ")
                        (reparse-symbol indented_block_body) [19884 20266])
                    ("intersects_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20291 20295])
                            ("bbox" variable nil (reparse-symbol function_parameters) [20297 20301])
                            ("filled" variable nil (reparse-symbol function_parameters) [20303 20309]))                          
                        :documentation "
        Returns *True* if this path intersects a given
        :class:`~matplotlib.transforms.Bbox`.

        *filled*, when True, treats the path as if it was filled.
        That is, if the path completely encloses the bounding box,
        :meth:`intersects_bbox` will return True.

        The bounding box is always considered filled.
        ")
                        (reparse-symbol indented_block_body) [20271 20790])
                    ("interpolated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20812 20816])
                            ("steps" variable nil (reparse-symbol function_parameters) [20818 20823]))                          
                        :documentation "
        Returns a new path resampled to length N x steps.  Does not
        currently handle interpolating curves.
        ")
                        (reparse-symbol indented_block_body) [20795 21343])
                    ("to_polygons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21364 21368])
                            ("transform" variable nil (reparse-symbol function_parameters) [21370 21379])
                            ("width" variable nil (reparse-symbol function_parameters) [21386 21391])
                            ("height" variable nil (reparse-symbol function_parameters) [21395 21401])
                            ("closed_only" variable nil (reparse-symbol function_parameters) [21405 21416]))                          
                        :documentation "
        Convert this path to a list of polygons or polylines.  Each
        polygon/polyline is an Nx2 array of vertices.  In other words,
        each polygon has no ``MOVETO`` instructions or curves.  This
        is useful for displaying in backends that do not support
        compound paths or Bezier curves, such as GDK.

        If *width* and *height* are both non-zero then the lines will
        be simplified so that vertices outside of (0, 0), (width,
        height) will be clipped.

        If *closed_only* is `True` (default), only closed polygons,
        with the last point being the same as the first point, will be
        returned.  Any unclosed polylines in the path will be
        explicitly closed.  If *closed_only* is `False`, any unclosed
        polygons in the path will be returned as unclosed polygons,
        and the closed polygons will be returned explicitly closed by
        setting the last point to the same as the first point.
        ")
                        (reparse-symbol indented_block_body) [21348 23228])
                    ("_unit_rectangle" variable nil (reparse-symbol indented_block_body) [23233 23255])
                    ("unit_rectangle" function
                       (:documentation "
        Return a :class:`Path` instance of the unit rectangle
        from (0, 0) to (1, 1).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23297 23300]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23261 23775])
                    ("_unit_regular_polygons" variable nil (reparse-symbol indented_block_body) [23780 23826])
                    ("unit_regular_polygon" function
                       (:documentation "
        Return a :class:`Path` instance for a unit regular
        polygon with the given *numVertices* and radius of 1.0,
        centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23874 23877])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [23879 23890]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23832 24873])
                    ("_unit_regular_stars" variable nil (reparse-symbol indented_block_body) [24878 24921])
                    ("unit_regular_star" function
                       (:documentation "
        Return a :class:`Path` for a unit regular star
        with the given numVertices and radius of 1.0, centered at (0,
        0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [24966 24969])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [24971 24982])
                            ("innerCircle" variable nil (reparse-symbol function_parameters) [24984 24995]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24927 26026])
                    ("unit_regular_asterisk" function
                       (:documentation "
        Return a :class:`Path` for a unit regular
        asterisk with the given numVertices and radius of 1.0,
        centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26074 26077])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [26079 26090]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26031 26313])
                    ("_unit_circle" variable nil (reparse-symbol indented_block_body) [26318 26337])
                    ("unit_circle" function
                       (:documentation "
        Return the readonly :class:`Path` of the unit circle.

        For most cases, :func:`Path.circle` will be what you want.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26376 26379]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26343 26730])
                    ("circle" function
                       (:documentation "
        Return a Path representing a circle of a given radius and center.

        Parameters
        ----------
        center : pair of floats
            The center of the circle. Default ``(0, 0)``.
        radius : float
            The radius of the circle. Default is 1.
        readonly : bool
            Whether the created path should have the \"readonly\" argument
            set when creating the Path instance.

        Notes
        -----
        The circle is approximated using cubic Bezier curves.  This
        uses 8 splines around the circle using the approach presented
        here:

          Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four
          Bezier Cubic Splines <http://www.tinaja.com/glib/ellipse4.pdf>`_.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26763 26766])
                            ("center" variable nil (reparse-symbol function_parameters) [26768 26774])
                            ("radius" variable nil (reparse-symbol function_parameters) [26785 26791])
                            ("readonly" variable nil (reparse-symbol function_parameters) [26796 26804]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26735 29268])
                    ("_unit_circle_righthalf" variable nil (reparse-symbol indented_block_body) [29273 29302])
                    ("unit_circle_righthalf" function
                       (:documentation "
        Return a :class:`Path` of the right half
        of a unit circle. The circle is approximated using cubic Bezier
        curves.  This uses 4 splines around the circle using the approach
        presented here:

          Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four
          Bezier Cubic Splines <http://www.tinaja.com/glib/ellipse4.pdf>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [29351 29354]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29308 30752])
                    ("arc" function
                       (:documentation "
        Return an arc on the unit circle from angle
        *theta1* to angle *theta2* (in degrees).

        *theta2* is unwrapped to produce the shortest arc within 360 degrees.
        That is, if *theta2* > *theta1* + 360, the arc will be from *theta1* to
        *theta2* - 360 and not a full circle plus some extra overlap.

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.

           Masionobe, L.  2003.  `Drawing an elliptical arc using
           polylines, quadratic or cubic Bezier curves
           <http://www.spaceroots.org/documents/ellipse/index.html>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [30782 30785])
                            ("theta1" variable nil (reparse-symbol function_parameters) [30787 30793])
                            ("theta2" variable nil (reparse-symbol function_parameters) [30795 30801])
                            ("n" variable nil (reparse-symbol function_parameters) [30803 30804])
                            ("is_wedge" variable nil (reparse-symbol function_parameters) [30811 30819]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30757 33658])
                    ("wedge" function
                       (:documentation "
        Return a wedge of the unit circle from angle
        *theta1* to angle *theta2* (in degrees).

        *theta2* is unwrapped to produce the shortest wedge within 360 degrees.
        That is, if *theta2* > *theta1* + 360, the wedge will be from *theta1*
        to *theta2* - 360 and not a full circle plus some extra overlap.

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [33690 33693])
                            ("theta1" variable nil (reparse-symbol function_parameters) [33695 33701])
                            ("theta2" variable nil (reparse-symbol function_parameters) [33703 33709])
                            ("n" variable nil (reparse-symbol function_parameters) [33711 33712]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33663 34335])
                    ("_hatch_dict" variable nil (reparse-symbol indented_block_body) [34340 34364])
                    ("hatch" function
                       (:documentation "
        Given a hatch specifier, *hatchpattern*, generates a Path that
        can be used in a repeated hatching pattern.  *density* is the
        number of lines per unit square.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [34397 34400])
                            ("hatchpattern" variable nil (reparse-symbol function_parameters) [34402 34414])
                            ("density" variable nil (reparse-symbol function_parameters) [34416 34423]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34370 35012])
                    ("clip_to_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35034 35038])
                            ("bbox" variable nil (reparse-symbol function_parameters) [35040 35044])
                            ("inside" variable nil (reparse-symbol function_parameters) [35046 35052]))                          
                        :documentation "
        Clip the path to the given bounding box.

        The path must be made up of one or more closed polygons.  This
        algorithm will not behave correctly for unclosed paths.

        If *inside* is `True`, clip to the inside of the box, otherwise
        to the outside of the box.
        ")
                        (reparse-symbol indented_block_body) [35017 35575]))                  
                :type "class")
                nil [718 35575])
            ("get_path_collection_extents" function
               (:documentation "
    Given a sequence of :class:`Path` objects,
    :class:`~matplotlib.transforms.Transform` objects and offsets, as
    found in a :class:`~matplotlib.collections.PathCollection`,
    returns the bounding box that encapsulates all of them.

    *master_transform* is a global transformation to apply to all paths

    *paths* is a sequence of :class:`Path` instances.

    *transforms* is a sequence of
    :class:`~matplotlib.transforms.Affine2D` instances.

    *offsets* is a sequence of (x, y) offsets (or an Nx2 array)

    *offset_transform* is a :class:`~matplotlib.transforms.Affine2D`
    to apply to the offsets before applying the offset to the path.

    The way that *paths*, *transforms* and *offsets* are combined
    follows the same method as for collections.  Each is iterated over
    independently, so if you have 3 paths, 2 transforms and 1 offset,
    their combinations are as follows:

        (A, A, A), (B, B, A), (C, A, A)
    "
                :arguments 
                  ( ("master_transform" variable nil (reparse-symbol function_parameters) [35618 35634])
                    ("paths" variable nil (reparse-symbol function_parameters) [35636 35641])
                    ("transforms" variable nil (reparse-symbol function_parameters) [35643 35653])
                    ("offsets" variable nil (reparse-symbol function_parameters) [35655 35662])
                    ("offset_transform" variable nil (reparse-symbol function_parameters) [35664 35680]))                  )
                nil [35577 36914])
            ("get_paths_extents" function
               (:documentation "
    Given a sequence of :class:`Path` objects and optional
    :class:`~matplotlib.transforms.Transform` objects, returns the
    bounding box that encapsulates all of them.

    *paths* is a sequence of :class:`Path` instances.

    *transforms* is an optional sequence of
    :class:`~matplotlib.transforms.Affine2D` instances to apply to
    each path.
    "
                :arguments 
                  ( ("paths" variable nil (reparse-symbol function_parameters) [36938 36943])
                    ("transforms" variable nil (reparse-symbol function_parameters) [36945 36955]))                  )
                nil [36916 37567]))          
      :file "path.py"
      :pointmax 37567
      :fsize 37566
      :lastmodtime '(23240 23001 125461 0)
      :unmatched-syntax '((FROM 37337 . 37341) (PERIOD 37342 . 37343) (FROM 36654 . 36658) (PERIOD 36659 . 36660) (FROM 19568 . 19572) (PERIOD 19573 . 19574) (FROM 612 . 616) (PERIOD 617 . 618) (FROM 582 . 586) (PERIOD 587 . 588)))
    (semanticdb-table "semanticdb-table-1609c8c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Tick locating and formatting
============================

This module contains classes to support completely configurable tick
locating and formatting. Although the locators know nothing about major
or minor ticks, they are used by the Axis class to support major and
minor tick locating and formatting. Generic tick locators and
formatters are provided, as well as domain specific custom ones.

Default Formatter
-----------------

The default formatter identifies when the x-data being plotted is a
small range on top of a large off set. To reduce the chances that the
ticklabels overlap the ticks are labeled as deltas from a fixed offset.
For example::

   ax.plot(np.arange(2000, 2010), range(10))

will have tick of 0-9 with an offset of +2e3. If this is not desired
turn off the use of the offset on the default formatter::

   ax.get_xaxis().get_major_formatter().set_useOffset(False)

set the rcParam ``axes.formatter.useoffset=False`` to turn it off
globally, or set a different formatter.

Tick locating
-------------

The Locator class is the base class for all tick locators. The locators
handle autoscaling of the view limits based on the data limits, and the
choosing of tick locations. A useful semi-automatic tick locator is
`MultipleLocator`. It is initialized with a base, e.g., 10, and it picks
axis limits and ticks that are multiples of that base.

The Locator subclasses defined here are

:class:`AutoLocator`
    `MaxNLocator` with simple defaults.  This is the default tick locator for
    most plotting.

:class:`MaxNLocator`
    Finds up to a max number of intervals with ticks at nice locations.

:class:`LinearLocator`
    Space ticks evenly from min to max.

:class:`LogLocator`
    Space ticks logarithmically from min to max.

:class:`MultipleLocator`
    Ticks and range are a multiple of base; either integer or float.

:class:`FixedLocator`
    Tick locations are fixed.

:class:`IndexLocator`
    Locator for index plots (e.g., where ``x = range(len(y))``).

:class:`NullLocator`
    No ticks.

:class:`SymmetricalLogLocator`
    Locator for use with with the symlog norm; works like `LogLocator` for the
    part outside of the threshold and adds 0 if inside the limits.

:class:`LogitLocator`
    Locator for logit scaling.

:class:`OldAutoLocator`
    Choose a `MultipleLocator` and dynamically reassign it for intelligent
    ticking during navigation.

:class:`AutoMinorLocator`
    Locator for minor ticks when the axis is linear and the
    major ticks are uniformly spaced.  Subdivides the major
    tick interval into a specified number of minor intervals,
    defaulting to 4 or 5 depending on the major interval.


There are a number of locators specialized for date locations - see
the `dates` module.

You can define your own locator by deriving from Locator. You must
override the ``__call__`` method, which returns a sequence of locations,
and you will probably want to override the autoscale method to set the
view limits from the data limits.

If you want to override the default locator, use one of the above or a custom
locator and pass it to the x or y axis instance. The relevant methods are::

  ax.xaxis.set_major_locator(xmajor_locator)
  ax.xaxis.set_minor_locator(xminor_locator)
  ax.yaxis.set_major_locator(ymajor_locator)
  ax.yaxis.set_minor_locator(yminor_locator)

The default minor locator is `NullLocator`, i.e., no minor ticks on by default.

Tick formatting
---------------

Tick formatting is controlled by classes derived from Formatter. The formatter
operates on a single tick value and returns a string to the axis.

:class:`NullFormatter`
    No labels on the ticks.

:class:`IndexFormatter`
    Set the strings from a list of labels.

:class:`FixedFormatter`
    Set the strings manually for the labels.

:class:`FuncFormatter`
    User defined function sets the labels.

:class:`StrMethodFormatter`
    Use string `format` method.

:class:`FormatStrFormatter`
    Use an old-style sprintf format string.

:class:`ScalarFormatter`
    Default formatter for scalars: autopick the format string.

:class:`LogFormatter`
    Formatter for log axes.

:class:`LogFormatterExponent`
    Format values for log axis using ``exponent = log_base(value)``.

:class:`LogFormatterMathtext`
    Format values for log axis using ``exponent = log_base(value)``
    using Math text.

:class:`LogFormatterSciNotation`
    Format values for log axis using scientific notation.

:class:`LogitFormatter`
    Probability formatter.

:class:`EngFormatter`
    Format labels in engineering notation

:class:`PercentFormatter`
    Format labels as a percentage

You can derive your own formatter from the Formatter base class by
simply overriding the ``__call__`` method. The formatter class has
access to the axis view and data limits.

To control the major and minor tick label formats, use one of the
following methods::

  ax.xaxis.set_major_formatter(xmajor_formatter)
  ax.xaxis.set_minor_formatter(xminor_formatter)
  ax.yaxis.set_major_formatter(ymajor_formatter)
  ax.yaxis.set_minor_formatter(yminor_formatter)

See :ref:`sphx_glr_gallery_ticks_and_spines_major_minor_demo.py` for an
example of setting major and minor ticks. See the :mod:`matplotlib.dates`
module for more information and examples of using date locators and formatters.
\"\"\"" code nil nil [1 5309])
            ("" code nil nil [5334 5419])
            ("six" include nil nil [5421 5431])
            ("itertools" include nil nil [5433 5449])
            ("locale" include nil nil [5450 5463])
            ("math" include nil nil [5464 5475])
            ("numpy" include nil nil [5476 5494])
            ("matplotlib" include nil nil [5495 5526])
            ("matplotlib" include nil nil [5527 5555])
            ("matplotlib" include nil nil [5556 5604])
            ("matplotlib.cbook" include nil nil [5605 5648])
            ("warnings" include nil nil [5650 5665])
            ("__all__" variable nil nil [5668 6281])
            ("if" code nil nil [6284 6311])
            ("_divmod" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6357 6358])
                ("y" variable nil (reparse-symbol function_parameters) [6360 6361]))              ) nil [6345 6517])
            ("_mathdefault" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [6536 6537]))              ) nil [6519 6575])
            ("_DummyAxis" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6645 6683])
                            ("self" variable nil (reparse-symbol indented_block_body) [6692 6730])
                            ("self" variable nil (reparse-symbol indented_block_body) [6739 6760]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6620 6624])
                            ("minpos" variable nil (reparse-symbol function_parameters) [6626 6632]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6607 6761])
                    ("get_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6788 6792]))                          )
                        (reparse-symbol indented_block_body) [6766 6833])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6860 6864])
                            ("vmin" variable nil (reparse-symbol function_parameters) [6866 6870])
                            ("vmax" variable nil (reparse-symbol function_parameters) [6872 6876]))                          )
                        (reparse-symbol indented_block_body) [6838 6923])
                    ("get_minpos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6943 6947]))                          )
                        (reparse-symbol indented_block_body) [6928 6978])
                    ("get_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7005 7009]))                          )
                        (reparse-symbol indented_block_body) [6983 7050])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7077 7081])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7083 7087])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7089 7093]))                          )
                        (reparse-symbol indented_block_body) [7055 7140])
                    ("get_tick_space" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7164 7168]))                          )
                        (reparse-symbol indented_block_body) [7145 7245]))                  
                :type "class")
                nil [6577 7245])
            ("TickHelper" type
               (:superclasses ("object")
                :members 
                  ( ("axis" variable nil (reparse-symbol indented_block_body) [7277 7288])
                    ("set_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7307 7311])
                            ("axis" variable nil (reparse-symbol function_parameters) [7313 7317]))                          )
                        (reparse-symbol indented_block_body) [7294 7345])
                    ("create_dummy_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7372 7376])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7378 7386]))                          )
                        (reparse-symbol indented_block_body) [7350 7464])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7491 7495])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7497 7501])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7503 7507]))                          )
                        (reparse-symbol indented_block_body) [7469 7558])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7585 7589])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7591 7595])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7597 7601]))                          )
                        (reparse-symbol indented_block_body) [7563 7652])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7672 7676])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7678 7682])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7684 7688]))                          )
                        (reparse-symbol indented_block_body) [7657 7777]))                  
                :type "class")
                nil [7247 7777])
            ("Formatter" type
               (:documentation "
    Create a string based on a tick value and location.
    "
                :superclasses ("TickHelper")
                :members 
                  ( ("locs" variable nil (reparse-symbol indented_block_body) [7965 7974])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7993 7997])
                            ("x" variable nil (reparse-symbol function_parameters) [7999 8000])
                            ("pos" variable nil (reparse-symbol function_parameters) [8002 8005]))                          
                        :documentation "
        Return the format for tick value `x` at position pos.
        ``pos=None`` indicates an unspecified location.
        ")
                        (reparse-symbol indented_block_body) [7980 8214])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8235 8239])
                            ("value" variable nil (reparse-symbol function_parameters) [8241 8246]))                          
                        :documentation "
        Returns the full string representation of the value with the
        position unspecified.
        ")
                        (reparse-symbol indented_block_body) [8219 8408])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8435 8439])
                            ("value" variable nil (reparse-symbol function_parameters) [8441 8446]))                          
                        :documentation "
        Return a short string version of the tick value.

        Defaults to the position-independent long value.
        ")
                        (reparse-symbol indented_block_body) [8413 8627])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8647 8651]))                          )
                        (reparse-symbol indented_block_body) [8632 8672])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8690 8694])
                            ("locs" variable nil (reparse-symbol function_parameters) [8696 8700]))                          )
                        (reparse-symbol indented_block_body) [8677 8728])
                    ("fix_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8747 8751])
                            ("s" variable nil (reparse-symbol function_parameters) [8753 8754]))                          
                        :documentation "
        Some classes may want to replace a hyphen for minus with the
        proper unicode symbol (U+2212) for typographical correctness.
        The default is to not replace it.

        Note, if you use this method, e.g., in :meth:`format_data` or
        call, you probably don't want to use it for
        :meth:`format_data_short` since the toolbar uses this for
        interactive coord reporting and I doubt we can expect GUIs
        across platforms will handle the unicode correctly.  So for
        now the classes that override :meth:`fix_minus` should have an
        explicit :meth:`format_data_short` method
        ")
                        (reparse-symbol indented_block_body) [8733 9424]))                  
                :type "class")
                nil [7779 9424])
            ("IndexFormatter" type
               (:documentation "
    Format the position x to the nearest i-th label where i=int(x+0.5)
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9586 9606])
                            ("self" variable nil (reparse-symbol indented_block_body) [9615 9635]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9563 9567])
                            ("labels" variable nil (reparse-symbol function_parameters) [9569 9575]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9550 9636])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9654 9658])
                            ("x" variable nil (reparse-symbol function_parameters) [9660 9661])
                            ("pos" variable nil (reparse-symbol function_parameters) [9663 9666]))                          
                        :documentation "
        Return the format for tick value `x` at position pos.

        The position is ignored and the value is rounded to the nearest
        integer, which is used to look up the label.
        ")
                        (reparse-symbol indented_block_body) [9641 10014]))                  
                :type "class")
                nil [9426 10014])
            ("NullFormatter" type
               (:documentation "
    Always return the empty string.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10117 10121])
                            ("x" variable nil (reparse-symbol function_parameters) [10123 10124])
                            ("pos" variable nil (reparse-symbol function_parameters) [10126 10129]))                          
                        :documentation "
        Returns an empty string for all inputs.
        ")
                        (reparse-symbol indented_block_body) [10104 10227]))                  
                :type "class")
                nil [10016 10227])
            ("FixedFormatter" type
               (:documentation "
    Return fixed strings for tick labels based only on position, not
    value.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Set the sequence of strings that will be used for labels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10395 10476])
                            ("self" variable nil (reparse-symbol indented_block_body) [10485 10499])
                            ("self" variable nil (reparse-symbol indented_block_body) [10508 10531]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10375 10379])
                            ("seq" variable nil (reparse-symbol function_parameters) [10381 10384]))                          
                        :documentation "
        Set the sequence of strings that will be used for labels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10362 10532])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10550 10554])
                            ("x" variable nil (reparse-symbol function_parameters) [10556 10557])
                            ("pos" variable nil (reparse-symbol function_parameters) [10559 10562]))                          
                        :documentation "
        Returns the label that matches the position regardless of the
        value.

        For positions ``pos < len(seq)``, return `seq[i]` regardless of
        `x`. Otherwise return empty string. `seq` is the sequence of
        strings that this object was initialized with.
        ")
                        (reparse-symbol indented_block_body) [10537 10993])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11013 11017]))                          )
                        (reparse-symbol indented_block_body) [10998 11054])
                    ("set_offset_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11081 11085])
                            ("ofs" variable nil (reparse-symbol function_parameters) [11087 11090]))                          )
                        (reparse-symbol indented_block_body) [11059 11126]))                  
                :type "class")
                nil [10229 11126])
            ("FuncFormatter" type
               (:documentation "
    Use a user-defined function for formatting.

    The function should take in two inputs (a tick value ``x`` and a
    position ``pos``), and return a string containing the corresponding
    tick label.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11420 11436]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11399 11403])
                            ("func" variable nil (reparse-symbol function_parameters) [11405 11409]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11386 11437])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11455 11459])
                            ("x" variable nil (reparse-symbol function_parameters) [11461 11462])
                            ("pos" variable nil (reparse-symbol function_parameters) [11464 11467]))                          
                        :documentation "
        Return the value of the user defined function.

        `x` and `pos` are passed through as-is.
        ")
                        (reparse-symbol indented_block_body) [11442 11636]))                  
                :type "class")
                nil [11128 11636])
            ("FormatStrFormatter" type
               (:documentation "
    Use an old-style ('%' operator) format string to format the tick.

    The format string should have a single variable format (%) in it.
    It will be applied to the value (not the position) of the tick.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11937 11951]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11917 11921])
                            ("fmt" variable nil (reparse-symbol function_parameters) [11923 11926]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11904 11952])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11970 11974])
                            ("x" variable nil (reparse-symbol function_parameters) [11976 11977])
                            ("pos" variable nil (reparse-symbol function_parameters) [11979 11982]))                          
                        :documentation "
        Return the formatted label string.

        Only the value `x` is formatted. The position is ignored.
        ")
                        (reparse-symbol indented_block_body) [11957 12152]))                  
                :type "class")
                nil [11638 12152])
            ("StrMethodFormatter" type
               (:documentation "
    Use a new-style format string (as used by `str.format()`)
    to format the tick.

    The field used for the value must be labeled `x` and the field used
    for the position must be labeled `pos`.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12447 12461]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12427 12431])
                            ("fmt" variable nil (reparse-symbol function_parameters) [12433 12436]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12414 12462])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12480 12484])
                            ("x" variable nil (reparse-symbol function_parameters) [12486 12487])
                            ("pos" variable nil (reparse-symbol function_parameters) [12489 12492]))                          
                        :documentation "
        Return the formatted label string.

        `x` and `pos` are passed to `str.format` as keyword arguments
        with those exact names.
        ")
                        (reparse-symbol indented_block_body) [12467 12715]))                  
                :type "class")
                nil [12154 12715])
            ("OldScalarFormatter" type
               (:documentation "
    Tick location is a plain old number.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12829 12833])
                            ("x" variable nil (reparse-symbol function_parameters) [12835 12836])
                            ("pos" variable nil (reparse-symbol function_parameters) [12838 12841]))                          
                        :documentation "
        Return the format for tick val `x` based on the width of the
        axis.

        The position `pos` is ignored.
        ")
                        (reparse-symbol indented_block_body) [12816 13114])
                    ("pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13134 13138])
                            ("x" variable nil (reparse-symbol function_parameters) [13140 13141])
                            ("d" variable nil (reparse-symbol function_parameters) [13143 13144]))                          
                        :documentation "
        Formats the value `x` based on the size of the axis range `d`.
        ")
                        (reparse-symbol indented_block_body) [13119 14020]))                  
                :type "class")
                nil [12717 14020])
            ("ScalarFormatter" type
               (:documentation "
    Format tick values as a number.

    Tick value is interpreted as a plain old number. If
    ``useOffset==True`` and the data range is much smaller than the data
    average, then an offset will be determined such that the tick labels
    are meaningful. Scientific notation is used for ``data < 10^-n`` or
    ``data >= 10^m``, where ``n`` and ``m`` are the power limits set
    using ``set_powerlimits((n,m))``. The defaults for these are
    controlled by the ``axes.formatter.limits`` rc parameter.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [14863 14946])
                            ("self" variable nil (reparse-symbol indented_block_body) [14954 15022])
                            ("self" code nil (reparse-symbol indented_block_body) [15031 15060])
                            ("self" variable nil (reparse-symbol indented_block_body) [15069 15107])
                            ("if" code nil (reparse-symbol indented_block_body) [15116 15206])
                            ("self" code nil (reparse-symbol indented_block_body) [15214 15247])
                            ("self" variable nil (reparse-symbol indented_block_body) [15256 15281])
                            ("self" variable nil (reparse-symbol indented_block_body) [15290 15306])
                            ("self" variable nil (reparse-symbol indented_block_body) [15315 15338])
                            ("self" variable nil (reparse-symbol indented_block_body) [15347 15400])
                            ("if" code nil (reparse-symbol indented_block_body) [15409 15493])
                            ("self" variable nil (reparse-symbol indented_block_body) [15501 15528]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14596 14600])
                            ("useOffset" variable nil (reparse-symbol function_parameters) [14602 14611])
                            ("useMathText" variable nil (reparse-symbol function_parameters) [14618 14629])
                            ("useLocale" variable nil (reparse-symbol function_parameters) [14636 14645]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14583 15529])
                    ("get_useOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15552 15556]))                          )
                        (reparse-symbol indented_block_body) [15534 15590])
                    ("set_useOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15613 15617])
                            ("val" variable nil (reparse-symbol function_parameters) [15619 15622]))                          )
                        (reparse-symbol indented_block_body) [15595 15800])
                    ("useOffset" variable nil (reparse-symbol indented_block_body) [15805 15865])
                    ("get_useLocale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15889 15893]))                          )
                        (reparse-symbol indented_block_body) [15871 15927])
                    ("set_useLocale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15950 15954])
                            ("val" variable nil (reparse-symbol function_parameters) [15956 15959]))                          )
                        (reparse-symbol indented_block_body) [15932 16102])
                    ("useLocale" variable nil (reparse-symbol indented_block_body) [16107 16167])
                    ("get_useMathText" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16193 16197]))                          )
                        (reparse-symbol indented_block_body) [16173 16233])
                    ("set_useMathText" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16258 16262])
                            ("val" variable nil (reparse-symbol function_parameters) [16264 16267]))                          )
                        (reparse-symbol indented_block_body) [16238 16416])
                    ("useMathText" variable nil (reparse-symbol indented_block_body) [16421 16487])
                    ("fix_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16507 16511])
                            ("s" variable nil (reparse-symbol function_parameters) [16513 16514]))                          
                        :documentation "
        Replace hyphens with a unicode minus.
        ")
                        (reparse-symbol indented_block_body) [16493 16748])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16766 16770])
                            ("x" variable nil (reparse-symbol function_parameters) [16772 16773])
                            ("pos" variable nil (reparse-symbol function_parameters) [16775 16778]))                          
                        :documentation "
        Return the format for tick value `x` at position `pos`.
        ")
                        (reparse-symbol indented_block_body) [16753 17014])
                    ("set_scientific" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17038 17042])
                            ("b" variable nil (reparse-symbol function_parameters) [17044 17045]))                          
                        :documentation "
        Turn scientific notation on or off.

        .. seealso:: Method :meth:`set_powerlimits`
        ")
                        (reparse-symbol indented_block_body) [17019 17204])
                    ("set_powerlimits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17229 17233])
                            ("lims" variable nil (reparse-symbol function_parameters) [17235 17239]))                          
                        :documentation "
        Sets size thresholds for scientific notation.

        ``lims`` is a two-element sequence containing the powers of 10
        that determine the switchover threshold. Numbers below
        ``10**lims[0]`` and above ``10**lims[1]`` will be displayed in
        scientific notation.

        For example, ``formatter.set_powerlimits((-3, 4))`` sets the
        pre-2007 default in which scientific notation is used for
        numbers less than 1e-3 or greater than 1e4.

        .. seealso:: Method :meth:`set_scientific`
        ")
                        (reparse-symbol indented_block_body) [17209 17925])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17952 17956])
                            ("value" variable nil (reparse-symbol function_parameters) [17958 17963]))                          
                        :documentation "
        Return a short formatted string representation of a number.
        ")
                        (reparse-symbol indented_block_body) [17930 18194])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18215 18219])
                            ("value" variable nil (reparse-symbol function_parameters) [18221 18226]))                          
                        :documentation "
        Return a formatted string representation of a number.
        ")
                        (reparse-symbol indented_block_body) [18199 18519])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18539 18543]))                          
                        :documentation "
        Return scientific notation, plus offset.
        ")
                        (reparse-symbol indented_block_body) [18524 19721])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19739 19743])
                            ("locs" variable nil (reparse-symbol function_parameters) [19745 19749]))                          
                        :documentation "
        Set the locations of the ticks.
        ")
                        (reparse-symbol indented_block_body) [19726 20114])
                    ("_compute_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20139 20143]))                          )
                        (reparse-symbol indented_block_body) [20119 22118])
                    ("_set_orderOfMagnitude" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22149 22153])
                            ("range" variable nil (reparse-symbol function_parameters) [22155 22160]))                          )
                        (reparse-symbol indented_block_body) [22123 22989])
                    ("_set_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23010 23014])
                            ("vmin" variable nil (reparse-symbol function_parameters) [23016 23020])
                            ("vmax" variable nil (reparse-symbol function_parameters) [23022 23026]))                          )
                        (reparse-symbol indented_block_body) [22994 24382])
                    ("pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24402 24406])
                            ("x" variable nil (reparse-symbol function_parameters) [24408 24409]))                          )
                        (reparse-symbol indented_block_body) [24387 24663])
                    ("_formatSciNotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24691 24695])
                            ("s" variable nil (reparse-symbol function_parameters) [24697 24698]))                          )
                        (reparse-symbol indented_block_body) [24668 25841]))                  
                :type "class")
                nil [14022 25841])
            ("LogFormatter" type
               (:documentation "
    Base class for formatting ticks on a log or symlog scale.

    It may be instantiated directly, or subclassed.

    Parameters
    ----------
    base : float, optional, default: 10.
        Base of the logarithm used in all calculations.

    labelOnlyBase : bool, optional, default: False
        If True, label ticks only at integer powers of base.
        This is normally True for major ticks and False for
        minor ticks.

    minor_thresholds : (subset, all), optional, default: (1, 0.4)
        If labelOnlyBase is False, these two numbers control
        the labeling of ticks that are not at integer powers of
        base; normally these are the minor ticks. The controlling
        parameter is the log of the axis data range.  In the typical
        case where base is 10 it is the number of decades spanned
        by the axis, so we can call it 'numdec'. If ``numdec <= all``,
        all minor ticks will be labeled.  If ``all < numdec <= subset``,
        then only a subset of minor ticks will be labeled, so as to
        avoid crowding. If ``numdec > subset`` then no minor ticks will
        be labeled.

    linthresh : None or float, optional, default: None
        If a symmetric log scale is in use, its ``linthresh``
        parameter must be supplied here.

    Notes
    -----
    The `set_locs` method must be called to enable the subsetting
    logic controlled by the ``minor_thresholds`` parameter.

    In some cases such as the colorbar, there is no distinction between
    major and minor ticks; the tick locations might be set manually,
    or by a locator that puts ticks at integer powers of base and
    at intermediate locations.  For this situation, disable the
    minor_thresholds logic by using ``minor_thresholds=(np.inf, np.inf)``,
    so that all ticks will be labeled.

    To disable labeling of minor ticks when 'labelOnlyBase' is False,
    use ``minor_thresholds=(0, 0)``.  This is the default for the
    \"classic\" style.

    Examples
    --------
    To label a subset of minor ticks when the view limits span up
    to 2 decades, and all of the ticks when zoomed in to 0.5 decades
    or less, use ``minor_thresholds=(2, 0.5)``.

    To label all minor ticks when the view limits span up to 1.5
    decades, use ``minor_thresholds=(1.5, 1.5)``.

    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [28339 28363])
                            ("self" variable nil (reparse-symbol indented_block_body) [28372 28406])
                            ("if" code nil (reparse-symbol indented_block_body) [28415 28599])
                            ("self" variable nil (reparse-symbol indented_block_body) [28607 28647])
                            ("self" variable nil (reparse-symbol indented_block_body) [28656 28678])
                            ("self" variable nil (reparse-symbol indented_block_body) [28687 28714]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28218 28222])
                            ("base" variable nil (reparse-symbol function_parameters) [28224 28228])
                            ("labelOnlyBase" variable nil (reparse-symbol function_parameters) [28235 28248])
                            ("minor_thresholds" variable nil (reparse-symbol function_parameters) [28273 28289])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [28313 28322]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28205 28715])
                    ("base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28729 28733])
                            ("base" variable nil (reparse-symbol function_parameters) [28735 28739]))                          
                        :documentation "
        change the `base` for labeling.

        .. warning::
           Should always match the base used for :class:`LogLocator`

        ")
                        (reparse-symbol indented_block_body) [28720 28924])
                    ("label_minor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28945 28949])
                            ("labelOnlyBase" variable nil (reparse-symbol function_parameters) [28951 28964]))                          
                        :documentation "
        Switch minor tick labeling on or off.

        Parameters
        ----------
        labelOnlyBase : bool
            If True, label ticks only at integer powers of base.

        ")
                        (reparse-symbol indented_block_body) [28929 29214])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29232 29236])
                            ("locs" variable nil (reparse-symbol function_parameters) [29238 29242]))                          
                        :documentation "
        Use axis view limits to control which ticks are labeled.

        The ``locs`` parameter is ignored in the present algorithm.

        ")
                        (reparse-symbol indented_block_body) [29219 31409])
                    ("_num_to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31433 31437])
                            ("x" variable nil (reparse-symbol function_parameters) [31439 31440])
                            ("vmin" variable nil (reparse-symbol function_parameters) [31442 31446])
                            ("vmax" variable nil (reparse-symbol function_parameters) [31448 31452]))                          )
                        (reparse-symbol indented_block_body) [31414 31632])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31650 31654])
                            ("x" variable nil (reparse-symbol function_parameters) [31656 31657])
                            ("pos" variable nil (reparse-symbol function_parameters) [31659 31662]))                          
                        :documentation "
        Return the format for tick val `x`.
        ")
                        (reparse-symbol indented_block_body) [31637 32431])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32452 32456])
                            ("value" variable nil (reparse-symbol function_parameters) [32458 32463]))                          )
                        (reparse-symbol indented_block_body) [32436 32639])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32666 32670])
                            ("value" variable nil (reparse-symbol function_parameters) [32672 32677]))                          
                        :documentation "
        Return a short formatted string representation of a number.
        ")
                        (reparse-symbol indented_block_body) [32644 32803])
                    ("pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32823 32827])
                            ("x" variable nil (reparse-symbol function_parameters) [32829 32830])
                            ("d" variable nil (reparse-symbol function_parameters) [32832 32833]))                          )
                        (reparse-symbol indented_block_body) [32808 33626]))                  
                :type "class")
                nil [25843 33626])
            ("LogFormatterExponent" type
               (:documentation "
    Format values for log axis using ``exponent = log_base(value)``.
    "
                :superclasses ("LogFormatter")
                :members 
                  ( ("_num_to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33778 33782])
                            ("x" variable nil (reparse-symbol function_parameters) [33784 33785])
                            ("vmin" variable nil (reparse-symbol function_parameters) [33787 33791])
                            ("vmax" variable nil (reparse-symbol function_parameters) [33793 33797]))                          )
                        (reparse-symbol indented_block_body) [33759 34093]))                  
                :type "class")
                nil [33628 34093])
            ("LogFormatterMathtext" type
               (:documentation "
    Format values for log axis using ``exponent = log_base(value)``.
    "
                :superclasses ("LogFormatter")
                :members 
                  ( ("_non_decade_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34250 34254])
                            ("sign_string" variable nil (reparse-symbol function_parameters) [34256 34267])
                            ("base" variable nil (reparse-symbol function_parameters) [34269 34273])
                            ("fx" variable nil (reparse-symbol function_parameters) [34275 34277])
                            ("usetex" variable nil (reparse-symbol function_parameters) [34279 34285]))                          )
                        (reparse-symbol indented_block_body) [34227 34560])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34578 34582])
                            ("x" variable nil (reparse-symbol function_parameters) [34584 34585])
                            ("pos" variable nil (reparse-symbol function_parameters) [34587 34590]))                          
                        :documentation "
        Return the format for tick value `x`.

        The position `pos` is ignored.
        ")
                        (reparse-symbol indented_block_body) [34565 36367]))                  
                :type "class")
                nil [34095 36367])
            ("LogFormatterSciNotation" type
               (:documentation "
    Format values following scientific notation in a logarithmic axis
    "
                :superclasses ("LogFormatterMathtext")
                :members 
                  ( ("_non_decade_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36536 36540])
                            ("sign_string" variable nil (reparse-symbol function_parameters) [36542 36553])
                            ("base" variable nil (reparse-symbol function_parameters) [36555 36559])
                            ("fx" variable nil (reparse-symbol function_parameters) [36561 36563])
                            ("usetex" variable nil (reparse-symbol function_parameters) [36565 36571]))                          )
                        (reparse-symbol indented_block_body) [36513 37098]))                  
                :type "class")
                nil [36369 37098])
            ("LogitFormatter" type
               (:documentation "
    Probability formatter (using Math text).
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37211 37215])
                            ("x" variable nil (reparse-symbol function_parameters) [37217 37218])
                            ("pos" variable nil (reparse-symbol function_parameters) [37220 37223]))                          )
                        (reparse-symbol indented_block_body) [37198 37679])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37706 37710])
                            ("value" variable nil (reparse-symbol function_parameters) [37712 37717]))                          )
                        (reparse-symbol indented_block_body) [37684 37820]))                  
                :type "class")
                nil [37100 37820])
            ("EngFormatter" type
               (:documentation "
    Formats axis values using engineering prefixes to represent powers
    of 1000, plus a specified unit, e.g., 10 MHz instead of 1e7.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("ENG_PREFIXES" variable nil (reparse-symbol indented_block_body) [38044 38394])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        unit : str (default: \"\")
            Unit symbol to use, suitable for use with single-letter
            representations of powers of 1000. For example, 'Hz' or 'm'.

        places : int (default: None)
            Precision with which to display the number, specified in
            digits after the decimal point (there will be between one
            and three digits before the decimal point). If it is None,
            the formatting falls back to the floating point format '%g',
            which displays up to 6 *significant* digits, i.e. the equivalent
            value for *places* varies between 0 and 5 (inclusive).

        sep : str (default: \" \")
            Separator used between the value and the prefix/unit. For
            example, one get '3.14 mV' if ``sep`` is \" \" (default) and
            '3.14mV' if ``sep`` is \"\". Besides the default behavior, some
            other useful options may be:

            * ``sep=\"\"`` to append directly the prefix/unit to the value;
            * ``sep=\"\\\\N{THIN SPACE}\"`` (``U+2009``);
            * ``sep=\"\\\\N{NARROW NO-BREAK SPACE}\"`` (``U+202F``);
            * ``sep=\"\\\\N{NO-BREAK SPACE}\"`` (``U+00A0``).
        \"\"\"" code nil (reparse-symbol indented_block_body) [38459 39693])
                            ("self" variable nil (reparse-symbol indented_block_body) [39702 39718])
                            ("self" variable nil (reparse-symbol indented_block_body) [39727 39747])
                            ("self" variable nil (reparse-symbol indented_block_body) [39756 39770]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38413 38417])
                            ("unit" variable nil (reparse-symbol function_parameters) [38419 38423])
                            ("places" variable nil (reparse-symbol function_parameters) [38428 38434])
                            ("sep" variable nil (reparse-symbol function_parameters) [38441 38444]))                          
                        :documentation "
        Parameters
        ----------
        unit : str (default: \"\")
            Unit symbol to use, suitable for use with single-letter
            representations of powers of 1000. For example, 'Hz' or 'm'.

        places : int (default: None)
            Precision with which to display the number, specified in
            digits after the decimal point (there will be between one
            and three digits before the decimal point). If it is None,
            the formatting falls back to the floating point format '%g',
            which displays up to 6 *significant* digits, i.e. the equivalent
            value for *places* varies between 0 and 5 (inclusive).

        sep : str (default: \" \")
            Separator used between the value and the prefix/unit. For
            example, one get '3.14 mV' if ``sep`` is \" \" (default) and
            '3.14mV' if ``sep`` is \"\". Besides the default behavior, some
            other useful options may be:

            * ``sep=\"\"`` to append directly the prefix/unit to the value;
            * ``sep=\"\\\\N{THIN SPACE}\"`` (``U+2009``);
            * ``sep=\"\\\\N{NARROW NO-BREAK SPACE}\"`` (``U+202F``);
            * ``sep=\"\\\\N{NO-BREAK SPACE}\"`` (``U+00A0``).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38400 39771])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39789 39793])
                            ("x" variable nil (reparse-symbol function_parameters) [39795 39796])
                            ("pos" variable nil (reparse-symbol function_parameters) [39798 39801]))                          )
                        (reparse-symbol indented_block_body) [39776 40063])
                    ("format_eng" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40083 40087])
                            ("num" variable nil (reparse-symbol function_parameters) [40089 40092]))                          
                        :documentation "
        Formats a number in engineering notation, appending a letter
        representing the power of 1000 of the original number.
        Some examples:

        >>> format_eng(0)       # for self.places = 0
        '0'

        >>> format_eng(1000000) # for self.places = 1
        '1.0 M'

        >>> format_eng(\"-1e-6\") # for self.places = 2
        u'-1.00 \\N{GREEK SMALL LETTER MU}'

        `num` may be a numeric value or a string that can be converted
        to a numeric value with ``float(num)``.
        ")
                        (reparse-symbol indented_block_body) [40068 42094]))                  
                :type "class")
                nil [37822 42094])
            ("PercentFormatter" type
               (:documentation "
    Format numbers as a percentage.

    How the number is converted into a percentage is determined by the
    `xmax` parameter. `xmax` is the data value that corresponds to 100%.
    Percentages are computed as ``x / xmax * 100``. So if the data is
    already scaled to be percentages, `xmax` will be 100. Another common
    situation is where `xmax` is 1.0.

    `symbol` is a string which will be appended to the label. It may be
    `None` or empty to indicate that no symbol should be used. LaTeX
    special characters are escaped in `symbol` whenever latex mode is
    enabled, unless `is_latex` is `True`.

    `decimals` is the number of decimal places to place after the point.
    If it is set to `None` (the default), the number will be computed
    automatically.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [43011 43033])
                            ("self" variable nil (reparse-symbol indented_block_body) [43042 43066])
                            ("self" variable nil (reparse-symbol indented_block_body) [43075 43096])
                            ("self" variable nil (reparse-symbol indented_block_body) [43105 43130]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42943 42947])
                            ("xmax" variable nil (reparse-symbol function_parameters) [42949 42953])
                            ("decimals" variable nil (reparse-symbol function_parameters) [42959 42967])
                            ("symbol" variable nil (reparse-symbol function_parameters) [42974 42980])
                            ("is_latex" variable nil (reparse-symbol function_parameters) [42986 42994]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42930 43131])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43149 43153])
                            ("x" variable nil (reparse-symbol function_parameters) [43155 43156])
                            ("pos" variable nil (reparse-symbol function_parameters) [43158 43161]))                          
                        :documentation "
        Formats the tick as a percentage with the appropriate scaling.
        ")
                        (reparse-symbol indented_block_body) [43136 43430])
                    ("format_pct" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43450 43454])
                            ("x" variable nil (reparse-symbol function_parameters) [43456 43457])
                            ("display_range" variable nil (reparse-symbol function_parameters) [43459 43472]))                          
                        :documentation "
        Formats the number as a percentage number with the correct
        number of decimals and adds the percent symbol, if any.

        If `self.decimals` is `None`, the number of digits after the
        decimal point is set based on the `display_range` of the axis
        as follows:

        +---------------+----------+------------------------+
        | display_range | decimals |          sample        |
        +---------------+----------+------------------------+
        | >50           |     0    | ``x = 34.5`` => 35%    |
        +---------------+----------+------------------------+
        | >5            |     1    | ``x = 34.5`` => 34.5%  |
        +---------------+----------+------------------------+
        | >0.5          |     2    | ``x = 34.5`` => 34.50% |
        +---------------+----------+------------------------+
        |      ...      |    ...   |          ...           |
        +---------------+----------+------------------------+

        This method will not be very good for tiny axis ranges or
        extremely large ones. It assumes that the values on the chart
        are percentages displayed on a reasonable scale.
        ")
                        (reparse-symbol indented_block_body) [43435 45617])
                    ("convert_to_pct" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45641 45645])
                            ("x" variable nil (reparse-symbol function_parameters) [45647 45648]))                          )
                        (reparse-symbol indented_block_body) [45622 45690])
                    ("symbol" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45720 45724]))                          
                        :documentation "
        The configured percent symbol as a string.

        If LaTeX is enabled via :rc:`text.usetex`, the special characters
        ``{'#', '$', '%', '&', '~', '_', '^', '\\\\', '{', '}'}`` are
        automatically escaped in the string.
        ")
                        (reparse-symbol indented_block_body) [45695 86247]))                  
                :type "class")
                nil [42096 86247]))          
      :file "ticker.py"
      :pointmax 86247
      :fsize 86246
      :lastmodtime '(23240 23001 117461 0)
      :unmatched-syntax '((NEWLINE 84491 . 84492) (COLON 84490 . 84491) (RPAREN 84489 . 84490) (DEDENT 84461 . 84461) (CLASS 84461 . 84466) (LPAREN 84481 . 84482) (NEWLINE 82422 . 82423) (COLON 82421 . 82422) (RPAREN 82420 . 82421) (DEDENT 82390 . 82390) (CLASS 82390 . 82395) (LPAREN 82412 . 82413) (NEWLINE 81759 . 81760) (COLON 81758 . 81759) (RPAREN 81757 . 81758) (DEDENT 81728 . 81728) (CLASS 81728 . 81733) (LPAREN 81745 . 81746) (NEWLINE 78543 . 78544) (COLON 78542 . 78543) (RPAREN 78541 . 78542) (DEDENT 78515 . 78515) (CLASS 78515 . 78520) (LPAREN 78533 . 78534) (NEWLINE 73108 . 73109) (COLON 73107 . 73108) (RPAREN 73106 . 73107) (DEDENT 73071 . 73071) (CLASS 73071 . 73076) (LPAREN 73098 . 73099) (NAME 70174 . 70180) (IF 70187 . 70189) (ELSE 70211 . 70215) (NEWLINE 66434 . 66435) (COLON 66433 . 66434) (RPAREN 66432 . 66433) (DEDENT 66408 . 66408) (CLASS 66408 . 66413) (LPAREN 66424 . 66425) (NEWLINE 66313 . 66314) (COLON 66312 . 66313) (RPAREN 66311 . 66312) (DEDENT 66290 . 66290) (DEF 66290 . 66293) (LPAREN 66309 . 66310) (NEWLINE 66129 . 66130) (COLON 66128 . 66129) (RPAREN 66127 . 66128) (DEDENT 66103 . 66103) (DEF 66103 . 66106) (LPAREN 66116 . 66117) (NEWLINE 65978 . 65979) (COLON 65977 . 65978) (RPAREN 65976 . 65977) (DEDENT 65958 . 65958) (DEF 65958 . 65961) (LPAREN 65974 . 65975) (NEWLINE 65811 . 65812) (COLON 65810 . 65811) (RPAREN 65809 . 65810) (DEDENT 65785 . 65785) (DEF 65785 . 65788) (LPAREN 65798 . 65799) (NEWLINE 65636 . 65637) (COLON 65635 . 65636) (RPAREN 65634 . 65635) (DEDENT 65608 . 65608) (DEF 65608 . 65611) (LPAREN 65623 . 65624) (NEWLINE 58083 . 58084) (COLON 58082 . 58083) (RPAREN 58081 . 58082) (DEDENT 58056 . 58056) (CLASS 58056 . 58061) (LPAREN 58073 . 58074) (NEWLINE 57748 . 57749) (COLON 57747 . 57748) (RPAREN 57746 . 57747) (DEDENT 57700 . 57700) (DEF 57700 . 57703) (LPAREN 57715 . 57716) (NEWLINE 56418 . 56419) (COLON 56417 . 56418) (RPAREN 56416 . 56417) (DEDENT 56387 . 56387) (CLASS 56387 . 56392) (LPAREN 56408 . 56409) (NEWLINE 55073 . 55074) (COLON 55072 . 55073) (RPAREN 55071 . 55072) (DEDENT 55054 . 55054) (CLASS 55054 . 55059) (LPAREN 55064 . 55065) (NEWLINE 54973 . 54974) (COLON 54972 . 54973) (RPAREN 54971 . 54972) (DEDENT 54955 . 54955) (DEF 54955 . 54958) (LPAREN 54966 . 54967) (NEWLINE 52721 . 52722) (COLON 52720 . 52721) (RPAREN 52719 . 52720) (DEDENT 52692 . 52692) (CLASS 52692 . 52697) (LPAREN 52711 . 52712) (NEWLINE 52349 . 52350) (COLON 52348 . 52349) (RPAREN 52347 . 52348) (DEDENT 52322 . 52322) (CLASS 52322 . 52327) (LPAREN 52339 . 52340) (NEWLINE 50945 . 50946) (COLON 50944 . 50945) (RPAREN 50943 . 50944) (DEDENT 50917 . 50917) (CLASS 50917 . 50922) (LPAREN 50935 . 50936) (NEWLINE 49970 . 49971) (COLON 49969 . 49970) (RPAREN 49968 . 49969) (DEDENT 49942 . 49942) (CLASS 49942 . 49947) (LPAREN 49960 . 49961) (NEWLINE 46533 . 46534) (COLON 46532 . 46533) (RPAREN 46531 . 46532) (DEDENT 46507 . 46507) (CLASS 46507 . 46512) (LPAREN 46520 . 46521) (NAME 40933 . 40936) (IF 40943 . 40945) (ELSE 40966 . 40970) (NAME 35166 . 35174) (IF 35190 . 35192) (ELSE 35205 . 35209) (NAME 34966 . 34977) (IF 34984 . 34986) (ELSE 34993 . 34997) (NAME 31957 . 31965) (IF 31981 . 31983) (ELSE 31996 . 32000)))
    (semanticdb-table "semanticdb-table-155ffd8"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
matplotlib includes a framework for arbitrary geometric
transformations that is used determine the final position of all
elements drawn on the canvas.

Transforms are composed into trees of :class:`TransformNode` objects
whose actual value depends on their children.  When the contents of
children change, their parents are automatically invalidated.  The
next time an invalidated transform is accessed, it is recomputed to
reflect those changes.  This invalidation/caching approach prevents
unnecessary recomputations of transforms, and contributes to better
interactive performance.

For example, here is a graph of the transform tree used to plot data
to the graph:

.. image:: ../_static/transforms.png

The framework can be used for both affine and non-affine
transformations.  However, for speed, we want use the backend
renderers to perform affine transformations whenever possible.
Therefore, it is possible to perform just the affine or non-affine
part of a transformation on a set of data.  The affine is always
assumed to occur after the non-affine.  For any transform::

  full transform == non-affine part + affine part

The backends are not expected to handle non-affine transformations
themselves.
\"\"\"" code nil nil [1 1221])
            ("" code nil nil [1472 1557])
            ("six" include nil nil [1559 1569])
            ("numpy" include nil nil [1571 1589])
            ("" code nil nil [1619 1693])
            ("numpy.linalg" include nil nil [1694 1722])
            ("re" include nil nil [1724 1733])
            ("weakref" include nil nil [1734 1748])
            ("warnings" include nil nil [1749 1764])
            ("cbook" include nil nil [1773 1785])
            ("Path" include nil nil [1797 1808])
            ("DEBUG" variable nil nil [1810 1823])
            ("_indent_str" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [1842 1845]))              ) nil [1826 1937])
            ("TransformNode" type
               (:documentation "
    :class:`TransformNode` is the base class for anything that
    participates in the transform tree and needs to invalidate its
    parents or be invalidated.  This includes classes that are not
    really transforms, such as bounding boxes, since some transforms
    depend on bounding boxes to compute their values.
    "
                :superclasses ("object")
                :members 
                  ( ("_gid" variable nil (reparse-symbol indented_block_body) [2308 2316])
                    ("INVALID_NON_AFFINE" variable nil (reparse-symbol indented_block_body) [2476 2498])
                    ("INVALID_AFFINE" variable nil (reparse-symbol indented_block_body) [2503 2521])
                    ("INVALID" code nil (reparse-symbol indented_block_body) [2526 2571])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [2681 2698])
                    ("is_bbox" variable nil (reparse-symbol indented_block_body) [2703 2718])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [2724 2744])
                    ("\"\"\"
    If pass_through is True, all ancestors will always be
    invalidated, even if 'self' is already invalid.
    \"\"\"" code nil (reparse-symbol indented_block_body) [2749 2870])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Creates a new :class:`TransformNode`.

        Parameters
        ----------
        shorthand_name : str
            A string representing the \"name\" of the transform. The name carries
            no significance other than to improve the readability of
            ``str(transform)`` when DEBUG=True.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2925 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3278])
                            ("self" variable nil (reparse-symbol indented_block_body) [3396 3413])
                            ("self" code nil (reparse-symbol indented_block_body) [3422 3465]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2889 2893])
                            ("shorthand_name" variable nil (reparse-symbol function_parameters) [2895 2909]))                          
                        :documentation "
        Creates a new :class:`TransformNode`.

        Parameters
        ----------
        shorthand_name : str
            A string representing the \"name\" of the transform. The name carries
            no significance other than to improve the readability of
            ``str(transform)`` when DEBUG=True.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2876 3466])
                    ("if" code nil (reparse-symbol indented_block_body) [3471 3640])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3662 3666]))                          )
                        (reparse-symbol indented_block_body) [3645 3902])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3924 3928])
                            ("data_dict" variable nil (reparse-symbol function_parameters) [3930 3939]))                          )
                        (reparse-symbol indented_block_body) [3907 4202])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4220 4224])
                            ("args" variable nil (reparse-symbol function_parameters) [4226 4231]))                          )
                        (reparse-symbol indented_block_body) [4207 4375])
                    ("__deepcopy__" variable nil (reparse-symbol indented_block_body) [4379 4402])
                    ("invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4423 4427]))                          
                        :documentation "
        Invalidate this :class:`TransformNode` and triggers an
        invalidation of its ancestors.  Should be called any
        time the transform changes.
        ")
                        (reparse-symbol indented_block_body) [4408 4782])
                    ("_invalidate_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4812 4816])
                            ("value" variable nil (reparse-symbol function_parameters) [4818 4823])
                            ("invalidating_node" variable nil (reparse-symbol function_parameters) [4825 4842]))                          
                        :documentation "
        Called by :meth:`invalidate` and subsequently ascends the transform
        stack calling each TransformNode's _invalidate_internal method.
        ")
                        (reparse-symbol indented_block_body) [4787 6063])
                    ("set_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6085 6089])
                            ("children" variable nil (reparse-symbol function_parameters) [6091 6100]))                          
                        :documentation "
        Set the children of the transform, to let the invalidation
        system know which transforms can invalidate this transform.
        Should be called from the constructor of any transforms that
        depend on other transforms.
        ")
                        (reparse-symbol indented_block_body) [6068 6614])
                    ("if" code nil (reparse-symbol indented_block_body) [6619 6843])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6859 6863]))                          
                        :documentation "
        Returns a frozen copy of this transform node.  The frozen copy
        will not update when its children change.  Useful for storing
        a previously known state of a transform where
        ``copy.deepcopy()`` might normally be used.
        ")
                        (reparse-symbol indented_block_body) [6848 7157])
                    ("if" code nil (reparse-symbol indented_block_body) [7162 9215]))                  
                :type "class")
                nil [1939 9215])
            ("BboxBase" type
               (:documentation "
    This is the base class of all bounding boxes, and provides
    read-only access to its data.  A mutable bounding box is provided
    by the :class:`Bbox` class.

    The canonical representation is as two points, with no
    restrictions on their ordering.  Convenience properties are
    provided to get the left, bottom, right and top edges and width
    and height, but these are not stored explicitly.
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("is_bbox" variable nil (reparse-symbol indented_block_body) [9678 9692])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [9697 9713])
                    ("if" code nil (reparse-symbol indented_block_body) [9719 10105])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10121 10125]))                          )
                        (reparse-symbol indented_block_body) [10110 10174])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [10178 10216])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10236 10240])
                            ("args" variable nil (reparse-symbol function_parameters) [10242 10247])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10249 10257]))                          )
                        (reparse-symbol indented_block_body) [10222 10293])
                    ("is_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10310 10314]))                          
                        :documentation "
        Returns True if the :class:`Bbox` is the unit bounding box
        from (0, 0) to (1, 1).
        ")
                        (reparse-symbol indented_block_body) [10298 10508])
                    ("x0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10534 10538]))                          
                        :documentation "
        :attr:`x0` is the first of the pair of *x* coordinates that
        define the bounding box. :attr:`x0` is not guaranteed to be less than
        :attr:`x1`.  If you require that, use :attr:`xmin`.
        ")
                        (reparse-symbol indented_block_body) [10513 10810])
                    ("y0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10836 10840]))                          
                        :documentation "
        :attr:`y0` is the first of the pair of *y* coordinates that
        define the bounding box. :attr:`y0` is not guaranteed to be less than
        :attr:`y1`.  If you require that, use :attr:`ymin`.
        ")
                        (reparse-symbol indented_block_body) [10815 11112])
                    ("x1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11138 11142]))                          
                        :documentation "
        :attr:`x1` is the second of the pair of *x* coordinates that
        define the bounding box. :attr:`x1` is not guaranteed to be greater
        than :attr:`x0`.  If you require that, use :attr:`xmax`.
        ")
                        (reparse-symbol indented_block_body) [11117 11418])
                    ("y1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11444 11448]))                          
                        :documentation "
        :attr:`y1` is the second of the pair of *y* coordinates that
        define the bounding box. :attr:`y1` is not guaranteed to be greater
        than :attr:`y0`.  If you require that, use :attr:`ymax`.
        ")
                        (reparse-symbol indented_block_body) [11423 11724])
                    ("p0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11750 11754]))                          
                        :documentation "
        :attr:`p0` is the first pair of (*x*, *y*) coordinates that
        define the bounding box.  It is not guaranteed to be the bottom-left
        corner.  For that, use :attr:`min`.
        ")
                        (reparse-symbol indented_block_body) [11729 12006])
                    ("p1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12032 12036]))                          
                        :documentation "
        :attr:`p1` is the second pair of (*x*, *y*) coordinates that
        define the bounding box.  It is not guaranteed to be the top-right
        corner.  For that, use :attr:`max`.
        ")
                        (reparse-symbol indented_block_body) [12011 12287])
                    ("xmin" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12315 12319]))                          
                        :documentation "
        :attr:`xmin` is the left edge of the bounding box.
        ")
                        (reparse-symbol indented_block_body) [12292 12452])
                    ("ymin" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12480 12484]))                          
                        :documentation "
        :attr:`ymin` is the bottom edge of the bounding box.
        ")
                        (reparse-symbol indented_block_body) [12457 12619])
                    ("xmax" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12647 12651]))                          
                        :documentation "
        :attr:`xmax` is the right edge of the bounding box.
        ")
                        (reparse-symbol indented_block_body) [12624 12785])
                    ("ymax" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12813 12817]))                          
                        :documentation "
        :attr:`ymax` is the top edge of the bounding box.
        ")
                        (reparse-symbol indented_block_body) [12790 12949])
                    ("min" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12976 12980]))                          
                        :documentation "
        :attr:`min` is the bottom-left corner of the bounding box.
        ")
                        (reparse-symbol indented_block_body) [12954 13123])
                    ("max" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13150 13154]))                          
                        :documentation "
        :attr:`max` is the top-right corner of the bounding box.
        ")
                        (reparse-symbol indented_block_body) [13128 13295])
                    ("intervalx" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13328 13332]))                          
                        :documentation "
        :attr:`intervalx` is the pair of *x* coordinates that define
        the bounding box. It is not guaranteed to be sorted from left to right.
        ")
                        (reparse-symbol indented_block_body) [13300 13547])
                    ("intervaly" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13580 13584]))                          
                        :documentation "
        :attr:`intervaly` is the pair of *y* coordinates that define
        the bounding box.  It is not guaranteed to be sorted from bottom to
        top.
        ")
                        (reparse-symbol indented_block_body) [13552 13808])
                    ("width" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13837 13841]))                          
                        :documentation "
        The width of the bounding box.  It may be negative if
        :attr:`x1` < :attr:`x0`.
        ")
                        (reparse-symbol indented_block_body) [13813 14041])
                    ("height" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14071 14075]))                          
                        :documentation "
        The height of the bounding box.  It may be negative if
        :attr:`y1` < :attr:`y0`.
        ")
                        (reparse-symbol indented_block_body) [14046 14276])
                    ("size" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14304 14308]))                          
                        :documentation "
        The width and height of the bounding box.  May be negative,
        in the same way as :attr:`width` and :attr:`height`.
        ")
                        (reparse-symbol indented_block_body) [14281 14536])
                    ("bounds" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14566 14570]))                          
                        :documentation "
        Returns (:attr:`x0`, :attr:`y0`, :attr:`width`,
        :attr:`height`).
        ")
                        (reparse-symbol indented_block_body) [14541 14773])
                    ("extents" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14804 14808]))                          
                        :documentation "
        Returns (:attr:`x0`, :attr:`y0`, :attr:`x1`,
        :attr:`y1`).
        ")
                        (reparse-symbol indented_block_body) [14778 14959])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14979 14983]))                          )
                        (reparse-symbol indented_block_body) [14964 15020])
                    ("containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15039 15043])
                            ("x" variable nil (reparse-symbol function_parameters) [15045 15046]))                          
                        :documentation "
        Returns whether *x* is in the closed (:attr:`x0`, :attr:`x1`) interval.
        ")
                        (reparse-symbol indented_block_body) [15025 15231])
                    ("containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15250 15254])
                            ("y" variable nil (reparse-symbol function_parameters) [15256 15257]))                          
                        :documentation "
        Returns whether *y* is in the closed (:attr:`y0`, :attr:`y1`) interval.
        ")
                        (reparse-symbol indented_block_body) [15236 15442])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15460 15464])
                            ("x" variable nil (reparse-symbol function_parameters) [15466 15467])
                            ("y" variable nil (reparse-symbol function_parameters) [15469 15470]))                          
                        :documentation "
        Returns whether ``(x, y)`` is in the bounding box or on its edge.
        ")
                        (reparse-symbol indented_block_body) [15447 15626])
                    ("overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15644 15648])
                            ("other" variable nil (reparse-symbol function_parameters) [15650 15655]))                          
                        :documentation "
        Returns whether this bounding box overlaps with the other bounding box.

        Parameters
        ----------
        other : BboxBase
        ")
                        (reparse-symbol indented_block_body) [15631 16198])
                    ("fully_containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16223 16227])
                            ("x" variable nil (reparse-symbol function_parameters) [16229 16230]))                          
                        :documentation "
        Returns whether *x* is in the open (:attr:`x0`, :attr:`x1`) interval.
        ")
                        (reparse-symbol indented_block_body) [16203 16409])
                    ("fully_containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16434 16438])
                            ("y" variable nil (reparse-symbol function_parameters) [16440 16441]))                          
                        :documentation "
        Returns whether *y* is in the open (:attr:`y0`, :attr:`y1`) interval.
        ")
                        (reparse-symbol indented_block_body) [16414 16620])
                    ("fully_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16644 16648])
                            ("x" variable nil (reparse-symbol function_parameters) [16650 16651])
                            ("y" variable nil (reparse-symbol function_parameters) [16653 16654]))                          
                        :documentation "
        Returns whether ``x, y`` is in the bounding box, but not on its edge.
        ")
                        (reparse-symbol indented_block_body) [16625 16826])
                    ("fully_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16850 16854])
                            ("other" variable nil (reparse-symbol function_parameters) [16856 16861]))                          
                        :documentation "
        Returns whether this bounding box overlaps with the other bounding box,
        not including the edges.

        Parameters
        ----------
        other : BboxBase
        ")
                        (reparse-symbol indented_block_body) [16831 17433])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17454 17458])
                            ("transform" variable nil (reparse-symbol function_parameters) [17460 17469]))                          
                        :documentation "
        Return a new :class:`Bbox` object, statically transformed by
        the given transform.
        ")
                        (reparse-symbol indented_block_body) [17438 17789])
                    ("inverse_transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17818 17822])
                            ("transform" variable nil (reparse-symbol function_parameters) [17824 17833]))                          
                        :documentation "
        Return a new :class:`Bbox` object, statically transformed by
        the inverse of the given transform.
        ")
                        (reparse-symbol indented_block_body) [17794 18027])
                    ("coefs" variable nil (reparse-symbol indented_block_body) [18032 18294])
                    ("anchored" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18313 18317])
                            ("c" variable nil (reparse-symbol function_parameters) [18319 18320])
                            ("container" variable nil (reparse-symbol function_parameters) [18322 18331]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shifted to position *c*
        within a container.

        Parameters
        ----------
        c :
            May be either:

            * A sequence (*cx*, *cy*) where *cx* and *cy* range from 0
              to 1, where 0 is left or bottom and 1 is right or top

            * a string:
              - 'C' for centered
              - 'S' for bottom-center
              - 'SE' for bottom-left
              - 'E' for left
              - etc.

        container : Bbox, optional
            The box within which the :class:`Bbox` is positioned; it defaults
            to the initial :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [18300 19388])
                    ("shrunk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19404 19408])
                            ("mx" variable nil (reparse-symbol function_parameters) [19410 19412])
                            ("my" variable nil (reparse-symbol function_parameters) [19414 19416]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shrunk by the factor *mx*
        in the *x* direction and the factor *my* in the *y* direction.
        The lower left corner of the box remains unchanged.  Normally
        *mx* and *my* will be less than 1, but this is not enforced.
        ")
                        (reparse-symbol indented_block_body) [19393 19843])
                    ("shrunk_to_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19869 19873])
                            ("box_aspect" variable nil (reparse-symbol function_parameters) [19875 19885])
                            ("container" variable nil (reparse-symbol function_parameters) [19887 19896])
                            ("fig_aspect" variable nil (reparse-symbol function_parameters) [19903 19913]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shrunk so that it is as
        large as it can be while having the desired aspect ratio,
        *box_aspect*.  If the box coordinates are relative---that
        is, fractions of a larger box such as a figure---then the
        physical aspect ratio of that figure is specified with
        *fig_aspect*, so that *box_aspect* can also be given as a
        ratio of the absolute dimensions, not the relative dimensions.
        ")
                        (reparse-symbol indented_block_body) [19848 20864])
                    ("splitx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20880 20884])
                            ("args" variable nil (reparse-symbol function_parameters) [20886 20891]))                          
                        :documentation "
        e.g., ``bbox.splitx(f1, f2, ...)``

        Returns a list of new :class:`Bbox` objects formed by
        splitting the original one with vertical lines at fractional
        positions *f1*, *f2*, ...
        ")
                        (reparse-symbol indented_block_body) [20869 21338])
                    ("splity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21354 21358])
                            ("args" variable nil (reparse-symbol function_parameters) [21360 21365]))                          
                        :documentation "
        e.g., ``bbox.splitx(f1, f2, ...)``

        Returns a list of new :class:`Bbox` objects formed by
        splitting the original one with horizontal lines at fractional
        positions *f1*, *f2*, ...
        ")
                        (reparse-symbol indented_block_body) [21343 21814])
                    ("count_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21838 21842])
                            ("vertices" variable nil (reparse-symbol function_parameters) [21844 21852]))                          
                        :documentation "
        Count the number of vertices contained in the :class:`Bbox`.
        Any vertices with a non-finite x or y value are ignored.

        Parameters
        ----------
        vertices : Nx2 Numpy array.
        ")
                        (reparse-symbol indented_block_body) [21819 22332])
                    ("count_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22356 22360])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [22362 22368]))                          
                        :documentation "
        Count the number of bounding boxes that overlap this one.

        Parameters
        ----------
        bboxes : sequence of :class:`BboxBase` objects
        ")
                        (reparse-symbol indented_block_body) [22337 22665])
                    ("expanded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22683 22687])
                            ("sw" variable nil (reparse-symbol function_parameters) [22689 22691])
                            ("sh" variable nil (reparse-symbol function_parameters) [22693 22695]))                          
                        :documentation "
        Return a new :class:`Bbox` which is this :class:`Bbox`
        expanded around its center by the given factors *sw* and
        *sh*.
        ")
                        (reparse-symbol indented_block_body) [22670 23109])
                    ("padded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23125 23129])
                            ("p" variable nil (reparse-symbol function_parameters) [23131 23132]))                          
                        :documentation "
        Return a new :class:`Bbox` that is padded on all four sides by
        the given value.
        ")
                        (reparse-symbol indented_block_body) [23114 23339])
                    ("translated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23359 23363])
                            ("tx" variable nil (reparse-symbol function_parameters) [23365 23367])
                            ("ty" variable nil (reparse-symbol function_parameters) [23369 23371]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, statically translated by
        *tx* and *ty*.
        ")
                        (reparse-symbol indented_block_body) [23344 23535])
                    ("corners" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23552 23556]))                          
                        :documentation "
        Return an array of points which are the four corners of this
        rectangle.  For example, if this :class:`Bbox` is defined by
        the points (*a*, *b*) and (*c*, *d*), :meth:`corners` returns
        (*a*, *b*), (*a*, *d*), (*c*, *b*) and (*c*, *d*).
        ")
                        (reparse-symbol indented_block_body) [23540 23957])
                    ("rotated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23974 23978])
                            ("radians" variable nil (reparse-symbol function_parameters) [23980 23987]))                          
                        :documentation "
        Return a new bounding box that bounds a rotated version of
        this bounding box by the given radians.  The new bounding box
        is still aligned with the axes, of course.
        ")
                        (reparse-symbol indented_block_body) [23962 24417])
                    ("union" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bboxes" variable nil (reparse-symbol function_parameters) [24450 24456]))                          
                        :documentation "
        Return a :class:`Bbox` that contains all of the given bboxes.
        ")
                        (reparse-symbol indented_block_body) [24422 24888])
                    ("intersection" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bbox1" variable nil (reparse-symbol function_parameters) [24928 24933])
                            ("bbox2" variable nil (reparse-symbol function_parameters) [24935 24940]))                          
                        :documentation "
        Return the intersection of the two bboxes or None
        if they do not intersect.
        ")
                        (reparse-symbol indented_block_body) [24893 25328]))                  
                :type "class")
                nil [9217 25328])
            ("Bbox" type
               (:documentation "
    A mutable bounding box.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        points : ndarray
            A 2x2 numpy array of the form ``[[x0, y0], [x1, y1]]``.

        Notes
        -----
        If you need to create a :class:`Bbox` object from another form
        of data, consider the static methods :meth:`unit`,
        :meth:`from_bounds` and :meth:`from_extents`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [25447 25806])
                            ("BboxBase" code nil (reparse-symbol indented_block_body) [25815 25848])
                            ("points" variable nil (reparse-symbol indented_block_body) [25857 25891])
                            ("if" code nil (reparse-symbol indented_block_body) [25900 26047])
                            ("self" variable nil (reparse-symbol indented_block_body) [26055 26076])
                            ("self" variable nil (reparse-symbol indented_block_body) [26085 26126])
                            ("self" variable nil (reparse-symbol indented_block_body) [26135 26154])
                            ("self" variable nil (reparse-symbol indented_block_body) [26334 26373]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25414 25418])
                            ("points" variable nil (reparse-symbol function_parameters) [25420 25426])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25428 25436]))                          
                        :documentation "
        Parameters
        ----------
        points : ndarray
            A 2x2 numpy array of the form ``[[x0, y0], [x1, y1]]``.

        Notes
        -----
        If you need to create a :class:`Bbox` object from another form
        of data, consider the static methods :meth:`unit`,
        :meth:`from_bounds` and :meth:`from_extents`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25401 26374])
                    ("if" code nil (reparse-symbol indented_block_body) [26378 26653])
                    ("unit" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Create a new unit :class:`Bbox` from (0, 0) to
        (1, 1).
        ")
                        (reparse-symbol indented_block_body) [26658 26861])
                    ("null" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Create a new null :class:`Bbox` from (inf, inf) to
        (-inf, -inf).
        ")
                        (reparse-symbol indented_block_body) [26866 27093])
                    ("from_bounds" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x0" variable nil (reparse-symbol function_parameters) [27132 27134])
                            ("y0" variable nil (reparse-symbol function_parameters) [27136 27138])
                            ("width" variable nil (reparse-symbol function_parameters) [27140 27145])
                            ("height" variable nil (reparse-symbol function_parameters) [27147 27153]))                          
                        :documentation "
        (staticmethod) Create a new :class:`Bbox` from *x0*, *y0*,
        *width* and *height*.

        *width* and *height* may be negative.
        ")
                        (reparse-symbol indented_block_body) [27098 27390])
                    ("from_extents" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [27430 27435]))                          
                        :documentation "
        (staticmethod) Create a new Bbox from *left*, *bottom*,
        *right* and *top*.

        The *y*-axis increases upwards.
        ")
                        (reparse-symbol indented_block_body) [27395 27681])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27701 27705])
                            ("fmt" variable nil (reparse-symbol function_parameters) [27707 27710]))                          )
                        (reparse-symbol indented_block_body) [27686 27841])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27858 27862]))                          )
                        (reparse-symbol indented_block_body) [27846 27897])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27915 27919]))                          )
                        (reparse-symbol indented_block_body) [27902 27995])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28011 28015])
                            ("value" variable nil (reparse-symbol function_parameters) [28017 28022]))                          
                        :documentation "
        Set whether the existing bounds of the box should be ignored
        by subsequent calls to :meth:`update_from_data_xy`.

        value : bool
           - When ``True``, subsequent calls to :meth:`update_from_data_xy`
             will ignore the existing bounds of the :class:`Bbox`.

           - When ``False``, subsequent calls to :meth:`update_from_data_xy`
             will include the existing bounds of the :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [28000 28518])
                    ("update_from_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28544 28548])
                            ("path" variable nil (reparse-symbol function_parameters) [28550 28554])
                            ("ignore" variable nil (reparse-symbol function_parameters) [28556 28562])
                            ("updatex" variable nil (reparse-symbol function_parameters) [28569 28576])
                            ("updatey" variable nil (reparse-symbol function_parameters) [28583 28590]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        Parameters
        ----------
        path : :class:`~matplotlib.path.Path`

        ignore : bool, optional
           - when ``True``, ignore the existing bounds of the :class:`Bbox`.
           - when ``False``, include the existing bounds of the :class:`Bbox`.
           - when ``None``, use the last value passed to :meth:`ignore`.

        updatex, updatey : bool, optional
            When ``True``, update the x/y values.
        ")
                        (reparse-symbol indented_block_body) [28523 29785])
                    ("update_from_data_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29814 29818])
                            ("xy" variable nil (reparse-symbol function_parameters) [29820 29822])
                            ("ignore" variable nil (reparse-symbol function_parameters) [29824 29830])
                            ("updatex" variable nil (reparse-symbol function_parameters) [29837 29844])
                            ("updatey" variable nil (reparse-symbol function_parameters) [29851 29858]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        Parameters
        ----------
        xy : ndarray
            A numpy array of 2D points.

        ignore : bool, optional
           - When ``True``, ignore the existing bounds of the :class:`Bbox`.
           - When ``False``, include the existing bounds of the :class:`Bbox`.
           - When ``None``, use the last value passed to :meth:`ignore`.

        updatex, updatey : bool, optional
            When ``True``, update the x/y values.
        ")
                        (reparse-symbol indented_block_body) [29790 30738])
                    ("x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30774 30778])
                            ("val" variable nil (reparse-symbol function_parameters) [30780 30783]))                          
                        :decorators 
                          ( ("BboxBase.x0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30743 30845])
                    ("y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30881 30885])
                            ("val" variable nil (reparse-symbol function_parameters) [30887 30890]))                          
                        :decorators 
                          ( ("BboxBase.y0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30850 30952])
                    ("x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30988 30992])
                            ("val" variable nil (reparse-symbol function_parameters) [30994 30997]))                          
                        :decorators 
                          ( ("BboxBase.x1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30957 31059])
                    ("y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31095 31099])
                            ("val" variable nil (reparse-symbol function_parameters) [31101 31104]))                          
                        :decorators 
                          ( ("BboxBase.y1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31064 31166])
                    ("p0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31202 31206])
                            ("val" variable nil (reparse-symbol function_parameters) [31208 31211]))                          
                        :decorators 
                          ( ("BboxBase.p0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31171 31270])
                    ("p1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31306 31310])
                            ("val" variable nil (reparse-symbol function_parameters) [31312 31315]))                          
                        :decorators 
                          ( ("BboxBase.p1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31275 31374])
                    ("intervalx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31424 31428])
                            ("interval" variable nil (reparse-symbol function_parameters) [31430 31438]))                          
                        :decorators 
                          ( ("BboxBase.intervalx.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31379 31505])
                    ("intervaly" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31555 31559])
                            ("interval" variable nil (reparse-symbol function_parameters) [31561 31569]))                          
                        :decorators 
                          ( ("BboxBase.intervaly.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31510 31636])
                    ("bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31680 31684])
                            ("bounds" variable nil (reparse-symbol function_parameters) [31686 31692]))                          
                        :decorators 
                          ( ("BboxBase.bounds.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31641 31889])
                    ("minpos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31919 31923]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31894 31954])
                    ("minposx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31985 31989]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31959 32023])
                    ("minposy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32054 32058]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32028 32092])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32112 32116]))                          
                        :documentation "
        Get the points of the bounding box directly as a numpy array
        of the form: ``[[x0, y0], [x1, y1]]``.
        ")
                        (reparse-symbol indented_block_body) [32097 32313])
                    ("set_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32333 32337])
                            ("points" variable nil (reparse-symbol function_parameters) [32339 32345]))                          
                        :documentation "
        Set the points of the bounding box directly from a numpy array
        of the form: ``[[x0, y0], [x1, y1]]``.  No error checking is
        performed, as this method is mainly for internal use.
        ")
                        (reparse-symbol indented_block_body) [32318 32681])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32694 32698])
                            ("other" variable nil (reparse-symbol function_parameters) [32700 32705]))                          
                        :documentation "
        Set this bounding box from the \"frozen\" bounds of another
        :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [32686 32952])
                    ("mutated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32969 32973]))                          )
                        (reparse-symbol indented_block_body) [32957 33084])
                    ("mutatedx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33102 33106]))                          )
                        (reparse-symbol indented_block_body) [33089 33300])
                    ("mutatedy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33318 33322]))                          )
                        (reparse-symbol indented_block_body) [33305 33516]))                  
                :type "class")
                nil [25330 33516])
            ("TransformedBbox" type
               (:documentation "
    A :class:`Bbox` that is automatically transformed by a given
    transform.  When either the child bounding box or transform
    changes, the bounds of this bbox will update accordingly.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        bbox : :class:`Bbox`

        transform : :class:`Transform`
        \"\"\"" code nil (reparse-symbol indented_block_body) [33817 33939])
                            ("if" code nil (reparse-symbol indented_block_body) [33948 34022])
                            ("if" code nil (reparse-symbol indented_block_body) [34030 34203])
                            ("if" code nil (reparse-symbol indented_block_body) [34211 34377])
                            ("BboxBase" code nil (reparse-symbol indented_block_body) [34386 34419])
                            ("self" variable nil (reparse-symbol indented_block_body) [34428 34445])
                            ("self" variable nil (reparse-symbol indented_block_body) [34454 34481])
                            ("self" code nil (reparse-symbol indented_block_body) [34490 34524])
                            ("self" variable nil (reparse-symbol indented_block_body) [34533 34552]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33775 33779])
                            ("bbox" variable nil (reparse-symbol function_parameters) [33781 33785])
                            ("transform" variable nil (reparse-symbol function_parameters) [33787 33796])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33798 33806]))                          
                        :documentation "
        Parameters
        ----------
        bbox : :class:`Bbox`

        transform : :class:`Transform`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33762 34553])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34570 34574]))                          )
                        (reparse-symbol indented_block_body) [34558 34804])
                    ("__repr__" variable nil (reparse-symbol indented_block_body) [34809 34827])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34848 34852]))                          )
                        (reparse-symbol indented_block_body) [34833 35740])
                    ("get_points" variable nil (reparse-symbol indented_block_body) [35744 35788])
                    ("if" code nil (reparse-symbol indented_block_body) [35794 35966]))                  
                :type "class")
                nil [33518 35966])
            ("LockableBbox" type
               (:documentation "
    A :class:`Bbox` where some elements may be locked at certain values.

    When the child bounding box changes, the bounds of this bbox will update
    accordingly with the exception of the locked elements.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        bbox : Bbox
            The child bounding box to wrap.

        x0 : float or None
            The locked value for x0, or None to leave unlocked.

        y0 : float or None
            The locked value for y0, or None to leave unlocked.

        x1 : float or None
            The locked value for x1, or None to leave unlocked.

        y1 : float or None
            The locked value for y1, or None to leave unlocked.

        \"\"\"" code nil (reparse-symbol indented_block_body) [36308 36794])
                            ("if" code nil (reparse-symbol indented_block_body) [36803 36877])
                            ("BboxBase" code nil (reparse-symbol indented_block_body) [36886 36919])
                            ("self" variable nil (reparse-symbol indented_block_body) [36928 36945])
                            ("self" code nil (reparse-symbol indented_block_body) [36954 36977])
                            ("self" variable nil (reparse-symbol indented_block_body) [36986 37005])
                            ("fp" variable nil (reparse-symbol indented_block_body) [37014 37035])
                            ("mask" variable nil (reparse-symbol indented_block_body) [37044 37078])
                            ("self" variable nil (reparse-symbol indented_block_body) [37087 37158]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36241 36245])
                            ("bbox" variable nil (reparse-symbol function_parameters) [36247 36251])
                            ("x0" variable nil (reparse-symbol function_parameters) [36253 36255])
                            ("y0" variable nil (reparse-symbol function_parameters) [36262 36264])
                            ("x1" variable nil (reparse-symbol function_parameters) [36271 36273])
                            ("y1" variable nil (reparse-symbol function_parameters) [36280 36282])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36289 36297]))                          
                        :documentation "
        Parameters
        ----------
        bbox : Bbox
            The child bounding box to wrap.

        x0 : float or None
            The locked value for x0, or None to leave unlocked.

        y0 : float or None
            The locked value for y0, or None to leave unlocked.

        x1 : float or None
            The locked value for x1, or None to leave unlocked.

        y1 : float or None
            The locked value for y1, or None to leave unlocked.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36228 37159])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37176 37180]))                          )
                        (reparse-symbol indented_block_body) [37164 37414])
                    ("__repr__" variable nil (reparse-symbol indented_block_body) [37419 37437])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37458 37462]))                          )
                        (reparse-symbol indented_block_body) [37443 37757])
                    ("get_points" variable nil (reparse-symbol indented_block_body) [37761 37805])
                    ("if" code nil (reparse-symbol indented_block_body) [37811 37983])
                    ("locked_x0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38016 38020]))                          
                        :documentation "
        float or None: The value used for the locked x0.
        ")
                        (reparse-symbol indented_block_body) [37988 38230])
                    ("locked_x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38271 38275])
                            ("x0" variable nil (reparse-symbol function_parameters) [38277 38279]))                          
                        :decorators 
                          ( ("locked_x0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38235 38404])
                    ("locked_y0" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38437 38441]))                          
                        :documentation "
        float or None: The value used for the locked y0.
        ")
                        (reparse-symbol indented_block_body) [38409 38651])
                    ("locked_y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38692 38696])
                            ("y0" variable nil (reparse-symbol function_parameters) [38698 38700]))                          
                        :decorators 
                          ( ("locked_y0.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38656 38825])
                    ("locked_x1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38858 38862]))                          
                        :documentation "
        float or None: The value used for the locked x1.
        ")
                        (reparse-symbol indented_block_body) [38830 39072])
                    ("locked_x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39113 39117])
                            ("x1" variable nil (reparse-symbol function_parameters) [39119 39121]))                          
                        :decorators 
                          ( ("locked_x1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39077 39246])
                    ("locked_y1" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39279 39283]))                          
                        :documentation "
        float or None: The value used for the locked y1.
        ")
                        (reparse-symbol indented_block_body) [39251 39493])
                    ("locked_y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39534 39538])
                            ("y1" variable nil (reparse-symbol function_parameters) [39540 39542]))                          
                        :decorators 
                          ( ("locked_y1.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39498 39667]))                  
                :type "class")
                nil [35968 39667])
            ("Transform" type
               (:documentation "
    The base class of all :class:`TransformNode` instances that
    actually perform a transformation.

    All non-affine transformations should be subclasses of this class.
    New affine transformations should be subclasses of
    :class:`Affine2D`.

    Subclasses of this class should override the following members (at
    minimum):

      - :attr:`input_dims`
      - :attr:`output_dims`
      - :meth:`transform`
      - :attr:`is_separable`
      - :attr:`has_inverse`
      - :meth:`inverted` (if :attr:`has_inverse` is True)

    If the transform needs to do something non-standard with
    :class:`matplotlib.path.Path` objects, such as adding curves
    where there were once line segments, it should override:

      - :meth:`transform_path`
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [40477 40494])
                    ("\"\"\"
    The number of input dimensions of this transform.
    Must be overridden (with integers) in the subclass.
    \"\"\"" code nil (reparse-symbol indented_block_body) [40499 40620])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [40626 40644])
                    ("\"\"\"
    The number of output dimensions of this transform.
    Must be overridden (with integers) in the subclass.
    \"\"\"" code nil (reparse-symbol indented_block_body) [40649 40771])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [40777 40796])
                    ("\"\"\"True if this transform has a corresponding inverse transform.\"\"\"" code nil (reparse-symbol indented_block_body) [40801 40868])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [40874 40894])
                    ("\"\"\"True if this transform is separable in the x- and y- dimensions.\"\"\"" code nil (reparse-symbol indented_block_body) [40899 40969])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40987 40991])
                            ("other" variable nil (reparse-symbol function_parameters) [40993 40998]))                          
                        :documentation "
        Composes two transforms together such that *self* is followed
        by *other*.
        ")
                        (reparse-symbol indented_block_body) [40975 41315])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41333 41337])
                            ("other" variable nil (reparse-symbol function_parameters) [41339 41344]))                          
                        :documentation "
        Composes two transforms together such that *self* is followed
        by *other*.
        ")
                        (reparse-symbol indented_block_body) [41320 41661])
                    ("if" code nil (reparse-symbol indented_block_body) [41856 41940])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41980 41984]))                          
                        :documentation "
        Returns an iterator breaking down this transform stack from left to
        right recursively. If self == ((A, N), A) then the result will be an
        iterator which yields I : ((A, N), A), followed by A : (N, A),
        followed by (A, N) : (A), but not ((A, N), A) : I.

        This is equivalent to flattening the stack then yielding
        ``flat_stack[:i], flat_stack[i:]`` where i=0..(n-1).

        ")
                        (reparse-symbol indented_block_body) [41945 42462])
                    ("depth" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42491 42495]))                          
                        :documentation "
        Returns the number of transforms which have been chained
        together to form this Transform instance.

        .. note::

            For the special case of a Composite transform, the maximum depth
            of the two is returned.

        ")
                        (reparse-symbol indented_block_body) [42467 42788])
                    ("contains_branch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42813 42817])
                            ("other" variable nil (reparse-symbol function_parameters) [42819 42824]))                          
                        :documentation "
        Return whether the given transform is a sub-tree of this transform.

        This routine uses transform equality to identify sub-trees, therefore
        in many situations it is object id which will be used.

        For the case where the given transform represents the whole
        of this transform, returns True.

        ")
                        (reparse-symbol indented_block_body) [42793 43462])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43498 43502])
                            ("other_transform" variable nil (reparse-symbol function_parameters) [43504 43519]))                          
                        :documentation "
        Returns whether the given branch is a sub-tree of this transform on
        each separate dimension.

        A common use for this method is to identify if a transform is a blended
        transform containing an axes' data transform. e.g.::

            x_isdata, y_isdata = trans.contains_branch_seperately(ax.transData)

        ")
                        (reparse-symbol indented_block_body) [43467 44236])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44253 44257])
                            ("other" variable nil (reparse-symbol function_parameters) [44259 44264]))                          
                        :documentation "
        Returns a transform stack which goes all the way down self's transform
        stack, and then ascends back up other's stack. If it can, this is
        optimised::

            # normally
            A - B == a + b.inverted()

            # sometimes, when A contains the tree B there is no need to
            # descend all the way down to the base of A (via B), instead we
            # can just stop at B.

            (A + B) - (B)^-1 == A

            # similarly, when B contains tree A, we can avoid decending A at
            # all, basically:
            A - (A + B) == ((B + A) - A).inverted() or B^-1

        For clarity, the result of ``(A + B) - B + B == (A + B)``.

        ")
                        (reparse-symbol indented_block_body) [44241 45999])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46018 46022])
                            ("args" variable nil (reparse-symbol function_parameters) [46024 46029])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [46031 46039]))                          
                        :documentation "
        Array interface to get at this Transform's affine matrix.
        ")
                        (reparse-symbol indented_block_body) [46004 46178])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46197 46201])
                            ("values" variable nil (reparse-symbol function_parameters) [46203 46209]))                          
                        :documentation "
        Performs the transformation on the given array of values.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).

        Alternatively, accepts a numpy array of length :attr:`input_dims`
        and returns a numpy array of length :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [46183 47350])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47376 47380])
                            ("values" variable nil (reparse-symbol function_parameters) [47382 47388]))                          
                        :documentation "
        Performs only the affine part of this transformation on the
        given array of values.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally a no-op.  In
        affine transformations, this is equivalent to
        ``transform(values)``.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).

        Alternatively, accepts a numpy array of length :attr:`input_dims`
        and returns a numpy array of length :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [47355 48111])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48141 48145])
                            ("values" variable nil (reparse-symbol function_parameters) [48147 48153]))                          
                        :documentation "
        Performs only the non-affine part of the transformation.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally equivalent to
        ``transform(values)``.  In affine transformations, this is
        always a no-op.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).

        Alternatively, accepts a numpy array of length :attr:`input_dims`
        and returns a numpy array of length :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [48116 48820])
                    ("transform_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48844 48848])
                            ("bbox" variable nil (reparse-symbol function_parameters) [48850 48854]))                          
                        :documentation "
        Transform the given bounding box.

        Note, for smarter transforms including caching (a common
        requirement for matplotlib figures), see :class:`TransformedBbox`.
        ")
                        (reparse-symbol indented_block_body) [48825 49119])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49139 49143]))                          
                        :documentation "
        Get the affine part of this transform.
        ")
                        (reparse-symbol indented_block_body) [49124 49252])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49272 49276]))                          
                        :documentation "
        Get the Affine transformation array for the affine part
        of this transform.

        ")
                        (reparse-symbol indented_block_body) [49257 49441])
                    ("transform_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49466 49470])
                            ("point" variable nil (reparse-symbol function_parameters) [49472 49477]))                          
                        :documentation "
        A convenience function that returns the transformed copy of a
        single point.

        The point is given as a sequence of length :attr:`input_dims`.
        The transformed point is returned as a sequence of length
        :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [49446 49939])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49963 49967])
                            ("path" variable nil (reparse-symbol function_parameters) [49969 49973]))                          
                        :documentation "
        Returns a transformed path.

        *path*: a :class:`~matplotlib.path.Path` instance.

        In some cases, this transform may insert curves into the path
        that began as line segments.
        ")
                        (reparse-symbol indented_block_body) [49944 50284])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50315 50319])
                            ("path" variable nil (reparse-symbol function_parameters) [50321 50325]))                          
                        :documentation "
        Returns a path, transformed only by the affine part of
        this transform.

        *path*: a :class:`~matplotlib.path.Path` instance.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [50289 50681])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50716 50720])
                            ("path" variable nil (reparse-symbol function_parameters) [50722 50726]))                          
                        :documentation "
        Returns a path, transformed only by the non-affine
        part of this transform.

        *path*: a :class:`~matplotlib.path.Path` instance.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [50686 51266])
                    ("transform_angles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51292 51296])
                            ("angles" variable nil (reparse-symbol function_parameters) [51298 51304])
                            ("pts" variable nil (reparse-symbol function_parameters) [51306 51309])
                            ("radians" variable nil (reparse-symbol function_parameters) [51311 51318])
                            ("pushoff" variable nil (reparse-symbol function_parameters) [51326 51333]))                          
                        :documentation "
        Performs transformation on a set of angles anchored at
        specific locations.

        The *angles* must be a column vector (i.e., numpy array).

        The *pts* must be a two-column numpy array of x,y positions
        (angle transforms currently only work in 2D).  This array must
        have the same number of rows as *angles*.

        *radians* indicates whether or not input angles are given in
         radians (True) or degrees (False; the default).

        *pushoff* is the distance to move away from *pts* for
         determining transformed angles (see discussion of method
         below).

        The transformed angles are returned in an array with the same
        size as *angles*.

        The generic version of this method uses a very generic
        algorithm that transforms *pts*, as well as locations very
        close to *pts*, to find the angle in the transformed system.
        ")
                        (reparse-symbol indented_block_body) [51271 53281])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53299 53303]))                          
                        :documentation "
        Return the corresponding inverse transformation.

        The return value of this method should be treated as
        temporary.  An update to *self* does not cause a corresponding
        update to its inverted copy.

        ``x === self.inverted().transform(self.transform(x))``
        ")
                        (reparse-symbol indented_block_body) [53286 53657])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53675 53679]))                          )
                        (reparse-symbol indented_block_body) [53662 53707]))                  
                :type "class")
                nil [39669 53707])
            ("TransformWrapper" type
               (:documentation "
    A helper class that holds a single child transform and acts
    equivalently to it.

    This is useful if a node of the transform tree must be replaced at
    run time with a transform of a different type.  This class allows
    that replacement to correctly trigger invalidation.

    Note that :class:`TransformWrapper` instances must have the same
    input and output dimensions during their entire lifetime, so the
    child transform may only be replaced with another child transform
    of the same dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [54287 54306])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *child*: A class:`Transform` instance.  This child may later
        be replaced with :meth:`set`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [54347 54469])
                            ("if" code nil (reparse-symbol indented_block_body) [54478 54643])
                            ("self" code nil (reparse-symbol indented_block_body) [54651 54668])
                            ("self" code nil (reparse-symbol indented_block_body) [54677 54701]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54325 54329])
                            ("child" variable nil (reparse-symbol function_parameters) [54331 54336]))                          
                        :documentation "
        *child*: A class:`Transform` instance.  This child may later
        be replaced with :meth:`set`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54312 54702])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54717 54721])
                            ("child" variable nil (reparse-symbol function_parameters) [54723 54728]))                          )
                        (reparse-symbol indented_block_body) [54707 54903])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54919 54923])
                            ("other" variable nil (reparse-symbol function_parameters) [54925 54930]))                          )
                        (reparse-symbol indented_block_body) [54908 54974])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55090 55094]))                          )
                        (reparse-symbol indented_block_body) [55073 55481])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55503 55507])
                            ("state" variable nil (reparse-symbol function_parameters) [55509 55514]))                          )
                        (reparse-symbol indented_block_body) [55486 56017])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56034 56038]))                          )
                        (reparse-symbol indented_block_body) [56022 56187])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56203 56207]))                          )
                        (reparse-symbol indented_block_body) [56192 56246])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [56250 56291])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56306 56310])
                            ("child" variable nil (reparse-symbol function_parameters) [56312 56317]))                          )
                        (reparse-symbol indented_block_body) [56297 56822])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57047 57051])
                            ("child" variable nil (reparse-symbol function_parameters) [57053 57058]))                          
                        :documentation "
        Replace the current child of this transform with another one.

        The new child must have the same number of input and output
        dimensions as the current child.
        ")
                        (reparse-symbol indented_block_body) [57039 57670])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57694 57698]))                          )
                        (reparse-symbol indented_block_body) [57675 57738])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [57742 57778])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57806 57810]))                          )
                        (reparse-symbol indented_block_body) [57784 57853])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [57857 57899])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57926 57930]))                          )
                        (reparse-symbol indented_block_body) [57905 57972])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [57976 58016]))                  
                :type "class")
                nil [53709 58017])
            ("AffineBase" type
               (:documentation "
    The base class of all affine transformations of any number of
    dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("is_affine" variable nil (reparse-symbol indented_block_body) [58150 58166])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [58217 58258])
                            ("self" variable nil (reparse-symbol indented_block_body) [58267 58288]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58185 58189])
                            ("args" variable nil (reparse-symbol function_parameters) [58191 58196])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58198 58206]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58172 58289])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58308 58312])
                            ("args" variable nil (reparse-symbol function_parameters) [58314 58319])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58321 58329]))                          )
                        (reparse-symbol indented_block_body) [58294 58438])
                    ("_concat" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [58473 58474])
                            ("b" variable nil (reparse-symbol function_parameters) [58476 58477]))                          
                        :documentation "
        Concatenates two transformation matrices (represented as numpy
        arrays) together.
        ")
                        (reparse-symbol indented_block_body) [58443 58629])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58645 58649])
                            ("other" variable nil (reparse-symbol function_parameters) [58651 58656]))                          )
                        (reparse-symbol indented_block_body) [58634 58803])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58822 58826])
                            ("values" variable nil (reparse-symbol function_parameters) [58828 58834]))                          )
                        (reparse-symbol indented_block_body) [58808 58882])
                    ("transform" variable nil (reparse-symbol indented_block_body) [58886 58933])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58960 58964])
                            ("values" variable nil (reparse-symbol function_parameters) [58966 58972]))                          )
                        (reparse-symbol indented_block_body) [58939 59096])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [59100 59161])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59192 59196])
                            ("points" variable nil (reparse-symbol function_parameters) [59198 59204]))                          )
                        (reparse-symbol indented_block_body) [59167 59229])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [59233 59302])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59327 59331])
                            ("path" variable nil (reparse-symbol function_parameters) [59333 59337]))                          )
                        (reparse-symbol indented_block_body) [59308 59388])
                    ("transform_path" variable nil (reparse-symbol indented_block_body) [59392 59449])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59481 59485])
                            ("path" variable nil (reparse-symbol function_parameters) [59487 59491]))                          )
                        (reparse-symbol indented_block_body) [59455 59611])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [59615 59686])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59722 59726])
                            ("path" variable nil (reparse-symbol function_parameters) [59728 59732]))                          )
                        (reparse-symbol indented_block_body) [59692 59755])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [59759 59838])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59859 59863]))                          )
                        (reparse-symbol indented_block_body) [59844 59886])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [59890 59939]))                  
                :type "class")
                nil [58019 59940])
            ("Affine2DBase" type
               (:documentation "
    The base class of all 2D affine transformations.

    2D affine transformations are performed using a 3x3 numpy array::

        a c e
        b d f
        0 0 1

    This class provides the read-only interface.  For a mutable 2D
    affine transformation, use :class:`Affine2D`.

    Subclasses of this class will generally only need to override a
    constructor and :meth:`get_matrix` that generates a custom 3x3 matrix.
    "
                :superclasses ("AffineBase")
                :members 
                  ( ("has_inverse" variable nil (reparse-symbol indented_block_body) [60423 60441])
                    ("input_dims" variable nil (reparse-symbol indented_block_body) [60447 60461])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [60466 60481])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60498 60502]))                          )
                        (reparse-symbol indented_block_body) [60487 60555])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [60559 60601])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60629 60633]))                          )
                        (reparse-symbol indented_block_body) [60607 60721])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [60725 60767])
                    ("to_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60787 60791]))                          
                        :documentation "
        Return the values of the matrix as a sequence (a,b,c,d,e,f)
        ")
                        (reparse-symbol indented_block_body) [60773 60973])
                    ("matrix_from_values" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [61019 61020])
                            ("b" variable nil (reparse-symbol function_parameters) [61022 61023])
                            ("c" variable nil (reparse-symbol function_parameters) [61025 61026])
                            ("d" variable nil (reparse-symbol function_parameters) [61028 61029])
                            ("e" variable nil (reparse-symbol function_parameters) [61031 61032])
                            ("f" variable nil (reparse-symbol function_parameters) [61034 61035]))                          
                        :documentation "
        (staticmethod) Create a new transformation matrix as a 3x3
        numpy array of the form::

          a c e
          b d f
          0 0 1
        ")
                        (reparse-symbol indented_block_body) [60978 61284])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61310 61314])
                            ("points" variable nil (reparse-symbol function_parameters) [61316 61322]))                          )
                        (reparse-symbol indented_block_body) [61289 61583])
                    ("transform_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61608 61612])
                            ("point" variable nil (reparse-symbol function_parameters) [61614 61619]))                          )
                        (reparse-symbol indented_block_body) [61588 61703])
                    ("transform_point" variable nil (reparse-symbol indented_block_body) [61707 61767])
                    ("if" code nil (reparse-symbol indented_block_body) [61773 62390])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [62394 62456])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62475 62479]))                          )
                        (reparse-symbol indented_block_body) [62462 62845])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [62849 62895]))                  
                :type "class")
                nil [59942 62896])
            ("Affine2D" type
               (:documentation "
    A mutable 2D affine transformation.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        \"\"\"" code nil (reparse-symbol indented_block_body) [63040 63244])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [63253 63290])
                            ("if" code nil (reparse-symbol indented_block_body) [63299 63417])
                            ("self" variable nil (reparse-symbol indented_block_body) [63425 63443])
                            ("self" variable nil (reparse-symbol indented_block_body) [63452 63469]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63002 63006])
                            ("matrix" variable nil (reparse-symbol function_parameters) [63008 63014])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [63021 63029]))                          
                        :documentation "
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [62989 63470])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63487 63491]))                          )
                        (reparse-symbol indented_block_body) [63475 63638])
                    ("from_values" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [63677 63678])
                            ("b" variable nil (reparse-symbol function_parameters) [63680 63681])
                            ("c" variable nil (reparse-symbol function_parameters) [63683 63684])
                            ("d" variable nil (reparse-symbol function_parameters) [63686 63687])
                            ("e" variable nil (reparse-symbol function_parameters) [63689 63690])
                            ("f" variable nil (reparse-symbol function_parameters) [63692 63693]))                          
                        :documentation "
        (staticmethod) Create a new Affine2D instance from the given
        values::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [63643 63971])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63991 63995]))                          
                        :documentation "
        Get the underlying transformation matrix as a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [63976 64205])
                    ("set_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64225 64229])
                            ("mtx" variable nil (reparse-symbol function_parameters) [64231 64234]))                          
                        :documentation "
        Set the underlying transformation matrix from a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [64210 64445])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64458 64462])
                            ("other" variable nil (reparse-symbol function_parameters) [64464 64469]))                          
                        :documentation "
        Set this transformation from the frozen copy of another
        :class:`Affine2DBase` object.
        ")
                        (reparse-symbol indented_block_body) [64450 64842])
                    ("identity" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Return a new :class:`Affine2D` object that is
        the identity transform.

        Unless this transform will be mutated later on, consider using
        the faster :class:`IdentityTransform` class instead.
        ")
                        (reparse-symbol indented_block_body) [64847 65165])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65180 65184]))                          
                        :documentation "
        Reset the underlying matrix to the identity transform.
        ")
                        (reparse-symbol indented_block_body) [65170 65414])
                    ("rotate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65430 65434])
                            ("theta" variable nil (reparse-symbol function_parameters) [65436 65441]))                          
                        :documentation "
        Add a rotation (in radians) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [65419 65963])
                    ("rotate_deg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65983 65987])
                            ("degrees" variable nil (reparse-symbol function_parameters) [65989 65996]))                          
                        :documentation "
        Add a rotation (in degrees) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [65968 66305])
                    ("rotate_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66328 66332])
                            ("x" variable nil (reparse-symbol function_parameters) [66334 66335])
                            ("y" variable nil (reparse-symbol function_parameters) [66337 66338])
                            ("theta" variable nil (reparse-symbol function_parameters) [66340 66345]))                          
                        :documentation "
        Add a rotation (in radians) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [66310 66680])
                    ("rotate_deg_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66707 66711])
                            ("x" variable nil (reparse-symbol function_parameters) [66713 66714])
                            ("y" variable nil (reparse-symbol function_parameters) [66716 66717])
                            ("degrees" variable nil (reparse-symbol function_parameters) [66719 66726]))                          
                        :documentation "
        Add a rotation (in degrees) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [66685 67165])
                    ("translate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67184 67188])
                            ("tx" variable nil (reparse-symbol function_parameters) [67190 67192])
                            ("ty" variable nil (reparse-symbol function_parameters) [67194 67196]))                          
                        :documentation "
        Adds a translation in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [67170 67633])
                    ("scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67648 67652])
                            ("sx" variable nil (reparse-symbol function_parameters) [67654 67656])
                            ("sy" variable nil (reparse-symbol function_parameters) [67658 67660]))                          
                        :documentation "
        Adds a scale in place.

        If *sy* is None, the same scale is applied in both the *x*- and
        *y*-directions.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [67638 68228])
                    ("skew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68242 68246])
                            ("xShear" variable nil (reparse-symbol function_parameters) [68248 68254])
                            ("yShear" variable nil (reparse-symbol function_parameters) [68256 68262]))                          
                        :documentation "
        Adds a skew in place.

        *xShear* and *yShear* are the shear angles along the *x*- and
        *y*-axes, respectively, in radians.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [68233 68861])
                    ("skew_deg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68879 68883])
                            ("xShear" variable nil (reparse-symbol function_parameters) [68885 68891])
                            ("yShear" variable nil (reparse-symbol function_parameters) [68893 68899]))                          
                        :documentation "
        Adds a skew in place.

        *xShear* and *yShear* are the shear angles along the *x*- and
        *y*-axes, respectively, in degrees.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [68866 69306])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69333 69337]))                          )
                        (reparse-symbol indented_block_body) [69311 69425])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [69429 69471]))                  
                :type "class")
                nil [62898 69472])
            ("IdentityTransform" type
               (:documentation "
    A special class that does one thing, the identity transform, in a
    fast way.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("_mtx" variable nil (reparse-symbol indented_block_body) [69617 69638])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69655 69659]))                          )
                        (reparse-symbol indented_block_body) [69644 69682])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [69686 69730])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69748 69752]))                          )
                        (reparse-symbol indented_block_body) [69736 69824])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69844 69848]))                          )
                        (reparse-symbol indented_block_body) [69829 69876])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [69880 69932])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69952 69956])
                            ("points" variable nil (reparse-symbol function_parameters) [69958 69964]))                          )
                        (reparse-symbol indented_block_body) [69938 70004])
                    ("transform" variable nil (reparse-symbol indented_block_body) [70008 70058])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [70064 70092])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [70097 70161])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [70167 70199])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [70204 70276])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70301 70305])
                            ("path" variable nil (reparse-symbol function_parameters) [70307 70311]))                          )
                        (reparse-symbol indented_block_body) [70282 70334])
                    ("transform_path" variable nil (reparse-symbol indented_block_body) [70338 70398])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [70404 70442])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [70447 70521])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [70527 70569])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [70574 70656])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70677 70681]))                          )
                        (reparse-symbol indented_block_body) [70662 70704])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [70708 70760])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [70766 70787])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [70792 70840]))                  
                :type "class")
                nil [69474 70841])
            ("BlendedGenericTransform" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This \"generic\" version can handle any given child transform in the
    *x*- and *y*-directions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [71123 71137])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [71142 71157])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [71162 71181])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [71186 71205])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [71275 71666])
                            ("Transform" code nil (reparse-symbol indented_block_body) [71716 71750])
                            ("self" variable nil (reparse-symbol indented_block_body) [71759 71780])
                            ("self" variable nil (reparse-symbol indented_block_body) [71789 71810])
                            ("self" code nil (reparse-symbol indented_block_body) [71819 71862])
                            ("self" variable nil (reparse-symbol indented_block_body) [71871 71890]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71224 71228])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [71230 71241])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [71243 71254])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [71256 71264]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [71211 71891])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71907 71911])
                            ("other" variable nil (reparse-symbol function_parameters) [71913 71918]))                          )
                        (reparse-symbol indented_block_body) [71896 72243])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72279 72283])
                            ("transform" variable nil (reparse-symbol function_parameters) [72285 72294]))                          )
                        (reparse-symbol indented_block_body) [72248 72467])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72496 72500]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [72472 72552])
                    ("contains_branch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72577 72581])
                            ("other" variable nil (reparse-symbol function_parameters) [72583 72588]))                          )
                        (reparse-symbol indented_block_body) [72557 72706])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72730 72734]))                          )
                        (reparse-symbol indented_block_body) [72711 72792])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [72796 72832])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72859 72863]))                          )
                        (reparse-symbol indented_block_body) [72838 72925])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [72929 72969])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72986 72990]))                          )
                        (reparse-symbol indented_block_body) [72975 73070])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [73074 73115])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73133 73137]))                          )
                        (reparse-symbol indented_block_body) [73121 73356])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73386 73390])
                            ("points" variable nil (reparse-symbol function_parameters) [73392 73398]))                          )
                        (reparse-symbol indented_block_body) [73361 74313])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [74317 74386])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74405 74409]))                          )
                        (reparse-symbol indented_block_body) [74392 74491])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [74495 74540])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74561 74565]))                          )
                        (reparse-symbol indented_block_body) [74546 75187])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [75191 75240]))                  
                :type "class")
                nil [70843 75241])
            ("BlendedAffine2D" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This version is an optimization for the case where both child
    transforms are of type :class:`Affine2DBase`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [75534 75553])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine
        transforms.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [75623 76098])
                            ("is_affine" code nil (reparse-symbol indented_block_body) [76107 76166])
                            ("is_separable" code nil (reparse-symbol indented_block_body) [76175 76243])
                            ("is_correct" code nil (reparse-symbol indented_block_body) [76252 76291])
                            ("if" code nil (reparse-symbol indented_block_body) [76300 76449])
                            ("Transform" code nil (reparse-symbol indented_block_body) [76458 76492])
                            ("self" variable nil (reparse-symbol indented_block_body) [76501 76522])
                            ("self" variable nil (reparse-symbol indented_block_body) [76531 76552])
                            ("self" code nil (reparse-symbol indented_block_body) [76561 76604])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [76614 76641])
                            ("self" variable nil (reparse-symbol indented_block_body) [76650 76666]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75572 75576])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [75578 75589])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [75591 75602])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [75604 75612]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine
        transforms.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [75559 76667])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76683 76687])
                            ("other" variable nil (reparse-symbol function_parameters) [76689 76694]))                          )
                        (reparse-symbol indented_block_body) [76672 77027])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77063 77067])
                            ("transform" variable nil (reparse-symbol function_parameters) [77069 77078]))                          )
                        (reparse-symbol indented_block_body) [77032 77252])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77269 77273]))                          )
                        (reparse-symbol indented_block_body) [77257 77492])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77512 77516]))                          )
                        (reparse-symbol indented_block_body) [77497 78077])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [78081 78133]))                  
                :type "class")
                nil [75243 78134])
            ("blended_transform_factory" function
               (:documentation "
    Create a new \"blended\" transform using *x_transform* to transform
    the *x*-axis and *y_transform* to transform the *y*-axis.

    A faster version of the blended transform is returned for the case
    where both child transforms are affine.
    "
                :arguments 
                  ( ("x_transform" variable nil (reparse-symbol function_parameters) [78166 78177])
                    ("y_transform" variable nil (reparse-symbol function_parameters) [78179 78190]))                  )
                nil [78136 78673])
            ("CompositeGenericTransform" type
               (:documentation "
    A composite transform formed by applying transform *a* then
    transform *b*.

    This \"generic\" version can handle any two arbitrary
    transformations.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [78900 78919])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [78969 79339])
                            ("if" code nil (reparse-symbol indented_block_body) [79348 79519])
                            ("self" variable nil (reparse-symbol indented_block_body) [79527 79557])
                            ("self" variable nil (reparse-symbol indented_block_body) [79566 79598])
                            ("Transform" code nil (reparse-symbol indented_block_body) [79608 79642])
                            ("self" variable nil (reparse-symbol indented_block_body) [79651 79662])
                            ("self" variable nil (reparse-symbol indented_block_body) [79671 79682])
                            ("self" code nil (reparse-symbol indented_block_body) [79691 79714]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78938 78942])
                            ("a" variable nil (reparse-symbol function_parameters) [78944 78945])
                            ("b" variable nil (reparse-symbol function_parameters) [78947 78948])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [78950 78958]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [78925 79715])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [79720 79794])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79811 79815]))                          )
                        (reparse-symbol indented_block_body) [79800 80044])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [80048 80089])
                    ("_invalidate_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80120 80124])
                            ("value" variable nil (reparse-symbol function_parameters) [80126 80131])
                            ("invalidating_node" variable nil (reparse-symbol function_parameters) [80133 80150]))                          )
                        (reparse-symbol indented_block_body) [80095 80854])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80870 80874])
                            ("other" variable nil (reparse-symbol function_parameters) [80876 80881]))                          )
                        (reparse-symbol indented_block_body) [80859 81083])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81123 81127]))                          )
                        (reparse-symbol indented_block_body) [81088 81416])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81445 81449]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [81421 81497])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81521 81525]))                          )
                        (reparse-symbol indented_block_body) [81502 81583])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [81587 81623])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81651 81655]))                          )
                        (reparse-symbol indented_block_body) [81629 81719])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [81723 81765])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81783 81787]))                          )
                        (reparse-symbol indented_block_body) [81771 82006])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82032 82036])
                            ("points" variable nil (reparse-symbol function_parameters) [82038 82044]))                          )
                        (reparse-symbol indented_block_body) [82011 82098])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [82102 82163])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82194 82198])
                            ("points" variable nil (reparse-symbol function_parameters) [82200 82206]))                          )
                        (reparse-symbol indented_block_body) [82169 82523])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [82527 82596])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82632 82636])
                            ("path" variable nil (reparse-symbol function_parameters) [82638 82642]))                          )
                        (reparse-symbol indented_block_body) [82602 82972])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [82976 83055])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83076 83080]))                          )
                        (reparse-symbol indented_block_body) [83061 83309])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [83313 83362])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83381 83385]))                          )
                        (reparse-symbol indented_block_body) [83368 83469])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [83473 83518])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83545 83549]))                          )
                        (reparse-symbol indented_block_body) [83524 83611])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [83615 83655]))                  
                :type "class")
                nil [78675 83656])
            ("CompositeAffine2D" type
               (:documentation "
    A composite transform formed by applying transform *a* then transform *b*.

    This version is an optimization that handles the case where both *a*
    and *b* are 2D affines.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        Both *a* and *b* must be instances of :class:`Affine2DBase`.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [83942 84382])
                            ("if" code nil (reparse-symbol indented_block_body) [84391 84500])
                            ("if" code nil (reparse-symbol indented_block_body) [84508 84679])
                            ("self" variable nil (reparse-symbol indented_block_body) [84687 84717])
                            ("self" variable nil (reparse-symbol indented_block_body) [84726 84758])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [84768 84805])
                            ("self" variable nil (reparse-symbol indented_block_body) [84814 84825])
                            ("self" variable nil (reparse-symbol indented_block_body) [84834 84845])
                            ("self" code nil (reparse-symbol indented_block_body) [84854 84877])
                            ("self" variable nil (reparse-symbol indented_block_body) [84886 84902]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83911 83915])
                            ("a" variable nil (reparse-symbol function_parameters) [83917 83918])
                            ("b" variable nil (reparse-symbol function_parameters) [83920 83921])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [83923 83931]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        Both *a* and *b* must be instances of :class:`Affine2DBase`.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [83898 84903])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84932 84936]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [84908 84984])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85024 85028]))                          )
                        (reparse-symbol indented_block_body) [84989 85317])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85334 85338]))                          )
                        (reparse-symbol indented_block_body) [85322 85557])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85577 85581]))                          )
                        (reparse-symbol indented_block_body) [85562 85807])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [85811 85863]))                  
                :type "class")
                nil [83658 85864])
            ("composite_transform_factory" function
               (:documentation "
    Create a new composite transform that is the result of applying
    transform a then transform b.

    Shortcut versions of the blended transform are provided for the
    case where both child transforms are affine, or one or the other
    is the identity transform.

    Composite transforms may also be created using the '+' operator,
    e.g.::

      c = a + b
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [85898 85899])
                    ("b" variable nil (reparse-symbol function_parameters) [85901 85902]))                  )
                nil [85866 86797])
            ("BboxTransform" type
               (:documentation "
    :class:`BboxTransform` linearly transforms points from one
    :class:`Bbox` to another :class:`Bbox`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [86961 86980])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [87039 87164])
                            ("if" code nil (reparse-symbol indented_block_body) [87173 87283])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [87292 87329])
                            ("self" variable nil (reparse-symbol indented_block_body) [87338 87357])
                            ("self" variable nil (reparse-symbol indented_block_body) [87366 87387])
                            ("self" code nil (reparse-symbol indented_block_body) [87396 87428])
                            ("self" variable nil (reparse-symbol indented_block_body) [87437 87453])
                            ("self" variable nil (reparse-symbol indented_block_body) [87462 87483]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86999 87003])
                            ("boxin" variable nil (reparse-symbol function_parameters) [87005 87010])
                            ("boxout" variable nil (reparse-symbol function_parameters) [87012 87018])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [87020 87028]))                          
                        :documentation "
        Create a new :class:`BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [86986 87484])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87501 87505]))                          )
                        (reparse-symbol indented_block_body) [87489 87733])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87753 87757]))                          )
                        (reparse-symbol indented_block_body) [87738 88450])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [88454 88506]))                  
                :type "class")
                nil [86799 88507])
            ("BboxTransformTo" type
               (:documentation "
    :class:`BboxTransformTo` is a transformation that linearly
    transforms points from the unit bounding box to a given
    :class:`Bbox`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [88708 88727])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [88779 88920])
                            ("if" code nil (reparse-symbol indented_block_body) [88929 89006])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [89015 89052])
                            ("self" variable nil (reparse-symbol indented_block_body) [89061 89082])
                            ("self" code nil (reparse-symbol indented_block_body) [89091 89116])
                            ("self" variable nil (reparse-symbol indented_block_body) [89125 89141])
                            ("self" variable nil (reparse-symbol indented_block_body) [89150 89171]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88746 88750])
                            ("boxout" variable nil (reparse-symbol function_parameters) [88752 88758])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [88760 88768]))                          
                        :documentation "
        Create a new :class:`BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [88733 89172])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89189 89193]))                          )
                        (reparse-symbol indented_block_body) [89177 89343])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89363 89367]))                          )
                        (reparse-symbol indented_block_body) [89348 89874])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [89878 89930]))                  
                :type "class")
                nil [88509 89931])
            ("BboxTransformToMaxOnly" type
               (:documentation "
    :class:`BboxTransformTo` is a transformation that linearly
    transforms points from the unit bounding box to a given
    :class:`Bbox` with a fixed upper left of (0, 0).
    "
                :superclasses ("BboxTransformTo")
                :members 
                  ( ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90191 90195]))                          )
                        (reparse-symbol indented_block_body) [90176 90683])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [90687 90739]))                  
                :type "class")
                nil [89933 90740])
            ("BboxTransformFrom" type
               (:documentation "
    :class:`BboxTransformFrom` linearly transforms points from a given
    :class:`Bbox` to the unit bounding box.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [90916 90935])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [90986 91061])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [91070 91107])
                            ("self" variable nil (reparse-symbol indented_block_body) [91116 91135])
                            ("self" code nil (reparse-symbol indented_block_body) [91144 91168])
                            ("self" variable nil (reparse-symbol indented_block_body) [91177 91193])
                            ("self" variable nil (reparse-symbol indented_block_body) [91202 91223]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90954 90958])
                            ("boxin" variable nil (reparse-symbol function_parameters) [90960 90965])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [90967 90975]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [90941 91224])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91241 91245]))                          )
                        (reparse-symbol indented_block_body) [91229 91394])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91414 91418]))                          )
                        (reparse-symbol indented_block_body) [91399 92028])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [92032 92084]))                  
                :type "class")
                nil [90742 92085])
            ("ScaledTranslation" type
               (:documentation "
    A transformation that translates by *xt* and *yt*, after *xt* and *yt*
    have been transformad by the given transform *scale_trans*.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Affine2DBase" code nil (reparse-symbol indented_block_body) [92344 92381])
                            ("self" variable nil (reparse-symbol indented_block_body) [92390 92408])
                            ("self" variable nil (reparse-symbol indented_block_body) [92417 92448])
                            ("self" code nil (reparse-symbol indented_block_body) [92457 92487])
                            ("self" variable nil (reparse-symbol indented_block_body) [92496 92512])
                            ("self" variable nil (reparse-symbol indented_block_body) [92521 92542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92298 92302])
                            ("xt" variable nil (reparse-symbol function_parameters) [92304 92306])
                            ("yt" variable nil (reparse-symbol function_parameters) [92308 92310])
                            ("scale_trans" variable nil (reparse-symbol function_parameters) [92312 92323])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [92325 92333]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92285 92543])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92560 92564]))                          )
                        (reparse-symbol indented_block_body) [92548 92709])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92729 92733]))                          )
                        (reparse-symbol indented_block_body) [92714 93107])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [93111 93163]))                  
                :type "class")
                nil [92087 93164])
            ("TransformedPath" type
               (:documentation "
    A :class:`TransformedPath` caches a non-affine transformed copy of
    the :class:`~matplotlib.path.Path`.  This cached copy is
    automatically updated when the non-affine part of the transform
    changes.

    .. note::

        Paths are considered immutable by this class. Any update to the
        path's vertices/codes will not trigger a transform recomputation.

    "
                :superclasses ("TransformNode")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`TransformedPath` from the given
        :class:`~matplotlib.path.Path` and :class:`Transform`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [93645 93784])
                            ("if" code nil (reparse-symbol indented_block_body) [93793 93966])
                            ("TransformNode" code nil (reparse-symbol indented_block_body) [93974 94002])
                            ("self" variable nil (reparse-symbol indented_block_body) [94012 94029])
                            ("self" variable nil (reparse-symbol indented_block_body) [94038 94065])
                            ("self" code nil (reparse-symbol indented_block_body) [94074 94102])
                            ("self" variable nil (reparse-symbol indented_block_body) [94111 94140])
                            ("self" variable nil (reparse-symbol indented_block_body) [94149 94180]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93613 93617])
                            ("path" variable nil (reparse-symbol function_parameters) [93619 93623])
                            ("transform" variable nil (reparse-symbol function_parameters) [93625 93634]))                          
                        :documentation "
        Create a new :class:`TransformedPath` from the given
        :class:`~matplotlib.path.Path` and :class:`Transform`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [93600 94181])
                    ("_revalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94202 94206]))                          )
                        (reparse-symbol indented_block_body) [94186 94905])
                    ("get_transformed_points_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94948 94952]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.  Unlike
        :meth:`get_transformed_path_and_affine`, no interpolation will
        be performed.
        ")
                        (reparse-symbol indented_block_body) [94910 95363])
                    ("get_transformed_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95404 95408]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.
        ")
                        (reparse-symbol indented_block_body) [95368 95716])
                    ("get_fully_transformed_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95752 95756]))                          
                        :documentation "
        Return a fully-transformed copy of the child path.
        ")
                        (reparse-symbol indented_block_body) [95721 95946])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95966 95970]))                          )
                        (reparse-symbol indented_block_body) [95951 96017]))                  
                :type "class")
                nil [93166 96017])
            ("TransformedPatchPath" type
               (:documentation "
    A :class:`TransformedPatchPath` caches a non-affine transformed copy of
    the :class:`~matplotlib.path.Patch`. This cached copy is automatically
    updated when the non-affine part of the transform or the patch changes.
    "
                :superclasses ("TransformedPath")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`TransformedPatchPath` from the given
        :class:`~matplotlib.path.Patch`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [96346 96468])
                            ("TransformNode" code nil (reparse-symbol indented_block_body) [96477 96505])
                            ("transform" variable nil (reparse-symbol indented_block_body) [96515 96548])
                            ("self" variable nil (reparse-symbol indented_block_body) [96557 96576])
                            ("self" variable nil (reparse-symbol indented_block_body) [96585 96612])
                            ("self" code nil (reparse-symbol indented_block_body) [96621 96649])
                            ("self" variable nil (reparse-symbol indented_block_body) [96658 96687])
                            ("self" variable nil (reparse-symbol indented_block_body) [96696 96725])
                            ("self" variable nil (reparse-symbol indented_block_body) [96734 96765]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96324 96328])
                            ("patch" variable nil (reparse-symbol function_parameters) [96330 96335]))                          
                        :documentation "
        Create a new :class:`TransformedPatchPath` from the given
        :class:`~matplotlib.path.Patch`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [96311 96766])
                    ("_revalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96787 96791]))                          )
                        (reparse-symbol indented_block_body) [96771 97666]))                  
                :type "class")
                nil [96019 97666])
            ("nonsingular" function
               (:documentation "
    Modify the endpoints of a range as needed to avoid singularities.

    Parameters
    ----------
    vmin, vmax : float
        The initial endpoints.
    expander : float, optional, default: 0.001
        Fractional amount by which *vmin* and *vmax* are expanded if
        the original interval is too small, based on *tiny*.
    tiny : float, optional, default: 1e-15
        Threshold for the ratio of the interval to the maximum absolute
        value of its endpoints.  If the interval is smaller than
        this, it will be expanded.  This value should be around
        1e-15 or larger; otherwise the interval will be approaching
        the double precision resolution limit.
    increasing : bool, optional, default: True
        If True, swap *vmin*, *vmax* if *vmin* > *vmax*.

    Returns
    -------
    vmin, vmax : float
        Endpoints, expanded and/or swapped if necessary.
        If either input is inf or NaN, or if both inputs are 0 or very
        close to zero, it returns -*expander*, *expander*.
    "
                :arguments 
                  ( ("vmin" variable nil (reparse-symbol function_parameters) [97684 97688])
                    ("vmax" variable nil (reparse-symbol function_parameters) [97690 97694])
                    ("expander" variable nil (reparse-symbol function_parameters) [97696 97704])
                    ("tiny" variable nil (reparse-symbol function_parameters) [97712 97716])
                    ("increasing" variable nil (reparse-symbol function_parameters) [97724 97734]))                  )
                nil [97668 99451])
            ("interval_contains" function
               (:documentation "
    Check, inclusively, whether an interval includes a given value.

    Parameters
    ----------
    interval : sequence of scalar
        A 2-length sequence, endpoints that define the interval.
    val : scalar
        Value to check is within interval.

    Returns
    -------
    bool
        Returns true if given val is within the interval.
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [99475 99483])
                    ("val" variable nil (reparse-symbol function_parameters) [99485 99488]))                  )
                nil [99453 99919])
            ("interval_contains_open" function
               (:documentation "
    Check, excluding endpoints, whether an interval includes a given value.

    Parameters
    ----------
    interval : sequence of scalar
        A 2-length sequence, endpoints that define the interval.
    val : scalar
        Value to check is within interval.

    Returns
    -------
    bool
        Returns true if given val is within the interval.
    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [99948 99956])
                    ("val" variable nil (reparse-symbol function_parameters) [99958 99961]))                  )
                nil [99921 100396])
            ("offset_copy" function
               (:documentation "
    Return a new transform with an added offset.

    Parameters
    ----------
    trans : :class:`Transform` instance
        Any transform, to which offset will be applied.
    fig : :class:`~matplotlib.figure.Figure`, optional, default: None
        Current figure. It can be None if *units* are 'dots'.
    x, y : float, optional, default: 0.0
        Specifies the offset to apply.
    units : {'inches', 'points', 'dots'}, optional
        Units of the offset.

    Returns
    -------
    trans : :class:`Transform` instance
        Transform with applied offset.
    "
                :arguments 
                  ( ("trans" variable nil (reparse-symbol function_parameters) [100414 100419])
                    ("fig" variable nil (reparse-symbol function_parameters) [100421 100424])
                    ("x" variable nil (reparse-symbol function_parameters) [100431 100432])
                    ("y" variable nil (reparse-symbol function_parameters) [100438 100439])
                    ("units" variable nil (reparse-symbol function_parameters) [100445 100450]))                  )
                nil [100398 101448]))          
      :file "transforms.py"
      :pointmax 101448
      :fsize 101447
      :lastmodtime '(23240 23001 121461 0)
      :unmatched-syntax '((RETURN 25259 . 25265) (IF 25293 . 25295) (ELSE 25318 . 25322) (FROM 1786 . 1790) (PERIOD 1791 . 1792) (FROM 1766 . 1770) (PERIOD 1771 . 1772)))
    (semanticdb-table "semanticdb-table-16051d8"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"

Conventions:

\"constrain_x\" means to constrain the variable with either
another kiwisolver variable, or a float.  i.e. `constrain_width(0.2)`
will set a constraint that the width has to be 0.2 and this constraint is
permanent - i.e. it will not be removed if it becomes obsolete.

\"edit_x\" means to set x to a value (just a float), and that this value can
change.  So `edit_width(0.2)` will set width to be 0.2, but `edit_width(0.3)`
will allow it to change to 0.3 later.  Note that these values are still just
\"suggestions\" in `kiwisolver` parlance, and could be over-ridden by
other constrains.

\"\"\"" code nil nil [25 631])
            ("" code nil nil [656 741])
            ("itertools" include nil nil [743 759])
            ("kiwisolver" include nil nil [760 785])
            ("logging" include nil nil [786 800])
            ("numpy" include nil nil [801 819])
            ("warnings" include nil nil [820 835])
            ("matplotlib" include nil nil [837 854])
            ("_log" variable nil nil [856 890])
            ("get_renderer" function (:arguments 
              ( ("fig" variable nil (reparse-symbol function_parameters) [941 944]))              ) nil [924 1498])
            ("LayoutBox" type
               (:documentation "
    Basic rectangle representation using kiwi solver variables
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Variable" variable nil (reparse-symbol indented_block_body) [1849 1873])
                            ("self" variable nil (reparse-symbol indented_block_body) [1882 1902])
                            ("self" variable nil (reparse-symbol indented_block_body) [1911 1927])
                            ("sn" code nil (reparse-symbol indented_block_body) [1936 1956])
                            ("if" code nil (reparse-symbol indented_block_body) [1965 2263])
                            ("self" variable nil (reparse-symbol indented_block_body) [2342 2362])
                            ("self" variable nil (reparse-symbol indented_block_body) [2473 2487])
                            ("self" variable nil (reparse-symbol indented_block_body) [2574 2596])
                            ("self" variable nil (reparse-symbol indented_block_body) [2685 2721])
                            ("self" variable nil (reparse-symbol indented_block_body) [2730 2772])
                            ("self" variable nil (reparse-symbol indented_block_body) [2781 2819])
                            ("self" variable nil (reparse-symbol indented_block_body) [2828 2868])
                            ("self" variable nil (reparse-symbol indented_block_body) [2878 2918])
                            ("self" variable nil (reparse-symbol indented_block_body) [2927 2969])
                            ("self" variable nil (reparse-symbol indented_block_body) [2978 3024])
                            ("self" variable nil (reparse-symbol indented_block_body) [3033 3079])
                            ("self" variable nil (reparse-symbol indented_block_body) [3089 3137])
                            ("self" variable nil (reparse-symbol indented_block_body) [3146 3196])
                            ("self" variable nil (reparse-symbol indented_block_body) [3205 3255])
                            ("self" variable nil (reparse-symbol indented_block_body) [3264 3316])
                            ("self" variable nil (reparse-symbol indented_block_body) [3436 3488])
                            ("self" variable nil (reparse-symbol indented_block_body) [3497 3551])
                            ("self" variable nil (reparse-symbol indented_block_body) [3560 3616])
                            ("self" variable nil (reparse-symbol indented_block_body) [3625 3675])
                            ("self" variable nil (reparse-symbol indented_block_body) [3699 3759])
                            ("self" variable nil (reparse-symbol indented_block_body) [3768 3830])
                            ("self" variable nil (reparse-symbol indented_block_body) [3839 3903])
                            ("self" variable nil (reparse-symbol indented_block_body) [3912 3970])
                            ("right, top" code nil (reparse-symbol indented_block_body) [3980 4004])
                            ("left, bottom" code nil (reparse-symbol indented_block_body) [4013 4038])
                            ("self" variable nil (reparse-symbol indented_block_body) [4047 4077])
                            ("self" variable nil (reparse-symbol indented_block_body) [4086 4114])
                            ("self" code nil (reparse-symbol indented_block_body) [4123 4145])
                            ("self" variable nil (reparse-symbol indented_block_body) [4154 4172])
                            ("self" variable nil (reparse-symbol indented_block_body) [4181 4204])
                            ("if" code nil (reparse-symbol indented_block_body) [4213 4263])
                            ("self" variable nil (reparse-symbol indented_block_body) [4271 4289])
                            ("self" variable nil (reparse-symbol indented_block_body) [4298 4316]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1622 1626])
                            ("parent" variable nil (reparse-symbol function_parameters) [1628 1634])
                            ("name" variable nil (reparse-symbol function_parameters) [1641 1645])
                            ("tightwidth" variable nil (reparse-symbol function_parameters) [1650 1660])
                            ("tightheight" variable nil (reparse-symbol function_parameters) [1685 1696])
                            ("artist" variable nil (reparse-symbol function_parameters) [1704 1710])
                            ("lower_left" variable nil (reparse-symbol function_parameters) [1734 1744])
                            ("upper_right" variable nil (reparse-symbol function_parameters) [1753 1764])
                            ("pos" variable nil (reparse-symbol function_parameters) [1773 1776])
                            ("subplot" variable nil (reparse-symbol function_parameters) [1801 1808])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [1816 1821])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [1828 1833]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1609 4317])
                    ("constrain_margins" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4344 4348]))                          
                        :documentation "
        Only do this for pos.  This sets a variable distance
        margin between the position of the axes and the outer edge of
        the axes.

        Margins are variable because they change with the fogure size.

        Margin minimums are set to make room for axes decorations.  However,
        the margins can be larger if we are mathicng the position size to
        otehr axes.
        ")
                        (reparse-symbol indented_block_body) [4322 6468])
                    ("add_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6487 6491])
                            ("child" variable nil (reparse-symbol function_parameters) [6493 6498]))                          )
                        (reparse-symbol indented_block_body) [6473 6534])
                    ("remove_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6556 6560])
                            ("child" variable nil (reparse-symbol function_parameters) [6562 6567]))                          )
                        (reparse-symbol indented_block_body) [6539 6727])
                    ("add_constraints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6752 6756]))                          )
                        (reparse-symbol indented_block_body) [6732 7168])
                    ("parent_constrain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7226 7230]))                          )
                        (reparse-symbol indented_block_body) [7205 7501])
                    ("hard_constraints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7527 7531]))                          )
                        (reparse-symbol indented_block_body) [7506 7930])
                    ("soft_constraints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7956 7960]))                          )
                        (reparse-symbol indented_block_body) [7935 8531])
                    ("set_parent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8551 8555])
                            ("parent" variable nil (reparse-symbol function_parameters) [8557 8563]))                          )
                        (reparse-symbol indented_block_body) [8536 8698])
                    ("constrain_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8726 8730])
                            ("left" variable nil (reparse-symbol function_parameters) [8732 8736])
                            ("bottom" variable nil (reparse-symbol function_parameters) [8738 8744])
                            ("right" variable nil (reparse-symbol function_parameters) [8746 8751])
                            ("top" variable nil (reparse-symbol function_parameters) [8753 8756])
                            ("strength" variable nil (reparse-symbol function_parameters) [8758 8766]))                          )
                        (reparse-symbol indented_block_body) [8703 8989])
                    ("constrain_same" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9053 9057])
                            ("other" variable nil (reparse-symbol function_parameters) [9059 9064])
                            ("strength" variable nil (reparse-symbol function_parameters) [9066 9074]))                          
                        :documentation "
        Make the layoutbox have same position as other layoutbox
        ")
                        (reparse-symbol indented_block_body) [9034 9410])
                    ("constrain_left_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9441 9445])
                            ("margin" variable nil (reparse-symbol function_parameters) [9447 9453])
                            ("strength" variable nil (reparse-symbol function_parameters) [9455 9463]))                          )
                        (reparse-symbol indented_block_body) [9415 9576])
                    ("edit_left_margin_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9606 9610])
                            ("margin" variable nil (reparse-symbol function_parameters) [9612 9618]))                          )
                        (reparse-symbol indented_block_body) [9581 9684])
                    ("constrain_right_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9716 9720])
                            ("margin" variable nil (reparse-symbol function_parameters) [9722 9728])
                            ("strength" variable nil (reparse-symbol function_parameters) [9730 9738]))                          )
                        (reparse-symbol indented_block_body) [9689 9853])
                    ("edit_right_margin_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9884 9888])
                            ("margin" variable nil (reparse-symbol function_parameters) [9890 9896]))                          )
                        (reparse-symbol indented_block_body) [9858 9963])
                    ("constrain_bottom_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9996 10000])
                            ("margin" variable nil (reparse-symbol function_parameters) [10002 10008])
                            ("strength" variable nil (reparse-symbol function_parameters) [10010 10018]))                          )
                        (reparse-symbol indented_block_body) [9968 10135])
                    ("edit_bottom_margin_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10167 10171])
                            ("margin" variable nil (reparse-symbol function_parameters) [10173 10179]))                          )
                        (reparse-symbol indented_block_body) [10140 10247])
                    ("constrain_top_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10277 10281])
                            ("margin" variable nil (reparse-symbol function_parameters) [10283 10289])
                            ("strength" variable nil (reparse-symbol function_parameters) [10291 10299]))                          )
                        (reparse-symbol indented_block_body) [10252 10410])
                    ("edit_top_margin_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10439 10443])
                            ("margin" variable nil (reparse-symbol function_parameters) [10445 10451]))                          )
                        (reparse-symbol indented_block_body) [10415 10516])
                    ("get_rect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10534 10538]))                          )
                        (reparse-symbol indented_block_body) [10521 10654])
                    ("update_variables" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10680 10684]))                          )
                        (reparse-symbol indented_block_body) [10659 10851])
                    ("edit_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10872 10876])
                            ("height" variable nil (reparse-symbol function_parameters) [10878 10884])
                            ("strength" variable nil (reparse-symbol function_parameters) [10886 10894]))                          )
                        (reparse-symbol indented_block_body) [10856 11268])
                    ("constrain_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11294 11298])
                            ("height" variable nil (reparse-symbol function_parameters) [11300 11306])
                            ("strength" variable nil (reparse-symbol function_parameters) [11308 11316]))                          )
                        (reparse-symbol indented_block_body) [11273 11541])
                    ("constrain_height_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11571 11575])
                            ("height" variable nil (reparse-symbol function_parameters) [11577 11583])
                            ("strength" variable nil (reparse-symbol function_parameters) [11585 11593]))                          )
                        (reparse-symbol indented_block_body) [11546 11689])
                    ("edit_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11709 11713])
                            ("width" variable nil (reparse-symbol function_parameters) [11715 11720])
                            ("strength" variable nil (reparse-symbol function_parameters) [11722 11730]))                          )
                        (reparse-symbol indented_block_body) [11694 11935])
                    ("constrain_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11960 11964])
                            ("width" variable nil (reparse-symbol function_parameters) [11966 11971])
                            ("strength" variable nil (reparse-symbol function_parameters) [11973 11981]))                          )
                        (reparse-symbol indented_block_body) [11940 12203])
                    ("constrain_width_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12232 12236])
                            ("width" variable nil (reparse-symbol function_parameters) [12238 12243])
                            ("strength" variable nil (reparse-symbol function_parameters) [12245 12253]))                          )
                        (reparse-symbol indented_block_body) [12208 12347])
                    ("constrain_left" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12371 12375])
                            ("left" variable nil (reparse-symbol function_parameters) [12377 12381])
                            ("strength" variable nil (reparse-symbol function_parameters) [12384 12392]))                          )
                        (reparse-symbol indented_block_body) [12352 12484])
                    ("constrain_bottom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12510 12514])
                            ("bottom" variable nil (reparse-symbol function_parameters) [12516 12522])
                            ("strength" variable nil (reparse-symbol function_parameters) [12524 12532]))                          )
                        (reparse-symbol indented_block_body) [12489 12628])
                    ("constrain_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12653 12657])
                            ("right" variable nil (reparse-symbol function_parameters) [12659 12664])
                            ("strength" variable nil (reparse-symbol function_parameters) [12666 12674]))                          )
                        (reparse-symbol indented_block_body) [12633 12768])
                    ("constrain_top" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12791 12795])
                            ("top" variable nil (reparse-symbol function_parameters) [12797 12800])
                            ("strength" variable nil (reparse-symbol function_parameters) [12802 12810]))                          )
                        (reparse-symbol indented_block_body) [12773 12900])
                    ("_is_subplotspec_layoutbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12935 12939]))                          )
                        (reparse-symbol indented_block_body) [12905 13167])
                    ("_is_gridspec_layoutbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13199 13203]))                          )
                        (reparse-symbol indented_block_body) [13172 13434])
                    ("find_child_subplots" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13463 13467]))                          )
                        (reparse-symbol indented_block_body) [13439 13837])
                    ("layout_from_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13870 13874])
                            ("subspec" variable nil (reparse-symbol function_parameters) [13876 13883])
                            ("name" variable nil (reparse-symbol function_parameters) [13917 13921])
                            ("artist" variable nil (reparse-symbol function_parameters) [13926 13932])
                            ("pos" variable nil (reparse-symbol function_parameters) [13939 13942]))                          )
                        (reparse-symbol indented_block_body) [13842 17516])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17534 17538]))                          )
                        (reparse-symbol indented_block_body) [17521 17780]))                  
                :type "class")
                nil [1500 17780])
            ("hstack" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [17840 17845])
                ("padding" variable nil (reparse-symbol function_parameters) [17847 17854])
                ("strength" variable nil (reparse-symbol function_parameters) [17858 17866]))              ) nil [17829 18133])
            ("hpack" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [18145 18150])
                ("padding" variable nil (reparse-symbol function_parameters) [18152 18159])
                ("strength" variable nil (reparse-symbol function_parameters) [18163 18171]))              ) nil [18135 18395])
            ("vstack" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [18408 18413])
                ("padding" variable nil (reparse-symbol function_parameters) [18415 18422])
                ("strength" variable nil (reparse-symbol function_parameters) [18426 18434]))              ) nil [18397 18657])
            ("vpack" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [18669 18674])
                ("padding" variable nil (reparse-symbol function_parameters) [18676 18683])
                ("strength" variable nil (reparse-symbol function_parameters) [18687 18695]))              ) nil [18659 18918])
            ("match_heights" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [18938 18943])
                ("height_ratios" variable nil (reparse-symbol function_parameters) [18945 18958])
                ("strength" variable nil (reparse-symbol function_parameters) [18965 18973]))              ) nil [18920 19312])
            ("match_widths" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [19331 19336])
                ("width_ratios" variable nil (reparse-symbol function_parameters) [19338 19350])
                ("strength" variable nil (reparse-symbol function_parameters) [19357 19365]))              ) nil [19314 19698])
            ("vstackeq" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [19713 19718])
                ("padding" variable nil (reparse-symbol function_parameters) [19720 19727])
                ("height_ratios" variable nil (reparse-symbol function_parameters) [19731 19744]))              ) nil [19700 19841])
            ("hstackeq" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [19856 19861])
                ("padding" variable nil (reparse-symbol function_parameters) [19863 19870])
                ("width_ratios" variable nil (reparse-symbol function_parameters) [19874 19886]))              ) nil [19843 19980])
            ("align" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [19992 19997])
                ("attr" variable nil (reparse-symbol function_parameters) [19999 20003])
                ("strength" variable nil (reparse-symbol function_parameters) [20005 20013]))              ) nil [19982 20183])
            ("match_top_margins" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [20207 20212])
                ("levels" variable nil (reparse-symbol function_parameters) [20214 20220]))              ) nil [20185 20524])
            ("match_bottom_margins" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [20551 20556])
                ("levels" variable nil (reparse-symbol function_parameters) [20558 20564]))              ) nil [20526 20880])
            ("match_left_margins" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [20905 20910])
                ("levels" variable nil (reparse-symbol function_parameters) [20912 20918]))              ) nil [20882 21226])
            ("match_right_margins" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [21252 21257])
                ("levels" variable nil (reparse-symbol function_parameters) [21259 21265]))              ) nil [21228 21577])
            ("match_width_margins" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [21603 21608])
                ("levels" variable nil (reparse-symbol function_parameters) [21610 21616]))              ) nil [21579 21712])
            ("match_height_margins" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [21739 21744])
                ("levels" variable nil (reparse-symbol function_parameters) [21746 21752]))              ) nil [21714 21848])
            ("match_margins" function (:arguments 
              ( ("boxes" variable nil (reparse-symbol function_parameters) [21868 21873])
                ("levels" variable nil (reparse-symbol function_parameters) [21875 21881]))              ) nil [21850 21979])
            ("_layoutboxobjnum" variable nil nil [21981 22017])
            ("seq_id" function nil nil [22020 22187])
            ("print_children" function (:arguments 
              ( ("lb" variable nil (reparse-symbol function_parameters) [22208 22210]))              ) nil [22189 22343])
            ("nonetree" function (:arguments 
              ( ("lb" variable nil (reparse-symbol function_parameters) [22358 22360]))              ) nil [22345 22691])
            ("nonechildren" function (:arguments 
              ( ("lb" variable nil (reparse-symbol function_parameters) [22710 22712]))              ) nil [22693 22819])
            ("print_tree" function (:arguments 
              ( ("lb" variable nil (reparse-symbol function_parameters) [22836 22838]))              ) nil [22821 23073])
            ("plot_children" function (:arguments 
              ( ("fig" variable nil (reparse-symbol function_parameters) [23093 23096])
                ("box" variable nil (reparse-symbol function_parameters) [23098 23101])
                ("level" variable nil (reparse-symbol function_parameters) [23103 23108])
                ("printit" variable nil (reparse-symbol function_parameters) [23112 23119]))              ) nil [23075 24575]))          
      :file "_layoutbox.py"
      :pointmax 24575
      :fsize 24574
      :lastmodtime '(23240 23001 117461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-de4fd8"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module provides the routine to adjust subplot layouts so that there are
no overlapping axes or axes decorations.  All axes decorations are dealt with
(labels, ticks, titles, ticklabels) and some dependent artists are also dealt
with (colorbar, suptitle, legend).

Layout is done via :meth:`~matplotlib.gridspec`, with one constraint per
gridspec, so it is possible to have overlapping axes if the gridspecs
overlap (i.e. using :meth:`~matplotlib.gridspec.GridSpecFromSubplotSpec`).
Axes placed using ``figure.subplots()`` or ``figure.add_subplots()`` will
participate in the layout.  Axes manually placed via ``figure.add_axes()``
will not.

See Tutorial: :doc:`/tutorials/intermediate/constrainedlayout_guide`

\"\"\"" code nil nil [1 725])
            ("" code nil nil [1895 1980])
            ("numpy" include nil nil [1982 2000])
            ("logging" include nil nil [2001 2015])
            ("warnings" include nil nil [2016 2031])
            ("matplotlib.legend" include nil nil [2033 2069])
            ("matplotlib.transforms" include nil nil [2070 2112])
            ("matplotlib._layoutbox" include nil nil [2113 2154])
            ("_log" variable nil nil [2156 2190])
            ("get_axall_tightbbox" function (:arguments 
              ( ("ax" variable nil (reparse-symbol function_parameters) [2217 2219])
                ("renderer" variable nil (reparse-symbol function_parameters) [2221 2229]))              ) nil [2193 2725])
            ("in_same_column" function (:arguments 
              ( ("colnum0min" variable nil (reparse-symbol function_parameters) [2746 2756])
                ("colnum0max" variable nil (reparse-symbol function_parameters) [2758 2768])
                ("colnumCmin" variable nil (reparse-symbol function_parameters) [2770 2780])
                ("colnumCmax" variable nil (reparse-symbol function_parameters) [2782 2792]))              ) nil [2727 2976])
            ("in_same_row" function (:arguments 
              ( ("rownum0min" variable nil (reparse-symbol function_parameters) [2994 3004])
                ("rownum0max" variable nil (reparse-symbol function_parameters) [3006 3016])
                ("rownumCmin" variable nil (reparse-symbol function_parameters) [3018 3028])
                ("rownumCmax" variable nil (reparse-symbol function_parameters) [3030 3040]))              ) nil [2978 3224])
            ("do_constrained_layout" function
               (:documentation "
    Do the constrained_layout.  Called at draw time in
     ``figure.constrained_layout()``

    Parameters
    ----------


    fig: Figure
      is the ``figure`` instance to do the layout in.

    renderer: Renderer
      the renderer to use.

     h_pad, w_pad : float
       are in figure-normalized units, and are a padding around the axes
       elements.

     hspace, wspace : float
        are in fractions of the subplot sizes.

    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [3307 3310])
                    ("renderer" variable nil (reparse-symbol function_parameters) [3312 3320])
                    ("h_pad" variable nil (reparse-symbol function_parameters) [3322 3327])
                    ("w_pad" variable nil (reparse-symbol function_parameters) [3329 3334])
                    ("hspace" variable nil (reparse-symbol function_parameters) [3344 3350])
                    ("wspace" variable nil (reparse-symbol function_parameters) [3357 3363]))                  )
                nil [3281 20116])
            ("arange_subplotspecs" function
               (:documentation "
    arange the subplotspec children of this gridspec, and then recursively
    do the same of any gridspec children of those gridspecs...
    "
                :arguments 
                  ( ("gs" variable nil (reparse-symbol function_parameters) [20142 20144])
                    ("hspace" variable nil (reparse-symbol function_parameters) [20146 20152])
                    ("wspace" variable nil (reparse-symbol function_parameters) [20156 20162]))                  )
                nil [20118 22211])
            ("layoutcolorbarsingle" function
               (:documentation "
    Do the layout for a colorbar, to not oeverly pollute colorbar.py

    `pad` is in fraction of the original axis size.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [22238 22240])
                    ("cax" variable nil (reparse-symbol function_parameters) [22242 22245])
                    ("shrink" variable nil (reparse-symbol function_parameters) [22247 22253])
                    ("aspect" variable nil (reparse-symbol function_parameters) [22255 22261])
                    ("location" variable nil (reparse-symbol function_parameters) [22263 22271])
                    ("pad" variable nil (reparse-symbol function_parameters) [22273 22276]))                  )
                nil [22213 24318])
            ("layoutcolorbargridspec" function
               (:documentation "
    Do the layout for a colorbar, to not oeverly pollute colorbar.py

    `pad` is in fraction of the original axis size.
    "
                :arguments 
                  ( ("parents" variable nil (reparse-symbol function_parameters) [24347 24354])
                    ("cax" variable nil (reparse-symbol function_parameters) [24356 24359])
                    ("shrink" variable nil (reparse-symbol function_parameters) [24361 24367])
                    ("aspect" variable nil (reparse-symbol function_parameters) [24369 24375])
                    ("location" variable nil (reparse-symbol function_parameters) [24377 24385])
                    ("pad" variable nil (reparse-symbol function_parameters) [24387 24390]))                  )
                nil [24320 28387]))          
      :file "_constrained_layout.py"
      :pointmax 28387
      :fsize 28386
      :lastmodtime '(23240 23001 121461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-ded4d4"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Manage figures for pyplot interface.
\"\"\"" code nil nil [1 45])
            ("" code nil nil [69 154])
            ("six" include nil nil [156 166])
            ("atexit" include nil nil [168 181])
            ("gc" include nil nil [182 191])
            ("sys" include nil nil [192 202])
            ("Gcf" type
               (:documentation "
    Singleton to manage a set of integer-numbered figures.

    This class is never instantiated; it consists of two class
    attributes (a list and a dictionary), and a set of static
    methods that operate on those attributes, accessing them
    directly as class attributes.

    Attributes:

        *figs*:
          dictionary of the form {*num*: *manager*, ...}

        *_activeQue*:
          list of *managers*, with active one at the end

    "
                :superclasses ("object")
                :members 
                  ( ("_activeQue" variable nil (reparse-symbol indented_block_body) [696 711])
                    ("figs" variable nil (reparse-symbol indented_block_body) [716 725])
                    ("get_fig_manager" function
                       (:documentation "
        If figure manager *num* exists, make it the active
        figure and return the manager; otherwise return *None*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [768 771])
                            ("num" variable nil (reparse-symbol function_parameters) [773 776]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [731 1059])
                    ("destroy" function
                       (:documentation "
        Try to remove all traces of figure *num*.

        In the interactive backends, this is bound to the
        window \"destroy\" and \"delete\" events.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1093 1096])
                            ("num" variable nil (reparse-symbol function_parameters) [1098 1101]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1064 1538])
                    ("destroy_fig" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1576 1579])
                            ("fig" variable nil (reparse-symbol function_parameters) [1581 1584]))                          )
                        (reparse-symbol indented_block_body) [1543 1813])
                    ("destroy_all" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1851 1854]))                          )
                        (reparse-symbol indented_block_body) [1818 2242])
                    ("has_fignum" function
                       (:documentation "
        Return *True* if figure *num* exists.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2279 2282])
                            ("num" variable nil (reparse-symbol function_parameters) [2284 2287]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2247 2391])
                    ("get_all_fig_managers" function
                       (:documentation "
        Return a list of figure managers.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2438 2441]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2396 2549])
                    ("get_num_fig_managers" function
                       (:documentation "
        Return the number of figures being managed.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2596 2599]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2554 2707])
                    ("get_active" function
                       (:documentation "
        Return the manager of the active figure, or *None*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2744 2747]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2712 2947])
                    ("set_active" function
                       (:documentation "
        Make the figure corresponding to *manager* the active one.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2984 2987])
                            ("manager" variable nil (reparse-symbol function_parameters) [2989 2996]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2952 3327])
                    ("draw_all" function
                       (:documentation "
        Redraw all figures registered with the pyplot
        state machine.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3362 3365])
                            ("force" variable nil (reparse-symbol function_parameters) [3367 3372]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3332 3623]))                  
                :type "class")
                nil [205 3623])
            ("atexit" code nil nil [3624 3656]))          
      :file "_pylab_helpers.py"
      :pointmax 3657
      :fsize 3656
      :lastmodtime '(23240 23001 113461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-dee1d4"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This provides several classes used for blocking interaction with figure
windows:

:class:`BlockingInput`
    creates a callable object to retrieve events in a blocking way for
    interactive sessions

:class:`BlockingKeyMouseInput`
    creates a callable object to retrieve key or mouse clicks in a blocking
    way for interactive sessions.
    Note: Subclass of BlockingInput. Used by waitforbuttonpress

:class:`BlockingMouseInput`
    creates a callable object to retrieve mouse clicks in a blocking way for
    interactive sessions.
    Note: Subclass of BlockingInput.  Used by ginput

:class:`BlockingContourLabeler`
    creates a callable object to retrieve mouse clicks in a blocking way that
    will then be used to place labels on a ContourSet
    Note: Subclass of BlockingMouseInput.  Used by clabel
\"\"\"" code nil nil [1 823])
            ("" code nil nil [848 933])
            ("six" include nil nil [935 945])
            ("matplotlib.lines" include nil nil [946 979])
            ("logging" include nil nil [981 995])
            ("_log" variable nil nil [997 1031])
            ("BlockingInput" type
               (:documentation "
    Class that creates a callable object to retrieve events in a
    blocking way.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1214 1228])
                            ("self" variable nil (reparse-symbol indented_block_body) [1237 1265]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1179 1183])
                            ("fig" variable nil (reparse-symbol function_parameters) [1185 1188])
                            ("eventslist" variable nil (reparse-symbol function_parameters) [1190 1200]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1166 1266])
                    ("on_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1284 1288])
                            ("event" variable nil (reparse-symbol function_parameters) [1290 1295]))                          
                        :documentation "
        Event handler that will be passed to the current figure to
        retrieve events.
        ")
                        (reparse-symbol indented_block_body) [1271 1867])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1887 1891]))                          
                        :documentation "For baseclass, do nothing but collect events")
                        (reparse-symbol indented_block_body) [1872 1966])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1983 1987]))                          
                        :documentation "Disconnect all callbacks")
                        (reparse-symbol indented_block_body) [1971 2139])
                    ("add_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2158 2162])
                            ("event" variable nil (reparse-symbol function_parameters) [2164 2169]))                          
                        :documentation "For base class, this just appends an event to events.")
                        (reparse-symbol indented_block_body) [2144 2274])
                    ("pop_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2293 2297])
                            ("index" variable nil (reparse-symbol function_parameters) [2299 2304]))                          
                        :documentation "
        This removes an event from the event list.  Defaults to
        removing last event, but an index can be supplied.  Note that
        this does not check that there are events, much like the
        normal pop method.  If not events exist, this will throw an
        exception.
        ")
                        (reparse-symbol indented_block_body) [2279 2651])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2664 2668])
                            ("index" variable nil (reparse-symbol function_parameters) [2670 2675]))                          )
                        (reparse-symbol indented_block_body) [2656 2711])
                    ("pop" variable nil (reparse-symbol indented_block_body) [2715 2746])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2765 2769])
                            ("n" variable nil (reparse-symbol function_parameters) [2771 2772])
                            ("timeout" variable nil (reparse-symbol function_parameters) [2776 2783]))                          
                        :documentation "
        Blocking call to retrieve n events
        ")
                        (reparse-symbol indented_block_body) [2752 3661]))                  
                :type "class")
                nil [1034 3661])
            ("BlockingMouseInput" type
               (:documentation "
    Class that creates a callable object to retrieve mouse clicks in a
    blocking way.

    This class will also retrieve keyboard clicks and treat them like
    appropriate mouse clicks (delete and backspace are like mouse button 3,
    enter is like mouse button 2 and all others are like mouse button 1).
    "
                :superclasses ("BlockingInput")
                :members 
                  ( ("button_add" variable nil (reparse-symbol indented_block_body) [4035 4049])
                    ("button_pop" variable nil (reparse-symbol indented_block_body) [4054 4068])
                    ("button_stop" variable nil (reparse-symbol indented_block_body) [4073 4088])
                    ("__init__" function
                       (:suite 
                          ( ("BlockingInput" code nil (reparse-symbol indented_block_body) [4167 4332])
                            ("self" variable nil (reparse-symbol indented_block_body) [4341 4368])
                            ("self" variable nil (reparse-symbol indented_block_body) [4377 4404])
                            ("self" variable nil (reparse-symbol indented_block_body) [4413 4442]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4107 4111])
                            ("fig" variable nil (reparse-symbol function_parameters) [4113 4116])
                            ("mouse_add" variable nil (reparse-symbol function_parameters) [4118 4127])
                            ("mouse_pop" variable nil (reparse-symbol function_parameters) [4131 4140])
                            ("mouse_stop" variable nil (reparse-symbol function_parameters) [4144 4154]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4094 4443])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4463 4467]))                          
                        :documentation "
        This will be called to process events
        ")
                        (reparse-symbol indented_block_body) [4448 4746])
                    ("mouse_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4767 4771]))                          )
                        (reparse-symbol indented_block_body) [4751 5094])
                    ("key_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5113 5117]))                          )
                        (reparse-symbol indented_block_body) [5099 5729])
                    ("mouse_event_add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5754 5758])
                            ("event" variable nil (reparse-symbol function_parameters) [5760 5765]))                          
                        :documentation "
        Will be called for any event involving a button other than
        button 2 or 3.  This will add a click if it is inside axes.
        ")
                        (reparse-symbol indented_block_body) [5734 6088])
                    ("mouse_event_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6114 6118])
                            ("event" variable nil (reparse-symbol function_parameters) [6120 6125]))                          
                        :documentation "
        Will be called for any event involving button 2.
        Button 2 ends blocking input.
        ")
                        (reparse-symbol indented_block_body) [6093 6613])
                    ("mouse_event_pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6638 6642])
                            ("event" variable nil (reparse-symbol function_parameters) [6644 6649]))                          
                        :documentation "
        Will be called for any event involving button 3.
        Button 3 removes the last click.
        ")
                        (reparse-symbol indented_block_body) [6618 6962])
                    ("add_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6981 6985])
                            ("event" variable nil (reparse-symbol function_parameters) [6987 6992]))                          
                        :documentation "
        This add the coordinates of an event to the list of clicks
        ")
                        (reparse-symbol indented_block_body) [6967 7543])
                    ("pop_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7562 7566])
                            ("event" variable nil (reparse-symbol function_parameters) [7568 7573])
                            ("index" variable nil (reparse-symbol function_parameters) [7575 7580]))                          
                        :documentation "
        This removes a click from the list of clicks.  Defaults to
        removing the last click.
        ")
                        (reparse-symbol indented_block_body) [7548 7875])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8100 8104])
                            ("event" variable nil (reparse-symbol function_parameters) [8106 8111])
                            ("index" variable nil (reparse-symbol function_parameters) [8113 8118]))                          
                        :documentation "
        This removes a click and the associated event from the object.
        Defaults to removing the last click, but any index can be
        supplied.
        ")
                        (reparse-symbol indented_block_body) [8092 8379])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8396 8400])
                            ("event" variable nil (reparse-symbol function_parameters) [8402 8407]))                          )
                        (reparse-symbol indented_block_body) [8384 8685])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8703 8707])
                            ("n" variable nil (reparse-symbol function_parameters) [8709 8710])
                            ("timeout" variable nil (reparse-symbol function_parameters) [8714 8721])
                            ("show_clicks" variable nil (reparse-symbol function_parameters) [8726 8737]))                          
                        :documentation "
        Blocking call to retrieve n coordinate pairs through mouse
        clicks.
        ")
                        (reparse-symbol indented_block_body) [8690 9027]))                  
                :type "class")
                nil [3663 9027])
            ("BlockingContourLabeler" type
               (:documentation "
    Class that creates a callable object that uses mouse clicks or key
    clicks on a figure window to place contour labels.
    "
                :superclasses ("BlockingMouseInput")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9257 9269])
                            ("BlockingMouseInput" code nil (reparse-symbol indented_block_body) [9278 9329]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9238 9242])
                            ("cs" variable nil (reparse-symbol function_parameters) [9244 9246]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9225 9330])
                    ("add_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9349 9353])
                            ("event" variable nil (reparse-symbol function_parameters) [9355 9360]))                          )
                        (reparse-symbol indented_block_body) [9335 9391])
                    ("pop_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9410 9414])
                            ("event" variable nil (reparse-symbol function_parameters) [9416 9421])
                            ("index" variable nil (reparse-symbol function_parameters) [9423 9428]))                          )
                        (reparse-symbol indented_block_body) [9396 9462])
                    ("button1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9479 9483])
                            ("event" variable nil (reparse-symbol function_parameters) [9485 9490]))                          
                        :documentation "
        This will be called if an event involving a button other than
        2 or 3 occcurs.  This will add a label to a contour.
        ")
                        (reparse-symbol indented_block_body) [9467 10011])
                    ("button3" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10028 10032])
                            ("event" variable nil (reparse-symbol function_parameters) [10034 10039]))                          
                        :documentation "
        This will be called if button 3 is clicked.  This will remove
        a label if not in inline mode.  Unfortunately, if one is doing
        inline labels, then there is currently no way to fix the
        broken contour - once humpty-dumpty is broken, he can't be put
        back together.  In inline mode, this does nothing.
        ")
                        (reparse-symbol indented_block_body) [10016 10534])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10552 10556])
                            ("inline" variable nil (reparse-symbol function_parameters) [10558 10564])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [10566 10580])
                            ("n" variable nil (reparse-symbol function_parameters) [10584 10585])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10590 10597]))                          )
                        (reparse-symbol indented_block_body) [10539 10797]))                  
                :type "class")
                nil [9029 10797])
            ("BlockingKeyMouseInput" type
               (:documentation "
    Class that creates a callable object to retrieve a single mouse or
    keyboard click
    "
                :superclasses ("BlockingInput")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("BlockingInput" code nil (reparse-symbol indented_block_body) [10986 11090]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10966 10970])
                            ("fig" variable nil (reparse-symbol function_parameters) [10972 10975]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10953 11091])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11111 11115]))                          
                        :documentation "
        Determines if it is a key event
        ")
                        (reparse-symbol indented_block_body) [11096 11344])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11362 11366])
                            ("timeout" variable nil (reparse-symbol function_parameters) [11368 11375]))                          
                        :documentation "
        Blocking call to retrieve a single mouse or key click
        Returns True if key click, False if mouse, or None if timeout
        ")
                        (reparse-symbol indented_block_body) [11349 11659]))                  
                :type "class")
                nil [10799 11659]))          
      :file "blocking_input.py"
      :pointmax 11659
      :fsize 11658
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-dee400"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The legend module defines the Legend class, which is responsible for
drawing legends associated with axes and/or figures.

.. important::

    It is unlikely that you would ever create a Legend instance manually.
    Most users would normally create a legend via the
    :meth:`~matplotlib.axes.Axes.legend` function. For more details on legends
    there is also a :ref:`legend guide
    <sphx_glr_tutorials_intermediate_legend_guide.py>`.

The Legend class can be considered as a container of legend handles
and legend texts. Creation of corresponding legend handles from the
plot elements in the axes or figures (e.g., lines, patches, etc.) are
specified by the handler map, which defines the mapping between the
plot elements and the legend handlers to be used (the default legend
handlers are defined in the :mod:`~matplotlib.legend_handler` module).
Note that not all kinds of artist are supported by the legend yet by default
but it is possible to extend the legend handler's capabilities to support
arbitrary objects. See the :ref:`legend guide
<sphx_glr_tutorials_intermediate_legend_guide.py>` for more information.

\"\"\"" code nil nil [1 1135])
            ("" code nil nil [1159 1244])
            ("six" include nil nil [1246 1256])
            ("logging" include nil nil [1258 1272])
            ("warnings" include nil nil [1273 1288])
            ("numpy" include nil nil [1290 1308])
            ("matplotlib" include nil nil [1310 1341])
            ("matplotlib" include nil nil [1342 1374])
            ("matplotlib.artist" include nil nil [1375 1432])
            ("matplotlib.cbook" include nil nil [1433 1486])
            ("matplotlib.colors" include nil nil [1487 1521])
            ("matplotlib.font_manager" include nil nil [1522 1572])
            ("matplotlib.lines" include nil nil [1573 1608])
            ("matplotlib.patches" include nil nil [1609 1680])
            ("" code nil nil [1716 1877])
            ("matplotlib.transforms" include nil nil [1878 1943])
            ("matplotlib.transforms" include nil nil [1944 2012])
            ("matplotlib.offsetbox" include nil nil [2014 2086])
            ("matplotlib.offsetbox" include nil nil [2087 2138])
            ("matplotlib.container" include nil nil [2140 2219])
            ("legend_handler" include nil nil [2227 2248])
            ("DraggableLegend" type
               (:superclasses ("DraggableOffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        update : string
            If \"loc\", update *loc* parameter of legend upon finalizing.
            If \"bbox\", update *bbox_to_anchor* parameter.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2364 2571])
                            ("self" variable nil (reparse-symbol indented_block_body) [2580 2600])
                            ("if" code nil (reparse-symbol indented_block_body) [2610 2798])
                            ("DraggableOffsetBox" code nil (reparse-symbol indented_block_body) [2807 2923]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2311 2315])
                            ("legend" variable nil (reparse-symbol function_parameters) [2317 2323])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [2325 2333])
                            ("update" variable nil (reparse-symbol function_parameters) [2341 2347]))                          
                        :documentation "
        Parameters
        ----------
        update : string
            If \"loc\", update *loc* parameter of legend upon finalizing.
            If \"bbox\", update *bbox_to_anchor* parameter.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2298 2924])
                    ("artist_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2947 2951])
                            ("legend" variable nil (reparse-symbol function_parameters) [2953 2959])
                            ("evt" variable nil (reparse-symbol function_parameters) [2961 2964]))                          )
                        (reparse-symbol indented_block_body) [2929 3008])
                    ("finalize_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3033 3037]))                          )
                        (reparse-symbol indented_block_body) [3013 3393])
                    ("_update_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3414 3418])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [3420 3433]))                          )
                        (reparse-symbol indented_block_body) [3398 3917])
                    ("_update_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3949 3953])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [3955 3968]))                          )
                        (reparse-symbol indented_block_body) [3922 4121]))                  
                :type "class")
                nil [2251 4121])
            ("_legend_kw_doc" variable nil nil [4123 10265])
            ("docstring" code nil nil [10266 10321])
            ("Legend" type
               (:documentation "
    Place a legend on the axes at location loc.

    "
                :superclasses ("Artist")
                :members 
                  ( ("codes" variable nil (reparse-symbol indented_block_body) [10415 10815])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [10821 10831])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10849 10853]))                          )
                        (reparse-symbol indented_block_body) [10837 10880])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"

        Parameters
        ----------
        parent : `.Axes` or `.Figure`
            The artist that contains the legend.

        handles : sequence of `.Artist`
            A list of Artists (lines, patches) to be added to the legend.

        labels : sequence of strings
            A list of labels to show next to the artists. The length of handles
            and labels should be the same. If they are not, they are truncated
            to the smaller of both lengths.

        Other Parameters
        ----------------

        loc : int or string or pair of floats, default: 'upper right'
            The location of the legend. Possible codes are:

                ===============   =============
                Location String   Location Code
                ===============   =============
                'best'            0
                'upper right'     1
                'upper left'      2
                'lower left'      3
                'lower right'     4
                'right'           5
                'center left'     6
                'center right'    7
                'lower center'    8
                'upper center'    9
                'center'          10
                ===============   =============


            Alternatively can be a 2-tuple giving ``x, y`` of the lower-left
            corner of the legend in axes coordinates (in which case
            ``bbox_to_anchor`` will be ignored).

        bbox_to_anchor : `.BboxBase` or pair of floats
            Specify any arbitrary location for the legend in `bbox_transform`
            coordinates (default Axes coordinates).

            For example, to put the legend's upper right hand corner in the
            center of the axes the following keywords can be used::

               loc='upper right', bbox_to_anchor=(0.5, 0.5)

        ncol : integer
            The number of columns that the legend has. Default is 1.

        prop : None or :class:`matplotlib.font_manager.FontProperties` or dict
            The font properties of the legend. If None (default), the current
            :data:`matplotlib.rcParams` will be used.

        fontsize : int or float or {'xx-small', 'x-small', 'small', 'medium', \\
'large', 'x-large', 'xx-large'}
            Controls the font size of the legend. If the value is numeric the
            size will be the absolute font size in points. String values are
            relative to the current default font size. This argument is only
            used if `prop` is not specified.

        numpoints : None or int
            The number of marker points in the legend when creating a legend
            entry for a `.Line2D` (line).
            Default is ``None``, which will take the value from
            :rc:`legend.numpoints`.

        scatterpoints : None or int
            The number of marker points in the legend when creating
            a legend entry for a `.PathCollection` (scatter plot).
            Default is ``None``, which will take the value from
            :rc:`legend.scatterpoints`.

        scatteryoffsets : iterable of floats
            The vertical offset (relative to the font size) for the markers
            created for a scatter plot legend entry. 0.0 is at the base the
            legend text, and 1.0 is at the top. To draw all markers at the
            same height, set to ``[0.5]``. Default is ``[0.375, 0.5, 0.3125]``.

        markerscale : None or int or float
            The relative size of legend markers compared with the originally
            drawn ones.
            Default is ``None``, which will take the value from
            :rc:`legend.markerscale`.

        markerfirst : bool
            If *True*, legend marker is placed to the left of the legend label.
            If *False*, legend marker is placed to the right of the legend
            label.
            Default is *True*.

        frameon : None or bool
            Control whether the legend should be drawn on a patch
            (frame).
            Default is ``None``, which will take the value from
            :rc:`legend.frameon`.

        fancybox : None or bool
            Control whether round edges should be enabled around the
            :class:`~matplotlib.patches.FancyBboxPatch` which makes up the
            legend's background.
            Default is ``None``, which will take the value from
            :rc:`legend.fancybox`.

        shadow : None or bool
            Control whether to draw a shadow behind the legend.
            Default is ``None``, which will take the value from
            :rc:`legend.shadow`.

        framealpha : None or float
            Control the alpha transparency of the legend's background.
            Default is ``None``, which will take the value from
            :rc:`legend.framealpha`.  If shadow is activated and
            *framealpha* is ``None``, the default value is ignored.

        facecolor : None or \"inherit\" or a color spec
            Control the legend's background color.
            Default is ``None``, which will take the value from
            :rc:`legend.facecolor`.  If ``\"inherit\"``, it will take
            :rc:`axes.facecolor`.

        edgecolor : None or \"inherit\" or a color spec
            Control the legend's background patch edge color.
            Default is ``None``, which will take the value from
            :rc:`legend.edgecolor` If ``\"inherit\"``, it will take
            :rc:`axes.edgecolor`.

        mode : {\"expand\", None}
            If `mode` is set to ``\"expand\"`` the legend will be horizontally
            expanded to fill the axes area (or `bbox_to_anchor` if defines
            the legend's size).

        bbox_transform : None or :class:`matplotlib.transforms.Transform`
            The transform for the bounding box (`bbox_to_anchor`). For a value
            of ``None`` (default) the Axes'
            :data:`~matplotlib.axes.Axes.transAxes` transform will be used.

        title : str or None
            The legend's title. Default is no title (``None``).

        borderpad : float or None
            The fractional whitespace inside the legend border.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.borderpad`.

        labelspacing : float or None
            The vertical space between the legend entries.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.labelspacing`.

        handlelength : float or None
            The length of the legend handles.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.handlelength`.

        handletextpad : float or None
            The pad between the legend handle and text.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.handletextpad`.

        borderaxespad : float or None
            The pad between the axes and legend border.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.borderaxespad`.

        columnspacing : float or None
            The spacing between columns.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.columnspacing`.

        handler_map : dict or None
            The custom dictionary mapping instances or types to a legend
            handler. This `handler_map` updates the default handler map
            found at :func:`matplotlib.legend.Legend.get_legend_handler_map`.

        Notes
        -----

        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. bbox_to_anchor can be an instance
        of BboxBase(or its derivatives) or a tuple of 2 or 4 floats.
        See :meth:`set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13127 21378])
                            ("matplotlib.axes" include nil (reparse-symbol indented_block_body) [21436 21468])
                            ("matplotlib.figure" include nil (reparse-symbol indented_block_body) [21477 21513])
                            ("Artist" code nil (reparse-symbol indented_block_body) [21523 21544])
                            ("if" code nil (reparse-symbol indented_block_body) [21554 21987])
                            ("self" variable nil (reparse-symbol indented_block_body) [21996 22043])
                            ("self" variable nil (reparse-symbol indented_block_body) [22053 22068])
                            ("self" variable nil (reparse-symbol indented_block_body) [22077 22100])
                            ("self" variable nil (reparse-symbol indented_block_body) [22109 22138])
                            ("self" variable nil (reparse-symbol indented_block_body) [22241 22279])
                            ("locals_view" variable nil (reparse-symbol indented_block_body) [22289 22311])
                            ("for" code nil (reparse-symbol indented_block_body) [22320 22756])
                            ("del" code nil (reparse-symbol indented_block_body) [22764 22779])
                            ("_lab, _hand" code nil (reparse-symbol indented_block_body) [22842 22862])
                            ("for" code nil (reparse-symbol indented_block_body) [22871 23312])
                            ("labels, handles" code nil (reparse-symbol indented_block_body) [23320 23349])
                            ("handles" variable nil (reparse-symbol indented_block_body) [23359 23382])
                            ("if" code nil (reparse-symbol indented_block_body) [23391 23433])
                            ("self" variable nil (reparse-symbol indented_block_body) [23441 23458])
                            ("if" code nil (reparse-symbol indented_block_body) [23468 23569])
                            ("if" code nil (reparse-symbol indented_block_body) [23639 23820])
                            ("reps" code nil (reparse-symbol indented_block_body) [23828 23887])
                            ("self" variable nil (reparse-symbol indented_block_body) [23896 24017])
                            ("self" variable nil (reparse-symbol indented_block_body) [24181 24204])
                            ("if" code nil (reparse-symbol indented_block_body) [24214 24547])
                            ("self" variable nil (reparse-symbol indented_block_body) [24555 24575])
                            ("if" code nil (reparse-symbol indented_block_body) [24585 24733])
                            ("if" code nil (reparse-symbol indented_block_body) [24741 25469])
                            ("if" code nil (reparse-symbol indented_block_body) [25477 25723])
                            ("self" variable nil (reparse-symbol indented_block_body) [25732 25749])
                            ("self" code nil (reparse-symbol indented_block_body) [25758 25813])
                            ("if" code nil (reparse-symbol indented_block_body) [25964 26039])
                            ("if" code nil (reparse-symbol indented_block_body) [26047 26125])
                            ("if" code nil (reparse-symbol indented_block_body) [26134 26209])
                            ("if" code nil (reparse-symbol indented_block_body) [26217 26295])
                            ("self" variable nil (reparse-symbol indented_block_body) [26304 26531])
                            ("if" code nil (reparse-symbol indented_block_body) [26704 26776])
                            ("if" code nil (reparse-symbol indented_block_body) [26785 26990])
                            ("self" code nil (reparse-symbol indented_block_body) [26999 27039])
                            ("self" variable nil (reparse-symbol indented_block_body) [27049 27074])
                            ("if" code nil (reparse-symbol indented_block_body) [27083 27160])
                            ("self" code nil (reparse-symbol indented_block_body) [27203 27254])
                            ("if" code nil (reparse-symbol indented_block_body) [27363 27612])
                            ("self" variable nil (reparse-symbol indented_block_body) [27621 27636])
                            ("self" code nil (reparse-symbol indented_block_body) [27645 27666])
                            ("self" variable nil (reparse-symbol indented_block_body) [27675 27718])
                            ("self" variable nil (reparse-symbol indented_block_body) [27727 27749]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10928 10932])
                            ("parent" variable nil (reparse-symbol function_parameters) [10934 10940])
                            ("handles" variable nil (reparse-symbol function_parameters) [10942 10949])
                            ("labels" variable nil (reparse-symbol function_parameters) [10951 10957])
                            ("loc" variable nil (reparse-symbol function_parameters) [10976 10979])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [11003 11012])
                            ("markerscale" variable nil (reparse-symbol function_parameters) [11081 11092])
                            ("markerfirst" variable nil (reparse-symbol function_parameters) [11206 11217])
                            ("scatterpoints" variable nil (reparse-symbol function_parameters) [11343 11356])
                            ("scatteryoffsets" variable nil (reparse-symbol function_parameters) [11410 11425])
                            ("prop" variable nil (reparse-symbol function_parameters) [11449 11453])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [11520 11528])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [11668 11677])
                            ("labelspacing" variable nil (reparse-symbol function_parameters) [11748 11760])
                            ("handlelength" variable nil (reparse-symbol function_parameters) [11874 11886])
                            ("handleheight" variable nil (reparse-symbol function_parameters) [11947 11959])
                            ("handletextpad" variable nil (reparse-symbol function_parameters) [12020 12033])
                            ("borderaxespad" variable nil (reparse-symbol function_parameters) [12143 12156])
                            ("columnspacing" variable nil (reparse-symbol function_parameters) [12266 12279])
                            ("ncol" variable nil (reparse-symbol function_parameters) [12331 12335])
                            ("mode" variable nil (reparse-symbol function_parameters) [12380 12384])
                            ("fancybox" variable nil (reparse-symbol function_parameters) [12503 12511])
                            ("shadow" variable nil (reparse-symbol function_parameters) [12632 12638])
                            ("title" variable nil (reparse-symbol function_parameters) [12662 12667])
                            ("framealpha" variable nil (reparse-symbol function_parameters) [12722 12732])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [12775 12784])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [12833 12842])
                            ("bbox_to_anchor" variable nil (reparse-symbol function_parameters) [12892 12906])
                            ("bbox_transform" variable nil (reparse-symbol function_parameters) [12972 12986])
                            ("frameon" variable nil (reparse-symbol function_parameters) [13036 13043])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [13081 13092]))                          
                        :documentation "

        Parameters
        ----------
        parent : `.Axes` or `.Figure`
            The artist that contains the legend.

        handles : sequence of `.Artist`
            A list of Artists (lines, patches) to be added to the legend.

        labels : sequence of strings
            A list of labels to show next to the artists. The length of handles
            and labels should be the same. If they are not, they are truncated
            to the smaller of both lengths.

        Other Parameters
        ----------------

        loc : int or string or pair of floats, default: 'upper right'
            The location of the legend. Possible codes are:

                ===============   =============
                Location String   Location Code
                ===============   =============
                'best'            0
                'upper right'     1
                'upper left'      2
                'lower left'      3
                'lower right'     4
                'right'           5
                'center left'     6
                'center right'    7
                'lower center'    8
                'upper center'    9
                'center'          10
                ===============   =============


            Alternatively can be a 2-tuple giving ``x, y`` of the lower-left
            corner of the legend in axes coordinates (in which case
            ``bbox_to_anchor`` will be ignored).

        bbox_to_anchor : `.BboxBase` or pair of floats
            Specify any arbitrary location for the legend in `bbox_transform`
            coordinates (default Axes coordinates).

            For example, to put the legend's upper right hand corner in the
            center of the axes the following keywords can be used::

               loc='upper right', bbox_to_anchor=(0.5, 0.5)

        ncol : integer
            The number of columns that the legend has. Default is 1.

        prop : None or :class:`matplotlib.font_manager.FontProperties` or dict
            The font properties of the legend. If None (default), the current
            :data:`matplotlib.rcParams` will be used.

        fontsize : int or float or {'xx-small', 'x-small', 'small', 'medium', \\
'large', 'x-large', 'xx-large'}
            Controls the font size of the legend. If the value is numeric the
            size will be the absolute font size in points. String values are
            relative to the current default font size. This argument is only
            used if `prop` is not specified.

        numpoints : None or int
            The number of marker points in the legend when creating a legend
            entry for a `.Line2D` (line).
            Default is ``None``, which will take the value from
            :rc:`legend.numpoints`.

        scatterpoints : None or int
            The number of marker points in the legend when creating
            a legend entry for a `.PathCollection` (scatter plot).
            Default is ``None``, which will take the value from
            :rc:`legend.scatterpoints`.

        scatteryoffsets : iterable of floats
            The vertical offset (relative to the font size) for the markers
            created for a scatter plot legend entry. 0.0 is at the base the
            legend text, and 1.0 is at the top. To draw all markers at the
            same height, set to ``[0.5]``. Default is ``[0.375, 0.5, 0.3125]``.

        markerscale : None or int or float
            The relative size of legend markers compared with the originally
            drawn ones.
            Default is ``None``, which will take the value from
            :rc:`legend.markerscale`.

        markerfirst : bool
            If *True*, legend marker is placed to the left of the legend label.
            If *False*, legend marker is placed to the right of the legend
            label.
            Default is *True*.

        frameon : None or bool
            Control whether the legend should be drawn on a patch
            (frame).
            Default is ``None``, which will take the value from
            :rc:`legend.frameon`.

        fancybox : None or bool
            Control whether round edges should be enabled around the
            :class:`~matplotlib.patches.FancyBboxPatch` which makes up the
            legend's background.
            Default is ``None``, which will take the value from
            :rc:`legend.fancybox`.

        shadow : None or bool
            Control whether to draw a shadow behind the legend.
            Default is ``None``, which will take the value from
            :rc:`legend.shadow`.

        framealpha : None or float
            Control the alpha transparency of the legend's background.
            Default is ``None``, which will take the value from
            :rc:`legend.framealpha`.  If shadow is activated and
            *framealpha* is ``None``, the default value is ignored.

        facecolor : None or \"inherit\" or a color spec
            Control the legend's background color.
            Default is ``None``, which will take the value from
            :rc:`legend.facecolor`.  If ``\"inherit\"``, it will take
            :rc:`axes.facecolor`.

        edgecolor : None or \"inherit\" or a color spec
            Control the legend's background patch edge color.
            Default is ``None``, which will take the value from
            :rc:`legend.edgecolor` If ``\"inherit\"``, it will take
            :rc:`axes.edgecolor`.

        mode : {\"expand\", None}
            If `mode` is set to ``\"expand\"`` the legend will be horizontally
            expanded to fill the axes area (or `bbox_to_anchor` if defines
            the legend's size).

        bbox_transform : None or :class:`matplotlib.transforms.Transform`
            The transform for the bounding box (`bbox_to_anchor`). For a value
            of ``None`` (default) the Axes'
            :data:`~matplotlib.axes.Axes.transAxes` transform will be used.

        title : str or None
            The legend's title. Default is no title (``None``).

        borderpad : float or None
            The fractional whitespace inside the legend border.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.borderpad`.

        labelspacing : float or None
            The vertical space between the legend entries.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.labelspacing`.

        handlelength : float or None
            The length of the legend handles.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.handlelength`.

        handletextpad : float or None
            The pad between the legend handle and text.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.handletextpad`.

        borderaxespad : float or None
            The pad between the axes and legend border.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.borderaxespad`.

        columnspacing : float or None
            The spacing between columns.
            Measured in font-size units.
            Default is ``None``, which will take the value from
            :rc:`legend.columnspacing`.

        handler_map : dict or None
            The custom dictionary mapping instances or types to a legend
            handler. This `handler_map` updates the default handler map
            found at :func:`matplotlib.legend.Legend.get_legend_handler_map`.

        Notes
        -----

        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. bbox_to_anchor can be an instance
        of BboxBase(or its derivatives) or a tuple of 2 or 4 floats.
        See :meth:`set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10885 27750])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27777 27781])
                            ("a" variable nil (reparse-symbol function_parameters) [27783 27784]))                          
                        :documentation "
        Set the boilerplate props for artists added to axes.
        ")
                        (reparse-symbol indented_block_body) [27755 28044])
                    ("_set_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28062 28066])
                            ("loc" variable nil (reparse-symbol function_parameters) [28068 28071]))                          )
                        (reparse-symbol indented_block_body) [28049 28355])
                    ("_get_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28373 28377]))                          )
                        (reparse-symbol indented_block_body) [28360 28410])
                    ("_loc" variable nil (reparse-symbol indented_block_body) [28415 28450])
                    ("_findoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28472 28476])
                            ("width" variable nil (reparse-symbol function_parameters) [28478 28483])
                            ("height" variable nil (reparse-symbol function_parameters) [28485 28491])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [28493 28501])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [28503 28511])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28513 28521]))                          )
                        (reparse-symbol indented_block_body) [28456 29225])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29264 29268])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29270 29278]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29230 30444])
                    ("_approx_text_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30473 30477])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30479 30487]))                          
                        :documentation "
        Return the approximate height of the text. This is used to place
        the legend handle.
        ")
                        (reparse-symbol indented_block_body) [30449 30757])
                    ("_default_handler_map" variable nil (reparse-symbol indented_block_body) [30871 31612])
                    ("get_default_handler_map" function
                       (:documentation "
        A class method that returns the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [31771 31774]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31726 31902])
                    ("set_default_handler_map" function
                       (:documentation "
        A class method to set the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [31952 31955])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [31957 31968]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [31907 32097])
                    ("update_default_handler_map" function
                       (:documentation "
        A class method to update the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [32150 32153])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [32155 32166]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32102 32304])
                    ("get_legend_handler_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32336 32340]))                          
                        :documentation "
        Return the handler map.
        ")
                        (reparse-symbol indented_block_body) [32309 32666])
                    ("get_legend_handler" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("legend_handler_map" variable nil (reparse-symbol function_parameters) [32712 32730])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [32732 32743]))                          
                        :documentation "
        Return a legend handler from *legend_handler_map* that
        corresponds to *orig_handler*.

        *legend_handler_map* should be a dictionary object (that is
        returned by the get_legend_handler_map method).

        It first checks if the *orig_handle* itself is a key in the
        *legend_hanler_map* and return the associated value.
        Otherwise, it checks for each of the classes in its
        method-resolution-order. If no matching key is found, it
        returns ``None``.
        ")
                        (reparse-symbol indented_block_body) [32671 33633])
                    ("_init_legend_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33659 33663])
                            ("handles" variable nil (reparse-symbol function_parameters) [33665 33672])
                            ("labels" variable nil (reparse-symbol function_parameters) [33674 33680])
                            ("markerfirst" variable nil (reparse-symbol function_parameters) [33682 33693]))                          
                        :documentation "
        Initialize the legend_box. The legend_box is an instance of
        the OffsetBox, which is packed with legend handles and
        texts. Once packed, their location is calculated during the
        drawing time.
        ")
                        (reparse-symbol indented_block_body) [33638 39640])
                    ("_auto_legend_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39667 39671]))                          
                        :documentation "
        Returns list of vertices and extents covered by the plot.

        Returns a two long list.

        First element is a list of (x, y) vertices (in
        display-coordinates) covered by all the lines and line
        collections, in the legend's handles.

        Second element is a list of bounding boxes for all the patches in
        the legend's handles.
        ")
                        (reparse-symbol indented_block_body) [39645 41337])
                    ("draw_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41357 41361])
                            ("b" variable nil (reparse-symbol function_parameters) [41363 41364]))                          )
                        (reparse-symbol indented_block_body) [41342 41505])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41527 41531]))                          )
                        (reparse-symbol indented_block_body) [41510 41740])
                    ("get_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41759 41763]))                          )
                        (reparse-symbol indented_block_body) [41745 41899])
                    ("get_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41918 41922]))                          )
                        (reparse-symbol indented_block_body) [41904 42066])
                    ("get_patches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42087 42091]))                          )
                        (reparse-symbol indented_block_body) [42071 42312])
                    ("get_texts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42331 42335]))                          )
                        (reparse-symbol indented_block_body) [42317 42451])
                    ("set_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42470 42474])
                            ("title" variable nil (reparse-symbol function_parameters) [42476 42481])
                            ("prop" variable nil (reparse-symbol function_parameters) [42483 42487]))                          
                        :documentation "
        Set the legend title. Fontproperties can be optionally set
        with *prop* parameter.
        ")
                        (reparse-symbol indented_block_body) [42456 43017])
                    ("get_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43036 43040]))                          )
                        (reparse-symbol indented_block_body) [43022 43147])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43174 43178])
                            ("args" variable nil (reparse-symbol function_parameters) [43180 43185])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43187 43195]))                          )
                        (reparse-symbol indented_block_body) [43152 43304])
                    ("get_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43326 43330]))                          
                        :documentation "Get whether the legend box patch is drawn.")
                        (reparse-symbol indented_block_body) [43309 43421])
                    ("set_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43443 43447])
                            ("b" variable nil (reparse-symbol function_parameters) [43449 43450]))                          
                        :documentation "
        Set whether the legend box patch is drawn.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        ")
                        (reparse-symbol indented_block_body) [43426 43667])
                    ("get_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43695 43699]))                          
                        :documentation "Return the bbox that the legend will be anchored to.")
                        (reparse-symbol indented_block_body) [43672 43900])
                    ("set_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43928 43932])
                            ("bbox" variable nil (reparse-symbol function_parameters) [43934 43938])
                            ("transform" variable nil (reparse-symbol function_parameters) [43940 43949]))                          
                        :documentation "
        Set the bbox that the legend will be anchored to.

        *bbox* can be

        - A `.BboxBase` instance
        - A tuple of ``(left, bottom, width, height)`` in the given transform
          (normalized axes coordinate if None)
        - A tuple of ``(left, bottom)`` where the width and height will be
          assumed to be zero.
        ")
                        (reparse-symbol indented_block_body) [43905 45036])
                    ("_get_anchored_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45064 45068])
                            ("loc" variable nil (reparse-symbol function_parameters) [45070 45073])
                            ("bbox" variable nil (reparse-symbol function_parameters) [45075 45079])
                            ("parentbbox" variable nil (reparse-symbol function_parameters) [45081 45091])
                            ("renderer" variable nil (reparse-symbol function_parameters) [45093 45101]))                          
                        :documentation "
        Place the *bbox* inside the *parentbbox* according to a given
        location code. Return the (x,y) coordinate of the bbox.

        - loc: a location code in range(1, 11).
          This corresponds to the possible values for self._loc, excluding
          \"best\".

        - bbox: bbox to be placed, display coordinate units.
        - parentbbox: a parent box which will contain the bbox. In
            display coordinates.
        ")
                        (reparse-symbol indented_block_body) [45041 46298])
                    ("_find_best_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46327 46331])
                            ("width" variable nil (reparse-symbol function_parameters) [46333 46338])
                            ("height" variable nil (reparse-symbol function_parameters) [46340 46346])
                            ("renderer" variable nil (reparse-symbol function_parameters) [46348 46356])
                            ("consider" variable nil (reparse-symbol function_parameters) [46358 46366]))                          
                        :documentation "
        Determine the best location to place the legend.

        *consider* is a list of ``(x, y)`` pairs to consider as a potential
        lower-left corner of the legend. All are display coords.
        ")
                        (reparse-symbol indented_block_body) [46303 47959])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47977 47981])
                            ("event" variable nil (reparse-symbol function_parameters) [47983 47988]))                          )
                        (reparse-symbol indented_block_body) [47964 48039])
                    ("draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48058 48062])
                            ("state" variable nil (reparse-symbol function_parameters) [48064 48069])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [48076 48084])
                            ("update" variable nil (reparse-symbol function_parameters) [48092 48098]))                          
                        :documentation "
        Set the draggable state -- if state is

          * None : toggle the current state

          * True : turn draggable on

          * False : turn draggable off

        If draggable is on, you can drag the legend on the canvas with
        the mouse. The `.DraggableLegend` helper instance is returned if
        draggable is on.

        The update parameter control which parameter of the legend changes
        when dragged. If update is \"loc\", the *loc* parameter of the legend
        is changed. If \"bbox\", the *bbox_to_anchor* parameter is changed.
        ")
                        (reparse-symbol indented_block_body) [48044 49262]))                  
                :type "class")
                nil [10324 49262])
            ("_get_legend_handles" function
               (:documentation "
    Return a generator of artists that can be used as handles in
    a legend.

    "
                :arguments 
                  ( ("axs" variable nil (reparse-symbol function_parameters) [49379 49382])
                    ("legend_handler_map" variable nil (reparse-symbol function_parameters) [49384 49402]))                  )
                nil [49355 50299])
            ("_get_legend_handles_labels" function
               (:documentation "
    Return handles and labels for legend, internal method.

    "
                :arguments 
                  ( ("axs" variable nil (reparse-symbol function_parameters) [50332 50335])
                    ("legend_handler_map" variable nil (reparse-symbol function_parameters) [50337 50355]))                  )
                nil [50301 50717])
            ("_parse_legend_args" function
               (:documentation "
    Get the handles and labels from the calls to either ``figure.legend``
    or ``axes.legend``.

    ``axs`` is a list of axes (to get legend artists from)
    "
                :arguments 
                  ( ("axs" variable nil (reparse-symbol function_parameters) [50742 50745])
                    ("args" variable nil (reparse-symbol function_parameters) [50747 50752])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [50754 50762]))                  )
                nil [50719 52692]))          
      :file "legend.py"
      :pointmax 52692
      :fsize 52691
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax '((NAME 38815 . 38819) (IF 38831 . 38833) (ELSE 38857 . 38861) (NAME 38528 . 38537) (IF 38551 . 38553) (ELSE 38566 . 38570) (FROM 2220 . 2224) (PERIOD 2225 . 2226)))
    (semanticdb-table "semanticdb-table-deedb0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for parsing and generating fontconfig patterns.

See the `fontconfig pattern specification
<https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_ for
more information.
\"\"\"" code nil nil [1 203])
            ("" code nil nil [531 616])
            ("six" include nil nil [618 628])
            ("re" include nil nil [630 639])
            ("" code nil nil [662 760])
            ("try" code nil nil [762 879])
            ("family_punc" variable nil nil [880 903])
            ("family_unescape" variable nil nil [904 963])
            ("family_escape" variable nil nil [964 1019])
            ("value_punc" variable nil nil [1021 1043])
            ("value_unescape" variable nil nil [1044 1101])
            ("value_escape" variable nil nil [1102 1155])
            ("FontconfigPatternParser" type
               (:documentation "A simple pyparsing-based parser for fontconfig-style patterns.

    See the `fontconfig pattern specification
    <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_
    for more information.
    "
                :superclasses ("object")
                :members 
                  ( ("_constants" variable nil (reparse-symbol indented_block_body) [1429 2665])
                    ("__init__" function
                       (:suite 
                          ( ("family" variable nil (reparse-symbol indented_block_body) [2699 2851])
                            ("size" variable nil (reparse-symbol indented_block_body) [2860 2962])
                            ("name" variable nil (reparse-symbol indented_block_body) [2971 3053])
                            ("value" variable nil (reparse-symbol indented_block_body) [3062 3211])
                            ("families" variable nil (reparse-symbol indented_block_body) [3221 3397])
                            ("point_sizes" variable nil (reparse-symbol indented_block_body) [3407 3582])
                            ("property" variable nil (reparse-symbol indented_block_body) [3592 3913])
                            ("pattern" variable nil (reparse-symbol indented_block_body) [3923 4247])
                            ("self" variable nil (reparse-symbol indented_block_body) [4257 4279])
                            ("self" variable nil (reparse-symbol indented_block_body) [4288 4324]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2684 2688]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2671 4325])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4340 4344])
                            ("pattern" variable nil (reparse-symbol function_parameters) [4346 4353]))                          
                        :documentation "
        Parse the given fontconfig *pattern* and return a dictionary
        of key/value pairs useful for initializing a
        :class:`font_manager.FontProperties` object.
        ")
                        (reparse-symbol indented_block_body) [4330 4885])
                    ("_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4902 4906])
                            ("s" variable nil (reparse-symbol function_parameters) [4908 4909])
                            ("loc" variable nil (reparse-symbol function_parameters) [4911 4914])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4916 4922]))                          )
                        (reparse-symbol indented_block_body) [4890 4981])
                    ("_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4996 5000])
                            ("s" variable nil (reparse-symbol function_parameters) [5002 5003])
                            ("loc" variable nil (reparse-symbol function_parameters) [5005 5008])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5010 5016]))                          )
                        (reparse-symbol indented_block_body) [4986 5053])
                    ("_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5068 5072])
                            ("s" variable nil (reparse-symbol function_parameters) [5074 5075])
                            ("loc" variable nil (reparse-symbol function_parameters) [5077 5080])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5082 5088]))                          )
                        (reparse-symbol indented_block_body) [5058 5123])
                    ("_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5139 5143])
                            ("s" variable nil (reparse-symbol function_parameters) [5145 5146])
                            ("loc" variable nil (reparse-symbol function_parameters) [5148 5151])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5153 5159]))                          )
                        (reparse-symbol indented_block_body) [5128 5217])
                    ("_families" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5236 5240])
                            ("s" variable nil (reparse-symbol function_parameters) [5242 5243])
                            ("loc" variable nil (reparse-symbol function_parameters) [5245 5248])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5250 5256]))                          )
                        (reparse-symbol indented_block_body) [5222 5339])
                    ("_point_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5361 5365])
                            ("s" variable nil (reparse-symbol function_parameters) [5367 5368])
                            ("loc" variable nil (reparse-symbol function_parameters) [5370 5373])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5375 5381]))                          )
                        (reparse-symbol indented_block_body) [5344 5462])
                    ("_property" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5481 5485])
                            ("s" variable nil (reparse-symbol function_parameters) [5487 5488])
                            ("loc" variable nil (reparse-symbol function_parameters) [5490 5493])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5495 5501]))                          )
                        (reparse-symbol indented_block_body) [5467 5847]))                  
                :type "class")
                nil [1157 5847])
            ("parse_fontconfig_pattern" variable nil nil [6102 6173])
            ("generate_fontconfig_pattern" function
               (:documentation "
    Given a dictionary of key/value pairs, generates a fontconfig
    pattern string.
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [6208 6209]))                  )
                nil [6176 6801]))          
      :file "fontconfig_pattern.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(23240 23001 121461 0)
      :unmatched-syntax '((INDENT_BLOCK 4693 . 4795) (NEWLINE 4692 . 4693) (COLON 4691 . 4692) (TRY 4601 . 4604) (AS 4687 . 4689)))
    (semanticdb-table "semanticdb-table-151387c"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("matplotlib" include nil nil [123 151])
            ("sys" include nil nil [152 162])
            ("types" include nil nil [163 175])
            ("Substitution" type
               (:documentation "
    A decorator to take a function's docstring and perform string
    substitution on it.

    This decorator should be robust even if func.__doc__ is None
    (for example, if -OO was passed to the interpreter)

    Usage: construct a docstring.Substitution with a sequence or
    dictionary suitable for performing substitution; then
    decorate a suitable function with the constructed object. e.g.

    sub_author_name = Substitution(author='Jason')

    @sub_author_name
    def some_function(x):
        \"%(author)s wrote this function\"

    # note that some_function.__doc__ is now \"Jason wrote this function\"

    One can also use positional arguments.

    sub_first_last_names = Substitution('Edgar Allen', 'Poe')

    @sub_first_last_names
    def some_function(x):
        \"%s %s wrote the Raven\"
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("assert" code nil (reparse-symbol indented_block_body) [1081 1184])
                            ("self" code nil (reparse-symbol indented_block_body) [1193 1221]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1049 1053])
                            ("args" variable nil (reparse-symbol function_parameters) [1055 1060])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1062 1070]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1036 1222])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1240 1244])
                            ("func" variable nil (reparse-symbol function_parameters) [1246 1250]))                          )
                        (reparse-symbol indented_block_body) [1227 1340])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1356 1360])
                            ("args" variable nil (reparse-symbol function_parameters) [1362 1367])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1369 1377]))                          )
                        (reparse-symbol indented_block_body) [1345 1496])
                    ("from_params" function
                       (:documentation "
        In the case where the params is a mutable sequence (list or
        dictionary) and it may change before this class is called, one may
        explicitly use a reference to the params rather than using *args or
        **kwargs which will copy the values and not reference them.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1534 1537])
                            ("params" variable nil (reparse-symbol function_parameters) [1539 1545]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1501 1935]))                  
                :type "class")
                nil [178 1935])
            ("Appender" type
               (:documentation "
    A function decorator that will append an addendum to the docstring
    of the target function.

    This decorator should be robust even if func.__doc__ is None
    (for example, if -OO was passed to the interpreter).

    Usage: construct a docstring.Appender with a string to be joined to
    the original docstring. An optional 'join' parameter may be supplied
    which will be used to join the docstring and addendum. e.g.

    add_copyright = Appender(\"Copyright (c) 2009\", join='\\n')

    @add_copyright
    def my_dog(has='fleas'):
        \"This docstring will have a copyright below\"
        pass
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2638 2662])
                            ("self" variable nil (reparse-symbol indented_block_body) [2671 2687]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2604 2608])
                            ("addendum" variable nil (reparse-symbol function_parameters) [2610 2618])
                            ("join" variable nil (reparse-symbol function_parameters) [2620 2624]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2591 2688])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2706 2710])
                            ("func" variable nil (reparse-symbol function_parameters) [2712 2716]))                          )
                        (reparse-symbol indented_block_body) [2693 2853]))                  
                :type "class")
                nil [1937 2853])
            ("dedent" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2866 2870]))              ) nil [2855 2990])
            ("copy" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [3001 3007]))              ) nil [2992 3212])
            ("interpd" variable nil nil [3316 3340])
            ("dedent_interpd" function
               (:documentation "A special case of the interpd that first performs a dedent on
    the incoming docstring"
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [3362 3366]))                  )
                nil [3343 3588])
            ("copy_dedent" function
               (:documentation "A decorator that will copy the docstring from the source and
    then dedent it"
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [3606 3612]))                  )
                nil [3590 3996]))          
      :file "docstring.py"
      :pointmax 3996
      :fsize 3995
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-152ad6c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Nothing here but dictionaries for generating LinearSegmentedColormaps,
and a dictionary of these dictionaries.

Documentation for each is in pyplot.colormaps().  Please update this
with the purpose and type of your colormap if you add data for one here.
\"\"\"" code nil nil [1 262])
            ("" code nil nil [287 372])
            ("numpy" include nil nil [374 392])
            ("_binary_data" variable nil nil [394 547])
            ("_autumn_data" variable nil nil [549 722])
            ("_bone_data" variable nil nil [724 1187])
            ("_cool_data" variable nil nil [1189 1354])
            ("_copper_data" variable nil nil [1356 1677])
            ("_flag_data" variable nil nil [1679 1895])
            ("_prism_data" variable nil nil [1897 2125])
            ("cubehelix" function
               (:documentation "Return custom data dictionary of (r,g,b) conversion functions, which
    can be used with :func:`register_cmap`, for the cubehelix color scheme.

    Unlike most other color schemes cubehelix was designed by D.A. Green to
    be monotonically increasing in terms of perceived brightness.
    Also, when printed on a black and white postscript printer, the scheme
    results in a greyscale with monotonically increasing brightness.
    This color scheme is named cubehelix because the r,g,b values produced
    can be visualised as a squashed helix around the diagonal in the
    r,g,b color cube.

    For a unit color cube (i.e. 3-D coordinates for r,g,b each in the
    range 0 to 1) the color scheme starts at (r,g,b) = (0,0,0), i.e. black,
    and finishes at (r,g,b) = (1,1,1), i.e. white. For some fraction *x*,
    between 0 and 1, the color is the corresponding grey value at that
    fraction along the black to white diagonal (x,x,x) plus a color
    element. This color element is calculated in a plane of constant
    perceived intensity and controlled by the following parameters.

    Optional keyword arguments:

      =========   =======================================================
      Keyword     Description
      =========   =======================================================
      gamma       gamma factor to emphasise either low intensity values
                  (gamma < 1), or high intensity values (gamma > 1);
                  defaults to 1.0.
      s           the start color; defaults to 0.5 (i.e. purple).
      r           the number of r,g,b rotations in color that are made
                  from the start to the end of the color scheme; defaults
                  to -1.5 (i.e. -> B -> G -> R -> B).
      h           the hue parameter which controls how saturated the
                  colors are. If this parameter is zero then the color
                  scheme is purely a greyscale; defaults to 1.0.
      =========   =======================================================

    "
                :arguments 
                  ( ("gamma" variable nil (reparse-symbol function_parameters) [2142 2147])
                    ("s" variable nil (reparse-symbol function_parameters) [2153 2154])
                    ("r" variable nil (reparse-symbol function_parameters) [2160 2161])
                    ("h" variable nil (reparse-symbol function_parameters) [2168 2169]))                  )
                nil [2128 4913])
            ("_cubehelix_data" variable nil nil [4914 4943])
            ("_bwr_data" variable nil nil [4945 5008])
            ("_brg_data" variable nil nil [5009 5072])
            ("gfunc" variable nil nil [5102 6534])
            ("gfunc32" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6549 6550]))              ) nil [6537 6751])
            ("_gnuplot_data" variable nil nil [6752 6850])
            ("_gnuplot2_data" variable nil nil [6852 6953])
            ("_ocean_data" variable nil nil [6955 7052])
            ("_afmhot_data" variable nil nil [7054 7153])
            ("_rainbow_data" variable nil nil [7155 7255])
            ("_seismic_data" variable nil nil [7257 7383])
            ("_terrain_data" variable nil nil [7385 7602])
            ("_gray_data" variable nil nil [7604 7750])
            ("_hot_data" variable nil nil [7752 8213])
            ("_hsv_data" variable nil nil [8215 9444])
            ("_jet_data" variable nil nil [9446 9811])
            ("_pink_data" variable nil nil [9813 20332])
            ("_spring_data" variable nil nil [20334 20507])
            ("_summer_data" variable nil nil [20510 20687])
            ("_winter_data" variable nil nil [20690 20863])
            ("_nipy_spectral_data" variable nil nil [20865 22628])
            ("_Blues_data" variable nil nil [23014 23673])
            ("_BrBG_data" variable nil nil [23675 24475])
            ("_BuGn_data" variable nil nil [24477 25135])
            ("_BuPu_data" variable nil nil [25137 25795])
            ("_GnBu_data" variable nil nil [25797 26455])
            ("_Greens_data" variable nil nil [26457 27117])
            ("_Greys_data" variable nil nil [27119 27778])
            ("_Oranges_data" variable nil nil [27780 28441])
            ("_OrRd_data" variable nil nil [28443 29101])
            ("_PiYG_data" variable nil nil [29103 29903])
            ("_PRGn_data" variable nil nil [29905 30705])
            ("_PuBu_data" variable nil nil [30707 31365])
            ("_PuBuGn_data" variable nil nil [31367 32027])
            ("_PuOr_data" variable nil nil [32029 32829])
            ("_PuRd_data" variable nil nil [32831 33489])
            ("_Purples_data" variable nil nil [33491 34152])
            ("_RdBu_data" variable nil nil [34154 34954])
            ("_RdGy_data" variable nil nil [34956 35756])
            ("_RdPu_data" variable nil nil [35758 36416])
            ("_RdYlBu_data" variable nil nil [36418 37209])
            ("_RdYlGn_data" variable nil nil [37211 38002])
            ("_Reds_data" variable nil nil [38004 38653])
            ("_Spectral_data" variable nil nil [38655 39448])
            ("_YlGn_data" variable nil nil [39450 40099])
            ("_YlGnBu_data" variable nil nil [40101 40752])
            ("_YlOrBr_data" variable nil nil [40754 41405])
            ("_YlOrRd_data" variable nil nil [41407 42058])
            ("_Accent_data" variable nil nil [42162 42736])
            ("_Dark2_data" variable nil nil [42738 43311])
            ("_Paired_data" variable nil nil [43313 44163])
            ("_Pastel1_data" variable nil nil [44165 44809])
            ("_Pastel2_data" variable nil nil [44811 45386])
            ("_Set1_data" variable nil nil [45388 46013])
            ("_Set2_data" variable nil nil [46015 46587])
            ("_Set3_data" variable nil nil [46589 47437])
            ("_gist_earth_data" variable nil nil [47950 49058])
            ("_gist_gray_data" variable nil nil [49060 49159])
            ("_gist_heat_data" variable nil nil [49161 49291])
            ("_gist_ncar_data" variable nil nil [49293 50559])
            ("_gist_rainbow_data" variable nil nil [50561 50880])
            ("_gist_stern_data" variable nil nil [50882 51253])
            ("_gist_yarg_data" variable nil nil [51255 51375])
            ("_coolwarm_data" variable nil nil [51566 55957])
            ("_CMRmap_data" variable nil nil [56176 57475])
            ("_wistia_data" variable nil nil [57884 58605])
            ("_tab10_data" variable nil nil [58707 59524])
            ("_tab20_data" variable nil nil [59526 61143])
            ("_tab20b_data" variable nil nil [61145 62743])
            ("_tab20c_data" variable nil nil [62745 64363])
            ("datad" variable nil nil [64366 66603]))          
      :file "_cm.py"
      :pointmax 66604
      :fsize 66603
      :lastmodtime '(23240 23001 113461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1561f14"
      :major-mode python-mode
      :tags 
        '( ("ListedColormap" include nil nil [14 35])
            ("_magma_data" variable nil nil [37 12068])
            ("_inferno_data" variable nil nil [12070 24613])
            ("_plasma_data" variable nil nil [24615 36902])
            ("_viridis_data" variable nil nil [36904 49447])
            ("_cividis_data" variable nil nil [49449 61992])
            ("cmaps" variable nil nil [61994 62004])
            ("for" code nil nil [62005 62418]))          
      :file "_cm_listed.py"
      :pointmax 62418
      :fsize 62417
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax '((PERIOD 6 . 7)))
    (semanticdb-table "semanticdb-table-15ef6c0"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for finding, managing, and using fonts across platforms.

This module provides a single :class:`FontManager` instance that can
be shared across backends and platforms.  The :func:`findfont`
function returns the best TrueType (TTF) font file in the local or
system font path that matches the specified :class:`FontProperties`
instance.  The :class:`FontManager` also handles Adobe Font Metrics
(AFM) font files for use by the PostScript backend.

The design is based on the `W3C Cascading Style Sheet, Level 1 (CSS1)
font specification <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_.
Future versions may implement the Level 2 or 2.1 specifications.

Experimental support is included for using `fontconfig` on Unix
variant platforms (Linux, OS X, Solaris).  To enable it, set the
constant ``USE_FONTCONFIG`` in this file to ``True``.  Fontconfig has
the advantage that it is the standard way to look up fonts on X11
platforms, so if a font is installed, it is much more likely to be
found.
\"\"\"" code nil nil [1 1007])
            ("__future__" include nil nil [1008 1072])
            ("six" include nil nil [1074 1084])
            ("\"\"\"
KNOWN ISSUES

  - documentation
  - font variant is untested
  - font stretch is incomplete
  - font size is incomplete
  - default font algorithm needs improvement and testing
  - setWeights function needs improvement
  - 'light' is an invalid weight value, remove it.
  - update_fonts not implemented

Authors   : John Hunter <jdhunter@ace.bsd.uchicago.edu>
            Paul Barrett <Barrett@STScI.Edu>
            Michael Droettboom <mdroe@STScI.edu>
Copyright : John Hunter (2004,2005), Paul Barrett (2004,2005)
License   : matplotlib license (PSF compatible)
            The font directory code is from ttfquery,
            see license/LICENSE_TTFQUERY.
\"\"\"" code nil nil [1086 1753])
            ("collections" include nil nil [1755 1787])
            ("json" include nil nil [1788 1799])
            ("os" include nil nil [1800 1809])
            ("sys" include nil nil [1810 1820])
            ("threading" include nil nil [1821 1848])
            ("warnings" include nil nil [1849 1864])
            ("logging" include nil nil [1865 1879])
            ("matplotlib" include nil nil [1881 1947])
            ("matplotlib.compat" include nil nil [1948 1988])
            ("" code nil nil [2031 2091])
            ("try" code nil nil [2093 2210])
            ("_log" variable nil nil [2211 2245])
            ("USE_FONTCONFIG" variable nil nil [2247 2269])
            ("font_scalings" variable nil nil [2271 2522])
            ("stretch_dict" variable nil nil [2524 2801])
            ("weight_dict" variable nil nil [2803 3154])
            ("font_family_aliases" variable nil nil [3156 3287])
            ("MSFolders" variable nil nil [3306 3391])
            ("MSFontDirectories" variable nil nil [3394 3530])
            ("X11FontDirectories" variable nil nil [3533 3922])
            ("OSXFontDirectories" variable nil nil [3924 4103])
            ("if" code nil nil [4105 4421])
            ("get_fontext_synonyms" function
               (:documentation "
    Return a list of file extensions extensions that are synonyms for
    the given file extension *fileext*.
    "
                :arguments 
                  ( ("fontext" variable nil (reparse-symbol function_parameters) [4448 4455]))                  )
                nil [4423 4692])
            ("list_fonts" function
               (:documentation "
    Return a list of all fonts matching any of the extensions,
    possibly upper-cased, found recursively under the directory.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [4709 4718])
                    ("extensions" variable nil (reparse-symbol function_parameters) [4720 4730]))                  )
                nil [4694 5029])
            ("win32FontDirectory" function (:documentation "
    Return the user-specified font directory for Win32.  This is
    looked up from the registry key::

      \\\\\\\\HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Shell Folders\\\\Fonts

    If the key is not found, $WINDIR/Fonts will be returned.
    ") nil [5031 5918])
            ("win32InstalledFonts" function
               (:documentation "
    Search for fonts in the specified font directory, or use the
    system directories if none given.  A list of TrueType font
    filenames are returned by default, or AFM fonts if *fontext* ==
    'afm'.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [5944 5953])
                    ("fontext" variable nil (reparse-symbol function_parameters) [5960 5967]))                  )
                nil [5920 7625])
            ("OSXInstalledFonts" function
               (:documentation "
    Get list of font files on OS X - ignores font suffix by default.
    "
                :arguments 
                  ( ("directories" variable nil (reparse-symbol function_parameters) [7649 7660])
                    ("fontext" variable nil (reparse-symbol function_parameters) [7667 7674]))                  )
                nil [7627 8091])
            ("" code nil nil [8103 8105])
            ("_call_fc_list" function (:documentation "Cache and list the font filenames known to `fc-list`.
    ") nil [8106 8821])
            ("get_fontconfig_fonts" function
               (:documentation "List the font filenames known to `fc-list` having the given extension.
    "
                :arguments 
                  ( ("fontext" variable nil (reparse-symbol function_parameters) [8848 8855]))                  )
                nil [8823 9099])
            ("findSystemFonts" function
               (:documentation "
    Search for fonts in the specified font paths.  If no paths are
    given, will use a standard set of system paths, as well as the
    list of fonts tracked by fontconfig if fontconfig is installed and
    available.  A list of TrueType fonts are returned by default with
    AFM fonts as an option.
    "
                :arguments 
                  ( ("fontpaths" variable nil (reparse-symbol function_parameters) [9121 9130])
                    ("fontext" variable nil (reparse-symbol function_parameters) [9137 9144]))                  )
                nil [9101 10572])
            ("" code nil nil [10591 10598])
            ("weight_as_number" function
               (:documentation "
    Return the weight property as a numeric value.  String values
    are converted to their corresponding numeric value.
    "
                :arguments 
                  ( ("weight" variable nil (reparse-symbol function_parameters) [10620 10626]))                  )
                nil [10599 11062])
            ("FontEntry" type
               (:documentation "
    A class for storing Font properties.  It is used when populating
    the font lookup dictionary.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11490 11510])
                            ("self" variable nil (reparse-symbol indented_block_body) [11519 11538])
                            ("self" variable nil (reparse-symbol indented_block_body) [11547 11567])
                            ("self" variable nil (reparse-symbol indented_block_body) [11576 11598])
                            ("self" variable nil (reparse-symbol indented_block_body) [11607 11628])
                            ("self" variable nil (reparse-symbol indented_block_body) [11637 11659])
                            ("try" code nil (reparse-symbol indented_block_body) [11668 11770]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11223 11227])
                            ("fname" variable nil (reparse-symbol function_parameters) [11246 11251])
                            ("name" variable nil (reparse-symbol function_parameters) [11275 11279])
                            ("style" variable nil (reparse-symbol function_parameters) [11304 11309])
                            ("variant" variable nil (reparse-symbol function_parameters) [11339 11346])
                            ("weight" variable nil (reparse-symbol function_parameters) [11374 11380])
                            ("stretch" variable nil (reparse-symbol function_parameters) [11409 11416])
                            ("size" variable nil (reparse-symbol function_parameters) [11444 11448]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11210 11770])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11788 11792]))                          )
                        (reparse-symbol indented_block_body) [11775 11963]))                  
                :type "class")
                nil [11064 11963])
            ("ttfFontProperty" function
               (:documentation "
    Extract information from a TrueType font file.

    Parameters
    ----------
    font : `.FT2Font`
        The TrueType font file from which information will be extracted.

    Returns
    -------
    `FontEntry`
        The extracted font properties.

    "
                :arguments 
                  ( ("font" variable nil (reparse-symbol function_parameters) [11985 11989]))                  )
                nil [11965 14472])
            ("afmFontProperty" function
               (:documentation "
    Extract information from an AFM font file.

    Parameters
    ----------
    font : `.AFM`
        The AFM font file from which information will be extracted.

    Returns
    -------
    `FontEntry`
        The extracted font properties.

    "
                :arguments 
                  ( ("fontpath" variable nil (reparse-symbol function_parameters) [14494 14502])
                    ("font" variable nil (reparse-symbol function_parameters) [14504 14508]))                  )
                nil [14474 16458])
            ("createFontList" function
               (:documentation "
    A function to create a font lookup list.  The default is to create
    a list of TrueType fonts.  An AFM font list can optionally be
    created.
    "
                :arguments 
                  ( ("fontfiles" variable nil (reparse-symbol function_parameters) [16479 16488])
                    ("fontext" variable nil (reparse-symbol function_parameters) [16490 16497]))                  )
                nil [16460 18177])
            ("FontProperties" type
               (:documentation "
    A class for storing and manipulating font properties.

    The font properties are those described in the `W3C Cascading
    Style Sheet, Level 1
    <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ font
    specification.  The six properties are:

      - family: A list of font names in decreasing order of priority.
        The items may include a generic font family name, either
        'serif', 'sans-serif', 'cursive', 'fantasy', or 'monospace'.
        In that case, the actual font to be used will be looked up
        from the associated rcParam in :file:`matplotlibrc`.

      - style: Either 'normal', 'italic' or 'oblique'.

      - variant: Either 'normal' or 'small-caps'.

      - stretch: A numeric value in the range 0-1000 or one of
        'ultra-condensed', 'extra-condensed', 'condensed',
        'semi-condensed', 'normal', 'semi-expanded', 'expanded',
        'extra-expanded' or 'ultra-expanded'

      - weight: A numeric value in the range 0-1000 or one of
        'ultralight', 'light', 'normal', 'regular', 'book', 'medium',
        'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',
        'extra bold', 'black'

      - size: Either an relative value of 'xx-small', 'x-small',
        'small', 'medium', 'large', 'x-large', 'xx-large' or an
        absolute font size, e.g., 12

    The default font property for TrueType fonts (as specified in the
    default :file:`matplotlibrc` file) is::

      sans-serif, normal, normal, normal, normal, scalable.

    Alternatively, a font may be specified using an absolute path to a
    .ttf file, by using the *fname* kwarg.

    The preferred usage of font sizes is to use the relative values,
    e.g.,  'large', instead of absolute font sizes, e.g., 12.  This
    approach allows all text sizes to be made larger or smaller based
    on the font manager's default font size.

    This class will also accept a `fontconfig
    <https://www.freedesktop.org/wiki/Software/fontconfig/>`_ pattern, if it is
    the only argument provided.  See the documentation on `fontconfig patterns
    <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_.
    This support does not require fontconfig to be installed.  We are merely
    borrowing its pattern syntax for use here.

    Note that matplotlib's internal font manager and fontconfig use a
    different algorithm to lookup fonts, so the results of the same pattern
    may be different in matplotlib than in other applications that use
    fontconfig.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [21114 21176])
                            ("self" variable nil (reparse-symbol indented_block_body) [21185 21221])
                            ("self" variable nil (reparse-symbol indented_block_body) [21230 21270])
                            ("self" variable nil (reparse-symbol indented_block_body) [21279 21317])
                            ("self" variable nil (reparse-symbol indented_block_body) [21326 21366])
                            ("self" variable nil (reparse-symbol indented_block_body) [21375 21409])
                            ("self" variable nil (reparse-symbol indented_block_body) [21418 21435])
                            ("if" code nil (reparse-symbol indented_block_body) [21483 21573])
                            ("if" code nil (reparse-symbol indented_block_body) [21582 22007])
                            ("self" code nil (reparse-symbol indented_block_body) [22016 22039])
                            ("self" code nil (reparse-symbol indented_block_body) [22048 22069])
                            ("self" code nil (reparse-symbol indented_block_body) [22078 22103])
                            ("self" code nil (reparse-symbol indented_block_body) [22112 22135])
                            ("self" code nil (reparse-symbol indented_block_body) [22144 22169])
                            ("self" code nil (reparse-symbol indented_block_body) [22178 22198])
                            ("self" code nil (reparse-symbol indented_block_body) [22207 22226]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20750 20754])
                            ("family" variable nil (reparse-symbol function_parameters) [20773 20779])
                            ("style" variable nil (reparse-symbol function_parameters) [20805 20810])
                            ("variant" variable nil (reparse-symbol function_parameters) [20837 20844])
                            ("weight" variable nil (reparse-symbol function_parameters) [20869 20875])
                            ("stretch" variable nil (reparse-symbol function_parameters) [20901 20908])
                            ("size" variable nil (reparse-symbol function_parameters) [20933 20937])
                            ("fname" variable nil (reparse-symbol function_parameters) [20965 20970])
                            ("_init" variable nil (reparse-symbol function_parameters) [21048 21053]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20737 22227])
                    ("_parse_fontconfig_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22262 22266])
                            ("pattern" variable nil (reparse-symbol function_parameters) [22268 22275]))                          )
                        (reparse-symbol indented_block_body) [22232 22327])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22345 22349]))                          )
                        (reparse-symbol indented_block_body) [22332 22613])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22629 22633])
                            ("other" variable nil (reparse-symbol function_parameters) [22635 22640]))                          )
                        (reparse-symbol indented_block_body) [22618 22684])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22700 22704])
                            ("other" variable nil (reparse-symbol function_parameters) [22706 22711]))                          )
                        (reparse-symbol indented_block_body) [22689 22755])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22772 22776]))                          )
                        (reparse-symbol indented_block_body) [22760 22824])
                    ("get_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22844 22848]))                          
                        :documentation "
        Return a list of font names that comprise the font family.
        ")
                        (reparse-symbol indented_block_body) [22829 22970])
                    ("get_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22988 22992]))                          
                        :documentation "
        Return the name of the font that best matches the font
        properties.
        ")
                        (reparse-symbol indented_block_body) [22975 23154])
                    ("get_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23173 23177]))                          
                        :documentation "
        Return the font style.  Values are: 'normal', 'italic' or
        'oblique'.
        ")
                        (reparse-symbol indented_block_body) [23159 23316])
                    ("get_slant" variable nil (reparse-symbol indented_block_body) [23320 23341])
                    ("get_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23363 23367]))                          
                        :documentation "
        Return the font variant.  Values are: 'normal' or
        'small-caps'.
        ")
                        (reparse-symbol indented_block_body) [23347 23503])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23523 23527]))                          
                        :documentation "
        Set the font weight.  Options are: A numeric value in the
        range 0-1000 or one of 'light', 'normal', 'regular', 'book',
        'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold',
        'heavy', 'extra bold', 'black'
        ")
                        (reparse-symbol indented_block_body) [23508 23823])
                    ("get_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23844 23848]))                          
                        :documentation "
        Return the font stretch or width.  Options are: 'ultra-condensed',
        'extra-condensed', 'condensed', 'semi-condensed', 'normal',
        'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'.
        ")
                        (reparse-symbol indented_block_body) [23828 24120])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24138 24142]))                          
                        :documentation "
        Return the font size.
        ")
                        (reparse-symbol indented_block_body) [24125 24225])
                    ("get_size_in_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24253 24257]))                          )
                        (reparse-symbol indented_block_body) [24230 24286])
                    ("get_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24304 24308]))                          
                        :documentation "
        Return the filename of the associated font.
        ")
                        (reparse-symbol indented_block_body) [24291 24413])
                    ("get_fontconfig_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24445 24449]))                          
                        :documentation "
        Get a fontconfig pattern suitable for looking up the font as
        specified with fontconfig's ``fc-match`` utility.

        See the documentation on `fontconfig patterns
        <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_.

        This support does not require fontconfig to be installed or
        support for it to be enabled.  We are merely borrowing its
        pattern syntax for use here.
        ")
                        (reparse-symbol indented_block_body) [24418 24962])
                    ("set_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24982 24986])
                            ("family" variable nil (reparse-symbol function_parameters) [24988 24994]))                          
                        :documentation "
        Change the font family.  May be either an alias (generic name
        is CSS parlance), such as: 'serif', 'sans-serif', 'cursive',
        'fantasy', or 'monospace', a real font name or a list of real
        font names.  Real font names are not supported when
        `text.usetex` is `True`.
        ")
                        (reparse-symbol indented_block_body) [24967 25449])
                    ("set_name" variable nil (reparse-symbol indented_block_body) [25453 25474])
                    ("set_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25494 25498])
                            ("style" variable nil (reparse-symbol function_parameters) [25500 25505]))                          
                        :documentation "
        Set the font style.  Values are: 'normal', 'italic' or
        'oblique'.
        ")
                        (reparse-symbol indented_block_body) [25480 25840])
                    ("set_slant" variable nil (reparse-symbol indented_block_body) [25844 25865])
                    ("set_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25887 25891])
                            ("variant" variable nil (reparse-symbol function_parameters) [25893 25900]))                          
                        :documentation "
        Set the font variant.  Values are: 'normal' or 'small-caps'.
        ")
                        (reparse-symbol indented_block_body) [25871 26224])
                    ("set_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26244 26248])
                            ("weight" variable nil (reparse-symbol function_parameters) [26250 26256]))                          
                        :documentation "
        Set the font weight.  May be either a numeric value in the
        range 0-1000 or one of 'ultralight', 'light', 'normal',
        'regular', 'book', 'medium', 'roman', 'semibold', 'demibold',
        'demi', 'bold', 'heavy', 'extra bold', 'black'
        ")
                        (reparse-symbol indented_block_body) [26229 26889])
                    ("set_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26910 26914])
                            ("stretch" variable nil (reparse-symbol function_parameters) [26916 26923]))                          
                        :documentation "
        Set the font stretch or width.  Options are: 'ultra-condensed',
        'extra-condensed', 'condensed', 'semi-condensed', 'normal',
        'semi-expanded', 'expanded', 'extra-expanded' or
        'ultra-expanded', or a numeric value in the range 0-1000.
        ")
                        (reparse-symbol indented_block_body) [26894 27575])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27593 27597])
                            ("size" variable nil (reparse-symbol function_parameters) [27599 27603]))                          
                        :documentation "
        Set the font size.  Either an relative value of 'xx-small',
        'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'
        or an absolute font size, e.g., 12.
        ")
                        (reparse-symbol indented_block_body) [27580 28471])
                    ("set_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28489 28493])
                            ("file" variable nil (reparse-symbol function_parameters) [28495 28499]))                          
                        :documentation "
        Set the filename of the fontfile to use.  In this case, all
        other properties will be ignored.
        ")
                        (reparse-symbol indented_block_body) [28476 28662])
                    ("set_fontconfig_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28694 28698])
                            ("pattern" variable nil (reparse-symbol function_parameters) [28700 28707]))                          
                        :documentation "
        Set the properties by parsing a fontconfig *pattern*.

        See the documentation on `fontconfig patterns
        <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_.

        This support does not require fontconfig to be installed or
        support for it to be enabled.  We are merely borrowing its
        pattern syntax for use here.
        ")
                        (reparse-symbol indented_block_body) [28667 29339])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29353 29357]))                          
                        :documentation "Return a deep copy of self")
                        (reparse-symbol indented_block_body) [29344 29443]))                  
                :type "class")
                nil [18179 29443])
            ("" code nil nil [29462 29469])
            ("ttfdict_to_fnames" function
               (:documentation "
    flatten a ttfdict to all the filenames it contains
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [29492 29493]))                  )
                nil [29470 29964])
            ("JSONEncoder" type
               (:superclasses ("json.JSONEncoder")
                :members 
                  ( ("default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30019 30023])
                            ("o" variable nil (reparse-symbol function_parameters) [30025 30026]))                          )
                        (reparse-symbol indented_block_body) [30007 30290]))                  
                :type "class")
                nil [29966 30290])
            ("_json_decode" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [30309 30310]))              ) nil [30292 30704])
            ("json_dump" function
               (:documentation "Dumps a data structure as JSON in the named file.
    Handles FontManager and its fields."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [30720 30724])
                    ("filename" variable nil (reparse-symbol function_parameters) [30726 30734]))                  )
                nil [30706 31042])
            ("json_load" function
               (:documentation "Loads a data structure as JSON from the named file.
    Handles FontManager and its fields."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [31057 31065]))                  )
                nil [31043 31262])
            ("_normalize_font_family" function (:arguments 
              ( ("family" variable nil (reparse-symbol function_parameters) [31291 31297]))              ) nil [31264 31495])
            ("TempCache" type
               (:documentation "
    A class to store temporary caches that are (a) not saved to disk
    and (b) invalidated whenever certain font-related
    rcParams---namely the family lookup lists---are changed or the
    font cache is reloaded.  This avoids the expensive linear search
    through all fonts every time a font is looked up.
    "
                :superclasses ("object")
                :members 
                  ( ("invalidating_rcparams" variable nil (reparse-symbol indented_block_body) [31935 32059])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [32093 32116])
                            ("self" variable nil (reparse-symbol indented_block_body) [32125 32171]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32078 32082]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32065 32172])
                    ("make_rcparams_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32199 32203]))                          )
                        (reparse-symbol indented_block_body) [32177 32312])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32325 32329])
                            ("prop" variable nil (reparse-symbol function_parameters) [32331 32335]))                          )
                        (reparse-symbol indented_block_body) [32317 32534])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32547 32551])
                            ("prop" variable nil (reparse-symbol function_parameters) [32553 32557])
                            ("value" variable nil (reparse-symbol function_parameters) [32559 32564]))                          )
                        (reparse-symbol indented_block_body) [32539 32760]))                  
                :type "class")
                nil [31497 32760])
            ("FontManager" type
               (:documentation "
    On import, the :class:`FontManager` singleton instance creates a
    list of TrueType fonts based on the font properties: name, style,
    variant, weight, stretch, and size.  The :meth:`findfont` method
    does a nearest neighbor search to find the font that most closely
    matches the specification.  If no good enough match is found, a
    default font is returned.
    "
                :superclasses ("object")
                :members 
                  ( ("__version__" variable nil (reparse-symbol indented_block_body) [33349 33366])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33428 33460])
                            ("self" variable nil (reparse-symbol indented_block_body) [33470 33500])
                            ("self" variable nil (reparse-symbol indented_block_body) [33509 33533])
                            ("paths" variable nil (reparse-symbol indented_block_body) [33543 33750])
                            ("for" code nil (reparse-symbol indented_block_body) [33797 34207])
                            ("_log" code nil (reparse-symbol indented_block_body) [34215 34259])
                            ("self" code nil (reparse-symbol indented_block_body) [34328 34386])
                            ("self" variable nil (reparse-symbol indented_block_body) [34395 34483])
                            ("self" variable nil (reparse-symbol indented_block_body) [34492 34513])
                            ("for" code nil (reparse-symbol indented_block_body) [34523 34825])
                            ("self" variable nil (reparse-symbol indented_block_body) [34834 34878])
                            ("self" variable nil (reparse-symbol indented_block_body) [34888 35001])
                            ("self" variable nil (reparse-symbol indented_block_body) [35010 35069])
                            ("if" code nil (reparse-symbol indented_block_body) [35078 35213]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33385 33389])
                            ("size" variable nil (reparse-symbol function_parameters) [33391 33395])
                            ("weight" variable nil (reparse-symbol function_parameters) [33402 33408]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33372 35213])
                    ("get_default_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35241 35245]))                          
                        :documentation "
        Return the default font weight.
        ")
                        (reparse-symbol indented_block_body) [35218 35349])
                    ("get_default_size" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        Return the default font size.
        ")
                        (reparse-symbol indented_block_body) [35354 35495])
                    ("set_default_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35523 35527])
                            ("weight" variable nil (reparse-symbol function_parameters) [35529 35535]))                          
                        :documentation "
        Set the default font weight.  The initial value is 'normal'.
        ")
                        (reparse-symbol indented_block_body) [35500 35670])
                    ("update_fonts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35692 35696])
                            ("filenames" variable nil (reparse-symbol function_parameters) [35698 35707]))                          
                        :documentation "
        Update the font dictionary with new font files.
        Currently not implemented.
        ")
                        (reparse-symbol indented_block_body) [35675 35895])
                    ("score_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36040 36044])
                            ("families" variable nil (reparse-symbol function_parameters) [36046 36054])
                            ("family2" variable nil (reparse-symbol function_parameters) [36056 36063]))                          
                        :documentation "
        Returns a match score between the list of font families in
        *families* and the font family name *family2*.

        An exact match at the head of the list returns 0.0.

        A match further down the list will return between 0 and 1.

        No match will return 1.0.
        ")
                        (reparse-symbol indented_block_body) [36023 37266])
                    ("score_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37287 37291])
                            ("style1" variable nil (reparse-symbol function_parameters) [37293 37299])
                            ("style2" variable nil (reparse-symbol function_parameters) [37301 37307]))                          
                        :documentation "
        Returns a match score between *style1* and *style2*.

        An exact match returns 0.0.

        A match between 'italic' and 'oblique' returns 0.1.

        No match returns 1.0.
        ")
                        (reparse-symbol indented_block_body) [37271 37718])
                    ("score_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37741 37745])
                            ("variant1" variable nil (reparse-symbol function_parameters) [37747 37755])
                            ("variant2" variable nil (reparse-symbol function_parameters) [37757 37765]))                          
                        :documentation "
        Returns a match score between *variant1* and *variant2*.

        An exact match returns 0.0, otherwise 1.0.
        ")
                        (reparse-symbol indented_block_body) [37723 38002])
                    ("score_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38025 38029])
                            ("stretch1" variable nil (reparse-symbol function_parameters) [38031 38039])
                            ("stretch2" variable nil (reparse-symbol function_parameters) [38041 38049]))                          
                        :documentation "
        Returns a match score between *stretch1* and *stretch2*.

        The result is the absolute value of the difference between the
        CSS numeric values of *stretch1* and *stretch2*, normalized
        between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [38007 38641])
                    ("score_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38663 38667])
                            ("weight1" variable nil (reparse-symbol function_parameters) [38669 38676])
                            ("weight2" variable nil (reparse-symbol function_parameters) [38678 38685]))                          
                        :documentation "
        Returns a match score between *weight1* and *weight2*.

        The result is 0.0 if both weight1 and weight 2 are given as strings
        and have the same value.

        Otherwise, the result is the absolute value of the difference between the
        CSS numeric values of *weight1* and *weight2*, normalized
        between 0.05 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [38646 39651])
                    ("score_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39671 39675])
                            ("size1" variable nil (reparse-symbol function_parameters) [39677 39682])
                            ("size2" variable nil (reparse-symbol function_parameters) [39684 39689]))                          
                        :documentation "
        Returns a match score between *size1* and *size2*.

        If *size2* (the size specified in the font file) is 'scalable', this
        function always returns 0.0, since any font size can be generated.

        Otherwise, the result is the absolute distance between *size1* and
        *size2*, normalized so that the usual range of font sizes (6pt -
        72pt) will lie between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [39656 40508])
                    ("findfont" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40526 40530])
                            ("prop" variable nil (reparse-symbol function_parameters) [40532 40536])
                            ("fontext" variable nil (reparse-symbol function_parameters) [40538 40545])
                            ("directory" variable nil (reparse-symbol function_parameters) [40553 40562])
                            ("fallback_to_default" variable nil (reparse-symbol function_parameters) [40586 40605])
                            ("rebuild_if_missing" variable nil (reparse-symbol function_parameters) [40612 40630]))                          
                        :documentation "
        Search the font list for the font that most closely matches
        the :class:`FontProperties` *prop*.

        :meth:`findfont` performs a nearest neighbor search.  Each
        font is given a similarity score to the target font
        properties.  The first font with the highest score is
        returned.  If no matches below a certain threshold are found,
        the default font (usually DejaVu Sans) is returned.

        `directory`, is specified, will only return fonts from the
        given directory (or subdirectory of that directory).

        The result is cached, so subsequent lookups don't have to
        perform the O(n) nearest neighbor search.

        If `fallback_to_default` is True, will fallback to the default
        font family (usually \"DejaVu Sans\" or \"Helvetica\") if
        the first lookup hard-fails.

        See the `W3C Cascading Style Sheet, Level 1
        <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ documentation
        for a description of the font finding algorithm.
        ")
                        (reparse-symbol indented_block_body) [40513 44804]))                  
                :type "class")
                nil [32762 44804])
            ("_is_opentype_cff_font_cache" variable nil nil [44805 44837])
            ("is_opentype_cff_font" function
               (:documentation "
    Returns True if the given font is a Postscript Compact Font Format
    Font embedded in an OpenType wrapper.  Used by the PostScript and
    PDF backends that can not subset these fonts.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [44863 44871]))                  )
                nil [44838 45437])
            ("fontManager" variable nil nil [45438 45456])
            ("_fmcache" variable nil nil [45457 45472])
            ("_get_font" variable nil nil [45475 45517])
            ("get_font" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [45532 45540])
                ("hinting_factor" variable nil (reparse-symbol function_parameters) [45542 45556]))              ) nil [45519 45699])
            ("if" code nil nil [45746 48333]))          
      :file "font_manager.py"
      :pointmax 48333
      :fsize 48332
      :lastmodtime '(23240 23001 113461 0)
      :unmatched-syntax '((INDENT_BLOCK 30975 . 31042) (NEWLINE 30974 . 30975) (COLON 30973 . 30974) (TRY 30882 . 30885) (AS 30969 . 30971) (INDENT_BLOCK 17368 . 17395) (NEWLINE 17367 . 17368) (COLON 17366 . 17367) (FINALLY 17359 . 17366) (INDENT_BLOCK 8561 . 8584) (NEWLINE 8560 . 8561) (COLON 8559 . 8560) (FINALLY 8552 . 8559)))
    (semanticdb-table "semanticdb-table-de1e68"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"
:mod:`~matplotlib.mathtext` is a module for parsing a subset of the
TeX math syntax and drawing them to a matplotlib backend.

For a tutorial of its usage see :ref:`sphx_glr_tutorials_text_mathtext.py`.  This
document is primarily concerned with implementation details.

The module uses pyparsing_ to parse the TeX expression.

.. _pyparsing: http://pyparsing.wikispaces.com/

The Bakoma distribution of the TeX Computer Modern fonts, and STIX
fonts are supported.  There is experimental support for using
arbitrary fonts, but results may vary without proper tweaking and
metrics for those fonts.
\"\"\"" code nil nil [1 606])
            ("" code nil nil [630 715])
            ("six" include nil nil [717 727])
            ("six" include nil nil [728 750])
            ("os" include nil nil [752 761])
            ("math" include nil nil [762 783])
            ("unicodedata" include nil nil [784 802])
            ("warnings" include nil nil [803 828])
            ("numpy" include nil nil [830 858])
            ("numpy" include nil nil [859 877])
            ("" code nil nil [901 1105])
            ("ParserElement" code nil nil [1107 1136])
            ("matplotlib" include nil nil [1138 1209])
            ("matplotlib.afm" include nil nil [1210 1240])
            ("matplotlib.cbook" include nil nil [1241 1307])
            ("matplotlib.ft2font" include nil nil [1308 1381])
            ("matplotlib.font_manager" include nil nil [1382 1452])
            ("" code nil nil [1491 1649])
            ("get_unicode_index" function
               (:documentation "get_unicode_index(symbol, [bool]) -> integer

Return the integer index (from the Unicode table) of symbol.  *symbol*
can be a single unicode character, a TeX command (i.e. r'\\\\pi'), or a
Type1 symbol name (i.e. 'phi').
If math is False, the current symbol should be treated as a non-math symbol.
"
                :arguments 
                  ( ("symbol" variable nil (reparse-symbol function_parameters) [1785 1791])
                    ("math" variable nil (reparse-symbol function_parameters) [1793 1797]))                  )
                nil [1763 122490]))          
      :file "mathtext.py"
      :pointmax 122490
      :fsize 122489
      :lastmodtime '(23240 23001 121461 0)
      :unmatched-syntax '((INDENT_BLOCK 93916 . 122490) (INDENT_BLOCK 93244 . 93916) (COLON 93215 . 93216) (DEDENT 93179 . 93183) (NAME 93183 . 93196) (LBRACE 93199 . 93200) (NEWLINE 92707 . 92708) (COLON 92706 . 92707) (RPAREN 92705 . 92706) (DEDENT 92669 . 92673) (DEF 92673 . 92676) (LPAREN 92688 . 92689) (NEWLINE 92360 . 92361) (COLON 92359 . 92360) (RPAREN 92358 . 92359) (DEDENT 92323 . 92327) (DEF 92327 . 92330) (LPAREN 92339 . 92340) (NEWLINE 92245 . 92246) (COLON 92244 . 92245) (RPAREN 92243 . 92244) (DEDENT 92212 . 92216) (DEF 92216 . 92219) (LPAREN 92224 . 92225) (NEWLINE 92146 . 92147) (COLON 92145 . 92146) (RPAREN 92144 . 92145) (DEDENT 92106 . 92110) (DEF 92110 . 92113) (LPAREN 92125 . 92126) (NEWLINE 92075 . 92076) (COLON 92074 . 92075) (RPAREN 92073 . 92074) (DEDENT 92042 . 92046) (DEF 92046 . 92049) (LPAREN 92054 . 92055) (NEWLINE 91858 . 91859) (COLON 91857 . 91858) (RPAREN 91856 . 91857) (DEDENT 91833 . 91837) (DEF 91837 . 91840) (LPAREN 91851 . 91852) (NEWLINE 91728 . 91729) (COLON 91727 . 91728) (RPAREN 91726 . 91727) (DEDENT 91704 . 91708) (DEF 91708 . 91711) (LPAREN 91721 . 91722) (NEWLINE 91587 . 91588) (COLON 91586 . 91587) (RPAREN 91585 . 91586) (DEDENT 91563 . 91567) (DEF 91567 . 91570) (LPAREN 91580 . 91581) (NEWLINE 90651 . 90652) (COLON 90650 . 90651) (RPAREN 90649 . 90650) (DEDENT 90627 . 90631) (CLASS 90631 . 90636) (LPAREN 90642 . 90643) (INDENT_BLOCK 90052 . 90255) (NEWLINE 90051 . 90052) (COLON 90050 . 90051) (TRY 89952 . 89955) (AS 90044 . 90046) (NEWLINE 89623 . 89624) (COLON 89622 . 89623) (RPAREN 89621 . 89622) (DEDENT 89571 . 89575) (DEF 89575 . 89578) (LPAREN 89584 . 89585) (INDENT_BLOCK 46170 . 47060) (NEWLINE 46169 . 46170) (DEDENT 46143 . 46143) (NAME 46143 . 46165) (LBRACE 46168 . 46169) (NEWLINE 46066 . 46067) (COLON 46065 . 46066) (RPAREN 46064 . 46065) (DEDENT 46017 . 46017) (CLASS 46017 . 46022) (LPAREN 46046 . 46047) (NEWLINE 46005 . 46006) (COLON 46004 . 46005) (RPAREN 46003 . 46004) (DEDENT 45955 . 45955) (CLASS 45955 . 45960) (LPAREN 45985 . 45986) (NEWLINE 45864 . 45865) (COLON 45863 . 45864) (RPAREN 45862 . 45863) (DEDENT 45817 . 45817) (CLASS 45817 . 45822) (LPAREN 45844 . 45845) (NEWLINE 45695 . 45696) (COLON 45694 . 45695) (RPAREN 45693 . 45694) (DEDENT 45652 . 45652) (CLASS 45652 . 45657) (LPAREN 45675 . 45676) (NEWLINE 45493 . 45494) (COLON 45492 . 45493) (RPAREN 45491 . 45492) (DEDENT 45440 . 45440) (CLASS 45440 . 45445) (LPAREN 45473 . 45474) (NEWLINE 44274 . 44275) (COLON 44273 . 44274) (RPAREN 44272 . 44273) (CLASS 44242 . 44247) (LPAREN 44265 . 44266) (NEWLINE 37816 . 37817) (COLON 37815 . 37816) (RPAREN 37814 . 37815) (DEDENT 37787 . 37787) (CLASS 37787 . 37792) (LPAREN 37808 . 37809) (NEWLINE 37657 . 37658) (COLON 37656 . 37657) (RPAREN 37655 . 37656) (DEDENT 37626 . 37626) (CLASS 37626 . 37631) (LPAREN 37645 . 37646) (NEWLINE 33618 . 33619) (COLON 33617 . 33618) (RPAREN 33616 . 33617) (DEDENT 33588 . 33588) (CLASS 33588 . 33593) (LPAREN 33603 . 33604) (NEWLINE 33128 . 33129) (COLON 33127 . 33128) (RPAREN 33126 . 33127) (DEDENT 33093 . 33093) (CLASS 33093 . 33098) (LPAREN 33114 . 33115) (NEWLINE 32626 . 32627) (COLON 32625 . 32626) (RPAREN 32624 . 32625) (DEDENT 32590 . 32590) (CLASS 32590 . 32595) (LPAREN 32612 . 32613) (NEWLINE 30828 . 30829) (COLON 30827 . 30828) (RPAREN 30826 . 30827) (DEDENT 30796 . 30796) (CLASS 30796 . 30801) (LPAREN 30813 . 30814) (NEWLINE 26270 . 26271) (COLON 26269 . 26270) (RPAREN 26268 . 26269) (DEDENT 26236 . 26236) (CLASS 26236 . 26241) (LPAREN 26254 . 26255) (NEWLINE 21412 . 21413) (COLON 21411 . 21412) (RPAREN 21410 . 21411) (DEDENT 21379 . 21379) (CLASS 21379 . 21384) (LPAREN 21396 . 21397) (NEWLINE 17267 . 17268) (COLON 17266 . 17267) (RPAREN 17265 . 17266) (DEDENT 17240 . 17240) (CLASS 17240 . 17245) (LPAREN 17259 . 17260) (NEWLINE 12062 . 12063) (COLON 12061 . 12062) (RPAREN 12060 . 12061) (DEDENT 12042 . 12042) (CLASS 12042 . 12047) (LPAREN 12053 . 12054) (NEWLINE 11299 . 11300) (COLON 11298 . 11299) (RPAREN 11297 . 11298) (DEDENT 11255 . 11255) (CLASS 11255 . 11260) (LPAREN 11281 . 11282) (NEWLINE 10520 . 10521) (COLON 10519 . 10520) (RPAREN 10518 . 10519) (DEDENT 10477 . 10477) (CLASS 10477 . 10482) (LPAREN 10502 . 10503) (NEWLINE 9619 . 9620) (COLON 9618 . 9619) (RPAREN 9617 . 9618) (DEDENT 9577 . 9577) (CLASS 9577 . 9582) (LPAREN 9601 . 9602) (NEWLINE 8791 . 8792) (COLON 8790 . 8791) (RPAREN 8789 . 8790) (DEDENT 8749 . 8749) (CLASS 8749 . 8754) (LPAREN 8773 . 8774) (NEWLINE 7574 . 7575) (COLON 7573 . 7574) (RPAREN 7572 . 7573) (DEDENT 7533 . 7533) (CLASS 7533 . 7538) (LPAREN 7556 . 7557) (NEWLINE 7323 . 7324) (COLON 7322 . 7323) (RPAREN 7321 . 7322) (DEDENT 7275 . 7275) (CLASS 7275 . 7280) (LPAREN 7302 . 7303) (NEWLINE 4741 . 4742) (COLON 4740 . 4741) (RPAREN 4739 . 4740) (DEDENT 4699 . 4699) (CLASS 4699 . 4704) (LPAREN 4723 . 4724) (NEWLINE 3258 . 3259) (COLON 3257 . 3258) (RPAREN 3256 . 3257) (DEDENT 3228 . 3228) (CLASS 3228 . 3233) (LPAREN 3249 . 3250) (NEWLINE 2955 . 2956) (COLON 2954 . 2955) (RPAREN 2953 . 2954) (DEDENT 2932 . 2932) (DEF 2932 . 2935) (LPAREN 2947 . 2948) (NEWLINE 2797 . 2798) (COLON 2796 . 2797) (DEDENT 2777 . 2781) (EXCEPT 2781 . 2787)))
    (semanticdb-table "semanticdb-table-155cf14"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"
This module supports embedded TeX expressions in matplotlib via dvipng
and dvips for the raster and postscript backends.  The tex and
dvipng/dvips information is cached in ~/.matplotlib/tex.cache for reuse between
sessions

Requirements:

* latex
* \\*Agg backends: dvipng>=1.6
* PS backend: psfrag, dvips, and Ghostscript>=8.60

Backends:

* \\*Agg
* PS
* PDF

For raster output, you can get RGBA numpy arrays from TeX expressions
as follows::

  texmanager = TexManager()
  s = ('\\TeX\\ is Number '
       '$\\displaystyle\\sum_{n=1}^\\infty\\frac{-e^{i\\pi}}{2^n}$!')
  Z = texmanager.get_rgba(s, fontsize=12, dpi=80, rgb=(1,0,0))

To enable tex rendering of all text in your matplotlib figure, set
text.usetex in your matplotlibrc file or include these two lines in
your script::

  from matplotlib import rc
  rc('text', usetex=True)

\"\"\"" code nil nil [1 841])
            ("__future__" include nil nil [843 907])
            ("six" include nil nil [909 919])
            ("copy" include nil nil [921 932])
            ("glob" include nil nil [933 944])
            ("os" include nil nil [945 954])
            ("shutil" include nil nil [955 968])
            ("sys" include nil nil [969 979])
            ("warnings" include nil nil [980 995])
            ("logging" include nil nil [996 1010])
            ("hashlib" include nil nil [1012 1035])
            ("distutils.version" include nil nil [1037 1061])
            ("numpy" include nil nil [1062 1080])
            ("matplotlib" include nil nil [1081 1105])
            ("matplotlib" include nil nil [1106 1137])
            ("matplotlib._png" include nil nil [1138 1174])
            ("matplotlib.cbook" include nil nil [1175 1218])
            ("matplotlib.compat.subprocess" include nil nil [1219 1291])
            ("matplotlib.dviread" include nil nil [1292 1328])
            ("re" include nil nil [1329 1338])
            ("_log" variable nil nil [1340 1374])
            ("" code nil nil [1398 1405])
            ("dvipng_hack_alpha" function nil nil [1406 2132])
            ("TexManager" type
               (:documentation "
    Convert strings to dvi files using TeX, caching the results to a directory.
    "
                :superclasses ("object")
                :members 
                  ( ("cachedir" variable nil (reparse-symbol indented_block_body) [2261 2290])
                    ("if" code nil (reparse-symbol indented_block_body) [2295 2591])
                    ("rgba_arrayd" variable nil (reparse-symbol indented_block_body) [2610 2626])
                    ("grey_arrayd" variable nil (reparse-symbol indented_block_body) [2631 2647])
                    ("postscriptd" variable nil (reparse-symbol indented_block_body) [2652 2720])
                    ("pscnt" variable nil (reparse-symbol indented_block_body) [2725 2786])
                    ("serif" variable nil (reparse-symbol indented_block_body) [2792 2811])
                    ("sans_serif" variable nil (reparse-symbol indented_block_body) [2816 2841])
                    ("monospace" variable nil (reparse-symbol indented_block_body) [2846 2870])
                    ("cursive" variable nil (reparse-symbol indented_block_body) [2875 2918])
                    ("font_family" variable nil (reparse-symbol indented_block_body) [2923 2944])
                    ("font_families" variable nil (reparse-symbol indented_block_body) [2949 3012])
                    ("font_info" variable nil (reparse-symbol indented_block_body) [3018 3859])
                    ("_rc_cache" variable nil (reparse-symbol indented_block_body) [3865 3881])
                    ("_rc_cache_keys" variable nil (reparse-symbol indented_block_body) [3886 4042])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4077 4238])
                            ("mkdirs" code nil (reparse-symbol indented_block_body) [4247 4268])
                            ("ff" variable nil (reparse-symbol indented_block_body) [4277 4305])
                            ("if" code nil (reparse-symbol indented_block_body) [4314 4803])
                            ("fontconfig" variable nil (reparse-symbol indented_block_body) [4812 4843])
                            ("for" code nil (reparse-symbol indented_block_body) [4852 5794])
                            ("preamble_bytes" variable nil (reparse-symbol indented_block_body) [6019 6078])
                            ("fontconfig" code nil (reparse-symbol indented_block_body) [6087 6137])
                            ("self" variable nil (reparse-symbol indented_block_body) [6146 6184])
                            ("cmd" variable nil (reparse-symbol indented_block_body) [6300 6360])
                            ("if" code nil (reparse-symbol indented_block_body) [6369 6443])
                            ("self" variable nil (reparse-symbol indented_block_body) [6451 6557]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4061 4065]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4048 6558])
                    ("get_basefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6580 6584])
                            ("tex" variable nil (reparse-symbol function_parameters) [6586 6589])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [6591 6599])
                            ("dpi" variable nil (reparse-symbol function_parameters) [6601 6604]))                          
                        :documentation "
        Return a filename based on a hash of the string, fontsize, and dpi.
        ")
                        (reparse-symbol indented_block_body) [6563 6924])
                    ("get_font_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6949 6953]))                          
                        :documentation "Reinitializes self if relevant rcParams on have changed.")
                        (reparse-symbol indented_block_body) [6929 7793])
                    ("get_font_preamble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7820 7824]))                          
                        :documentation "
        Return a string containing font configuration for the tex preamble.
        ")
                        (reparse-symbol indented_block_body) [7798 7962])
                    ("get_custom_preamble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7991 7995]))                          
                        :documentation "Return a string containing user additions to the tex preamble.")
                        (reparse-symbol indented_block_body) [7967 8133])
                    ("make_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8151 8155])
                            ("tex" variable nil (reparse-symbol function_parameters) [8157 8160])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [8162 8170]))                          
                        :documentation "
        Generate a tex file to render the tex string at a specific font size.

        Return the file name.
        ")
                        (reparse-symbol indented_block_body) [8138 9626])
                    ("_re_vbox" variable nil (reparse-symbol indented_block_body) [9631 9717])
                    ("make_tex_preview" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9744 9748])
                            ("tex" variable nil (reparse-symbol function_parameters) [9750 9753])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [9755 9763]))                          
                        :documentation "
        Generate a tex file to render the tex string at a specific font size.

        It uses the preview.sty to determine the dimension (width, height,
        descent) of the output.

        Return the file name.
        ")
                        (reparse-symbol indented_block_body) [9723 11684])
                    ("_run_checked_subprocess" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11717 11721])
                            ("command" variable nil (reparse-symbol function_parameters) [11723 11730])
                            ("tex" variable nil (reparse-symbol function_parameters) [11732 11735]))                          )
                        (reparse-symbol indented_block_body) [11689 12450])
                    ("make_dvi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12468 12472])
                            ("tex" variable nil (reparse-symbol function_parameters) [12474 12477])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [12479 12487]))                          
                        :documentation "
        Generate a dvi file containing latex's layout of tex string.

        Return the file name.
        ")
                        (reparse-symbol indented_block_body) [12455 13357])
                    ("make_dvi_preview" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13383 13387])
                            ("tex" variable nil (reparse-symbol function_parameters) [13389 13392])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [13394 13402]))                          
                        :documentation "
        Generate a dvi file containing latex's layout of tex string.

        It calls make_tex_preview() method and store the size information
        (width, height, descent) in a separate file.

        Return the file name.
        ")
                        (reparse-symbol indented_block_body) [13362 14655])
                    ("make_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14673 14677])
                            ("tex" variable nil (reparse-symbol function_parameters) [14679 14682])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [14684 14692])
                            ("dpi" variable nil (reparse-symbol function_parameters) [14694 14697]))                          
                        :documentation "
        Generate a png file containing latex's rendering of tex string.

        Return the file name.
        ")
                        (reparse-symbol indented_block_body) [14660 15263])
                    ("" code nil (reparse-symbol indented_block_body) [15289 15296])
                    ("make_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15313 15317])
                            ("tex" variable nil (reparse-symbol function_parameters) [15319 15322])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [15324 15332]))                          
                        :documentation "
        Generate a postscript file containing latex's rendering of tex string.

        Return the file name.
        ")
                        (reparse-symbol indented_block_body) [15301 15780])
                    ("" code nil (reparse-symbol indented_block_body) [15806 15813])
                    ("get_ps_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15834 15838])
                            ("tex" variable nil (reparse-symbol function_parameters) [15840 15843])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [15845 15853]))                          
                        :documentation "
        Return a list of PS bboxes for latex's rendering of the tex string.
        ")
                        (reparse-symbol indented_block_body) [15818 16240])
                    ("get_grey" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16258 16262])
                            ("tex" variable nil (reparse-symbol function_parameters) [16264 16267])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [16269 16277])
                            ("dpi" variable nil (reparse-symbol function_parameters) [16284 16287]))                          
                        :documentation "Return the alpha channel.")
                        (reparse-symbol indented_block_body) [16245 16656])
                    ("get_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16674 16678])
                            ("tex" variable nil (reparse-symbol function_parameters) [16680 16683])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [16685 16693])
                            ("dpi" variable nil (reparse-symbol function_parameters) [16700 16703])
                            ("rgb" variable nil (reparse-symbol function_parameters) [16710 16713]))                          
                        :documentation "Return latex's rendering of the tex string as an rgba array.")
                        (reparse-symbol indented_block_body) [16661 17239])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17278 17282])
                            ("tex" variable nil (reparse-symbol function_parameters) [17284 17287])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [17289 17297])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17299 17307]))                          
                        :documentation "Return width, height and descent of the text.")
                        (reparse-symbol indented_block_body) [17244 18386]))                  
                :type "class")
                nil [2134 18386]))          
      :file "texmanager.py"
      :pointmax 18386
      :fsize 18385
      :lastmodtime '(23240 23001 117461 0)
      :unmatched-syntax '((NAME 17441 . 17453) (IF 17486 . 17488) (ELSE 17498 . 17502) (INDENT_BLOCK 12021 . 12401) (NEWLINE 12020 . 12021) (COLON 12019 . 12020) (TRY 11774 . 11777) (AS 12013 . 12015) (INDENT_BLOCK 11480 . 11660) (NEWLINE 11479 . 11480) (COLON 11478 . 11479) (TRY 11377 . 11380) (AS 11472 . 11474) (INDENT_BLOCK 9422 . 9602) (NEWLINE 9421 . 9422) (COLON 9420 . 9421) (TRY 9319 . 9322) (AS 9414 . 9416)))
    (semanticdb-table "semanticdb-table-15607ac"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The OffsetBox is a simple container artist. The child artist are meant
to be drawn at a relative position to its parent.  The [VH]Packer,
DrawingArea and TextArea are derived from the OffsetBox.

The [VH]Packer automatically adjust the relative postisions of their
children, which should be instances of the OffsetBox. This is used to
align similar artists together, e.g., in legend.

The DrawingArea can contain any Artist as a child. The
DrawingArea has a fixed width and height. The position of children
relative to the parent is fixed.  The TextArea is contains a single
Text instance. The width and height of the TextArea instance is the
width and height of the its child text.
\"\"\"" code nil nil [1 691])
            ("" code nil nil [716 801])
            ("six" include nil nil [803 813])
            ("six.moves" include nil nil [814 847])
            ("warnings" include nil nil [849 864])
            ("matplotlib.transforms" include nil nil [865 908])
            ("matplotlib.artist" include nil nil [909 944])
            ("matplotlib.text" include nil nil [945 976])
            ("matplotlib.path" include nil nil [977 1008])
            ("numpy" include nil nil [1009 1027])
            ("matplotlib.transforms" include nil nil [1028 1093])
            ("matplotlib.font_manager" include nil nil [1095 1145])
            ("matplotlib.patches" include nil nil [1146 1208])
            ("matplotlib" include nil nil [1209 1240])
            ("matplotlib" include nil nil [1242 1274])
            ("matplotlib.image" include nil nil [1276 1314])
            ("matplotlib.patches" include nil nil [1316 1374])
            ("matplotlib.text" include nil nil [1375 1418])
            ("DEBUG" variable nil nil [1421 1434])
            ("bbox_artist" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [1473 1478])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1480 1488]))              ) nil [1457 1543])
            ("_get_packed_offsets" function
               (:documentation "
    Geiven a list of (width, xdescent) of each boxes, calculate the
    total width and the x-offset positions of each items according to
    *mode*. xdescent is analogous to the usual descent, but along the
    x-direction. xdescent values are currently ignored.

    *wd_list* : list of (width, xdescent) of boxes to be packed.
    *sep* : spacing between boxes
    *total* : Intended total length. None if not used.
    *mode* : packing mode. 'fixed', 'expand', or 'equal'.
    "
                :arguments 
                  ( ("wd_list" variable nil (reparse-symbol function_parameters) [1738 1745])
                    ("total" variable nil (reparse-symbol function_parameters) [1747 1752])
                    ("sep" variable nil (reparse-symbol function_parameters) [1754 1757])
                    ("mode" variable nil (reparse-symbol function_parameters) [1759 1763]))                  )
                nil [1714 3343])
            ("_get_aligned_offsets" function
               (:documentation "
    Given a list of (height, descent) of each boxes, align the boxes
    with *align* and calculate the y-offsets of each boxes.
    total width and the offset positions of each items according to
    *mode*. xdescent is analogous to the usual descent, but along the
    x-direction. xdescent values are currently ignored.

    *hd_list* : list of (width, xdescent) of boxes to be aligned.
    *sep* : spacing between boxes
    *height* : Intended total length. None if not used.
    *align* : align mode. 'baseline', 'top', 'bottom', or 'center'.
    "
                :arguments 
                  ( ("hd_list" variable nil (reparse-symbol function_parameters) [3370 3377])
                    ("height" variable nil (reparse-symbol function_parameters) [3379 3385])
                    ("align" variable nil (reparse-symbol function_parameters) [3387 3392]))                  )
                nil [3345 4687])
            ("OffsetBox" type
               (:documentation "
    The OffsetBox is a simple container artist. The child artist are meant
    to be drawn at a relative position to its parent.
    "
                :superclasses ("martist.Artist")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [4917 4965])
                            ("self" code nil (reparse-symbol indented_block_body) [5155 5178])
                            ("self" variable nil (reparse-symbol indented_block_body) [5188 5207])
                            ("self" variable nil (reparse-symbol indented_block_body) [5216 5237]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4884 4888])
                            ("args" variable nil (reparse-symbol function_parameters) [4890 4895])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4897 4905]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4871 5238])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5260 5264]))                          )
                        (reparse-symbol indented_block_body) [5243 5612])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5634 5638])
                            ("state" variable nil (reparse-symbol function_parameters) [5640 5645]))                          )
                        (reparse-symbol indented_block_body) [5617 5876])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5896 5900])
                            ("fig" variable nil (reparse-symbol function_parameters) [5902 5905]))                          
                        :documentation "
        Set the figure

        accepts a class:`~matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [5881 6130])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6176 6180])
                            ("ax" variable nil (reparse-symbol function_parameters) [6182 6184]))                          
                        :decorators 
                          ( ("martist.Artist.axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6135 6363])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6381 6385])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [6387 6397]))                          )
                        (reparse-symbol indented_block_body) [6368 6551])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6571 6575])
                            ("xy" variable nil (reparse-symbol function_parameters) [6577 6579]))                          
                        :documentation "
        Set the offset

        accepts x, y, tuple, or a callable object.
        ")
                        (reparse-symbol indented_block_body) [6556 6733])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6753 6757])
                            ("width" variable nil (reparse-symbol function_parameters) [6759 6764])
                            ("height" variable nil (reparse-symbol function_parameters) [6766 6772])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [6774 6782])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [6784 6792])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6794 6802]))                          
                        :documentation "
        Get the offset

        accepts extent of the box
        ")
                        (reparse-symbol indented_block_body) [6738 7038])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7057 7061])
                            ("width" variable nil (reparse-symbol function_parameters) [7063 7068]))                          
                        :documentation "
        Set the width

        accepts float
        ")
                        (reparse-symbol indented_block_body) [7043 7193])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7213 7217])
                            ("height" variable nil (reparse-symbol function_parameters) [7219 7225]))                          
                        :documentation "
        Set the height

        accepts float
        ")
                        (reparse-symbol indented_block_body) [7198 7353])
                    ("get_visible_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7383 7387]))                          
                        :documentation "
        Return a list of visible artists it contains.
        ")
                        (reparse-symbol indented_block_body) [7358 7530])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7552 7556]))                          
                        :documentation "
        Return a list of artists it contains.
        ")
                        (reparse-symbol indented_block_body) [7535 7659])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7687 7691])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7693 7701]))                          )
                        (reparse-symbol indented_block_body) [7664 7732])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7752 7756])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7758 7766]))                          
                        :documentation "
        Return with, height, xdescent, ydescent of box
        ")
                        (reparse-symbol indented_block_body) [7737 7942])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7969 7973])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7975 7983]))                          )
                        (reparse-symbol indented_block_body) [7947 8248])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8262 8266])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8268 8276]))                          
                        :documentation "
        Update the location of children if necessary and draw them
        to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [8253 8868]))                  
                :type "class")
                nil [4689 8868])
            ("PackerBase" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str, optional
            Alignment of boxes. Can be one of ``top``, ``bottom``,
            ``left``, ``right``, ``center`` and ``baseline``

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [9048 9771])
                            ("super" code nil (reparse-symbol indented_block_body) [9780 9814])
                            ("self" variable nil (reparse-symbol indented_block_body) [9824 9844])
                            ("self" variable nil (reparse-symbol indented_block_body) [9853 9871])
                            ("self" variable nil (reparse-symbol indented_block_body) [9880 9894])
                            ("self" variable nil (reparse-symbol indented_block_body) [9903 9917])
                            ("self" variable nil (reparse-symbol indented_block_body) [9926 9942])
                            ("self" variable nil (reparse-symbol indented_block_body) [9951 9969])
                            ("self" variable nil (reparse-symbol indented_block_body) [9979 10004]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8916 8920])
                            ("pad" variable nil (reparse-symbol function_parameters) [8922 8925])
                            ("sep" variable nil (reparse-symbol function_parameters) [8932 8935])
                            ("width" variable nil (reparse-symbol function_parameters) [8942 8947])
                            ("height" variable nil (reparse-symbol function_parameters) [8954 8960])
                            ("align" variable nil (reparse-symbol function_parameters) [8984 8989])
                            ("mode" variable nil (reparse-symbol function_parameters) [8996 9000])
                            ("children" variable nil (reparse-symbol function_parameters) [9024 9032]))                          
                        :documentation "
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str, optional
            Alignment of boxes. Can be one of ``top``, ``bottom``,
            ``left``, ``right``, ``center`` and ``baseline``

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8903 10005]))                  
                :type "class")
                nil [8870 10005])
            ("VPacker" type
               (:documentation "
    The VPacker has its children packed vertically. It automatically
    adjust the relative positions of children in the drawing time.
    "
                :superclasses ("PackerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional

            width and height of the container box, calculated if
            `None`.

        align : str, optional
            Alignment of boxes.

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10344 10974])
                            ("super" code nil (reparse-symbol indented_block_body) [10983 11136]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10203 10207])
                            ("pad" variable nil (reparse-symbol function_parameters) [10209 10212])
                            ("sep" variable nil (reparse-symbol function_parameters) [10219 10222])
                            ("width" variable nil (reparse-symbol function_parameters) [10229 10234])
                            ("height" variable nil (reparse-symbol function_parameters) [10241 10247])
                            ("align" variable nil (reparse-symbol function_parameters) [10271 10276])
                            ("mode" variable nil (reparse-symbol function_parameters) [10289 10293])
                            ("children" variable nil (reparse-symbol function_parameters) [10320 10328]))                          
                        :documentation "
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional

            width and height of the container box, calculated if
            `None`.

        align : str, optional
            Alignment of boxes.

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10190 11137])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11165 11169])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11171 11179]))                          
                        :documentation "
        update offset of childrens and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [11142 12547]))                  
                :type "class")
                nil [10007 12547])
            ("HPacker" type
               (:documentation "
    The HPacker has its children packed horizontally. It automatically
    adjusts the relative positions of children at draw time.
    "
                :superclasses ("PackerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str
           Alignment of boxes.

        mode : str
           Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [12882 13487])
                            ("super" code nil (reparse-symbol indented_block_body) [13496 13611]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12741 12745])
                            ("pad" variable nil (reparse-symbol function_parameters) [12747 12750])
                            ("sep" variable nil (reparse-symbol function_parameters) [12757 12760])
                            ("width" variable nil (reparse-symbol function_parameters) [12767 12772])
                            ("height" variable nil (reparse-symbol function_parameters) [12779 12785])
                            ("align" variable nil (reparse-symbol function_parameters) [12809 12814])
                            ("mode" variable nil (reparse-symbol function_parameters) [12827 12831])
                            ("children" variable nil (reparse-symbol function_parameters) [12858 12866]))                          
                        :documentation "
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str
           Alignment of boxes.

        mode : str
           Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12728 13612])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13640 13644])
                            ("renderer" variable nil (reparse-symbol function_parameters) [13646 13654]))                          
                        :documentation "
        update offset of children and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [13617 15069]))                  
                :type "class")
                nil [12549 15069])
            ("PaddedBox" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *pad* : boundary pad

        .. note::
          *pad* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [15184 15397])
                            ("super" code nil (reparse-symbol indented_block_body) [15407 15440])
                            ("self" variable nil (reparse-symbol indented_block_body) [15450 15464])
                            ("self" variable nil (reparse-symbol indented_block_body) [15473 15497])
                            ("self" variable nil (reparse-symbol indented_block_body) [15507 15726])
                            ("self" code nil (reparse-symbol indented_block_body) [15736 15776])
                            ("if" code nil (reparse-symbol indented_block_body) [15786 15857])
                            ("self" variable nil (reparse-symbol indented_block_body) [15866 15894]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15116 15120])
                            ("child" variable nil (reparse-symbol function_parameters) [15122 15127])
                            ("pad" variable nil (reparse-symbol function_parameters) [15129 15132])
                            ("draw_frame" variable nil (reparse-symbol function_parameters) [15139 15149])
                            ("patch_attrs" variable nil (reparse-symbol function_parameters) [15157 15168]))                          
                        :documentation "
        *pad* : boundary pad

        .. note::
          *pad* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15103 15895])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15923 15927])
                            ("renderer" variable nil (reparse-symbol function_parameters) [15929 15937]))                          
                        :documentation "
        update offset of childrens and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [15900 16281])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16295 16299])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16301 16309]))                          
                        :documentation "
        Update the location of children if necessary and draw them
        to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [16286 16984])
                    ("update_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17006 17010])
                            ("bbox" variable nil (reparse-symbol function_parameters) [17012 17016])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [17018 17026]))                          )
                        (reparse-symbol indented_block_body) [16989 17237])
                    ("draw_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17257 17261])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17263 17271]))                          )
                        (reparse-symbol indented_block_body) [17242 17474]))                  
                :type "class")
                nil [15071 17474])
            ("DrawingArea" type
               (:documentation "
    The DrawingArea can contain any Artist as a child. The DrawingArea
    has a fixed width and height. The position of children relative to
    the parent is fixed. The children can be clipped at the
    boundaries of the parent.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *width*, *height* : width and height of the container box.
        *xdescent*, *ydescent* : descent of the box in x- and y-direction.
        *clip* : Whether to clip the children
        \"\"\"" code nil (reparse-symbol indented_block_body) [17857 18060])
                            ("super" code nil (reparse-symbol indented_block_body) [18070 18105])
                            ("self" variable nil (reparse-symbol indented_block_body) [18115 18133])
                            ("self" variable nil (reparse-symbol indented_block_body) [18142 18162])
                            ("self" variable nil (reparse-symbol indented_block_body) [18171 18195])
                            ("self" variable nil (reparse-symbol indented_block_body) [18204 18228])
                            ("self" variable nil (reparse-symbol indented_block_body) [18237 18263])
                            ("self" variable nil (reparse-symbol indented_block_body) [18273 18319])
                            ("self" code nil (reparse-symbol indented_block_body) [18328 18357])
                            ("self" code nil (reparse-symbol indented_block_body) [18366 18403])
                            ("self" variable nil (reparse-symbol indented_block_body) [18413 18456]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17772 17776])
                            ("width" variable nil (reparse-symbol function_parameters) [17778 17783])
                            ("height" variable nil (reparse-symbol function_parameters) [17785 17791])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [17793 17801])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [17823 17831])
                            ("clip" variable nil (reparse-symbol function_parameters) [17836 17840]))                          
                        :documentation "
        *width*, *height* : width and height of the container box.
        *xdescent*, *ydescent* : descent of the box in x- and y-direction.
        *clip* : Whether to clip the children
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17759 18457])
                    ("clip_children" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18494 18498]))                          
                        :documentation "
        If the children of this DrawingArea should be clipped
        by DrawingArea bounding box.
        ")
                        (reparse-symbol indented_block_body) [18462 18659])
                    ("clip_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18708 18712])
                            ("val" variable nil (reparse-symbol function_parameters) [18714 18717]))                          
                        :decorators 
                          ( ("clip_children.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18664 18786])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18809 18813]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the children
        ")
                        (reparse-symbol indented_block_body) [18791 18991])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19014 19018])
                            ("t" variable nil (reparse-symbol function_parameters) [19020 19021]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [18996 19095])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19115 19119])
                            ("xy" variable nil (reparse-symbol function_parameters) [19121 19123]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y coordinate in display units.
        ")
                        (reparse-symbol indented_block_body) [19100 19392])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19412 19416]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [19397 19511])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19538 19542])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19544 19552]))                          )
                        (reparse-symbol indented_block_body) [19516 19796])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19816 19820])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19822 19830]))                          
                        :documentation "
        Return with, height, xdescent, ydescent of box
        ")
                        (reparse-symbol indented_block_body) [19801 20087])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20107 20111])
                            ("a" variable nil (reparse-symbol function_parameters) [20113 20114]))                          )
                        (reparse-symbol indented_block_body) [20092 20460])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20474 20478])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20480 20488]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [20465 21315]))                  
                :type "class")
                nil [17476 21315])
            ("TextArea" type
               (:documentation "
    The TextArea is contains a single Text instance. The text is
    placed at (0,0) with baseline+left alignment. The width and height
    of the TextArea instance is the width and height of the its child
    text.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        s : str
            a string to be displayed.

        textprops : `~matplotlib.font_manager.FontProperties`, optional

        multilinebaseline : bool, optional
            If `True`, baseline for multiline text is adjusted so that
            it is (approximatedly) center-aligned with singleline
            text.

        minimumdescent : bool, optional
            If `True`, the box has a minimum descent of \"p\".
        \"\"\"" code nil (reparse-symbol indented_block_body) [21742 22223])
                            ("if" code nil (reparse-symbol indented_block_body) [22232 22281])
                            ("if" code nil (reparse-symbol indented_block_body) [22290 22357])
                            ("self" variable nil (reparse-symbol indented_block_body) [22366 22411])
                            ("OffsetBox" code nil (reparse-symbol indented_block_body) [22421 22445])
                            ("self" variable nil (reparse-symbol indented_block_body) [22455 22484])
                            ("self" variable nil (reparse-symbol indented_block_body) [22494 22540])
                            ("self" code nil (reparse-symbol indented_block_body) [22549 22578])
                            ("self" code nil (reparse-symbol indented_block_body) [22587 22624])
                            ("self" variable nil (reparse-symbol indented_block_body) [22633 22682])
                            ("self" code nil (reparse-symbol indented_block_body) [22691 22798])
                            ("self" variable nil (reparse-symbol indented_block_body) [22808 22851])
                            ("self" variable nil (reparse-symbol indented_block_body) [22860 22897]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21593 21597])
                            ("s" variable nil (reparse-symbol function_parameters) [21599 21600])
                            ("textprops" variable nil (reparse-symbol function_parameters) [21619 21628])
                            ("multilinebaseline" variable nil (reparse-symbol function_parameters) [21652 21669])
                            ("minimumdescent" variable nil (reparse-symbol function_parameters) [21693 21707]))                          
                        :documentation "
        Parameters
        ----------
        s : str
            a string to be displayed.

        textprops : `~matplotlib.font_manager.FontProperties`, optional

        multilinebaseline : bool, optional
            If `True`, baseline for multiline text is adjusted so that
            it is (approximatedly) center-aligned with singleline
            text.

        minimumdescent : bool, optional
            If `True`, the box has a minimum descent of \"p\".
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21580 22898])
                    ("set_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22916 22920])
                            ("s" variable nil (reparse-symbol function_parameters) [22922 22923]))                          )
                        (reparse-symbol indented_block_body) [22903 23032])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23050 23054]))                          )
                        (reparse-symbol indented_block_body) [23037 23158])
                    ("set_multilinebaseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23189 23193])
                            ("t" variable nil (reparse-symbol function_parameters) [23195 23196]))                          
                        :documentation "
        Set multilinebaseline .

        If True, baseline for multiline text is
        adjusted so that it is (approximatedly) center-aligned with
        singleline text.
        ")
                        (reparse-symbol indented_block_body) [23163 23459])
                    ("get_multilinebaseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23490 23494]))                          
                        :documentation "
        get multilinebaseline .
        ")
                        (reparse-symbol indented_block_body) [23464 23592])
                    ("set_minimumdescent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23620 23624])
                            ("t" variable nil (reparse-symbol function_parameters) [23626 23627]))                          
                        :documentation "
        Set minimumdescent .

        If True, extent of the single line text is adjusted so that
        it has minimum descent of \"p\"
        ")
                        (reparse-symbol indented_block_body) [23597 23849])
                    ("get_minimumdescent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23877 23881]))                          
                        :documentation "
        get minimumdescent.
        ")
                        (reparse-symbol indented_block_body) [23854 23972])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23995 23999])
                            ("t" variable nil (reparse-symbol function_parameters) [24001 24002]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [23977 24076])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24096 24100])
                            ("xy" variable nil (reparse-symbol function_parameters) [24102 24104]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y coordinates in display units.
        ")
                        (reparse-symbol indented_block_body) [24081 24374])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24394 24398]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [24379 24493])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24520 24524])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24526 24534]))                          )
                        (reparse-symbol indented_block_body) [24498 24777])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24797 24801])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24803 24811]))                          )
                        (reparse-symbol indented_block_body) [24782 25711])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25725 25729])
                            ("renderer" variable nil (reparse-symbol function_parameters) [25731 25739]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [25716 25923]))                  
                :type "class")
                nil [21317 25923])
            ("AuxTransformBox" type
               (:documentation "
    Offset Box with the aux_transform . Its children will be
    transformed with the aux_transform first then will be
    offseted. The absolute coordinate of the aux_transform is meaning
    as it will be automatically adjust so that the left-lower corner
    of the bounding box of children will be set to (0,0) before the
    offset transform.

    It is similar to drawing area, except that the extent of the box
    is not predetermined but calculated from the window extent of its
    children. Furthermore, the extent of the children will be
    calculated in the transformed coordinate.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26618 26652])
                            ("OffsetBox" code nil (reparse-symbol indented_block_body) [26661 26685])
                            ("self" variable nil (reparse-symbol indented_block_body) [26695 26741])
                            ("self" code nil (reparse-symbol indented_block_body) [26750 26779])
                            ("self" code nil (reparse-symbol indented_block_body) [26788 26825])
                            ("self" variable nil (reparse-symbol indented_block_body) [26997 27047])
                            ("self" code nil (reparse-symbol indented_block_body) [27056 27089]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26588 26592])
                            ("aux_transform" variable nil (reparse-symbol function_parameters) [26594 26607]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26575 27090])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27110 27114])
                            ("a" variable nil (reparse-symbol function_parameters) [27116 27117]))                          )
                        (reparse-symbol indented_block_body) [27095 27299])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27322 27326]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the children
        ")
                        (reparse-symbol indented_block_body) [27304 27566])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27589 27593])
                            ("t" variable nil (reparse-symbol function_parameters) [27595 27596]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [27571 27670])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27690 27694])
                            ("xy" variable nil (reparse-symbol function_parameters) [27696 27698]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y coordinate in display units.
        ")
                        (reparse-symbol indented_block_body) [27675 27967])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27987 27991]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [27972 28086])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28113 28117])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28119 28127]))                          )
                        (reparse-symbol indented_block_body) [28091 28370])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28390 28394])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28396 28404]))                          )
                        (reparse-symbol indented_block_body) [28375 29033])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29047 29051])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29053 29061]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [29038 29273]))                  
                :type "class")
                nil [25925 29273])
            ("AnchoredOffsetbox" type
               (:documentation "
    An offset box placed according to the legend location
    loc. AnchoredOffsetbox has a single child. When multiple children
    is needed, use other OffsetBox class to enclose them.  By default,
    the offset box is anchored against its parent axes. You may
    explicitly specify the bbox_to_anchor.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [29637 29647])
                    ("codes" variable nil (reparse-symbol indented_block_body) [29698 30009])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        loc is a string or an integer specifying the legend location.
        The valid location codes are::

        'upper right'  : 1,
        'upper left'   : 2,
        'lower left'   : 3,
        'lower right'  : 4,
        'right'        : 5, (same as 'center right', for back-compatibility)
        'center left'  : 6,
        'center right' : 7,
        'lower center' : 8,
        'upper center' : 9,
        'center'       : 10,

        pad : pad around the child for drawing a frame. given in
          fraction of fontsize.

        borderpad : pad between offsetbox frame and the bbox_to_anchor,

        child : OffsetBox instance that will be anchored.

        prop : font property. This is only used as a reference for paddings.

        frameon : draw a frame box if True.

        bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.

        bbox_transform : with which the bbox_to_anchor will be transformed.

        \"\"\"" code nil (reparse-symbol indented_block_body) [30246 31202])
                            ("super" code nil (reparse-symbol indented_block_body) [31211 31260])
                            ("self" code nil (reparse-symbol indented_block_body) [31270 31325])
                            ("self" code nil (reparse-symbol indented_block_body) [31334 31355])
                            ("if" code nil (reparse-symbol indented_block_body) [31365 31681])
                            ("self" variable nil (reparse-symbol indented_block_body) [31690 31704])
                            ("self" variable nil (reparse-symbol indented_block_body) [31713 31739])
                            ("self" variable nil (reparse-symbol indented_block_body) [31748 31762])
                            ("if" code nil (reparse-symbol indented_block_body) [31772 32088])
                            ("self" variable nil (reparse-symbol indented_block_body) [32097 32310])
                            ("self" code nil (reparse-symbol indented_block_body) [32319 32359])
                            ("self" variable nil (reparse-symbol indented_block_body) [32368 32393]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30028 30032])
                            ("loc" variable nil (reparse-symbol function_parameters) [30034 30037])
                            ("pad" variable nil (reparse-symbol function_parameters) [30056 30059])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [30065 30074])
                            ("child" variable nil (reparse-symbol function_parameters) [30097 30102])
                            ("prop" variable nil (reparse-symbol function_parameters) [30109 30113])
                            ("frameon" variable nil (reparse-symbol function_parameters) [30120 30127])
                            ("bbox_to_anchor" variable nil (reparse-symbol function_parameters) [30151 30165])
                            ("bbox_transform" variable nil (reparse-symbol function_parameters) [30189 30203])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30227 30235]))                          
                        :documentation "
        loc is a string or an integer specifying the legend location.
        The valid location codes are::

        'upper right'  : 1,
        'upper left'   : 2,
        'lower left'   : 3,
        'lower right'  : 4,
        'right'        : 5, (same as 'center right', for back-compatibility)
        'center left'  : 6,
        'center right' : 7,
        'lower center' : 8,
        'upper center' : 9,
        'center'       : 10,

        pad : pad around the child for drawing a frame. given in
          fraction of fontsize.

        borderpad : pad between offsetbox frame and the bbox_to_anchor,

        child : OffsetBox instance that will be anchored.

        prop : font property. This is only used as a reference for paddings.

        frameon : draw a frame box if True.

        bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.

        bbox_transform : with which the bbox_to_anchor will be transformed.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30015 32394])
                    ("set_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32413 32417])
                            ("child" variable nil (reparse-symbol function_parameters) [32419 32424]))                          )
                        (reparse-symbol indented_block_body) [32399 32585])
                    ("get_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32604 32608]))                          )
                        (reparse-symbol indented_block_body) [32590 32665])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32687 32691]))                          )
                        (reparse-symbol indented_block_body) [32670 32761])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32781 32785])
                            ("renderer" variable nil (reparse-symbol function_parameters) [32787 32795]))                          
                        :documentation "
        return the extent of the artist. The extent of the child
        added with the pad is returned
        ")
                        (reparse-symbol indented_block_body) [32766 33159])
                    ("get_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33187 33191]))                          
                        :documentation "
        return the bbox that the legend will be anchored
        ")
                        (reparse-symbol indented_block_body) [33164 33626])
                    ("set_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33654 33658])
                            ("bbox" variable nil (reparse-symbol function_parameters) [33660 33664])
                            ("transform" variable nil (reparse-symbol function_parameters) [33666 33675]))                          
                        :documentation "
        set the bbox that the child will be anchored.

        *bbox* can be a Bbox instance, a list of [left, bottom, width,
        height], or a list of [left, bottom] where the width and
        height will be assumed to be zero. The bbox will be
        transformed to display coordinate by the given transform.
        ")
                        (reparse-symbol indented_block_body) [33631 34499])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34526 34530])
                            ("renderer" variable nil (reparse-symbol function_parameters) [34532 34540]))                          )
                        (reparse-symbol indented_block_body) [34504 34819])
                    ("_update_offset_func" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34848 34852])
                            ("renderer" variable nil (reparse-symbol function_parameters) [34854 34862])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [34864 34872]))                          
                        :documentation "
        Update the offset func which depends on the dpi of the
        renderer (because of the padding).
        ")
                        (reparse-symbol indented_block_body) [34824 35672])
                    ("update_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35694 35698])
                            ("bbox" variable nil (reparse-symbol function_parameters) [35700 35704])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [35706 35714]))                          )
                        (reparse-symbol indented_block_body) [35677 35899])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35913 35917])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35919 35927]))                          )
                        (reparse-symbol indented_block_body) [35904 36628])
                    ("_get_anchored_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36656 36660])
                            ("loc" variable nil (reparse-symbol function_parameters) [36662 36665])
                            ("bbox" variable nil (reparse-symbol function_parameters) [36667 36671])
                            ("parentbbox" variable nil (reparse-symbol function_parameters) [36673 36683])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [36685 36694]))                          
                        :documentation "
        return the position of the bbox anchored at the parentbbox
        with the loc code, with the borderpad.
        ")
                        (reparse-symbol indented_block_body) [36633 37485]))                  
                :type "class")
                nil [29275 37485])
            ("AnchoredText" type
               (:documentation "
    AnchoredOffsetbox with Text.
    "
                :superclasses ("AnchoredOffsetbox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        s : string
            Text.

        loc : str
            Location code.

        pad : float, optional
            Pad between the text and the frame as fraction of the font
            size.

        borderpad : float, optional
            Pad between the frame and the axes (or *bbox_to_anchor*).

        prop : `matplotlib.font_manager.FontProperties`
            Font properties.

        Notes
        -----
        Other keyword parameters of `AnchoredOffsetbox` are also
        allowed.
        \"\"\"" code nil (reparse-symbol indented_block_body) [37661 38221])
                            ("if" code nil (reparse-symbol indented_block_body) [38231 38270])
                            ("badkwargs" variable nil (reparse-symbol indented_block_body) [38278 38346])
                            ("if" code nil (reparse-symbol indented_block_body) [38355 38523])
                            ("self" variable nil (reparse-symbol indented_block_body) [38532 38592])
                            ("fp" variable nil (reparse-symbol indented_block_body) [38601 38641])
                            ("super" code nil (reparse-symbol indented_block_body) [38650 38779]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37593 37597])
                            ("s" variable nil (reparse-symbol function_parameters) [37599 37600])
                            ("loc" variable nil (reparse-symbol function_parameters) [37602 37605])
                            ("pad" variable nil (reparse-symbol function_parameters) [37607 37610])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [37616 37625])
                            ("prop" variable nil (reparse-symbol function_parameters) [37631 37635])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37642 37650]))                          
                        :documentation "
        Parameters
        ----------
        s : string
            Text.

        loc : str
            Location code.

        pad : float, optional
            Pad between the text and the frame as fraction of the font
            size.

        borderpad : float, optional
            Pad between the frame and the axes (or *bbox_to_anchor*).

        prop : `matplotlib.font_manager.FontProperties`
            Font properties.

        Notes
        -----
        Other keyword parameters of `AnchoredOffsetbox` are also
        allowed.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37580 38780]))                  
                :type "class")
                nil [37487 38780])
            ("OffsetImage" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("OffsetBox" code nil (reparse-symbol indented_block_body) [39170 39194])
                            ("self" variable nil (reparse-symbol indented_block_body) [39203 39226])
                            ("self" variable nil (reparse-symbol indented_block_body) [39236 39706])
                            ("self" variable nil (reparse-symbol indented_block_body) [39716 39745])
                            ("self" code nil (reparse-symbol indented_block_body) [39755 39774])
                            ("self" code nil (reparse-symbol indented_block_body) [39783 39801]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38829 38833])
                            ("arr" variable nil (reparse-symbol function_parameters) [38835 38838])
                            ("zoom" variable nil (reparse-symbol function_parameters) [38857 38861])
                            ("cmap" variable nil (reparse-symbol function_parameters) [38882 38886])
                            ("norm" variable nil (reparse-symbol function_parameters) [38910 38914])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [38938 38951])
                            ("origin" variable nil (reparse-symbol function_parameters) [38975 38981])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [39005 39015])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [39036 39045])
                            ("resample" variable nil (reparse-symbol function_parameters) [39068 39076])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [39101 39108])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39132 39140]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38816 39802])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39820 39824])
                            ("arr" variable nil (reparse-symbol function_parameters) [39826 39829]))                          )
                        (reparse-symbol indented_block_body) [39807 39935])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39953 39957]))                          )
                        (reparse-symbol indented_block_body) [39940 39986])
                    ("set_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40004 40008])
                            ("zoom" variable nil (reparse-symbol function_parameters) [40010 40014]))                          )
                        (reparse-symbol indented_block_body) [39991 40069])
                    ("get_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40087 40091]))                          )
                        (reparse-symbol indented_block_body) [40074 40120])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40542 40546]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [40527 40641])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40663 40667]))                          )
                        (reparse-symbol indented_block_body) [40646 40698])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40725 40729])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40731 40739]))                          )
                        (reparse-symbol indented_block_body) [40703 40965])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40985 40989])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40991 40999]))                          )
                        (reparse-symbol indented_block_body) [40970 41320])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41334 41338])
                            ("renderer" variable nil (reparse-symbol function_parameters) [41340 41348]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [41325 41532]))                  
                :type "class")
                nil [38782 41532])
            ("AnnotationBbox" type
               (:documentation "
    Annotation-like class, but with offsetbox instead of Text.
    "
                :superclasses ("martist.Artist" "_AnnotationBase")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [41672 41682])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41700 41704]))                          )
                        (reparse-symbol indented_block_body) [41688 41773])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *offsetbox* : OffsetBox instance

        *xycoords* : same as Annotation but can be a tuple of two
           strings which are interpreted as x and y coordinates.

        *boxcoords* : similar to textcoords as Annotation but can be a
           tuple of two strings which are interpreted as x and y
           coordinates.

        *box_alignment* : a tuple of two floats for a vertical and
           horizontal alignment of the offset box w.r.t. the *boxcoords*.
           The lower-left corner is (0.0) and upper-right corner is (1.1).

        other parameters are identical to that of Annotation.
        \"\"\"" code nil (reparse-symbol indented_block_body) [42208 42837])
                            ("martist" code nil (reparse-symbol indented_block_body) [42847 42886])
                            ("_AnnotationBase" code nil (reparse-symbol indented_block_body) [42895 43080])
                            ("self" variable nil (reparse-symbol indented_block_body) [43090 43116])
                            ("self" variable nil (reparse-symbol indented_block_body) [43126 43154])
                            ("self" code nil (reparse-symbol indented_block_body) [43164 43191])
                            ("if" code nil (reparse-symbol indented_block_body) [43201 43292])
                            ("if" code nil (reparse-symbol indented_block_body) [43301 43414])
                            ("if" code nil (reparse-symbol indented_block_body) [43423 43742])
                            ("self" variable nil (reparse-symbol indented_block_body) [43804 43839])
                            ("self" variable nil (reparse-symbol indented_block_body) [43865 44078])
                            ("self" code nil (reparse-symbol indented_block_body) [44087 44129])
                            ("if" code nil (reparse-symbol indented_block_body) [44138 44192])
                            ("self" variable nil (reparse-symbol indented_block_body) [44200 44225]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41821 41825])
                            ("offsetbox" variable nil (reparse-symbol function_parameters) [41827 41836])
                            ("xy" variable nil (reparse-symbol function_parameters) [41838 41840])
                            ("xybox" variable nil (reparse-symbol function_parameters) [41859 41864])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [41888 41896])
                            ("boxcoords" variable nil (reparse-symbol function_parameters) [41922 41931])
                            ("frameon" variable nil (reparse-symbol function_parameters) [41955 41962])
                            ("pad" variable nil (reparse-symbol function_parameters) [41969 41972])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [42008 42023])
                            ("box_alignment" variable nil (reparse-symbol function_parameters) [42047 42060])
                            ("bboxprops" variable nil (reparse-symbol function_parameters) [42090 42099])
                            ("arrowprops" variable nil (reparse-symbol function_parameters) [42123 42133])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [42157 42165])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42189 42197]))                          
                        :documentation "
        *offsetbox* : OffsetBox instance

        *xycoords* : same as Annotation but can be a tuple of two
           strings which are interpreted as x and y coordinates.

        *boxcoords* : similar to textcoords as Annotation but can be a
           tuple of two strings which are interpreted as x and y
           coordinates.

        *box_alignment* : a tuple of two floats for a vertical and
           horizontal alignment of the offset box w.r.t. the *boxcoords*.
           The lower-left corner is (0.0) and upper-right corner is (1.1).

        other parameters are identical to that of Annotation.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41778 44226])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44255 44259]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [44231 44288])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44321 44325])
                            ("xyann" variable nil (reparse-symbol function_parameters) [44327 44332]))                          
                        :decorators 
                          ( ("xyann.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [44293 44388])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44421 44425]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [44393 44458])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44499 44503])
                            ("coords" variable nil (reparse-symbol function_parameters) [44505 44511]))                          
                        :decorators 
                          ( ("anncoords.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [44463 44572])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44590 44594])
                            ("event" variable nil (reparse-symbol function_parameters) [44596 44601]))                          )
                        (reparse-symbol indented_block_body) [44577 44879])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44901 44905]))                          )
                        (reparse-symbol indented_block_body) [44884 45055])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45075 45079])
                            ("fig" variable nil (reparse-symbol function_parameters) [45081 45084]))                          )
                        (reparse-symbol indented_block_body) [45060 45258])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45280 45284])
                            ("s" variable nil (reparse-symbol function_parameters) [45286 45287]))                          
                        :documentation "
        set fontsize in points
        ")
                        (reparse-symbol indented_block_body) [45263 45486])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45508 45512])
                            ("s" variable nil (reparse-symbol function_parameters) [45514 45515]))                          
                        :documentation "
        return fontsize in points
        ")
                        (reparse-symbol indented_block_body) [45491 45627])
                    ("update_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45653 45657])
                            ("renderer" variable nil (reparse-symbol function_parameters) [45659 45667]))                          
                        :documentation "
        Update the pixel positions of the annotated point and the text.
        ")
                        (reparse-symbol indented_block_body) [45632 46094])
                    ("_update_position_xybox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46126 46130])
                            ("renderer" variable nil (reparse-symbol function_parameters) [46132 46140])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [46142 46150]))                          
                        :documentation "
        Update the pixel positions of the annotation text and the arrow
        patch.
        ")
                        (reparse-symbol indented_block_body) [46099 48235])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48249 48253])
                            ("renderer" variable nil (reparse-symbol function_parameters) [48255 48263]))                          
                        :documentation "
        Draw the :class:`Annotation` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [48240 48998]))                  
                :type "class")
                nil [41534 48998])
            ("DraggableBase" type
               (:documentation "
    helper code for a draggable artist (legend, offsetbox)
    The derived class must override following two method.

      def save_offset(self):
          pass

      def update_offset(self, dx, dy):
          pass

    *save_offset* is called when the object is picked for dragging and it
    is meant to save reference position of the artist.

    *update_offset* is called during the dragging. dx and dy is the pixel
     offset from the point where the mouse drag started.

    Optionally you may override following two methods.

      def artist_picker(self, artist, evt):
          return self.ref_artist.contains(evt)

      def finalize_offset(self):
          pass

    *artist_picker* is a picker method that will be
     used. *finalize_offset* is called when the mouse is released. In
     current implementation of DraggableLegend and DraggableAnnotation,
     *update_offset* places the artists simply in display
     coordinates. And *finalize_offset* recalculate their position in
     the normalized axes coordinate and set a relavant attribute.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [50171 50199])
                            ("self" variable nil (reparse-symbol indented_block_body) [50208 50231])
                            ("self" variable nil (reparse-symbol indented_block_body) [50241 50284])
                            ("self" code nil (reparse-symbol indented_block_body) [50293 50348])
                            ("c2" variable nil (reparse-symbol indented_block_body) [50358 50414])
                            ("c3" variable nil (reparse-symbol indented_block_body) [50423 50492])
                            ("ref_artist" code nil (reparse-symbol indented_block_body) [50502 50543])
                            ("self" variable nil (reparse-symbol indented_block_body) [50552 50572]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50128 50132])
                            ("ref_artist" variable nil (reparse-symbol function_parameters) [50134 50144])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [50146 50154]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [50115 50573])
                    ("on_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50592 50596])
                            ("evt" variable nil (reparse-symbol function_parameters) [50598 50601]))                          )
                        (reparse-symbol indented_block_body) [50578 50778])
                    ("on_motion_blit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50802 50806])
                            ("evt" variable nil (reparse-symbol function_parameters) [50808 50811]))                          )
                        (reparse-symbol indented_block_body) [50783 51144])
                    ("on_pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51161 51165])
                            ("evt" variable nil (reparse-symbol function_parameters) [51167 51170]))                          )
                        (reparse-symbol indented_block_body) [51149 52059])
                    ("on_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52079 52083])
                            ("event" variable nil (reparse-symbol function_parameters) [52085 52090]))                          )
                        (reparse-symbol indented_block_body) [52064 52325])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52345 52349]))                          
                        :documentation "disconnect the callbacks")
                        (reparse-symbol indented_block_body) [52330 52609])
                    ("artist_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52632 52636])
                            ("artist" variable nil (reparse-symbol function_parameters) [52638 52644])
                            ("evt" variable nil (reparse-symbol function_parameters) [52646 52649]))                          )
                        (reparse-symbol indented_block_body) [52614 52697])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52718 52722]))                          )
                        (reparse-symbol indented_block_body) [52702 52738])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52761 52765])
                            ("dx" variable nil (reparse-symbol function_parameters) [52767 52769])
                            ("dy" variable nil (reparse-symbol function_parameters) [52771 52773]))                          )
                        (reparse-symbol indented_block_body) [52743 52789])
                    ("finalize_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52814 52818]))                          )
                        (reparse-symbol indented_block_body) [52794 52834]))                  
                :type "class")
                nil [49000 52834])
            ("DraggableOffsetBox" type
               (:superclasses ("DraggableBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("DraggableBase" code nil (reparse-symbol indented_block_body) [52948 53007])
                            ("self" variable nil (reparse-symbol indented_block_body) [53016 53042]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52894 52898])
                            ("ref_artist" variable nil (reparse-symbol function_parameters) [52900 52910])
                            ("offsetbox" variable nil (reparse-symbol function_parameters) [52912 52921])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [52923 52931]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52881 53043])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53064 53068]))                          )
                        (reparse-symbol indented_block_body) [53048 53368])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53391 53395])
                            ("dx" variable nil (reparse-symbol function_parameters) [53397 53399])
                            ("dy" variable nil (reparse-symbol function_parameters) [53401 53403]))                          )
                        (reparse-symbol indented_block_body) [53373 53524])
                    ("get_loc_in_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53551 53555]))                          )
                        (reparse-symbol indented_block_body) [53529 53808]))                  
                :type "class")
                nil [52836 53808])
            ("DraggableAnnotation" type
               (:superclasses ("DraggableBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("DraggableBase" code nil (reparse-symbol indented_block_body) [53912 53971])
                            ("self" variable nil (reparse-symbol indented_block_body) [53980 54008]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53869 53873])
                            ("annotation" variable nil (reparse-symbol function_parameters) [53875 53885])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [53887 53895]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53856 54009])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54030 54034]))                          )
                        (reparse-symbol indented_block_body) [54014 54135])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54158 54162])
                            ("dx" variable nil (reparse-symbol function_parameters) [54164 54166])
                            ("dy" variable nil (reparse-symbol function_parameters) [54168 54170]))                          )
                        (reparse-symbol indented_block_body) [54140 54307]))                  
                :type "class")
                nil [53810 54307])
            ("if" code nil nil [54309 55539]))          
      :file "offsetbox.py"
      :pointmax 55539
      :fsize 55538
      :lastmodtime '(23240 23001 113461 0)
      :unmatched-syntax '((FROM 5686 . 5690) (PERIOD 5691 . 5692) (FROM 5392 . 5396) (PERIOD 5397 . 5398)))
    (semanticdb-table "semanticdb-table-15637c0"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("matplotlib.cbook" include nil nil [123 155])
            ("matplotlib.artist" include nil nil [156 191])
            ("Container" type
               (:documentation "
    Base class for containers.

    Containers are classes that collect semantically related Artists such as
    the bars of a bar plot.
    "
                :superclasses ("tuple")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [389 393]))                          )
                        (reparse-symbol indented_block_body) [376 497])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [514 517])
                        ("kl" variable nil (reparse-symbol function_parameters) [519 522])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [524 532]))                      ) (reparse-symbol indented_block_body) [502 576])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [626 647])
                            ("self" variable nil (reparse-symbol indented_block_body) [688 701])
                            ("self" variable nil (reparse-symbol indented_block_body) [728 752])
                            ("self" variable nil (reparse-symbol indented_block_body) [791 817])
                            ("self" code nil (reparse-symbol indented_block_body) [827 848]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [594 598])
                            ("kl" variable nil (reparse-symbol function_parameters) [600 602])
                            ("label" variable nil (reparse-symbol function_parameters) [604 609]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [581 849])
                    ("set_remove_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [876 880])
                            ("f" variable nil (reparse-symbol function_parameters) [882 883]))                          )
                        (reparse-symbol indented_block_body) [854 918])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [934 938]))                          )
                        (reparse-symbol indented_block_body) [923 1173])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1195 1199]))                          )
                        (reparse-symbol indented_block_body) [1178 1422])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1441 1445]))                          
                        :documentation "
        Get the label used for this artist in the legend.
        ")
                        (reparse-symbol indented_block_body) [1427 1557])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1576 1580])
                            ("s" variable nil (reparse-symbol function_parameters) [1582 1583]))                          
                        :documentation "
        Set the label to *s* for auto legend.

        ACCEPTS: string or anything printable with '%s' conversion.
        ")
                        (reparse-symbol indented_block_body) [1562 1859])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1881 1885])
                            ("func" variable nil (reparse-symbol function_parameters) [1887 1891]))                          
                        :documentation "
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        ")
                        (reparse-symbol indented_block_body) [1864 2253])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2278 2282])
                            ("oid" variable nil (reparse-symbol function_parameters) [2284 2287]))                          
                        :documentation "
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        ")
                        (reparse-symbol indented_block_body) [2258 2548])
                    ("pchanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2566 2570]))                          
                        :documentation "
        Fire an event when property changed, calling all of the
        registered callbacks.
        ")
                        (reparse-symbol indented_block_body) [2553 2781])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2803 2807]))                          )
                        (reparse-symbol indented_block_body) [2786 2887]))                  
                :type "class")
                nil [194 2887])
            ("BarContainer" type
               (:documentation "
    Container for the artists of bar plots (e.g. created by `.Axes.bar`).

    The container can be treated as a tuple of the *patches* themselves.
    Additionally, you can access these and further parameters by the
    attributes.

    Attributes
    ----------
    patches : list of :class:`~matplotlib.patches.Rectangle`
        The artists of the bars.

    errorbar : None or :class:`~matplotlib.container.ErrorbarContainer`
        A container for the error bar artists if error bars are present.
        *None* otherwise.

    "
                :superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3534 3556])
                            ("self" variable nil (reparse-symbol indented_block_body) [3565 3589])
                            ("Container" code nil (reparse-symbol indented_block_body) [3598 3641]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3485 3489])
                            ("patches" variable nil (reparse-symbol function_parameters) [3491 3498])
                            ("errorbar" variable nil (reparse-symbol function_parameters) [3500 3508])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3515 3523]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3472 3642]))                  
                :type "class")
                nil [2889 3642])
            ("ErrorbarContainer" type
               (:documentation "
    Container for the artists of error bars (e.g. created by `.Axes.errorbar`).

    The container can be treated as the *lines* tuple itself.
    Additionally, you can access these and further parameters by the
    attributes.

    Attributes
    ----------
    lines : tuple
        Tuple of ``(data_line, caplines, barlinecols)``.

        - data_line : :class:`~matplotlib.lines.Line2D` instance of
          x, y plot markers and/or line.
        - caplines : tuple of :class:`~matplotlib.lines.Line2D` instances of
          the error bar caps.
        - barlinecols : list of :class:`~matplotlib.collections.LineCollection`
          with the horizontal and vertical error ranges.

    has_xerr, has_yerr : bool
        ``True`` if the errorbar has x/y errors.

    "
                :superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4547 4565])
                            ("self" variable nil (reparse-symbol indented_block_body) [4574 4598])
                            ("self" variable nil (reparse-symbol indented_block_body) [4607 4631])
                            ("Container" code nil (reparse-symbol indented_block_body) [4640 4681]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4483 4487])
                            ("lines" variable nil (reparse-symbol function_parameters) [4489 4494])
                            ("has_xerr" variable nil (reparse-symbol function_parameters) [4496 4504])
                            ("has_yerr" variable nil (reparse-symbol function_parameters) [4512 4520])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4528 4536]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4470 4682]))                  
                :type "class")
                nil [3644 4682])
            ("StemContainer" type
               (:documentation "
    Container for the artists created in a :meth:`.Axes.stem` plot.

    The container can be treated like a namedtuple ``(markerline, stemlines,
    baseline)``.

    Attributes
    ----------
    markerline :  :class:`~matplotlib.lines.Line2D`
        The artist of the markers at the stem heads.

    stemlines : list of :class:`~matplotlib.lines.Line2D`
        The artists of the vertical lines for all stems.

    baseline : :class:`~matplotlib.lines.Line2D`
        The artist of the horizontal baseline.

    "
                :superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("markerline, stemlines, baseline" code nil (reparse-symbol indented_block_body) [5319 5382])
                            ("self" variable nil (reparse-symbol indented_block_body) [5391 5419])
                            ("self" variable nil (reparse-symbol indented_block_body) [5428 5454])
                            ("self" variable nil (reparse-symbol indented_block_body) [5463 5487])
                            ("Container" code nil (reparse-symbol indented_block_body) [5496 5561]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5263 5267])
                            ("markerline_stemlines_baseline" variable nil (reparse-symbol function_parameters) [5269 5298])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5300 5308]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5250 5562]))                  
                :type "class")
                nil [4684 5562]))          
      :file "container.py"
      :pointmax 5562
      :fsize 5561
      :lastmodtime '(23240 23001 109461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-160aa54"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module defines default legend handlers.

It is strongly encouraged to have read the :ref:`legend guide
<sphx_glr_tutorials_intermediate_legend_guide.py>` before this documentation.

Legend handlers are expected to be a callable object with a following
signature. ::

    legend_handler(legend, orig_handle, fontsize, handlebox)

Where *legend* is the legend itself, *orig_handle* is the original
plot, *fontsize* is the fontsize in pixels, and *handlebox* is a
OffsetBox instance. Within the call, you should create relevant
artists (using relevant properties from the *legend* and/or
*orig_handle*) and add them into the handlebox. The artists needs to
be scaled according to the fontsize (note that the size is in pixel,
i.e., this is dpi-scaled value).

This module includes definition of several legend handler classes
derived from the base class (HandlerBase) with the following method::

    def legend_artist(self, legend, orig_handle, fontsize, handlebox):

\"\"\"" code nil nil [1 979])
            ("" code nil nil [1003 1088])
            ("six" include nil nil [1090 1100])
            ("six.moves" include nil nil [1101 1126])
            ("itertools" include nil nil [1127 1154])
            ("numpy" include nil nil [1156 1174])
            ("matplotlib.lines" include nil nil [1176 1211])
            ("matplotlib.patches" include nil nil [1212 1252])
            ("matplotlib.collections" include nil nil [1253 1291])
            ("matplotlib.colors" include nil nil [1292 1327])
            ("update_from_first_child" function (:arguments 
              ( ("tgt" variable nil (reparse-symbol function_parameters) [1358 1361])
                ("src" variable nil (reparse-symbol function_parameters) [1363 1366]))              ) nil [1330 1412])
            ("HandlerBase" type
               (:documentation "
    A Base class for default legend handlers.

    The derived classes are meant to override *create_artists* method, which
    has a following signature.::

      def create_artists(self, legend, orig_handle,
                         xdescent, ydescent, width, height, fontsize,
                         trans):

    The overridden method needs to create artists of the given
    transform that fits in the given dimension (xdescent, ydescent,
    width, height) that are scaled by fontsize if necessary.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self, self" code nil (reparse-symbol indented_block_body) [2032 2067])
                            ("self" variable nil (reparse-symbol indented_block_body) [2076 2112]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1981 1985])
                            ("xpad" variable nil (reparse-symbol function_parameters) [1987 1991])
                            ("ypad" variable nil (reparse-symbol function_parameters) [1996 2000])
                            ("update_func" variable nil (reparse-symbol function_parameters) [2005 2016]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1968 2113])
                    ("_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2135 2139])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2141 2154])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2156 2167]))                          )
                        (reparse-symbol indented_block_body) [2118 2356])
                    ("_default_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2386 2390])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2392 2405])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2407 2418]))                          )
                        (reparse-symbol indented_block_body) [2361 2468])
                    ("update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2489 2493])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2495 2508])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2510 2521])
                            ("legend" variable nil (reparse-symbol function_parameters) [2523 2529]))                          )
                        (reparse-symbol indented_block_body) [2473 2719])
                    ("adjust_drawing_area" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2748 2752])
                            ("legend" variable nil (reparse-symbol function_parameters) [2754 2760])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2762 2773])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [2803 2811])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [2813 2821])
                            ("width" variable nil (reparse-symbol function_parameters) [2823 2828])
                            ("height" variable nil (reparse-symbol function_parameters) [2830 2836])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [2838 2846]))                          )
                        (reparse-symbol indented_block_body) [2724 3126])
                    ("legend_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3149 3153])
                            ("legend" variable nil (reparse-symbol function_parameters) [3155 3161])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [3163 3174])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [3198 3206])
                            ("handlebox" variable nil (reparse-symbol function_parameters) [3208 3217]))                          
                        :documentation "
        Return the artist that this HandlerBase generates for the given
        original artist/handle.

        Parameters
        ----------
        legend : :class:`matplotlib.legend.Legend` instance
            The legend for which these legend artists are being created.
        orig_handle : :class:`matplotlib.artist.Artist` or similar
            The object for which these legend artists are being created.
        fontsize : float or int
            The fontsize in pixels. The artists being created should
            be scaled according to the given fontsize.
        handlebox : :class:`matplotlib.offsetbox.OffsetBox` instance
            The box which has been created to hold this legend entry's
            artists. Artists created in the `legend_artist` method must
            be added to this handlebox inside this method.

        ")
                        (reparse-symbol indented_block_body) [3131 4727])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4751 4755])
                            ("legend" variable nil (reparse-symbol function_parameters) [4757 4763])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [4765 4776])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [4801 4809])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [4811 4819])
                            ("width" variable nil (reparse-symbol function_parameters) [4821 4826])
                            ("height" variable nil (reparse-symbol function_parameters) [4828 4834])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [4836 4844])
                            ("trans" variable nil (reparse-symbol function_parameters) [4869 4874]))                          )
                        (reparse-symbol indented_block_body) [4732 4936]))                  
                :type "class")
                nil [1414 4936])
            ("HandlerNpoints" type
               (:documentation "
    A legend handler that shows *numpoints* points in the legend entry.
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        marker_pad : float
            Padding between points in legend entry.

        numpoints : int
            Number of points to show in legend entry.

        Notes
        -----
        Any other keyword arguments are given to `HandlerBase`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5131 5435])
                            ("HandlerBase" code nil (reparse-symbol indented_block_body) [5444 5476])
                            ("self" variable nil (reparse-symbol indented_block_body) [5486 5513])
                            ("self" variable nil (reparse-symbol indented_block_body) [5522 5551]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5078 5082])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [5084 5094])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [5100 5109])
                            ("kw" variable nil (reparse-symbol function_parameters) [5116 5120]))                          
                        :documentation "
        Parameters
        ----------
        marker_pad : float
            Padding between points in legend entry.

        numpoints : int
            Number of points to show in legend entry.

        Notes
        -----
        Any other keyword arguments are given to `HandlerBase`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5065 5552])
                    ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5575 5579])
                            ("legend" variable nil (reparse-symbol function_parameters) [5581 5587]))                          )
                        (reparse-symbol indented_block_body) [5557 5711])
                    ("get_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5730 5734])
                            ("legend" variable nil (reparse-symbol function_parameters) [5736 5742])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [5744 5752])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [5754 5762])
                            ("width" variable nil (reparse-symbol function_parameters) [5764 5769])
                            ("height" variable nil (reparse-symbol function_parameters) [5771 5777])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [5779 5787]))                          )
                        (reparse-symbol indented_block_body) [5716 6330]))                  
                :type "class")
                nil [4938 6330])
            ("HandlerNpointsYoffsets" type
               (:documentation "
    A legend handler that shows *numpoints* in the legend, and allows them to
    be individually offest in the y-direction.
    "
                :superclasses ("HandlerNpoints")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        numpoints : int
            Number of points to show in legend entry.

        yoffsets : array of floats
            Length *numpoints* list of y offsets for each point in
            legend entry.

        Notes
        -----
        Any other keyword arguments are given to `HandlerNpoints`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6588 6944])
                            ("HandlerNpoints" code nil (reparse-symbol indented_block_body) [6953 7009])
                            ("self" variable nil (reparse-symbol indented_block_body) [7018 7043]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6536 6540])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [6542 6551])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [6558 6566])
                            ("kw" variable nil (reparse-symbol function_parameters) [6573 6577]))                          
                        :documentation "
        Parameters
        ----------
        numpoints : int
            Number of points to show in legend entry.

        yoffsets : array of floats
            Length *numpoints* list of y offsets for each point in
            legend entry.

        Notes
        -----
        Any other keyword arguments are given to `HandlerNpoints`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6523 7044])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7063 7067])
                            ("legend" variable nil (reparse-symbol function_parameters) [7069 7075])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [7077 7085])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [7087 7095])
                            ("width" variable nil (reparse-symbol function_parameters) [7097 7102])
                            ("height" variable nil (reparse-symbol function_parameters) [7104 7110])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [7112 7120]))                          )
                        (reparse-symbol indented_block_body) [7049 7303]))                  
                :type "class")
                nil [6332 7303])
            ("HandlerLine2D" type
               (:documentation "
    Handler for `.Line2D` instances.
    "
                :superclasses ("HandlerNpoints")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        marker_pad : float
            Padding between points in legend entry.

        numpoints : int
            Number of points to show in legend entry.

        Notes
        -----
        Any other keyword arguments are given to `HandlerNpoints`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7465 7772])
                            ("HandlerNpoints" code nil (reparse-symbol indented_block_body) [7781 7892]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7412 7416])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [7418 7428])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [7434 7443])
                            ("kw" variable nil (reparse-symbol function_parameters) [7450 7454]))                          
                        :documentation "
        Parameters
        ----------
        marker_pad : float
            Padding between points in legend entry.

        numpoints : int
            Number of points to show in legend entry.

        Notes
        -----
        Any other keyword arguments are given to `HandlerNpoints`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7399 7893])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7917 7921])
                            ("legend" variable nil (reparse-symbol function_parameters) [7923 7929])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [7931 7942])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [7967 7975])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [7977 7985])
                            ("width" variable nil (reparse-symbol function_parameters) [7987 7992])
                            ("height" variable nil (reparse-symbol function_parameters) [7994 8000])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [8002 8010])
                            ("trans" variable nil (reparse-symbol function_parameters) [8035 8040]))                          )
                        (reparse-symbol indented_block_body) [7898 9088]))                  
                :type "class")
                nil [7305 9088])
            ("HandlerPatch" type
               (:documentation "
    Handler for `.Patch` instances.
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        patch_func : callable, optional
            The function that creates the legend key artist.
            *patch_func* should have the signature::

                def patch_func(legend=legend, orig_handle=orig_handle,
                               xdescent=xdescent, ydescent=ydescent,
                               width=width, height=height, fontsize=fontsize)

            Subsequently the created artist will have its ``update_prop`` method
            called and the appropriate transform will be applied.

        Notes
        -----
        Any other keyword arguments are given to `HandlerBase`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [9230 9897])
                            ("HandlerBase" code nil (reparse-symbol indented_block_body) [9906 9938])
                            ("self" variable nil (reparse-symbol indented_block_body) [9947 9976]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9192 9196])
                            ("patch_func" variable nil (reparse-symbol function_parameters) [9198 9208])
                            ("kw" variable nil (reparse-symbol function_parameters) [9215 9219]))                          
                        :documentation "
        Parameters
        ----------
        patch_func : callable, optional
            The function that creates the legend key artist.
            *patch_func* should have the signature::

                def patch_func(legend=legend, orig_handle=orig_handle,
                               xdescent=xdescent, ydescent=ydescent,
                               width=width, height=height, fontsize=fontsize)

            Subsequently the created artist will have its ``update_prop`` method
            called and the appropriate transform will be applied.

        Notes
        -----
        Any other keyword arguments are given to `HandlerBase`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9179 9977])
                    ("_create_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10000 10004])
                            ("legend" variable nil (reparse-symbol function_parameters) [10006 10012])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [10014 10025])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [10049 10057])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [10059 10067])
                            ("width" variable nil (reparse-symbol function_parameters) [10069 10074])
                            ("height" variable nil (reparse-symbol function_parameters) [10076 10082])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [10084 10092]))                          )
                        (reparse-symbol indented_block_body) [9982 10494])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10518 10522])
                            ("legend" variable nil (reparse-symbol function_parameters) [10524 10530])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [10532 10543])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [10568 10576])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [10578 10586])
                            ("width" variable nil (reparse-symbol function_parameters) [10588 10593])
                            ("height" variable nil (reparse-symbol function_parameters) [10595 10601])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [10603 10611])
                            ("trans" variable nil (reparse-symbol function_parameters) [10613 10618]))                          )
                        (reparse-symbol indented_block_body) [10499 10848]))                  
                :type "class")
                nil [9090 10848])
            ("HandlerLineCollection" type
               (:documentation "
    Handler for `.LineCollection` instances.
    "
                :superclasses ("HandlerLine2D")
                :members 
                  ( ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10977 10981])
                            ("legend" variable nil (reparse-symbol function_parameters) [10983 10989]))                          )
                        (reparse-symbol indented_block_body) [10959 11117])
                    ("_default_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11147 11151])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [11153 11166])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [11168 11179]))                          )
                        (reparse-symbol indented_block_body) [11122 11441])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11465 11469])
                            ("legend" variable nil (reparse-symbol function_parameters) [11471 11477])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [11479 11490])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [11515 11523])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [11525 11533])
                            ("width" variable nil (reparse-symbol function_parameters) [11535 11540])
                            ("height" variable nil (reparse-symbol function_parameters) [11542 11548])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [11550 11558])
                            ("trans" variable nil (reparse-symbol function_parameters) [11560 11565]))                          )
                        (reparse-symbol indented_block_body) [11446 11943]))                  
                :type "class")
                nil [10850 11943])
            ("HandlerRegularPolyCollection" type
               (:documentation "
    Handler for `.RegularPolyCollections`.
    "
                :superclasses ("HandlerNpointsYoffsets")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpointsYoffsets" code nil (reparse-symbol indented_block_body) [12129 12191])
                            ("self" variable nil (reparse-symbol indented_block_body) [12201 12220]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12081 12085])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [12087 12095])
                            ("sizes" variable nil (reparse-symbol function_parameters) [12102 12107])
                            ("kw" variable nil (reparse-symbol function_parameters) [12114 12118]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12068 12221])
                    ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12244 12248])
                            ("legend" variable nil (reparse-symbol function_parameters) [12250 12256]))                          )
                        (reparse-symbol indented_block_body) [12226 12384])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12403 12407])
                            ("legend" variable nil (reparse-symbol function_parameters) [12409 12415])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [12417 12428])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [12448 12456])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [12458 12466])
                            ("width" variable nil (reparse-symbol function_parameters) [12468 12473])
                            ("height" variable nil (reparse-symbol function_parameters) [12475 12481])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [12483 12491]))                          )
                        (reparse-symbol indented_block_body) [12389 13176])
                    ("update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13197 13201])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [13203 13216])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [13218 13229])
                            ("legend" variable nil (reparse-symbol function_parameters) [13231 13237]))                          )
                        (reparse-symbol indented_block_body) [13181 13476])
                    ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13503 13507])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [13509 13520])
                            ("sizes" variable nil (reparse-symbol function_parameters) [13522 13527])
                            ("offsets" variable nil (reparse-symbol function_parameters) [13529 13536])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [13538 13549]))                          )
                        (reparse-symbol indented_block_body) [13481 13871])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13895 13899])
                            ("legend" variable nil (reparse-symbol function_parameters) [13901 13907])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [13909 13920])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [13945 13953])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [13955 13963])
                            ("width" variable nil (reparse-symbol function_parameters) [13965 13970])
                            ("height" variable nil (reparse-symbol function_parameters) [13972 13978])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [13980 13988])
                            ("trans" variable nil (reparse-symbol function_parameters) [14013 14018]))                          )
                        (reparse-symbol indented_block_body) [13876 14694]))                  
                :type "class")
                nil [11945 14694])
            ("HandlerPathCollection" type
               (:documentation "
    Handler for `.PathCollections`, which are used by `~.Axes.scatter`.
    "
                :superclasses ("HandlerRegularPolyCollection")
                :members 
                  ( ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14869 14873])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [14875 14886])
                            ("sizes" variable nil (reparse-symbol function_parameters) [14888 14893])
                            ("offsets" variable nil (reparse-symbol function_parameters) [14895 14902])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [14904 14915]))                          )
                        (reparse-symbol indented_block_body) [14847 15172]))                  
                :type "class")
                nil [14696 15172])
            ("HandlerCircleCollection" type
               (:documentation "
    Handler for `.CircleCollections`.
    "
                :superclasses ("HandlerRegularPolyCollection")
                :members 
                  ( ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15315 15319])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [15321 15332])
                            ("sizes" variable nil (reparse-symbol function_parameters) [15334 15339])
                            ("offsets" variable nil (reparse-symbol function_parameters) [15341 15348])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [15350 15361]))                          )
                        (reparse-symbol indented_block_body) [15293 15552]))                  
                :type "class")
                nil [15174 15552])
            ("HandlerErrorbar" type
               (:documentation "
    Handler for Errorbars.
    "
                :superclasses ("HandlerLine2D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15754 15781])
                            ("self" variable nil (reparse-symbol indented_block_body) [15790 15817])
                            ("HandlerLine2D" code nil (reparse-symbol indented_block_body) [15827 15936]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15652 15656])
                            ("xerr_size" variable nil (reparse-symbol function_parameters) [15658 15667])
                            ("yerr_size" variable nil (reparse-symbol function_parameters) [15673 15682])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [15706 15716])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [15722 15731])
                            ("kw" variable nil (reparse-symbol function_parameters) [15738 15742]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15639 15937])
                    ("get_err_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15959 15963])
                            ("legend" variable nil (reparse-symbol function_parameters) [15965 15971])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [15973 15981])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [15983 15991])
                            ("width" variable nil (reparse-symbol function_parameters) [16014 16019])
                            ("height" variable nil (reparse-symbol function_parameters) [16021 16027])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [16029 16037]))                          )
                        (reparse-symbol indented_block_body) [15942 16260])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16284 16288])
                            ("legend" variable nil (reparse-symbol function_parameters) [16290 16296])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [16298 16309])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [16334 16342])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [16344 16352])
                            ("width" variable nil (reparse-symbol function_parameters) [16354 16359])
                            ("height" variable nil (reparse-symbol function_parameters) [16361 16367])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [16369 16377])
                            ("trans" variable nil (reparse-symbol function_parameters) [16402 16407]))                          )
                        (reparse-symbol indented_block_body) [16265 19707]))                  
                :type "class")
                nil [15554 19707])
            ("HandlerStem" type
               (:documentation "
    Handler for plots produced by `~.Axes.stem`.
    "
                :superclasses ("HandlerNpointsYoffsets")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        marker_pad : float
            Padding between points in legend entry. Default is 0.3.

        numpoints : int, optional
            Number of points to show in legend entry.

        bottom : float, optional

        yoffsets : array of floats, optional
            Length *numpoints* list of y offsets for each point in
            legend entry.

        Notes
        -----
        Any other keyword arguments are given to `HandlerNpointsYoffsets`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [19932 20446])
                            ("HandlerNpointsYoffsets" code nil (reparse-symbol indented_block_body) [20456 20682])
                            ("self" variable nil (reparse-symbol indented_block_body) [20691 20712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19834 19838])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [19840 19850])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [19856 19865])
                            ("bottom" variable nil (reparse-symbol function_parameters) [19889 19895])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [19902 19910])
                            ("kw" variable nil (reparse-symbol function_parameters) [19917 19921]))                          
                        :documentation "
        Parameters
        ----------
        marker_pad : float
            Padding between points in legend entry. Default is 0.3.

        numpoints : int, optional
            Number of points to show in legend entry.

        bottom : float, optional

        yoffsets : array of floats, optional
            Length *numpoints* list of y offsets for each point in
            legend entry.

        Notes
        -----
        Any other keyword arguments are given to `HandlerNpointsYoffsets`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19821 20713])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20732 20736])
                            ("legend" variable nil (reparse-symbol function_parameters) [20738 20744])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [20746 20754])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [20756 20764])
                            ("width" variable nil (reparse-symbol function_parameters) [20766 20771])
                            ("height" variable nil (reparse-symbol function_parameters) [20773 20779])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [20781 20789]))                          )
                        (reparse-symbol indented_block_body) [20718 20986])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21010 21014])
                            ("legend" variable nil (reparse-symbol function_parameters) [21016 21022])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [21024 21035])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [21060 21068])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [21070 21078])
                            ("width" variable nil (reparse-symbol function_parameters) [21080 21085])
                            ("height" variable nil (reparse-symbol function_parameters) [21087 21093])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [21095 21103])
                            ("trans" variable nil (reparse-symbol function_parameters) [21128 21133]))                          )
                        (reparse-symbol indented_block_body) [20991 22339]))                  
                :type "class")
                nil [19709 22339])
            ("HandlerTuple" type
               (:documentation "
    Handler for Tuple.

    Additional kwargs are passed through to `HandlerBase`.

    Parameters
    ----------
    ndivide : int, optional
        The number of sections to divide the legend area into. If None,
        use the length of the input tuple. Default is 1.


    pad : float, optional
        If None, fall back to ``legend.borderpad`` as the default.
        In units of fraction of font size. Default is None.
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [22880 22903])
                            ("self" variable nil (reparse-symbol indented_block_body) [22912 22927])
                            ("HandlerBase" code nil (reparse-symbol indented_block_body) [22936 22972]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22833 22837])
                            ("ndivide" variable nil (reparse-symbol function_parameters) [22839 22846])
                            ("pad" variable nil (reparse-symbol function_parameters) [22850 22853])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [22860 22868]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22820 22973])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22997 23001])
                            ("legend" variable nil (reparse-symbol function_parameters) [23003 23009])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [23011 23022])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [23047 23055])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [23057 23065])
                            ("width" variable nil (reparse-symbol function_parameters) [23067 23072])
                            ("height" variable nil (reparse-symbol function_parameters) [23074 23080])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [23082 23090])
                            ("trans" variable nil (reparse-symbol function_parameters) [23115 23120]))                          )
                        (reparse-symbol indented_block_body) [22978 23930]))                  
                :type "class")
                nil [22341 23930])
            ("HandlerPolyCollection" type
               (:documentation "
    Handler for `.PolyCollection` used in `~.Axes.fill_between` and `~.Axes.stackplot`.
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24099 24103])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [24105 24118])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [24120 24131]))                          )
                        (reparse-symbol indented_block_body) [24082 25358])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25382 25386])
                            ("legend" variable nil (reparse-symbol function_parameters) [25388 25394])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [25396 25407])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [25432 25440])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [25442 25450])
                            ("width" variable nil (reparse-symbol function_parameters) [25452 25457])
                            ("height" variable nil (reparse-symbol function_parameters) [25459 25465])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [25467 25475])
                            ("trans" variable nil (reparse-symbol function_parameters) [25477 25482]))                          )
                        (reparse-symbol indented_block_body) [25363 25683]))                  
                :type "class")
                nil [23932 25683]))          
      :file "legend_handler.py"
      :pointmax 25683
      :fsize 25682
      :lastmodtime '(23240 23001 117461 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-15334d8"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This is a python interface to Adobe Font Metrics Files.  Although a
number of other python implementations exist, and may be more complete
than this, it was decided not to go with them because they were
either:

  1) copyrighted or used a non-BSD compatible license

  2) had too many dependencies and a free standing lib was needed

  3) Did more than needed and it was easier to write afresh rather than
     figure out how to get just what was needed.

It is pretty easy to use, and requires only built-in python libs:

    >>> from matplotlib import rcParams
    >>> import os.path
    >>> afm_fname = os.path.join(rcParams['datapath'],
    ...                         'fonts', 'afm', 'ptmr8a.afm')
    >>>
    >>> from matplotlib.afm import AFM
    >>> with open(afm_fname, 'rb') as fh:
    ...     afm = AFM(fh)
    >>> afm.string_width_height('What the heck?')
    (6220.0, 694)
    >>> afm.get_fontname()
    'Times-Roman'
    >>> afm.get_kern_dist('A', 'f')
    0
    >>> afm.get_kern_dist('A', 'y')
    -92.0
    >>> afm.get_bbox_char('!')
    [130, -9, 238, 676]

\"\"\"" code nil nil [1 1083])
            ("" code nil nil [1108 1193])
            ("six" include nil nil [1195 1205])
            ("six.moves" include nil nil [1206 1231])
            ("sys" include nil nil [1233 1243])
            ("re" include nil nil [1244 1253])
            ("uni2type1" include nil nil [1275 1291])
            ("_to_int" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1646 1647]))              ) nil [1634 1675])
            ("_to_float" variable nil nil [1677 1694])
            ("_to_str" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1709 1710]))              ) nil [1697 1741])
            ("_to_list_of_ints" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1764 1765]))              ) nil [1743 1845])
            ("_to_list_of_floats" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1870 1871]))              ) nil [1847 1923])
            ("_to_bool" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1938 1939]))              ) nil [1925 2046])
            ("_sanity_check" function
               (:documentation "
    Check if the file at least looks like AFM.
    If not, raise :exc:`RuntimeError`.
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [2066 2068]))                  )
                nil [2048 2707])
            ("_parse_header" function
               (:documentation "
    Reads the font metrics header (up to the char metrics) and returns
    a dictionary mapping *key* to *val*.  *val* will be converted to the
    appropriate python type as necessary; e.g.:

        * 'False'->False
        * '0'->0
        * '-168 -218 1000 898'-> [-168, -218, 1000, 898]

    Dictionary keys are

      StartFontMetrics, FontName, FullName, FamilyName, Weight,
      ItalicAngle, IsFixedPitch, FontBBox, UnderlinePosition,
      UnderlineThickness, Version, Notice, EncodingScheme, CapHeight,
      XHeight, Ascender, Descender, StartCharMetrics

    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [2727 2729]))                  )
                nil [2709 4930])
            ("_parse_char_metrics" function
               (:documentation "
    Return a character metric dictionary.  Keys are the ASCII num of
    the character, values are a (*wx*, *name*, *bbox*) tuple, where
    *wx* is the character width, *name* is the postscript language
    name, and *bbox* is a (*llx*, *lly*, *urx*, *ury*) tuple.

    This function is incomplete per the standard, but thus far parses
    all the sample afm files tried.
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [4956 4958]))                  )
                nil [4932 6561])
            ("_parse_kern_pairs" function
               (:documentation "
    Return a kern pairs dictionary; keys are (*char1*, *char2*) tuples and
    values are the kern pair value.  For example, a kern pairs line like
    ``KPX A y -50``

    will be represented as::

      d[ ('A', 'y') ] = -50

    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [6585 6587]))                  )
                nil [6563 7468])
            ("_parse_composites" function
               (:documentation "
    Return a composites dictionary.  Keys are the names of the
    composites.  Values are a num parts list of composite information,
    with each element being a (*name*, *dx*, *dy*) tuple.  Thus a
    composites line reading:

      CC Aacute 2 ; PCC A 0 0 ; PCC acute 160 170 ;

    will be represented as::

      d['Aacute'] = [ ('A', 0, 0), ('acute', 160, 170) ]

    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [7492 7494]))                  )
                nil [7470 8431])
            ("_parse_optional" function
               (:documentation "
    Parse the optional fields for kern pair data and composites

    return value is a (*kernDict*, *compositeDict*) which are the
    return values from :func:`_parse_kern_pairs`, and
    :func:`_parse_composites` if the data exists, or empty dicts
    otherwise
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [8453 8455]))                  )
                nil [8433 9170])
            ("parse_afm" function
               (:documentation "
    Parse the Adobe Font Metics file in file handle *fh*. Return value
    is a (*dhead*, *dcmetrics_ascii*, *dmetrics_name*, *dkernpairs*,
    *dcomposite*) tuple where
    *dhead* is a :func:`_parse_header` dict,
    *dcmetrics_ascii* and *dcmetrics_name* are the two resulting dicts
    from :func:`_parse_char_metrics`,
    *dkernpairs* is a :func:`_parse_kern_pairs` dict (possibly {}) and
    *dcomposite* is a :func:`_parse_composites` dict (possibly {})
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [9186 9188]))                  )
                nil [9172 9897])
            ("AFM" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parse the AFM file in file object *fh*
        \"\"\"" code nil (reparse-symbol indented_block_body) [9955 10017])
                            ("" code nil (reparse-symbol indented_block_body) [10026 10120])
                            ("self" variable nil (reparse-symbol indented_block_body) [10129 10149])
                            ("self" variable nil (reparse-symbol indented_block_body) [10158 10181])
                            ("self" variable nil (reparse-symbol indented_block_body) [10190 10221])
                            ("self" variable nil (reparse-symbol indented_block_body) [10230 10268])
                            ("self" variable nil (reparse-symbol indented_block_body) [10277 10305]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9936 9940])
                            ("fh" variable nil (reparse-symbol function_parameters) [9942 9944]))                          
                        :documentation "
        Parse the AFM file in file object *fh*
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9923 10306])
                    ("get_bbox_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10329 10333])
                            ("c" variable nil (reparse-symbol function_parameters) [10335 10336])
                            ("isord" variable nil (reparse-symbol function_parameters) [10338 10343]))                          )
                        (reparse-symbol indented_block_body) [10311 10459])
                    ("string_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10488 10492])
                            ("s" variable nil (reparse-symbol function_parameters) [10494 10495]))                          
                        :documentation "
        Return the string width (including kerning) and string height
        as a (*w*, *h*) tuple.
        ")
                        (reparse-symbol indented_block_body) [10464 11393])
                    ("get_str_bbox_and_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11427 11431])
                            ("s" variable nil (reparse-symbol function_parameters) [11433 11434]))                          
                        :documentation "
        Return the string bounding box
        ")
                        (reparse-symbol indented_block_body) [11398 12625])
                    ("get_str_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12647 12651])
                            ("s" variable nil (reparse-symbol function_parameters) [12653 12654]))                          
                        :documentation "
        Return the string bounding box
        ")
                        (reparse-symbol indented_block_body) [12630 12772])
                    ("get_name_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12795 12799])
                            ("c" variable nil (reparse-symbol function_parameters) [12801 12802])
                            ("isord" variable nil (reparse-symbol function_parameters) [12804 12809]))                          
                        :documentation "
        Get the name of the character, i.e., ';' is 'semicolon'
        ")
                        (reparse-symbol indented_block_body) [12777 13013])
                    ("get_width_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13037 13041])
                            ("c" variable nil (reparse-symbol function_parameters) [13043 13044])
                            ("isord" variable nil (reparse-symbol function_parameters) [13046 13051]))                          
                        :documentation "
        Get the width of the character from the character metric WX
        field
        ")
                        (reparse-symbol indented_block_body) [13018 13271])
                    ("get_width_from_char_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13305 13309])
                            ("name" variable nil (reparse-symbol function_parameters) [13311 13315]))                          
                        :documentation "
        Get the width of the character from a type1 character name
        ")
                        (reparse-symbol indented_block_body) [13276 13474])
                    ("get_height_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13499 13503])
                            ("c" variable nil (reparse-symbol function_parameters) [13505 13506])
                            ("isord" variable nil (reparse-symbol function_parameters) [13508 13513]))                          
                        :documentation "
        Get the height of character *c* from the bounding box.  This
        is the ink height (space is 0)
        ")
                        (reparse-symbol indented_block_body) [13479 13765])
                    ("get_kern_dist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13788 13792])
                            ("c1" variable nil (reparse-symbol function_parameters) [13794 13796])
                            ("c2" variable nil (reparse-symbol function_parameters) [13798 13800]))                          
                        :documentation "
        Return the kerning pair distance (possibly 0) for chars *c1*
        and *c2*
        ")
                        (reparse-symbol indented_block_body) [13770 14041])
                    ("get_kern_dist_from_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14074 14078])
                            ("name1" variable nil (reparse-symbol function_parameters) [14080 14085])
                            ("name2" variable nil (reparse-symbol function_parameters) [14087 14092]))                          
                        :documentation "
        Return the kerning pair distance (possibly 0) for chars
        *name1* and *name2*
        ")
                        (reparse-symbol indented_block_body) [14046 14260])
                    ("get_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14282 14286]))                          )
                        (reparse-symbol indented_block_body) [14265 14382])
                    ("get_fullname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14404 14408]))                          )
                        (reparse-symbol indented_block_body) [14387 14635])
                    ("get_familyname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14659 14663]))                          )
                        (reparse-symbol indented_block_body) [14640 15086])
                    ("family_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15121 15125]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15091 15165])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15185 15189]))                          )
                        (reparse-symbol indented_block_body) [15170 15289])
                    ("get_angle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15308 15312]))                          )
                        (reparse-symbol indented_block_body) [15294 15399])
                    ("get_capheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15422 15426]))                          )
                        (reparse-symbol indented_block_body) [15404 15512])
                    ("get_xheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15533 15537]))                          )
                        (reparse-symbol indented_block_body) [15517 15618])
                    ("get_underline_thickness" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15651 15655]))                          )
                        (reparse-symbol indented_block_body) [15623 15759])
                    ("get_horizontal_stem_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15794 15798]))                          
                        :documentation "
        Return the standard horizontal stem width as float, or *None* if
        not specified in AFM file.
        ")
                        (reparse-symbol indented_block_body) [15764 15981])
                    ("get_vertical_stem_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16014 16018]))                          
                        :documentation "
        Return the standard vertical stem width as float, or *None* if
        not specified in AFM file.
        ")
                        (reparse-symbol indented_block_body) [15986 16199]))                  
                :type "class")
                nil [9899 16199]))          
      :file "afm.py"
      :pointmax 16199
      :fsize 16198
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax '((INDENT_BLOCK 7253 . 7318) (NEWLINE 7252 . 7253) (IF 7213 . 7215) (STRING_LITERAL 7246 . 7251) (COLON 7251 . 7252) (INDENT_BLOCK 4873 . 4894) (NEWLINE 4872 . 4873) (IF 4842 . 4844) (STRING_LITERAL 4853 . 4871) (COLON 4871 . 4872) (FROM 1254 . 1258) (PERIOD 1259 . 1260)))
    (semanticdb-table "semanticdb-table-15ef66c"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for reading dvi files output by TeX. Several limitations make
this not (currently) useful as a general-purpose dvi preprocessor, but
it is currently used by the pdf backend for processing usetex text.

Interface::

  with Dvi(filename, 72) as dvi:
      # iterate over pages:
      for page in dvi:
          w, h, d = page.width, page.height, page.descent
          for x,y,font,glyph,width in page.text:
              fontname = font.texname
              pointsize = font.size
              ...
          for x,y,height,width in page.boxes:
              ...

\"\"\"" code nil nil [1 580])
            ("__future__" include nil nil [581 645])
            ("six" include nil nil [647 657])
            ("six.moves" include nil nil [658 686])
            ("collections" include nil nil [688 722])
            ("functools" include nil nil [723 759])
            ("logging" include nil nil [760 774])
            ("numpy" include nil nil [775 793])
            ("os" include nil nil [794 803])
            ("re" include nil nil [804 813])
            ("struct" include nil nil [814 827])
            ("sys" include nil nil [828 838])
            ("textwrap" include nil nil [839 854])
            ("matplotlib" include nil nil [856 894])
            ("matplotlib.compat" include nil nil [895 935])
            ("try" code nil nil [937 1061])
            ("if" code nil nil [1062 1107])
            ("_log" variable nil nil [1108 1142])
            ("_dvistate" variable nil nil [1872 1944])
            ("Page" variable nil nil [2023 2083])
            ("Text" variable nil nil [2084 2133])
            ("Box" variable nil nil [2134 2177])
            ("_arg_raw" function
               (:documentation "Return *delta* without reading anything more from the dvi file"
                :arguments 
                  ( ("dvi" variable nil (reparse-symbol function_parameters) [2450 2453])
                    ("delta" variable nil (reparse-symbol function_parameters) [2455 2460]))                  )
                nil [2437 2553])
            ("_arg" function
               (:documentation "Read *bytes* bytes, returning the bytes interpreted as a
    signed integer if *signed* is true, unsigned otherwise."
                :arguments 
                  ( ("bytes" variable nil (reparse-symbol function_parameters) [2564 2569])
                    ("signed" variable nil (reparse-symbol function_parameters) [2571 2577])
                    ("dvi" variable nil (reparse-symbol function_parameters) [2579 2582])
                    ("_" variable nil (reparse-symbol function_parameters) [2584 2585]))                  )
                nil [2555 2750])
            ("_arg_slen" function
               (:documentation "Signed, length *delta*

    Read *delta* bytes, returning None if *delta* is zero, and
    the bytes interpreted as a signed integer otherwise."
                :arguments 
                  ( ("dvi" variable nil (reparse-symbol function_parameters) [2766 2769])
                    ("delta" variable nil (reparse-symbol function_parameters) [2771 2776]))                  )
                nil [2752 3005])
            ("_arg_slen1" function
               (:documentation "Signed, length *delta*+1

    Read *delta*+1 bytes, returning the bytes interpreted as signed."
                :arguments 
                  ( ("dvi" variable nil (reparse-symbol function_parameters) [3022 3025])
                    ("delta" variable nil (reparse-symbol function_parameters) [3027 3032]))                  )
                nil [3007 3175])
            ("_arg_ulen1" function
               (:documentation "Unsigned length *delta*+1

    Read *delta*+1 bytes, returning the bytes interpreted as unsigned."
                :arguments 
                  ( ("dvi" variable nil (reparse-symbol function_parameters) [3192 3195])
                    ("delta" variable nil (reparse-symbol function_parameters) [3197 3202]))                  )
                nil [3177 3349])
            ("_arg_olen1" function
               (:documentation "Optionally signed, length *delta*+1

    Read *delta*+1 bytes, returning the bytes interpreted as
    unsigned integer for 0<=*delta*<3 and signed if *delta*==3."
                :arguments 
                  ( ("dvi" variable nil (reparse-symbol function_parameters) [3366 3369])
                    ("delta" variable nil (reparse-symbol function_parameters) [3371 3376]))                  )
                nil [3351 3594])
            ("_arg_mapping" variable nil nil [3596 3922])
            ("_dispatch" function
               (:documentation "Decorator for dispatch by opcode. Sets the values in *table*
    from *min* to *max* to this method, adds a check that the Dvi state
    matches *state* if not None, reads arguments from the file according
    to *args*.

    *table*
        the dispatch table to be filled in

    *min*
        minimum opcode for calling this function

    *max*
        maximum opcode for calling this function, None if only *min* is allowed

    *state*
        state of the Dvi object in which these opcodes are allowed

    *args*
        sequence of argument specifications:

        ``'raw'``: opcode minus minimum
        ``'u1'``: read one unsigned byte
        ``'u4'``: read four bytes, treat as an unsigned number
        ``'s4'``: read four bytes, treat as a signed number
        ``'slen'``: read (opcode - minimum) bytes, treat as signed
        ``'slen1'``: read (opcode - minimum + 1) bytes, treat as signed
        ``'ulen1'``: read (opcode - minimum + 1) bytes, treat as unsigned
        ``'olen1'``: read (opcode - minimum + 1) bytes, treat as unsigned
                     if under four bytes, signed if four bytes
    "
                :arguments 
                  ( ("table" variable nil (reparse-symbol function_parameters) [3939 3944])
                    ("min" variable nil (reparse-symbol function_parameters) [3946 3949])
                    ("max" variable nil (reparse-symbol function_parameters) [3951 3954])
                    ("state" variable nil (reparse-symbol function_parameters) [3961 3966])
                    ("args" variable nil (reparse-symbol function_parameters) [3973 3977]))                  )
                nil [3925 5680])
            ("Dvi" type
               (:documentation "
    A reader for a dvi (\"device-independent\") file, as produced by TeX.
    The current implementation can only iterate through pages in order,
    and does not even attempt to verify the postamble.

    This class can be used as a context manager to close the underlying
    file upon exit. Pages can be read via iteration. Here is an overly
    simple way to extract text without trying to detect whitespace::

    >>> with matplotlib.dviread.Dvi('input.dvi', 72) as dvi:
    >>>     for page in dvi:
    >>>         print(''.join(unichr(t.glyph) for t in page.text))
    "
                :superclasses ("object")
                :members 
                  ( ("_dtable" variable nil (reparse-symbol indented_block_body) [6312 6349])
                    ("_dispatch" variable nil (reparse-symbol indented_block_body) [6354 6393])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Read the data from the file named *filename* and convert
        TeX's internal units to units of *dpi* per inch.
        *dpi* only sets the units and does not limit the resolution.
        Use None to return TeX's internal units.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6442 6697])
                            ("_log" code nil (reparse-symbol indented_block_body) [6706 6737])
                            ("self" variable nil (reparse-symbol indented_block_body) [6746 6778])
                            ("self" variable nil (reparse-symbol indented_block_body) [6787 6801])
                            ("self" variable nil (reparse-symbol indented_block_body) [6810 6825])
                            ("self" variable nil (reparse-symbol indented_block_body) [6834 6860])
                            ("self" variable nil (reparse-symbol indented_block_body) [6869 6913]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6412 6416])
                            ("filename" variable nil (reparse-symbol function_parameters) [6418 6426])
                            ("dpi" variable nil (reparse-symbol function_parameters) [6428 6431]))                          
                        :documentation "
        Read the data from the file named *filename* and convert
        TeX's internal units to units of *dpi* per inch.
        *dpi* only sets the units and does not limit the resolution.
        Use None to return TeX's internal units.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6399 6914])
                    ("_get_baseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6937 6941])
                            ("filename" variable nil (reparse-symbol function_parameters) [6943 6951]))                          )
                        (reparse-symbol indented_block_body) [6919 7346])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7365 7369]))                          
                        :documentation "
        Context manager enter method, does nothing.
        ")
                        (reparse-symbol indented_block_body) [7351 7468])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7486 7490])
                            ("etype" variable nil (reparse-symbol function_parameters) [7492 7497])
                            ("evalue" variable nil (reparse-symbol function_parameters) [7499 7505])
                            ("etrace" variable nil (reparse-symbol function_parameters) [7507 7513]))                          
                        :documentation "
        Context manager exit method, closes the underlying file if it is open.
        ")
                        (reparse-symbol indented_block_body) [7473 7640])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7658 7662]))                          
                        :documentation "
        Iterate through the pages of the file.

        Yields
        ------
        Page
            Details of all the text and box objects on the page.
            The Page tuple contains lists of Text and Box tuples and
            the page dimensions, and the Text and Box tuples contain
            coordinates transformed into a standard Cartesian
            coordinate system at the dpi value given when initializing.
            The coordinates are floating point numbers, but otherwise
            precision is not lost and coordinate values are not clipped to
            integers.
        ")
                        (reparse-symbol indented_block_body) [7645 8444])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8459 8463]))                          
                        :documentation "
        Close the underlying file if it is open.
        ")
                        (reparse-symbol indented_block_body) [8449 8602])
                    ("_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8619 8623]))                          
                        :documentation "
        Output the text and boxes belonging to the most recent page.
        page = dvi._output()
        ")
                        (reparse-symbol indented_block_body) [8607 10174])
                    ("_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10189 10193]))                          
                        :documentation "
        Read one page from the file. Return True if successful,
        False if there were no more pages.
        ")
                        (reparse-symbol indented_block_body) [10179 10653])
                    ("_arg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10667 10671])
                            ("nbytes" variable nil (reparse-symbol function_parameters) [10673 10679])
                            ("signed" variable nil (reparse-symbol function_parameters) [10681 10687]))                          
                        :documentation "
        Read and return an integer argument *nbytes* long.
        Signedness is determined by the *signed* keyword.
        ")
                        (reparse-symbol indented_block_body) [10658 11075])
                    ("" code nil (reparse-symbol indented_block_body) [11090 11130])
                    ("_set_char_immediate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11159 11163])
                            ("char" variable nil (reparse-symbol function_parameters) [11165 11169]))                          )
                        (reparse-symbol indented_block_body) [11135 11259])
                    ("" code nil (reparse-symbol indented_block_body) [11274 11333])
                    ("_set_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11352 11356])
                            ("char" variable nil (reparse-symbol function_parameters) [11358 11362]))                          )
                        (reparse-symbol indented_block_body) [11338 11452])
                    ("" code nil (reparse-symbol indented_block_body) [11467 11515])
                    ("_set_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11534 11538])
                            ("a" variable nil (reparse-symbol function_parameters) [11540 11541])
                            ("b" variable nil (reparse-symbol function_parameters) [11543 11544]))                          )
                        (reparse-symbol indented_block_body) [11520 11601])
                    ("" code nil (reparse-symbol indented_block_body) [11616 11675])
                    ("_put_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11694 11698])
                            ("char" variable nil (reparse-symbol function_parameters) [11700 11704]))                          )
                        (reparse-symbol indented_block_body) [11680 11741])
                    ("_put_char_real" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11765 11769])
                            ("char" variable nil (reparse-symbol function_parameters) [11771 11775]))                          )
                        (reparse-symbol indented_block_body) [11746 12672])
                    ("" code nil (reparse-symbol indented_block_body) [12687 12735])
                    ("_put_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12754 12758])
                            ("a" variable nil (reparse-symbol function_parameters) [12760 12761])
                            ("b" variable nil (reparse-symbol function_parameters) [12763 12764]))                          )
                        (reparse-symbol indented_block_body) [12740 12801])
                    ("_put_rule_real" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12825 12829])
                            ("a" variable nil (reparse-symbol function_parameters) [12831 12832])
                            ("b" variable nil (reparse-symbol function_parameters) [12834 12835]))                          )
                        (reparse-symbol indented_block_body) [12806 12923])
                    ("" code nil (reparse-symbol indented_block_body) [12938 12943])
                    ("_nop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12957 12961])
                            ("_" variable nil (reparse-symbol function_parameters) [12963 12964]))                          )
                        (reparse-symbol indented_block_body) [12948 12980])
                    ("" code nil (reparse-symbol indented_block_body) [12995 13040])
                    ("_bop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13054 13058])
                            ("c0" variable nil (reparse-symbol function_parameters) [13060 13062])
                            ("c1" variable nil (reparse-symbol function_parameters) [13064 13066])
                            ("c2" variable nil (reparse-symbol function_parameters) [13068 13070])
                            ("c3" variable nil (reparse-symbol function_parameters) [13072 13074])
                            ("c4" variable nil (reparse-symbol function_parameters) [13076 13078])
                            ("c5" variable nil (reparse-symbol function_parameters) [13080 13082])
                            ("c6" variable nil (reparse-symbol function_parameters) [13084 13086])
                            ("c7" variable nil (reparse-symbol function_parameters) [13088 13090])
                            ("c8" variable nil (reparse-symbol function_parameters) [13092 13094])
                            ("c9" variable nil (reparse-symbol function_parameters) [13096 13098])
                            ("p" variable nil (reparse-symbol function_parameters) [13100 13101]))                          )
                        (reparse-symbol indented_block_body) [13045 13349])
                    ("" code nil (reparse-symbol indented_block_body) [13364 13393])
                    ("_eop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13407 13411])
                            ("_" variable nil (reparse-symbol function_parameters) [13413 13414]))                          )
                        (reparse-symbol indented_block_body) [13398 13525])
                    ("" code nil (reparse-symbol indented_block_body) [13540 13569])
                    ("_push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13584 13588])
                            ("_" variable nil (reparse-symbol function_parameters) [13590 13591]))                          )
                        (reparse-symbol indented_block_body) [13574 13670])
                    ("" code nil (reparse-symbol indented_block_body) [13685 13714])
                    ("_pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13728 13732])
                            ("_" variable nil (reparse-symbol function_parameters) [13734 13735]))                          )
                        (reparse-symbol indented_block_body) [13719 13812])
                    ("" code nil (reparse-symbol indented_block_body) [13827 13886])
                    ("_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13902 13906])
                            ("b" variable nil (reparse-symbol function_parameters) [13908 13909]))                          )
                        (reparse-symbol indented_block_body) [13891 13932])
                    ("" code nil (reparse-symbol indented_block_body) [13947 14005])
                    ("_right_w" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14023 14027])
                            ("new_w" variable nil (reparse-symbol function_parameters) [14029 14034]))                          )
                        (reparse-symbol indented_block_body) [14010 14119])
                    ("" code nil (reparse-symbol indented_block_body) [14134 14192])
                    ("_right_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14210 14214])
                            ("new_x" variable nil (reparse-symbol function_parameters) [14216 14221]))                          )
                        (reparse-symbol indented_block_body) [14197 14306])
                    ("" code nil (reparse-symbol indented_block_body) [14321 14380])
                    ("_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14395 14399])
                            ("a" variable nil (reparse-symbol function_parameters) [14401 14402]))                          )
                        (reparse-symbol indented_block_body) [14385 14425])
                    ("" code nil (reparse-symbol indented_block_body) [14440 14498])
                    ("_down_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14515 14519])
                            ("new_y" variable nil (reparse-symbol function_parameters) [14521 14526]))                          )
                        (reparse-symbol indented_block_body) [14503 14611])
                    ("" code nil (reparse-symbol indented_block_body) [14626 14684])
                    ("_down_z" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14701 14705])
                            ("new_z" variable nil (reparse-symbol function_parameters) [14707 14712]))                          )
                        (reparse-symbol indented_block_body) [14689 14797])
                    ("" code nil (reparse-symbol indented_block_body) [14812 14854])
                    ("_fnt_num_immediate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14882 14886])
                            ("k" variable nil (reparse-symbol function_parameters) [14888 14889]))                          )
                        (reparse-symbol indented_block_body) [14859 14911])
                    ("" code nil (reparse-symbol indented_block_body) [14926 14985])
                    ("_fnt_num" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15003 15007])
                            ("new_f" variable nil (reparse-symbol function_parameters) [15009 15014]))                          )
                        (reparse-symbol indented_block_body) [14990 15040])
                    ("" code nil (reparse-symbol indented_block_body) [15055 15090])
                    ("_xxx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15104 15108])
                            ("datalen" variable nil (reparse-symbol function_parameters) [15110 15117]))                          )
                        (reparse-symbol indented_block_body) [15095 15457])
                    ("" code nil (reparse-symbol indented_block_body) [15472 15536])
                    ("_fnt_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15554 15558])
                            ("k" variable nil (reparse-symbol function_parameters) [15560 15561])
                            ("c" variable nil (reparse-symbol function_parameters) [15563 15564])
                            ("s" variable nil (reparse-symbol function_parameters) [15566 15567])
                            ("d" variable nil (reparse-symbol function_parameters) [15569 15570])
                            ("a" variable nil (reparse-symbol function_parameters) [15572 15573])
                            ("l" variable nil (reparse-symbol function_parameters) [15575 15576]))                          )
                        (reparse-symbol indented_block_body) [15541 15624])
                    ("_fnt_def_real" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15647 15651])
                            ("k" variable nil (reparse-symbol function_parameters) [15653 15654])
                            ("c" variable nil (reparse-symbol function_parameters) [15656 15657])
                            ("s" variable nil (reparse-symbol function_parameters) [15659 15660])
                            ("d" variable nil (reparse-symbol function_parameters) [15662 15663])
                            ("a" variable nil (reparse-symbol function_parameters) [15665 15666])
                            ("l" variable nil (reparse-symbol function_parameters) [15668 15669]))                          )
                        (reparse-symbol indented_block_body) [15629 16233])
                    ("" code nil (reparse-symbol indented_block_body) [16248 16311])
                    ("_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16325 16329])
                            ("i" variable nil (reparse-symbol function_parameters) [16331 16332])
                            ("num" variable nil (reparse-symbol function_parameters) [16334 16337])
                            ("den" variable nil (reparse-symbol function_parameters) [16339 16342])
                            ("mag" variable nil (reparse-symbol function_parameters) [16344 16347])
                            ("k" variable nil (reparse-symbol function_parameters) [16349 16350]))                          )
                        (reparse-symbol indented_block_body) [16316 17128])
                    ("" code nil (reparse-symbol indented_block_body) [17143 17171])
                    ("_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17186 17190])
                            ("_" variable nil (reparse-symbol function_parameters) [17192 17193]))                          )
                        (reparse-symbol indented_block_body) [17176 17237])
                    ("" code nil (reparse-symbol indented_block_body) [17369 17374])
                    ("_post_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17394 17398])
                            ("_" variable nil (reparse-symbol function_parameters) [17400 17401]))                          )
                        (reparse-symbol indented_block_body) [17379 17438])
                    ("" code nil (reparse-symbol indented_block_body) [17453 17471])
                    ("_malformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17491 17495])
                            ("offset" variable nil (reparse-symbol function_parameters) [17497 17503]))                          )
                        (reparse-symbol indented_block_body) [17476 17573]))                  
                :type "class")
                nil [5682 17573])
            ("DviFont" type
               (:documentation "
    Encapsulation of a font that a DVI file can refer to.

    This class holds a font's texname and size, supports comparison,
    and knows the widths of glyphs in the same units as the AFM file.
    There are also internal attributes (for use by dviread.py) that
    are *not* used for comparison.

    The size is in Adobe points (converted from TeX points).

    Parameters
    ----------

    scale : float
        Factor by which the font is scaled from its natural size.
    tfm : Tfm
        TeX font metrics for this font
    texname : bytes
       Name of the font as used internally by TeX and friends, as an
       ASCII bytestring. This is usually very different from any external
       font names, and :class:`dviread.PsfontsMap` can be used to find
       the external name of the font.
    vf : Vf
       A TeX \"virtual font\" file, or None if this font is not virtual.

    Attributes
    ----------

    texname : bytes
    size : float
       Size of the font in Adobe points, converted from the slightly
       smaller TeX points.
    widths : list
       Widths of glyphs in glyph-space units, typically 1/1000ths of
       the point size.

    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [18781 18847])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [18906 19055])
                            ("self, self, self, self" code nil (reparse-symbol indented_block_body) [19063 19149])
                            ("self" code nil (reparse-symbol indented_block_body) [19158 19202])
                            ("try" code nil (reparse-symbol indented_block_body) [19211 19306])
                            ("self" variable nil (reparse-symbol indented_block_body) [19314 19415]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18866 18870])
                            ("scale" variable nil (reparse-symbol function_parameters) [18872 18877])
                            ("tfm" variable nil (reparse-symbol function_parameters) [18879 18882])
                            ("texname" variable nil (reparse-symbol function_parameters) [18884 18891])
                            ("vf" variable nil (reparse-symbol function_parameters) [18893 18895]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18853 19416])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19432 19436])
                            ("other" variable nil (reparse-symbol function_parameters) [19438 19443]))                          )
                        (reparse-symbol indented_block_body) [19421 19571])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19587 19591])
                            ("other" variable nil (reparse-symbol function_parameters) [19593 19598]))                          )
                        (reparse-symbol indented_block_body) [19576 19639])
                    ("_width_of" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19658 19662])
                            ("char" variable nil (reparse-symbol function_parameters) [19664 19668]))                          
                        :documentation "
        Width of char in dvi units. For internal use by dviread.py.
        ")
                        (reparse-symbol indented_block_body) [19644 19982])
                    ("_height_depth_of" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20008 20012])
                            ("char" variable nil (reparse-symbol function_parameters) [20014 20018]))                          
                        :documentation "
        Height and depth of char in dvi units. For internal use by dviread.py.
        ")
                        (reparse-symbol indented_block_body) [19987 20580]))                  
                :type "class")
                nil [17575 20580])
            ("Vf" type
               (:documentation "
    A virtual font (\\\\*.vf file) containing subroutines for dvi files.

    Usage::

      vf = Vf(filename)
      glyph = vf[code]
      glyph.text, glyph.boxes, glyph.width

    Parameters
    ----------

    filename : string or bytestring

    Notes
    -----

    The virtual font format is a derivative of dvi:
    http://mirrors.ctan.org/info/knuth/virtual-fonts
    This class reuses some of the machinery of `Dvi`
    but replaces the `_read` loop and dispatch mechanism.
    "
                :superclasses ("Dvi")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Dvi" code nil (reparse-symbol indented_block_body) [21137 21168])
                            ("try" code nil (reparse-symbol indented_block_body) [21177 21314]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21112 21116])
                            ("filename" variable nil (reparse-symbol function_parameters) [21118 21126]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21099 21314])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21335 21339])
                            ("code" variable nil (reparse-symbol function_parameters) [21341 21345]))                          )
                        (reparse-symbol indented_block_body) [21319 21381])
                    ("_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21396 21400]))                          
                        :documentation "
        Read one page from the file. Return True if successful,
        False if there were no more pages.
        ")
                        (reparse-symbol indented_block_body) [21386 23734])
                    ("_init_packet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23756 23760])
                            ("pl" variable nil (reparse-symbol function_parameters) [23762 23764]))                          )
                        (reparse-symbol indented_block_body) [23739 24069])
                    ("_finalize_packet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24095 24099])
                            ("packet_char" variable nil (reparse-symbol function_parameters) [24101 24112])
                            ("packet_width" variable nil (reparse-symbol function_parameters) [24114 24126]))                          )
                        (reparse-symbol indented_block_body) [24074 24312])
                    ("_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24326 24330])
                            ("i" variable nil (reparse-symbol function_parameters) [24332 24333])
                            ("x" variable nil (reparse-symbol function_parameters) [24335 24336])
                            ("cs" variable nil (reparse-symbol function_parameters) [24338 24340])
                            ("ds" variable nil (reparse-symbol function_parameters) [24342 24344]))                          )
                        (reparse-symbol indented_block_body) [24317 24635]))                  
                :type "class")
                nil [20582 24635])
            ("_fix2comp" function
               (:documentation "
    Convert from two's complement to negative.
    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [24693 24696]))                  )
                nil [24679 24866])
            ("_mul2012" function
               (:documentation "
    Multiply two numbers in 20.12 fixed point format.
    "
                :arguments 
                  ( ("num1" variable nil (reparse-symbol function_parameters) [24881 24885])
                    ("num2" variable nil (reparse-symbol function_parameters) [24887 24891]))                  )
                nil [24868 25062])
            ("Tfm" type
               (:documentation "
    A TeX Font Metric file.

    This implementation covers only the bare minimum needed by the Dvi class.

    Parameters
    ----------
    filename : string or bytestring

    Attributes
    ----------
    checksum : int
       Used for verifying against the dvi file.
    design_size : int
       Design size of the font (unknown units)
    width, height, depth : dict
       Dimensions of each character, need to be scaled by the factor
       specified in the dvi file. These are dicts because indexing may
       not start from 0.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [25641 25708])
                    ("__init__" function
                       (:suite 
                          ( ("_log" code nil (reparse-symbol indented_block_body) [25752 25795])
                            ("with" code nil (reparse-symbol indented_block_body) [25804 26429])
                            ("self, self, self" code nil (reparse-symbol indented_block_body) [26438 26486])
                            ("widths, heights, depths" code nil (reparse-symbol indented_block_body) [26495 26622])
                            ("for" code nil (reparse-symbol indented_block_body) [26631 26944]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25727 25731])
                            ("filename" variable nil (reparse-symbol function_parameters) [25733 25741]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25714 26944]))                  
                :type "class")
                nil [25064 26944])
            ("PsFont" variable nil nil [26946 27017])
            ("PsfontsMap" type
               (:documentation "
    A psfonts.map formatted file, mapping TeX fonts to PS fonts.

    Usage::

     >>> map = PsfontsMap(find_tex_file('pdftex.map'))
     >>> entry = map[b'ptmbo8r']
     >>> entry.texname
     b'ptmbo8r'
     >>> entry.psname
     b'Times-Bold'
     >>> entry.encoding
     '/usr/local/texlive/2008/texmf-dist/fonts/enc/dvips/base/8r.enc'
     >>> entry.effects
     {'slant': 0.16700000000000001}
     >>> entry.filename

    Parameters
    ----------

    filename : string or bytestring

    Notes
    -----

    For historical reasons, TeX knows many Type-1 fonts by different
    names than the outside world. (For one thing, the names have to
    fit in eight characters.) Also, TeX's native fonts are not Type-1
    but Metafont, which is nontrivial to convert to PostScript except
    as a bitmap. While high-quality conversions to Type-1 format exist
    and are shipped with modern TeX distributions, we need to know
    which Type-1 fonts are the counterparts of which native fonts. For
    these reasons a mapping is needed from internal font names to font
    file names.

    A texmf tree typically includes mapping files called e.g.
    :file:`psfonts.map`, :file:`pdftex.map`, or :file:`dvipdfm.map`.
    The file :file:`psfonts.map` is used by :program:`dvips`,
    :file:`pdftex.map` by :program:`pdfTeX`, and :file:`dvipdfm.map`
    by :program:`dvipdfm`. :file:`psfonts.map` might avoid embedding
    the 35 PostScript fonts (i.e., have no filename for them, as in
    the Times-Bold example above), while the pdf-related files perhaps
    only avoid the \"Base 14\" pdf fonts. But the user may have
    configured these files differently.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [28726 28760])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [28804 28819])
                            ("self" variable nil (reparse-symbol indented_block_body) [28828 28853])
                            ("if" code nil (reparse-symbol indented_block_body) [28862 29041])
                            ("with" code nil (reparse-symbol indented_block_body) [29049 29114]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28779 28783])
                            ("filename" variable nil (reparse-symbol function_parameters) [28785 28793]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28766 29114])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29135 29139])
                            ("texname" variable nil (reparse-symbol function_parameters) [29141 29148]))                          )
                        (reparse-symbol indented_block_body) [29119 30256])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30272 30276])
                            ("file" variable nil (reparse-symbol function_parameters) [30278 30282]))                          
                        :documentation "
        Parse the font mapping file.

        The format is, AFAIK: texname fontname [effects and filenames]
        Effects are PostScript snippets like \".177 SlantFont\",
        filenames begin with one or two less-than signs. A filename
        ending in enc is an encoding file, other filenames are font
        files. This can be overridden with a left bracket: <[foobar
        indicates an encoding file named foobar.

        There is some difference between <foo.pfb and <<bar.pfb in
        subsetting, but I have no example of << in my TeX installation.
        ")
                        (reparse-symbol indented_block_body) [30261 34033]))                  
                :type "class")
                nil [27020 34033])
            ("Encoding" type
               (:documentation "
    Parses a \\\\*.enc file referenced from a psfonts.map style file.
    The format this class understands is a very limited subset of
    PostScript.

    Usage (subject to change)::

      for name in Encoding(filename):
          whatever(name)

    Parameters
    ----------
    filename : string or bytestring

    Attributes
    ----------
    encoding : list
        List of character names
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [34476 34501])
                    ("__init__" function
                       (:suite 
                          ( ("with" code nil (reparse-symbol indented_block_body) [34545 34738]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34520 34524])
                            ("filename" variable nil (reparse-symbol function_parameters) [34526 34534]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34507 34738])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34756 34760]))                          )
                        (reparse-symbol indented_block_body) [34743 34821])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34837 34841])
                            ("file" variable nil (reparse-symbol function_parameters) [34843 34847]))                          )
                        (reparse-symbol indented_block_body) [34826 35420]))                  
                :type "class")
                nil [34035 35420])
            ("find_tex_file" function
               (:documentation "
    Find a file in the texmf tree.

    Calls :program:`kpsewhich` which is an interface to the kpathsea
    library [1]_. Most existing TeX distributions on Unix-like systems use
    kpathsea. It is also available as part of MikTeX, a popular
    distribution on Windows.

    Parameters
    ----------
    filename : string or bytestring
    format : string or bytestring
        Used as the value of the `--format` option to :program:`kpsewhich`.
        Could be e.g. 'tfm' or 'vf' to limit the search to that type of files.

    References
    ----------

    .. [1] `Kpathsea documentation <http://www.tug.org/kpathsea/>`_
        The library that :program:`kpsewhich` is part of.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [35440 35448])
                    ("format" variable nil (reparse-symbol function_parameters) [35450 35456]))                  )
                nil [35422 37116])
            ("" code nil nil [37324 37326])
            ("_fontfile" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [37341 37344])
                ("suffix" variable nil (reparse-symbol function_parameters) [37346 37352])
                ("texname" variable nil (reparse-symbol function_parameters) [37354 37361]))              ) nil [37327 37458])
            ("_tfmfile" variable nil nil [37460 37502])
            ("_vffile" variable nil nil [37503 37542])
            ("if" code nil nil [37545 38207]))          
      :file "dviread.py"
      :pointmax 38207
      :fsize 38206
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax '((RETURN 37415 . 37421) (IF 37436 . 37438) (ELSE 37448 . 37452)))
    (semanticdb-table "semanticdb-table-d57c54"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This is a procedural interface to the matplotlib object-oriented
plotting library.

The following plotting commands are provided; the majority have
MATLAB |reg| [*]_ analogs and similar arguments.

.. |reg| unicode:: 0xAE

_Plotting commands
  acorr     - plot the autocorrelation function
  annotate  - annotate something in the figure
  arrow     - add an arrow to the axes
  axes      - Create a new axes
  axhline   - draw a horizontal line across axes
  axvline   - draw a vertical line across axes
  axhspan   - draw a horizontal bar across axes
  axvspan   - draw a vertical bar across axes
  axis      - Set or return the current axis limits
  autoscale - turn axis autoscaling on or off, and apply it
  bar       - make a bar chart
  barh      - a horizontal bar chart
  broken_barh - a set of horizontal bars with gaps
  box       - set the axes frame on/off state
  boxplot   - make a box and whisker plot
  violinplot - make a violin plot
  cla       - clear current axes
  clabel    - label a contour plot
  clf       - clear a figure window
  clim      - adjust the color limits of the current image
  close     - close a figure window
  colorbar  - add a colorbar to the current figure
  cohere    - make a plot of coherence
  contour   - make a contour plot
  contourf  - make a filled contour plot
  csd       - make a plot of cross spectral density
  delaxes   - delete an axes from the current figure
  draw      - Force a redraw of the current figure
  errorbar  - make an errorbar graph
  figlegend - make legend on the figure rather than the axes
  figimage  - make a figure image
  figtext   - add text in figure coords
  figure   - create or change active figure
  fill     - make filled polygons
  findobj  - recursively find all objects matching some criteria
  gca      - return the current axes
  gcf      - return the current figure
  gci      - get the current image, or None
  getp      - get a graphics property
  grid     - set whether gridding is on
  hist     - make a histogram
  ioff     - turn interaction mode off
  ion      - turn interaction mode on
  isinteractive - return True if interaction mode is on
  imread   - load image file into array
  imsave   - save array as an image file
  imshow   - plot image data
  legend   - make an axes legend
  locator_params - adjust parameters used in locating axis ticks
  loglog   - a log log plot
  matshow  - display a matrix in a new figure preserving aspect
  margins  - set margins used in autoscaling
  pause    - pause for a specified interval
  pcolor   - make a pseudocolor plot
  pcolormesh - make a pseudocolor plot using a quadrilateral mesh
  pie      - make a pie chart
  plot     - make a line plot
  plot_date - plot dates
  plotfile  - plot column data from an ASCII tab/space/comma delimited file
  pie      - pie charts
  polar    - make a polar plot on a PolarAxes
  psd      - make a plot of power spectral density
  quiver   - make a direction field (arrows) plot
  rc       - control the default params
  rgrids   - customize the radial grids and labels for polar
  savefig  - save the current figure
  scatter  - make a scatter plot
  setp      - set a graphics property
  semilogx - log x axis
  semilogy - log y axis
  show     - show the figures
  specgram - a spectrogram plot
  spy      - plot sparsity pattern using markers or image
  stem     - make a stem plot
  subplot  - make one subplot (numrows, numcols, axesnum)
  subplots - make a figure with a set of (numrows, numcols) subplots
  subplots_adjust - change the params controlling the subplot positions of current figure
  subplot_tool - launch the subplot configuration tool
  suptitle   - add a figure title
  table    - add a table to the plot
  text     - add some text at location x,y to the current axes
  thetagrids - customize the radial theta grids and labels for polar
  tick_params - control the appearance of ticks and tick labels
  ticklabel_format - control the format of tick labels
  title    - add a title to the current axes
  tricontour - make a contour plot on a triangular grid
  tricontourf - make a filled contour plot on a triangular grid
  tripcolor - make a pseudocolor plot on a triangular grid
  triplot - plot a triangular grid
  xcorr   - plot the autocorrelation function of x and y
  xlim     - set/get the xlimits
  ylim     - set/get the ylimits
  xticks   - set/get the xticks
  yticks   - set/get the yticks
  xlabel   - add an xlabel to the current axes
  ylabel   - add a ylabel to the current axes

  autumn - set the default colormap to autumn
  bone   - set the default colormap to bone
  cool   - set the default colormap to cool
  copper - set the default colormap to copper
  flag   - set the default colormap to flag
  gray   - set the default colormap to gray
  hot    - set the default colormap to hot
  hsv    - set the default colormap to hsv
  jet    - set the default colormap to jet
  pink   - set the default colormap to pink
  prism  - set the default colormap to prism
  spring - set the default colormap to spring
  summer - set the default colormap to summer
  winter - set the default colormap to winter

_Event handling

  connect - register an event handler
  disconnect - remove a connected event handler

_Matrix commands

  cumprod   - the cumulative product along a dimension
  cumsum    - the cumulative sum along a dimension
  detrend   - remove the mean or besdt fit line from an array
  diag      - the k-th diagonal of matrix
  diff      - the n-th differnce of an array
  eig       - the eigenvalues and eigen vectors of v
  eye       - a matrix where the k-th diagonal is ones, else zero
  find      - return the indices where a condition is nonzero
  fliplr    - flip the rows of a matrix up/down
  flipud    - flip the columns of a matrix left/right
  linspace  - a linear spaced vector of N values from min to max inclusive
  logspace  - a log spaced vector of N values from min to max inclusive
  meshgrid  - repeat x and y to make regular matrices
  ones      - an array of ones
  rand      - an array from the uniform distribution [0,1]
  randn     - an array from the normal distribution
  rot90     - rotate matrix k*90 degress counterclockwise
  squeeze   - squeeze an array removing any dimensions of length 1
  tri       - a triangular matrix
  tril      - a lower triangular matrix
  triu      - an upper triangular matrix
  vander    - the Vandermonde matrix of vector x
  svd       - singular value decomposition
  zeros     - a matrix of zeros

_Probability

  normpdf   - The Gaussian probability density function
  rand      - random numbers from the uniform distribution
  randn     - random numbers from the normal distribution

_Statistics

  amax      - the maximum along dimension m
  amin      - the minimum along dimension m
  corrcoef  - correlation coefficient
  cov       - covariance matrix
  mean      - the mean along dimension m
  median    - the median along dimension m
  norm      - the norm of vector x
  prod      - the product along dimension m
  ptp       - the max-min along dimension m
  std       - the standard deviation along dimension m
  asum      - the sum along dimension m
  ksdensity - the kernel density estimate

_Time series analysis

  bartlett  - M-point Bartlett window
  blackman  - M-point Blackman window
  cohere    - the coherence using average periodiogram
  csd       - the cross spectral density using average periodiogram
  fft       - the fast Fourier transform of vector x
  hamming   - M-point Hamming window
  hanning   - M-point Hanning window
  hist      - compute the histogram of x
  kaiser    - M length Kaiser window
  psd       - the power spectral density using average periodiogram
  sinc      - the sinc function of array x

_Dates

  date2num  - convert python datetimes to numeric representation
  drange    - create an array of numbers for date plots
  num2date  - convert numeric type (float days since 0001) to datetime

_Other

  angle     - the angle of a complex array
  griddata  - interpolate irregularly distributed data to a regular grid
  load      - Deprecated--please use loadtxt.
  loadtxt   - load ASCII data into array.
  polyfit   - fit x, y to an n-th order polynomial
  polyval   - evaluate an n-th order polynomial
  roots     - the roots of the polynomial coefficients in p
  save      - Deprecated--please use savetxt.
  savetxt   - save an array to an ASCII file.
  trapz     - trapezoidal integration

__end

.. [*] MATLAB is a registered trademark of The MathWorks, Inc.


\"\"\"" code nil nil [1 8531])
            ("" code nil nil [8555 8640])
            ("six" include nil nil [8642 8652])
            ("warnings" include nil nil [8654 8669])
            ("" code nil nil [8700 8763])
            ("matplotlib" include nil nil [8765 8789])
            ("" code nil nil [8820 9200])
            ("" code nil nil [9392 10077])
            ("matplotlib" include nil nil [10079 10128])
            ("matplotlib.pyplot" include nil nil [10129 10160])
            ("numpy" include nil nil [10162 10181])
            ("numpy.fft" include nil nil [10182 10205])
            ("numpy.random" include nil nil [10206 10232])
            ("numpy.linalg" include nil nil [10233 10259])
            ("numpy" include nil nil [10261 10279])
            ("numpy.ma" include nil nil [10280 10301])
            ("datetime" include nil nil [10344 10359])
            ("bytes" variable nil nil [10457 10489]))          
      :file "pylab.py"
      :pointmax 10490
      :fsize 10489
      :lastmodtime '(23240 23001 105461 0)
      :unmatched-syntax nil))
  :file "!home!jbailey!.local!lib!python2.7!site-packages!matplotlib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
