;; Object semanticdb-project-database-file-f9e070
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-f9e070"
  :tables
  (list
    (semanticdb-table "semanticdb-table-f9e030"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utilities for writing code that runs on Python 2 and 3\"\"\"" code nil nil [1103 1163])
            ("__future__" include nil nil [1165 1203])
            ("functools" include nil nil [1205 1221])
            ("itertools" include nil nil [1222 1238])
            ("operator" include nil nil [1239 1254])
            ("sys" include nil nil [1255 1265])
            ("types" include nil nil [1266 1278])
            ("__author__" variable nil nil [1280 1334])
            ("__version__" variable nil nil [1335 1357])
            ("PY2" code nil nil [1410 1440])
            ("PY3" code nil nil [1441 1471])
            ("PY34" code nil nil [1472 1510])
            ("if" code nil nil [1512 2319])
            ("_add_doc" function
               (:documentation "Add documentation to a function."
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [2334 2338])
                    ("doc" variable nil (reparse-symbol function_parameters) [2340 2343]))                  )
                nil [2321 2412])
            ("_import_module" function
               (:documentation "Import module, returning the module after the last dot."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2433 2437]))                  )
                nil [2414 2556])
            ("_LazyDescr" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2623 2639]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2602 2606])
                            ("name" variable nil (reparse-symbol function_parameters) [2608 2612]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2589 2640])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2657 2661])
                            ("obj" variable nil (reparse-symbol function_parameters) [2663 2666])
                            ("tp" variable nil (reparse-symbol function_parameters) [2668 2670]))                          )
                        (reparse-symbol indented_block_body) [2645 3005]))                  
                :type "class")
                nil [2558 3005])
            ("MovedModule" type
               (:superclasses ("_LazyDescr")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3092 3131])
                            ("if" code nil (reparse-symbol indented_block_body) [3140 3271]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3056 3060])
                            ("name" variable nil (reparse-symbol function_parameters) [3062 3066])
                            ("old" variable nil (reparse-symbol function_parameters) [3068 3071])
                            ("new" variable nil (reparse-symbol function_parameters) [3073 3076]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3043 3271])
                    ("_resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3289 3293]))                          )
                        (reparse-symbol indented_block_body) [3276 3336])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3357 3361])
                            ("attr" variable nil (reparse-symbol function_parameters) [3363 3367]))                          )
                        (reparse-symbol indented_block_body) [3341 3499]))                  
                :type "class")
                nil [3007 3499])
            ("_LazyModule" type
               (:superclasses ("types.ModuleType")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3577 3616])
                            ("self" variable nil (reparse-symbol indented_block_body) [3625 3662]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3556 3560])
                            ("name" variable nil (reparse-symbol function_parameters) [3562 3566]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3543 3663])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3680 3684]))                          )
                        (reparse-symbol indented_block_body) [3668 3812])
                    ("_moved_attributes" variable nil (reparse-symbol indented_block_body) [3855 3877]))                  
                :type "class")
                nil [3501 3878])
            ("MovedAttribute" type
               (:superclasses ("_LazyDescr")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [4001 4043])
                            ("if" code nil (reparse-symbol indented_block_body) [4052 4498]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3932 3936])
                            ("name" variable nil (reparse-symbol function_parameters) [3938 3942])
                            ("old_mod" variable nil (reparse-symbol function_parameters) [3944 3951])
                            ("new_mod" variable nil (reparse-symbol function_parameters) [3953 3960])
                            ("old_attr" variable nil (reparse-symbol function_parameters) [3962 3970])
                            ("new_attr" variable nil (reparse-symbol function_parameters) [3977 3985]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3919 4498])
                    ("_resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4516 4520]))                          )
                        (reparse-symbol indented_block_body) [4503 4607]))                  
                :type "class")
                nil [3880 4607])
            ("_SixMetaPathImporter" type
               (:documentation "
    A meta path importer to import six.moves and its submodules.

    This class implements a PEP302 finder and loader. It should be compatible
    with Python 2.5 and all existing versions of Python3
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4913 4940])
                            ("self" variable nil (reparse-symbol indented_block_body) [4949 4972]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4881 4885])
                            ("six_module_name" variable nil (reparse-symbol function_parameters) [4887 4902]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4868 4973])
                    ("_add_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4994 4998])
                            ("mod" variable nil (reparse-symbol function_parameters) [5000 5003])
                            ("fullnames" variable nil (reparse-symbol function_parameters) [5005 5015]))                          )
                        (reparse-symbol indented_block_body) [4978 5118])
                    ("_get_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5139 5143])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5145 5153]))                          )
                        (reparse-symbol indented_block_body) [5123 5218])
                    ("find_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5239 5243])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5245 5253])
                            ("path" variable nil (reparse-symbol function_parameters) [5255 5259]))                          )
                        (reparse-symbol indented_block_body) [5223 5354])
                    ("__get_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5376 5380])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5382 5390]))                          )
                        (reparse-symbol indented_block_body) [5359 5557])
                    ("load_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5578 5582])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5584 5592]))                          )
                        (reparse-symbol indented_block_body) [5562 5944])
                    ("is_package" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5964 5968])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5970 5978]))                          
                        :documentation "
        Return true, if the named module is a package.

        We need this method to get correct spec objects with
        Python 3.4 (see PEP451)
        ")
                        (reparse-symbol indented_block_body) [5949 6218])
                    ("get_code" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6236 6240])
                            ("fullname" variable nil (reparse-symbol function_parameters) [6242 6250]))                          
                        :documentation "Return None

        Required, if is_package is implemented")
                        (reparse-symbol indented_block_body) [6223 6416])
                    ("get_source" variable nil (reparse-symbol indented_block_body) [6420 6441]))                  
                :type "class")
                nil [4609 6462])
            ("_importer" variable nil nil [6463 6505])
            ("_MovedItems" type
               (:documentation "Lazy loading of moved objects"
                :superclasses ("_LazyModule")
                :members 
                  ( ("__path__" variable nil (reparse-symbol indented_block_body) [6585 6598]))                  
                :type "class")
                nil [6508 6618])
            ("_moved_attributes" variable nil nil [6620 10957])
            ("if" code nil nil [10990 11093])
            ("for" code nil nil [11094 11263])
            ("del" code nil nil [11263 11271])
            ("_MovedItems" variable nil nil [11273 11322])
            ("moves" variable nil nil [11324 11364])
            ("_importer" code nil nil [11365 11402])
            ("Module_six_moves_urllib_parse" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_parse"
                :superclasses ("_LazyModule")
                :type "class")
                nil [11405 11522])
            ("_urllib_parse_moved_attributes" variable nil nil [11524 13116])
            ("for" code nil nil [13117 13221])
            ("del" code nil nil [13221 13229])
            ("Module_six_moves_urllib_parse" variable nil nil [13231 13311])
            ("_importer" code nil nil [13313 13465])
            ("Module_six_moves_urllib_error" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_error"
                :superclasses ("_LazyModule")
                :type "class")
                nil [13468 13585])
            ("_urllib_error_moved_attributes" variable nil nil [13587 13812])
            ("for" code nil nil [13813 13917])
            ("del" code nil nil [13917 13925])
            ("Module_six_moves_urllib_error" variable nil nil [13927 14007])
            ("_importer" code nil nil [14009 14161])
            ("Module_six_moves_urllib_request" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_request"
                :superclasses ("_LazyModule")
                :type "class")
                nil [14164 14285])
            ("_urllib_request_moved_attributes" variable nil nil [14287 16700])
            ("for" code nil nil [16701 16809])
            ("del" code nil nil [16809 16817])
            ("Module_six_moves_urllib_request" variable nil nil [16819 16903])
            ("_importer" code nil nil [16905 17065])
            ("Module_six_moves_urllib_response" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_response"
                :superclasses ("_LazyModule")
                :type "class")
                nil [17068 17191])
            ("_urllib_response_moved_attributes" variable nil nil [17193 17480])
            ("for" code nil nil [17481 17591])
            ("del" code nil nil [17591 17599])
            ("Module_six_moves_urllib_response" variable nil nil [17601 17687])
            ("_importer" code nil nil [17689 17853])
            ("Module_six_moves_urllib_robotparser" type
               (:documentation "Lazy loading of moved objects in six.moves.urllib_robotparser"
                :superclasses ("_LazyModule")
                :type "class")
                nil [17856 17985])
            ("_urllib_robotparser_moved_attributes" variable nil nil [17987 18105])
            ("for" code nil nil [18106 18222])
            ("del" code nil nil [18222 18230])
            ("Module_six_moves_urllib_robotparser" variable nil nil [18232 18324])
            ("_importer" code nil nil [18326 18502])
            ("Module_six_moves_urllib" type
               (:documentation "Create a six.moves.urllib namespace that resembles the Python 3 namespace"
                :superclasses ("types.ModuleType")
                :members 
                  ( ("__path__" variable nil (reparse-symbol indented_block_body) [18643 18656])
                    ("parse" variable nil (reparse-symbol indented_block_body) [18680 18731])
                    ("error" variable nil (reparse-symbol indented_block_body) [18736 18787])
                    ("request" variable nil (reparse-symbol indented_block_body) [18792 18847])
                    ("response" variable nil (reparse-symbol indented_block_body) [18852 18909])
                    ("robotparser" variable nil (reparse-symbol indented_block_body) [18914 18977])
                    ("__dir__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18995 18999]))                          )
                        (reparse-symbol indented_block_body) [18983 19074]))                  
                :type "class")
                nil [18505 19074])
            ("_importer" code nil nil [19075 19187])
            ("add_move" function
               (:documentation "Add an item to six.moves."
                :arguments 
                  ( ("move" variable nil (reparse-symbol function_parameters) [19203 19207]))                  )
                nil [19190 19288])
            ("remove_move" function
               (:documentation "Remove item from six.moves."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [19306 19310]))                  )
                nil [19290 19560])
            ("if" code nil nil [19562 19956])
            ("try" code nil nil [19958 20064])
            ("next" variable nil nil [20064 20087])
            ("try" code nil nil [20090 20240])
            ("if" code nil nil [20242 20833])
            ("_add_doc" code nil nil [20833 20931])
            ("get_method_function" variable nil nil [20934 20987])
            ("get_method_self" variable nil nil [20988 21037])
            ("get_function_closure" variable nil nil [21038 21095])
            ("get_function_code" variable nil nil [21096 21147])
            ("get_function_defaults" variable nil nil [21148 21207])
            ("get_function_globals" variable nil nil [21208 21265])
            ("if" code nil nil [21268 22084])
            ("_add_doc" code nil nil [22085 22156])
            ("_add_doc" code nil nil [22157 22232])
            ("_add_doc" code nil nil [22233 22328])
            ("_add_doc" code nil nil [22329 22427])
            ("if" code nil nil [22430 30889]))          
      :file "six.py"
      :pointmax 30889
      :fsize 30888
      :lastmodtime '(23282 32468 185232 0)
      :unmatched-syntax '((NEWLINE 30888 . 30889) (RPAREN 30887 . 30888) (DEDENT 30857 . 30857) (NAME 30857 . 30860) (LPAREN 30877 . 30878) (NEWLINE 30003 . 30004) (COLON 30002 . 30003) (IS 29991 . 29993) (RPAREN 29989 . 29990) (LPAREN 29978 . 29979) (PERIOD 29974 . 29975) (RPAREN 29973 . 29974) (IF 29962 . 29964) (LPAREN 29972 . 29973) (NEWLINE 29903 . 29904) (RBRACK 29866 . 29867) (DEDENT 29854 . 29854) (NAME 29854 . 29862) (LBRACK 29865 . 29866) (NEWLINE 29056 . 29057) (COLON 29055 . 29056) (RPAREN 29054 . 29055) (DEDENT 29017 . 29017) (DEF 29017 . 29020) (LPAREN 29048 . 29049) (NEWLINE 28499 . 28500) (COLON 28498 . 28499) (RPAREN 28497 . 28498) (DEDENT 28470 . 28470) (DEF 28470 . 28473) (LPAREN 28487 . 28488) (NEWLINE 27940 . 27941) (COLON 27939 . 27940) (RPAREN 27938 . 27939) (MULT 27932 . 27933) (DEDENT 27907 . 27907) (DEF 27907 . 27910) (LPAREN 27925 . 27926) (NEWLINE 27876 . 27877) (COLON 27875 . 27876) (DEDENT 27871 . 27871) (ELSE 27871 . 27875) (NEWLINE 27590 . 27591) (COLON 27589 . 27590) (RPAREN 27588 . 27589) (LPAREN 27583 . 27584) (LT 27581 . 27582) (RBRACK 27579 . 27580) (COLON 27577 . 27578) (LBRACK 27575 . 27576) (NEWLINE 27554 . 27555) (RPAREN 27553 . 27554) (DEDENT 27508 . 27508) (NAME 27508 . 27516) (LPAREN 27516 . 27517) (NEWLINE 27273 . 27274) (COLON 27272 . 27273) (RPAREN 27271 . 27272) (LPAREN 27266 . 27267) (LT 27264 . 27265) (RBRACK 27262 . 27263) (COLON 27260 . 27261) (DEDENT 27240 . 27240) (IF 27240 . 27242) (LBRACK 27259 . 27260) (NEWLINE 25345 . 25346) (RPAREN 25344 . 25345) (DEDENT 25298 . 25298) (NAME 25298 . 25304) (LPAREN 25314 . 25315) (NEWLINE 25236 . 25237) (COLON 25235 . 25236) (DEDENT 25231 . 25231) (ELSE 25231 . 25235) (NEWLINE 25098 . 25099) (COLON 25097 . 25098) (RPAREN 25096 . 25097) (LPAREN 25091 . 25092) (GT 25089 . 25090) (RBRACK 25087 . 25088) (COLON 25085 . 25086) (LBRACK 25084 . 25085) (DEDENT 25063 . 25063) (ELIF 25063 . 25067) (NEWLINE 24875 . 24876) (COLON 24874 . 24875) (RPAREN 24873 . 24874) (LPAREN 24868 . 24869) (EQ 24865 . 24867) (RBRACK 24863 . 24864) (COLON 24861 . 24862) (DEDENT 24841 . 24841) (IF 24841 . 24843) (LBRACK 24860 . 24861) (NEWLINE 24320 . 24321) (COLON 24319 . 24320) (DEDENT 24315 . 24315) (ELSE 24315 . 24319) (NEWLINE 23912 . 23913) (COLON 23911 . 23912) (RPAREN 23910 . 23911) (EXPONENT 23902 . 23904) (MULT 23895 . 23896) (DEDENT 23873 . 23873) (DEF 23873 . 23876) (LPAREN 23888 . 23889) (NEWLINE 23808 . 23809) (COLON 23807 . 23808) (RPAREN 23806 . 23807) (EXPONENT 23798 . 23800) (MULT 23791 . 23792) (DEDENT 23763 . 23763) (DEF 23763 . 23766) (LPAREN 23784 . 23785) (NEWLINE 23699 . 23700) (COLON 23698 . 23699) (RPAREN 23697 . 23698) (EXPONENT 23689 . 23691) (MULT 23682 . 23683) (LPAREN 23675 . 23676) (NEWLINE 23652 . 23653) (RPAREN 23651 . 23652) (LPAREN 23629 . 23630) (NEWLINE 23620 . 23621) (RPAREN 23619 . 23620) (DEDENT 23589 . 23589) (NAME 23589 . 23597) (LPAREN 23597 . 23598)))
    (semanticdb-table "semanticdb-table-f9e050"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Cycler
======

Cycling through combinations of values, producing dictionaries.

You can add cyclers::

    from cycler import cycler
    cc = (cycler(color=list('rgb')) +
          cycler(linestyle=['-', '--', '-.']))
    for d in cc:
        print(d)

Results in::

    {'color': 'r', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}


You can multiply cyclers::

    from cycler import cycler
    cc = (cycler(color=list('rgb')) *
          cycler(linestyle=['-', '--', '-.']))
    for d in cc:
        print(d)

Results in::

    {'color': 'r', 'linestyle': '-'}
    {'color': 'r', 'linestyle': '--'}
    {'color': 'r', 'linestyle': '-.'}
    {'color': 'g', 'linestyle': '-'}
    {'color': 'g', 'linestyle': '--'}
    {'color': 'g', 'linestyle': '-.'}
    {'color': 'b', 'linestyle': '-'}
    {'color': 'b', 'linestyle': '--'}
    {'color': 'b', 'linestyle': '-.'}
\"\"\"" code nil nil [1 921])
            ("" code nil nil [946 1031])
            ("six" include nil nil [1033 1043])
            ("itertools" include nil nil [1044 1080])
            ("six.moves" include nil nil [1081 1114])
            ("operator" include nil nil [1115 1144])
            ("copy" include nil nil [1145 1156])
            ("__version__" variable nil nil [1158 1180])
            ("_process_keys" function
               (:documentation "
    Helper function to compose cycler keys

    Parameters
    ----------
    left, right : iterable of dictionaries or None
        The cyclers to be composed
    Returns
    -------
    keys : set
        The keys in the composition of the two cyclers
    "
                :arguments 
                  ( ("left" variable nil (reparse-symbol function_parameters) [1201 1205])
                    ("right" variable nil (reparse-symbol function_parameters) [1207 1212]))                  )
                nil [1183 1775])
            ("Cycler" type
               (:documentation "
    Composable cycles

    This class has compositions methods:

    ``+``
      for 'inner' products (zip)

    ``+=``
      in-place ``+``

    ``*``
      for outer products (itertools.product) and integer multiplication

    ``*=``
      in-place ``*``

    and supports basic slicing via ``[]``

    Parameters
    ----------
    left : Cycler or None
        The 'left' cycler

    right : Cycler or None
        The 'right' cycler

    op : func or None
        Function which composes the 'left' and 'right' cyclers.

    "
                :superclasses ("object")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2358 2362]))                          )
                        (reparse-symbol indented_block_body) [2345 2392])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Semi-private init

        Do not use this directly, use `cycler` function instead.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2452 2550])
                            ("if" code nil (reparse-symbol indented_block_body) [2559 2914])
                            ("if" code nil (reparse-symbol indented_block_body) [2923 3287])
                            ("self" variable nil (reparse-symbol indented_block_body) [3296 3347])
                            ("self" variable nil (reparse-symbol indented_block_body) [3356 3369]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2410 2414])
                            ("left" variable nil (reparse-symbol function_parameters) [2416 2420])
                            ("right" variable nil (reparse-symbol function_parameters) [2422 2427])
                            ("op" variable nil (reparse-symbol function_parameters) [2434 2436]))                          
                        :documentation "Semi-private init

        Do not use this directly, use `cycler` function instead.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2397 3370])
                    ("keys" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3398 3402]))                          
                        :documentation "
        The keys this Cycler knows about
        ")
                        (reparse-symbol indented_block_body) [3375 3501])
                    ("change_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3521 3525])
                            ("old" variable nil (reparse-symbol function_parameters) [3527 3530])
                            ("new" variable nil (reparse-symbol function_parameters) [3532 3535]))                          
                        :documentation "
        Change a key in this cycler to a new name.
        Modification is performed in-place.

        Does nothing if the old key is the same as the new key.
        Raises a ValueError if the new key is already a key.
        Raises a KeyError if the old key isn't a key.

        ")
                        (reparse-symbol indented_block_body) [3506 4758])
                    ("_compose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4776 4780]))                          
                        :documentation "
        Compose the 'left' and 'right' components of this cycle
        with the proper operation (zip or product as of now)
        ")
                        (reparse-symbol indented_block_body) [4763 5086])
                    ("_from_iter" function
                       (:documentation "
        Class method to create 'base' Cycler objects
        that do not have a 'right' or 'op' and for which
        the 'left' object is not another Cycler.

        Parameters
        ----------
        label : str
            The property key.

        itr : iterable
            Finite length iterable of the property values.

        Returns
        -------
        cycler : Cycler
            New 'base' `Cycler`
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5123 5126])
                            ("label" variable nil (reparse-symbol function_parameters) [5128 5133])
                            ("itr" variable nil (reparse-symbol function_parameters) [5135 5138]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5091 5711])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5732 5736])
                            ("key" variable nil (reparse-symbol function_parameters) [5738 5741]))                          )
                        (reparse-symbol indented_block_body) [5716 6074])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6092 6096]))                          )
                        (reparse-symbol indented_block_body) [6079 6216])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6233 6237])
                            ("other" variable nil (reparse-symbol function_parameters) [6239 6244]))                          
                        :documentation "
        Pair-wise combine two equal length cycles (zip)

        Parameters
        ----------
        other : Cycler
           The second Cycler
        ")
                        (reparse-symbol indented_block_body) [6221 6638])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6655 6659])
                            ("other" variable nil (reparse-symbol function_parameters) [6661 6666]))                          
                        :documentation "
        Outer product of two cycles (`itertools.product`) or integer
        multiplication.

        Parameters
        ----------
        other : Cycler or int
           The second Cycler or integer
        ")
                        (reparse-symbol indented_block_body) [6643 7219])
                    ("__rmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7237 7241])
                            ("other" variable nil (reparse-symbol function_parameters) [7243 7248]))                          )
                        (reparse-symbol indented_block_body) [7224 7279])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7296 7300]))                          )
                        (reparse-symbol indented_block_body) [7284 7525])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7543 7547])
                            ("other" variable nil (reparse-symbol function_parameters) [7549 7554]))                          
                        :documentation "
        In-place pair-wise combine two equal length cycles (zip)

        Parameters
        ----------
        other : Cycler
           The second Cycler
        ")
                        (reparse-symbol indented_block_body) [7530 8139])
                    ("__imul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8157 8161])
                            ("other" variable nil (reparse-symbol function_parameters) [8163 8168]))                          
                        :documentation "
        In-place outer product of two cycles (`itertools.product`)

        Parameters
        ----------
        other : Cycler
           The second Cycler
        ")
                        (reparse-symbol indented_block_body) [8144 8759])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8775 8779])
                            ("other" variable nil (reparse-symbol function_parameters) [8781 8786]))                          
                        :documentation "
        Check equality
        ")
                        (reparse-symbol indented_block_body) [8764 9014])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9032 9036]))                          )
                        (reparse-symbol indented_block_body) [9019 9439])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9460 9464]))                          )
                        (reparse-symbol indented_block_body) [9444 9938])
                    ("by_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9954 9958]))                          
                        :documentation "Values by key

        This returns the transposed values of the cycler.  Iterating
        over a `Cycler` yields dicts with a single value for each key,
        this method returns a `dict` of `list` which are the values
        for the given key.

        The returned value can be used to create an equivalent `Cycler`
        using only `+`.

        Returns
        -------
        transpose : dict
            dict of lists of the values for each key.
        ")
                        (reparse-symbol indented_block_body) [9943 10784])
                    ("_transpose" variable nil (reparse-symbol indented_block_body) [10818 10837])
                    ("simplify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10856 10860]))                          
                        :documentation "Simplify the Cycler

        Returned as a composition using only sums (no multiplications)

        Returns
        -------
        simple : Cycler
            An equivalent cycler using only summation")
                        (reparse-symbol indented_block_body) [10843 11433])
                    ("concat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11449 11453])
                            ("other" variable nil (reparse-symbol function_parameters) [11455 11460]))                          
                        :documentation "Concatenate this cycler and an other.

        The keys must match exactly.

        This returns a single Cycler which is equivalent to
        `itertools.chain(self, other)`

        Examples
        --------

        >>> num = cycler('a', range(3))
        >>> let = cycler('a', 'abc')
        >>> num.concat(let)
        cycler('a', [0, 1, 2, 'a', 'b', 'c'])

        Parameters
        ----------
        other : `Cycler`
            The `Cycler` to concatenate to this one.

        Returns
        -------
        ret : `Cycler`
            The concatenated `Cycler`
        ")
                        (reparse-symbol indented_block_body) [11438 12095]))                  
                :type "class")
                nil [1777 12095])
            ("concat" function
               (:documentation "Concatenate two cyclers.

    The keys must match exactly.

    This returns a single Cycler which is equivalent to
    `itertools.chain(left, right)`

    Examples
    --------

    >>> num = cycler('a', range(3))
    >>> let = cycler('a', 'abc')
    >>> num.concat(let)
    cycler('a', [0, 1, 2, 'a', 'b', 'c'])

    Parameters
    ----------
    left, right : `Cycler`
        The two `Cycler` instances to concatenate

    Returns
    -------
    ret : `Cycler`
        The concatenated `Cycler`
    "
                :arguments 
                  ( ("left" variable nil (reparse-symbol function_parameters) [12108 12112])
                    ("right" variable nil (reparse-symbol function_parameters) [12114 12119]))                  )
                nil [12097 13107])
            ("cycler" function
               (:documentation "
    Create a new `Cycler` object from a single positional argument,
    a pair of positional arguments, or the combination of keyword arguments.

    cycler(arg)
    cycler(label1=itr1[, label2=iter2[, ...]])
    cycler(label, itr)

    Form 1 simply copies a given `Cycler` object.

    Form 2 composes a `Cycler` as an inner product of the
    pairs of keyword arguments. In other words, all of the
    iterables are cycled simultaneously, as if through zip().

    Form 3 creates a `Cycler` from a label and an iterable.
    This is useful for when the label cannot be a keyword argument
    (e.g., an integer or a name that has a space in it).

    Parameters
    ----------
    arg : Cycler
        Copy constructor for Cycler (does a shallow copy of iterables).

    label : name
        The property key. In the 2-arg form of the function,
        the label can be any hashable object. In the keyword argument
        form of the function, it must be a valid python identifier.

    itr : iterable
        Finite length iterable of the property values.
        Can be a single-property `Cycler` that would
        be like a key change, but as a shallow copy.

    Returns
    -------
    cycler : Cycler
        New `Cycler` for the given property

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [13120 13125])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13127 13135]))                  )
                nil [13109 15191])
            ("_cycler" function
               (:documentation "
    Create a new `Cycler` object from a property name and
    iterable of values.

    Parameters
    ----------
    label : hashable
        The property key.

    itr : iterable
        Finite length iterable of the property values.

    Returns
    -------
    cycler : Cycler
        New `Cycler` for the given property
    "
                :arguments 
                  ( ("label" variable nil (reparse-symbol function_parameters) [15205 15210])
                    ("itr" variable nil (reparse-symbol function_parameters) [15212 15215]))                  )
                nil [15193 15960]))          
      :file "cycler.py"
      :pointmax 15960
      :fsize 15959
      :lastmodtime '(23240 23001 209460 0)
      :unmatched-syntax '((NAME 1547 . 1553) (IF 1574 . 1576) (ELSE 1595 . 1599) (NAME 1489 . 1495) (IF 1515 . 1517) (ELSE 1535 . 1539)))
    (semanticdb-table "semanticdb-table-d64bb8"
      :major-mode python-mode
      :tags 
        '( ("matplotlib.pylab" include nil nil [1 31])
            ("matplotlib.pylab" include nil nil [32 55])
            ("__doc__" variable nil nil [56 90]))          
      :file "pylab.py"
      :pointmax 91
      :fsize 90
      :lastmodtime '(23240 23001 73462 0)
      :unmatched-syntax nil))
  :file "!home!jbailey!.local!lib!python2.7!site-packages!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
