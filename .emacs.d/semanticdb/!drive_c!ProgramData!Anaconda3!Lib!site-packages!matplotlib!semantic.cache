;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Provides a MATLAB-like plotting framework.

:mod:`~matplotlib.pylab` combines pyplot with numpy into a single namespace.
This is convenient for interactive work, but for programming it
is recommended that the namespaces be kept separate, e.g.::

    import numpy as np
    import matplotlib.pyplot as plt

    x = np.arange(0, 5, 0.1);
    y = np.sin(x)
    plt.plot(x, y)

\"\"\"" code nil nil [132 513])
            ("" code nil nil [537 622])
            ("six" include nil nil [624 634])
            ("sys" include nil nil [636 646])
            ("warnings" include nil nil [647 662])
            ("types" include nil nil [663 675])
            ("cycler" include nil nil [677 702])
            ("matplotlib" include nil nil [703 720])
            ("matplotlib.colorbar" include nil nil [721 747])
            ("matplotlib" include nil nil [748 776])
            ("matplotlib" include nil nil [777 827])
            ("matplotlib.cbook" include nil nil [828 904])
            ("matplotlib.cbook" include nil nil [905 949])
            ("matplotlib.cbook" include nil nil [950 989])
            ("matplotlib" include nil nil [990 1022])
            ("matplotlib.backend_bases" include nil nil [1023 1076])
            ("matplotlib.figure" include nil nil [1077 1124])
            ("matplotlib.gridspec" include nil nil [1125 1165])
            ("matplotlib.image" include nil nil [1166 1212])
            ("matplotlib.image" include nil nil [1213 1259])
            ("matplotlib" include nil nil [1260 1321])
            ("matplotlib" include nil nil [1322 1355])
            ("matplotlib.rcsetup" include nil nil [1356 1420])
            ("matplotlib.artist" include nil nil [1421 1468])
            ("matplotlib.artist" include nil nil [1469 1512])
            ("matplotlib.axes" include nil nil [1513 1554])
            ("matplotlib.projections" include nil nil [1555 1599])
            ("matplotlib" include nil nil [1600 1627])
            ("matplotlib.scale" include nil nil [1673 1733])
            ("matplotlib" include nil nil [1735 1760])
            ("matplotlib.cm" include nil nil [1761 1810])
            ("numpy" include nil nil [1812 1830])
            ("matplotlib.colors" include nil nil [1878 1917])
            ("matplotlib.lines" include nil nil [1918 1953])
            ("matplotlib.text" include nil nil [1954 1998])
            ("matplotlib.patches" include nil nil [1999 2063])
            ("matplotlib.widgets" include nil nil [2064 2130])
            ("MaxNLocator" include nil nil [2145 2494])
            ("MultipleLocator" include nil nil [2145 2494])
            ("AutoLocator" include nil nil [2145 2494])
            ("LogLocator" include nil nil [2145 2494])
            ("LinearLocator" include nil nil [2145 2494])
            ("NullLocator" include nil nil [2145 2494])
            ("FixedLocator" include nil nil [2145 2494])
            ("IndexLocator" include nil nil [2145 2494])
            ("Locator" include nil nil [2145 2494])
            ("LogFormatterMathtext" include nil nil [2145 2494])
            ("LogFormatterExponent" include nil nil [2145 2494])
            ("LogFormatter" include nil nil [2145 2494])
            ("ScalarFormatter" include nil nil [2145 2494])
            ("FormatStrFormatter" include nil nil [2145 2494])
            ("FuncFormatter" include nil nil [2145 2494])
            ("NullFormatter" include nil nil [2145 2494])
            ("FixedFormatter" include nil nil [2145 2494])
            ("Formatter" include nil nil [2145 2494])
            ("TickHelper" include nil nil [2145 2494])
            ("_backend_selection" function (:documentation " If rcParams['backend_fallback'] is true, check to see if the
        current backend is compatible with the current running event
        loop, and if not switches to a compatible one.
    ") nil [2521 4114])
            ("_backend_selection" code nil nil [4115 4135])
            ("matplotlib.backends" include nil nil [4151 4194])
            ("_backend_mod, new_figure_manager, draw_if_interactive, _show" code nil nil [4195 4271])
            ("_IP_REGISTERED" variable nil nil [4273 4294])
            ("_INSTALL_FIG_OBSERVER" variable nil nil [4295 4324])
            ("install_repl_displayhook" function (:documentation "
    Install a repl display hook so that any stale figure are automatically
    redrawn when control is returned to the repl.

    This works with IPython terminals and kernels,
    as well as vanilla python shells.
    ") nil [4327 5871])
            ("uninstall_repl_displayhook" function (:documentation "
    Uninstalls the matplotlib display hook.

    .. warning

       Need IPython >= 2 for this to work.  For IPython < 2 will raise a
       ``NotImplementedError``

    .. warning

       If you are using vanilla python and have installed another
       display hook this will reset ``sys.displayhook`` to what ever
       function was there when matplotlib installed it's displayhook,
       possibly discarding your changes.
    ") nil [5873 6833])
            ("draw_all" variable nil nil [6835 6873])
            ("" code nil nil [6898 6914])
            ("findobj" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [6927 6928])
                ("match" variable nil (reparse-symbol function_parameters) [6935 6940])
                ("include_self" variable nil (reparse-symbol function_parameters) [6947 6959]))              ) nil [6915 7058])
            ("switch_backend" function
               (:documentation "
    Switch the default backend.  This feature is **experimental**, and
    is only expected to work switching to an image backend.  e.g., if
    you have a bunch of PostScript scripts that you want to run from
    an interactive ipython session, you may want to switch to the PS
    backend before running them to avoid having a bunch of GUI windows
    popup.  If you try to interactively switch from one GUI backend to
    another, you will explode.

    Calling this command will close all open windows.
    "
                :arguments 
                  ( ("newbackend" variable nil (reparse-symbol function_parameters) [7079 7089]))                  )
                nil [7060 7888])
            ("show" function
               (:documentation "
    Display a figure.
    When running in ipython with its pylab mode, display all
    figures and return to the ipython prompt.

    In non-interactive mode, display all figures and block until
    the figures have been closed; in interactive mode it has no
    effect unless figures were created prior to a change from
    non-interactive to interactive mode (not recommended).  In
    that case it displays the figures but does not block.

    A single experimental keyword argument, *block*, may be
    set to True or False to override the blocking behavior
    described above.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [7899 7904])
                    ("kw" variable nil (reparse-symbol function_parameters) [7906 7910]))                  )
                nil [7890 8559])
            ("isinteractive" function (:documentation "
    Return status of interactive mode.
    ") nil [8561 8676])
            ("ioff" function nil nil [8678 8790])
            ("ion" function nil nil [8792 8899])
            ("pause" function
               (:documentation "
    Pause for *interval* seconds.

    If there is an active figure it will be updated and displayed,
    and the GUI event loop will run during the pause.

    If there is no active figure, or if a non-interactive backend
    is in use, this executes time.sleep(interval).

    This can be used for crude animation. For more complex
    animation, see :mod:`matplotlib.animation`.

    This function is experimental; its behavior may be changed
    or extended in a future release.

    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [8911 8919]))                  )
                nil [8901 9885])
            ("" code nil nil [9909 9924])
            ("rc" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [9932 9937])
                ("kwargs" variable nil (reparse-symbol function_parameters) [9939 9947]))              ) nil [9925 9985])
            ("" code nil nil [10009 10032])
            ("rc_context" function (:arguments 
              ( ("rc" variable nil (reparse-symbol function_parameters) [10048 10050])
                ("fname" variable nil (reparse-symbol function_parameters) [10057 10062]))              ) nil [10033 10114])
            ("" code nil nil [10138 10161])
            ("rcdefaults" function nil nil [10162 10263])
            ("gci" function (:documentation "
    Get the current colorable artist.  Specifically, returns the
    current :class:`~matplotlib.cm.ScalarMappable` instance (image or
    patch collection), or *None* if no images or patch collections
    have been defined.  The commands :func:`~matplotlib.pyplot.imshow`
    and :func:`~matplotlib.pyplot.figimage` create
    :class:`~matplotlib.image.Image` instances, and the commands
    :func:`~matplotlib.pyplot.pcolor` and
    :func:`~matplotlib.pyplot.scatter` create
    :class:`~matplotlib.collections.Collection` instances.  The
    current image is an attribute of the current axes, or the nearest
    earlier axes in the current figure that contains an image.
    ") nil [10393 11118])
            ("sci" function
               (:documentation "
    Set the current image.  This image will be the target of colormap
    commands like :func:`~matplotlib.pyplot.jet`,
    :func:`~matplotlib.pyplot.hot` or
    :func:`~matplotlib.pyplot.clim`).  The current image is an
    attribute of the current axes.
    "
                :arguments 
                  ( ("im" variable nil (reparse-symbol function_parameters) [11128 11130]))                  )
                nil [11120 11424])
            ("" code nil nil [11486 11493])
            ("setp" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [11503 11508])
                ("kwargs" variable nil (reparse-symbol function_parameters) [11510 11518]))              ) nil [11494 11555])
            ("xkcd" function
               (:documentation "
    Turns on `xkcd <http://xkcd.com/>`_ sketch-style drawing mode.
    This will only have effect on things drawn after this function is
    called.

    For best results, the \"Humor Sans\" font should be installed: it is
    not included with matplotlib.

    Parameters
    ----------
    scale : float, optional
        The amplitude of the wiggle perpendicular to the source line.
    length : float, optional
        The length of the wiggle along the line.
    randomness : float, optional
        The scale factor by which the length is shrunken or expanded.

    Notes
    -----
    This function works by a number of rcParams, so it will probably
    override others you have set before.

    If you want the effects of this function to be temporary, it can
    be used as a context manager, for example::

        with plt.xkcd():
            # This figure will be in XKCD-style
            fig1 = plt.figure()
            # ...

        # This figure will be in regular style
        fig2 = plt.figure()
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [11566 11571])
                    ("length" variable nil (reparse-symbol function_parameters) [11575 11581])
                    ("randomness" variable nil (reparse-symbol function_parameters) [11587 11597]))                  )
                nil [11557 13664])
            ("figure" function
               (:documentation "
    Creates a new figure.

    Parameters
    ----------

    num : integer or string, optional, default: none
        If not provided, a new figure will be created, and the figure number
        will be incremented. The figure objects holds this number in a `number`
        attribute.
        If num is provided, and a figure with this id already exists, make
        it active, and returns a reference to it. If this figure does not
        exists, create it and returns it.
        If num is a string, the window title will be set to this figure's
        `num`.

    figsize : tuple of integers, optional, default: None
        width, height in inches. If not provided, defaults to rc
        figure.figsize.

    dpi : integer, optional, default: None
        resolution of the figure. If not provided, defaults to rc figure.dpi.

    facecolor :
        the background color. If not provided, defaults to rc figure.facecolor

    edgecolor :
        the border color. If not provided, defaults to rc figure.edgecolor

    Returns
    -------
    figure : Figure
        The Figure instance returned will also be passed to new_figure_manager
        in the backends, which allows to hook custom Figure classes into the
        pylab interface. Additional kwargs will be passed to the figure init
        function.

    Notes
    -----
    If you are creating many figures, make sure you explicitly call \"close\"
    on the figures you are not using, because this will enable pylab
    to properly clean up the memory.

    rcParams defines the default values, which can be modified in the
    matplotlibrc file

    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [13692 13695])
                    ("figsize" variable nil (reparse-symbol function_parameters) [13761 13768])
                    ("dpi" variable nil (reparse-symbol function_parameters) [13819 13822])
                    ("facecolor" variable nil (reparse-symbol function_parameters) [13869 13878])
                    ("edgecolor" variable nil (reparse-symbol function_parameters) [13931 13940])
                    ("frameon" variable nil (reparse-symbol function_parameters) [13993 14000])
                    ("FigureClass" variable nil (reparse-symbol function_parameters) [14018 14029])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14049 14057]))                  )
                nil [13681 18643])
            ("_auto_draw_if_interactive" function
               (:documentation "
    This is an internal helper function for making sure that auto-redrawing
    works as intended in the plain python repl.

    Parameters
    ----------
    fig : Figure
        A figure object which is assumed to be associated with a canvas
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [18675 18678])
                    ("val" variable nil (reparse-symbol function_parameters) [18680 18683]))                  )
                nil [18645 19052])
            ("gcf" function nil nil [19054 19265])
            ("fignum_exists" function (:arguments 
              ( ("num" variable nil (reparse-symbol function_parameters) [19285 19288]))              ) nil [19267 19363])
            ("get_fignums" function (:documentation "Return a list of existing figure numbers.") nil [19365 19532])
            ("get_figlabels" function nil nil [19534 19766])
            ("get_current_fig_manager" function nil nil [19768 20009])
            ("" code nil nil [20033 20063])
            ("connect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [20076 20077])
                ("func" variable nil (reparse-symbol function_parameters) [20079 20083]))              ) nil [20064 20151])
            ("" code nil nil [20175 20208])
            ("disconnect" function (:arguments 
              ( ("cid" variable nil (reparse-symbol function_parameters) [20224 20227]))              ) nil [20209 20294])
            ("close" function
               (:documentation "
    Close a figure window.

    ``close()`` by itself closes the current figure

    ``close(h)`` where *h* is a :class:`Figure` instance, closes that figure

    ``close(num)`` closes figure number *num*

    ``close(name)`` where *name* is a string, closes figure with that label

    ``close('all')`` closes all the figure windows
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [20306 20311]))                  )
                nil [20296 21715])
            ("clf" function (:documentation "
    Clear the current figure.
    ") nil [21717 21790])
            ("draw" function (:documentation "Redraw the current figure.

    This is used to update a figure that has been altered, but not
    automatically re-drawn.  If interactive mode is on (:func:`.ion()`), this
    should be only rarely needed, but there may be ways to modify the state of
    a figure without marking it as `stale`.  Please report these cases as
    bugs.

    A more object-oriented alternative, given any
    :class:`~matplotlib.figure.Figure` instance, :attr:`fig`, that
    was created using a :mod:`~matplotlib.pyplot` function, is::

        fig.canvas.draw_idle()
    ") nil [21792 22419])
            ("" code nil nil [22443 22459])
            ("savefig" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [22472 22477])
                ("kwargs" variable nil (reparse-symbol function_parameters) [22479 22487]))              ) nil [22460 22639])
            ("" code nil nil [22663 22678])
            ("ginput" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* clicks from the user and return a list of the
    coordinates of each click.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [22690 22695])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [22697 22705]))                  )
                nil [22679 22966])
            ("" code nil nil [22990 23017])
            ("waitforbuttonpress" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* key or mouse clicks from the user and
    return a list containing True's for keyboard clicks and False's
    for mouse clicks.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [23041 23046])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [23048 23056]))                  )
                nil [23018 23380])
            ("" code nil nil [23433 23446])
            ("figtext" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23459 23464])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23466 23474]))              ) nil [23447 23516])
            ("" code nil nil [23540 23557])
            ("suptitle" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23571 23576])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23578 23586]))              ) nil [23558 23632])
            ("" code nil nil [23656 23673])
            ("figimage" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [23687 23692])
                ("kwargs" variable nil (reparse-symbol function_parameters) [23694 23702]))              ) nil [23674 23748])
            ("figlegend" function
               (:documentation "
    Place a legend in the figure.

    *labels*
      a sequence of strings

    *handles*
      a sequence of :class:`~matplotlib.lines.Line2D` or
      :class:`~matplotlib.patches.Patch` instances

    *loc*
      can be a string or an integer specifying the legend
      location

    A :class:`matplotlib.legend.Legend` instance is returned.

    Example::

      figlegend( (line1, line2, line3),
                 ('label1', 'label2', 'label3'),
                 'upper right' )

    .. seealso::

       :func:`~matplotlib.pyplot.legend`

    "
                :arguments 
                  ( ("handles" variable nil (reparse-symbol function_parameters) [23764 23771])
                    ("labels" variable nil (reparse-symbol function_parameters) [23773 23779])
                    ("loc" variable nil (reparse-symbol function_parameters) [23781 23784])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [23786 23794]))                  )
                nil [23750 24414])
            ("_hold_msg" variable nil nil [24446 24639])
            ("" code nil nil [24652 24678])
            ("hold" function
               (:documentation "
    Set the hold state.  If *b* is None (default), toggle the
    hold state, else set the hold state to boolean value *b*::

      hold()      # toggle hold
      hold(True)  # hold is on
      hold(False) # hold is off

    When *hold* is *True*, subsequent plot commands will add elements to
    the current axes.  When *hold* is *False*, the current axes and
    figure will be cleared on the next plot command.

    "
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [24688 24689]))                  )
                nil [24679 25616])
            ("" code nil nil [25628 25654])
            ("ishold" function (:documentation "
    Return the hold status of the current axes.

    ") nil [25655 25757])
            ("" code nil nil [25770 25796])
            ("over" function
               (:documentation "
    Call a function with hold(True).

    Calls::

      func(*args, **kwargs)

    with ``hold(True)`` and then restores the hold state.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [25806 25810])
                    ("args" variable nil (reparse-symbol function_parameters) [25812 25817])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [25819 25827]))                  )
                nil [25797 26080])
            ("axes" function
               (:documentation "
    Add an axes to the figure.

    The axes is added at position *rect* specified by:

    - ``axes()`` by itself creates a default full ``subplot(111)`` window axis.

    - ``axes(rect, facecolor='w')`` where *rect* = [left, bottom, width,
      height] in normalized (0, 1) units.  *facecolor* is the background
      color for the axis, default white.

    - ``axes(h)`` where *h* is an axes instance makes *h* the current
      axis.  An :class:`~matplotlib.axes.Axes` instance is returned.

    =========   ==============   ==============================================
    kwarg       Accepts          Description
    =========   ==============   ==============================================
    facecolor   color            the axes background color
    frameon     [True|False]     display the frame?
    sharex      otherax          current axes shares xaxis attribute
                                 with otherax
    sharey      otherax          current axes shares yaxis attribute
                                 with otherax
    polar       [True|False]     use a polar axes?
    aspect      [str | num]      ['equal', 'auto'] or a number.  If a number
                                 the ratio of x-unit/y-unit in screen-space.
                                 Also see
                                 :meth:`~matplotlib.axes.Axes.set_aspect`.
    =========   ==============   ==============================================

    Examples:

    * :file:`examples/pylab_examples/axes_demo.py` places custom axes.
    * :file:`examples/pylab_examples/shared_axis_demo.py` uses
      *sharex* and *sharey*.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [26103 26108])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [26110 26118]))                  )
                nil [26094 28093])
            ("delaxes" function
               (:documentation "
    Remove an axes from the current figure.  If *ax*
    doesn't exist, an error will be raised.

    ``delaxes()``: delete the current axes
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [28107 28112]))                  )
                nil [28095 28387])
            ("sca" function
               (:documentation "
    Set the current Axes instance to *ax*.

    The current Figure is updated to the parent of *ax*.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [28397 28399]))                  )
                nil [28389 28812])
            ("gca" function
               (:documentation "
    Get the current :class:`~matplotlib.axes.Axes` instance on the
    current figure matching the given keyword args, or create one.

    Examples
    --------
    To get the current polar axes on the current figure::

        plt.gca(projection='polar')

    If the current axes doesn't exist, or isn't a polar one, the appropriate
    axes will be created and then returned.

    See Also
    --------
    matplotlib.figure.Figure.gca : The figure's gca method.
    "
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [28822 28830]))                  )
                nil [28814 29345])
            ("subplot" function
               (:documentation "
    Return a subplot axes positioned by the given grid definition.

    Typical call signature::

      subplot(nrows, ncols, plot_number)

    Where *nrows* and *ncols* are used to notionally split the figure
    into ``nrows * ncols`` sub-axes, and *plot_number* is used to identify
    the particular subplot that this function is to create within the notional
    grid. *plot_number* starts at 1, increments across rows first and has a
    maximum of ``nrows * ncols``.

    In the case when *nrows*, *ncols* and *plot_number* are all less than 10,
    a convenience exists, such that the a 3 digit number can be given instead,
    where the hundreds represent *nrows*, the tens represent *ncols* and the
    units represent *plot_number*. For instance::

      subplot(211)

    produces a subaxes in a figure which represents the top plot (i.e. the
    first) in a 2 row by 1 column notional grid (no grid actually exists,
    but conceptually this is how the returned subplot has been positioned).

    .. note::

       Creating a subplot will delete any pre-existing subplot that overlaps
       with it beyond sharing a boundary::

          import matplotlib.pyplot as plt
          # plot a line, implicitly creating a subplot(111)
          plt.plot([1,2,3])
          # now create a subplot which represents the top plot of a grid
          # with 2 rows and 1 column. Since this subplot will overlap the
          # first, the plot (and its axes) previously created, will be removed
          plt.subplot(211)
          plt.plot(range(12))
          plt.subplot(212, facecolor='y') # creates 2nd subplot with yellow background

       If you do not want this behavior, use the
       :meth:`~matplotlib.figure.Figure.add_subplot` method or the
       :func:`~matplotlib.pyplot.axes` function instead.

    Keyword arguments:

      *facecolor*:
        The background color of the subplot, which can be any valid
        color specifier.  See :mod:`matplotlib.colors` for more
        information.

      *polar*:
        A boolean flag indicating whether the subplot plot should be
        a polar projection.  Defaults to *False*.

      *projection*:
        A string giving the name of a custom projection to be used
        for the subplot. This projection must have been previously
        registered. See :mod:`matplotlib.projections`.

    .. seealso::

        :func:`~matplotlib.pyplot.axes`
            For additional information on :func:`axes` and
            :func:`subplot` keyword arguments.

        :file:`examples/pie_and_polar_charts/polar_scatter_demo.py`
            For an example

    **Example:**

    .. plot:: mpl_examples/subplots_axes_and_figures/subplot_demo.py

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [29390 29395])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [29397 29405]))                  )
                nil [29378 33072])
            ("subplots" function
               (:documentation "
    Create a figure and a set of subplots

    This utility wrapper makes it convenient to create common layouts of
    subplots, including the enclosing figure object, in a single call.

    Parameters
    ----------
    nrows, ncols : int, optional, default: 1
        Number of rows/columns of the subplot grid.

    sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False
        Controls sharing of properties among x (`sharex`) or y (`sharey`)
        axes:

            - True or 'all': x- or y-axis will be shared among all
              subplots.
            - False or 'none': each subplot x- or y-axis will be
              independent.
            - 'row': each subplot row will share an x- or y-axis.
            - 'col': each subplot column will share an x- or y-axis.

        When subplots have a shared x-axis along a column, only the x tick
        labels of the bottom subplot are visible.  Similarly, when subplots
        have a shared y-axis along a row, only the y tick labels of the first
        column subplot are visible.

    squeeze : bool, optional, default: True
        - If True, extra dimensions are squeezed out from the returned Axes
          object:

            - if only one subplot is constructed (nrows=ncols=1), the
              resulting single Axes object is returned as a scalar.
            - for Nx1 or 1xN subplots, the returned object is a 1D numpy
              object array of Axes objects are returned as numpy 1D arrays.
            - for NxM, subplots with N>1 and M>1 are returned as a 2D arrays.

        - If False, no squeezing at all is done: the returned Axes object is
          always a 2D array containing Axes instances, even if it ends up
          being 1x1.

    subplot_kw : dict, optional
        Dict with keywords passed to the
        :meth:`~matplotlib.figure.Figure.add_subplot` call used to create each
        subplot.

    gridspec_kw : dict, optional
        Dict with keywords passed to the
        :class:`~matplotlib.gridspec.GridSpec` constructor used to create the
        grid the subplots are placed on.

    **fig_kw :
        All additional keyword arguments are passed to the :func:`figure` call.

    Returns
    -------
    fig : :class:`matplotlib.figure.Figure` object

    ax : Axes object or array of Axes objects.

        ax can be either a single :class:`matplotlib.axes.Axes` object or an
        array of Axes objects if more than one subplot was created.  The
        dimensions of the resulting array can be controlled with the squeeze
        keyword, see above.

    Examples
    --------
    First create some toy data:

    >>> x = np.linspace(0, 2*np.pi, 400)
    >>> y = np.sin(x**2)

    Creates just a figure and only one subplot

    >>> fig, ax = plt.subplots()
    >>> ax.plot(x, y)
    >>> ax.set_title('Simple plot')

    Creates two subplots and unpacks the output array immediately

    >>> f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
    >>> ax1.plot(x, y)
    >>> ax1.set_title('Sharing Y axis')
    >>> ax2.scatter(x, y)

    Creates four polar axes, and accesses them through the returned array

    >>> fig, axes = plt.subplots(2, 2, subplot_kw=dict(polar=True))
    >>> axes[0, 0].plot(x, y)
    >>> axes[1, 1].scatter(x, y)

    Share a X axis with each column of subplots

    >>> plt.subplots(2, 2, sharex='col')

    Share a Y axis with each row of subplots

    >>> plt.subplots(2, 2, sharey='row')

    Share both X and Y axes with all subplots

    >>> plt.subplots(2, 2, sharex='all', sharey='all')

    Note that this is the same as

    >>> plt.subplots(2, 2, sharex=True, sharey=True)

    See Also
    --------
    figure
    subplot
    "
                :arguments 
                  ( ("nrows" variable nil (reparse-symbol function_parameters) [33087 33092])
                    ("ncols" variable nil (reparse-symbol function_parameters) [33096 33101])
                    ("sharex" variable nil (reparse-symbol function_parameters) [33105 33111])
                    ("sharey" variable nil (reparse-symbol function_parameters) [33119 33125])
                    ("squeeze" variable nil (reparse-symbol function_parameters) [33133 33140])
                    ("subplot_kw" variable nil (reparse-symbol function_parameters) [33160 33170])
                    ("gridspec_kw" variable nil (reparse-symbol function_parameters) [33177 33188])
                    ("fig_kw" variable nil (reparse-symbol function_parameters) [33195 33203]))                  )
                nil [33074 40499])
            ("subplot2grid" function
               (:documentation "
    Create a subplot in a grid.  The grid is specified by *shape*, at
    location of *loc*, spanning *rowspan*, *colspan* cells in each
    direction.  The index for loc is 0-based. ::

      subplot2grid(shape, loc, rowspan=1, colspan=1)

    is identical to ::

      gridspec=GridSpec(shape[0], shape[1])
      subplotspec=gridspec.new_subplotspec(loc, rowspan, colspan)
      subplot(subplotspec)
    "
                :arguments 
                  ( ("shape" variable nil (reparse-symbol function_parameters) [40518 40523])
                    ("loc" variable nil (reparse-symbol function_parameters) [40525 40528])
                    ("rowspan" variable nil (reparse-symbol function_parameters) [40530 40537])
                    ("colspan" variable nil (reparse-symbol function_parameters) [40541 40548])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [40552 40560]))                  )
                nil [40501 41494])
            ("twinx" function
               (:documentation "
    Make a second axes that shares the *x*-axis.  The new axes will
    overlay *ax* (or the current axes if *ax* is *None*).  The ticks
    for *ax2* will be placed on the right, and the *ax2* instance is
    returned.

    .. seealso::

       :file:`examples/api_examples/two_scales.py`
          For an example
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [41506 41508]))                  )
                nil [41496 41919])
            ("twiny" function
               (:documentation "
    Make a second axes that shares the *y*-axis.  The new axis will
    overlay *ax* (or the current axes if *ax* is *None*).  The ticks
    for *ax2* will be placed on the top, and the *ax2* instance is
    returned.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [41931 41933]))                  )
                nil [41921 42247])
            ("subplots_adjust" function
               (:documentation "
    Tune the subplot layout.

    call signature::

      subplots_adjust(left=None, bottom=None, right=None, top=None,
                      wspace=None, hspace=None)

    The parameter meanings (and suggested defaults) are::

      left  = 0.125  # the left side of the subplots of the figure
      right = 0.9    # the right side of the subplots of the figure
      bottom = 0.1   # the bottom of the subplots of the figure
      top = 0.9      # the top of the subplots of the figure
      wspace = 0.2   # the amount of width reserved for blank space between subplots,
                     # expressed as a fraction of the average axis width
      hspace = 0.2   # the amount of height reserved for white space between subplots,
                     # expressed as a fraction of the average axis height

    The actual defaults are controlled by the rc file
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [42269 42274])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [42276 42284]))                  )
                nil [42249 43223])
            ("subplot_tool" function
               (:documentation "
    Launch a subplot tool window for a figure.

    A :class:`matplotlib.widgets.SubplotTool` instance is returned.
    "
                :arguments 
                  ( ("targetfig" variable nil (reparse-symbol function_parameters) [43242 43251]))                  )
                nil [43225 44088])
            ("tight_layout" function
               (:documentation "
    Automatically adjust subplot parameters to give specified padding.

    Parameters:

    pad : float
        padding between the figure edge and the edges of subplots, as a fraction of the font-size.
    h_pad, w_pad : float
        padding (height/width) between edges of adjacent subplots.
        Defaults to `pad_inches`.
    rect : if rect is given, it is interpreted as a rectangle
        (left, bottom, right, top) in the normalized figure
        coordinate that the whole subplots area (including
        labels) will fit into. Default is (0, 0, 1, 1).
    "
                :arguments 
                  ( ("pad" variable nil (reparse-symbol function_parameters) [44107 44110])
                    ("h_pad" variable nil (reparse-symbol function_parameters) [44117 44122])
                    ("w_pad" variable nil (reparse-symbol function_parameters) [44129 44134])
                    ("rect" variable nil (reparse-symbol function_parameters) [44141 44145]))                  )
                nil [44090 44820])
            ("box" function
               (:documentation "
    Turn the axes box on or off.  *on* may be a boolean or a string,
    'on' or 'off'.

    If *on* is *None*, toggle state.
    "
                :arguments 
                  ( ("on" variable nil (reparse-symbol function_parameters) [44830 44832]))                  )
                nil [44822 45104])
            ("title" function
               (:documentation "
    Set a title of the current axes.

    Set one of the three available axes titles. The available titles are
    positioned above the axes in the center, flush with the left edge,
    and flush with the right edge.

    .. seealso::
        See :func:`~matplotlib.pyplot.text` for adding text
        to the current axes

    Parameters
    ----------
    label : str
        Text to use for the title

    fontdict : dict
        A dictionary controlling the appearance of the title text,
        the default `fontdict` is:

            {'fontsize': rcParams['axes.titlesize'],
            'fontweight' : rcParams['axes.titleweight'],
            'verticalalignment': 'baseline',
            'horizontalalignment': loc}

    loc : {'center', 'left', 'right'}, str, optional
        Which title to set, defaults to 'center'

    Returns
    -------
    text : :class:`~matplotlib.text.Text`
        The matplotlib text instance representing the title

    Other parameters
    ----------------
    kwargs : text properties
        Other keyword arguments are text properties, see
        :class:`~matplotlib.text.Text` for a list of valid text
        properties.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45116 45117])
                    ("args" variable nil (reparse-symbol function_parameters) [45119 45124])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [45126 45134]))                  )
                nil [45106 46367])
            ("axis" function
               (:documentation "
    Convenience method to get or set axis properties.

    Calling with no arguments::

      >>> axis()

    returns the current axes limits ``[xmin, xmax, ymin, ymax]``.::

      >>> axis(v)

    sets the min and max of the x and y axes, with
    ``v = [xmin, xmax, ymin, ymax]``.::

      >>> axis('off')

    turns off the axis lines and labels.::

      >>> axis('equal')

    changes limits of *x* or *y* axis so that equal increments of *x*
    and *y* have the same length; a circle is circular.::

      >>> axis('scaled')

    achieves the same result by changing the dimensions of the plot box instead
    of the axis data limits.::

      >>> axis('tight')

    changes *x* and *y* axis limits such that all data is shown. If
    all data is already shown, it will move it to the center of the
    figure without modifying (*xmax* - *xmin*) or (*ymax* -
    *ymin*). Note this is slightly different than in MATLAB.::

      >>> axis('image')

    is 'scaled' with the axis limits equal to the data limits.::

      >>> axis('auto')

    and::

      >>> axis('normal')

    are deprecated. They restore default behavior; axis limits are automatically
    scaled to make the data fit comfortably within the plot box.

    if ``len(*v)==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*
    as kwargs selectively to alter just those limits without changing
    the others.

      >>> axis('square')

    changes the limit ranges (*xmax*-*xmin*) and (*ymax*-*ymin*) of
    the *x* and *y* axes to be the same, and have the same scaling,
    resulting in a square plot.

    The xmin, xmax, ymin, ymax tuple is returned

    .. seealso::

        :func:`xlim`, :func:`ylim`
           For setting the x- and y-limits individually.
    "
                :arguments 
                  ( ("v" variable nil (reparse-symbol function_parameters) [46390 46392])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [46394 46402]))                  )
                nil [46381 48198])
            ("xlabel" function
               (:documentation "
    Set the *x* axis label of the current axis.

    Default override is::

      override = {
          'fontsize'            : 'small',
          'verticalalignment'   : 'top',
          'horizontalalignment' : 'center'
          }

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args work
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [48211 48212])
                    ("args" variable nil (reparse-symbol function_parameters) [48214 48219])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [48221 48229]))                  )
                nil [48200 48660])
            ("ylabel" function
               (:documentation "
    Set the *y* axis label of the current axis.

    Defaults override is::

        override = {
           'fontsize'            : 'small',
           'verticalalignment'   : 'center',
           'horizontalalignment' : 'right',
           'rotation'='vertical' : }

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args
            work.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [48673 48674])
                    ("args" variable nil (reparse-symbol function_parameters) [48676 48681])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [48683 48691]))                  )
                nil [48662 49169])
            ("xlim" function
               (:documentation "
    Get or set the *x* limits of the current axes.

    ::

      xmin, xmax = xlim()   # return the current xlim
      xlim( (xmin, xmax) )  # set the xlim to xmin, xmax
      xlim( xmin, xmax )    # set the xlim to xmin, xmax

    If you do not specify args, you can pass the xmin and xmax as
    kwargs, e.g.::

      xlim(xmax=3) # adjust the max leaving min unchanged
      xlim(xmin=1) # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the x-axis.

    The new axis limits are returned as a length 2 tuple.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [49180 49185])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [49187 49195]))                  )
                nil [49171 49893])
            ("ylim" function
               (:documentation "
    Get or set the *y*-limits of the current axes.

    ::

      ymin, ymax = ylim()   # return the current ylim
      ylim( (ymin, ymax) )  # set the ylim to ymin, ymax
      ylim( ymin, ymax )    # set the ylim to ymin, ymax

    If you do not specify args, you can pass the *ymin* and *ymax* as
    kwargs, e.g.::

      ylim(ymax=3) # adjust the max leaving min unchanged
      ylim(ymin=1) # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the y-axis.

    The new axis limits are returned as a length 2 tuple.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [49904 49909])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [49911 49919]))                  )
                nil [49895 50620])
            ("xscale" function
               (:documentation "
    Set the scaling of the *x*-axis.

    call signature::

      xscale(scale, **kwargs)

    The available scales are: %(scale)s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [50659 50664])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [50666 50674]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [50622 50947])
            ("yscale" function
               (:documentation "
    Set the scaling of the *y*-axis.

    call signature::

      yscale(scale, **kwargs)

    The available scales are: %(scale)s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [50986 50991])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [50993 51001]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [50949 51274])
            ("xticks" function
               (:documentation "
    Get or set the *x*-limits of the current tick locations and labels.

    ::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = xticks()

      # set the locations of the xticks
      xticks( arange(6) )

      # set the locations and labels of the xticks
      xticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      xticks( arange(12), calendar.month_name[1:13], rotation=17 )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [51287 51292])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [51294 51302]))                  )
                nil [51276 52441])
            ("yticks" function
               (:documentation "
    Get or set the *y*-limits of the current tick locations and labels.

    ::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = yticks()

      # set the locations of the yticks
      yticks( arange(6) )

      # set the locations and labels of the yticks
      yticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      yticks( arange(12), calendar.month_name[1:13], rotation=45 )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [52454 52459])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [52461 52469]))                  )
                nil [52443 53639])
            ("minorticks_on" function (:documentation "
    Display minor ticks on the current plot.

    Displaying minor ticks reduces performance; turn them off using
    minorticks_off() if drawing speed is a problem.
    ") nil [53641 53870])
            ("minorticks_off" function (:documentation "
    Remove minor ticks from the current plot.
    ") nil [53872 53983])
            ("rgrids" function
               (:documentation "
    Get or set the radial gridlines on a polar plot.

    call signatures::

      lines, labels = rgrids()
      lines, labels = rgrids(radii, labels=None, angle=22.5, **kwargs)

    When called with no arguments, :func:`rgrid` simply returns the
    tuple (*lines*, *labels*), where *lines* is an array of radial
    gridlines (:class:`~matplotlib.lines.Line2D` instances) and
    *labels* is an array of tick labels
    (:class:`~matplotlib.text.Text` instances). When called with
    arguments, the labels will appear at the specified radial
    distances and angles.

    *labels*, if not *None*, is a len(*radii*) list of strings of the
    labels to use at each angle.

    If *labels* is None, the rformatter will be used

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0), ('Tom', 'Dick', 'Harry' )

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [53996 54001])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [54003 54011]))                  )
                nil [53985 55431])
            ("thetagrids" function
               (:documentation "
    Get or set the theta locations of the gridlines in a polar plot.

    If no arguments are passed, return a tuple (*lines*, *labels*)
    where *lines* is an array of radial gridlines
    (:class:`~matplotlib.lines.Line2D` instances) and *labels* is an
    array of tick labels (:class:`~matplotlib.text.Text` instances)::

      lines, labels = thetagrids()

    Otherwise the syntax is::

      lines, labels = thetagrids(angles, labels=None, fmt='%d', frac = 1.1)

    set the angles at which to place the theta grids (these gridlines
    are equal along the theta dimension).

    *angles* is in degrees.

    *labels*, if not *None*, is a len(angles) list of strings of the
    labels to use at each angle.

    If *labels* is *None*, the labels will be ``fmt%angle``.

    *frac* is the fraction of the polar axes radius at which to place
    the label (1 is the edge). e.g., 1.05 is outside the axes and 0.95
    is inside the axes.

    Return value is a list of tuples (*lines*, *labels*):

      - *lines* are :class:`~matplotlib.lines.Line2D` instances

      - *labels* are :class:`~matplotlib.text.Text` instances.

    Note that on input, the *labels* argument is a list of strings,
    and on output it is a list of :class:`~matplotlib.text.Text`
    instances.

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90), ('NE', 'NW', 'SW','SE') )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [55448 55453])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [55455 55463]))                  )
                nil [55433 57462])
            ("plotting" function nil nil [57485 57510])
            ("get_plot_commands" function (:documentation "
    Get a sorted list of all of the plotting commands.
    ") nil [57512 58475])
            ("colors" function (:documentation "
    This is a do-nothing function to provide you with help on how
    matplotlib handles colors.

    Commands which take color arguments can use several formats to
    specify the colors.  For the basic built-in colors, you can use a
    single letter

      =====   =======
      Alias   Color
      =====   =======
      'b'     blue
      'g'     green
      'r'     red
      'c'     cyan
      'm'     magenta
      'y'     yellow
      'k'     black
      'w'     white
      =====   =======

    For a greater range of colors, you have two options.  You can
    specify the color using an html hex string, as in::

      color = '#eeefff'

    or you can pass an R,G,B tuple, where each of R,G,B are in the
    range [0,1].

    You can also use any legal html name for a color, for example::

      color = 'red'
      color = 'burlywood'
      color = 'chartreuse'

    The example below creates a subplot with a dark
    slate gray background::

       subplot(111, facecolor=(0.1843, 0.3098, 0.3098))

    Here is an example that creates a pale turquoise title::

      title('Is this the best color?', color='#afeeee')

    ") nil [58476 59648])
            ("colormaps" function (:documentation "
    Matplotlib provides a number of colormaps, and others can be added using
    :func:`~matplotlib.cm.register_cmap`.  This function documents the built-in
    colormaps, and will also return a list of all registered colormaps if called.

    You can set the colormap for an image, pcolor, scatter, etc,
    using a keyword argument::

      imshow(X, cmap=cm.hot)

    or using the :func:`set_cmap` function::

      imshow(X)
      pyplot.set_cmap('hot')
      pyplot.set_cmap('jet')

    In interactive mode, :func:`set_cmap` will update the colormap post-hoc,
    allowing you to see which one works best for your data.

    All built-in colormaps can be reversed by appending ``_r``: For instance,
    ``gray_r`` is the reverse of ``gray``.

    There are several common color schemes used in visualization:

    Sequential schemes
      for unipolar data that progresses from low to high
    Diverging schemes
      for bipolar data that emphasizes positive or negative deviations from a
      central value
    Cyclic schemes
      meant for plotting values that wrap around at the
      endpoints, such as phase angle, wind direction, or time of day
    Qualitative schemes
      for nominal data that has no inherent ordering, where color is used
      only to distinguish categories

    The base colormaps are derived from those of the same name provided
    with Matlab:

      =========   =======================================================
      Colormap    Description
      =========   =======================================================
      autumn      sequential linearly-increasing shades of red-orange-yellow
      bone        sequential increasing black-white color map with
                  a tinge of blue, to emulate X-ray film
      cool        linearly-decreasing shades of cyan-magenta
      copper      sequential increasing shades of black-copper
      flag        repetitive red-white-blue-black pattern (not cyclic at
                  endpoints)
      gray        sequential linearly-increasing black-to-white
                  grayscale
      hot         sequential black-red-yellow-white, to emulate blackbody
                  radiation from an object at increasing temperatures
      hsv         cyclic red-yellow-green-cyan-blue-magenta-red, formed
                  by changing the hue component in the HSV color space
      inferno     perceptually uniform shades of black-red-yellow
      jet         a spectral map with dark endpoints, blue-cyan-yellow-red;
                  based on a fluid-jet simulation by NCSA [#]_
      magma       perceptually uniform shades of black-red-white
      pink        sequential increasing pastel black-pink-white, meant
                  for sepia tone colorization of photographs
      plasma      perceptually uniform shades of blue-red-yellow
      prism       repetitive red-yellow-green-blue-purple-...-green pattern
                  (not cyclic at endpoints)
      spring      linearly-increasing shades of magenta-yellow
      summer      sequential linearly-increasing shades of green-yellow
      viridis     perceptually uniform shades of blue-green-yellow
      winter      linearly-increasing shades of blue-green
      =========   =======================================================

    For the above list only, you can also set the colormap using the
    corresponding pylab shortcut interface function, similar to Matlab::

      imshow(X)
      hot()
      jet()

    The next set of palettes are from the `Yorick scientific visualisation
    package <http://dhmunro.github.io/yorick-doc/>`_, an evolution of
    the GIST package, both by David H. Munro:

      ============  =======================================================
      Colormap      Description
      ============  =======================================================
      gist_earth    mapmaker's colors from dark blue deep ocean to green
                    lowlands to brown highlands to white mountains
      gist_heat     sequential increasing black-red-orange-white, to emulate
                    blackbody radiation from an iron bar as it grows hotter
      gist_ncar     pseudo-spectral black-blue-green-yellow-red-purple-white
                    colormap from National Center for Atmospheric
                    Research [#]_
      gist_rainbow  runs through the colors in spectral order from red to
                    violet at full saturation (like *hsv* but not cyclic)
      gist_stern    \"Stern special\" color table from Interactive Data
                    Language software
      ============  =======================================================

    The following colormaps are based on the `ColorBrewer
    <http://colorbrewer2.org>`_ color specifications and designs developed by
    Cynthia Brewer:

    ColorBrewer Diverging (luminance is highest at the midpoint, and
    decreases towards differently-colored endpoints):

      ========  ===================================
      Colormap  Description
      ========  ===================================
      BrBG      brown, white, blue-green
      PiYG      pink, white, yellow-green
      PRGn      purple, white, green
      PuOr      orange, white, purple
      RdBu      red, white, blue
      RdGy      red, white, gray
      RdYlBu    red, yellow, blue
      RdYlGn    red, yellow, green
      Spectral  red, orange, yellow, green, blue
      ========  ===================================

    ColorBrewer Sequential (luminance decreases monotonically):

      ========  ====================================
      Colormap  Description
      ========  ====================================
      Blues     white to dark blue
      BuGn      white, light blue, dark green
      BuPu      white, light blue, dark purple
      GnBu      white, light green, dark blue
      Greens    white to dark green
      Greys     white to black (not linear)
      Oranges   white, orange, dark brown
      OrRd      white, orange, dark red
      PuBu      white, light purple, dark blue
      PuBuGn    white, light purple, dark green
      PuRd      white, light purple, dark red
      Purples   white to dark purple
      RdPu      white, pink, dark purple
      Reds      white to dark red
      YlGn      light yellow, dark green
      YlGnBu    light yellow, light green, dark blue
      YlOrBr    light yellow, orange, dark brown
      YlOrRd    light yellow, orange, dark red
      ========  ====================================

    ColorBrewer Qualitative:

    (For plotting nominal data, :class:`ListedColormap` is used,
    not :class:`LinearSegmentedColormap`.  Different sets of colors are
    recommended for different numbers of categories.)

    * Accent
    * Dark2
    * Paired
    * Pastel1
    * Pastel2
    * Set1
    * Set2
    * Set3

    Other miscellaneous schemes:

      ============= =======================================================
      Colormap      Description
      ============= =======================================================
      afmhot        sequential black-orange-yellow-white blackbody
                    spectrum, commonly used in atomic force microscopy
      brg           blue-red-green
      bwr           diverging blue-white-red
      coolwarm      diverging blue-gray-red, meant to avoid issues with 3D
                    shading, color blindness, and ordering of colors [#]_
      CMRmap        \"Default colormaps on color images often reproduce to
                    confusing grayscale images. The proposed colormap
                    maintains an aesthetically pleasing color image that
                    automatically reproduces to a monotonic grayscale with
                    discrete, quantifiable saturation levels.\" [#]_
      cubehelix     Unlike most other color schemes cubehelix was designed
                    by D.A. Green to be monotonically increasing in terms
                    of perceived brightness. Also, when printed on a black
                    and white postscript printer, the scheme results in a
                    greyscale with monotonically increasing brightness.
                    This color scheme is named cubehelix because the r,g,b
                    values produced can be visualised as a squashed helix
                    around the diagonal in the r,g,b color cube.
      gnuplot       gnuplot's traditional pm3d scheme
                    (black-blue-red-yellow)
      gnuplot2      sequential color printable as gray
                    (black-blue-violet-yellow-white)
      ocean         green-blue-white
      rainbow       spectral purple-blue-green-yellow-orange-red colormap
                    with diverging luminance
      seismic       diverging blue-white-red
      nipy_spectral black-purple-blue-green-yellow-red-white spectrum,
                    originally from the Neuroimaging in Python project
      terrain       mapmaker's colors, blue-green-yellow-brown-white,
                    originally from IGOR Pro
      ============= =======================================================

    The following colormaps are redundant and may be removed in future
    versions.  It's recommended to use the names in the descriptions
    instead, which produce identical output:

      =========  =======================================================
      Colormap   Description
      =========  =======================================================
      gist_gray  identical to *gray*
      gist_yarg  identical to *gray_r*
      binary     identical to *gray_r*
      spectral   identical to *nipy_spectral* [#]_
      =========  =======================================================

    .. rubric:: Footnotes

    .. [#] Rainbow colormaps, ``jet`` in particular, are considered a poor
      choice for scientific visualization by many researchers: `Rainbow Color
      Map (Still) Considered Harmful
      <http://ieeexplore.ieee.org/document/4118486/?arnumber=4118486>`_

    .. [#] Resembles \"BkBlAqGrYeOrReViWh200\" from NCAR Command
      Language. See `Color Table Gallery
      <http://www.ncl.ucar.edu/Document/Graphics/color_table_gallery.shtml>`_

    .. [#] See `Diverging Color Maps for Scientific Visualization
      <http://www.kennethmoreland.com/color-maps/>`_ by Kenneth Moreland.

    .. [#] See `A Color Map for Effective Black-and-White Rendering of
      Color-Scale Images
      <http://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m>`_
      by Carey Rappaport

    .. [#] Changed to distinguish from ColorBrewer's *Spectral* map.
      :func:`spectral` still works, but
      ``set_cmap('nipy_spectral')`` is recommended for clarity.


    ") nil [59650 70394])
            ("_setup_pyplot_info_docstrings" function (:documentation "
    Generates the plotting and docstring.

    These must be done after the entire module is imported, so it is
    called from the end of this module, which is generated by
    boilerplate.py.
    ") nil [70396 71956])
            ("colorbar" function (:arguments 
              ( ("mappable" variable nil (reparse-symbol function_parameters) [72036 72044])
                ("cax" variable nil (reparse-symbol function_parameters) [72051 72054])
                ("ax" variable nil (reparse-symbol function_parameters) [72061 72063])
                ("kw" variable nil (reparse-symbol function_parameters) [72070 72074]))              ) nil [72023 72546])
            ("colorbar" variable nil nil [72546 72597])
            ("clim" function
               (:documentation "
    Set the color limits of the current image.

    To apply clim to all axes images do::

      clim(0, 0.5)

    If either *vmin* or *vmax* is None, the image min/max respectively
    will be used for color scaling.

    If you want to set the clim of multiple images,
    use, for example::

      for im in gca().get_images():
          im.set_clim(0, 0.05)

    "
                :arguments 
                  ( ("vmin" variable nil (reparse-symbol function_parameters) [72609 72613])
                    ("vmax" variable nil (reparse-symbol function_parameters) [72620 72624]))                  )
                nil [72600 73154])
            ("set_cmap" function
               (:documentation "
    Set the default colormap.  Applies to the current image if any.
    See help(colormaps) for more information.

    *cmap* must be a :class:`~matplotlib.colors.Colormap` instance, or
    the name of a registered colormap.

    See :func:`matplotlib.cm.register_cmap` and
    :func:`matplotlib.cm.get_cmap`.
    "
                :arguments 
                  ( ("cmap" variable nil (reparse-symbol function_parameters) [73169 73173]))                  )
                nil [73156 73629])
            ("" code nil nil [73654 73663])
            ("imread" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [73675 73680])
                ("kwargs" variable nil (reparse-symbol function_parameters) [73682 73690]))              ) nil [73664 73729])
            ("" code nil nil [73753 73762])
            ("imsave" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [73774 73779])
                ("kwargs" variable nil (reparse-symbol function_parameters) [73781 73789]))              ) nil [73763 73828])
            ("matshow" function
               (:documentation "
    Display an array as a matrix in a new figure window.

    The origin is set at the upper left hand corner and rows (first
    dimension of the array) are displayed horizontally.  The aspect
    ratio of the figure window is that of the array, unless this would
    make an excessively short or narrow figure.

    Tick labels for the xaxis are placed on top.

    With the exception of *fignum*, keyword arguments are passed to
    :func:`~matplotlib.pyplot.imshow`.  You may set the *origin*
    kwarg to \"lower\" if you want the first row in the array to be
    at the bottom instead of the top.


    *fignum*: [ None | integer | False ]
      By default, :func:`matshow` creates a new figure window with
      automatic numbering.  If *fignum* is given as an integer, the
      created figure will use this figure number.  Because of how
      :func:`matshow` tries to set the figure aspect ratio to be the
      one of the array, if you provide the number of an already
      existing figure, strange things may happen.

      If *fignum* is *False* or 0, a new figure window will **NOT** be created.
    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [73842 73843])
                    ("fignum" variable nil (reparse-symbol function_parameters) [73845 73851])
                    ("kw" variable nil (reparse-symbol function_parameters) [73858 73862]))                  )
                nil [73830 75329])
            ("polar" function
               (:documentation "
    Make a polar plot.

    call signature::

      polar(theta, r, **kwargs)

    Multiple *theta*, *r* arguments are supported, with format
    strings, as in :func:`~matplotlib.pyplot.plot`.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [75341 75346])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [75348 75356]))                  )
                nil [75331 75645])
            ("plotfile" function
               (:documentation "
    Plot the data in in a file.

    *cols* is a sequence of column identifiers to plot.  An identifier
    is either an int or a string.  If it is an int, it indicates the
    column number.  If it is a string, it indicates the column header.
    matplotlib will make column headers lower case, replace spaces with
    underscores, and remove all illegal characters; so ``'Adj Close*'``
    will have name ``'adj_close'``.

    - If len(*cols*) == 1, only that column will be plotted on the *y* axis.

    - If len(*cols*) > 1, the first element will be an identifier for
      data for the *x* axis and the remaining elements will be the
      column indexes for multiple subplots if *subplots* is *True*
      (the default), or for lines in a single subplot if *subplots*
      is *False*.

    *plotfuncs*, if not *None*, is a dictionary mapping identifier to
    an :class:`~matplotlib.axes.Axes` plotting function as a string.
    Default is 'plot', other choices are 'semilogy', 'fill', 'bar',
    etc.  You must use the same type of identifier in the *cols*
    vector as you use in the *plotfuncs* dictionary, e.g., integer
    column numbers in both or column names in both. If *subplots*
    is *False*, then including any function such as 'semilogy'
    that changes the axis scaling will set the scaling for all
    columns.

    *comments*, *skiprows*, *checkrows*, *delimiter*, and *names*
    are all passed on to :func:`matplotlib.pylab.csv2rec` to
    load the data into a record array.

    If *newfig* is *True*, the plot always will be made in a new figure;
    if *False*, it will be made in the current figure if one exists,
    else in a new figure.

    kwargs are passed on to plotting functions.

    Example usage::

      # plot the 2nd and 4th column against the 1st in two subplots
      plotfile(fname, (0,1,3))

      # plot using column names; specify an alternate plot type for volume
      plotfile(fname, ('date', 'volume', 'adj_close'),
                                    plotfuncs={'volume': 'semilogy'})

    Note: plotfile is intended as a convenience for quickly plotting
    data from flat files; it is not intended as an alternative
    interface to general plotting with pyplot or matplotlib.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [75660 75665])
                    ("cols" variable nil (reparse-symbol function_parameters) [75667 75671])
                    ("plotfuncs" variable nil (reparse-symbol function_parameters) [75678 75687])
                    ("comments" variable nil (reparse-symbol function_parameters) [75707 75715])
                    ("skiprows" variable nil (reparse-symbol function_parameters) [75721 75729])
                    ("checkrows" variable nil (reparse-symbol function_parameters) [75733 75742])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [75746 75755])
                    ("names" variable nil (reparse-symbol function_parameters) [75774 75779])
                    ("subplots" variable nil (reparse-symbol function_parameters) [75786 75794])
                    ("newfig" variable nil (reparse-symbol function_parameters) [75801 75807])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [75814 75822]))                  )
                nil [75647 79897])
            ("_autogen_docstring" function
               (:documentation "Autogenerated wrappers will get their docstring from a base function
    with an addendum."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [79922 79926]))                  )
                nil [79899 80243])
            ("" code nil nil [80361 80371])
            ("spy" function (:arguments 
              ( ("Z" variable nil (reparse-symbol function_parameters) [80380 80381])
                ("precision" variable nil (reparse-symbol function_parameters) [80383 80392])
                ("marker" variable nil (reparse-symbol function_parameters) [80396 80402])
                ("markersize" variable nil (reparse-symbol function_parameters) [80409 80419])
                ("aspect" variable nil (reparse-symbol function_parameters) [80426 80432])
                ("kwargs" variable nil (reparse-symbol function_parameters) [80442 80450]))              ) nil [80372 81016])
            ("install_repl_displayhook" code nil nil [81314 81340])
            ("" code nil nil [81534 81546])
            ("acorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [81557 81558])
                ("hold" variable nil (reparse-symbol function_parameters) [81560 81564])
                ("data" variable nil (reparse-symbol function_parameters) [81571 81575])
                ("kwargs" variable nil (reparse-symbol function_parameters) [81582 81590]))              ) nil [81547 82053])
            ("" code nil nil [82165 82186])
            ("angle_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [82206 82207])
                ("Fs" variable nil (reparse-symbol function_parameters) [82209 82211])
                ("Fc" variable nil (reparse-symbol function_parameters) [82218 82220])
                ("window" variable nil (reparse-symbol function_parameters) [82227 82233])
                ("pad_to" variable nil (reparse-symbol function_parameters) [82240 82246])
                ("sides" variable nil (reparse-symbol function_parameters) [82253 82258])
                ("hold" variable nil (reparse-symbol function_parameters) [82284 82288])
                ("data" variable nil (reparse-symbol function_parameters) [82295 82299])
                ("kwargs" variable nil (reparse-symbol function_parameters) [82306 82314]))              ) nil [82187 82875])
            ("" code nil nil [82987 82999])
            ("arrow" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [83010 83011])
                ("y" variable nil (reparse-symbol function_parameters) [83013 83014])
                ("dx" variable nil (reparse-symbol function_parameters) [83016 83018])
                ("dy" variable nil (reparse-symbol function_parameters) [83020 83022])
                ("hold" variable nil (reparse-symbol function_parameters) [83024 83028])
                ("kwargs" variable nil (reparse-symbol function_parameters) [83035 83043]))              ) nil [83000 83506])
            ("" code nil nil [83618 83632])
            ("axhline" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [83645 83646])
                ("xmin" variable nil (reparse-symbol function_parameters) [83650 83654])
                ("xmax" variable nil (reparse-symbol function_parameters) [83658 83662])
                ("hold" variable nil (reparse-symbol function_parameters) [83666 83670])
                ("kwargs" variable nil (reparse-symbol function_parameters) [83677 83685]))              ) nil [83633 84163])
            ("" code nil nil [84275 84289])
            ("axhspan" function (:arguments 
              ( ("ymin" variable nil (reparse-symbol function_parameters) [84302 84306])
                ("ymax" variable nil (reparse-symbol function_parameters) [84308 84312])
                ("xmin" variable nil (reparse-symbol function_parameters) [84314 84318])
                ("xmax" variable nil (reparse-symbol function_parameters) [84322 84326])
                ("hold" variable nil (reparse-symbol function_parameters) [84330 84334])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84341 84349]))              ) nil [84290 84834])
            ("" code nil nil [84946 84960])
            ("axvline" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [84973 84974])
                ("ymin" variable nil (reparse-symbol function_parameters) [84978 84982])
                ("ymax" variable nil (reparse-symbol function_parameters) [84986 84990])
                ("hold" variable nil (reparse-symbol function_parameters) [84994 84998])
                ("kwargs" variable nil (reparse-symbol function_parameters) [85005 85013]))              ) nil [84961 85491])
            ("" code nil nil [85603 85617])
            ("axvspan" function (:arguments 
              ( ("xmin" variable nil (reparse-symbol function_parameters) [85630 85634])
                ("xmax" variable nil (reparse-symbol function_parameters) [85636 85640])
                ("ymin" variable nil (reparse-symbol function_parameters) [85642 85646])
                ("ymax" variable nil (reparse-symbol function_parameters) [85650 85654])
                ("hold" variable nil (reparse-symbol function_parameters) [85658 85662])
                ("kwargs" variable nil (reparse-symbol function_parameters) [85669 85677]))              ) nil [85618 86162])
            ("" code nil nil [86274 86284])
            ("bar" function (:arguments 
              ( ("left" variable nil (reparse-symbol function_parameters) [86293 86297])
                ("height" variable nil (reparse-symbol function_parameters) [86299 86305])
                ("width" variable nil (reparse-symbol function_parameters) [86307 86312])
                ("bottom" variable nil (reparse-symbol function_parameters) [86318 86324])
                ("hold" variable nil (reparse-symbol function_parameters) [86331 86335])
                ("data" variable nil (reparse-symbol function_parameters) [86342 86346])
                ("kwargs" variable nil (reparse-symbol function_parameters) [86353 86361]))              ) nil [86285 86882])
            ("" code nil nil [86994 87005])
            ("barh" function (:arguments 
              ( ("bottom" variable nil (reparse-symbol function_parameters) [87015 87021])
                ("width" variable nil (reparse-symbol function_parameters) [87023 87028])
                ("height" variable nil (reparse-symbol function_parameters) [87030 87036])
                ("left" variable nil (reparse-symbol function_parameters) [87042 87046])
                ("hold" variable nil (reparse-symbol function_parameters) [87053 87057])
                ("kwargs" variable nil (reparse-symbol function_parameters) [87064 87072]))              ) nil [87006 87561])
            ("" code nil nil [87673 87691])
            ("broken_barh" function (:arguments 
              ( ("xranges" variable nil (reparse-symbol function_parameters) [87708 87715])
                ("yrange" variable nil (reparse-symbol function_parameters) [87717 87723])
                ("hold" variable nil (reparse-symbol function_parameters) [87725 87729])
                ("data" variable nil (reparse-symbol function_parameters) [87736 87740])
                ("kwargs" variable nil (reparse-symbol function_parameters) [87747 87755]))              ) nil [87692 88238])
            ("" code nil nil [88350 88364])
            ("boxplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [88377 88378])
                ("notch" variable nil (reparse-symbol function_parameters) [88380 88385])
                ("sym" variable nil (reparse-symbol function_parameters) [88392 88395])
                ("vert" variable nil (reparse-symbol function_parameters) [88402 88406])
                ("whis" variable nil (reparse-symbol function_parameters) [88413 88417])
                ("positions" variable nil (reparse-symbol function_parameters) [88424 88433])
                ("widths" variable nil (reparse-symbol function_parameters) [88452 88458])
                ("patch_artist" variable nil (reparse-symbol function_parameters) [88465 88477])
                ("bootstrap" variable nil (reparse-symbol function_parameters) [88484 88493])
                ("usermedians" variable nil (reparse-symbol function_parameters) [88500 88511])
                ("conf_intervals" variable nil (reparse-symbol function_parameters) [88530 88544])
                ("meanline" variable nil (reparse-symbol function_parameters) [88551 88559])
                ("showmeans" variable nil (reparse-symbol function_parameters) [88566 88575])
                ("showcaps" variable nil (reparse-symbol function_parameters) [88582 88590])
                ("showbox" variable nil (reparse-symbol function_parameters) [88609 88616])
                ("showfliers" variable nil (reparse-symbol function_parameters) [88623 88633])
                ("boxprops" variable nil (reparse-symbol function_parameters) [88640 88648])
                ("labels" variable nil (reparse-symbol function_parameters) [88655 88661])
                ("flierprops" variable nil (reparse-symbol function_parameters) [88680 88690])
                ("medianprops" variable nil (reparse-symbol function_parameters) [88697 88708])
                ("meanprops" variable nil (reparse-symbol function_parameters) [88715 88724])
                ("capprops" variable nil (reparse-symbol function_parameters) [88731 88739])
                ("whiskerprops" variable nil (reparse-symbol function_parameters) [88758 88770])
                ("manage_xticks" variable nil (reparse-symbol function_parameters) [88777 88790])
                ("autorange" variable nil (reparse-symbol function_parameters) [88797 88806])
                ("zorder" variable nil (reparse-symbol function_parameters) [88814 88820])
                ("hold" variable nil (reparse-symbol function_parameters) [88839 88843])
                ("data" variable nil (reparse-symbol function_parameters) [88850 88854]))              ) nil [88365 90111])
            ("" code nil nil [90223 90236])
            ("cohere" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [90248 90249])
                ("y" variable nil (reparse-symbol function_parameters) [90251 90252])
                ("NFFT" variable nil (reparse-symbol function_parameters) [90254 90258])
                ("Fs" variable nil (reparse-symbol function_parameters) [90264 90266])
                ("Fc" variable nil (reparse-symbol function_parameters) [90270 90272])
                ("detrend" variable nil (reparse-symbol function_parameters) [90276 90283])
                ("window" variable nil (reparse-symbol function_parameters) [90314 90320])
                ("noverlap" variable nil (reparse-symbol function_parameters) [90342 90350])
                ("pad_to" variable nil (reparse-symbol function_parameters) [90354 90360])
                ("sides" variable nil (reparse-symbol function_parameters) [90367 90372])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [90395 90408])
                ("hold" variable nil (reparse-symbol function_parameters) [90415 90419])
                ("data" variable nil (reparse-symbol function_parameters) [90426 90430])
                ("kwargs" variable nil (reparse-symbol function_parameters) [90437 90445]))              ) nil [90237 91117])
            ("" code nil nil [91229 91242])
            ("clabel" function (:arguments 
              ( ("CS" variable nil (reparse-symbol function_parameters) [91254 91256])
                ("args" variable nil (reparse-symbol function_parameters) [91258 91263])
                ("kwargs" variable nil (reparse-symbol function_parameters) [91265 91273]))              ) nil [91243 91769])
            ("" code nil nil [91881 91895])
            ("contour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [91908 91913])
                ("kwargs" variable nil (reparse-symbol function_parameters) [91915 91923]))              ) nil [91896 92451])
            ("" code nil nil [92563 92578])
            ("contourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [92592 92597])
                ("kwargs" variable nil (reparse-symbol function_parameters) [92599 92607]))              ) nil [92579 93136])
            ("" code nil nil [93248 93258])
            ("csd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [93267 93268])
                ("y" variable nil (reparse-symbol function_parameters) [93270 93271])
                ("NFFT" variable nil (reparse-symbol function_parameters) [93273 93277])
                ("Fs" variable nil (reparse-symbol function_parameters) [93284 93286])
                ("Fc" variable nil (reparse-symbol function_parameters) [93293 93295])
                ("detrend" variable nil (reparse-symbol function_parameters) [93302 93309])
                ("window" variable nil (reparse-symbol function_parameters) [93316 93322])
                ("noverlap" variable nil (reparse-symbol function_parameters) [93337 93345])
                ("pad_to" variable nil (reparse-symbol function_parameters) [93352 93358])
                ("sides" variable nil (reparse-symbol function_parameters) [93365 93370])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [93377 93390])
                ("return_line" variable nil (reparse-symbol function_parameters) [93405 93416])
                ("hold" variable nil (reparse-symbol function_parameters) [93423 93427])
                ("data" variable nil (reparse-symbol function_parameters) [93434 93438])
                ("kwargs" variable nil (reparse-symbol function_parameters) [93445 93453]))              ) nil [93259 94138])
            ("" code nil nil [94250 94265])
            ("errorbar" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [94279 94280])
                ("y" variable nil (reparse-symbol function_parameters) [94282 94283])
                ("yerr" variable nil (reparse-symbol function_parameters) [94285 94289])
                ("xerr" variable nil (reparse-symbol function_parameters) [94296 94300])
                ("fmt" variable nil (reparse-symbol function_parameters) [94307 94310])
                ("ecolor" variable nil (reparse-symbol function_parameters) [94315 94321])
                ("elinewidth" variable nil (reparse-symbol function_parameters) [94328 94338])
                ("capsize" variable nil (reparse-symbol function_parameters) [94358 94365])
                ("barsabove" variable nil (reparse-symbol function_parameters) [94372 94381])
                ("lolims" variable nil (reparse-symbol function_parameters) [94389 94395])
                ("uplims" variable nil (reparse-symbol function_parameters) [94403 94409])
                ("xlolims" variable nil (reparse-symbol function_parameters) [94430 94437])
                ("xuplims" variable nil (reparse-symbol function_parameters) [94445 94452])
                ("errorevery" variable nil (reparse-symbol function_parameters) [94460 94470])
                ("capthick" variable nil (reparse-symbol function_parameters) [94474 94482])
                ("hold" variable nil (reparse-symbol function_parameters) [94502 94506])
                ("data" variable nil (reparse-symbol function_parameters) [94513 94517])
                ("kwargs" variable nil (reparse-symbol function_parameters) [94524 94532]))              ) nil [94266 95344])
            ("" code nil nil [95456 95472])
            ("eventplot" function (:arguments 
              ( ("positions" variable nil (reparse-symbol function_parameters) [95487 95496])
                ("orientation" variable nil (reparse-symbol function_parameters) [95498 95509])
                ("lineoffsets" variable nil (reparse-symbol function_parameters) [95524 95535])
                ("linelengths" variable nil (reparse-symbol function_parameters) [95539 95550])
                ("linewidths" variable nil (reparse-symbol function_parameters) [95568 95578])
                ("colors" variable nil (reparse-symbol function_parameters) [95585 95591])
                ("linestyles" variable nil (reparse-symbol function_parameters) [95598 95608])
                ("hold" variable nil (reparse-symbol function_parameters) [95618 95622])
                ("data" variable nil (reparse-symbol function_parameters) [95643 95647])
                ("kwargs" variable nil (reparse-symbol function_parameters) [95654 95662]))              ) nil [95473 96354])
            ("" code nil nil [96466 96477])
            ("fill" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [96487 96492])
                ("kwargs" variable nil (reparse-symbol function_parameters) [96494 96502]))              ) nil [96478 96992])
            ("" code nil nil [97104 97123])
            ("fill_between" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [97141 97142])
                ("y1" variable nil (reparse-symbol function_parameters) [97144 97146])
                ("y2" variable nil (reparse-symbol function_parameters) [97148 97150])
                ("where" variable nil (reparse-symbol function_parameters) [97154 97159])
                ("interpolate" variable nil (reparse-symbol function_parameters) [97166 97177])
                ("step" variable nil (reparse-symbol function_parameters) [97185 97189])
                ("hold" variable nil (reparse-symbol function_parameters) [97213 97217])
                ("data" variable nil (reparse-symbol function_parameters) [97224 97228])
                ("kwargs" variable nil (reparse-symbol function_parameters) [97235 97243]))              ) nil [97124 97833])
            ("" code nil nil [97945 97965])
            ("fill_betweenx" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [97984 97985])
                ("x1" variable nil (reparse-symbol function_parameters) [97987 97989])
                ("x2" variable nil (reparse-symbol function_parameters) [97991 97993])
                ("where" variable nil (reparse-symbol function_parameters) [97997 98002])
                ("step" variable nil (reparse-symbol function_parameters) [98009 98013])
                ("hold" variable nil (reparse-symbol function_parameters) [98020 98024])
                ("data" variable nil (reparse-symbol function_parameters) [98031 98035])
                ("kwargs" variable nil (reparse-symbol function_parameters) [98060 98068]))              ) nil [97966 98605])
            ("" code nil nil [98717 98730])
            ("hexbin" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [98742 98743])
                ("y" variable nil (reparse-symbol function_parameters) [98745 98746])
                ("C" variable nil (reparse-symbol function_parameters) [98748 98749])
                ("gridsize" variable nil (reparse-symbol function_parameters) [98756 98764])
                ("bins" variable nil (reparse-symbol function_parameters) [98770 98774])
                ("xscale" variable nil (reparse-symbol function_parameters) [98781 98787])
                ("yscale" variable nil (reparse-symbol function_parameters) [98809 98815])
                ("extent" variable nil (reparse-symbol function_parameters) [98826 98832])
                ("cmap" variable nil (reparse-symbol function_parameters) [98839 98843])
                ("norm" variable nil (reparse-symbol function_parameters) [98850 98854])
                ("vmin" variable nil (reparse-symbol function_parameters) [98861 98865])
                ("vmax" variable nil (reparse-symbol function_parameters) [98883 98887])
                ("alpha" variable nil (reparse-symbol function_parameters) [98894 98899])
                ("linewidths" variable nil (reparse-symbol function_parameters) [98906 98916])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [98923 98933])
                ("reduce_C_function" variable nil (reparse-symbol function_parameters) [98953 98970])
                ("mincnt" variable nil (reparse-symbol function_parameters) [98980 98986])
                ("marginals" variable nil (reparse-symbol function_parameters) [98993 99002])
                ("hold" variable nil (reparse-symbol function_parameters) [99010 99014])
                ("data" variable nil (reparse-symbol function_parameters) [99032 99036])
                ("kwargs" variable nil (reparse-symbol function_parameters) [99043 99051]))              ) nil [98731 99906])
            ("" code nil nil [100018 100029])
            ("hist" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [100039 100040])
                ("bins" variable nil (reparse-symbol function_parameters) [100042 100046])
                ("range" variable nil (reparse-symbol function_parameters) [100053 100058])
                ("normed" variable nil (reparse-symbol function_parameters) [100065 100071])
                ("weights" variable nil (reparse-symbol function_parameters) [100079 100086])
                ("cumulative" variable nil (reparse-symbol function_parameters) [100093 100103])
                ("bottom" variable nil (reparse-symbol function_parameters) [100120 100126])
                ("histtype" variable nil (reparse-symbol function_parameters) [100133 100141])
                ("align" variable nil (reparse-symbol function_parameters) [100149 100154])
                ("orientation" variable nil (reparse-symbol function_parameters) [100162 100173])
                ("rwidth" variable nil (reparse-symbol function_parameters) [100195 100201])
                ("log" variable nil (reparse-symbol function_parameters) [100208 100211])
                ("color" variable nil (reparse-symbol function_parameters) [100219 100224])
                ("label" variable nil (reparse-symbol function_parameters) [100231 100236])
                ("stacked" variable nil (reparse-symbol function_parameters) [100243 100250])
                ("hold" variable nil (reparse-symbol function_parameters) [100267 100271])
                ("data" variable nil (reparse-symbol function_parameters) [100278 100282])
                ("kwargs" variable nil (reparse-symbol function_parameters) [100289 100297]))              ) nil [100030 101065])
            ("" code nil nil [101177 101190])
            ("hist2d" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [101202 101203])
                ("y" variable nil (reparse-symbol function_parameters) [101205 101206])
                ("bins" variable nil (reparse-symbol function_parameters) [101208 101212])
                ("range" variable nil (reparse-symbol function_parameters) [101217 101222])
                ("normed" variable nil (reparse-symbol function_parameters) [101229 101235])
                ("weights" variable nil (reparse-symbol function_parameters) [101243 101250])
                ("cmin" variable nil (reparse-symbol function_parameters) [101257 101261])
                ("cmax" variable nil (reparse-symbol function_parameters) [101279 101283])
                ("hold" variable nil (reparse-symbol function_parameters) [101290 101294])
                ("data" variable nil (reparse-symbol function_parameters) [101301 101305])
                ("kwargs" variable nil (reparse-symbol function_parameters) [101312 101320]))              ) nil [101191 101929])
            ("" code nil nil [102041 102054])
            ("hlines" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [102066 102067])
                ("xmin" variable nil (reparse-symbol function_parameters) [102069 102073])
                ("xmax" variable nil (reparse-symbol function_parameters) [102075 102079])
                ("colors" variable nil (reparse-symbol function_parameters) [102081 102087])
                ("linestyles" variable nil (reparse-symbol function_parameters) [102093 102103])
                ("label" variable nil (reparse-symbol function_parameters) [102113 102118])
                ("hold" variable nil (reparse-symbol function_parameters) [102123 102127])
                ("data" variable nil (reparse-symbol function_parameters) [102145 102149])
                ("kwargs" variable nil (reparse-symbol function_parameters) [102156 102164]))              ) nil [102055 102715])
            ("" code nil nil [102827 102840])
            ("imshow" function (:arguments 
              ( ("X" variable nil (reparse-symbol function_parameters) [102852 102853])
                ("cmap" variable nil (reparse-symbol function_parameters) [102855 102859])
                ("norm" variable nil (reparse-symbol function_parameters) [102866 102870])
                ("aspect" variable nil (reparse-symbol function_parameters) [102877 102883])
                ("interpolation" variable nil (reparse-symbol function_parameters) [102890 102903])
                ("alpha" variable nil (reparse-symbol function_parameters) [102910 102915])
                ("vmin" variable nil (reparse-symbol function_parameters) [102933 102937])
                ("vmax" variable nil (reparse-symbol function_parameters) [102944 102948])
                ("origin" variable nil (reparse-symbol function_parameters) [102955 102961])
                ("extent" variable nil (reparse-symbol function_parameters) [102968 102974])
                ("shape" variable nil (reparse-symbol function_parameters) [102981 102986])
                ("filternorm" variable nil (reparse-symbol function_parameters) [103004 103014])
                ("filterrad" variable nil (reparse-symbol function_parameters) [103018 103027])
                ("imlim" variable nil (reparse-symbol function_parameters) [103033 103038])
                ("resample" variable nil (reparse-symbol function_parameters) [103045 103053])
                ("url" variable nil (reparse-symbol function_parameters) [103060 103063])
                ("hold" variable nil (reparse-symbol function_parameters) [103081 103085])
                ("data" variable nil (reparse-symbol function_parameters) [103092 103096])
                ("kwargs" variable nil (reparse-symbol function_parameters) [103103 103111]))              ) nil [102841 103936])
            ("" code nil nil [104048 104061])
            ("loglog" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [104073 104078])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104080 104088]))              ) nil [104062 104580])
            ("" code nil nil [104692 104717])
            ("magnitude_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [104741 104742])
                ("Fs" variable nil (reparse-symbol function_parameters) [104744 104746])
                ("Fc" variable nil (reparse-symbol function_parameters) [104753 104755])
                ("window" variable nil (reparse-symbol function_parameters) [104762 104768])
                ("pad_to" variable nil (reparse-symbol function_parameters) [104775 104781])
                ("sides" variable nil (reparse-symbol function_parameters) [104811 104816])
                ("scale" variable nil (reparse-symbol function_parameters) [104823 104828])
                ("hold" variable nil (reparse-symbol function_parameters) [104835 104839])
                ("data" variable nil (reparse-symbol function_parameters) [104846 104850])
                ("kwargs" variable nil (reparse-symbol function_parameters) [104857 104865]))              ) nil [104718 105483])
            ("" code nil nil [105595 105608])
            ("pcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [105620 105625])
                ("kwargs" variable nil (reparse-symbol function_parameters) [105627 105635]))              ) nil [105609 106139])
            ("" code nil nil [106251 106268])
            ("pcolormesh" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [106284 106289])
                ("kwargs" variable nil (reparse-symbol function_parameters) [106291 106299]))              ) nil [106269 106807])
            ("" code nil nil [106919 106940])
            ("phase_spectrum" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [106960 106961])
                ("Fs" variable nil (reparse-symbol function_parameters) [106963 106965])
                ("Fc" variable nil (reparse-symbol function_parameters) [106972 106974])
                ("window" variable nil (reparse-symbol function_parameters) [106981 106987])
                ("pad_to" variable nil (reparse-symbol function_parameters) [106994 107000])
                ("sides" variable nil (reparse-symbol function_parameters) [107007 107012])
                ("hold" variable nil (reparse-symbol function_parameters) [107038 107042])
                ("data" variable nil (reparse-symbol function_parameters) [107049 107053])
                ("kwargs" variable nil (reparse-symbol function_parameters) [107060 107068]))              ) nil [106941 107629])
            ("" code nil nil [107741 107751])
            ("pie" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [107760 107761])
                ("explode" variable nil (reparse-symbol function_parameters) [107763 107770])
                ("labels" variable nil (reparse-symbol function_parameters) [107777 107783])
                ("colors" variable nil (reparse-symbol function_parameters) [107790 107796])
                ("autopct" variable nil (reparse-symbol function_parameters) [107803 107810])
                ("pctdistance" variable nil (reparse-symbol function_parameters) [107825 107836])
                ("shadow" variable nil (reparse-symbol function_parameters) [107842 107848])
                ("labeldistance" variable nil (reparse-symbol function_parameters) [107856 107869])
                ("startangle" variable nil (reparse-symbol function_parameters) [107875 107885])
                ("radius" variable nil (reparse-symbol function_parameters) [107900 107906])
                ("counterclock" variable nil (reparse-symbol function_parameters) [107913 107925])
                ("wedgeprops" variable nil (reparse-symbol function_parameters) [107932 107942])
                ("textprops" variable nil (reparse-symbol function_parameters) [107949 107958])
                ("center" variable nil (reparse-symbol function_parameters) [107973 107979])
                ("frame" variable nil (reparse-symbol function_parameters) [107988 107993])
                ("hold" variable nil (reparse-symbol function_parameters) [108001 108005])
                ("data" variable nil (reparse-symbol function_parameters) [108012 108016]))              ) nil [107752 108847])
            ("" code nil nil [108959 108970])
            ("plot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [108980 108985])
                ("kwargs" variable nil (reparse-symbol function_parameters) [108987 108995]))              ) nil [108971 109485])
            ("" code nil nil [109597 109613])
            ("plot_date" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [109628 109629])
                ("y" variable nil (reparse-symbol function_parameters) [109631 109632])
                ("fmt" variable nil (reparse-symbol function_parameters) [109634 109637])
                ("tz" variable nil (reparse-symbol function_parameters) [109643 109645])
                ("xdate" variable nil (reparse-symbol function_parameters) [109652 109657])
                ("ydate" variable nil (reparse-symbol function_parameters) [109664 109669])
                ("hold" variable nil (reparse-symbol function_parameters) [109677 109681])
                ("data" variable nil (reparse-symbol function_parameters) [109702 109706])
                ("kwargs" variable nil (reparse-symbol function_parameters) [109713 109721]))              ) nil [109614 110260])
            ("" code nil nil [110372 110382])
            ("psd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [110391 110392])
                ("NFFT" variable nil (reparse-symbol function_parameters) [110394 110398])
                ("Fs" variable nil (reparse-symbol function_parameters) [110405 110407])
                ("Fc" variable nil (reparse-symbol function_parameters) [110414 110416])
                ("detrend" variable nil (reparse-symbol function_parameters) [110423 110430])
                ("window" variable nil (reparse-symbol function_parameters) [110437 110443])
                ("noverlap" variable nil (reparse-symbol function_parameters) [110458 110466])
                ("pad_to" variable nil (reparse-symbol function_parameters) [110473 110479])
                ("sides" variable nil (reparse-symbol function_parameters) [110486 110491])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [110498 110511])
                ("return_line" variable nil (reparse-symbol function_parameters) [110526 110537])
                ("hold" variable nil (reparse-symbol function_parameters) [110544 110548])
                ("data" variable nil (reparse-symbol function_parameters) [110555 110559])
                ("kwargs" variable nil (reparse-symbol function_parameters) [110566 110574]))              ) nil [110383 111256])
            ("" code nil nil [111368 111381])
            ("quiver" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [111393 111398])
                ("kw" variable nil (reparse-symbol function_parameters) [111400 111404]))              ) nil [111382 111900])
            ("" code nil nil [112012 112028])
            ("quiverkey" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [112043 112048])
                ("kw" variable nil (reparse-symbol function_parameters) [112050 112054]))              ) nil [112029 112541])
            ("" code nil nil [112653 112667])
            ("scatter" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [112680 112681])
                ("y" variable nil (reparse-symbol function_parameters) [112683 112684])
                ("s" variable nil (reparse-symbol function_parameters) [112686 112687])
                ("c" variable nil (reparse-symbol function_parameters) [112694 112695])
                ("marker" variable nil (reparse-symbol function_parameters) [112702 112708])
                ("cmap" variable nil (reparse-symbol function_parameters) [112715 112719])
                ("norm" variable nil (reparse-symbol function_parameters) [112726 112730])
                ("vmin" variable nil (reparse-symbol function_parameters) [112737 112741])
                ("vmax" variable nil (reparse-symbol function_parameters) [112760 112764])
                ("alpha" variable nil (reparse-symbol function_parameters) [112771 112776])
                ("linewidths" variable nil (reparse-symbol function_parameters) [112783 112793])
                ("verts" variable nil (reparse-symbol function_parameters) [112800 112805])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [112812 112822])
                ("hold" variable nil (reparse-symbol function_parameters) [112841 112845])
                ("data" variable nil (reparse-symbol function_parameters) [112852 112856])
                ("kwargs" variable nil (reparse-symbol function_parameters) [112863 112871]))              ) nil [112668 113567])
            ("" code nil nil [113679 113694])
            ("semilogx" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [113708 113713])
                ("kwargs" variable nil (reparse-symbol function_parameters) [113715 113723]))              ) nil [113695 114217])
            ("" code nil nil [114329 114344])
            ("semilogy" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [114358 114363])
                ("kwargs" variable nil (reparse-symbol function_parameters) [114365 114373]))              ) nil [114345 114867])
            ("" code nil nil [114979 114994])
            ("specgram" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [115008 115009])
                ("NFFT" variable nil (reparse-symbol function_parameters) [115011 115015])
                ("Fs" variable nil (reparse-symbol function_parameters) [115022 115024])
                ("Fc" variable nil (reparse-symbol function_parameters) [115031 115033])
                ("detrend" variable nil (reparse-symbol function_parameters) [115040 115047])
                ("window" variable nil (reparse-symbol function_parameters) [115054 115060])
                ("noverlap" variable nil (reparse-symbol function_parameters) [115080 115088])
                ("cmap" variable nil (reparse-symbol function_parameters) [115095 115099])
                ("xextent" variable nil (reparse-symbol function_parameters) [115106 115113])
                ("pad_to" variable nil (reparse-symbol function_parameters) [115120 115126])
                ("sides" variable nil (reparse-symbol function_parameters) [115133 115138])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [115158 115171])
                ("mode" variable nil (reparse-symbol function_parameters) [115178 115182])
                ("scale" variable nil (reparse-symbol function_parameters) [115189 115194])
                ("vmin" variable nil (reparse-symbol function_parameters) [115201 115205])
                ("vmax" variable nil (reparse-symbol function_parameters) [115212 115216])
                ("hold" variable nil (reparse-symbol function_parameters) [115236 115240])
                ("data" variable nil (reparse-symbol function_parameters) [115247 115251])
                ("kwargs" variable nil (reparse-symbol function_parameters) [115258 115266]))              ) nil [114995 116059])
            ("" code nil nil [116171 116187])
            ("stackplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [116202 116203])
                ("args" variable nil (reparse-symbol function_parameters) [116205 116210])
                ("kwargs" variable nil (reparse-symbol function_parameters) [116212 116220]))              ) nil [116188 116718])
            ("" code nil nil [116830 116841])
            ("stem" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [116851 116856])
                ("kwargs" variable nil (reparse-symbol function_parameters) [116858 116866]))              ) nil [116842 117356])
            ("" code nil nil [117468 117479])
            ("step" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [117489 117490])
                ("y" variable nil (reparse-symbol function_parameters) [117492 117493])
                ("args" variable nil (reparse-symbol function_parameters) [117495 117500])
                ("kwargs" variable nil (reparse-symbol function_parameters) [117502 117510]))              ) nil [117480 118006])
            ("" code nil nil [118118 118135])
            ("streamplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [118151 118152])
                ("y" variable nil (reparse-symbol function_parameters) [118154 118155])
                ("u" variable nil (reparse-symbol function_parameters) [118157 118158])
                ("v" variable nil (reparse-symbol function_parameters) [118160 118161])
                ("density" variable nil (reparse-symbol function_parameters) [118163 118170])
                ("linewidth" variable nil (reparse-symbol function_parameters) [118174 118183])
                ("color" variable nil (reparse-symbol function_parameters) [118190 118195])
                ("cmap" variable nil (reparse-symbol function_parameters) [118202 118206])
                ("norm" variable nil (reparse-symbol function_parameters) [118228 118232])
                ("arrowsize" variable nil (reparse-symbol function_parameters) [118239 118248])
                ("arrowstyle" variable nil (reparse-symbol function_parameters) [118252 118262])
                ("minlength" variable nil (reparse-symbol function_parameters) [118270 118279])
                ("transform" variable nil (reparse-symbol function_parameters) [118300 118309])
                ("zorder" variable nil (reparse-symbol function_parameters) [118316 118322])
                ("start_points" variable nil (reparse-symbol function_parameters) [118329 118341])
                ("hold" variable nil (reparse-symbol function_parameters) [118348 118352])
                ("data" variable nil (reparse-symbol function_parameters) [118374 118378]))              ) nil [118136 119181])
            ("" code nil nil [119293 119310])
            ("tricontour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [119326 119331])
                ("kwargs" variable nil (reparse-symbol function_parameters) [119333 119341]))              ) nil [119311 119872])
            ("" code nil nil [119984 120002])
            ("tricontourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [120019 120024])
                ("kwargs" variable nil (reparse-symbol function_parameters) [120026 120034]))              ) nil [120003 120566])
            ("" code nil nil [120678 120694])
            ("tripcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [120709 120714])
                ("kwargs" variable nil (reparse-symbol function_parameters) [120716 120724]))              ) nil [120695 121231])
            ("" code nil nil [121343 121357])
            ("triplot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [121370 121375])
                ("kwargs" variable nil (reparse-symbol function_parameters) [121377 121385]))              ) nil [121358 121878])
            ("" code nil nil [121990 122007])
            ("violinplot" function (:arguments 
              ( ("dataset" variable nil (reparse-symbol function_parameters) [122023 122030])
                ("positions" variable nil (reparse-symbol function_parameters) [122032 122041])
                ("vert" variable nil (reparse-symbol function_parameters) [122048 122052])
                ("widths" variable nil (reparse-symbol function_parameters) [122059 122065])
                ("showmeans" variable nil (reparse-symbol function_parameters) [122071 122080])
                ("showextrema" variable nil (reparse-symbol function_parameters) [122103 122114])
                ("showmedians" variable nil (reparse-symbol function_parameters) [122121 122132])
                ("points" variable nil (reparse-symbol function_parameters) [122140 122146])
                ("bw_method" variable nil (reparse-symbol function_parameters) [122152 122161])
                ("hold" variable nil (reparse-symbol function_parameters) [122183 122187])
                ("data" variable nil (reparse-symbol function_parameters) [122194 122198]))              ) nil [122008 122905])
            ("" code nil nil [123017 123030])
            ("vlines" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [123042 123043])
                ("ymin" variable nil (reparse-symbol function_parameters) [123045 123049])
                ("ymax" variable nil (reparse-symbol function_parameters) [123051 123055])
                ("colors" variable nil (reparse-symbol function_parameters) [123057 123063])
                ("linestyles" variable nil (reparse-symbol function_parameters) [123069 123079])
                ("label" variable nil (reparse-symbol function_parameters) [123089 123094])
                ("hold" variable nil (reparse-symbol function_parameters) [123099 123103])
                ("data" variable nil (reparse-symbol function_parameters) [123121 123125])
                ("kwargs" variable nil (reparse-symbol function_parameters) [123132 123140]))              ) nil [123031 123691])
            ("" code nil nil [123803 123815])
            ("xcorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [123826 123827])
                ("y" variable nil (reparse-symbol function_parameters) [123829 123830])
                ("normed" variable nil (reparse-symbol function_parameters) [123832 123838])
                ("detrend" variable nil (reparse-symbol function_parameters) [123845 123852])
                ("usevlines" variable nil (reparse-symbol function_parameters) [123872 123881])
                ("maxlags" variable nil (reparse-symbol function_parameters) [123898 123905])
                ("hold" variable nil (reparse-symbol function_parameters) [123910 123914])
                ("data" variable nil (reparse-symbol function_parameters) [123921 123925])
                ("kwargs" variable nil (reparse-symbol function_parameters) [123932 123940]))              ) nil [123816 124522])
            ("" code nil nil [124634 124646])
            ("barbs" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [124657 124662])
                ("kw" variable nil (reparse-symbol function_parameters) [124664 124668]))              ) nil [124647 125151])
            ("" code nil nil [125266 125276])
            ("cla" function nil nil [125277 125325])
            ("" code nil nil [125440 125451])
            ("grid" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [125461 125462])
                ("which" variable nil (reparse-symbol function_parameters) [125469 125474])
                ("axis" variable nil (reparse-symbol function_parameters) [125484 125488])
                ("kwargs" variable nil (reparse-symbol function_parameters) [125497 125505]))              ) nil [125452 125583])
            ("" code nil nil [125698 125711])
            ("legend" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [125723 125728])
                ("kwargs" variable nil (reparse-symbol function_parameters) [125730 125738]))              ) nil [125712 125796])
            ("" code nil nil [125911 125923])
            ("table" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [125934 125942]))              ) nil [125924 125992])
            ("" code nil nil [126107 126118])
            ("text" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [126128 126129])
                ("y" variable nil (reparse-symbol function_parameters) [126131 126132])
                ("s" variable nil (reparse-symbol function_parameters) [126134 126135])
                ("fontdict" variable nil (reparse-symbol function_parameters) [126137 126145])
                ("withdash" variable nil (reparse-symbol function_parameters) [126152 126160])
                ("kwargs" variable nil (reparse-symbol function_parameters) [126168 126176]))              ) nil [126119 126272])
            ("" code nil nil [126387 126402])
            ("annotate" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [126416 126421])
                ("kwargs" variable nil (reparse-symbol function_parameters) [126423 126431]))              ) nil [126403 126491])
            ("" code nil nil [126606 126629])
            ("ticklabel_format" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [126651 126659]))              ) nil [126630 126720])
            ("" code nil nil [126835 126856])
            ("locator_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [126876 126880])
                ("tight" variable nil (reparse-symbol function_parameters) [126889 126894])
                ("kwargs" variable nil (reparse-symbol function_parameters) [126901 126909]))              ) nil [126857 126992])
            ("" code nil nil [127107 127125])
            ("tick_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [127142 127146])
                ("kwargs" variable nil (reparse-symbol function_parameters) [127155 127163]))              ) nil [127126 127230])
            ("" code nil nil [127345 127359])
            ("margins" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [127372 127377])
                ("kw" variable nil (reparse-symbol function_parameters) [127379 127383]))              ) nil [127360 127438])
            ("" code nil nil [127553 127569])
            ("autoscale" function (:arguments 
              ( ("enable" variable nil (reparse-symbol function_parameters) [127584 127590])
                ("axis" variable nil (reparse-symbol function_parameters) [127597 127601])
                ("tight" variable nil (reparse-symbol function_parameters) [127610 127615]))              ) nil [127570 127703])
            ("autumn" function nil nil [127796 128046])
            ("bone" function nil nil [128140 128382])
            ("cool" function nil nil [128476 128718])
            ("copper" function nil nil [128812 129062])
            ("flag" function nil nil [129156 129398])
            ("gray" function nil nil [129492 129734])
            ("hot" function nil nil [129828 130066])
            ("hsv" function nil nil [130160 130398])
            ("jet" function nil nil [130492 130730])
            ("pink" function nil nil [130824 131066])
            ("prism" function nil nil [131160 131406])
            ("spring" function nil nil [131500 131750])
            ("summer" function nil nil [131844 132094])
            ("winter" function nil nil [132188 132438])
            ("magma" function nil nil [132532 132778])
            ("inferno" function nil nil [132872 133126])
            ("plasma" function nil nil [133220 133470])
            ("viridis" function nil nil [133564 133818])
            ("nipy_spectral" function nil nil [133912 134190])
            ("spectral" function nil nil [134284 134739])
            ("_setup_pyplot_info_docstrings" code nil nil [134740 134771]))          
      :file "pyplot.py"
      :pointmax 134772
      :fsize 134771
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((NAME 16015 . 16023) (IF 16043 . 16045) (ELSE 16054 . 16058) (FROM 2132 . 2136) (PERIOD 2137 . 2138)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("'''
Colorbar toolkit with two classes and a function:

    :class:`ColorbarBase`
        the base class with full colorbar drawing functionality.
        It can be used as-is to make a colorbar for a given colormap;
        a mappable object (e.g., image) is not needed.

    :class:`Colorbar`
        the derived class for use with images or contour plots.

    :func:`make_axes`
        a function for resizing an axes and adding a second axes
        suitable for a colorbar

The :meth:`~matplotlib.figure.Figure.colorbar` method uses :func:`make_axes`
and :class:`Colorbar`; the :func:`~matplotlib.pyplot.colorbar` function
is a thin wrapper over :meth:`~matplotlib.figure.Figure.colorbar`.

'''" code nil nil [1 700])
            ("" code nil nil [724 809])
            ("six" include nil nil [811 821])
            ("six.moves" include nil nil [822 855])
            ("warnings" include nil nil [857 872])
            ("numpy" include nil nil [874 892])
            ("matplotlib" include nil nil [894 918])
            ("matplotlib.artist" include nil nil [919 954])
            ("matplotlib.cbook" include nil nil [955 987])
            ("matplotlib.collections" include nil nil [988 1032])
            ("matplotlib.colors" include nil nil [1033 1067])
            ("matplotlib.contour" include nil nil [1068 1104])
            ("matplotlib.cm" include nil nil [1105 1131])
            ("matplotlib.gridspec" include nil nil [1132 1170])
            ("matplotlib.patches" include nil nil [1171 1208])
            ("matplotlib.path" include nil nil [1209 1240])
            ("matplotlib.ticker" include nil nil [1241 1275])
            ("matplotlib.transforms" include nil nil [1276 1314])
            ("matplotlib" include nil nil [1316 1348])
            ("make_axes_kw_doc" variable nil nil [1350 2314])
            ("colormap_kw_doc" variable nil nil [2316 5751])
            ("colorbar_doc" code nil nil [5753 8501])
            ("docstring" code nil nil [8503 8554])
            ("_set_ticks_on_axis_warn" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [8585 8590])
                ("kw" variable nil (reparse-symbol function_parameters) [8592 8596]))              ) nil [8557 8764])
            ("ColorbarBase" type
               (:superclasses ("cm.ScalarMappable")
                :members 
                  ( ("'''
    Draw a colorbar in an existing axes.

    This is a base class for the :class:`Colorbar` class, which is the
    basis for the :func:`~matplotlib.pyplot.colorbar` function and the
    :meth:`~matplotlib.figure.Figure.colorbar` method, which are the
    usual ways of creating a colorbar.

    It is also useful by itself for showing a colormap.  If the *cmap*
    kwarg is given but *boundaries* and *values* are left as None,
    then the colormap will be displayed on a 0-1 scale. To show the
    under- and over-value colors, specify the *norm* as::

        colors.Normalize(clip=False)

    To show the colors versus index instead of on the 0-1 scale,
    use::

        norm=colors.NoNorm.

    Useful attributes:

        :attr:`ax`
            the Axes instance in which the colorbar is drawn

        :attr:`lines`
            a list of LineCollection if lines were drawn, otherwise
            an empty list

        :attr:`dividers`
            a LineCollection if *drawedges* is True, otherwise None

    Useful public methods are :meth:`set_label` and :meth:`add_lines`.

    '''" code nil (reparse-symbol indented_block_body) [8809 9909])
                    ("_slice_dict" variable nil (reparse-symbol indented_block_body) [9914 10078])
                    ("n_rasterize" variable nil (reparse-symbol indented_block_body) [10084 10100])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10789 10801])
                            ("self" code nil (reparse-symbol indented_block_body) [10810 10826])
                            ("if" code nil (reparse-symbol indented_block_body) [10835 10885])
                            ("if" code nil (reparse-symbol indented_block_body) [10893 10948])
                            ("self" variable nil (reparse-symbol indented_block_body) [10956 10974])
                            ("cm" code nil (reparse-symbol indented_block_body) [10983 11037])
                            ("self" variable nil (reparse-symbol indented_block_body) [11046 11066])
                            ("self" variable nil (reparse-symbol indented_block_body) [11075 11103])
                            ("self" variable nil (reparse-symbol indented_block_body) [11112 11132])
                            ("self" variable nil (reparse-symbol indented_block_body) [11141 11180])
                            ("self" variable nil (reparse-symbol indented_block_body) [11189 11211])
                            ("self" variable nil (reparse-symbol indented_block_body) [11220 11250])
                            ("self" variable nil (reparse-symbol indented_block_body) [11259 11285])
                            ("self" variable nil (reparse-symbol indented_block_body) [11294 11314])
                            ("self" variable nil (reparse-symbol indented_block_body) [11323 11351])
                            ("self" variable nil (reparse-symbol indented_block_body) [11360 11388])
                            ("self" variable nil (reparse-symbol indented_block_body) [11397 11415])
                            ("self" variable nil (reparse-symbol indented_block_body) [11424 11443])
                            ("self" variable nil (reparse-symbol indented_block_body) [11452 11471])
                            ("self" variable nil (reparse-symbol indented_block_body) [11480 11497])
                            ("self" variable nil (reparse-symbol indented_block_body) [11506 11526])
                            ("if" code nil (reparse-symbol indented_block_body) [11536 11643])
                            ("self" variable nil (reparse-symbol indented_block_body) [11651 11683])
                            ("self" code nil (reparse-symbol indented_block_body) [11693 11714])
                            ("if" code nil (reparse-symbol indented_block_body) [11723 11901])
                            ("if" code nil (reparse-symbol indented_block_body) [11909 12503])
                            ("self" code nil (reparse-symbol indented_block_body) [12586 12604])
                            ("self" code nil (reparse-symbol indented_block_body) [12613 12628]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10174 10178])
                            ("ax" variable nil (reparse-symbol function_parameters) [10180 10182])
                            ("cmap" variable nil (reparse-symbol function_parameters) [10184 10188])
                            ("norm" variable nil (reparse-symbol function_parameters) [10212 10216])
                            ("alpha" variable nil (reparse-symbol function_parameters) [10240 10245])
                            ("values" variable nil (reparse-symbol function_parameters) [10269 10275])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [10299 10309])
                            ("orientation" variable nil (reparse-symbol function_parameters) [10333 10344])
                            ("ticklocation" variable nil (reparse-symbol function_parameters) [10374 10386])
                            ("extend" variable nil (reparse-symbol function_parameters) [10412 10418])
                            ("spacing" variable nil (reparse-symbol function_parameters) [10447 10454])
                            ("ticks" variable nil (reparse-symbol function_parameters) [10510 10515])
                            ("format" variable nil (reparse-symbol function_parameters) [10539 10545])
                            ("drawedges" variable nil (reparse-symbol function_parameters) [10569 10578])
                            ("filled" variable nil (reparse-symbol function_parameters) [10603 10609])
                            ("extendfrac" variable nil (reparse-symbol function_parameters) [10633 10643])
                            ("extendrect" variable nil (reparse-symbol function_parameters) [10667 10677])
                            ("label" variable nil (reparse-symbol function_parameters) [10702 10707]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10161 12629])
                    ("_extend_lower" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12652 12656]))                          
                        :documentation "Returns whether the lower limit is open ended.")
                        (reparse-symbol indented_block_body) [12634 12766])
                    ("_extend_upper" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12789 12793]))                          
                        :documentation "Returns whether the uper limit is open ended.")
                        (reparse-symbol indented_block_body) [12771 12902])
                    ("_patch_ax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12921 12925]))                          )
                        (reparse-symbol indented_block_body) [12907 13127])
                    ("draw_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13145 13149]))                          )
                        (reparse-symbol indented_block_body) [13132 13502])
                    ("config_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13523 13527]))                          )
                        (reparse-symbol indented_block_body) [13507 14057])
                    ("update_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14079 14083]))                          
                        :documentation "
        Force the update of the ticks and ticklabels. This must be
        called whenever the tick locator and/or tick formatter changes.
        ")
                        (reparse-symbol indented_block_body) [14062 14700])
                    ("set_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14719 14723])
                            ("ticks" variable nil (reparse-symbol function_parameters) [14725 14730])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [14732 14744]))                          
                        :documentation "
        set tick locations. Tick locations are updated immediately unless
        update_ticks is *False*. To manually update the ticks, call
        *update_ticks* method explicitly.
        ")
                        (reparse-symbol indented_block_body) [14705 15197])
                    ("set_ticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15221 15225])
                            ("ticklabels" variable nil (reparse-symbol function_parameters) [15227 15237])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [15239 15251]))                          
                        :documentation "
        set tick labels. Tick labels are updated immediately unless
        update_ticks is *False*. To manually update the ticks, call
        *update_ticks* method explicitly.
        ")
                        (reparse-symbol indented_block_body) [15202 15751])
                    ("_config_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15773 15777])
                            ("X" variable nil (reparse-symbol function_parameters) [15779 15780])
                            ("Y" variable nil (reparse-symbol function_parameters) [15782 15783]))                          )
                        (reparse-symbol indented_block_body) [15756 16882])
                    ("_set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16902 16906]))                          )
                        (reparse-symbol indented_block_body) [16887 17114])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17133 17137])
                            ("label" variable nil (reparse-symbol function_parameters) [17139 17144])
                            ("kw" variable nil (reparse-symbol function_parameters) [17146 17150]))                          )
                        (reparse-symbol indented_block_body) [17119 17313])
                    ("_outline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17331 17335])
                            ("X" variable nil (reparse-symbol function_parameters) [17337 17338])
                            ("Y" variable nil (reparse-symbol function_parameters) [17340 17341]))                          )
                        (reparse-symbol indented_block_body) [17318 17849])
                    ("_edges" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17865 17869])
                            ("X" variable nil (reparse-symbol function_parameters) [17871 17872])
                            ("Y" variable nil (reparse-symbol function_parameters) [17874 17875]))                          )
                        (reparse-symbol indented_block_body) [17854 18302])
                    ("_add_solids" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18323 18327])
                            ("X" variable nil (reparse-symbol function_parameters) [18329 18330])
                            ("Y" variable nil (reparse-symbol function_parameters) [18332 18333])
                            ("C" variable nil (reparse-symbol function_parameters) [18335 18336]))                          )
                        (reparse-symbol indented_block_body) [18307 19813])
                    ("add_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19832 19836])
                            ("levels" variable nil (reparse-symbol function_parameters) [19838 19844])
                            ("colors" variable nil (reparse-symbol function_parameters) [19846 19852])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [19854 19864])
                            ("erase" variable nil (reparse-symbol function_parameters) [19866 19871]))                          )
                        (reparse-symbol indented_block_body) [19818 20992])
                    ("_ticker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21009 21013]))                          )
                        (reparse-symbol indented_block_body) [20997 23553])
                    ("_process_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23578 23582])
                            ("b" variable nil (reparse-symbol function_parameters) [23584 23585]))                          )
                        (reparse-symbol indented_block_body) [23558 26936])
                    ("_find_range" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26957 26961]))                          )
                        (reparse-symbol indented_block_body) [26941 27209])
                    ("_central_N" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27229 27233]))                          )
                        (reparse-symbol indented_block_body) [27214 27471])
                    ("_extended_N" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27492 27496]))                          )
                        (reparse-symbol indented_block_body) [27476 27776])
                    ("_get_extension_lengths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27808 27812])
                            ("frac" variable nil (reparse-symbol function_parameters) [27814 27818])
                            ("automin" variable nil (reparse-symbol function_parameters) [27820 27827])
                            ("automax" variable nil (reparse-symbol function_parameters) [27829 27836])
                            ("default" variable nil (reparse-symbol function_parameters) [27838 27845]))                          )
                        (reparse-symbol indented_block_body) [27781 29017])
                    ("_uniform_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29037 29041])
                            ("N" variable nil (reparse-symbol function_parameters) [29043 29044]))                          )
                        (reparse-symbol indented_block_body) [29022 29992])
                    ("_proportional_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30017 30021]))                          )
                        (reparse-symbol indented_block_body) [29997 31479])
                    ("_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31494 31498]))                          )
                        (reparse-symbol indented_block_body) [31484 32164])
                    ("_locate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32181 32185])
                            ("x" variable nil (reparse-symbol function_parameters) [32187 32188]))                          )
                        (reparse-symbol indented_block_body) [32169 33153])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33172 33176])
                            ("alpha" variable nil (reparse-symbol function_parameters) [33178 33183]))                          )
                        (reparse-symbol indented_block_body) [33158 33213])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33229 33233]))                          
                        :documentation "
        Remove this colorbar from the figure
        ")
                        (reparse-symbol indented_block_body) [33218 33364]))                  
                :type "class")
                nil [8766 33364])
            ("Colorbar" type
               (:documentation "
    This class connects a :class:`ColorbarBase` to a
    :class:`~matplotlib.cm.ScalarMappable` such as a
    :class:`~matplotlib.image.AxesImage` generated via
    :meth:`~matplotlib.axes.Axes.imshow`.

    It is not intended to be instantiated directly; instead,
    use :meth:`~matplotlib.figure.Figure.colorbar` or
    :func:`~matplotlib.pyplot.colorbar` to make your colorbar.

    "
                :superclasses ("ColorbarBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("mappable" code nil (reparse-symbol indented_block_body) [33981 34006])
                            ("self" variable nil (reparse-symbol indented_block_body) [34016 34040])
                            ("kw" variable nil (reparse-symbol indented_block_body) [34049 34082])
                            ("kw" variable nil (reparse-symbol indented_block_body) [34091 34124])
                            ("if" code nil (reparse-symbol indented_block_body) [34134 34937]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33812 33816])
                            ("ax" variable nil (reparse-symbol function_parameters) [33818 33820])
                            ("mappable" variable nil (reparse-symbol function_parameters) [33822 33830])
                            ("kw" variable nil (reparse-symbol function_parameters) [33832 33836]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33799 34937])
                    ("on_mappable_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34966 34970])
                            ("mappable" variable nil (reparse-symbol function_parameters) [34972 34980]))                          
                        :documentation "
        Updates this colorbar to match the mappable's properties.

        Typically this is automatically registered as an event handler
        by :func:`colorbar_factory` and should not be called manually.

        ")
                        (reparse-symbol indented_block_body) [34942 35340])
                    ("add_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35359 35363])
                            ("CS" variable nil (reparse-symbol function_parameters) [35365 35367])
                            ("erase" variable nil (reparse-symbol function_parameters) [35369 35374]))                          )
                        (reparse-symbol indented_block_body) [35345 36431])
                    ("update_normal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36454 36458])
                            ("mappable" variable nil (reparse-symbol function_parameters) [36460 36468]))                          )
                        (reparse-symbol indented_block_body) [36436 36905])
                    ("update_bruteforce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36932 36936])
                            ("mappable" variable nil (reparse-symbol function_parameters) [36938 36946]))                          )
                        (reparse-symbol indented_block_body) [36910 38054])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38431 38435]))                          
                        :documentation "
        Remove this colorbar from the figure.  If the colorbar was created with
        ``use_gridspec=True`` then restore the gridspec to its previous value.
        ")
                        (reparse-symbol indented_block_body) [38420 39275]))                  
                :type "class")
                nil [33366 39275])
            ("" code nil nil [39300 39318])
            ("make_axes" function (:arguments 
              ( ("parents" variable nil (reparse-symbol function_parameters) [39333 39340])
                ("location" variable nil (reparse-symbol function_parameters) [39342 39350])
                ("orientation" variable nil (reparse-symbol function_parameters) [39357 39368])
                ("fraction" variable nil (reparse-symbol function_parameters) [39375 39383])
                ("shrink" variable nil (reparse-symbol function_parameters) [39404 39410])
                ("aspect" variable nil (reparse-symbol function_parameters) [39416 39422])
                ("kw" variable nil (reparse-symbol function_parameters) [39427 39431]))              ) nil [39319 44287])
            ("" code nil nil [44312 44330])
            ("make_axes_gridspec" function (:arguments 
              ( ("parent" variable nil (reparse-symbol function_parameters) [44354 44360])
                ("kw" variable nil (reparse-symbol function_parameters) [44362 44366]))              ) nil [44331 47428])
            ("ColorbarPatch" type
               (:documentation "
    A Colorbar which is created using :class:`~matplotlib.patches.Patch`
    rather than the default :func:`~matplotlib.axes.pcolor`.

    It uses a list of Patch instances instead of a
    :class:`~matplotlib.collections.PatchCollection` because the
    latter does not allow the hatch pattern to vary among the
    members of the collection.
    "
                :superclasses ("Colorbar")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [48037 48061])
                            ("Colorbar" code nil (reparse-symbol indented_block_body) [48070 48113]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47838 47842])
                            ("ax" variable nil (reparse-symbol function_parameters) [47844 47846])
                            ("mappable" variable nil (reparse-symbol function_parameters) [47848 47856])
                            ("kw" variable nil (reparse-symbol function_parameters) [47858 47862]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47825 48114])
                    ("_add_solids" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48135 48139])
                            ("X" variable nil (reparse-symbol function_parameters) [48141 48142])
                            ("Y" variable nil (reparse-symbol function_parameters) [48144 48145])
                            ("C" variable nil (reparse-symbol function_parameters) [48147 48148]))                          
                        :documentation "
        Draw the colors using :class:`~matplotlib.patches.Patch`;
        optionally add separators.
        ")
                        (reparse-symbol indented_block_body) [48119 50055]))                  
                :type "class")
                nil [47430 50055])
            ("colorbar_factory" function
               (:documentation "
    Creates a colorbar on the given axes for the given mappable.

    Typically, for automatic colorbar placement given only a mappable use
    :meth:`~matplotlib.figure.Figure.colorbar`.

    "
                :arguments 
                  ( ("cax" variable nil (reparse-symbol function_parameters) [50078 50081])
                    ("mappable" variable nil (reparse-symbol function_parameters) [50083 50091])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [50093 50101]))                  )
                nil [50057 50794]))          
      :file "colorbar.py"
      :pointmax 50794
      :fsize 50793
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((NAME 40772 . 40780) (IF 40791 . 40793) (ELSE 40820 . 40824) (NAME 11575 . 11587) (IF 11599 . 11601) (ELSE 11630 . 11634)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A collection of utility functions and classes.  Originally, many
(but not all) were from the Python Cookbook -- hence the name cbook.

This module is safe to import from anywhere within matplotlib;
it imports matplotlib only at runtime.
\"\"\"" code nil nil [1 245])
            ("" code nil nil [270 355])
            ("six" include nil nil [357 367])
            ("six.moves" include nil nil [368 401])
            ("itertools" include nil nil [402 430])
            ("collections" include nil nil [431 449])
            ("datetime" include nil nil [450 465])
            ("errno" include nil nil [466 478])
            ("functools" include nil nil [479 507])
            ("glob" include nil nil [508 519])
            ("gzip" include nil nil [520 531])
            ("io" include nil nil [532 541])
            ("locale" include nil nil [542 555])
            ("os" include nil nil [556 565])
            ("re" include nil nil [566 575])
            ("sys" include nil nil [576 586])
            ("time" include nil nil [587 598])
            ("traceback" include nil nil [599 615])
            ("types" include nil nil [616 628])
            ("warnings" include nil nil [629 644])
            ("weakref" include nil nil [645 687])
            ("numpy" include nil nil [689 707])
            ("numpy.ma" include nil nil [708 729])
            ("MatplotlibDeprecationWarning" type
               (:documentation "
    A class for issuing deprecation warnings for Matplotlib users.

    In light of the fact that Python builtin DeprecationWarnings are ignored
    by default as of Python 2.7 (see link below), this class was put in to
    allow for the signaling of deprecation, but via UserWarnings which are not
    ignored by default.

    https://docs.python.org/dev/whatsnew/2.7.html#the-future-for-python-2-x
    "
                :superclasses ("UserWarning")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1201 1205]))                  
                :type "class")
                nil [732 1206])
            ("mplDeprecation" variable nil nil [1207 1252])
            ("_generate_deprecation_message" function (:arguments 
              ( ("since" variable nil (reparse-symbol function_parameters) [1289 1294])
                ("message" variable nil (reparse-symbol function_parameters) [1296 1303])
                ("name" variable nil (reparse-symbol function_parameters) [1308 1312])
                ("alternative" variable nil (reparse-symbol function_parameters) [1351 1362])
                ("pending" variable nil (reparse-symbol function_parameters) [1367 1374])
                ("obj_type" variable nil (reparse-symbol function_parameters) [1416 1424]))              ) nil [1255 2088])
            ("warn_deprecated" function
               (:documentation "
    Used to display deprecation warning in a standard way.

    Parameters
    ----------
    since : str
        The release at which this API became deprecated.

    message : str, optional
        Override the default deprecation message.  The format
        specifier `%(func)s` may be used for the name of the function,
        and `%(alternative)s` may be used in the deprecation message
        to insert the name of an alternative to the deprecated
        function.  `%(obj_type)` may be used to insert a friendly name
        for the type of object being deprecated.

    name : str, optional
        The name of the deprecated function; if not provided the name
        is automatically determined from the passed in function,
        though this is useful in the case of renamed functions, where
        the new function is just assigned to the name of the
        deprecated function.  For example::

            def new_function():
                ...
            oldFunction = new_function

    alternative : str, optional
        An alternative function that the user may use in place of the
        deprecated function.  The deprecation warning will tell the user about
        this alternative if provided.

    pending : bool, optional
        If True, uses a PendingDeprecationWarning instead of a
        DeprecationWarning.

    obj_type : str, optional
        The object type being deprecated.

    Examples
    --------

        Basic example::

            # To warn of the deprecation of \"matplotlib.name_of_module\"
            warn_deprecated('1.4.0', name='matplotlib.name_of_module',
                            obj_type='module')

    "
                :arguments 
                  ( ("since" variable nil (reparse-symbol function_parameters) [2119 2124])
                    ("message" variable nil (reparse-symbol function_parameters) [2126 2133])
                    ("name" variable nil (reparse-symbol function_parameters) [2138 2142])
                    ("alternative" variable nil (reparse-symbol function_parameters) [2147 2158])
                    ("pending" variable nil (reparse-symbol function_parameters) [2163 2170])
                    ("obj_type" variable nil (reparse-symbol function_parameters) [2186 2194]))                  )
                nil [2090 4052])
            ("deprecated" function
               (:documentation "
    Decorator to mark a function as deprecated.

    Parameters
    ----------
    since : str
        The release at which this API became deprecated.  This is
        required.

    message : str, optional
        Override the default deprecation message.  The format
        specifier `%(func)s` may be used for the name of the function,
        and `%(alternative)s` may be used in the deprecation message
        to insert the name of an alternative to the deprecated
        function.  `%(obj_type)` may be used to insert a friendly name
        for the type of object being deprecated.

    name : str, optional
        The name of the deprecated function; if not provided the name
        is automatically determined from the passed in function,
        though this is useful in the case of renamed functions, where
        the new function is just assigned to the name of the
        deprecated function.  For example::

            def new_function():
                ...
            oldFunction = new_function

    alternative : str, optional
        An alternative function that the user may use in place of the
        deprecated function.  The deprecation warning will tell the user about
        this alternative if provided.

    pending : bool, optional
        If True, uses a PendingDeprecationWarning instead of a
        DeprecationWarning.

    Examples
    --------

        Basic example::

            @deprecated('1.4.0')
            def the_function_to_deprecate():
                pass

    "
                :arguments 
                  ( ("since" variable nil (reparse-symbol function_parameters) [4069 4074])
                    ("message" variable nil (reparse-symbol function_parameters) [4076 4083])
                    ("name" variable nil (reparse-symbol function_parameters) [4088 4092])
                    ("alternative" variable nil (reparse-symbol function_parameters) [4097 4108])
                    ("pending" variable nil (reparse-symbol function_parameters) [4113 4120])
                    ("obj_type" variable nil (reparse-symbol function_parameters) [4143 4151]))                  )
                nil [4054 7095])
            ("unicode_safe" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [7544 7545]))              ) nil [7527 8079])
            ("converter" type
               (:documentation "
    Base class for handling string -> python type with support for
    missing values
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8273 8295])
                            ("self" variable nil (reparse-symbol indented_block_body) [8304 8332]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8225 8229])
                            ("missing" variable nil (reparse-symbol function_parameters) [8231 8238])
                            ("missingval" variable nil (reparse-symbol function_parameters) [8247 8257]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8212 8333])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8351 8355])
                            ("s" variable nil (reparse-symbol function_parameters) [8357 8358]))                          )
                        (reparse-symbol indented_block_body) [8338 8443])
                    ("is_missing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8463 8467])
                            ("s" variable nil (reparse-symbol function_parameters) [8469 8470]))                          )
                        (reparse-symbol indented_block_body) [8448 8523]))                  
                :type "class")
                nil [8081 8523])
            ("tostr" type
               (:documentation "convert to string or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("converter" code nil (reparse-symbol indented_block_body) [8648 8712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8602 8606])
                            ("missing" variable nil (reparse-symbol function_parameters) [8608 8615])
                            ("missingval" variable nil (reparse-symbol function_parameters) [8624 8634]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8589 8713]))                  
                :type "class")
                nil [8525 8713])
            ("todatetime" type
               (:documentation "convert to a datetime or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("'use a :func:`time.strptime` format string for conversion'" code nil (reparse-symbol indented_block_body) [8865 8923])
                            ("converter" code nil (reparse-symbol indented_block_body) [8932 8977])
                            ("self" variable nil (reparse-symbol indented_block_body) [8986 9000]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8801 8805])
                            ("fmt" variable nil (reparse-symbol function_parameters) [8807 8810])
                            ("missing" variable nil (reparse-symbol function_parameters) [8823 8830])
                            ("missingval" variable nil (reparse-symbol function_parameters) [8839 8849]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8788 9001])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9019 9023])
                            ("s" variable nil (reparse-symbol function_parameters) [9025 9026]))                          )
                        (reparse-symbol indented_block_body) [9006 9179]))                  
                :type "class")
                nil [8715 9179])
            ("todate" type
               (:documentation "convert to a date or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"use a :func:`time.strptime` format string for conversion\"\"\"" code nil (reparse-symbol indented_block_body) [9323 9385])
                            ("converter" code nil (reparse-symbol indented_block_body) [9394 9439])
                            ("self" variable nil (reparse-symbol indented_block_body) [9448 9462]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9259 9263])
                            ("fmt" variable nil (reparse-symbol function_parameters) [9265 9268])
                            ("missing" variable nil (reparse-symbol function_parameters) [9281 9288])
                            ("missingval" variable nil (reparse-symbol function_parameters) [9297 9307]))                          
                        :documentation "use a :func:`time.strptime` format string for conversion"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9246 9463])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9481 9485])
                            ("s" variable nil (reparse-symbol function_parameters) [9487 9488]))                          )
                        (reparse-symbol indented_block_body) [9468 9637]))                  
                :type "class")
                nil [9181 9637])
            ("tofloat" type
               (:documentation "convert to a float or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("converter" code nil (reparse-symbol indented_block_body) [9767 9800])
                            ("self" variable nil (reparse-symbol indented_block_body) [9809 9837]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9719 9723])
                            ("missing" variable nil (reparse-symbol function_parameters) [9725 9732])
                            ("missingval" variable nil (reparse-symbol function_parameters) [9741 9751]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9706 9838])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9856 9860])
                            ("s" variable nil (reparse-symbol function_parameters) [9862 9863]))                          )
                        (reparse-symbol indented_block_body) [9843 9956]))                  
                :type "class")
                nil [9639 9956])
            ("toint" type
               (:documentation "convert to an int or None"
                :superclasses ("converter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("converter" code nil (reparse-symbol indented_block_body) [10083 10116]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10035 10039])
                            ("missing" variable nil (reparse-symbol function_parameters) [10041 10048])
                            ("missingval" variable nil (reparse-symbol function_parameters) [10057 10067]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10022 10117])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10135 10139])
                            ("s" variable nil (reparse-symbol function_parameters) [10141 10142]))                          )
                        (reparse-symbol indented_block_body) [10122 10233]))                  
                :type "class")
                nil [9958 10233])
            ("_BoundMethodProxy" type
               (:documentation "
    Our own proxy object which enables weak references to bound and unbound
    methods and arbitrary callables. Pulls information about the function,
    class, and instance out of a bound method. Stores a weak reference to the
    instance to support garbage collection.

    @organization: IBM Corporation
    @copyright: Copyright (c) 2005, 2006 IBM Corporation
    @license: The BSD License

    Minor bugfixes by Michael Droettboom
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10758 10779])
                            ("self" variable nil (reparse-symbol indented_block_body) [10788 10816])
                            ("try" code nil (reparse-symbol indented_block_body) [10825 11417]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10739 10743])
                            ("cb" variable nil (reparse-symbol function_parameters) [10745 10747]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10726 11417])
                    ("add_destroy_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11447 11451])
                            ("callback" variable nil (reparse-symbol function_parameters) [11453 11461]))                          )
                        (reparse-symbol indented_block_body) [11422 11532])
                    ("_destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11550 11554])
                            ("wk" variable nil (reparse-symbol function_parameters) [11556 11558]))                          )
                        (reparse-symbol indented_block_body) [11537 11714])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11736 11740]))                          )
                        (reparse-symbol indented_block_body) [11719 11911])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11933 11937])
                            ("statedict" variable nil (reparse-symbol function_parameters) [11939 11948]))                          )
                        (reparse-symbol indented_block_body) [11916 12121])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12139 12143])
                            ("args" variable nil (reparse-symbol function_parameters) [12145 12150])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12152 12160]))                          
                        :documentation "
        Proxy for a call to the weak referenced object. Take
        arbitrary params to pass to the callable.

        Raises `ReferenceError`: When the weak reference refers to
        a dead object
        ")
                        (reparse-symbol indented_block_body) [12126 12857])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12873 12877])
                            ("other" variable nil (reparse-symbol function_parameters) [12879 12884]))                          
                        :documentation "
        Compare the held function and instance with that held by
        another proxy.
        ")
                        (reparse-symbol indented_block_body) [12862 13264])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13280 13284])
                            ("other" variable nil (reparse-symbol function_parameters) [13286 13291]))                          
                        :documentation "
        Inverse of __eq__.
        ")
                        (reparse-symbol indented_block_body) [13269 13383])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13401 13405]))                          )
                        (reparse-symbol indented_block_body) [13388 13434]))                  
                :type "class")
                nil [10235 13434])
            ("CallbackRegistry" type
               (:documentation "
    Handle registering and disconnecting for a set of signals and
    callbacks:

        >>> def oneat(x):
        ...    print('eat', x)
        >>> def ondrink(x):
        ...    print('drink', x)

        >>> from matplotlib.cbook import CallbackRegistry
        >>> callbacks = CallbackRegistry()

        >>> id_eat = callbacks.connect('eat', oneat)
        >>> id_drink = callbacks.connect('drink', ondrink)

        >>> callbacks.process('drink', 123)
        drink 123
        >>> callbacks.process('eat', 456)
        eat 456
        >>> callbacks.process('be merry', 456) # nothing will be called
        >>> callbacks.disconnect(id_eat)
        >>> callbacks.process('eat', 456)      # nothing will be called

    In practice, one should always disconnect all callbacks when they
    are no longer needed to avoid dangling references (and thus memory
    leaks).  However, real code in matplotlib rarely does so, and due
    to its design, it is rather difficult to place this kind of code.
    To get around this, and prevent this class of memory leaks, we
    instead store weak references to bound methods only, so when the
    destination object needs to die, the CallbackRegistry won't keep
    it alive.  The Python stdlib weakref module can not create weak
    references to bound methods directly, so we need to create a proxy
    object to handle weak references to bound methods (or regular free
    functions).  This technique was shared by Peter Parente on his
    `\"Mindtrove\" blog
    <http://mindtrove.info/python-weak-references/>`_.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15078 15101])
                            ("self" variable nil (reparse-symbol indented_block_body) [15110 15123])
                            ("self" variable nil (reparse-symbol indented_block_body) [15132 15155]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15063 15067]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15050 15156])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15663 15667]))                          )
                        (reparse-symbol indented_block_body) [15646 15690])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15712 15716])
                            ("state" variable nil (reparse-symbol function_parameters) [15718 15723]))                          )
                        (reparse-symbol indented_block_body) [15695 15750])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15767 15771])
                            ("s" variable nil (reparse-symbol function_parameters) [15773 15774])
                            ("func" variable nil (reparse-symbol function_parameters) [15776 15780]))                          
                        :documentation "
        register *func* to be called when a signal *s* is generated
        func will be called
        ")
                        (reparse-symbol indented_block_body) [15755 16459])
                    ("_remove_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16482 16486])
                            ("proxy" variable nil (reparse-symbol function_parameters) [16488 16493]))                          )
                        (reparse-symbol indented_block_body) [16464 16834])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16854 16858])
                            ("cid" variable nil (reparse-symbol function_parameters) [16860 16863]))                          
                        :documentation "
        disconnect the callback registered with callback id *cid*
        ")
                        (reparse-symbol indented_block_body) [16839 17451])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17468 17472])
                            ("s" variable nil (reparse-symbol function_parameters) [17474 17475])
                            ("args" variable nil (reparse-symbol function_parameters) [17477 17482])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17484 17492]))                          
                        :documentation "
        process signal *s*.  All of the functions registered to receive
        callbacks on *s* will be called with *\\*args* and *\\*\\*kwargs*
        ")
                        (reparse-symbol indented_block_body) [17456 17913]))                  
                :type "class")
                nil [13436 17913])
            ("silent_list" type
               (:documentation "
    override repr when returning a list of matplotlib artists to
    prevent long, meaningless output.  This is meant to be used for a
    homogeneous list of a given type
    "
                :superclasses ("list")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [18176 18192])
                            ("if" code nil (reparse-symbol indented_block_body) [18201 18250]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18145 18149])
                            ("type" variable nil (reparse-symbol function_parameters) [18151 18155])
                            ("seq" variable nil (reparse-symbol function_parameters) [18157 18160]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18132 18250])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18268 18272]))                          )
                        (reparse-symbol indented_block_body) [18255 18343])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18360 18364]))                          )
                        (reparse-symbol indented_block_body) [18348 18393])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18415 18419]))                          )
                        (reparse-symbol indented_block_body) [18398 18529])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18551 18555])
                            ("state" variable nil (reparse-symbol function_parameters) [18557 18562]))                          )
                        (reparse-symbol indented_block_body) [18534 18633]))                  
                :type "class")
                nil [17915 18633])
            ("IgnoredKeywordWarning" type
               (:documentation "
    A class for issuing warnings about keyword arguments that will be ignored
    by matplotlib
    "
                :superclasses ("UserWarning")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [18793 18797]))                  
                :type "class")
                nil [18635 18798])
            ("local_over_kwdict" function
               (:documentation "
    Enforces the priority of a local variable over potentially conflicting
    argument(s) from a kwargs dict. The following possible output values are
    considered in order of priority:

        local_var > kwargs[keys[0]] > ... > kwargs[keys[-1]]

    The first of these whose value is not None will be returned. If all are
    None then None will be returned. Each key in keys will be removed from the
    kwargs dict in place.

    Parameters
    ----------
        local_var: any object
            The local variable (highest priority)

        kwargs: dict
            Dictionary of keyword arguments; modified in place

        keys: str(s)
            Name(s) of keyword arguments to process, in descending order of
            priority

    Returns
    -------
        out: any object
            Either local_var or one of kwargs[key] for key in keys

    Raises
    ------
        IgnoredKeywordWarning
            For each key in keys that is removed from kwargs but not used as
            the output value

    "
                :arguments 
                  ( ("local_var" variable nil (reparse-symbol function_parameters) [18822 18831])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [18833 18839])
                    ("keys" variable nil (reparse-symbol function_parameters) [18841 18846]))                  )
                nil [18800 20229])
            ("strip_math" function
               (:documentation "remove latex formatting from mathtext"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [20246 20247]))                  )
                nil [20231 82145])
            ("this" code nil nil [82206 82210])
            ("\"\"\"


class Locked(object):
    \"\"\"" code nil nil [82318 82353]))          
      :file "cbook.py"
      :pointmax 83918
      :fsize 83917
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((INDENT_BLOCK 82354 . 83918) (AND 82145 . 82148) (NAME 82068 . 82076) ($EOI 83918 . 83918) (INDENT_BLOCK 55947 . 62989) (INDENT_BLOCK 55911 . 55947) (DEDENT 55851 . 55851) (DEF 55851 . 55854) (LPAREN 55868 . 55869) (NEWLINE 53144 . 53145) (COLON 53143 . 53144) (RPAREN 53142 . 53143) (MULT 53137 . 53138) (DEDENT 53112 . 53112) (DEF 53112 . 53115) (LPAREN 53136 . 53137) (NEWLINE 52734 . 52735) (COLON 52733 . 52734) (RPAREN 52732 . 52733) (DEDENT 52707 . 52707) (DEF 52707 . 52710) (LPAREN 52727 . 52728) (NEWLINE 52281 . 52282) (COLON 52280 . 52281) (RPAREN 52279 . 52280) (DEDENT 52239 . 52239) (DEF 52239 . 52242) (LPAREN 52270 . 52271) (NEWLINE 48641 . 48642) (COLON 48640 . 48641) (RPAREN 48639 . 48640) (DEDENT 48619 . 48619) (CLASS 48619 . 48624) (LPAREN 48632 . 48633) (NEWLINE 46349 . 46350) (COLON 46348 . 46349) (RPAREN 46347 . 46348) (DEDENT 46280 . 46280) (DEF 46280 . 46283) (LPAREN 46296 . 46297) (FROM 46128 . 46132) (PERIOD 46133 . 46134) (NEWLINE 44802 . 44803) (COLON 44801 . 44802) (RPAREN 44800 . 44801) (DEDENT 44774 . 44774) (CLASS 44774 . 44779) (LPAREN 44793 . 44794) (NEWLINE 44254 . 44255) (COLON 44253 . 44254) (RPAREN 44252 . 44253) (DEDENT 44215 . 44215) (DEF 44215 . 44218) (LPAREN 44238 . 44239) (NEWLINE 44053 . 44054) (COLON 44052 . 44053) (RPAREN 44051 . 44052) (DEDENT 44023 . 44023) (DEF 44023 . 44026) (LPAREN 44042 . 44043) (NEWLINE 43781 . 43782) (COLON 43780 . 43781) (RPAREN 43779 . 43780) (MULT 43774 . 43775) (DEF 43762 . 43765) (LPAREN 43773 . 43774) (NEWLINE 41901 . 41902) (COLON 41876 . 41877) (RPAREN 41875 . 41876) (DEDENT 41854 . 41854) (DEF 41854 . 41857) (LPAREN 41871 . 41872) (NEWLINE 41660 . 41661) (COLON 41659 . 41660) (RPAREN 41658 . 41659) (DEDENT 41633 . 41633) (DEF 41633 . 41636) (LPAREN 41650 . 41651) (NEWLINE 41499 . 41500) (COLON 41498 . 41499) (RPAREN 41497 . 41498) (DEDENT 41479 . 41479) (DEF 41479 . 41482) (LPAREN 41495 . 41496) (NEWLINE 41055 . 41056) (COLON 41054 . 41055) (RPAREN 41053 . 41054) (DEDENT 41021 . 41021) (DEF 41021 . 41024) (LPAREN 41032 . 41033) (NEWLINE 40950 . 40951) (COLON 40949 . 40950) (RPAREN 40948 . 40949) (DEDENT 40934 . 40934) (DEF 40934 . 40937) (LPAREN 40944 . 40945) (NEWLINE 38398 . 38399) (COLON 38397 . 38398) (RPAREN 38396 . 38397) (DEDENT 38378 . 38378) (CLASS 38378 . 38383) (LPAREN 38389 . 38390) (NEWLINE 37831 . 37832) (COLON 37830 . 37831) (RPAREN 37829 . 37830) (DEDENT 37811 . 37811) (CLASS 37811 . 37816) (LPAREN 37824 . 37825) (NEWLINE 37457 . 37458) (COLON 37456 . 37457) (RPAREN 37455 . 37456) (DEDENT 37441 . 37441) (DEF 37441 . 37444) (LPAREN 37453 . 37454) (NEWLINE 37210 . 37211) (COLON 37209 . 37210) (RPAREN 37208 . 37209) (DEDENT 37193 . 37193) (DEF 37193 . 37196) (LPAREN 37204 . 37205) (NEWLINE 36948 . 36949) (COLON 36947 . 36948) (RPAREN 36946 . 36947) (DEDENT 36931 . 36931) (DEF 36931 . 36934) (LPAREN 36942 . 36943) (NEWLINE 36623 . 36624) (COLON 36622 . 36623) (RPAREN 36621 . 36622) (DEDENT 36605 . 36605) (DEF 36605 . 36608) (LPAREN 36617 . 36618) (NEWLINE 36417 . 36418) (COLON 36416 . 36417) (RPAREN 36415 . 36416) (DEDENT 36388 . 36388) (DEF 36388 . 36391) (LPAREN 36408 . 36409) (NEWLINE 36189 . 36190) (COLON 36188 . 36189) (RPAREN 36187 . 36188) (DEDENT 36166 . 36166) (DEF 36166 . 36169) (LPAREN 36176 . 36177) (NEWLINE 35723 . 35724) (COLON 35722 . 35723) (RPAREN 35721 . 35722) (DEDENT 35690 . 35690) (DEF 35690 . 35693) (LPAREN 35716 . 35717) (NEWLINE 34868 . 34869) (COLON 34867 . 34868) (RPAREN 34866 . 34867) (DEDENT 34805 . 34805) (DEF 34805 . 34808) (LPAREN 34818 . 34819) (NEWLINE 33487 . 33488) (COLON 33486 . 33487) (RPAREN 33485 . 33486) (LPAREN 33483 . 33484) (NEWLINE 33470 . 33471) (RBRACE 33469 . 33470) (LBRACE 33468 . 33469) (NEWLINE 33389 . 33390) (RPAREN 33388 . 33389) (DEDENT 33333 . 33333) (NAME 33333 . 33351) (LPAREN 33364 . 33365) (NEWLINE 32605 . 32606) (COLON 32604 . 32605) (RPAREN 32603 . 32604) (DEDENT 32576 . 32576) (DEF 32576 . 32579) (LPAREN 32584 . 32585) (NEWLINE 32180 . 32181) (COLON 32179 . 32180) (RPAREN 32178 . 32179) (DEDENT 32154 . 32154) (DEF 32154 . 32157) (LPAREN 32171 . 32172) (NEWLINE 31137 . 31138) (COLON 31136 . 31137) (RPAREN 31135 . 31136) (DEDENT 31112 . 31112) (CLASS 31112 . 31117) (LPAREN 31128 . 31129) (NEWLINE 30948 . 30949) (COLON 30947 . 30948) (RPAREN 30946 . 30947) (LPAREN 30938 . 30939) (NEWLINE 30920 . 30921) (RPAREN 30919 . 30920) (DEDENT 30876 . 30876) (NAME 30876 . 30897) (LPAREN 30918 . 30919) (NEWLINE 30393 . 30394) (COLON 30392 . 30393) (RPAREN 30391 . 30392) (DEDENT 30360 . 30360) (CLASS 30360 . 30365) (LPAREN 30384 . 30385) (INDENT_BLOCK 30289 . 30359) (NEWLINE 30288 . 30289) (COLON 30287 . 30288) (TRY 30204 . 30207) (AS 30275 . 30277) (NEWLINE 29897 . 29898) (COLON 29896 . 29897) (RPAREN 29895 . 29896) (DEDENT 29866 . 29866) (DEF 29866 . 29869) (LPAREN 29876 . 29877) (NEWLINE 29293 . 29294) (COLON 29292 . 29293) (RPAREN 29291 . 29292) (DEDENT 29274 . 29274) (CLASS 29274 . 29279) (LPAREN 29284 . 29285) (NEWLINE 28466 . 28467) (COLON 28465 . 28466) (RPAREN 28464 . 28465) (DEDENT 28441 . 28441) (DEF 28441 . 28444) (LPAREN 28452 . 28453) (NEWLINE 27617 . 27618) (COLON 27616 . 27617) (RPAREN 27615 . 27616) (DEDENT 27598 . 27598) (CLASS 27598 . 27603) (LPAREN 27610 . 27611) (NEWLINE 26375 . 26376) (COLON 26374 . 26375) (RPAREN 26373 . 26374) (DEDENT 26354 . 26354) (CLASS 26354 . 26359) (LPAREN 26366 . 26367) (NEWLINE 25752 . 25753) (COLON 25751 . 25752) (RPAREN 25750 . 25751) (DEDENT 25706 . 25706) (DEF 25706 . 25709) (LPAREN 25717 . 25718) (NEWLINE 24567 . 24568) (COLON 24566 . 24567) (RPAREN 24565 . 24566) (DEDENT 24524 . 24524) (DEF 24524 . 24527) (LPAREN 24543 . 24544) (NEWLINE 24327 . 24328) (COLON 24326 . 24327) (RPAREN 24325 . 24326) (DEDENT 24304 . 24304) (DEF 24304 . 24307) (LPAREN 24323 . 24324) (NEWLINE 24179 . 24180) (COLON 24178 . 24179) (RPAREN 24177 . 24178) (DEDENT 24150 . 24150) (DEF 24150 . 24153) (LPAREN 24173 . 24174) (NEWLINE 23280 . 23281) (COLON 23279 . 23280) (RPAREN 23278 . 23279) (DEDENT 23223 . 23223) (DEF 23223 . 23226) (LPAREN 23240 . 23241) (NEWLINE 23081 . 23082) (COLON 23080 . 23081) (RPAREN 23079 . 23080) (DEDENT 23061 . 23061) (DEF 23061 . 23064) (LPAREN 23075 . 23076) (NEWLINE 22931 . 22932) (COLON 22930 . 22931) (RPAREN 22929 . 22930) (DEDENT 22912 . 22912) (DEF 22912 . 22915) (LPAREN 22925 . 22926) (NEWLINE 22690 . 22691) (COLON 22689 . 22690) (RPAREN 22688 . 22689) (DEDENT 22661 . 22661) (DEF 22661 . 22664) (LPAREN 22686 . 22687) (NEWLINE 22519 . 22520) (COLON 22518 . 22519) (RPAREN 22517 . 22518) (DEDENT 22488 . 22488) (DEF 22488 . 22491) (LPAREN 22513 . 22514) (NEWLINE 22353 . 22354) (COLON 22352 . 22353) (RPAREN 22351 . 22352) (DEDENT 22332 . 22332) (DEF 22332 . 22335) (LPAREN 22347 . 22348) (NEWLINE 21937 . 21938) (COLON 21936 . 21937) (RPAREN 21935 . 21936) (DEDENT 21905 . 21905) (DEF 21905 . 21908) (LPAREN 21931 . 21932) (NEWLINE 21508 . 21509) (COLON 21507 . 21508) (RPAREN 21506 . 21507) (DEDENT 21484 . 21484) (DEF 21484 . 21487) (LPAREN 21502 . 21503) (NEWLINE 21352 . 21353) (COLON 21351 . 21352) (RPAREN 21350 . 21351) (DEDENT 21334 . 21334) (DEF 21334 . 21337) (LPAREN 21346 . 21347) (NEWLINE 21220 . 21221) (COLON 21219 . 21220) (RPAREN 21218 . 21219) (DEDENT 21206 . 21206) (DEF 21206 . 21209) (LPAREN 21216 . 21217) (NEWLINE 20479 . 20480) (COLON 20478 . 20479) (RPAREN 20477 . 20478) (DEDENT 20459 . 20459) (CLASS 20459 . 20464) (LPAREN 20470 . 20471)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Abstract base classes define the primitives that renderers and
graphics contexts must implement to serve as a matplotlib backend

:class:`RendererBase`
    An abstract base class to handle drawing/rendering operations.

:class:`FigureCanvasBase`
    The abstraction layer that separates the
    :class:`matplotlib.figure.Figure` from the backend specific
    details like a user interface drawing area

:class:`GraphicsContextBase`
    An abstract base class that provides color, line styles, etc...

:class:`Event`
    The base class for all of the matplotlib event
    handling.  Derived classes such as :class:`KeyEvent` and
    :class:`MouseEvent` store the meta data like keys and buttons
    pressed, x and y locations in pixel and
    :class:`~matplotlib.axes.Axes` coordinates.

:class:`ShowBase`
    The base class for the Show class of each interactive backend;
    the 'show' callable is then set to Show.__call__, inherited from
    ShowBase.

:class:`ToolContainerBase`
     The base class for the Toolbar class of each interactive backend.

:class:`StatusbarBase`
    The base class for the messaging area.
\"\"\"" code nil nil [1 1129])
            ("" code nil nil [1154 1239])
            ("contextlib" include nil nil [1240 1277])
            ("six" include nil nil [1279 1289])
            ("six.moves" include nil nil [1290 1318])
            ("os" include nil nil [1320 1329])
            ("sys" include nil nil [1330 1340])
            ("warnings" include nil nil [1341 1356])
            ("time" include nil nil [1357 1368])
            ("io" include nil nil [1369 1378])
            ("numpy" include nil nil [1380 1398])
            ("matplotlib.cbook" include nil nil [1399 1431])
            ("matplotlib.colors" include nil nil [1432 1466])
            ("matplotlib.transforms" include nil nil [1467 1509])
            ("matplotlib.widgets" include nil nil [1510 1546])
            ("matplotlib" include nil nil [1579 1610])
            ("matplotlib" include nil nil [1611 1648])
            ("matplotlib" include nil nil [1649 1683])
            ("matplotlib._pylab_helpers" include nil nil [1684 1725])
            ("matplotlib" include nil nil [1726 1754])
            ("matplotlib.transforms" include nil nil [1756 1821])
            ("matplotlib.tight_bbox" include nil nil [1823 1865])
            ("matplotlib.textpath" include nil nil [1866 1904])
            ("matplotlib.path" include nil nil [1905 1937])
            ("matplotlib.cbook" include nil nil [1938 1998])
            ("matplotlib.backend_tools" include nil nil [1999 2039])
            ("try" code nil nil [2041 2242])
            ("try" code nil nil [2243 2349])
            ("_default_filetypes" variable nil nil [2351 2688])
            ("_default_backends" variable nil nil [2691 3127])
            ("register_backend" function
               (:documentation "
    Register a backend for saving to a given file format.

    format : str
        File extention

    backend : module string or canvas class
        Backend for handling file output

    description : str, optional
        Description of the file type.  Defaults to an empty string
    "
                :arguments 
                  ( ("format" variable nil (reparse-symbol function_parameters) [3151 3157])
                    ("backend" variable nil (reparse-symbol function_parameters) [3159 3166])
                    ("description" variable nil (reparse-symbol function_parameters) [3168 3179]))                  )
                nil [3130 3626])
            ("get_registered_canvas_class" function
               (:documentation "
    Return the registered default canvas for given file format.
    Handles deferred import of required backend.
    "
                :arguments 
                  ( ("format" variable nil (reparse-symbol function_parameters) [3660 3666]))                  )
                nil [3628 4089])
            ("ShowBase" type
               (:documentation "
    Simple base class to generate a show() callable in backends.

    Subclass must override mainloop() method.
    "
                :superclasses ("object")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4260 4264])
                            ("block" variable nil (reparse-symbol function_parameters) [4266 4271]))                          
                        :documentation "
        Show all figures.  If *block* is not None, then
        it is a boolean that overrides all other factors
        determining whether show blocks by calling mainloop().
        The other factors are:
        it does not block if run inside ipython's \"%pylab\" mode
        it does not block in interactive mode.
        ")
                        (reparse-symbol indented_block_body) [4247 5845])
                    ("mainloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5863 5867]))                          )
                        (reparse-symbol indented_block_body) [5850 5883]))                  
                :type "class")
                nil [4091 5883])
            ("RendererBase" type
               (:documentation "An abstract base class to handle drawing/rendering operations.

    The following methods must be implemented in the backend for full
    functionality (though just implementing :meth:`draw_path` alone would
    give a highly capable backend):

    * :meth:`draw_path`
    * :meth:`draw_image`
    * :meth:`draw_gouraud_triangle`

    The following methods *should* be implemented in the backend for
    optimization reasons:

    * :meth:`draw_text`
    * :meth:`draw_markers`
    * :meth:`draw_path_collection`
    * :meth:`draw_quad_mesh`

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6503 6526])
                            ("self" variable nil (reparse-symbol indented_block_body) [6536 6575]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6488 6492]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6475 6576])
                    ("open_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6596 6600])
                            ("s" variable nil (reparse-symbol function_parameters) [6602 6603])
                            ("gid" variable nil (reparse-symbol function_parameters) [6605 6608]))                          
                        :documentation "
        Open a grouping element with label *s*. If *gid* is given, use
        *gid* as the id of the group. Is only currently used by
        :mod:`~matplotlib.backends.backend_svg`.
        ")
                        (reparse-symbol indented_block_body) [6581 6837])
                    ("close_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6858 6862])
                            ("s" variable nil (reparse-symbol function_parameters) [6864 6865]))                          
                        :documentation "
        Close a grouping element with label *s*
        Is only currently used by :mod:`~matplotlib.backends.backend_svg`
        ")
                        (reparse-symbol indented_block_body) [6842 7027])
                    ("draw_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7046 7050])
                            ("gc" variable nil (reparse-symbol function_parameters) [7052 7054])
                            ("path" variable nil (reparse-symbol function_parameters) [7056 7060])
                            ("transform" variable nil (reparse-symbol function_parameters) [7062 7071])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [7073 7080]))                          
                        :documentation "
        Draws a :class:`~matplotlib.path.Path` instance using the
        given affine transform.
        ")
                        (reparse-symbol indented_block_body) [7032 7244])
                    ("draw_markers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7266 7270])
                            ("gc" variable nil (reparse-symbol function_parameters) [7272 7274])
                            ("marker_path" variable nil (reparse-symbol function_parameters) [7276 7287])
                            ("marker_trans" variable nil (reparse-symbol function_parameters) [7289 7301])
                            ("path" variable nil (reparse-symbol function_parameters) [7303 7307])
                            ("trans" variable nil (reparse-symbol function_parameters) [7330 7335])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [7337 7344]))                          
                        :documentation "
        Draws a marker at each of the vertices in path.  This includes
        all vertices, including control points on curves.  To avoid
        that behavior, those vertices should be removed before calling
        this function.

        *gc*
            the :class:`GraphicsContextBase` instance

        *marker_trans*
            is an affine transform applied to the marker.

        *trans*
             is an affine transform applied to the path.

        This provides a fallback implementation of draw_markers that
        makes multiple calls to :meth:`draw_path`.  Some backends may
        want to override this method in order to draw the marker only
        once and reuse it multiple times.
        ")
                        (reparse-symbol indented_block_body) [7249 8430])
                    ("draw_path_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8460 8464])
                            ("gc" variable nil (reparse-symbol function_parameters) [8466 8468])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [8470 8486])
                            ("paths" variable nil (reparse-symbol function_parameters) [8488 8493])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [8495 8509])
                            ("offsets" variable nil (reparse-symbol function_parameters) [8540 8547])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [8549 8560])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [8562 8572])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [8574 8584])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [8615 8625])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [8627 8637])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [8639 8651])
                            ("urls" variable nil (reparse-symbol function_parameters) [8653 8657])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [8688 8703]))                          
                        :documentation "
        Draws a collection of paths selecting drawing properties from
        the lists *facecolors*, *edgecolors*, *linewidths*,
        *linestyles* and *antialiaseds*. *offsets* is a list of
        offsets to apply to each of the paths.  The offsets in
        *offsets* are first transformed by *offsetTrans* before being
        applied.  *offset_position* may be either \"screen\" or \"data\"
        depending on the space that the offsets are in.

        This provides a fallback implementation of
        :meth:`draw_path_collection` that makes multiple calls to
        :meth:`draw_path`.  Some backends may want to override this in
        order to render each set of path data only once, and then
        reference that path multiple times with the different offsets,
        colors, styles etc.  The generator methods
        :meth:`_iter_collection_raw_paths` and
        :meth:`_iter_collection` are provided to help with (and
        standardize) the implementation across backends.  It is highly
        recommended to use those generators, so that changes to the
        behavior of :meth:`draw_path_collection` can be made globally.
        ")
                        (reparse-symbol indented_block_body) [8435 10568])
                    ("draw_quad_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10592 10596])
                            ("gc" variable nil (reparse-symbol function_parameters) [10598 10600])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [10602 10618])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [10620 10629])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [10631 10641])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [10666 10677])
                            ("offsets" variable nil (reparse-symbol function_parameters) [10679 10686])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [10688 10699])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [10701 10711])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [10736 10747])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [10749 10759]))                          
                        :documentation "
        This provides a fallback implementation of
        :meth:`draw_quad_mesh` that generates paths and then calls
        :meth:`draw_path_collection`.
        ")
                        (reparse-symbol indented_block_body) [10573 11417])
                    ("draw_gouraud_triangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11448 11452])
                            ("gc" variable nil (reparse-symbol function_parameters) [11454 11456])
                            ("points" variable nil (reparse-symbol function_parameters) [11458 11464])
                            ("colors" variable nil (reparse-symbol function_parameters) [11466 11472])
                            ("transform" variable nil (reparse-symbol function_parameters) [11474 11483]))                          
                        :documentation "
        Draw a Gouraud-shaded triangle.

        *points* is a 3x2 array of (x, y) points for the triangle.

        *colors* is a 3x4 array of RGBA colors for each point of the
        triangle.

        *transform* is an affine transform to apply to the points.
        ")
                        (reparse-symbol indented_block_body) [11422 11808])
                    ("draw_gouraud_triangles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11840 11844])
                            ("gc" variable nil (reparse-symbol function_parameters) [11846 11848])
                            ("triangles_array" variable nil (reparse-symbol function_parameters) [11850 11865])
                            ("colors_array" variable nil (reparse-symbol function_parameters) [11867 11879])
                            ("transform" variable nil (reparse-symbol function_parameters) [11912 11921]))                          
                        :documentation "
        Draws a series of Gouraud triangles.

        *points* is a Nx3x2 array of (x, y) points for the trianglex.

        *colors* is a Nx3x4 array of RGBA colors for each point of the
        triangles.

        *transform* is an affine transform to apply to the points.
        ")
                        (reparse-symbol indented_block_body) [11813 12386])
                    ("_iter_collection_raw_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12422 12426])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [12428 12444])
                            ("paths" variable nil (reparse-symbol function_parameters) [12446 12451])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [12488 12502]))                          
                        :documentation "
        This is a helper method (along with :meth:`_iter_collection`) to make
        it easier to write a space-efficent :meth:`draw_path_collection`
        implementation in a backend.

        This method yields all of the base path/transform
        combinations, given a master transform, a list of paths and
        list of transforms.

        The arguments should be exactly what is passed in to
        :meth:`draw_path_collection`.

        The backend should take each yielded path and transform and
        create an object that can be referenced (reused) later.
        ")
                        (reparse-symbol indented_block_body) [12391 13524])
                    ("_iter_collection_uses_per_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13564 13568])
                            ("paths" variable nil (reparse-symbol function_parameters) [13570 13575])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [13577 13591])
                            ("offsets" variable nil (reparse-symbol function_parameters) [13632 13639])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [13641 13651])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [13653 13663]))                          
                        :documentation "
        Compute how many times each raw path object returned by
        _iter_collection_raw_paths would be used when calling
        _iter_collection. This is intended for the backend to decide
        on the tradeoff between using the paths in-line and storing
        them once and reusing. Rounds up in case the number of uses
        is not the same for every path.
        ")
                        (reparse-symbol indented_block_body) [13529 14327])
                    ("_iter_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14353 14357])
                            ("gc" variable nil (reparse-symbol function_parameters) [14359 14361])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [14363 14379])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [14381 14395])
                            ("path_ids" variable nil (reparse-symbol function_parameters) [14422 14430])
                            ("offsets" variable nil (reparse-symbol function_parameters) [14432 14439])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [14441 14452])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [14454 14464])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [14491 14501])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [14503 14513])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [14515 14525])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [14552 14564])
                            ("urls" variable nil (reparse-symbol function_parameters) [14566 14570])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [14572 14587]))                          
                        :documentation "
        This is a helper method (along with
        :meth:`_iter_collection_raw_paths`) to make it easier to write
        a space-efficent :meth:`draw_path_collection` implementation in a
        backend.

        This method yields all of the path, offset and graphics
        context combinations to draw the path collection.  The caller
        should already have looped over the results of
        :meth:`_iter_collection_raw_paths` to draw this collection.

        The arguments should be the same as that passed into
        :meth:`draw_path_collection`, with the exception of
        *path_ids*, which is a list of arbitrary objects that the
        backend will use to reference one of the paths created in the
        :meth:`_iter_collection_raw_paths` stage.

        Each yielded result is of the form::

           xo, yo, path_id, gc, rgbFace

        where *xo*, *yo* is an offset; *path_id* is one of the elements of
        *path_ids*; *gc* is a graphics context and *rgbFace* is a color to
        use for filling the path.
        ")
                        (reparse-symbol indented_block_body) [14332 18049])
                    ("get_image_magnification" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18082 18086]))                          
                        :documentation "
        Get the factor by which to magnify images passed to :meth:`draw_image`.
        Allows a backend to have images at a different resolution to other
        artists.
        ")
                        (reparse-symbol indented_block_body) [18054 18304])
                    ("draw_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18324 18328])
                            ("gc" variable nil (reparse-symbol function_parameters) [18330 18332])
                            ("x" variable nil (reparse-symbol function_parameters) [18334 18335])
                            ("y" variable nil (reparse-symbol function_parameters) [18337 18338])
                            ("im" variable nil (reparse-symbol function_parameters) [18340 18342])
                            ("transform" variable nil (reparse-symbol function_parameters) [18344 18353]))                          
                        :documentation "
        Draw an RGBA image.

        *gc*
            a :class:`GraphicsContextBase` instance with clipping information.

        *x*
            the distance in physical units (i.e., dots or pixels) from the left
            hand side of the canvas.

        *y*
            the distance in physical units (i.e., dots or pixels) from the
            bottom side of the canvas.

        *im*
            An NxMx4 array of RGBA pixels (of dtype uint8).

        *transform*
            If and only if the concrete backend is written such that
            :meth:`option_scale_image` returns ``True``, an affine
            transformation *may* be passed to :meth:`draw_image`. It takes the
            form of a :class:`~matplotlib.transforms.Affine2DBase` instance.
            The translation vector of the transformation is given in physical
            units (i.e., dots or pixels). Note that the transformation does not
            override `x` and `y`, and has to be applied *before* translating
            the result by `x` and `y` (this can be accomplished by adding `x`
            and `y` to the translation vector defined by `transform`).
        ")
                        (reparse-symbol indented_block_body) [18309 19568])
                    ("option_image_nocomposite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19602 19606]))                          
                        :documentation "
        override this method for renderers that do not necessarily always
        want to rescale and composite raster images. (like SVG, PDF, or PS)
        ")
                        (reparse-symbol indented_block_body) [19573 19804])
                    ("option_scale_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19832 19836]))                          
                        :documentation "
        override this method for renderers that support arbitrary affine
        transformations in :meth:`draw_image` (most vector backends).
        ")
                        (reparse-symbol indented_block_body) [19809 20027])
                    ("draw_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20045 20049])
                            ("gc" variable nil (reparse-symbol function_parameters) [20051 20053])
                            ("x" variable nil (reparse-symbol function_parameters) [20055 20056])
                            ("y" variable nil (reparse-symbol function_parameters) [20058 20059])
                            ("s" variable nil (reparse-symbol function_parameters) [20061 20062])
                            ("prop" variable nil (reparse-symbol function_parameters) [20064 20068])
                            ("angle" variable nil (reparse-symbol function_parameters) [20070 20075])
                            ("ismath" variable nil (reparse-symbol function_parameters) [20077 20083])
                            ("mtext" variable nil (reparse-symbol function_parameters) [20092 20097]))                          
                        :documentation "
        ")
                        (reparse-symbol indented_block_body) [20032 20201])
                    ("draw_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20220 20224])
                            ("gc" variable nil (reparse-symbol function_parameters) [20226 20228])
                            ("x" variable nil (reparse-symbol function_parameters) [20230 20231])
                            ("y" variable nil (reparse-symbol function_parameters) [20233 20234])
                            ("s" variable nil (reparse-symbol function_parameters) [20236 20237])
                            ("prop" variable nil (reparse-symbol function_parameters) [20239 20243])
                            ("angle" variable nil (reparse-symbol function_parameters) [20245 20250])
                            ("ismath" variable nil (reparse-symbol function_parameters) [20252 20258])
                            ("mtext" variable nil (reparse-symbol function_parameters) [20266 20271]))                          
                        :documentation "
        Draw the text instance

        *gc*
            the :class:`GraphicsContextBase` instance

        *x*
            the x location of the text in display coords

        *y*
            the y location of the text baseline in display coords

        *s*
            the text string

        *prop*
          a :class:`matplotlib.font_manager.FontProperties` instance

        *angle*
            the rotation angle in degrees

        *mtext*
            a :class:`matplotlib.text.Text` instance

        **backend implementers note**

        When you are trying to determine if you have gotten your bounding box
        right (which is what enables the text layout/alignment to work
        properly), it helps to change the line in text.py::

            if 0: bbox_artist(self, renderer)

        to if 1, and then the actual bounding box will be plotted along with
        your text.
        ")
                        (reparse-symbol indented_block_body) [20206 21266])
                    ("_get_text_path_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21300 21304])
                            ("x" variable nil (reparse-symbol function_parameters) [21306 21307])
                            ("y" variable nil (reparse-symbol function_parameters) [21309 21310])
                            ("s" variable nil (reparse-symbol function_parameters) [21312 21313])
                            ("prop" variable nil (reparse-symbol function_parameters) [21315 21319])
                            ("angle" variable nil (reparse-symbol function_parameters) [21321 21326])
                            ("ismath" variable nil (reparse-symbol function_parameters) [21328 21334]))                          
                        :documentation "
        return the text path and transform

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [21271 22650])
                    ("_draw_text_as_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22678 22682])
                            ("gc" variable nil (reparse-symbol function_parameters) [22684 22686])
                            ("x" variable nil (reparse-symbol function_parameters) [22688 22689])
                            ("y" variable nil (reparse-symbol function_parameters) [22691 22692])
                            ("s" variable nil (reparse-symbol function_parameters) [22694 22695])
                            ("prop" variable nil (reparse-symbol function_parameters) [22697 22701])
                            ("angle" variable nil (reparse-symbol function_parameters) [22703 22708])
                            ("ismath" variable nil (reparse-symbol function_parameters) [22710 22716]))                          
                        :documentation "
        draw the text by converting them to paths using textpath module.

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [22655 23270])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23309 23313])
                            ("s" variable nil (reparse-symbol function_parameters) [23315 23316])
                            ("prop" variable nil (reparse-symbol function_parameters) [23318 23322])
                            ("ismath" variable nil (reparse-symbol function_parameters) [23324 23330]))                          
                        :documentation "
        get the width and height, and the offset from the bottom to the
        baseline (descent), in display coords of the string s with
        :class:`~matplotlib.font_manager.FontProperties` prop
        ")
                        (reparse-symbol indented_block_body) [23275 24586])
                    ("flipy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24601 24605]))                          
                        :documentation "
        Return true if y small numbers are top for renderer Is used
        for drawing text (:mod:`matplotlib.text`) and images
        (:mod:`matplotlib.image`) only
        ")
                        (reparse-symbol indented_block_body) [24591 24820])
                    ("get_canvas_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24853 24857]))                          )
                        (reparse-symbol indented_block_body) [24825 24943])
                    ("get_texmanager" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24967 24971]))                          
                        :documentation "
        return the :class:`matplotlib.texmanager.TexManager` instance
        ")
                        (reparse-symbol indented_block_body) [24948 25238])
                    ("new_gc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25254 25258]))                          
                        :documentation "
        Return an instance of a :class:`GraphicsContextBase`
        ")
                        (reparse-symbol indented_block_body) [25243 25383])
                    ("points_to_pixels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25409 25413])
                            ("points" variable nil (reparse-symbol function_parameters) [25415 25421]))                          
                        :documentation "
        Convert points to display units

        *points*
            a float or a numpy array of float

        return points converted to pixels

        You need to override this function (unless your backend
        doesn't have a dpi, e.g., postscript or svg).  Some imaging
        systems assume some value for pixels per inch::

            points to pixels = points * pixels_per_inch/72.0 * dpi/72.0
        ")
                        (reparse-symbol indented_block_body) [25388 25879])
                    ("strip_math" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25899 25903])
                            ("s" variable nil (reparse-symbol function_parameters) [25905 25906]))                          )
                        (reparse-symbol indented_block_body) [25884 25944])
                    ("start_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25971 25975]))                          
                        :documentation "
        Used in MixedModeRenderer. Switch to the raster renderer.
        ")
                        (reparse-symbol indented_block_body) [25949 26081])
                    ("stop_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26107 26111]))                          
                        :documentation "
        Used in MixedModeRenderer. Switch back to the vector renderer
        and draw the contents of the raster renderer as an image on
        the vector renderer.
        ")
                        (reparse-symbol indented_block_body) [26086 26318])
                    ("start_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26340 26344]))                          
                        :documentation "
        Used in AggRenderer. Switch to a temporary renderer for image
        filtering effects.
        ")
                        (reparse-symbol indented_block_body) [26323 26481])
                    ("stop_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26502 26506])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [26508 26519]))                          
                        :documentation "
        Used in AggRenderer. Switch back to the original renderer.
        The contents of the temporary renderer is processed with the
        *filter_func* and is drawn on the original renderer as an
        image.
        ")
                        (reparse-symbol indented_block_body) [26486 26776]))                  
                :type "class")
                nil [5885 26776])
            ("GraphicsContextBase" type
               (:documentation "
    An abstract base class that provides color, line styles, etc...
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26930 26947])
                            ("self" variable nil (reparse-symbol indented_block_body) [26956 26982])
                            ("self" variable nil (reparse-symbol indented_block_body) [27032 27053])
                            ("self" variable nil (reparse-symbol indented_block_body) [27108 27131])
                            ("self" variable nil (reparse-symbol indented_block_body) [27140 27161])
                            ("self" variable nil (reparse-symbol indented_block_body) [27170 27191])
                            ("self" variable nil (reparse-symbol indented_block_body) [27200 27225])
                            ("self" variable nil (reparse-symbol indented_block_body) [27234 27259])
                            ("self" variable nil (reparse-symbol indented_block_body) [27268 27293])
                            ("self" variable nil (reparse-symbol indented_block_body) [27302 27321])
                            ("self" variable nil (reparse-symbol indented_block_body) [27330 27362])
                            ("self" variable nil (reparse-symbol indented_block_body) [27371 27389])
                            ("self" variable nil (reparse-symbol indented_block_body) [27398 27457])
                            ("self" variable nil (reparse-symbol indented_block_body) [27466 27517])
                            ("self" variable nil (reparse-symbol indented_block_body) [27526 27542])
                            ("self" variable nil (reparse-symbol indented_block_body) [27551 27567])
                            ("self" variable nil (reparse-symbol indented_block_body) [27576 27593])
                            ("self" variable nil (reparse-symbol indented_block_body) [27602 27621]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26915 26919]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26902 27622])
                    ("copy_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27647 27651])
                            ("gc" variable nil (reparse-symbol function_parameters) [27653 27655]))                          )
                        (reparse-symbol indented_block_body) [27627 28366])
                    ("restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28383 28387]))                          
                        :documentation "
        Restore the graphics context from the stack - needed only
        for backends that save graphics contexts on a stack
        ")
                        (reparse-symbol indented_block_body) [28371 28553])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28572 28576]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on
        all backends
        ")
                        (reparse-symbol indented_block_body) [28558 28719])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28744 28748]))                          )
                        (reparse-symbol indented_block_body) [28724 28859])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28881 28885]))                          
                        :documentation "
        Return the capstyle as a string in ('butt', 'round', 'projecting')
        ")
                        (reparse-symbol indented_block_body) [28864 29017])
                    ("get_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29045 29049]))                          
                        :documentation "
        Return the clip rectangle as a :class:`~matplotlib.transforms.Bbox`
        instance
        ")
                        (reparse-symbol indented_block_body) [29022 29199])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29222 29226]))                          
                        :documentation "
        Return the clip path in the form (path, transform), where path
        is a :class:`~matplotlib.path.Path` instance, and transform is
        an affine transform to apply to the path before clipping.
        ")
                        (reparse-symbol indented_block_body) [29204 29594])
                    ("get_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29614 29618]))                          
                        :documentation "
        Return the dash information as an offset dashlist tuple.

        The dash list is a even size list that gives the ink on, ink
        off in pixels.

        See p107 of to PostScript `BLUEBOOK
        <https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF>`_
        for more info.

        Default value is None
        ")
                        (reparse-symbol indented_block_body) [29599 29999])
                    ("get_forced_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30025 30029]))                          
                        :documentation "
        Return whether the value given by get_alpha() should be used to
        override any other alpha-channel values.
        ")
                        (reparse-symbol indented_block_body) [30004 30211])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30234 30238]))                          
                        :documentation "
        Return the line join style as one of ('miter', 'round', 'bevel')
        ")
                        (reparse-symbol indented_block_body) [30216 30369])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30392 30396])
                            ("style" variable nil (reparse-symbol function_parameters) [30398 30403]))                          
                        :documentation "
        Return the linestyle: one of ('solid', 'dashed', 'dashdot',
        'dotted').
        ")
                        (reparse-symbol indented_block_body) [30374 30548])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30571 30575]))                          
                        :documentation "
        Return the line width in points as a scalar
        ")
                        (reparse-symbol indented_block_body) [30553 30685])
                    ("get_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30702 30706]))                          
                        :documentation "
        returns a tuple of three or four floats from 0-1.
        ")
                        (reparse-symbol indented_block_body) [30690 30816])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30833 30837]))                          
                        :documentation "
        returns a url if one is set, None otherwise
        ")
                        (reparse-symbol indented_block_body) [30821 30941])
                    ("get_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30958 30962]))                          
                        :documentation "
        Return the object identifier if one is set, None otherwise.
        ")
                        (reparse-symbol indented_block_body) [30946 31082])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31100 31104]))                          
                        :documentation "
        returns the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [31087 31431])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31450 31454])
                            ("alpha" variable nil (reparse-symbol function_parameters) [31456 31461]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on all backends.
        If ``alpha=None`` (the default), the alpha components of the
        foreground and fill colors will be used to set their respective
        transparencies (where applicable); otherwise, ``alpha`` will override
        them.
        ")
                        (reparse-symbol indented_block_body) [31436 32035])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32060 32064])
                            ("b" variable nil (reparse-symbol function_parameters) [32066 32067]))                          
                        :documentation "
        True if object should be drawn with antialiased rendering
        ")
                        (reparse-symbol indented_block_body) [32040 32336])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32358 32362])
                            ("cs" variable nil (reparse-symbol function_parameters) [32364 32366]))                          
                        :documentation "
        Set the capstyle as a string in ('butt', 'round', 'projecting')
        ")
                        (reparse-symbol indented_block_body) [32341 32632])
                    ("set_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32660 32664])
                            ("rectangle" variable nil (reparse-symbol function_parameters) [32666 32675]))                          
                        :documentation "
        Set the clip rectangle with sequence (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [32637 32812])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32835 32839])
                            ("path" variable nil (reparse-symbol function_parameters) [32841 32845]))                          
                        :documentation "
        Set the clip path and transformation.  Path should be a
        :class:`~matplotlib.transforms.TransformedPath` instance.
        ")
                        (reparse-symbol indented_block_body) [32817 33272])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33292 33296])
                            ("dash_offset" variable nil (reparse-symbol function_parameters) [33298 33309])
                            ("dash_list" variable nil (reparse-symbol function_parameters) [33311 33320]))                          
                        :documentation "
        Set the dash style for the gc.

        *dash_offset*
            is the offset (usually 0).

        *dash_list*
            specifies the on-off sequence as points.
            ``(None, None)`` specifies a solid line

        ")
                        (reparse-symbol indented_block_body) [33277 33809])
                    ("set_foreground" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33833 33837])
                            ("fg" variable nil (reparse-symbol function_parameters) [33839 33841])
                            ("isRGBA" variable nil (reparse-symbol function_parameters) [33843 33849]))                          
                        :documentation "
        Set the foreground color.  fg can be a MATLAB format string, a
        html hex color string, an rgb or rgba unit tuple, or a float between 0
        and 1.  In the latter case, grayscale is used.

        If you know fg is rgba, set ``isRGBA=True`` for efficiency.
        ")
                        (reparse-symbol indented_block_body) [33814 34440])
                    ("set_graylevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34463 34467])
                            ("frac" variable nil (reparse-symbol function_parameters) [34469 34473]))                          
                        :documentation "
        Set the foreground color to be a gray level with *frac*
        ")
                        (reparse-symbol indented_block_body) [34445 34912])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34935 34939])
                            ("js" variable nil (reparse-symbol function_parameters) [34941 34943]))                          
                        :documentation "
        Set the join style to be one of ('miter', 'round', 'bevel')
        ")
                        (reparse-symbol indented_block_body) [34917 35203])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35226 35230])
                            ("w" variable nil (reparse-symbol function_parameters) [35232 35233]))                          
                        :documentation "
        Set the linewidth in points
        ")
                        (reparse-symbol indented_block_body) [35208 35331])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35354 35358])
                            ("style" variable nil (reparse-symbol function_parameters) [35360 35365]))                          
                        :documentation "
        Set the linestyle to be one of ('solid', 'dashed', 'dashdot',
        'dotted'). These are defined in the rcParams
        `lines.dashed_pattern`, `lines.dashdot_pattern` and
        `lines.dotted_pattern`.  One may also specify customized dash
        styles by providing a tuple of (offset, dash pairs).
        ")
                        (reparse-symbol indented_block_body) [35336 35738])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35755 35759])
                            ("url" variable nil (reparse-symbol function_parameters) [35761 35764]))                          
                        :documentation "
        Sets the url for links in compatible backends
        ")
                        (reparse-symbol indented_block_body) [35743 35869])
                    ("set_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35886 35890])
                            ("id" variable nil (reparse-symbol function_parameters) [35892 35894]))                          
                        :documentation "
        Sets the id.
        ")
                        (reparse-symbol indented_block_body) [35874 35965])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35983 35987])
                            ("snap" variable nil (reparse-symbol function_parameters) [35989 35993]))                          
                        :documentation "
        Sets the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [35970 36317])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36336 36340])
                            ("hatch" variable nil (reparse-symbol function_parameters) [36342 36347]))                          
                        :documentation "
        Sets the hatch style for filling
        ")
                        (reparse-symbol indented_block_body) [36322 36443])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36462 36466]))                          
                        :documentation "
        Gets the current hatch style
        ")
                        (reparse-symbol indented_block_body) [36448 36557])
                    ("get_hatch_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36581 36585])
                            ("density" variable nil (reparse-symbol function_parameters) [36587 36594]))                          
                        :documentation "
        Returns a Path for the current hatch.
        ")
                        (reparse-symbol indented_block_body) [36562 36775])
                    ("get_hatch_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36800 36804]))                          
                        :documentation "
        Gets the color to use for hatching.
        ")
                        (reparse-symbol indented_block_body) [36780 36908])
                    ("set_hatch_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36933 36937])
                            ("hatch_color" variable nil (reparse-symbol function_parameters) [36939 36950]))                          
                        :documentation "
        sets the color to use for hatching.
        ")
                        (reparse-symbol indented_block_body) [36913 37061])
                    ("get_hatch_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37090 37094]))                          
                        :documentation "
        Gets the linewidth to use for hatching.
        ")
                        (reparse-symbol indented_block_body) [37066 37206])
                    ("get_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37233 37237]))                          
                        :documentation "
        Returns the sketch parameters for the artist.

        Returns
        -------
        sketch_params : tuple or `None`

        A 3-tuple with the following elements:

          * `scale`: The amplitude of the wiggle perpendicular to the
            source line.

          * `length`: The length of the wiggle along the line.

          * `randomness`: The scale factor by which the length is
            shrunken or expanded.

        May return `None` if no sketch parameters were set.
        ")
                        (reparse-symbol indented_block_body) [37211 37789])
                    ("set_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37816 37820])
                            ("scale" variable nil (reparse-symbol function_parameters) [37822 37827])
                            ("length" variable nil (reparse-symbol function_parameters) [37834 37840])
                            ("randomness" variable nil (reparse-symbol function_parameters) [37847 37857]))                          
                        :documentation "
        Sets the sketch parameters.

        Parameters
        ----------

        scale : float, optional
            The amplitude of the wiggle perpendicular to the source
            line, in pixels.  If scale is `None`, or not provided, no
            sketch filter will be provided.

        length : float, optional
             The length of the wiggle along the line, in pixels
             (default 128.0)

        randomness : float, optional
            The scale factor by which the length is shrunken or
            expanded (default 16.0)
        ")
                        (reparse-symbol indented_block_body) [37794 38588]))                  
                :type "class")
                nil [26778 38588])
            ("TimerBase" type
               (:superclasses ("object")
                :members 
                  ( ("'''
    A base class for providing timer events, useful for things animations.
    Backends need to implement a few specific methods in order to use their
    own timing mechanisms so that the timer events are integrated into their
    event loops.

    Mandatory functions that must be implemented:

        * `_timer_start`: Contains backend-specific code for starting
          the timer

        * `_timer_stop`: Contains backend-specific code for stopping
          the timer

    Optional overrides:

        * `_timer_set_single_shot`: Code for setting the timer to
          single shot operating mode, if supported by the timer
          object. If not, the `Timer` class itself will store the flag
          and the `_on_timer` method should be overridden to support
          such behavior.

        * `_timer_set_interval`: Code for setting the interval on the
          timer, if there is a method for doing so on the timer
          object.

        * `_on_timer`: This is the internal function that any timer
          object should call, which will handle the task of running
          all callbacks that have been set.

    Attributes:

        * `interval`: The time between timer events in
          milliseconds. Default is 1000 ms.

        * `single_shot`: Boolean flag indicating whether this timer
          should operate as single shot (run once and then
          stop). Defaults to `False`.

        * `callbacks`: Stores list of (func, args) tuples that will be
          called upon timer events. This list can be manipulated
          directly, or the functions `add_callback` and
          `remove_callback` can be used.
    '''" code nil (reparse-symbol indented_block_body) [38619 40279])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [40423 40550])
                            ("if" code nil (reparse-symbol indented_block_body) [40559 40666])
                            ("self" variable nil (reparse-symbol indented_block_body) [40675 40695])
                            ("self" variable nil (reparse-symbol indented_block_body) [40775 40793]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40297 40301])
                            ("interval" variable nil (reparse-symbol function_parameters) [40303 40311])
                            ("callbacks" variable nil (reparse-symbol function_parameters) [40318 40327]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40284 40794])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40811 40815]))                          )
                        (reparse-symbol indented_block_body) [40799 40905])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40920 40924])
                            ("interval" variable nil (reparse-symbol function_parameters) [40926 40934]))                          )
                        (reparse-symbol indented_block_body) [40910 41195])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41209 41213]))                          )
                        (reparse-symbol indented_block_body) [41200 41291])
                    ("_timer_start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41313 41317]))                          )
                        (reparse-symbol indented_block_body) [41296 41333])
                    ("_timer_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41354 41358]))                          )
                        (reparse-symbol indented_block_body) [41338 41374])
                    ("_get_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41397 41401]))                          )
                        (reparse-symbol indented_block_body) [41379 41434])
                    ("_set_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41457 41461])
                            ("interval" variable nil (reparse-symbol function_parameters) [41463 41471]))                          )
                        (reparse-symbol indented_block_body) [41439 41711])
                    ("interval" variable nil (reparse-symbol indented_block_body) [41716 41765])
                    ("_get_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41792 41796]))                          )
                        (reparse-symbol indented_block_body) [41771 41827])
                    ("_set_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41853 41857])
                            ("ss" variable nil (reparse-symbol function_parameters) [41859 41861]))                          )
                        (reparse-symbol indented_block_body) [41832 41933])
                    ("single_shot" variable nil (reparse-symbol indented_block_body) [41938 41996])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42019 42023])
                            ("func" variable nil (reparse-symbol function_parameters) [42025 42029])
                            ("args" variable nil (reparse-symbol function_parameters) [42031 42036])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42038 42046]))                          )
                        (reparse-symbol indented_block_body) [42002 42261])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42286 42290])
                            ("func" variable nil (reparse-symbol function_parameters) [42292 42296])
                            ("args" variable nil (reparse-symbol function_parameters) [42298 42303])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42305 42313]))                          )
                        (reparse-symbol indented_block_body) [42266 42777])
                    ("_timer_set_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42806 42810]))                          )
                        (reparse-symbol indented_block_body) [42782 42885])
                    ("_timer_set_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42917 42921]))                          )
                        (reparse-symbol indented_block_body) [42890 42999])
                    ("_on_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43018 43022]))                          )
                        (reparse-symbol indented_block_body) [43004 43621]))                  
                :type "class")
                nil [38590 43621])
            ("Event" type
               (:documentation "
    A matplotlib event.  Attach additional attributes as defined in
    :meth:`FigureCanvasBase.mpl_connect`.  The following attributes
    are defined and shown with their default values

    *name*
        the event name

    *canvas*
        the FigureCanvas instance generating the event

    *guiEvent*
        the GUI event that triggered the matplotlib event


    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [44089 44105])
                            ("self" variable nil (reparse-symbol indented_block_body) [44114 44134])
                            ("self" variable nil (reparse-symbol indented_block_body) [44143 44167]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44045 44049])
                            ("name" variable nil (reparse-symbol function_parameters) [44051 44055])
                            ("canvas" variable nil (reparse-symbol function_parameters) [44057 44063])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [44065 44073]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44032 44168]))                  
                :type "class")
                nil [43623 44168])
            ("IdleEvent" type
               (:documentation "
    An event triggered by the GUI backend when it is idle -- useful
    for passive animation
    "
                :superclasses ("Event")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [44308 44312]))                  
                :type "class")
                nil [44170 44313])
            ("DrawEvent" type
               (:documentation "
    An event triggered by a draw operation on the canvas

    In addition to the :class:`Event` attributes, the following event
    attributes are defined:

    *renderer*
        the :class:`RendererBase` instance for the draw event

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [44646 44680])
                            ("self" variable nil (reparse-symbol indented_block_body) [44689 44713]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44607 44611])
                            ("name" variable nil (reparse-symbol function_parameters) [44613 44617])
                            ("canvas" variable nil (reparse-symbol function_parameters) [44619 44625])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44627 44635]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44594 44714]))                  
                :type "class")
                nil [44315 44714])
            ("ResizeEvent" type
               (:documentation "
    An event triggered by a canvas resize

    In addition to the :class:`Event` attributes, the following event
    attributes are defined:

    *width*
        width of the canvas in pixels

    *height*
        height of the canvas in pixels

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [45050 45084])
                            ("self, self" code nil (reparse-symbol indented_block_body) [45093 45144]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45021 45025])
                            ("name" variable nil (reparse-symbol function_parameters) [45027 45031])
                            ("canvas" variable nil (reparse-symbol function_parameters) [45033 45039]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45008 45145]))                  
                :type "class")
                nil [44716 45145])
            ("CloseEvent" type
               (:documentation "
    An event triggered by a figure being closed

    In addition to the :class:`Event` attributes, the following event
    attributes are defined:
    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [45396 45440]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45352 45356])
                            ("name" variable nil (reparse-symbol function_parameters) [45358 45362])
                            ("canvas" variable nil (reparse-symbol function_parameters) [45364 45370])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [45372 45380]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45339 45441]))                  
                :type "class")
                nil [45147 45441])
            ("LocationEvent" type
               (:documentation "
    An event that has a screen location

    The following additional attributes are defined and shown with
    their default values.

    In addition to the :class:`Event` attributes, the following
    event attributes are defined:

    *x*
        x position - pixels from left of canvas

    *y*
        y position - pixels from bottom of canvas

    *inaxes*
        the :class:`~matplotlib.axes.Axes` instance if mouse is over axes

    *xdata*
        x coord of mouse in data coords

    *ydata*
        y coord of mouse in data coords

    "
                :superclasses ("Event")
                :members 
                  ( ("x" variable nil (reparse-symbol indented_block_body) [46035 46043])
                    ("y" variable nil (reparse-symbol indented_block_body) [46096 46104])
                    ("inaxes" variable nil (reparse-symbol indented_block_body) [46158 46171])
                    ("xdata" variable nil (reparse-symbol indented_block_body) [46219 46231])
                    ("ydata" variable nil (reparse-symbol indented_block_body) [46272 46284])
                    ("lastevent" variable nil (reparse-symbol indented_block_body) [46382 46398])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *x*, *y* in figure coords, 0,0 = bottom, left
        \"\"\"" code nil (reparse-symbol indented_block_body) [46467 46536])
                            ("Event" code nil (reparse-symbol indented_block_body) [46545 46598])
                            ("self" variable nil (reparse-symbol indented_block_body) [46607 46617])
                            ("self" variable nil (reparse-symbol indented_block_body) [46626 46636])
                            ("if" code nil (reparse-symbol indented_block_body) [46646 46825])
                            ("if" code nil (reparse-symbol indented_block_body) [46879 47094])
                            ("if" code nil (reparse-symbol indented_block_body) [47103 47492])
                            ("try" code nil (reparse-symbol indented_block_body) [47501 47779])
                            ("self" code nil (reparse-symbol indented_block_body) [47788 47814]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46417 46421])
                            ("name" variable nil (reparse-symbol function_parameters) [46423 46427])
                            ("canvas" variable nil (reparse-symbol function_parameters) [46429 46435])
                            ("x" variable nil (reparse-symbol function_parameters) [46437 46438])
                            ("y" variable nil (reparse-symbol function_parameters) [46440 46441])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [46443 46451]))                          
                        :documentation "
        *x*, *y* in figure coords, 0,0 = bottom, left
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46404 47815])
                    ("_update_enter_leave" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47844 47848]))                          )
                        (reparse-symbol indented_block_body) [47820 48906]))                  
                :type "class")
                nil [45443 48906])
            ("MouseEvent" type
               (:documentation "
    A mouse event ('button_press_event',
                   'button_release_event',
                   'scroll_event',
                   'motion_notify_event').

    In addition to the :class:`Event` and :class:`LocationEvent`
    attributes, the following attributes are defined:

    *button*
        button pressed None, 1, 2, 3, 'up', 'down' (up and down are used
        for scroll events).  Note that in the nbagg backend, both the
        middle and right clicks return 3 since right clicking will bring
        up the context menu in some browsers.

    *key*
        the key depressed when the mouse event triggered (see
        :class:`KeyEvent`)

    *step*
        number of scroll steps (positive for 'up', negative for 'down')


    Example usage::

        def on_press(event):
            print('you pressed', event.button, event.xdata, event.ydata)

        cid = fig.canvas.mpl_connect('button_press_event', on_press)

    "
                :superclasses ("LocationEvent")
                :members 
                  ( ("x" variable nil (reparse-symbol indented_block_body) [49899 49907])
                    ("y" variable nil (reparse-symbol indented_block_body) [49962 49970])
                    ("button" variable nil (reparse-symbol indented_block_body) [50026 50039])
                    ("dblclick" variable nil (reparse-symbol indented_block_body) [50078 50093])
                    ("inaxes" variable nil (reparse-symbol indented_block_body) [50158 50171])
                    ("xdata" variable nil (reparse-symbol indented_block_body) [50221 50233])
                    ("ydata" variable nil (reparse-symbol indented_block_body) [50276 50288])
                    ("step" variable nil (reparse-symbol indented_block_body) [50331 50342])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        x, y in figure coords, 0,0 = bottom, left
        button pressed None, 1, 2, 3, 'up', 'down'
        \"\"\"" code nil (reparse-symbol indented_block_body) [50513 50629])
                            ("LocationEvent" code nil (reparse-symbol indented_block_body) [50638 50705])
                            ("self" variable nil (reparse-symbol indented_block_body) [50714 50734])
                            ("self" variable nil (reparse-symbol indented_block_body) [50743 50757])
                            ("self" variable nil (reparse-symbol indented_block_body) [50766 50782])
                            ("self" variable nil (reparse-symbol indented_block_body) [50791 50815]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50399 50403])
                            ("name" variable nil (reparse-symbol function_parameters) [50405 50409])
                            ("canvas" variable nil (reparse-symbol function_parameters) [50411 50417])
                            ("x" variable nil (reparse-symbol function_parameters) [50419 50420])
                            ("y" variable nil (reparse-symbol function_parameters) [50422 50423])
                            ("button" variable nil (reparse-symbol function_parameters) [50425 50431])
                            ("key" variable nil (reparse-symbol function_parameters) [50438 50441])
                            ("step" variable nil (reparse-symbol function_parameters) [50465 50469])
                            ("dblclick" variable nil (reparse-symbol function_parameters) [50473 50481])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [50489 50497]))                          
                        :documentation "
        x, y in figure coords, 0,0 = bottom, left
        button pressed None, 1, 2, 3, 'up', 'down'
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [50386 50816])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50833 50837]))                          )
                        (reparse-symbol indented_block_body) [50821 51126]))                  
                :type "class")
                nil [48908 51126])
            ("PickEvent" type
               (:documentation "
    a pick event, fired when the user picks a location on the canvas
    sufficiently close to an artist.

    Attrs: all the :class:`Event` attributes plus

    *mouseevent*
        the :class:`MouseEvent` that generated the pick

    *artist*
        the :class:`~matplotlib.artist.Artist` picked

    other
        extra class dependent attrs -- e.g., a
        :class:`~matplotlib.lines.Line2D` pick may define different
        extra attributes than a
        :class:`~matplotlib.collections.PatchCollection` pick event


    Example usage::

        ax.plot(np.rand(100), 'o', picker=5)  # 5 points tolerance

        def on_pick(event):
            line = event.artist
            xdata, ydata = line.get_data()
            ind = event.ind
            print('on pick line:', np.array([xdata[ind], ydata[ind]]).T)

        cid = fig.canvas.mpl_connect('pick_event', on_pick)

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [52158 52202])
                            ("self" variable nil (reparse-symbol indented_block_body) [52211 52239])
                            ("self" variable nil (reparse-symbol indented_block_body) [52248 52268])
                            ("self" code nil (reparse-symbol indented_block_body) [52277 52305]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52067 52071])
                            ("name" variable nil (reparse-symbol function_parameters) [52073 52077])
                            ("canvas" variable nil (reparse-symbol function_parameters) [52079 52085])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [52087 52097])
                            ("artist" variable nil (reparse-symbol function_parameters) [52099 52105])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [52124 52132])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52139 52147]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52054 52306]))                  
                :type "class")
                nil [51128 52306])
            ("KeyEvent" type
               (:documentation "
    A key event (key press, key release).

    Attach additional attributes as defined in
    :meth:`FigureCanvasBase.mpl_connect`.

    In addition to the :class:`Event` and :class:`LocationEvent`
    attributes, the following attributes are defined:

    *key*
        the key(s) pressed. Could be **None**, a single case sensitive ascii
        character (\"g\", \"G\", \"#\", etc.), a special key
        (\"control\", \"shift\", \"f1\", \"up\", etc.) or a
        combination of the above (e.g., \"ctrl+alt+g\", \"ctrl+alt+G\").

    .. note::

        Modifier keys will be prefixed to the pressed key and will be in the
        order \"ctrl\", \"alt\", \"super\". The exception to this rule is when the
        pressed key is itself a modifier key, therefore \"ctrl+alt\" and
        \"alt+control\" can both be valid key values.


    Example usage::

        def on_key(event):
            print('you pressed', event.key, event.xdata, event.ydata)

        cid = fig.canvas.mpl_connect('key_press_event', on_key)

    "
                :superclasses ("LocationEvent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("LocationEvent" code nil (reparse-symbol indented_block_body) [53426 53493])
                            ("self" variable nil (reparse-symbol indented_block_body) [53502 53516]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53367 53371])
                            ("name" variable nil (reparse-symbol function_parameters) [53373 53377])
                            ("canvas" variable nil (reparse-symbol function_parameters) [53379 53385])
                            ("key" variable nil (reparse-symbol function_parameters) [53387 53390])
                            ("x" variable nil (reparse-symbol function_parameters) [53392 53393])
                            ("y" variable nil (reparse-symbol function_parameters) [53397 53398])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [53402 53410]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53354 53517]))                  
                :type "class")
                nil [52308 53517])
            ("FigureCanvasBase" type
               (:documentation "
    The canvas the figure renders into.

    Public attributes

        *figure*
            A :class:`matplotlib.figure.Figure` instance

      "
                :superclasses ("object")
                :members 
                  ( ("events" variable nil (reparse-symbol indented_block_body) [53712 54129])
                    ("supports_blit" variable nil (reparse-symbol indented_block_body) [54135 54155])
                    ("fixed_dpi" variable nil (reparse-symbol indented_block_body) [54160 54176])
                    ("filetypes" variable nil (reparse-symbol indented_block_body) [54182 54212])
                    ("if" code nil (reparse-symbol indented_block_body) [54217 54775])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [54816 54844])
                            ("self" variable nil (reparse-symbol indented_block_body) [54853 54876])
                            ("figure" code nil (reparse-symbol indented_block_body) [54885 54908])
                            ("self" variable nil (reparse-symbol indented_block_body) [54917 54937])
                            ("self" variable nil (reparse-symbol indented_block_body) [55021 55062])
                            ("self" variable nil (reparse-symbol indented_block_body) [55071 55107])
                            ("self" variable nil (reparse-symbol indented_block_body) [55116 55135])
                            ("self" variable nil (reparse-symbol indented_block_body) [55166 55182])
                            ("self, self" code nil (reparse-symbol indented_block_body) [55210 55247])
                            ("self" variable nil (reparse-symbol indented_block_body) [55256 55327])
                            ("self" variable nil (reparse-symbol indented_block_body) [55336 55401])
                            ("self" variable nil (reparse-symbol indented_block_body) [55410 55435])
                            ("self" variable nil (reparse-symbol indented_block_body) [55481 55500])
                            ("self" variable nil (reparse-symbol indented_block_body) [55543 55572]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54793 54797])
                            ("figure" variable nil (reparse-symbol function_parameters) [54799 54805]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54780 55573])
                    ("_idle_draw_cntx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55618 55622]))                          
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55578 55714])
                    ("is_saving" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55733 55737]))                          
                        :documentation "
        Returns `True` when the renderer is in the process of saving
        to a file, rather than rendering for an on-screen buffer.
        ")
                        (reparse-symbol indented_block_body) [55719 55930])
                    ("onRemove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55948 55952])
                            ("ev" variable nil (reparse-symbol function_parameters) [55954 55956]))                          
                        :documentation "
        Mouse event processor which removes the top artist
        under the cursor.  Connect this to the 'mouse_press_event'
        using::

            canvas.mpl_connect('mouse_press_event',canvas.onRemove)
        ")
                        (reparse-symbol indented_block_body) [55935 56752])
                    ("onHilite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56770 56774])
                            ("ev" variable nil (reparse-symbol function_parameters) [56776 56778]))                          
                        :documentation "
        Mouse event processor which highlights the artists
        under the cursor.  Connect this to the 'motion_notify_event'
        using::

            canvas.mpl_connect('motion_notify_event',canvas.onHilite)
        ")
                        (reparse-symbol indented_block_body) [56757 58624])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58638 58642])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [58644 58654]))                          )
                        (reparse-symbol indented_block_body) [58629 58739])
                    ("blit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58753 58757])
                            ("bbox" variable nil (reparse-symbol function_parameters) [58759 58763]))                          
                        :documentation "
        blit the canvas in bbox (default entire canvas)
        ")
                        (reparse-symbol indented_block_body) [58744 58864])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58880 58884])
                            ("w" variable nil (reparse-symbol function_parameters) [58886 58887])
                            ("h" variable nil (reparse-symbol function_parameters) [58889 58890]))                          
                        :documentation "
        set the canvas size in pixels
        ")
                        (reparse-symbol indented_block_body) [58869 58968])
                    ("draw_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58988 58992])
                            ("renderer" variable nil (reparse-symbol function_parameters) [58994 59002]))                          
                        :documentation "
        This method will be call all functions connected to the
        'draw_event' with a :class:`DrawEvent`
        ")
                        (reparse-symbol indented_block_body) [58973 59252])
                    ("resize_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59274 59278]))                          
                        :documentation "
        This method will be call all functions connected to the
        'resize_event' with a :class:`ResizeEvent`
        ")
                        (reparse-symbol indented_block_body) [59257 59526])
                    ("close_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59547 59551])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [59553 59561]))                          
                        :documentation "
        This method will be called by all functions connected to the
        'close_event' with a :class:`CloseEvent`
        ")
                        (reparse-symbol indented_block_body) [59531 59915])
                    ("key_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60286 60290])
                            ("key" variable nil (reparse-symbol function_parameters) [60292 60295])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [60297 60305]))                          
                        :documentation "
        This method will be call all functions connected to the
        'key_press_event' with a :class:`KeyEvent`
        ")
                        (reparse-symbol indented_block_body) [60266 60644])
                    ("key_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60671 60675])
                            ("key" variable nil (reparse-symbol function_parameters) [60677 60680])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [60682 60690]))                          
                        :documentation "
        This method will be call all functions connected to the
        'key_release_event' with a :class:`KeyEvent`
        ")
                        (reparse-symbol indented_block_body) [60649 61034])
                    ("pick_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61054 61058])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [61060 61070])
                            ("artist" variable nil (reparse-symbol function_parameters) [61072 61078])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [61080 61088]))                          
                        :documentation "
        This method will be called by artists who are picked and will
        fire off :class:`PickEvent` callbacks registered listeners
        ")
                        (reparse-symbol indented_block_body) [61039 61465])
                    ("scroll_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61487 61491])
                            ("x" variable nil (reparse-symbol function_parameters) [61493 61494])
                            ("y" variable nil (reparse-symbol function_parameters) [61496 61497])
                            ("step" variable nil (reparse-symbol function_parameters) [61499 61503])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [61505 61513]))                          
                        :documentation "
        Backend derived classes should call this function on any
        scroll wheel event.  x,y are the canvas coords: 0,0 is lower,
        left.  button and key are as defined in MouseEvent.

        This method will be call all functions connected to the
        'scroll_event' with a :class:`MouseEvent` instance.
        ")
                        (reparse-symbol indented_block_body) [61470 62174])
                    ("button_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62202 62206])
                            ("x" variable nil (reparse-symbol function_parameters) [62208 62209])
                            ("y" variable nil (reparse-symbol function_parameters) [62211 62212])
                            ("button" variable nil (reparse-symbol function_parameters) [62214 62220])
                            ("dblclick" variable nil (reparse-symbol function_parameters) [62222 62230])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [62238 62246]))                          
                        :documentation "
        Backend derived classes should call this function on any mouse
        button press.  x,y are the canvas coords: 0,0 is lower, left.
        button and key are as defined in :class:`MouseEvent`.

        This method will be call all functions connected to the
        'button_press_event' with a :class:`MouseEvent` instance.

        ")
                        (reparse-symbol indented_block_body) [62179 62858])
                    ("button_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62888 62892])
                            ("x" variable nil (reparse-symbol function_parameters) [62894 62895])
                            ("y" variable nil (reparse-symbol function_parameters) [62897 62898])
                            ("button" variable nil (reparse-symbol function_parameters) [62900 62906])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [62908 62916]))                          
                        :documentation "
        Backend derived classes should call this function on any mouse
        button release.

        *x*
            the canvas coordinates where 0=left

        *y*
            the canvas coordinates where 0=bottom

        *guiEvent*
            the native UI event that generated the mpl event


        This method will be call all functions connected to the
        'button_release_event' with a :class:`MouseEvent` instance.

        ")
                        (reparse-symbol indented_block_body) [62863 63567])
                    ("motion_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63596 63600])
                            ("x" variable nil (reparse-symbol function_parameters) [63602 63603])
                            ("y" variable nil (reparse-symbol function_parameters) [63605 63606])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [63608 63616]))                          
                        :documentation "
        Backend derived classes should call this function on any
        motion-notify-event.

        *x*
            the canvas coordinates where 0=left

        *y*
            the canvas coordinates where 0=bottom

        *guiEvent*
            the native UI event that generated the mpl event


        This method will be call all functions connected to the
        'motion_notify_event' with a :class:`MouseEvent` instance.

        ")
                        (reparse-symbol indented_block_body) [63572 64309])
                    ("leave_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64337 64341])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [64343 64351]))                          
                        :documentation "
        Backend derived classes should call this function when leaving
        canvas

        *guiEvent*
            the native UI event that generated the mpl event

        ")
                        (reparse-symbol indented_block_body) [64314 64715])
                    ("enter_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64743 64747])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [64749 64757])
                            ("xy" variable nil (reparse-symbol function_parameters) [64764 64766]))                          
                        :documentation "
        Backend derived classes should call this function when entering
        canvas

        *guiEvent*
            the native UI event that generated the mpl event
        *xy*
            the coordinate location of the pointer when the canvas is
            entered

        ")
                        (reparse-symbol indented_block_body) [64720 65284])
                    ("idle_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65304 65308])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [65310 65318]))                          
                        :documentation "Called when GUI is idle.")
                        (reparse-symbol indented_block_body) [65289 65485])
                    ("grab_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65505 65509])
                            ("ax" variable nil (reparse-symbol function_parameters) [65511 65513]))                          
                        :documentation "
        Set the child axes which are currently grabbing the mouse events.
        Usually called by the widgets themselves.
        It is an error to call this if the mouse is already grabbed by
        another axes.
        ")
                        (reparse-symbol indented_block_body) [65490 65916])
                    ("release_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65939 65943])
                            ("ax" variable nil (reparse-symbol function_parameters) [65945 65947]))                          
                        :documentation "
        Release the mouse grab held by the axes, ax.
        Usually called by the widgets.
        It is ok to call this even if you ax doesn't have the mouse
        grab currently.
        ")
                        (reparse-symbol indented_block_body) [65921 66233])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66247 66251])
                            ("args" variable nil (reparse-symbol function_parameters) [66253 66258])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [66260 66268]))                          
                        :documentation "
        Render the :class:`~matplotlib.figure.Figure`
        ")
                        (reparse-symbol indented_block_body) [66238 66362])
                    ("draw_idle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66381 66385])
                            ("args" variable nil (reparse-symbol function_parameters) [66387 66392])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [66394 66402]))                          
                        :documentation "
        :meth:`draw` only if idle; defaults to draw but backends can overrride
        ")
                        (reparse-symbol indented_block_body) [66367 66630])
                    ("draw_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66651 66655])
                            ("event" variable nil (reparse-symbol function_parameters) [66657 66662]))                          
                        :documentation "
        Draw a cursor in the event.axes if inaxes is not None.  Use
        native GUI drawing for efficiency if possible
        ")
                        (reparse-symbol indented_block_body) [66635 66824])
                    ("get_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66850 66854]))                          
                        :documentation "
        Return the figure width and height in points or pixels
        (depending on the backend), truncated to integers
        ")
                        (reparse-symbol indented_block_body) [66829 67075])
                    ("get_supported_filetypes" function
                       (:documentation "Return dict of savefig file formats supported by this backend"
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [67125 67128]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [67080 67236])
                    ("get_supported_filetypes_grouped" function
                       (:documentation "Return a dict of savefig file formats supported by this backend,
        where the keys are a file type name, such as 'Joint Photographic
        Experts Group', and the values are a list of filename extensions used
        for that filetype, such as ['jpg', 'jpeg']."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [67294 67297]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [67241 67775])
                    ("_get_output_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67803 67807])
                            ("format" variable nil (reparse-symbol function_parameters) [67809 67815]))                          
                        :documentation "Return a canvas that is suitable for saving figures to a specified
        file format. If necessary, this function will switch to a registered
        backend that supports the format.
        ")
                        (reparse-symbol indented_block_body) [67780 68681])
                    ("print_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68703 68707])
                            ("filename" variable nil (reparse-symbol function_parameters) [68709 68717])
                            ("dpi" variable nil (reparse-symbol function_parameters) [68719 68722])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [68729 68738])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [68745 68754])
                            ("orientation" variable nil (reparse-symbol function_parameters) [68782 68793])
                            ("format" variable nil (reparse-symbol function_parameters) [68806 68812])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [68819 68827]))                          
                        :documentation "
        Render the figure to hardcopy. Set the figure patch face and edge
        colors.  This is useful because some of the GUIs have a gray figure
        face color background and you'll probably want to override this on
        hardcopy.

        Arguments are:

        *filename*
            can also be a file object on image backends

        *orientation*
            only currently applies to PostScript printing.

        *dpi*
            the dots per inch to save the figure in; if None, use savefig.dpi

        *facecolor*
            the facecolor of the figure; if None, defaults to savefig.facecolor

        *edgecolor*
            the edgecolor of the figure; if None, defaults to savefig.edgecolor

        *orientation*
            landscape' | 'portrait' (not supported on all backends)

        *format*
            when set, forcibly set the file format to save to

        *bbox_inches*
            Bbox in inches. Only the given portion of the figure is
            saved. If 'tight', try to figure out the tight bbox of
            the figure. If None, use savefig.bbox

        *pad_inches*
            Amount of padding around the figure when bbox_inches is
            'tight'. If None, use savefig.pad_inches

        *bbox_extra_artists*
            A list of extra artists that will be considered when the
            tight bbox is calculated.

        ")
                        (reparse-symbol indented_block_body) [68686 75427])
                    ("get_default_filetype" function
                       (:documentation "
        Get the default savefig file format as specified in rcParam
        ``savefig.format``. Returned string excludes period. Overridden
        in backends that only support a single file type.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [75474 75477]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [75432 75744])
                    ("get_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75770 75774]))                          
                        :documentation "
        Get the title text of the window containing the figure.
        Return None if there is no window (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [75749 76017])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76043 76047])
                            ("title" variable nil (reparse-symbol function_parameters) [76049 76054]))                          
                        :documentation "
        Set the title text of the window containing the figure.  Note that
        this has no effect if there is no window (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [76022 76313])
                    ("get_default_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76343 76347]))                          
                        :documentation "
        Return a string, which includes extension, suitable for use as
        a default filename.
        ")
                        (reparse-symbol indented_block_body) [76318 77129])
                    ("switch_backends" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77154 77158])
                            ("FigureCanvasClass" variable nil (reparse-symbol function_parameters) [77160 77177]))                          
                        :documentation "
        Instantiate an instance of FigureCanvasClass

        This is used for backend switching, e.g., to instantiate a
        FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is
        not done, so any changes to one of the instances (e.g., setting
        figure size or line props), will be reflected in the other
        ")
                        (reparse-symbol indented_block_body) [77134 77657])
                    ("mpl_connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77678 77682])
                            ("s" variable nil (reparse-symbol function_parameters) [77684 77685])
                            ("func" variable nil (reparse-symbol function_parameters) [77687 77691]))                          
                        :documentation "
        Connect event with string *s* to *func*.  The signature of *func* is::

          def func(event)

        where event is a :class:`matplotlib.backend_bases.Event`.  The
        following events are recognized

        - 'button_press_event'
        - 'button_release_event'
        - 'draw_event'
        - 'key_press_event'
        - 'key_release_event'
        - 'motion_notify_event'
        - 'pick_event'
        - 'resize_event'
        - 'scroll_event'
        - 'figure_enter_event',
        - 'figure_leave_event',
        - 'axes_enter_event',
        - 'axes_leave_event'
        - 'close_event'

        For the location events (button and key press/release), if the
        mouse is over the axes, the variable ``event.inaxes`` will be
        set to the :class:`~matplotlib.axes.Axes` the event occurs is
        over, and additionally, the variables ``event.xdata`` and
        ``event.ydata`` will be defined.  This is the mouse location
        in data coords.  See
        :class:`~matplotlib.backend_bases.KeyEvent` and
        :class:`~matplotlib.backend_bases.MouseEvent` for more info.

        Return value is a connection id that can be used with
        :meth:`~matplotlib.backend_bases.Event.mpl_disconnect`.

        Example usage::

            def on_press(event):
                print('you pressed', event.button, event.xdata, event.ydata)

            cid = canvas.mpl_connect('button_press_event', on_press)

        ")
                        (reparse-symbol indented_block_body) [77662 79462])
                    ("mpl_disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79486 79490])
                            ("cid" variable nil (reparse-symbol function_parameters) [79492 79495]))                          
                        :documentation "
        Disconnect callback id cid

        Example usage::

            cid = canvas.mpl_connect('button_press_event', on_press)
            #...later
            canvas.mpl_disconnect(cid)
        ")
                        (reparse-symbol indented_block_body) [79467 79759])
                    ("new_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79778 79782])
                            ("args" variable nil (reparse-symbol function_parameters) [79784 79789])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [79791 79799]))                          
                        :documentation "
        Creates a new backend-specific subclass of
        :class:`backend_bases.Timer`. This is useful for getting periodic
        events through the backend's native event loop. Implemented only for
        backends with GUIs.

        optional arguments:

        *interval*
          Timer interval in milliseconds
        *callbacks*
          Sequence of (func, args, kwargs) where func(*args, **kwargs) will
          be executed by the timer every *interval*.
        ")
                        (reparse-symbol indented_block_body) [79764 80337])
                    ("flush_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80359 80363]))                          
                        :documentation "
        Flush the GUI events for the figure. Implemented only for
        backends with GUIs.
        ")
                        (reparse-symbol indented_block_body) [80342 80518])
                    ("start_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80544 80548])
                            ("timeout" variable nil (reparse-symbol function_parameters) [80550 80557]))                          
                        :documentation "
        Start an event loop.  This is used to start a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.  This should not be
        confused with the main GUI event loop, which is always running
        and has nothing to do with this.

        This is implemented only for backends with GUIs.
        ")
                        (reparse-symbol indented_block_body) [80523 80989])
                    ("stop_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81014 81018]))                          
                        :documentation "
        Stop an event loop.  This is used to stop a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.

        This is implemented only for backends with GUIs.
        ")
                        (reparse-symbol indented_block_body) [80994 81316])
                    ("start_event_loop_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81350 81354])
                            ("timeout" variable nil (reparse-symbol function_parameters) [81356 81363]))                          
                        :documentation "
        Start an event loop.  This is used to start a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.  This should not be
        confused with the main GUI event loop, which is always running
        and has nothing to do with this.

        This function provides default event loop functionality based
        on time.sleep that is meant to be used until event loop
        functions for each of the GUI backends can be written.  As
        such, it throws a deprecated warning.

        This call blocks until a callback function triggers
        stop_event_loop() or *timeout* is reached.  If *timeout* is
        <=0, never timeout.
        ")
                        (reparse-symbol indented_block_body) [81321 82543])
                    ("stop_event_loop_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82576 82580]))                          
                        :documentation "
        Stop an event loop.  This is used to stop a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.

        ")
                        (reparse-symbol indented_block_body) [82548 82817]))                  
                :type "class")
                nil [53519 82817])
            ("key_press_handler" function
               (:documentation "
    Implement the default mpl key bindings for the canvas and toolbar
    described at :ref:`key-event-handling`

    *event*
      a :class:`KeyEvent` instance
    *canvas*
      a :class:`FigureCanvasBase` instance
    *toolbar*
      a :class:`NavigationToolbar2` instance

    "
                :arguments 
                  ( ("event" variable nil (reparse-symbol function_parameters) [82841 82846])
                    ("canvas" variable nil (reparse-symbol function_parameters) [82848 82854])
                    ("toolbar" variable nil (reparse-symbol function_parameters) [82856 82863]))                  )
                nil [82819 87068])
            ("NonGuiException" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [87108 87112]))                  
                :type "class")
                nil [87070 87113])
            ("FigureManagerBase" type
               (:documentation "
    Helper class for pyplot mode, wraps everything up into a neat bundle

    Public attibutes:

    *canvas*
        A :class:`FigureCanvasBase` instance

    *num*
        The figure number
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [87401 87421])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [87430 87451])
                            ("self" variable nil (reparse-symbol indented_block_body) [87489 87503])
                            ("if" code nil (reparse-symbol indented_block_body) [87513 87809])
                            ("\"\"\"
        The returned id from connecting the default key handler via
        :meth:`FigureCanvasBase.mpl_connnect`.

        To disable default key press handling::

            manager, canvas = figure.canvas.manager, figure.canvas
            canvas.mpl_disconnect(manager.key_press_handler_id)

        \"\"\"" code nil (reparse-symbol indented_block_body) [87817 88129]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87373 87377])
                            ("canvas" variable nil (reparse-symbol function_parameters) [87379 87385])
                            ("num" variable nil (reparse-symbol function_parameters) [87387 87390]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [87360 88130])
                    ("show" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88144 88148]))                          
                        :documentation "
        For GUI backends, show the figure window and redraw.
        For non-GUI backends, raise an exception to be caught
        by :meth:`~matplotlib.figure.Figure.show`, for an
        optional warning.
        ")
                        (reparse-symbol indented_block_body) [88135 88414])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88431 88435]))                          )
                        (reparse-symbol indented_block_body) [88419 88451])
                    ("full_screen_toggle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88479 88483]))                          )
                        (reparse-symbol indented_block_body) [88456 88499])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88515 88519])
                            ("w" variable nil (reparse-symbol function_parameters) [88521 88522])
                            ("h" variable nil (reparse-symbol function_parameters) [88524 88525]))                          
                        :documentation "\"For gui backends, resize the window (in pixels).")
                        (reparse-symbol indented_block_body) [88504 88605])
                    ("key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88624 88628])
                            ("event" variable nil (reparse-symbol function_parameters) [88630 88635]))                          
                        :documentation "
        Implement the default mpl key bindings defined at
        :ref:`key-event-handling`
        ")
                        (reparse-symbol indented_block_body) [88610 88874])
                    ("show_popup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88894 88898])
                            ("msg" variable nil (reparse-symbol function_parameters) [88900 88903]))                          
                        :documentation "
        Display message in a popup -- GUI only
        ")
                        (reparse-symbol indented_block_body) [88879 88990])
                    ("get_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89016 89020]))                          
                        :documentation "
        Get the title text of the window containing the figure.
        Return None for non-GUI backends (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [88995 89197])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89223 89227])
                            ("title" variable nil (reparse-symbol function_parameters) [89229 89234]))                          
                        :documentation "
        Set the title text of the window containing the figure.  Note that
        this has no effect for non-GUI backends (e.g., a PS backend).
        ")
                        (reparse-symbol indented_block_body) [89202 89419]))                  
                :type "class")
                nil [87115 89419])
            ("cursors" variable nil nil [89421 89444])
            ("NavigationToolbar2" type
               (:documentation "
    Base class for the navigation cursor, version 2

    backends must implement a canvas that handles connections for
    'button_press_event' and 'button_release_event'.  See
    :meth:`FigureCanvasBase.mpl_connect` for more information


    They must also define

      :meth:`save_figure`
         save the current figure

      :meth:`set_cursor`
         if you want the pointer icon to change

      :meth:`_init_toolbar`
         create your toolbar widget

      :meth:`draw_rubberband` (optional)
         draw the zoom to rect \"rubberband\" rectangle

      :meth:`press`  (optional)
         whenever a mouse button is pressed, you'll be notified with
         the event

      :meth:`release` (optional)
         whenever a mouse button is released, you'll be notified with
         the event

      :meth:`dynamic_update` (optional)
         dynamically update the window while navigating

      :meth:`set_message` (optional)
         display message

      :meth:`set_history_buttons` (optional)
         you can change the history back / forward buttons to
         indicate disabled / enabled state.

    That's it, we'll do the rest!
    "
                :superclasses ("object")
                :members 
                  ( ("toolitems" variable nil (reparse-symbol indented_block_body) [91019 91574])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [91616 91636])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [91645 91666])
                            ("self" variable nil (reparse-symbol indented_block_body) [91733 91760])
                            ("self" variable nil (reparse-symbol indented_block_body) [91769 91800])
                            ("self" variable nil (reparse-symbol indented_block_body) [91839 91859])
                            ("self" variable nil (reparse-symbol indented_block_body) [91955 91975])
                            ("self" variable nil (reparse-symbol indented_block_body) [91984 92006])
                            ("self" variable nil (reparse-symbol indented_block_body) [92015 92034])
                            ("self" variable nil (reparse-symbol indented_block_body) [92043 92066])
                            ("self" code nil (reparse-symbol indented_block_body) [92075 92095])
                            ("self" variable nil (reparse-symbol indented_block_body) [92104 92195])
                            ("self" variable nil (reparse-symbol indented_block_body) [92205 92224])
                            ("self" variable nil (reparse-symbol indented_block_body) [92233 92255])
                            ("self" variable nil (reparse-symbol indented_block_body) [92265 92292])
                            ("self" variable nil (reparse-symbol indented_block_body) [92386 92400])
                            ("self" code nil (reparse-symbol indented_block_body) [92445 92471]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91593 91597])
                            ("canvas" variable nil (reparse-symbol function_parameters) [91599 91605]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91580 92472])
                    ("set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92493 92497])
                            ("s" variable nil (reparse-symbol function_parameters) [92499 92500]))                          
                        :documentation "Display a message on toolbar or in status bar")
                        (reparse-symbol indented_block_body) [92477 92576])
                    ("back" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92590 92594])
                            ("args" variable nil (reparse-symbol function_parameters) [92596 92601]))                          
                        :documentation "move back up the view lim stack")
                        (reparse-symbol indented_block_body) [92581 92771])
                    ("dynamic_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92795 92799]))                          )
                        (reparse-symbol indented_block_body) [92776 92815])
                    ("draw_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92840 92844])
                            ("event" variable nil (reparse-symbol function_parameters) [92846 92851])
                            ("x0" variable nil (reparse-symbol function_parameters) [92853 92855])
                            ("y0" variable nil (reparse-symbol function_parameters) [92857 92859])
                            ("x1" variable nil (reparse-symbol function_parameters) [92861 92863])
                            ("y1" variable nil (reparse-symbol function_parameters) [92865 92867]))                          
                        :documentation "Draw a rectangle rubberband to indicate zoom limits")
                        (reparse-symbol indented_block_body) [92820 92949])
                    ("remove_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92976 92980]))                          
                        :documentation "Remove the rubberband")
                        (reparse-symbol indented_block_body) [92954 93032])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93049 93053])
                            ("args" variable nil (reparse-symbol function_parameters) [93055 93060]))                          
                        :documentation "Move forward in the view lim stack")
                        (reparse-symbol indented_block_body) [93037 93239])
                    ("home" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93253 93257])
                            ("args" variable nil (reparse-symbol function_parameters) [93259 93264]))                          
                        :documentation "Restore the original view")
                        (reparse-symbol indented_block_body) [93244 93428])
                    ("_init_toolbar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93451 93455]))                          
                        :documentation "
        This is where you actually build the GUI widgets (called by
        __init__).  The icons ``home.xpm``, ``back.xpm``, ``forward.xpm``,
        ``hand.xpm``, ``zoom_to_rect.xpm`` and ``filesave.xpm`` are standard
        across backends (there are ppm versions in CVS also).

        You just need to set the callbacks

        home         : self.home
        back         : self.back
        forward      : self.forward
        hand         : self.pan
        zoom_to_rect : self.zoom
        filesave     : self.save_figure

        You only need to define the last one - the others are in the base
        class implementation.

        ")
                        (reparse-symbol indented_block_body) [93433 94156])
                    ("_set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94177 94181])
                            ("event" variable nil (reparse-symbol function_parameters) [94183 94188]))                          )
                        (reparse-symbol indented_block_body) [94161 94819])
                    ("mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94839 94843])
                            ("event" variable nil (reparse-symbol function_parameters) [94845 94850]))                          )
                        (reparse-symbol indented_block_body) [94824 95783])
                    ("pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95796 95800])
                            ("args" variable nil (reparse-symbol function_parameters) [95802 95807]))                          
                        :documentation "Activate the pan/zoom tool. pan with left button, zoom with right")
                        (reparse-symbol indented_block_body) [95788 96891])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96906 96910])
                            ("event" variable nil (reparse-symbol function_parameters) [96912 96917]))                          
                        :documentation "Called whenver a mouse button is pressed.")
                        (reparse-symbol indented_block_body) [96896 96989])
                    ("press_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97008 97012])
                            ("event" variable nil (reparse-symbol function_parameters) [97014 97019]))                          
                        :documentation "the press mouse button in pan/zoom mode callback")
                        (reparse-symbol indented_block_body) [96994 98001])
                    ("press_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98021 98025])
                            ("event" variable nil (reparse-symbol function_parameters) [98027 98032]))                          
                        :documentation "the press mouse button in zoom to rect mode callback")
                        (reparse-symbol indented_block_body) [98006 99600])
                    ("_switch_on_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99630 99634])
                            ("event" variable nil (reparse-symbol function_parameters) [99636 99641]))                          )
                        (reparse-symbol indented_block_body) [99605 99711])
                    ("_switch_off_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99742 99746])
                            ("event" variable nil (reparse-symbol function_parameters) [99748 99753]))                          )
                        (reparse-symbol indented_block_body) [99716 99818])
                    ("push_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99840 99844]))                          
                        :documentation "push the current view limits and position onto the stack")
                        (reparse-symbol indented_block_body) [99823 100320])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100337 100341])
                            ("event" variable nil (reparse-symbol function_parameters) [100343 100348]))                          
                        :documentation "this will be called whenever mouse button is released")
                        (reparse-symbol indented_block_body) [100325 100432])
                    ("release_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100453 100457])
                            ("event" variable nil (reparse-symbol function_parameters) [100459 100464]))                          
                        :documentation "the release mouse button callback in pan/zoom mode")
                        (reparse-symbol indented_block_body) [100437 100991])
                    ("drag_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101009 101013])
                            ("event" variable nil (reparse-symbol function_parameters) [101015 101020]))                          
                        :documentation "the drag callback in pan/zoom mode")
                        (reparse-symbol indented_block_body) [100996 101356])
                    ("drag_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101375 101379])
                            ("event" variable nil (reparse-symbol function_parameters) [101381 101386]))                          
                        :documentation "the drag callback in zoom mode")
                        (reparse-symbol indented_block_body) [101361 102084])
                    ("release_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102106 102110])
                            ("event" variable nil (reparse-symbol function_parameters) [102112 102117]))                          
                        :documentation "the release mouse button callback in zoom to rect mode")
                        (reparse-symbol indented_block_body) [102089 103849])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103863 103867]))                          
                        :documentation "Redraw the canvases, update the locators")
                        (reparse-symbol indented_block_body) [103854 104491])
                    ("_update_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104513 104517]))                          
                        :documentation "Update the viewlim and position from the view and
        position stack for each axes
        ")
                        (reparse-symbol indented_block_body) [104496 105071])
                    ("save_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105092 105096])
                            ("args" variable nil (reparse-symbol function_parameters) [105098 105103]))                          
                        :documentation "Save the current figure")
                        (reparse-symbol indented_block_body) [105076 105178])
                    ("set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105198 105202])
                            ("cursor" variable nil (reparse-symbol function_parameters) [105204 105210]))                          
                        :documentation "
        Set the current cursor to one of the :class:`Cursors`
        enums values
        ")
                        (reparse-symbol indented_block_body) [105183 105333])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105349 105353]))                          
                        :documentation "Reset the axes stack")
                        (reparse-symbol indented_block_body) [105338 105486])
                    ("zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105500 105504])
                            ("args" variable nil (reparse-symbol function_parameters) [105506 105511]))                          
                        :documentation "Activate zoom to rect mode")
                        (reparse-symbol indented_block_body) [105491 106540])
                    ("set_history_buttons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106569 106573]))                          
                        :documentation "Enable or disable back/forward button")
                        (reparse-symbol indented_block_body) [106545 106641]))                  
                :type "class")
                nil [89447 106641])
            ("ToolContainerBase" type
               (:documentation "
    Base class for all tool containers, e.g. toolbars.

    Attributes
    ----------
    toolmanager : `ToolManager` object that holds the tools that
        this `ToolContainer` wants to communicate with.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [106945 106975])
                            ("self" code nil (reparse-symbol indented_block_body) [106984 107110]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106917 106921])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [106923 106934]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [106904 107111])
                    ("_tool_toggled_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107138 107142])
                            ("event" variable nil (reparse-symbol function_parameters) [107144 107149]))                          
                        :documentation "
        Captures the 'tool_trigger_[name]'

        This only gets used for toggled tools
        ")
                        (reparse-symbol indented_block_body) [107116 107332])
                    ("add_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107350 107354])
                            ("tool" variable nil (reparse-symbol function_parameters) [107356 107360])
                            ("group" variable nil (reparse-symbol function_parameters) [107362 107367])
                            ("position" variable nil (reparse-symbol function_parameters) [107369 107377]))                          
                        :documentation "
        Adds a tool to this container

        Parameters
        ----------
        tool : tool_like
            The tool to add, see `ToolManager.get_tool`.
        group : str
            The name of the group to add this tool to.
        position : int (optional)
            The position within the group to place this tool.  Defaults to end.
        ")
                        (reparse-symbol indented_block_body) [107337 108200])
                    ("_remove_tool_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108226 108230])
                            ("event" variable nil (reparse-symbol function_parameters) [108232 108237]))                          
                        :documentation "Captures the 'tool_removed_event' signal and removes the tool")
                        (reparse-symbol indented_block_body) [108205 108362])
                    ("_get_image_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108391 108395])
                            ("image" variable nil (reparse-symbol function_parameters) [108397 108402]))                          
                        :documentation "Find the image based on its name")
                        (reparse-symbol indented_block_body) [108367 108742])
                    ("trigger_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108764 108768])
                            ("name" variable nil (reparse-symbol function_parameters) [108770 108774]))                          
                        :documentation "
        Trigger the tool

        Parameters
        ----------
        name : String
            Name(id) of the tool triggered from within the container

        ")
                        (reparse-symbol indented_block_body) [108747 109014])
                    ("add_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109036 109040])
                            ("name" variable nil (reparse-symbol function_parameters) [109042 109046])
                            ("group" variable nil (reparse-symbol function_parameters) [109048 109053])
                            ("position" variable nil (reparse-symbol function_parameters) [109055 109063])
                            ("image" variable nil (reparse-symbol function_parameters) [109065 109070])
                            ("description" variable nil (reparse-symbol function_parameters) [109072 109083])
                            ("toggle" variable nil (reparse-symbol function_parameters) [109085 109091]))                          
                        :documentation "
        Add a toolitem to the container

        This method must get implemented per backend

        The callback associated with the button click event,
        must be **EXACTLY** `self.trigger_tool(name)`

        Parameters
        ----------
        name : string
            Name of the tool to add, this gets used as the tool's ID and as the
            default label of the buttons
        group : String
            Name of the group that this tool belongs to
        position : Int
            Position of the tool within its group, if -1 it goes at the End
        image_file : String
            Filename of the image for the button or `None`
        description : String
            Description of the tool, used for the tooltips
        toggle : Bool
            * `True` : The button is a toggle (change the pressed/unpressed
              state between consecutive clicks)
            * `False` : The button is a normal button (returns to unpressed
              state after release)
        ")
                        (reparse-symbol indented_block_body) [109019 110155])
                    ("toggle_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110180 110184])
                            ("name" variable nil (reparse-symbol function_parameters) [110186 110190])
                            ("toggled" variable nil (reparse-symbol function_parameters) [110192 110199]))                          
                        :documentation "
        Toggle the toolitem without firing event

        Parameters
        ----------
        name : String
            Id of the tool to toggle
        toggled : bool
            Whether to set this tool as toggled or not.
        ")
                        (reparse-symbol indented_block_body) [110160 110486])
                    ("remove_toolitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110511 110515])
                            ("name" variable nil (reparse-symbol function_parameters) [110517 110521]))                          
                        :documentation "
        Remove a toolitem from the `ToolContainer`

        This method must get implemented per backend

        Called when `ToolManager` emits a `tool_removed_event`

        Parameters
        ----------
        name : string
            Name of the tool to remove

        ")
                        (reparse-symbol indented_block_body) [110491 110853]))                  
                :type "class")
                nil [106643 110853])
            ("StatusbarBase" type
               (:documentation "Base class for the statusbar"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [110968 110998])
                            ("self" code nil (reparse-symbol indented_block_body) [111007 111129]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110940 110944])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [110946 110957]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [110927 111130])
                    ("_message_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111152 111156])
                            ("event" variable nil (reparse-symbol function_parameters) [111158 111163]))                          
                        :documentation "Captures the 'tool_message_event' and set the message")
                        (reparse-symbol indented_block_body) [111135 111274])
                    ("set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111295 111299])
                            ("s" variable nil (reparse-symbol function_parameters) [111301 111302]))                          
                        :documentation "
        Display a message on toolbar or in status bar

        Parameters
        ----------
        s : str
            Message text
        ")
                        (reparse-symbol indented_block_body) [111279 111477]))                  
                :type "class")
                nil [110855 111477]))          
      :file "backend_bases.py"
      :pointmax 111477
      :fsize 111476
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((INDENT_BLOCK 85701 . 85781) (NEWLINE 85700 . 85701) (COLON 85699 . 85700) (TRY 85621 . 85624) (AS 85693 . 85695)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The figure module provides the top-level
:class:`~matplotlib.artist.Artist`, the :class:`Figure`, which
contains all the plot elements.  The following classes are defined

:class:`SubplotParams`
    control the default spacing of the subplots

:class:`Figure`
    top level container for all plot elements

\"\"\"" code nil nil [1 315])
            ("" code nil nil [340 425])
            ("six" include nil nil [427 437])
            ("warnings" include nil nil [439 454])
            ("operator" include nil nil [455 486])
            ("numpy" include nil nil [488 506])
            ("matplotlib" include nil nil [508 539])
            ("matplotlib" include nil nil [540 572])
            ("matplotlib" include nil nil [573 623])
            ("matplotlib.artist" include nil nil [625 660])
            ("matplotlib.artist" include nil nil [661 718])
            ("matplotlib.cbook" include nil nil [720 752])
            ("matplotlib.cbook" include nil nil [754 798])
            ("matplotlib" include nil nil [800 838])
            ("matplotlib.image" include nil nil [839 879])
            ("matplotlib.colorbar" include nil nil [881 915])
            ("matplotlib.axes" include nil nil [917 985])
            ("matplotlib.blocking_input" include nil nil [986 1065])
            ("matplotlib.legend" include nil nil [1066 1102])
            ("matplotlib.patches" include nil nil [1103 1143])
            ("" code nil nil [1179 1270])
            ("matplotlib.text" include nil nil [1271 1323])
            ("" code nil nil [1358 1443])
            ("matplotlib.backend_bases" include nil nil [1444 1496])
            ("docstring" code nil nil [1498 1563])
            ("_stale_figure_callback" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1593 1597])
                    ("val" variable nil (reparse-symbol function_parameters) [1599 1602]))                  )
                nil [1566 1657])
            ("AxesStack" type
               (:documentation "
    Specialization of the Stack to handle all tracking of Axes in a Figure.
    This stack stores ``key, (ind, axes)`` pairs, where:

        * **key** should be a hash of the args and kwargs
          used in generating the Axes.
        * **ind** is a serial number for tracking the order
          in which axes were added.

    The AxesStack is a callable, where ``ax_stack()`` returns
    the current axes. Alternatively the :meth:`current_key_axes` will
    return the current key and associated axes.

    "
                :superclasses ("Stack")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Stack" code nil (reparse-symbol indented_block_body) [2240 2260])
                            ("self" variable nil (reparse-symbol indented_block_body) [2269 2282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2225 2229]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2212 2283])
                    ("as_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2300 2304]))                          
                        :documentation "
        Return a list of the Axes instances that have been added to the figure
        ")
                        (reparse-symbol indented_block_body) [2288 2521])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2534 2538])
                            ("key" variable nil (reparse-symbol function_parameters) [2540 2543]))                          
                        :documentation "
        Return the Axes instance that was added with *key*.
        If it is not present, return None.
        ")
                        (reparse-symbol indented_block_body) [2526 2790])
                    ("_entry_from_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2816 2820])
                            ("e" variable nil (reparse-symbol function_parameters) [2822 2823]))                          )
                        (reparse-symbol indented_block_body) [2795 2933])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2949 2953])
                            ("a" variable nil (reparse-symbol function_parameters) [2955 2956]))                          
                        :documentation "Remove the axes from the stack.")
                        (reparse-symbol indented_block_body) [2938 3058])
                    ("bubble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3074 3078])
                            ("a" variable nil (reparse-symbol function_parameters) [3080 3081]))                          
                        :documentation "
        Move the given axes, which must already exist in the
        stack, to the top.
        ")
                        (reparse-symbol indented_block_body) [3063 3256])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3269 3273])
                            ("key" variable nil (reparse-symbol function_parameters) [3275 3278])
                            ("a" variable nil (reparse-symbol function_parameters) [3280 3281]))                          
                        :documentation "
        Add Axes *a*, with key *key*, to the stack, and return the stack.

        If *a* is already on the stack, don't add it again, but
        return *None*.
        ")
                        (reparse-symbol indented_block_body) [3261 4251])
                    ("current_key_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4277 4281]))                          
                        :documentation "
        Return a tuple of ``(key, axes)`` for the active axes.

        If no axes exists on the stack, then returns ``(None, None)``.

        ")
                        (reparse-symbol indented_block_body) [4256 4630])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4648 4652]))                          )
                        (reparse-symbol indented_block_body) [4635 4697])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4719 4723])
                            ("a" variable nil (reparse-symbol function_parameters) [4725 4726]))                          )
                        (reparse-symbol indented_block_body) [4702 4764]))                  
                :type "class")
                nil [1659 4764])
            ("SubplotParams" type
               (:documentation "
    A class to hold the parameters for a subplot
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        All dimensions are fraction of the figure width or height.
        All values default to their rc params

        The following attributes are available

        left  : 0.125
            The left side of the subplots of the figure

        right : 0.9
            The right side of the subplots of the figure

        bottom : 0.1
            The bottom of the subplots of the figure

        top : 0.9
            The top of the subplots of the figure

        wspace : 0.2
            The amount of width reserved for blank space between subplots,
            expressed as a fraction of the average axis width

        hspace : 0.2
            The amount of height reserved for white space between subplots,
            expressed as a fraction of the average axis height
        \"\"\"" code nil (reparse-symbol indented_block_body) [4981 5778])
                            ("self" variable nil (reparse-symbol indented_block_body) [5788 5808])
                            ("self" code nil (reparse-symbol indented_block_body) [5817 5870]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4877 4881])
                            ("left" variable nil (reparse-symbol function_parameters) [4883 4887])
                            ("bottom" variable nil (reparse-symbol function_parameters) [4894 4900])
                            ("right" variable nil (reparse-symbol function_parameters) [4907 4912])
                            ("top" variable nil (reparse-symbol function_parameters) [4919 4922])
                            ("wspace" variable nil (reparse-symbol function_parameters) [4946 4952])
                            ("hspace" variable nil (reparse-symbol function_parameters) [4959 4965]))                          
                        :documentation "
        All dimensions are fraction of the figure width or height.
        All values default to their rc params

        The following attributes are available

        left  : 0.125
            The left side of the subplots of the figure

        right : 0.9
            The right side of the subplots of the figure

        bottom : 0.1
            The bottom of the subplots of the figure

        top : 0.9
            The top of the subplots of the figure

        wspace : 0.2
            The amount of width reserved for blank space between subplots,
            expressed as a fraction of the average axis width

        hspace : 0.2
            The amount of height reserved for white space between subplots,
            expressed as a fraction of the average axis height
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4864 5871])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5887 5891])
                            ("left" variable nil (reparse-symbol function_parameters) [5893 5897])
                            ("bottom" variable nil (reparse-symbol function_parameters) [5904 5910])
                            ("right" variable nil (reparse-symbol function_parameters) [5917 5922])
                            ("top" variable nil (reparse-symbol function_parameters) [5929 5932])
                            ("wspace" variable nil (reparse-symbol function_parameters) [5954 5960])
                            ("hspace" variable nil (reparse-symbol function_parameters) [5967 5973]))                          
                        :documentation "
        Update the current values.  If any kwarg is None, default to
        the current value, if set, otherwise to rc

        ")
                        (reparse-symbol indented_block_body) [5876 7182])
                    ("_update_this" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7204 7208])
                            ("s" variable nil (reparse-symbol function_parameters) [7210 7211])
                            ("val" variable nil (reparse-symbol function_parameters) [7213 7216]))                          )
                        (reparse-symbol indented_block_body) [7187 7423]))                  
                :type "class")
                nil [4766 7423])
            ("Figure" type
               (:documentation "
    The Figure instance supports callbacks through a *callbacks*
    attribute which is a :class:`matplotlib.cbook.CallbackRegistry`
    instance.  The events you can connect to are 'dpi_changed', and
    the callback will be called with ``func(fig)`` where fig is the
    :class:`Figure` instance.

    *patch*
       The figure patch is drawn by a
       :class:`matplotlib.patches.Rectangle` instance

    *suppressComposite*
       For multiple figure images, the figure will make composite
       images depending on the renderer option_image_nocomposite
       function.  If suppressComposite is True|False, this will
       override the renderer.
    "
                :superclasses ("Artist")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8135 8139]))                          )
                        (reparse-symbol indented_block_body) [8123 8197])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *figsize*
            w,h tuple in inches

        *dpi*
            Dots per inch

        *facecolor*
            The figure patch facecolor; defaults to rc ``figure.facecolor``

        *edgecolor*
            The figure patch edge color; defaults to rc ``figure.edgecolor``

        *linewidth*
            The figure patch edge linewidth; the default linewidth of the frame

        *frameon*
            If *False*, suppress drawing the figure frame

        *subplotpars*
            A :class:`SubplotParams` instance, defaults to rc

        *tight_layout*
            If *False* use *subplotpars*; if *True* adjust subplot
            parameters using :meth:`tight_layout` with default padding.
            When providing a dict containing the keys `pad`, `w_pad`, `h_pad`
            and `rect`, the default :meth:`tight_layout` paddings will be
            overridden.
            Defaults to rc ``figure.autolayout``.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8772 9725])
                            ("Artist" code nil (reparse-symbol indented_block_body) [9734 9755])
                            ("del" code nil (reparse-symbol indented_block_body) [9999 10013])
                            ("self" variable nil (reparse-symbol indented_block_body) [10022 10063])
                            ("if" code nil (reparse-symbol indented_block_body) [10073 10142])
                            ("if" code nil (reparse-symbol indented_block_body) [10150 10207])
                            ("if" code nil (reparse-symbol indented_block_body) [10215 10290])
                            ("if" code nil (reparse-symbol indented_block_body) [10298 10373])
                            ("if" code nil (reparse-symbol indented_block_body) [10381 10450])
                            ("self" variable nil (reparse-symbol indented_block_body) [10459 10510])
                            ("self" variable nil (reparse-symbol indented_block_body) [10519 10568])
                            ("self" variable nil (reparse-symbol indented_block_body) [10626 10641])
                            ("self" variable nil (reparse-symbol indented_block_body) [10650 10717])
                            ("self" variable nil (reparse-symbol indented_block_body) [10727 10749])
                            ("self" variable nil (reparse-symbol indented_block_body) [10759 10804])
                            ("self" variable nil (reparse-symbol indented_block_body) [10859 11030])
                            ("self" code nil (reparse-symbol indented_block_body) [11040 11074])
                            ("self" code nil (reparse-symbol indented_block_body) [11083 11107])
                            ("self" variable nil (reparse-symbol indented_block_body) [11117 11151])
                            ("if" code nil (reparse-symbol indented_block_body) [11160 11213])
                            ("self" variable nil (reparse-symbol indented_block_body) [11222 11240])
                            ("self" variable nil (reparse-symbol indented_block_body) [11249 11270])
                            ("if" code nil (reparse-symbol indented_block_body) [11280 11346])
                            ("self" variable nil (reparse-symbol indented_block_body) [11355 11385])
                            ("self" code nil (reparse-symbol indented_block_body) [11394 11429])
                            ("self" variable nil (reparse-symbol indented_block_body) [11439 11466])
                            ("self" code nil (reparse-symbol indented_block_body) [11517 11527])
                            ("self" variable nil (reparse-symbol indented_block_body) [11536 11563]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8215 8219])
                            ("figsize" variable nil (reparse-symbol function_parameters) [8238 8245])
                            ("dpi" variable nil (reparse-symbol function_parameters) [8302 8305])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [8358 8367])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [8426 8435])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [8494 8503])
                            ("frameon" variable nil (reparse-symbol function_parameters) [8564 8571])
                            ("subplotpars" variable nil (reparse-symbol function_parameters) [8638 8649])
                            ("tight_layout" variable nil (reparse-symbol function_parameters) [8690 8702]))                          
                        :documentation "
        *figsize*
            w,h tuple in inches

        *dpi*
            Dots per inch

        *facecolor*
            The figure patch facecolor; defaults to rc ``figure.facecolor``

        *edgecolor*
            The figure patch edge color; defaults to rc ``figure.edgecolor``

        *linewidth*
            The figure patch edge linewidth; the default linewidth of the frame

        *frameon*
            If *False*, suppress drawing the figure frame

        *subplotpars*
            A :class:`SubplotParams` instance, defaults to rc

        *tight_layout*
            If *False* use *subplotpars*; if *True* adjust subplot
            parameters using :meth:`tight_layout` with default padding.
            When providing a dict containing the keys `pad`, `w_pad`, `h_pad`
            and `rect`, the default :meth:`tight_layout` paddings will be
            overridden.
            Defaults to rc ``figure.autolayout``.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8202 11564])
                    ("_repr_html_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11747 11751]))                          )
                        (reparse-symbol indented_block_body) [11731 12085])
                    ("show" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12099 12103])
                            ("warn" variable nil (reparse-symbol function_parameters) [12105 12109]))                          
                        :documentation "
        If using a GUI backend with pyplot, display the figure window.

        If the figure was not created using
        :func:`~matplotlib.pyplot.figure`, it will lack a
        :class:`~matplotlib.backend_bases.FigureManagerBase`, and
        will raise an AttributeError.

        For non-GUI backends, this does nothing, in which case
        a warning will be issued if *warn* is True (default).
        ")
                        (reparse-symbol indented_block_body) [12090 13241])
                    ("_get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13260 13264]))                          )
                        (reparse-symbol indented_block_body) [13246 13306])
                    ("axes" variable nil (reparse-symbol indented_block_body) [13311 13383])
                    ("_get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13402 13406]))                          )
                        (reparse-symbol indented_block_body) [13389 13434])
                    ("_set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13452 13456])
                            ("dpi" variable nil (reparse-symbol function_parameters) [13458 13461]))                          )
                        (reparse-symbol indented_block_body) [13439 13647])
                    ("dpi" variable nil (reparse-symbol indented_block_body) [13651 13685])
                    ("get_tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13712 13716]))                          
                        :documentation "
        Return the Boolean flag, True to use :meth`tight_layout` when drawing.
        ")
                        (reparse-symbol indented_block_body) [13691 13849])
                    ("set_tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13875 13879])
                            ("tight" variable nil (reparse-symbol function_parameters) [13881 13886]))                          
                        :documentation "
        Set whether :meth:`tight_layout` is used upon drawing.
        If None, the rcParams['figure.autolayout'] value will be set.

        When providing a dict containing the keys `pad`, `w_pad`, `h_pad`
        and `rect`, the default :meth:`tight_layout` paddings will be
        overridden.

        ACCEPTS: [True | False | dict | None ]
        ")
                        (reparse-symbol indented_block_body) [13854 14469])
                    ("autofmt_xdate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14492 14496])
                            ("bottom" variable nil (reparse-symbol function_parameters) [14498 14504])
                            ("rotation" variable nil (reparse-symbol function_parameters) [14510 14518])
                            ("ha" variable nil (reparse-symbol function_parameters) [14523 14525]))                          
                        :documentation "
        Date ticklabels often overlap, so it is useful to rotate them
        and right align them.  Also, a common use case is a number of
        subplots with shared xaxes where the x-axis is date data.  The
        ticklabels are often long, and it helps to rotate them on the
        bottom subplot and turn them off on other subplots, as well as
        turn off xlabels.

        *bottom*
            The bottom of the subplots for :meth:`subplots_adjust`

        *rotation*
            The rotation of the xtick labels

        *ha*
            The horizontal alignment of the xticklabels
        ")
                        (reparse-symbol indented_block_body) [14474 16008])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16030 16034]))                          )
                        (reparse-symbol indented_block_body) [16013 16407])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16425 16429])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [16431 16441]))                          
                        :documentation "
        Test whether the mouse event occurred on the figure.

        Returns True,{}
        ")
                        (reparse-symbol indented_block_body) [16412 16797])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16824 16828])
                            ("args" variable nil (reparse-symbol function_parameters) [16830 16835])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16837 16845]))                          )
                        (reparse-symbol indented_block_body) [16802 16945])
                    ("suptitle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16963 16967])
                            ("t" variable nil (reparse-symbol function_parameters) [16969 16970])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16972 16980]))                          
                        :documentation "
        Add a centered title to the figure.

        kwargs are :class:`matplotlib.text.Text` properties.  Using figure
        coordinates, the defaults are:

          x : 0.5
            The x location of the text in figure coords

          y : 0.98
            The y location of the text in figure coords

          horizontalalignment : 'center'
            The horizontal alignment of the text

          verticalalignment : 'top'
            The vertical alignment of the text

        If the `fontproperties` keyword argument is given then the
        rcParams defaults for `fontsize` (`figure.titlesize`) and
        `fontweight` (`figure.titleweight`) will be ignored in favour
        of the `FontProperties` defaults.

        A :class:`matplotlib.text.Text` instance is returned.

        Example::

          fig.suptitle('this is the figure title', fontsize=12)
        ")
                        (reparse-symbol indented_block_body) [16950 18853])
                    ("set_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18873 18877])
                            ("canvas" variable nil (reparse-symbol function_parameters) [18879 18885]))                          
                        :documentation "
        Set the canvas that contains the figure

        ACCEPTS: a FigureCanvas instance
        ")
                        (reparse-symbol indented_block_body) [18858 19031])
                    ("" code nil (reparse-symbol indented_block_body) [19053 19060])
                    ("hold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19074 19078])
                            ("b" variable nil (reparse-symbol function_parameters) [19080 19081]))                          
                        :documentation "
        Set the hold state.  If hold is None (default), toggle the
        hold state.  Else set the hold state to boolean value b.

        e.g.::

            hold()      # toggle hold
            hold(True)  # hold is on
            hold(False) # hold is off

        All \"hold\" machinery is deprecated.
        ")
                        (reparse-symbol indented_block_body) [19065 19523])
                    ("figimage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19541 19545])
                            ("X" variable nil (reparse-symbol function_parameters) [19547 19548])
                            ("xo" variable nil (reparse-symbol function_parameters) [19567 19569])
                            ("yo" variable nil (reparse-symbol function_parameters) [19590 19592])
                            ("alpha" variable nil (reparse-symbol function_parameters) [19613 19618])
                            ("norm" variable nil (reparse-symbol function_parameters) [19642 19646])
                            ("cmap" variable nil (reparse-symbol function_parameters) [19670 19674])
                            ("vmin" variable nil (reparse-symbol function_parameters) [19698 19702])
                            ("vmax" variable nil (reparse-symbol function_parameters) [19726 19730])
                            ("origin" variable nil (reparse-symbol function_parameters) [19754 19760])
                            ("resize" variable nil (reparse-symbol function_parameters) [19784 19790])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19815 19823]))                          
                        :documentation "
        Adds a non-resampled image to the figure.

        call signatures::

          figimage(X, **kwargs)

        adds a non-resampled array *X* to the figure.

        ::

          figimage(X, xo, yo)

        with pixel offsets *xo*, *yo*,

        *X* must be a float array:

        * If *X* is MxN, assume luminance (grayscale)
        * If *X* is MxNx3, assume RGB
        * If *X* is MxNx4, assume RGBA

        Optional keyword arguments:

          =========   =========================================================
          Keyword     Description
          =========   =========================================================
          resize      a boolean, True or False. If \"True\", then re-size the
                      Figure to match the given image size.
          xo or yo    An integer, the *x* and *y* image offset in pixels
          cmap        a :class:`matplotlib.colors.Colormap` instance, e.g.,
                      cm.jet. If *None*, default to the rc ``image.cmap``
                      value
          norm        a :class:`matplotlib.colors.Normalize` instance. The
                      default is normalization().  This scales luminance -> 0-1
          vmin|vmax   are used to scale a luminance image to 0-1.  If either
                      is *None*, the min and max of the luminance values will
                      be used.  Note if you pass a norm instance, the settings
                      for *vmin* and *vmax* will be ignored.
          alpha       the alpha blending value, default is *None*
          origin      [ 'upper' | 'lower' ] Indicates where the [0,0] index of
                      the array is in the upper left or lower left corner of
                      the axes. Defaults to the rc image.origin value
          =========   =========================================================

        figimage complements the axes image
        (:meth:`~matplotlib.axes.Axes.imshow`) which will be resampled
        to fit the current axes.  If you want a resampled image to
        fill the entire figure, you can define an
        :class:`~matplotlib.axes.Axes` with extent [0,0,1,1].

        An :class:`matplotlib.image.FigureImage` instance is returned.

        .. plot:: mpl_examples/pylab_examples/figimage_demo.py


        Additional kwargs are Artist kwargs passed on to
        :class:`~matplotlib.image.FigureImage`
        ")
                        (reparse-symbol indented_block_body) [19528 22847])
                    ("set_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22872 22876])
                            ("w" variable nil (reparse-symbol function_parameters) [22878 22879])
                            ("h" variable nil (reparse-symbol function_parameters) [22881 22882])
                            ("forward" variable nil (reparse-symbol function_parameters) [22889 22896]))                          
                        :documentation "Set the figure size in inches (1in == 2.54cm)

        Usage ::

             fig.set_size_inches(w,h)  # OR
             fig.set_size_inches((w,h))

        optional kwarg *forward=True* will cause the canvas size to be
        automatically updated; e.g., you can resize the figure window
        from the shell

        ACCEPTS: a w,h tuple with w,h in inches

        See Also
        --------

        matplotlib.Figure.get_size_inches
        ")
                        (reparse-symbol indented_block_body) [22852 24056])
                    ("get_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24081 24085]))                          
                        :documentation "
        Returns the current size of the figure in inches (1in == 2.54cm)
        as an numpy array.

        Returns
        -------
        size : ndarray
           The size of the figure in inches

        See Also
        --------

        matplotlib.Figure.set_size_inches
        ")
                        (reparse-symbol indented_block_body) [24061 24435])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24458 24462]))                          )
                        (reparse-symbol indented_block_body) [24440 24560])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24583 24587]))                          )
                        (reparse-symbol indented_block_body) [24565 24685])
                    ("get_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24707 24711]))                          )
                        (reparse-symbol indented_block_body) [24690 24793])
                    ("get_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24816 24820]))                          )
                        (reparse-symbol indented_block_body) [24798 24904])
                    ("get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24921 24925]))                          )
                        (reparse-symbol indented_block_body) [24909 24988])
                    ("get_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25009 25013]))                          )
                        (reparse-symbol indented_block_body) [24993 25089])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25112 25116])
                            ("color" variable nil (reparse-symbol function_parameters) [25118 25123]))                          
                        :documentation "
        Set the edge color of the Figure rectangle

        ACCEPTS: any matplotlib color - see help(colors)
        ")
                        (reparse-symbol indented_block_body) [25094 25299])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25322 25326])
                            ("color" variable nil (reparse-symbol function_parameters) [25328 25333]))                          
                        :documentation "
        Set the face color of the Figure rectangle

        ACCEPTS: any matplotlib color - see help(colors)
        ")
                        (reparse-symbol indented_block_body) [25304 25509])
                    ("set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25526 25530])
                            ("val" variable nil (reparse-symbol function_parameters) [25532 25535]))                          
                        :documentation "
        Set the dots-per-inch of the figure

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [25514 25679])
                    ("set_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25701 25705])
                            ("val" variable nil (reparse-symbol function_parameters) [25707 25710])
                            ("forward" variable nil (reparse-symbol function_parameters) [25712 25719]))                          
                        :documentation "
        Set the width of the figure in inches

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [25684 25895])
                    ("set_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25918 25922])
                            ("val" variable nil (reparse-symbol function_parameters) [25924 25927])
                            ("forward" variable nil (reparse-symbol function_parameters) [25929 25936]))                          
                        :documentation "
        Set the height of the figure in inches

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [25900 26112])
                    ("set_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26133 26137])
                            ("b" variable nil (reparse-symbol function_parameters) [26139 26140]))                          
                        :documentation "
        Set whether the figure frame (background) is displayed or invisible

        ACCEPTS: boolean
        ")
                        (reparse-symbol indented_block_body) [26117 26320])
                    ("delaxes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26337 26341])
                            ("a" variable nil (reparse-symbol function_parameters) [26343 26344]))                          )
                        (reparse-symbol indented_block_body) [26325 26530])
                    ("_make_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26549 26553])
                            ("args" variable nil (reparse-symbol function_parameters) [26555 26560])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26562 26570]))                          )
                        (reparse-symbol indented_block_body) [26535 27563])
                    ("add_axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27611 27615])
                            ("args" variable nil (reparse-symbol function_parameters) [27617 27622])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27624 27632]))                          
                        :documentation "
        Add an axes at position *rect* [*left*, *bottom*, *width*,
        *height*] where all quantities are in fractions of figure
        width and height.  kwargs are legal
        :class:`~matplotlib.axes.Axes` kwargs plus *projection* which
        sets the projection type of the axes.  (For backward
        compatibility, ``polar=True`` may also be provided, which is
        equivalent to ``projection='polar'``).  Valid values for
        *projection* are: %(projection_names)s.  Some of these
        projections support  additional kwargs, which may be provided
        to :meth:`add_axes`. Typical usage::

            rect = l,b,w,h
            fig.add_axes(rect)
            fig.add_axes(rect, frameon=False, facecolor='g')
            fig.add_axes(rect, polar=True)
            fig.add_axes(rect, projection='polar')
            fig.add_axes(ax)

        If the figure already has an axes with the same parameters,
        then it will simply make that axes current and return it.  If
        you do not want this behavior, e.g., you want to force the
        creation of a new Axes, you must use a unique set of args and
        kwargs.  The axes :attr:`~matplotlib.axes.Axes.label`
        attribute has been exposed for this purpose.  e.g., if you want
        two axes that are otherwise identical to be added to the
        figure, make sure you give them unique labels::

            fig.add_axes(rect, label='axes1')
            fig.add_axes(rect, label='axes2')

        In rare circumstances, add_axes may be called with a single
        argument, an Axes instance already created in the present
        figure but not in the figure's list of axes.  For example,
        if an axes has been removed with :meth:`delaxes`, it can
        be restored with::

            fig.add_axes(ax)

        In all cases, the :class:`~matplotlib.axes.Axes` instance
        will be returned.

        In addition to *projection*, the following kwargs are supported:

        %(Axes)s
        ")
                        (reparse-symbol indented_block_body) [27568 30978])
                    ("add_subplot" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31029 31033])
                            ("args" variable nil (reparse-symbol function_parameters) [31035 31040])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31042 31050]))                          
                        :documentation "
        Add a subplot.  Examples::

            fig.add_subplot(111)

            # equivalent but more general
            fig.add_subplot(1,1,1)

            # add subplot with red background
            fig.add_subplot(212, facecolor='r')

            # add a polar subplot
            fig.add_subplot(111, projection='polar')

            # add Subplot instance sub
            fig.add_subplot(sub)

        *kwargs* are legal :class:`~matplotlib.axes.Axes` kwargs plus
        *projection*, which chooses a projection type for the axes.
        (For backward compatibility, *polar=True* may also be
        provided, which is equivalent to *projection='polar'*). Valid
        values for *projection* are: %(projection_names)s.  Some of
        these projections
        support additional *kwargs*, which may be provided to
        :meth:`add_axes`.

        The :class:`~matplotlib.axes.Axes` instance will be returned.

        If the figure already has a subplot with key (*args*,
        *kwargs*) then it will simply make that subplot current and
        return it.

        .. seealso:: :meth:`~matplotlib.pyplot.subplot` for an
           explanation of the args.

        The following kwargs are supported:

        %(Axes)s
        ")
                        (reparse-symbol indented_block_body) [30983 34226])
                    ("__remove_ax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34247 34251])
                            ("ax" variable nil (reparse-symbol function_parameters) [34253 34255]))                          )
                        (reparse-symbol indented_block_body) [34231 35173])
                    ("clf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35186 35190])
                            ("keep_observers" variable nil (reparse-symbol function_parameters) [35192 35206]))                          
                        :documentation "
        Clear the figure.

        Set *keep_observers* to True if, for example,
        a gui widget is tracking the axes in the figure.
        ")
                        (reparse-symbol indented_block_body) [35178 36039])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36054 36058]))                          
                        :documentation "
        Clear the figure -- synonym for :meth:`clf`.
        ")
                        (reparse-symbol indented_block_body) [36044 36157])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36196 36200])
                            ("renderer" variable nil (reparse-symbol function_parameters) [36202 36210]))                          
                        :documentation "
        Render the figure using :class:`matplotlib.backend_bases.RendererBase`
        instance *renderer*.
        ")
                        (reparse-symbol indented_block_body) [36162 37919])
                    ("draw_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37940 37944])
                            ("a" variable nil (reparse-symbol function_parameters) [37946 37947]))                          
                        :documentation "
        draw :class:`matplotlib.artist.Artist` instance *a* only --
        this is available only after the figure is drawn
        ")
                        (reparse-symbol indented_block_body) [37924 38334])
                    ("get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38352 38356]))                          )
                        (reparse-symbol indented_block_body) [38339 38384])
                    ("legend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38400 38404])
                            ("handles" variable nil (reparse-symbol function_parameters) [38406 38413])
                            ("labels" variable nil (reparse-symbol function_parameters) [38415 38421])
                            ("args" variable nil (reparse-symbol function_parameters) [38423 38428])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38430 38438]))                          
                        :documentation "
        Place a legend in the figure.  Labels are a sequence of
        strings, handles is a sequence of
        :class:`~matplotlib.lines.Line2D` or
        :class:`~matplotlib.patches.Patch` instances, and loc can be a
        string or an integer specifying the legend location

        USAGE::

          legend( (line1, line2, line3),
                  ('label1', 'label2', 'label3'),
                  'upper right')

        The *loc* location codes are::

          'best' : 0,          (currently not supported for figure legends)
          'upper right'  : 1,
          'upper left'   : 2,
          'lower left'   : 3,
          'lower right'  : 4,
          'right'        : 5,
          'center left'  : 6,
          'center right' : 7,
          'lower center' : 8,
          'upper center' : 9,
          'center'       : 10,

        *loc* can also be an (x,y) tuple in figure coords, which
        specifies the lower left of the legend box.  figure coords are
        (0,0) is the left, bottom of the figure and 1,1 is the right,
        top.

        Keyword arguments:

          prop: [ *None* | FontProperties | dict ]
            A :class:`matplotlib.font_manager.FontProperties`
            instance. If *prop* is a dictionary, a new instance will be
            created with *prop*. If *None*, use rc settings.

          numpoints: integer
            The number of points in the legend line, default is 4

          scatterpoints: integer
            The number of points in the legend line, default is 4

          scatteryoffsets: list of floats
            a list of yoffsets for scatter symbols in legend

          markerscale: [ *None* | scalar ]
            The relative size of legend markers vs. original. If *None*, use rc
            settings.

          markerfirst: [ *True* | *False* ]
            if *True*, legend marker is placed to the left of the legend label
            if *False*, legend marker is placed to the right of the legend
            label

          frameon: [ *None* | bool ]
            Control whether the legend should be drawn on a patch (frame).
            Default is *None* which will take the value from the
            ``legend.frameon`` :data:`rcParam<matplotlib.rcParams>`.

          fancybox: [ *None* | *False* | *True* ]
            if *True*, draw a frame with a round fancybox.  If *None*, use rc

          shadow: [ *None* | *False* | *True* ]
            If *True*, draw a shadow behind legend. If *None*, use rc settings.

          framealpha: [ *None* | float ]
            Control the alpha transparency of the legend's background.
            Default is *None* which will take the value from the
            ``legend.framealpha`` :data:`rcParam<matplotlib.rcParams>`.

          facecolor: [ *None* | \"inherit\" | a color spec ]
            Control the legend's background color.
            Default is *None* which will take the value from the
            ``legend.facecolor`` :data:`rcParam<matplotlib.rcParams>`.
            If ``\"inherit\"``, it will take the ``axes.facecolor``
            :data:`rcParam<matplotlib.rcParams>`.

          edgecolor: [ *None* | \"inherit\" | a color spec ]
            Control the legend's background patch edge color.
            Default is *None* which will take the value from the
            ``legend.edgecolor`` :data:`rcParam<matplotlib.rcParams>`.
            If ``\"inherit\"``, it will take the ``axes.edgecolor``
            :data:`rcParam<matplotlib.rcParams>`.

          ncol : integer
            number of columns. default is 1

          mode : [ \"expand\" | *None* ]
            if mode is \"expand\", the legend will be horizontally expanded
            to fill the axes area (or *bbox_to_anchor*)

          title : string
            the legend title

        Padding and spacing between various elements use following keywords
        parameters. The dimensions of these values are given as a fraction
        of the fontsize. Values from rcParams will be used if None.

        ================   ====================================================
        Keyword            Description
        ================   ====================================================
        borderpad          the fractional whitespace inside the legend border
        labelspacing       the vertical space between the legend entries
        handlelength       the length of the legend handles
        handletextpad      the pad between the legend handle and text
        borderaxespad      the pad between the axes and legend border
        columnspacing      the spacing between columns
        ================   ====================================================

        .. Note:: Not all kinds of artist are supported by the legend.
                  See LINK (FIXME) for details.

        **Example:**

        .. plot:: mpl_examples/pylab_examples/figlegend_demo.py
        ")
                        (reparse-symbol indented_block_body) [38389 43558])
                    ("text" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43602 43606])
                            ("x" variable nil (reparse-symbol function_parameters) [43608 43609])
                            ("y" variable nil (reparse-symbol function_parameters) [43611 43612])
                            ("s" variable nil (reparse-symbol function_parameters) [43614 43615])
                            ("args" variable nil (reparse-symbol function_parameters) [43617 43622])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43624 43632]))                          
                        :documentation "
        Add text to figure.

        Call signature::

          text(x, y, s, fontdict=None, **kwargs)

        Add text to figure at location *x*, *y* (relative 0-1
        coords). See :func:`~matplotlib.pyplot.text` for the meaning
        of the other arguments.

        kwargs control the :class:`~matplotlib.text.Text` properties:

        %(Text)s
        ")
                        (reparse-symbol indented_block_body) [43563 44303])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44330 44334])
                            ("a" variable nil (reparse-symbol function_parameters) [44336 44337]))                          )
                        (reparse-symbol indented_block_body) [44308 44485])
                    ("gca" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44528 44532])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44534 44542]))                          
                        :documentation "
        Get the current axes, creating one if necessary

        The following kwargs are supported for ensuring the returned axes
        adheres to the given projection etc., and for axes creation if
        the active axes does not exist:

        %(Axes)s

        ")
                        (reparse-symbol indented_block_body) [44490 46169])
                    ("sca" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46182 46186])
                            ("a" variable nil (reparse-symbol function_parameters) [46188 46189]))                          )
                        (reparse-symbol indented_block_body) [46174 46355])
                    ("_gci" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46369 46373]))                          
                        :documentation "
        helper for :func:`~matplotlib.pyplot.gci`;
        do not use elsewhere.
        ")
                        (reparse-symbol indented_block_body) [46360 47043])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47065 47069]))                          )
                        (reparse-symbol indented_block_body) [47048 48049])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48071 48075])
                            ("state" variable nil (reparse-symbol function_parameters) [48077 48082]))                          )
                        (reparse-symbol indented_block_body) [48054 49584])
                    ("add_axobserver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49608 49612])
                            ("func" variable nil (reparse-symbol function_parameters) [49614 49618]))                          )
                        (reparse-symbol indented_block_body) [49589 49732])
                    ("savefig" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49749 49753])
                            ("args" variable nil (reparse-symbol function_parameters) [49755 49760])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49762 49770]))                          
                        :documentation "
        Save the current figure.

        Call signature::

          savefig(fname, dpi=None, facecolor='w', edgecolor='w',
                  orientation='portrait', papertype=None, format=None,
                  transparent=False, bbox_inches=None, pad_inches=0.1,
                  frameon=None)

        The output formats available depend on the backend being used.

        Arguments:

          *fname*:
            A string containing a path to a filename, or a Python
            file-like object, or possibly some backend-dependent object
            such as :class:`~matplotlib.backends.backend_pdf.PdfPages`.

            If *format* is *None* and *fname* is a string, the output
            format is deduced from the extension of the filename. If
            the filename has no extension, the value of the rc parameter
            ``savefig.format`` is used.

            If *fname* is not a string, remember to specify *format* to
            ensure that the correct backend is used.

        Keyword arguments:

          *dpi*: [ *None* | ``scalar > 0`` | 'figure']
            The resolution in dots per inch.  If *None* it will default to
            the value ``savefig.dpi`` in the matplotlibrc file. If 'figure'
            it will set the dpi to be the value of the figure.

          *facecolor*, *edgecolor*:
            the colors of the figure rectangle

          *orientation*: [ 'landscape' | 'portrait' ]
            not supported on all backends; currently only on postscript output

          *papertype*:
            One of 'letter', 'legal', 'executive', 'ledger', 'a0' through
            'a10', 'b0' through 'b10'. Only supported for postscript
            output.

          *format*:
            One of the file extensions supported by the active
            backend.  Most backends support png, pdf, ps, eps and svg.

          *transparent*:
            If *True*, the axes patches will all be transparent; the
            figure patch will also be transparent unless facecolor
            and/or edgecolor are specified via kwargs.
            This is useful, for example, for displaying
            a plot on top of a colored background on a web page.  The
            transparency of these patches will be restored to their
            original values upon exit of this function.

          *frameon*:
            If *True*, the figure patch will be colored, if *False*, the
            figure background will be transparent.  If not provided, the
            rcParam 'savefig.frameon' will be used.

          *bbox_inches*:
            Bbox in inches. Only the given portion of the figure is
            saved. If 'tight', try to figure out the tight bbox of
            the figure.

          *pad_inches*:
            Amount of padding around the figure when bbox_inches is
            'tight'.

          *bbox_extra_artists*:
            A list of extra artists that will be considered when the
            tight bbox is calculated.

        ")
                        (reparse-symbol indented_block_body) [49737 54051])
                    ("colorbar" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54099 54103])
                            ("mappable" variable nil (reparse-symbol function_parameters) [54105 54113])
                            ("cax" variable nil (reparse-symbol function_parameters) [54115 54118])
                            ("ax" variable nil (reparse-symbol function_parameters) [54125 54127])
                            ("use_gridspec" variable nil (reparse-symbol function_parameters) [54134 54146])
                            ("kw" variable nil (reparse-symbol function_parameters) [54153 54157]))                          
                        :documentation "
        Create a colorbar for a ScalarMappable instance, *mappable*.

        Documentation for the pylab thin wrapper:
        %(colorbar_doc)s
        ")
                        (reparse-symbol indented_block_body) [54056 54853])
                    ("subplots_adjust" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54878 54882])
                            ("args" variable nil (reparse-symbol function_parameters) [54884 54889])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [54891 54899]))                          
                        :documentation "
        Call signature::

          subplots_adjust(left=None, bottom=None, right=None, top=None,
                              wspace=None, hspace=None)

        Update the :class:`SubplotParams` with *kwargs* (defaulting to rc when
        *None*) and update the subplot locations

        ")
                        (reparse-symbol indented_block_body) [54858 55927])
                    ("ginput" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55943 55947])
                            ("n" variable nil (reparse-symbol function_parameters) [55949 55950])
                            ("timeout" variable nil (reparse-symbol function_parameters) [55954 55961])
                            ("show_clicks" variable nil (reparse-symbol function_parameters) [55966 55977])
                            ("mouse_add" variable nil (reparse-symbol function_parameters) [55984 55993])
                            ("mouse_pop" variable nil (reparse-symbol function_parameters) [56012 56021])
                            ("mouse_stop" variable nil (reparse-symbol function_parameters) [56025 56035]))                          
                        :documentation "
        Blocking call to interact with the figure.

        This will wait for *n* clicks from the user and return a list of the
        coordinates of each click.

        If *timeout* is zero or negative, does not timeout.

        If *n* is zero or negative, accumulate clicks until a middle click
        (or potentially both mouse buttons at once) terminates the input.

        Right clicking cancels last input.

        The buttons used for the various actions (adding points, removing
        points, terminating the inputs) can be overriden via the
        arguments *mouse_add*, *mouse_pop* and *mouse_stop*, that give
        the associated mouse button: 1 for left, 2 for middle, 3 for
        right.

        The keyboard can also be used to select points in case your mouse
        does not have one or more of the buttons.  The delete and backspace
        keys act like right clicking (i.e., remove last point), the enter key
        terminates input and any other key (not already used by the window
        manager) selects a point.
        ")
                        (reparse-symbol indented_block_body) [55932 57507])
                    ("waitforbuttonpress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57535 57539])
                            ("timeout" variable nil (reparse-symbol function_parameters) [57541 57548]))                          
                        :documentation "
        Blocking call to interact with the figure.

        This will return True is a key was pressed, False if a mouse
        button was pressed and None if *timeout* was reached without
        either being pressed.

        If *timeout* is negative, does not timeout.
        ")
                        (reparse-symbol indented_block_body) [57512 57952])
                    ("get_default_bbox_extra_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57992 57996]))                          )
                        (reparse-symbol indented_block_body) [57957 58393])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58416 58420])
                            ("renderer" variable nil (reparse-symbol function_parameters) [58422 58430]))                          
                        :documentation "
        Return a (tight) bounding box of the figure in inches.

        It only accounts axes title, axis labels, and axis
        ticklabels. Needs improvement.
        ")
                        (reparse-symbol indented_block_body) [58398 59037])
                    ("tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59059 59063])
                            ("renderer" variable nil (reparse-symbol function_parameters) [59065 59073])
                            ("pad" variable nil (reparse-symbol function_parameters) [59080 59083])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [59090 59095])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [59123 59128])
                            ("rect" variable nil (reparse-symbol function_parameters) [59135 59139]))                          
                        :documentation "
        Adjust subplot parameters to give specified padding.

        Parameters:

          pad : float
            padding between the figure edge and the edges of subplots,
            as a fraction of the font-size.
          h_pad, w_pad : float
            padding (height/width) between edges of adjacent subplots.
            Defaults to `pad_inches`.
          rect : if rect is given, it is interpreted as a rectangle
            (left, bottom, right, top) in the normalized figure
            coordinate that the whole subplots area (including
            labels) will fit into. Default is (0, 0, 1, 1).
        ")
                        (reparse-symbol indented_block_body) [59042 60574]))                  
                :type "class")
                nil [7425 60574])
            ("figaspect" function
               (:documentation "
    Create a figure with specified aspect ratio.  If *arg* is a number,
    use that aspect ratio.  If *arg* is an array, figaspect will
    determine the width and height for a figure that would fit array
    preserving aspect ratio.  The figure width, height in inches are
    returned.  Be sure to create an axes with equal with and height,
    e.g.,

    Example usage::

      # make a figure twice as tall as it is wide
      w, h = figaspect(2.)
      fig = Figure(figsize=(w,h))
      ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
      ax.imshow(A, **kwargs)


      # make a figure with the proper aspect for an array
      A = rand(5,3)
      w, h = figaspect(A)
      fig = Figure(figsize=(w,h))
      ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
      ax.imshow(A, **kwargs)

    Thanks to Fernando Perez for this function
    "
                :arguments 
                  ( ("arg" variable nil (reparse-symbol function_parameters) [60590 60593]))                  )
                nil [60576 62694])
            ("docstring" code nil nil [62695 62749]))          
      :file "figure.py"
      :pointmax 62750
      :fsize 62749
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 59795 . 59799) (PERIOD 59800 . 59801) (NAME 48836 . 48839) (IF 48859 . 48861) (ELSE 48870 . 48874) (NAME 14377 . 14381) (IF 14408 . 14410) (ELSE 14435 . 14439) (INDENT_BLOCK 12650 . 12895) (NEWLINE 12649 . 12650) (COLON 12648 . 12649) (TRY 12553 . 12556) (AS 12642 . 12644)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
:mod:`~matplotlib.gridspec` is a module which specifies the location
of the subplot in the figure.

    ``GridSpec``
        specifies the geometry of the grid that a subplot will be
        placed. The number of rows and number of columns of the grid
        need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.

    ``SubplotSpec``
        specifies the location of the subplot in the given *GridSpec*.


\"\"\"" code nil nil [1 468])
            ("" code nil nil [493 578])
            ("six" include nil nil [580 590])
            ("six.moves" include nil nil [591 616])
            ("matplotlib" include nil nil [618 635])
            ("rcParams" variable nil nil [636 666])
            ("matplotlib.transforms" include nil nil [668 711])
            ("numpy" include nil nil [713 731])
            ("warnings" include nil nil [732 747])
            ("GridSpecBase" type
               (:documentation "
    A base class of GridSpec that specifies the geometry of the grid
    that a subplot will be placed.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the grid need to
        be set. Optionally, the ratio of heights and widths of rows and
        columns can be specified.
        \"\"\"" code nil (reparse-symbol indented_block_body) [1000 1190])
                            ("self, self" code nil (reparse-symbol indented_block_body) [1229 1269])
                            ("self" code nil (reparse-symbol indented_block_body) [1279 1316])
                            ("self" code nil (reparse-symbol indented_block_body) [1325 1360]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [915 919])
                            ("nrows" variable nil (reparse-symbol function_parameters) [921 926])
                            ("ncols" variable nil (reparse-symbol function_parameters) [928 933])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [952 965])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [972 984]))                          
                        :documentation "
        The number of rows and number of columns of the grid need to
        be set. Optionally, the ratio of heights and widths of rows and
        columns can be specified.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [902 1361])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1383 1387]))                          )
                        (reparse-symbol indented_block_body) [1366 1480])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1508 1512])
                            ("fig" variable nil (reparse-symbol function_parameters) [1514 1517]))                          )
                        (reparse-symbol indented_block_body) [1485 1538])
                    ("new_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1563 1567])
                            ("loc" variable nil (reparse-symbol function_parameters) [1569 1572])
                            ("rowspan" variable nil (reparse-symbol function_parameters) [1574 1581])
                            ("colspan" variable nil (reparse-symbol function_parameters) [1585 1592]))                          
                        :documentation "
        create and return a SuplotSpec instance.
        ")
                        (reparse-symbol indented_block_body) [1543 1787])
                    ("set_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1813 1817])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [1819 1831]))                          )
                        (reparse-symbol indented_block_body) [1792 2103])
                    ("get_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2129 2133]))                          )
                        (reparse-symbol indented_block_body) [2108 2174])
                    ("set_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2201 2205])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [2207 2220]))                          )
                        (reparse-symbol indented_block_body) [2179 2494])
                    ("get_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2521 2525]))                          )
                        (reparse-symbol indented_block_body) [2499 2567])
                    ("get_grid_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2595 2599])
                            ("fig" variable nil (reparse-symbol function_parameters) [2601 2604]))                          
                        :documentation "
        return lists of bottom and top position of rows, left and
        right positions of columns.
        ")
                        (reparse-symbol indented_block_body) [2572 4523])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4544 4548])
                            ("key" variable nil (reparse-symbol function_parameters) [4550 4553]))                          
                        :documentation "
        create and return a SuplotSpec instance.
        ")
                        (reparse-symbol indented_block_body) [4528 5993]))                  
                :type "class")
                nil [749 5993])
            ("GridSpec" type
               (:documentation "
    A class that specifies the geometry of the grid that a subplot
    will be placed. The location of grid is determined by similar way
    as the SubplotParams.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the
        grid need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6413 6603])
                            ("self" variable nil (reparse-symbol indented_block_body) [6642 6656])
                            ("self" variable nil (reparse-symbol indented_block_body) [6665 6683])
                            ("self" variable nil (reparse-symbol indented_block_body) [6692 6708])
                            ("self" variable nil (reparse-symbol indented_block_body) [6717 6729])
                            ("self" variable nil (reparse-symbol indented_block_body) [6738 6756])
                            ("self" variable nil (reparse-symbol indented_block_body) [6765 6783])
                            ("GridSpecBase" code nil (reparse-symbol indented_block_body) [6793 6950]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6222 6226])
                            ("nrows" variable nil (reparse-symbol function_parameters) [6228 6233])
                            ("ncols" variable nil (reparse-symbol function_parameters) [6235 6240])
                            ("left" variable nil (reparse-symbol function_parameters) [6259 6263])
                            ("bottom" variable nil (reparse-symbol function_parameters) [6270 6276])
                            ("right" variable nil (reparse-symbol function_parameters) [6283 6288])
                            ("top" variable nil (reparse-symbol function_parameters) [6295 6298])
                            ("wspace" variable nil (reparse-symbol function_parameters) [6322 6328])
                            ("hspace" variable nil (reparse-symbol function_parameters) [6335 6341])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [6365 6377])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [6384 6397]))                          
                        :documentation "
        The number of rows and number of columns of the
        grid need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6209 6951])
                    ("_AllowedKeys" variable nil (reparse-symbol indented_block_body) [7049 7118])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7135 7139])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7141 7149]))                          
                        :documentation "
        Update the current values.  If any kwarg is None, default to
        the current value, if set, otherwise to rc.
        ")
                        (reparse-symbol indented_block_body) [7124 8688])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8718 8722])
                            ("fig" variable nil (reparse-symbol function_parameters) [8724 8727]))                          
                        :documentation "
        return a dictionary of subplot layout parameters. The default
        parameters are from rcParams unless a figure attribute is set.
        ")
                        (reparse-symbol indented_block_body) [8695 9367])
                    ("locally_modified_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9408 9412]))                          )
                        (reparse-symbol indented_block_body) [9372 9481])
                    ("tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9504 9508])
                            ("fig" variable nil (reparse-symbol function_parameters) [9510 9513])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9515 9523])
                            ("pad" variable nil (reparse-symbol function_parameters) [9530 9533])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [9540 9545])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [9552 9557])
                            ("rect" variable nil (reparse-symbol function_parameters) [9564 9568]))                          
                        :documentation "
        Adjust subplot parameters to give specified padding.

        Parameters:

        pad : float
            padding between the figure edge and the edges of subplots, as a fraction of the font-size.
        h_pad, w_pad : float
            padding (height/width) between edges of adjacent subplots.
            Defaults to `pad_inches`.
        rect : if rect is given, it is interpreted as a rectangle
            (left, bottom, right, top) in the normalized figure
            coordinate that the whole subplots area (including
            labels) will fit into. Default is (0, 0, 1, 1).
        ")
                        (reparse-symbol indented_block_body) [9487 11066]))                  
                :type "class")
                nil [5995 11066])
            ("GridSpecFromSubplotSpec" type
               (:documentation "
    GridSpec whose subplot layout parameters are inherited from the
    location specified by a given SubplotSpec.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the grid need to
        be set. An instance of SubplotSpec is also needed to be set
        from which the layout parameters will be inherited. The wspace
        and hspace of the layout can be optionally specified or the
        default values (from the figure or rcParams) will be used.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11420 11778])
                            ("self" variable nil (reparse-symbol indented_block_body) [11787 11806])
                            ("self" variable nil (reparse-symbol indented_block_body) [11815 11834])
                            ("self" variable nil (reparse-symbol indented_block_body) [11844 11877])
                            ("GridSpecBase" code nil (reparse-symbol indented_block_body) [11887 12044]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11261 11265])
                            ("nrows" variable nil (reparse-symbol function_parameters) [11267 11272])
                            ("ncols" variable nil (reparse-symbol function_parameters) [11274 11279])
                            ("subplot_spec" variable nil (reparse-symbol function_parameters) [11298 11310])
                            ("wspace" variable nil (reparse-symbol function_parameters) [11329 11335])
                            ("hspace" variable nil (reparse-symbol function_parameters) [11342 11348])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [11372 11385])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [11392 11404]))                          
                        :documentation "
        The number of rows and number of columns of the grid need to
        be set. An instance of SubplotSpec is also needed to be set
        from which the layout parameters will be inherited. The wspace
        and hspace of the layout can be optionally specified or the
        default values (from the figure or rcParams) will be used.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11248 12045])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12074 12078])
                            ("fig" variable nil (reparse-symbol function_parameters) [12080 12083]))                          
                        :documentation "
        return a dictionary of subplot layout parameters.
        ")
                        (reparse-symbol indented_block_body) [12051 12990])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13024 13028]))                          )
                        (reparse-symbol indented_block_body) [12996 13166]))                  
                :type "class")
                nil [11068 13166])
            ("SubplotSpec" type
               (:documentation "
    specifies the location of the subplot in the given *GridSpec*.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell.

        The index stars from 0.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13338 13557])
                            ("rows, cols" code nil (reparse-symbol indented_block_body) [13567 13603])
                            ("total" code nil (reparse-symbol indented_block_body) [13612 13629])
                            ("self" variable nil (reparse-symbol indented_block_body) [13639 13664])
                            ("self" variable nil (reparse-symbol indented_block_body) [13673 13689])
                            ("self" variable nil (reparse-symbol indented_block_body) [13698 13714]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13296 13300])
                            ("gridspec" variable nil (reparse-symbol function_parameters) [13302 13310])
                            ("num1" variable nil (reparse-symbol function_parameters) [13312 13316])
                            ("num2" variable nil (reparse-symbol function_parameters) [13318 13322]))                          
                        :documentation "
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell.

        The index stars from 0.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13283 13715])
                    ("get_gridspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13737 13741]))                          )
                        (reparse-symbol indented_block_body) [13720 13774])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13797 13801]))                          
                        :documentation "
        get the subplot geometry, e.g., 2,2,3. Unlike SuplorParams,
        index is 0-based
        ")
                        (reparse-symbol indented_block_body) [13780 14025])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14048 14052])
                            ("fig" variable nil (reparse-symbol function_parameters) [14054 14057])
                            ("return_all" variable nil (reparse-symbol function_parameters) [14059 14069]))                          
                        :documentation "
        update the subplot position from fig.subplotpars
        ")
                        (reparse-symbol indented_block_body) [14031 15252])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15286 15290]))                          )
                        (reparse-symbol indented_block_body) [15258 15556])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15572 15576])
                            ("other" variable nil (reparse-symbol function_parameters) [15578 15583]))                          )
                        (reparse-symbol indented_block_body) [15561 15982])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16000 16004]))                          )
                        (reparse-symbol indented_block_body) [15987 16113]))                  
                :type "class")
                nil [13168 16113]))          
      :file "gridspec.py"
      :pointmax 16113
      :fsize 16112
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 10206 . 10210) (PERIOD 10211 . 10212)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The image module supports basic image loading, rescaling and display
operations.

\"\"\"" code nil nil [1 90])
            ("" code nil nil [114 199])
            ("six" include nil nil [201 211])
            ("six.moves.urllib.parse" include nil nil [212 255])
            ("six.moves.urllib.request" include nil nil [256 300])
            ("io" include nil nil [301 323])
            ("math" include nil nil [325 346])
            ("os" include nil nil [347 356])
            ("numpy" include nil nil [358 376])
            ("matplotlib" include nil nil [378 409])
            ("matplotlib.artist" include nil nil [410 445])
            ("matplotlib.artist" include nil nil [446 495])
            ("matplotlib.colors" include nil nil [496 531])
            ("matplotlib.cm" include nil nil [532 558])
            ("matplotlib.cbook" include nil nil [559 591])
            ("matplotlib._image" include nil nil [663 697])
            ("matplotlib._png" include nil nil [698 728])
            ("matplotlib._image" include nil nil [822 853])
            ("" code nil nil [889 1001])
            ("_interpd_" variable nil nil [1051 1664])
            ("interpolations_names" variable nil nil [1666 1717])
            ("composite_images" function
               (:documentation "
    Composite a number of RGBA images into one.  The images are
    composited in the order in which they appear in the `images` list.

    Parameters
    ----------
    images : list of Images
        Each must have a `make_image` method.  For each image,
        `can_composite` should return `True`, though this is not
        enforced by this function.  Each image must have a purely
        affine transformation with no shear.

    renderer : RendererBase instance

    magnification : float
        The additional magnification to apply for the renderer in use.

    Returns
    -------
    tuple : image, offset_x, offset_y
        Returns the tuple:

        - image: A numpy array of the same type as the input images.

        - offset_x, offset_y: The offset of the image (left, bottom)
          in the output figure.
    "
                :arguments 
                  ( ("images" variable nil (reparse-symbol function_parameters) [1741 1747])
                    ("renderer" variable nil (reparse-symbol function_parameters) [1749 1757])
                    ("magnification" variable nil (reparse-symbol function_parameters) [1759 1772]))                  )
                nil [1720 3574])
            ("_draw_list_compositing_images" function
               (:documentation "
    Draw a sorted list of artists, compositing images into a single
    image where possible.

    For internal matplotlib use only: It is here to reduce duplication
    between `Figure.draw` and `Axes.draw`, but otherwise should not be
    generally useful.
    "
                :arguments 
                  ( ("renderer" variable nil (reparse-symbol function_parameters) [3619 3627])
                    ("parent" variable nil (reparse-symbol function_parameters) [3629 3635])
                    ("dsu" variable nil (reparse-symbol function_parameters) [3637 3640])
                    ("suppress_composite" variable nil (reparse-symbol function_parameters) [3642 3660]))                  )
                nil [3576 5267])
            ("_rgb_to_rgba" function
               (:documentation "
    Convert an RGB image to RGBA, as required by the image resample C++
    extension.
    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [5286 5287]))                  )
                nil [5269 5593])
            ("_ImageBase" type
               (:superclasses ("martist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [5652 5662])
                    ("_interpd" variable nil (reparse-symbol indented_block_body) [5773 5793])
                    ("_interpdr" variable nil (reparse-symbol indented_block_body) [5824 5887])
                    ("iterpnames" variable nil (reparse-symbol indented_block_body) [5892 5925])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5968 5972])
                            ("cmap" variable nil (reparse-symbol function_parameters) [5974 5978]))                          )
                        (reparse-symbol indented_block_body) [5955 6054])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6072 6076])
                            ("norm" variable nil (reparse-symbol function_parameters) [6078 6082]))                          )
                        (reparse-symbol indented_block_body) [6059 6158])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6175 6179]))                          )
                        (reparse-symbol indented_block_body) [6163 6253])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [6554 7008])
                            ("martist" code nil (reparse-symbol indented_block_body) [7017 7046])
                            ("cm" code nil (reparse-symbol indented_block_body) [7055 7099])
                            ("self" variable nil (reparse-symbol indented_block_body) [7108 7130])
                            ("if" code nil (reparse-symbol indented_block_body) [7139 7204])
                            ("self" variable nil (reparse-symbol indented_block_body) [7212 7232])
                            ("self" code nil (reparse-symbol indented_block_body) [7241 7272])
                            ("self" code nil (reparse-symbol indented_block_body) [7281 7310])
                            ("self" code nil (reparse-symbol indented_block_body) [7319 7356])
                            ("self" code nil (reparse-symbol indented_block_body) [7365 7392])
                            ("self" variable nil (reparse-symbol indented_block_body) [7401 7415])
                            ("self" variable nil (reparse-symbol indented_block_body) [7425 7445])
                            ("self" code nil (reparse-symbol indented_block_body) [7455 7474]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6271 6275])
                            ("ax" variable nil (reparse-symbol function_parameters) [6277 6279])
                            ("cmap" variable nil (reparse-symbol function_parameters) [6298 6302])
                            ("norm" variable nil (reparse-symbol function_parameters) [6326 6330])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [6354 6367])
                            ("origin" variable nil (reparse-symbol function_parameters) [6391 6397])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [6421 6431])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [6452 6461])
                            ("resample" variable nil (reparse-symbol function_parameters) [6484 6492])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6517 6525]))                          
                        :documentation "
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6258 7475])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7497 7501]))                          )
                        (reparse-symbol indented_block_body) [7480 7666])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7684 7688]))                          
                        :documentation "Get the numrows, numcols of the input image")
                        (reparse-symbol indented_block_body) [7671 7880])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7899 7903])
                            ("alpha" variable nil (reparse-symbol function_parameters) [7905 7910]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [7885 8122])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8139 8143]))                          
                        :documentation "
        Call this whenever the mappable is changed so observers can
        update state
        ")
                        (reparse-symbol indented_block_body) [8127 8359])
                    ("_make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8380 8384])
                            ("A" variable nil (reparse-symbol function_parameters) [8386 8387])
                            ("in_bbox" variable nil (reparse-symbol function_parameters) [8389 8396])
                            ("out_bbox" variable nil (reparse-symbol function_parameters) [8398 8406])
                            ("clip_bbox" variable nil (reparse-symbol function_parameters) [8408 8417])
                            ("magnification" variable nil (reparse-symbol function_parameters) [8419 8432])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [8458 8467])
                            ("round_to_pixel_border" variable nil (reparse-symbol function_parameters) [8475 8496]))                          
                        :documentation "
        Normalize, rescale and color the image `A` from the given
        in_bbox (in data space), to the given out_bbox (in pixel
        space) clipped to the given clip_bbox (also in pixel space),
        and magnified by the magnification factor.

        `A` may be a greyscale image (MxN) with a dtype of `float32`,
        `float64`, `uint16` or `uint8`, or an RGBA image (MxNx4) with
        a dtype of `float32`, `float64`, or `uint8`.

        If `unsampled` is True, the image will not be scaled, but an
        appropriate affine transformation will be returned instead.

        If `round_to_pixel_border` is True, the output image size will
        be rounded to the nearest pixel boundary.  This makes the
        images align correctly with the axes.  It should not be used
        in cases where you want exact scaling, however, such as
        FigureImage.

        Returns the resulting (image, x, y, trans), where (x, y) is
        the upper left corner of the result in pixel space, and
        `trans` is the affine transformation from the image to pixel
        space.
        ")
                        (reparse-symbol indented_block_body) [8364 18493])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18513 18517])
                            ("renderer" variable nil (reparse-symbol function_parameters) [18519 18527])
                            ("magnification" variable nil (reparse-symbol function_parameters) [18529 18542])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [18548 18557]))                          )
                        (reparse-symbol indented_block_body) [18498 18638])
                    ("_draw_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18669 18673])
                            ("renderer" variable nil (reparse-symbol function_parameters) [18675 18683])
                            ("gc" variable nil (reparse-symbol function_parameters) [18685 18687]))                          
                        :documentation "
        draw unsampled image. The renderer should support a draw_image method
        with scale parameter.
        ")
                        (reparse-symbol indented_block_body) [18643 19052])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19084 19088])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19090 19098]))                          
                        :documentation "
        return True if the image is better to be drawn unsampled.
        The derived class needs to override it.
        ")
                        (reparse-symbol indented_block_body) [19057 19260])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19299 19303])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19305 19313])
                            ("args" variable nil (reparse-symbol function_parameters) [19315 19320])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19322 19330]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19265 20232])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20250 20254])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [20256 20266]))                          
                        :documentation "
        Test whether the mouse event occured within the image.
        ")
                        (reparse-symbol indented_block_body) [20237 21140])
                    ("write_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21159 21163])
                            ("fname" variable nil (reparse-symbol function_parameters) [21165 21170]))                          
                        :documentation "Write the image to png file with fname")
                        (reparse-symbol indented_block_body) [21145 21389])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21407 21411])
                            ("A" variable nil (reparse-symbol function_parameters) [21413 21414]))                          
                        :documentation "
        Set the image array.

        ACCEPTS: numpy/PIL Image A

        Note that this function does *not* update the normalization used.
        ")
                        (reparse-symbol indented_block_body) [21394 22229])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22248 22252])
                            ("A" variable nil (reparse-symbol function_parameters) [22254 22255]))                          
                        :documentation "
        Retained for backwards compatibility - use set_data instead

        ACCEPTS: numpy array A or PIL Image")
                        (reparse-symbol indented_block_body) [22234 22563])
                    ("get_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22590 22594]))                          
                        :documentation "
        Return the interpolation method the image uses when resizing.

        One of 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36',
        'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom',
        'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', or 'none'.

        ")
                        (reparse-symbol indented_block_body) [22568 22945])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22972 22976])
                            ("s" variable nil (reparse-symbol function_parameters) [22978 22979]))                          
                        :documentation "
        Set the interpolation method the image uses when resizing.

        if None, use a value from rc setting. If 'none', the image is
        shown as is without interpolating. 'none' is only supported in
        agg, ps and pdf backends and will fall back to 'nearest' mode
        for other backends.

        ACCEPTS: ['nearest' | 'bilinear' | 'bicubic' | 'spline16' |
          'spline36' | 'hanning' | 'hamming' | 'hermite' | 'kaiser' |
          'quadric' | 'catrom' | 'gaussian' | 'bessel' | 'mitchell' |
          'sinc' | 'lanczos' | 'none' |]

        ")
                        (reparse-symbol indented_block_body) [22950 23806])
                    ("can_composite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23829 23833]))                          
                        :documentation "
        Returns `True` if the image can be composited with its neighbors.
        ")
                        (reparse-symbol indented_block_body) [23811 24098])
                    ("set_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24120 24124])
                            ("v" variable nil (reparse-symbol function_parameters) [24126 24127]))                          
                        :documentation "
        Set whether or not image resampling is used

        ACCEPTS: True|False
        ")
                        (reparse-symbol indented_block_body) [24103 24353])
                    ("get_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24375 24379]))                          
                        :documentation "Return the image resample boolean")
                        (reparse-symbol indented_block_body) [24358 24460])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24484 24488])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [24490 24500]))                          
                        :documentation "
        Set whether the resize filter norms the weights -- see
        help for imshow

        ACCEPTS: 0 or 1
        ")
                        (reparse-symbol indented_block_body) [24465 24769])
                    ("get_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24793 24797]))                          
                        :documentation "Return the filternorm setting")
                        (reparse-symbol indented_block_body) [24774 24876])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24899 24903])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [24905 24914]))                          
                        :documentation "
        Set the resize filter radius only applicable to some
        interpolation schemes -- see help for imshow

        ACCEPTS: positive float
        ")
                        (reparse-symbol indented_block_body) [24881 25266])
                    ("get_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25289 25293]))                          
                        :documentation "return the filterrad setting")
                        (reparse-symbol indented_block_body) [25271 25370]))                  
                :type "class")
                nil [5595 25370])
            ("AxesImage" type
               (:superclasses ("_ImageBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25417 25421]))                          )
                        (reparse-symbol indented_block_body) [25405 25495])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [25827 26281])
                            ("self" variable nil (reparse-symbol indented_block_body) [26291 26312])
                            ("super" code nil (reparse-symbol indented_block_body) [26322 26614]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25513 25517])
                            ("ax" variable nil (reparse-symbol function_parameters) [25519 25521])
                            ("cmap" variable nil (reparse-symbol function_parameters) [25540 25544])
                            ("norm" variable nil (reparse-symbol function_parameters) [25568 25572])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [25596 25609])
                            ("origin" variable nil (reparse-symbol function_parameters) [25633 25639])
                            ("extent" variable nil (reparse-symbol function_parameters) [25663 25669])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [25693 25703])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [25724 25733])
                            ("resample" variable nil (reparse-symbol function_parameters) [25756 25764])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25789 25797]))                          
                        :documentation "
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25500 26615])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26642 26646])
                            ("renderer" variable nil (reparse-symbol function_parameters) [26648 26656]))                          )
                        (reparse-symbol indented_block_body) [26620 26806])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26826 26830])
                            ("renderer" variable nil (reparse-symbol function_parameters) [26832 26840])
                            ("magnification" variable nil (reparse-symbol function_parameters) [26842 26855])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [26861 26870]))                          )
                        (reparse-symbol indented_block_body) [26811 27263])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27295 27299])
                            ("renderer" variable nil (reparse-symbol function_parameters) [27301 27309]))                          
                        :documentation "
        return True if the image is better to be drawn unsampled.
        ")
                        (reparse-symbol indented_block_body) [27268 27547])
                    ("set_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27567 27571])
                            ("extent" variable nil (reparse-symbol function_parameters) [27573 27579]))                          
                        :documentation "
        extent is data axes (left, right, bottom, top) for making image plots

        This updates ax.dataLim, and, if autoscaling, sets viewLim
        to tightly fit the image, regardless of dataLim.  Autoscaling
        state is not changed, so following this with ax.autoscale_view
        will redo the autoscaling in accord with dataLim.

        ")
                        (reparse-symbol indented_block_body) [27552 28412])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28432 28436]))                          
                        :documentation "Get the image extent: left, right, bottom, top")
                        (reparse-symbol indented_block_body) [28417 28831])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28856 28860])
                            ("event" variable nil (reparse-symbol function_parameters) [28862 28867]))                          
                        :documentation "Get the cursor data for a given event")
                        (reparse-symbol indented_block_body) [28836 29567]))                  
                :type "class")
                nil [25372 29567])
            ("NonUniformImage" type
               (:superclasses ("AxesImage")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        kwargs are identical to those for AxesImage, except
        that 'nearest' and 'bilinear' are the only supported 'interpolation'
        options.
        \"\"\"" code nil (reparse-symbol indented_block_body) [29649 29818])
                            ("interp" variable nil (reparse-symbol indented_block_body) [29827 29874])
                            ("super" code nil (reparse-symbol indented_block_body) [29883 29934])
                            ("self" code nil (reparse-symbol indented_block_body) [29943 29973]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29620 29624])
                            ("ax" variable nil (reparse-symbol function_parameters) [29626 29628])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29630 29638]))                          
                        :documentation "
        kwargs are identical to those for AxesImage, except
        that 'nearest' and 'bilinear' are the only supported 'interpolation'
        options.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29607 29974])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30006 30010])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30012 30020]))                          
                        :documentation "
        return False. Do not use unsampled image.
        ")
                        (reparse-symbol indented_block_body) [29979 30118])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30138 30142])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30144 30152])
                            ("magnification" variable nil (reparse-symbol function_parameters) [30154 30167])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [30173 30182]))                          )
                        (reparse-symbol indented_block_body) [30123 31600])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31618 31622])
                            ("x" variable nil (reparse-symbol function_parameters) [31624 31625])
                            ("y" variable nil (reparse-symbol function_parameters) [31627 31628])
                            ("A" variable nil (reparse-symbol function_parameters) [31630 31631]))                          
                        :documentation "
        Set the grid for the pixel centers, and the pixel values.

          *x* and *y* are monotonic 1-D ndarrays of lengths N and M,
             respectively, specifying pixel centers

          *A* is an (M,N) ndarray or masked array of values to be
            colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA
            array.
        ")
                        (reparse-symbol indented_block_body) [31605 32761])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32780 32784])
                            ("args" variable nil (reparse-symbol function_parameters) [32786 32791]))                          )
                        (reparse-symbol indented_block_body) [32766 32852])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32879 32883])
                            ("s" variable nil (reparse-symbol function_parameters) [32885 32886]))                          )
                        (reparse-symbol indented_block_body) [32857 33143])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33163 33167]))                          )
                        (reparse-symbol indented_block_body) [33148 33320])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33344 33348])
                            ("s" variable nil (reparse-symbol function_parameters) [33350 33351]))                          )
                        (reparse-symbol indented_block_body) [33325 33367])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33390 33394])
                            ("s" variable nil (reparse-symbol function_parameters) [33396 33397]))                          )
                        (reparse-symbol indented_block_body) [33372 33413])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33431 33435])
                            ("norm" variable nil (reparse-symbol function_parameters) [33437 33441]))                          )
                        (reparse-symbol indented_block_body) [33418 33602])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33620 33624])
                            ("cmap" variable nil (reparse-symbol function_parameters) [33626 33630]))                          )
                        (reparse-symbol indented_block_body) [33607 33791]))                  
                :type "class")
                nil [29569 33791])
            ("PcolorImage" type
               (:documentation "
    Make a pcolor-style plot with an irregular rectangular grid.

    This uses a variation of the original irregular image code,
    and it is used by pcolorfast for the corresponding grid type.
    "
                :superclasses ("AxesImage")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap defaults to its rc setting

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [34247 34475])
                            ("super" code nil (reparse-symbol indented_block_body) [34484 34543])
                            ("self" code nil (reparse-symbol indented_block_body) [34552 34571])
                            ("if" code nil (reparse-symbol indented_block_body) [34580 34633]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34052 34056])
                            ("ax" variable nil (reparse-symbol function_parameters) [34058 34060])
                            ("x" variable nil (reparse-symbol function_parameters) [34079 34080])
                            ("y" variable nil (reparse-symbol function_parameters) [34104 34105])
                            ("A" variable nil (reparse-symbol function_parameters) [34129 34130])
                            ("cmap" variable nil (reparse-symbol function_parameters) [34154 34158])
                            ("norm" variable nil (reparse-symbol function_parameters) [34182 34186])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34210 34218]))                          
                        :documentation "
        cmap defaults to its rc setting

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34039 34633])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34653 34657])
                            ("renderer" variable nil (reparse-symbol function_parameters) [34659 34667])
                            ("magnification" variable nil (reparse-symbol function_parameters) [34669 34682])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [34688 34697]))                          )
                        (reparse-symbol indented_block_body) [34638 35896])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35928 35932])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35934 35942]))                          )
                        (reparse-symbol indented_block_body) [35901 35966])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35984 35988])
                            ("x" variable nil (reparse-symbol function_parameters) [35990 35991])
                            ("y" variable nil (reparse-symbol function_parameters) [35993 35994])
                            ("A" variable nil (reparse-symbol function_parameters) [35996 35997]))                          
                        :documentation "
        Set the grid for the rectangle boundaries, and the data values.

          *x* and *y* are monotonic 1-D ndarrays of lengths N+1 and M+1,
             respectively, specifying rectangle boundaries.  If None,
             they will be created as uniform arrays from 0 through N
             and 0 through M, respectively.

          *A* is an (M,N) ndarray or masked array of values to be
            colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA
            array.

        ")
                        (reparse-symbol indented_block_body) [35971 37913])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37932 37936])
                            ("args" variable nil (reparse-symbol function_parameters) [37938 37943]))                          )
                        (reparse-symbol indented_block_body) [37918 38004])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38029 38033])
                            ("event" variable nil (reparse-symbol function_parameters) [38035 38040]))                          
                        :documentation "Get the cursor data for a given event")
                        (reparse-symbol indented_block_body) [38009 38440]))                  
                :type "class")
                nil [33793 38440])
            ("FigureImage" type
               (:superclasses ("_ImageBase")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [38477 38487])
                    ("_interpolation" variable nil (reparse-symbol indented_block_body) [38493 38519])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        \"\"\"" code nil (reparse-symbol indented_block_body) [38746 38932])
                            ("super" code nil (reparse-symbol indented_block_body) [38941 39075])
                            ("self" variable nil (reparse-symbol indented_block_body) [39084 39101])
                            ("self" variable nil (reparse-symbol indented_block_body) [39110 39127])
                            ("self" variable nil (reparse-symbol indented_block_body) [39136 39153])
                            ("self" code nil (reparse-symbol indented_block_body) [39162 39181])
                            ("self" variable nil (reparse-symbol indented_block_body) [39190 39214]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38538 38542])
                            ("fig" variable nil (reparse-symbol function_parameters) [38544 38547])
                            ("cmap" variable nil (reparse-symbol function_parameters) [38566 38570])
                            ("norm" variable nil (reparse-symbol function_parameters) [38594 38598])
                            ("offsetx" variable nil (reparse-symbol function_parameters) [38622 38629])
                            ("offsety" variable nil (reparse-symbol function_parameters) [38650 38657])
                            ("origin" variable nil (reparse-symbol function_parameters) [38678 38684])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38708 38716]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38525 39215])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39235 39239]))                          
                        :documentation "Get the image extent: left, right, bottom, top")
                        (reparse-symbol indented_block_body) [39220 39456])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39476 39480])
                            ("renderer" variable nil (reparse-symbol function_parameters) [39482 39490])
                            ("magnification" variable nil (reparse-symbol function_parameters) [39492 39505])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [39511 39520]))                          )
                        (reparse-symbol indented_block_body) [39461 39878])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39896 39900])
                            ("A" variable nil (reparse-symbol function_parameters) [39902 39903]))                          
                        :documentation "Set the image array.")
                        (reparse-symbol indented_block_body) [39883 40086]))                  
                :type "class")
                nil [38442 40086])
            ("BboxImage" type
               (:documentation "The Image class whose size is determined by the given bbox."
                :superclasses ("_ImageBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        interp_at_native is a flag that determines whether or not
        interpolation should still be applied when the image is
        displayed at its native resolution.  A common use case for this
        is when displaying an image for annotational purposes; it is
        treated similarly to Photoshop (interpolation is only used when
        displaying the image at non-native resolutions).


        kwargs are an optional list of Artist keyword args

        \"\"\"" code nil (reparse-symbol indented_block_body) [40530 41119])
                            ("super" code nil (reparse-symbol indented_block_body) [41128 41422])
                            ("self" variable nil (reparse-symbol indented_block_body) [41432 41448])
                            ("self" variable nil (reparse-symbol indented_block_body) [41457 41497])
                            ("self" variable nil (reparse-symbol indented_block_body) [41506 41543]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40204 40208])
                            ("bbox" variable nil (reparse-symbol function_parameters) [40210 40214])
                            ("cmap" variable nil (reparse-symbol function_parameters) [40233 40237])
                            ("norm" variable nil (reparse-symbol function_parameters) [40261 40265])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [40289 40302])
                            ("origin" variable nil (reparse-symbol function_parameters) [40326 40332])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [40356 40366])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [40387 40396])
                            ("resample" variable nil (reparse-symbol function_parameters) [40419 40427])
                            ("interp_at_native" variable nil (reparse-symbol function_parameters) [40452 40468])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40492 40500]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        interp_at_native is a flag that determines whether or not
        interpolation should still be applied when the image is
        displayed at its native resolution.  A common use case for this
        is when displaying an image for annotational purposes; it is
        treated similarly to Photoshop (interpolation is only used when
        displaying the image at non-native resolutions).


        kwargs are an optional list of Artist keyword args

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40191 41544])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41567 41571]))                          )
                        (reparse-symbol indented_block_body) [41549 41605])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41632 41636])
                            ("renderer" variable nil (reparse-symbol function_parameters) [41638 41646]))                          )
                        (reparse-symbol indented_block_body) [41610 41958])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41976 41980])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [41982 41992]))                          
                        :documentation "Test whether the mouse event occured within the image.")
                        (reparse-symbol indented_block_body) [41963 42392])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42412 42416])
                            ("renderer" variable nil (reparse-symbol function_parameters) [42418 42426])
                            ("magnification" variable nil (reparse-symbol function_parameters) [42428 42441])
                            ("unsampled" variable nil (reparse-symbol function_parameters) [42447 42456]))                          )
                        (reparse-symbol indented_block_body) [42397 42925]))                  
                :type "class")
                nil [40088 42925])
            ("imread" function
               (:documentation "
    Read an image from a file into an array.

    *fname* may be a string path, a valid URL, or a Python
    file-like object.  If using a file object, it must be opened in binary
    mode.

    If *format* is provided, will try to read file of that type,
    otherwise the format is deduced from the filename.  If nothing can
    be deduced, PNG is tried.

    Return value is a :class:`numpy.array`.  For grayscale images, the
    return array is MxN.  For RGB images, the return value is MxNx3.
    For RGBA images the return value is MxNx4.

    matplotlib can only read PNGs natively, but if `PIL
    <http://www.pythonware.com/products/pil/>`_ is installed, it will
    use it to load the image and return an array (if possible) which
    can be used with :func:`~matplotlib.pyplot.imshow`. Note, URL strings
    may not be compatible with PIL. Check the PIL documentation for more
    information.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [42938 42943])
                    ("format" variable nil (reparse-symbol function_parameters) [42945 42951]))                  )
                nil [42927 45580])
            ("imsave" function
               (:documentation "
    Save an array as in image file.

    The output formats available depend on the backend being used.

    Arguments:
      *fname*:
        A string containing a path to a filename, or a Python file-like object.
        If *format* is *None* and *fname* is a string, the output
        format is deduced from the extension of the filename.
      *arr*:
        An MxN (luminance), MxNx3 (RGB) or MxNx4 (RGBA) array.
    Keyword arguments:
      *vmin*/*vmax*: [ None | scalar ]
        *vmin* and *vmax* set the color scaling for the image by fixing the
        values that map to the colormap color limits. If either *vmin*
        or *vmax* is None, that limit is determined from the *arr*
        min/max value.
      *cmap*:
        cmap is a colors.Colormap instance, e.g., cm.jet.
        If None, default to the rc image.cmap value.
      *format*:
        One of the file extensions supported by the active
        backend.  Most backends support png, pdf, ps, eps and svg.
      *origin*
        [ 'upper' | 'lower' ] Indicates where the [0,0] index of
        the array is in the upper left or lower left corner of
        the axes. Defaults to the rc image.origin value.
      *dpi*
        The DPI to store in the metadata of the file.  This does not affect the
        resolution of the output image.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [45593 45598])
                    ("arr" variable nil (reparse-symbol function_parameters) [45600 45603])
                    ("vmin" variable nil (reparse-symbol function_parameters) [45605 45609])
                    ("vmax" variable nil (reparse-symbol function_parameters) [45616 45620])
                    ("cmap" variable nil (reparse-symbol function_parameters) [45627 45631])
                    ("format" variable nil (reparse-symbol function_parameters) [45638 45644])
                    ("origin" variable nil (reparse-symbol function_parameters) [45662 45668])
                    ("dpi" variable nil (reparse-symbol function_parameters) [45675 45678]))                  )
                nil [45582 47726])
            ("pil_to_array" function
               (:documentation "
    Load a PIL image and return it as a numpy array.  For grayscale
    images, the return array is MxN.  For RGB images, the return value
    is MxNx3.  For RGBA images the return value is MxNx4
    "
                :arguments 
                  ( ("pilImage" variable nil (reparse-symbol function_parameters) [47745 47753]))                  )
                nil [47728 49372])
            ("thumbnail" function
               (:documentation "
    make a thumbnail of image in *infile* with output filename
    *thumbfile*.

      *infile* the image file -- must be PNG or Pillow-readable if you
         have `Pillow <http://python-pillow.org/>`_ installed

      *thumbfile*
        the thumbnail filename

      *scale*
        the scale factor for the thumbnail

      *interpolation*
        the interpolation scheme used in the resampling


      *preview*
        if True, the default backend (presumably a user interface
        backend) will be used which will cause a figure to be raised
        if :func:`~matplotlib.pyplot.show` is called.  If it is False,
        a pure image backend will be used depending on the extension,
        'png'->FigureCanvasAgg, 'pdf'->FigureCanvasPdf,
        'svg'->FigureCanvasSVG


    See examples/misc/image_thumbnail.py.

    .. htmlonly::

        :ref:`misc-image_thumbnail`

    Return value is the figure instance containing the thumbnail

    "
                :arguments 
                  ( ("infile" variable nil (reparse-symbol function_parameters) [49388 49394])
                    ("thumbfile" variable nil (reparse-symbol function_parameters) [49396 49405])
                    ("scale" variable nil (reparse-symbol function_parameters) [49407 49412])
                    ("interpolation" variable nil (reparse-symbol function_parameters) [49418 49431])
                    ("preview" variable nil (reparse-symbol function_parameters) [49458 49465]))                  )
                nil [49374 51936]))          
      :file "image.py"
      :pointmax 51936
      :fsize 51935
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The rcsetup module contains the default values and the validation code for
customization using matplotlib's rc settings.

Each rc setting is assigned a default value and a function used to validate
any attempted changes to that setting. The default values and validation
functions are defined in the rcsetup module, and are used to construct the
rcParams global object which stores the settings and is referenced throughout
matplotlib.

These default values should be consistent with the default matplotlibrc file
that actually reflects the values given here. Any additions or deletions to the
parameter set listed here should also be visited to the
:file:`matplotlibrc.template` in matplotlib's root source directory.
\"\"\"" code nil nil [1 727])
            ("" code nil nil [751 836])
            ("six" include nil nil [838 848])
            ("functools" include nil nil [850 878])
            ("operator" include nil nil [879 894])
            ("os" include nil nil [895 904])
            ("warnings" include nil nil [905 920])
            ("re" include nil nil [921 930])
            ("try" code nil nil [932 1036])
            ("matplotlib.fontconfig_pattern" include nil nil [1036 1102])
            ("matplotlib.colors" include nil nil [1103 1146])
            ("cycler" include nil nil [1216 1260])
            ("interactive_bk" variable nil nil [1472 1651])
            ("non_interactive_bk" variable nil nil [1654 1759])
            ("all_backends" code nil nil [1760 1810])
            ("ValidateInStrings" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("'valid is a list of legal strings'" code nil (reparse-symbol indented_block_body) [1908 1942])
                            ("self" variable nil (reparse-symbol indented_block_body) [1951 1965])
                            ("self" variable nil (reparse-symbol indented_block_body) [1974 2002])
                            ("func" function (:arguments 
                              ( ("s" variable nil (reparse-symbol function_parameters) [2021 2022]))                              ) (reparse-symbol indented_block_body) [2012 2128])
                            ("self" variable nil (reparse-symbol indented_block_body) [2136 2184]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1863 1867])
                            ("key" variable nil (reparse-symbol function_parameters) [1869 1872])
                            ("valid" variable nil (reparse-symbol function_parameters) [1874 1879])
                            ("ignorecase" variable nil (reparse-symbol function_parameters) [1881 1891]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1850 2185])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2203 2207])
                            ("s" variable nil (reparse-symbol function_parameters) [2209 2210]))                          )
                        (reparse-symbol indented_block_body) [2190 2481]))                  
                :type "class")
                nil [1813 2481])
            ("_listify_validator" function (:arguments 
              ( ("scalar_validator" variable nil (reparse-symbol function_parameters) [2506 2522])
                ("allow_stringlist" variable nil (reparse-symbol function_parameters) [2524 2540]))              ) nil [2483 4029])
            ("validate_any" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4048 4049]))              ) nil [4031 4065])
            ("validate_anylist" variable nil nil [4065 4116])
            ("validate_path_exists" function
               (:documentation "If s is a path, return s, else False"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4144 4145]))                  )
                nil [4119 4364])
            ("validate_bool" function
               (:documentation "Convert b to a boolean or raise"
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [4384 4385]))                  )
                nil [4366 4731])
            ("validate_bool_maybe_none" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [4762 4763]))              ) nil [4733 5158])
            ("deprecate_axes_hold" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [5184 5189]))              ) nil [5160 5422])
            ("validate_float" function
               (:documentation "convert s to float or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5443 5444]))                  )
                nil [5424 5605])
            ("validate_floatlist" variable nil nil [5605 5660])
            ("validate_float_or_None" function
               (:documentation "convert s to float, None or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5690 5691]))                  )
                nil [5663 6221])
            ("validate_string_or_None" function
               (:documentation "convert s to string or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6251 6252]))                  )
                nil [6223 6461])
            ("validate_axisbelow" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [6486 6487]))              ) nil [6463 6794])
            ("validate_dpi" function
               (:documentation "confirm s is string 'figure' or convert s to float or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [6813 6814]))                  )
                nil [6796 7097])
            ("validate_int" function
               (:documentation "convert s to int or raise"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7116 7117]))                  )
                nil [7099 7272])
            ("validate_int_or_None" function
               (:documentation "if not None, tries to validate as an int"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7299 7300]))                  )
                nil [7274 7543])
            ("validate_fonttype" function
               (:documentation "
    confirm that this is a Postscript of PDF font type that we know how to
    convert to
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7567 7568]))                  )
                nil [7545 8256])
            ("_validate_standard_backends" variable nil nil [8258 8443])
            ("validate_backend" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8467 8468]))              ) nil [8446 8578])
            ("validate_qt4" variable nil nil [8580 8659])
            ("validate_qt5" variable nil nil [8660 8718])
            ("validate_toolbar" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8742 8743]))              ) nil [8721 8918])
            ("validate_maskedarray" function (:arguments 
              ( ("v" variable nil (reparse-symbol function_parameters) [8945 8946]))              ) nil [8920 9263])
            ("_seq_err_msg" variable nil nil [9266 9377])
            ("_str_err_msg" variable nil nil [9379 9538])
            ("validate_nseq_float" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9634 9644])
                            ("self" variable nil (reparse-symbol indented_block_body) [9653 9681]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9593 9597])
                            ("n" variable nil (reparse-symbol function_parameters) [9599 9600])
                            ("allow_none" variable nil (reparse-symbol function_parameters) [9607 9617]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9580 9682])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9700 9704])
                            ("s" variable nil (reparse-symbol function_parameters) [9706 9707]))                          
                        :documentation "return a seq of n floats or raise")
                        (reparse-symbol indented_block_body) [9687 10330]))                  
                :type "class")
                nil [9541 10330])
            ("validate_nseq_int" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10405 10415]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10382 10386])
                            ("n" variable nil (reparse-symbol function_parameters) [10388 10389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10369 10416])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10434 10438])
                            ("s" variable nil (reparse-symbol function_parameters) [10440 10441]))                          
                        :documentation "return a seq of n ints or raise")
                        (reparse-symbol indented_block_body) [10421 10947]))                  
                :type "class")
                nil [10332 10947])
            ("validate_color_or_inherit" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [10979 10980]))              ) nil [10949 11083])
            ("validate_color_or_auto" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11112 11113]))              ) nil [11085 11182])
            ("validate_color_for_prop_cycle" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11218 11219]))              ) nil [11184 11818])
            ("validate_color" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11839 11840]))              ) nil [11820 12850])
            ("deprecate_axes_colorcycle" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [12882 12887]))              ) nil [12852 13056])
            ("validate_colorlist" variable nil nil [13058 13136])
            ("validate_colorlist" variable nil nil [13137 13195])
            ("validate_stringlist" variable nil nil [13197 13252])
            ("validate_stringlist" variable nil nil [13253 13298])
            ("validate_orientation" variable nil nil [13300 13387])
            ("validate_aspect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13410 13411]))              ) nil [13390 13579])
            ("validate_fontsize" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13603 13604]))              ) nil [13581 14032])
            ("validate_fontsizelist" variable nil nil [14034 14095])
            ("validate_font_properties" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [14127 14128]))              ) nil [14098 14176])
            ("validate_fontset" variable nil nil [14178 14301])
            ("validate_mathtext_default" variable nil nil [14303 14434])
            ("validate_verbose" variable nil nil [14436 14542])
            ("_validate_alignment" variable nil nil [14544 14670])
            ("validate_whiskers" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [14694 14695]))              ) nil [14672 15094])
            ("deprecate_savefig_extension" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [15128 15133]))              ) nil [15096 15282])
            ("update_savefig_format" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [15310 15315]))              ) nil [15284 15551])
            ("validate_ps_papersize" variable nil nil [15553 15823])
            ("validate_ps_distiller" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [15852 15853]))              ) nil [15826 16211])
            ("validate_joinstyle" variable nil nil [16212 16387])
            ("validate_joinstylelist" variable nil nil [16388 16451])
            ("validate_capstyle" variable nil nil [16453 16628])
            ("validate_capstylelist" variable nil nil [16629 16690])
            ("validate_fillstyle" variable nil nil [16692 16882])
            ("validate_fillstylelist" variable nil nil [16883 16946])
            ("validate_negative_linestyle" variable nil nil [16948 17151])
            ("validate_negative_linestyle_legacy" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17193 17194]))              ) nil [17154 17510])
            ("validate_corner_mask" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17537 17538]))              ) nil [17512 17622])
            ("validate_tkpythoninspect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [17653 17654]))              ) nil [17624 17782])
            ("validate_legend_loc" variable nil nil [17783 18062])
            ("deprecate_svg_image_noscale" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [18097 18102]))              ) nil [18065 18223])
            ("deprecate_svg_embed_char_paths" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [18260 18265]))              ) nil [18225 18373])
            ("validate_svg_fonttype" variable nil nil [18375 18503])
            ("validate_hinting" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [18527 18528]))              ) nil [18506 18737])
            ("validate_pgf_texsystem" variable nil nil [18738 18877])
            ("validate_movie_writer" variable nil nil [18879 19075])
            ("validate_movie_frame_fmt" variable nil nil [19077 19191])
            ("validate_axis_locator" variable nil nil [19193 19271])
            ("validate_movie_html_fmt" variable nil nil [19273 19357])
            ("validate_bbox" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [19377 19378]))              ) nil [19359 19777])
            ("validate_sketch" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [19798 19799]))              ) nil [19778 20234])
            ("ValidateInterval" type
               (:documentation "
    Value must be in interval
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20389 20405])
                            ("self" variable nil (reparse-symbol indented_block_body) [20414 20430])
                            ("self" variable nil (reparse-symbol indented_block_body) [20439 20460])
                            ("self" variable nil (reparse-symbol indented_block_body) [20469 20490]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20330 20334])
                            ("vmin" variable nil (reparse-symbol function_parameters) [20336 20340])
                            ("vmax" variable nil (reparse-symbol function_parameters) [20342 20346])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [20348 20357])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [20364 20373]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20317 20491])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20509 20513])
                            ("s" variable nil (reparse-symbol function_parameters) [20515 20516]))                          )
                        (reparse-symbol indented_block_body) [20496 21292]))                  
                :type "class")
                nil [20235 21292])
            ("validate_grid_axis" variable nil nil [21293 21369])
            ("validate_hatch" function
               (:documentation "
    Validate a hatch pattern.
    A hatch pattern string can have any sequence of the following
    characters: ``\\\\ / | - + * . x o O``.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [21391 21392]))                  )
                nil [21372 55003]))          
      :file "rcsetup.py"
      :pointmax 55003
      :fsize 55002
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((INDENT_BLOCK 26572 . 26686) (NEWLINE 26571 . 26572) (COLON 26570 . 26571) (TRY 25536 . 25539) (AS 26566 . 26568) (INDENT_BLOCK 22797 . 22803) (INDENT_BLOCK 22039 . 22797) (NEWLINE 22038 . 22039) (LBRACE 22037 . 22038) (NEWLINE 22016 . 22017) (RPAREN 22015 . 22016) (LPAREN 21978 . 21979) (NEWLINE 21939 . 21940) (RPAREN 21938 . 21939) (DEDENT 21884 . 21884) (NAME 21884 . 21902) (LPAREN 21923 . 21924)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("collections" include nil nil [122 169])
            ("re" include nil nil [171 180])
            ("warnings" include nil nil [181 196])
            ("inspect" include nil nil [197 211])
            ("numpy" include nil nil [212 230])
            ("matplotlib" include nil nil [231 248])
            ("matplotlib.cbook" include nil nil [249 281])
            ("matplotlib.cbook" include nil nil [282 325])
            ("matplotlib" include nil nil [326 368])
            ("" code nil nil [393 488])
            ("Path" include nil nil [500 511])
            ("allow_rasterization" function
               (:documentation "
    Decorator for Artist.draw method. Provides routines
    that run before and after the draw call. The before and after functions
    are useful for changing artist-dependant renderer attributes or making
    other setup function calls, such as starting and flushing a mixed-mode
    renderer.
    "
                :arguments 
                  ( ("draw" variable nil (reparse-symbol function_parameters) [1275 1279]))                  )
                nil [1251 2528])
            ("_stale_axes_callback" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [2555 2559])
                    ("val" variable nil (reparse-symbol function_parameters) [2561 2564]))                  )
                nil [2530 2615])
            ("_XYPair" variable nil nil [2617 2655])
            ("Artist" type
               (:documentation "
    Abstract base class for someone who renders into a
    :class:`FigureCanvas`.
    "
                :superclasses ("object")
                :members 
                  ( ("aname" variable nil (reparse-symbol indented_block_body) [2783 2799])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [2804 2814])
                    ("_prop_order" variable nil (reparse-symbol indented_block_body) [2966 2994])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3028 3046])
                            ("self" variable nil (reparse-symbol indented_block_body) [3055 3081])
                            ("self" variable nil (reparse-symbol indented_block_body) [3090 3107])
                            ("self" variable nil (reparse-symbol indented_block_body) [3116 3134])
                            ("self" variable nil (reparse-symbol indented_block_body) [3144 3166])
                            ("self" variable nil (reparse-symbol indented_block_body) [3175 3201])
                            ("self" variable nil (reparse-symbol indented_block_body) [3210 3230])
                            ("self" variable nil (reparse-symbol indented_block_body) [3239 3261])
                            ("self" variable nil (reparse-symbol indented_block_body) [3270 3288])
                            ("self" variable nil (reparse-symbol indented_block_body) [3297 3316])
                            ("self" variable nil (reparse-symbol indented_block_body) [3325 3346])
                            ("self" variable nil (reparse-symbol indented_block_body) [3355 3374])
                            ("self" variable nil (reparse-symbol indented_block_body) [3383 3399])
                            ("self" variable nil (reparse-symbol indented_block_body) [3408 3427])
                            ("self" variable nil (reparse-symbol indented_block_body) [3436 3457])
                            ("self" variable nil (reparse-symbol indented_block_body) [3466 3489])
                            ("self" variable nil (reparse-symbol indented_block_body) [3498 3521])
                            ("self" variable nil (reparse-symbol indented_block_body) [3530 3553])
                            ("self" variable nil (reparse-symbol indented_block_body) [3562 3583])
                            ("self" variable nil (reparse-symbol indented_block_body) [3624 3637])
                            ("self" variable nil (reparse-symbol indented_block_body) [3664 3688])
                            ("try" code nil (reparse-symbol indented_block_body) [3726 3878])
                            ("self" variable nil (reparse-symbol indented_block_body) [3886 3912])
                            ("self" variable nil (reparse-symbol indented_block_body) [3921 3937])
                            ("self" variable nil (reparse-symbol indented_block_body) [3946 3962])
                            ("self" variable nil (reparse-symbol indented_block_body) [3971 3988])
                            ("self" variable nil (reparse-symbol indented_block_body) [3997 4035])
                            ("self" variable nil (reparse-symbol indented_block_body) [4044 4089])
                            ("self" variable nil (reparse-symbol indented_block_body) [4098 4134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3013 3017]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3000 4135])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4157 4161]))                          )
                        (reparse-symbol indented_block_body) [4140 4419])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4435 4439]))                          
                        :documentation "
        Remove the artist from the figure if possible.  The effect
        will not be visible until the figure is redrawn, e.g., with
        :meth:`matplotlib.axes.Axes.draw_idle`.  Call
        :meth:`matplotlib.axes.Axes.relim` to update the axes limits
        if desired.

        Note: :meth:`~matplotlib.axes.Axes.relim` will not see
        collections even if the collection was added to axes with
        *autolim* = True.

        Note: there is no support for removing the artist's legend entry.
        ")
                        (reparse-symbol indented_block_body) [4424 6020])
                    ("have_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6378 6382]))                          )
                        (reparse-symbol indented_block_body) [6363 6602])
                    ("convert_xunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6626 6630])
                            ("x" variable nil (reparse-symbol function_parameters) [6632 6633]))                          
                        :documentation "For artists in an axes, if the xaxis has units support,
        convert *x* using xaxis unit type
        ")
                        (reparse-symbol indented_block_body) [6607 6903])
                    ("convert_yunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6927 6931])
                            ("y" variable nil (reparse-symbol function_parameters) [6933 6934]))                          
                        :documentation "For artists in an axes, if the yaxis has units support,
        convert *y* using yaxis unit type
        ")
                        (reparse-symbol indented_block_body) [6908 7204])
                    ("set_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7222 7226])
                            ("axes" variable nil (reparse-symbol function_parameters) [7228 7232]))                          
                        :documentation "
        Set the :class:`~matplotlib.axes.Axes` instance in which the
        artist resides, if any.

        This has been deprecated in mpl 1.5, please use the
        axes property.  Will be removed in 1.7 or 2.0.

        ACCEPTS: an :class:`~matplotlib.axes.Axes` instance
        ")
                        (reparse-symbol indented_block_body) [7209 7670])
                    ("get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7688 7692]))                          
                        :documentation "
        Return the :class:`~matplotlib.axes.Axes` instance the artist
        resides in, or *None*.

        This has been deprecated in mpl 1.5, please use the
        axes property.  Will be removed in 1.7 or 2.0.
        ")
                        (reparse-symbol indented_block_body) [7675 8069])
                    ("axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8097 8101]))                          
                        :documentation "
        The :class:`~matplotlib.axes.Axes` instance the artist
        resides in, or *None*.
        ")
                        (reparse-symbol indented_block_body) [8074 8248])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8279 8283])
                            ("new_axes" variable nil (reparse-symbol function_parameters) [8285 8293]))                          
                        :decorators 
                          ( ("axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8253 8815])
                    ("stale" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8844 8848]))                          
                        :documentation "
        If the artist is 'stale' and needs to be re-drawn for the output to
        match the internal state of the artist.
        ")
                        (reparse-symbol indented_block_body) [8820 9026])
                    ("stale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9059 9063])
                            ("val" variable nil (reparse-symbol function_parameters) [9065 9068]))                          
                        :decorators 
                          ( ("stale.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9031 9462])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9489 9493])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9495 9503]))                          
                        :documentation "
        Get the axes bounding box in display space.
        Subclasses should override for inclusion in the bounding box
        \"tight\" calculation. Default is to return an empty bounding
        box at 0, 0.

        Be careful when using this function, the results will not update
        if the artist window extent of the artist changes.  The extent
        can change due to any changes in the transform stack, such as
        changing the axes limits, the figure size, or the canvas used
        (as is done when saving a figure).  This can lead to unexpected
        behavior where interactive figures will look fine on the screen,
        but will save incorrectly.
        ")
                        (reparse-symbol indented_block_body) [9467 10243])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10265 10269])
                            ("func" variable nil (reparse-symbol function_parameters) [10271 10275]))                          
                        :documentation "
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        ")
                        (reparse-symbol indented_block_body) [10248 10637])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10662 10666])
                            ("oid" variable nil (reparse-symbol function_parameters) [10668 10671]))                          
                        :documentation "
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        ")
                        (reparse-symbol indented_block_body) [10642 10932])
                    ("pchanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10950 10954]))                          
                        :documentation "
        Fire an event when property changed, calling all of the
        registered callbacks.
        ")
                        (reparse-symbol indented_block_body) [10937 11159])
                    ("is_transform_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11185 11189]))                          
                        :documentation "
        Returns *True* if :class:`Artist` has a transform explicitly
        set.
        ")
                        (reparse-symbol indented_block_body) [11164 11332])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11355 11359])
                            ("t" variable nil (reparse-symbol function_parameters) [11361 11362]))                          
                        :documentation "
        Set the :class:`~matplotlib.transforms.Transform` instance
        used by this artist.

        ACCEPTS: :class:`~matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [11337 11666])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11689 11693]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform`
        instance used by this artist.
        ")
                        (reparse-symbol indented_block_body) [11671 12134])
                    ("hitlist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12151 12155])
                            ("event" variable nil (reparse-symbol function_parameters) [12157 12162]))                          
                        :documentation "
        List the children of the artist which contain the mouse event *event*.
        ")
                        (reparse-symbol indented_block_body) [12139 12630])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12652 12656]))                          
                        :documentation "
        Return a list of the child :class:`Artist`s this
        :class:`Artist` contains.
        ")
                        (reparse-symbol indented_block_body) [12635 12792])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12810 12814])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [12816 12826]))                          
                        :documentation "Test whether the artist contains the mouse event.

        Returns the truth value and a dictionary of artist specific details of
        selection, such as which points are contained in the pick radius.  See
        individual artists for details.
        ")
                        (reparse-symbol indented_block_body) [12797 13299])
                    ("set_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13321 13325])
                            ("picker" variable nil (reparse-symbol function_parameters) [13327 13333]))                          
                        :documentation "
        Replace the contains test used by this artist. The new picker
        should be a callable function which determines whether the
        artist is hit by the mouse event::

            hit, props = picker(artist, mouseevent)

        If the mouse event is over the artist, return *hit* = *True*
        and *props* is a dictionary of properties you want returned
        with the contains test.

        ACCEPTS: a callable function
        ")
                        (reparse-symbol indented_block_body) [13304 13833])
                    ("get_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13855 13859]))                          
                        :documentation "
        Return the _contains test used by the artist, or *None* for default.
        ")
                        (reparse-symbol indented_block_body) [13838 13993])
                    ("pickable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14011 14015]))                          )
                        (reparse-symbol indented_block_body) [13998 14211])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14225 14229])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [14231 14241]))                          
                        :documentation "
        Process pick event

        each child artist will fire a pick event if *mouseevent* is over
        the artist and the artist has picker set
        ")
                        (reparse-symbol indented_block_body) [14216 15469])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15489 15493])
                            ("picker" variable nil (reparse-symbol function_parameters) [15495 15501]))                          
                        :documentation "
        Set the epsilon for picking used by this artist

        *picker* can be one of the following:

          * *None*: picking is disabled for this artist (default)

          * A boolean: if *True* then picking will be enabled and the
            artist will fire a pick event if the mouse event is over
            the artist

          * A float: if picker is a number it is interpreted as an
            epsilon tolerance in points and the artist will fire
            off an event if it's data is within epsilon of the mouse
            event.  For some artists like lines and patch collections,
            the artist may provide additional data to the pick event
            that is generated, e.g., the indices of the data within
            epsilon of the pick event

          * A function: if picker is callable, it is a user supplied
            function which determines whether the artist is hit by the
            mouse event::

              hit, props = picker(artist, mouseevent)

            to determine the hit test.  if the mouse event is over the
            artist, return *hit=True* and props is a dictionary of
            properties you want added to the PickEvent attributes.

        ACCEPTS: [None|float|boolean|callable]
        ")
                        (reparse-symbol indented_block_body) [15474 16815])
                    ("get_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16835 16839]))                          )
                        (reparse-symbol indented_block_body) [16820 16925])
                    ("is_figure_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16948 16952]))                          
                        :documentation "
        Returns True if the artist is assigned to a
        :class:`~matplotlib.figure.Figure`.
        ")
                        (reparse-symbol indented_block_body) [16930 17114])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17131 17135]))                          
                        :documentation "
        Returns the url
        ")
                        (reparse-symbol indented_block_body) [17119 17211])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17228 17232])
                            ("url" variable nil (reparse-symbol function_parameters) [17234 17237]))                          
                        :documentation "
        Sets the url for the artist

        ACCEPTS: a url string
        ")
                        (reparse-symbol indented_block_body) [17216 17355])
                    ("get_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17372 17376]))                          
                        :documentation "
        Returns the group id
        ")
                        (reparse-symbol indented_block_body) [17360 17457])
                    ("set_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17474 17478])
                            ("gid" variable nil (reparse-symbol function_parameters) [17480 17483]))                          
                        :documentation "
        Sets the (group) id for the artist

        ACCEPTS: an id string
        ")
                        (reparse-symbol indented_block_body) [17462 17608])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17626 17630]))                          
                        :documentation "
        Returns the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.
        ")
                        (reparse-symbol indented_block_body) [17613 18090])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18108 18112])
                            ("snap" variable nil (reparse-symbol function_parameters) [18114 18118]))                          
                        :documentation "
        Sets the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.
        ")
                        (reparse-symbol indented_block_body) [18095 18524])
                    ("get_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18551 18555]))                          
                        :documentation "
        Returns the sketch parameters for the artist.

        Returns
        -------
        sketch_params : tuple or `None`

        A 3-tuple with the following elements:

          * `scale`: The amplitude of the wiggle perpendicular to the
            source line.

          * `length`: The length of the wiggle along the line.

          * `randomness`: The scale factor by which the length is
            shrunken or expanded.

        May return `None` if no sketch parameters were set.
        ")
                        (reparse-symbol indented_block_body) [18529 19107])
                    ("set_sketch_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19134 19138])
                            ("scale" variable nil (reparse-symbol function_parameters) [19140 19145])
                            ("length" variable nil (reparse-symbol function_parameters) [19152 19158])
                            ("randomness" variable nil (reparse-symbol function_parameters) [19165 19175]))                          
                        :documentation "
        Sets the sketch parameters.

        Parameters
        ----------

        scale : float, optional
            The amplitude of the wiggle perpendicular to the source
            line, in pixels.  If scale is `None`, or not provided, no
            sketch filter will be provided.

        length : float, optional
             The length of the wiggle along the line, in pixels
             (default 128.0)

        randomness : float, optional
            The scale factor by which the length is shrunken or
            expanded (default 16.0)
        ")
                        (reparse-symbol indented_block_body) [19112 19932])
                    ("set_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19958 19962])
                            ("path_effects" variable nil (reparse-symbol function_parameters) [19964 19976]))                          
                        :documentation "
        set path_effects, which should be a list of instances of
        matplotlib.patheffect._Base class or its derivatives.
        ")
                        (reparse-symbol indented_block_body) [19937 20198])
                    ("get_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20224 20228]))                          )
                        (reparse-symbol indented_block_body) [20203 20265])
                    ("get_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20285 20289]))                          
                        :documentation "
        Return the :class:`~matplotlib.figure.Figure` instance the
        artist belongs to.
        ")
                        (reparse-symbol indented_block_body) [20270 20437])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20457 20461])
                            ("fig" variable nil (reparse-symbol function_parameters) [20463 20466]))                          
                        :documentation "
        Set the :class:`~matplotlib.figure.Figure` instance the artist
        belongs to.

        ACCEPTS: a :class:`matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [20442 21345])
                    ("set_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21367 21371])
                            ("clipbox" variable nil (reparse-symbol function_parameters) [21373 21380]))                          
                        :documentation "
        Set the artist's clip :class:`~matplotlib.transforms.Bbox`.

        ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance
        ")
                        (reparse-symbol indented_block_body) [21350 21621])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21644 21648])
                            ("path" variable nil (reparse-symbol function_parameters) [21650 21654])
                            ("transform" variable nil (reparse-symbol function_parameters) [21656 21665]))                          
                        :documentation "
        Set the artist's clip path, which may be:

          * a :class:`~matplotlib.patches.Patch` (or subclass) instance

          * a :class:`~matplotlib.path.Path` instance, in which case
             an optional :class:`~matplotlib.transforms.Transform`
             instance may be provided, which will be applied to the
             path before using it for clipping.

          * *None*, to remove the clipping path

        For efficiency, if the path happens to be an axis-aligned
        rectangle, this method will set the clipping box to the
        corresponding rectangle and set the clipping path to *None*.

        ACCEPTS: [ (:class:`~matplotlib.path.Path`,
        :class:`~matplotlib.transforms.Transform`) |
        :class:`~matplotlib.patches.Patch` | None ]
        ")
                        (reparse-symbol indented_block_body) [21626 23740])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23759 23763]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on all
        backends
        ")
                        (reparse-symbol indented_block_body) [23745 23906])
                    ("get_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23927 23931]))                          )
                        (reparse-symbol indented_block_body) [23911 24003])
                    ("get_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24025 24029]))                          )
                        (reparse-symbol indented_block_body) [24008 24107])
                    ("get_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24128 24132]))                          )
                        (reparse-symbol indented_block_body) [24112 24209])
                    ("get_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24231 24235]))                          )
                        (reparse-symbol indented_block_body) [24214 24298])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24321 24325]))                          )
                        (reparse-symbol indented_block_body) [24303 24392])
                    ("get_transformed_clip_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24438 24442]))                          )
                        (reparse-symbol indented_block_body) [24397 24756])
                    ("set_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24777 24781])
                            ("b" variable nil (reparse-symbol function_parameters) [24783 24784]))                          
                        :documentation "
        Set whether artist uses clipping.

        When False artists will be visible out side of the axes which
        can lead to unexpected results.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [24761 25181])
                    ("_set_gc_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25203 25207])
                            ("gc" variable nil (reparse-symbol function_parameters) [25209 25211]))                          )
                        (reparse-symbol indented_block_body) [25186 25509])
                    ("get_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25533 25537]))                          )
                        (reparse-symbol indented_block_body) [25514 25628])
                    ("set_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25652 25656])
                            ("rasterized" variable nil (reparse-symbol function_parameters) [25658 25668]))                          
                        :documentation "
        Force rasterized (bitmap) drawing in vector backend output.

        Defaults to None, which implies the backend's default behavior

        ACCEPTS: [True | False | None]
        ")
                        (reparse-symbol indented_block_body) [25633 26065])
                    ("get_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26089 26093]))                          )
                        (reparse-symbol indented_block_body) [26070 26187])
                    ("set_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26211 26215])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [26217 26228]))                          
                        :documentation "
        set agg_filter fuction.

        ")
                        (reparse-symbol indented_block_body) [26192 26353])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26367 26371])
                            ("renderer" variable nil (reparse-symbol function_parameters) [26373 26381])
                            ("args" variable nil (reparse-symbol function_parameters) [26383 26388])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26390 26398]))                          )
                        (reparse-symbol indented_block_body) [26358 26523])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26542 26546])
                            ("alpha" variable nil (reparse-symbol function_parameters) [26548 26553]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends.

        ACCEPTS: float (0.0 transparent through 1.0 opaque)
        ")
                        (reparse-symbol indented_block_body) [26528 26806])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26827 26831])
                            ("b" variable nil (reparse-symbol function_parameters) [26833 26834]))                          
                        :documentation "
        Set the artist's visiblity.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [26811 27006])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27028 27032])
                            ("b" variable nil (reparse-symbol function_parameters) [27034 27035]))                          
                        :documentation "
        Set the artist's animation state.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [27011 27228])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27244 27248])
                            ("props" variable nil (reparse-symbol function_parameters) [27250 27255]))                          
                        :documentation "
        Update the properties of this :class:`Artist` from the
        dictionary *prop*.
        ")
                        (reparse-symbol indented_block_body) [27233 28590])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28609 28613]))                          
                        :documentation "
        Get the label used for this artist in the legend.
        ")
                        (reparse-symbol indented_block_body) [28595 28725])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28744 28748])
                            ("s" variable nil (reparse-symbol function_parameters) [28750 28751]))                          
                        :documentation "
        Set the label to *s* for auto legend.

        ACCEPTS: string or anything printable with '%s' conversion.
        ")
                        (reparse-symbol indented_block_body) [28730 29053])
                    ("get_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29073 29077]))                          
                        :documentation "
        Return the :class:`Artist`'s zorder.
        ")
                        (reparse-symbol indented_block_body) [29058 29176])
                    ("set_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29196 29200])
                            ("level" variable nil (reparse-symbol function_parameters) [29202 29207]))                          
                        :documentation "
        Set the zorder for the artist.  Artists with lower zorder
        values are drawn first.

        ACCEPTS: any number
        ")
                        (reparse-symbol indented_block_body) [29181 29439])
                    ("sticky_edges" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29475 29479]))                          
                        :documentation "
        `x` and `y` sticky edge lists.

        When performing autoscaling, if a data limit coincides with a value in
        the corresponding sticky_edges list, then no margin will be added--the
        view limit \"sticks\" to the edge. A typical usecase is histograms,
        where one usually expects no margin on the bottom edge (0) of the
        histogram.

        This attribute cannot be assigned to; however, the `x` and `y` lists
        can be modified in place as needed.

        Examples
        --------

        >>> artist.sticky_edges.x[:] = (xmin, xmax)
        >>> artist.sticky_edges.y[:] = (ymin, ymax)

        ")
                        (reparse-symbol indented_block_body) [29444 30168])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30189 30193])
                            ("other" variable nil (reparse-symbol function_parameters) [30195 30200]))                          )
                        (reparse-symbol indented_block_body) [30173 30819])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30839 30843]))                          
                        :documentation "
        return a dictionary mapping property name -> value for all Artist props
        ")
                        (reparse-symbol indented_block_body) [30824 31000])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31013 31017])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31019 31027]))                          
                        :documentation "A property batch setter. Pass *kwargs* to set properties.
        ")
                        (reparse-symbol indented_block_body) [31005 31297])
                    ("findobj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31314 31318])
                            ("match" variable nil (reparse-symbol function_parameters) [31320 31325])
                            ("include_self" variable nil (reparse-symbol function_parameters) [31332 31344]))                          
                        :documentation "
        Find artist objects.

        Recursively find all :class:`~matplotlib.artist.Artist` instances
        contained in self.

        *match* can be

          - None: return all objects contained in artist.

          - function with signature ``boolean = match(artist)``
            used to filter matches

          - class instance: e.g., Line2D.  Only return artists of class type.

        If *include_self* is True (default), include self in the list to be
        checked for a match.

        ")
                        (reparse-symbol indented_block_body) [31302 32712])
                    ("get_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32737 32741])
                            ("event" variable nil (reparse-symbol function_parameters) [32743 32748]))                          
                        :documentation "
        Get the cursor data for a given event.
        ")
                        (reparse-symbol indented_block_body) [32717 32842])
                    ("format_cursor_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32870 32874])
                            ("data" variable nil (reparse-symbol function_parameters) [32876 32880]))                          
                        :documentation "
        Return *cursor data* string formatted.
        ")
                        (reparse-symbol indented_block_body) [32847 33194])
                    ("mouseover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33227 33231]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33199 33265])
                    ("mouseover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33306 33310])
                            ("val" variable nil (reparse-symbol function_parameters) [33312 33315]))                          
                        :decorators 
                          ( ("mouseover.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33270 33538]))                  
                :type "class")
                nil [2658 33538])
            ("ArtistInspector" type
               (:documentation "
    A helper class to inspect an :class:`~matplotlib.artist.Artist`
    and return information about it's settable properties and their
    current values.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the artist inspector with an
        :class:`~matplotlib.artist.Artist` or sequence of :class:`Artists`.
        If a sequence is used, we assume it is a homogeneous sequence (all
        :class:`Artists` are of the same type) and it is your responsibility
        to make sure this is so.
        \"\"\"" code nil (reparse-symbol indented_block_body) [33778 34102])
                            ("if" code nil (reparse-symbol indented_block_body) [34111 34165])
                            ("self" variable nil (reparse-symbol indented_block_body) [34174 34188])
                            ("if" code nil (reparse-symbol indented_block_body) [34197 34249])
                            ("self" variable nil (reparse-symbol indented_block_body) [34257 34267])
                            ("self" variable nil (reparse-symbol indented_block_body) [34277 34309]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33760 33764])
                            ("o" variable nil (reparse-symbol function_parameters) [33766 33767]))                          
                        :documentation "
        Initialize the artist inspector with an
        :class:`~matplotlib.artist.Artist` or sequence of :class:`Artists`.
        If a sequence is used, we assume it is a homogeneous sequence (all
        :class:`Artists` are of the same type) and it is your responsibility
        to make sure this is so.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33747 34310])
                    ("get_aliases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34331 34335]))                          
                        :documentation "
        Get a dict mapping *fullname* -> *alias* for each *alias* in
        the :class:`~matplotlib.artist.ArtistInspector`.

        e.g., for lines::

          {'markerfacecolor': 'mfc',
           'linewidth'      : 'lw',
          }

        ")
                        (reparse-symbol indented_block_body) [34315 35097])
                    ("_get_valid_values_regex" variable nil (reparse-symbol indented_block_body) [35102 35199])
                    ("get_valid_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35226 35230])
                            ("attr" variable nil (reparse-symbol function_parameters) [35232 35236]))                          
                        :documentation "
        Get the legal arguments for the setter associated with *attr*.

        This is done by querying the docstring of the function *set_attr*
        for a line that begins with ACCEPTS:

        e.g., for a line linestyle, return
        \"[ ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'steps'`` | ``'None'``
        ]\"
        ")
                        (reparse-symbol indented_block_body) [35205 36108])
                    ("_get_setters_and_targets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36142 36146]))                          
                        :documentation "
        Get the attribute strings and a full path to where the setter
        is defined for all setters in an object.
        ")
                        (reparse-symbol indented_block_body) [36113 37135])
                    ("get_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37156 37160]))                          
                        :documentation "
        Get the attribute strings with setters for object.  e.g., for a line,
        return ``['markerfacecolor', 'linewidth', ....]``.
        ")
                        (reparse-symbol indented_block_body) [37140 37399])
                    ("is_alias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37417 37421])
                            ("o" variable nil (reparse-symbol function_parameters) [37423 37424]))                          
                        :documentation "
        Return *True* if method object *o* is an alias for another
        function.
        ")
                        (reparse-symbol indented_block_body) [37404 37650])
                    ("aliased_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37672 37676])
                            ("s" variable nil (reparse-symbol function_parameters) [37678 37679]))                          
                        :documentation "
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME.

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        ")
                        (reparse-symbol indented_block_body) [37655 38157])
                    ("aliased_name_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38184 38188])
                            ("s" variable nil (reparse-symbol function_parameters) [38190 38191])
                            ("target" variable nil (reparse-symbol function_parameters) [38193 38199]))                          
                        :documentation "
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME formatted for ReST

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        ")
                        (reparse-symbol indented_block_body) [38162 38755])
                    ("pprint_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38779 38783])
                            ("prop" variable nil (reparse-symbol function_parameters) [38785 38789])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [38796 38808]))                          
                        :documentation "
        If *prop* is *None*, return a list of strings of all settable properies
        and their valid values.

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        ")
                        (reparse-symbol indented_block_body) [38760 39629])
                    ("pprint_setters_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39658 39662])
                            ("prop" variable nil (reparse-symbol function_parameters) [39664 39668])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [39675 39687]))                          
                        :documentation "
        If *prop* is *None*, return a list of strings of all settable properies
        and their valid values.  Format the output for ReST

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        ")
                        (reparse-symbol indented_block_body) [39634 41368])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41388 41392]))                          
                        :documentation "
        return a dictionary mapping property name -> value
        ")
                        (reparse-symbol indented_block_body) [41373 42079])
                    ("pprint_getters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42103 42107]))                          
                        :documentation "
        Return the getters and actual values as list of strings.
        ")
                        (reparse-symbol indented_block_body) [42084 42730])
                    ("findobj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42747 42751])
                            ("match" variable nil (reparse-symbol function_parameters) [42753 42758]))                          
                        :documentation "
        Recursively find all :class:`matplotlib.artist.Artist`
        instances contained in *self*.

        If *match* is not None, it can be

          - function with signature ``boolean = match(artist)``

          - class instance: e.g., :class:`~matplotlib.lines.Line2D`

        used to filter matches.
        ")
                        (reparse-symbol indented_block_body) [42735 43950]))                  
                :type "class")
                nil [33540 43950])
            ("getp" function
               (:documentation "
    Return the value of object's property.  *property* is an optional string
    for the property you want to return

    Example usage::

        getp(obj)  # get all the object properties
        getp(obj, 'linestyle')  # get the linestyle property

    *obj* is a :class:`Artist` instance, e.g.,
    :class:`~matplotllib.lines.Line2D` or an instance of a
    :class:`~matplotlib.axes.Axes` or :class:`matplotlib.text.Text`.
    If the *property* is 'somename', this function returns

      obj.get_somename()

    :func:`getp` can be used to query all the gettable properties with
    ``getp(obj)``. Many properties have aliases for shorter typing, e.g.
    'lw' is an alias for 'linewidth'.  In the output, aliases and full
    property names will be listed as:

      property or alias = value

    e.g.:

      linewidth or lw = 2
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [43961 43964])
                    ("property" variable nil (reparse-symbol function_parameters) [43966 43974]))                  )
                nil [43952 45039])
            ("get" variable nil nil [45048 45058])
            ("setp" function
               (:documentation "
    Set a property on an artist object.

    matplotlib supports the use of :func:`setp` (\"set property\") and
    :func:`getp` to set and get object properties, as well as to do
    introspection on the object.  For example, to set the linestyle of a
    line to be dashed, you can do::

      >>> line, = plot([1,2,3])
      >>> setp(line, linestyle='--')

    If you want to know the valid types of arguments, you can provide the
    name of the property you want to set without a value::

      >>> setp(line, 'linestyle')
          linestyle: [ '-' | '--' | '-.' | ':' | 'steps' | 'None' ]

    If you want to see all the properties that can be set, and their
    possible values, you can do::

      >>> setp(line)
          ... long output listing omitted

    :func:`setp` operates on a single instance or a list of instances.
    If you are in query mode introspecting the possible values, only
    the first instance in the sequence is used.  When actually setting
    values, all the instances will be set.  e.g., suppose you have a
    list of two lines, the following will make both lines thicker and
    red::

      >>> x = arange(0,1.0,0.01)
      >>> y1 = sin(2*pi*x)
      >>> y2 = sin(4*pi*x)
      >>> lines = plot(x, y1, x, y2)
      >>> setp(lines, linewidth=2, color='r')

    :func:`setp` works with the MATLAB style string/value pairs or
    with python kwargs.  For example, the following are equivalent::

      >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style
      >>> setp(lines, linewidth=2, color='r')        # python style
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [45070 45073])
                    ("args" variable nil (reparse-symbol function_parameters) [45075 45080])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [45082 45090]))                  )
                nil [45061 47421])
            ("kwdoc" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [47433 47434]))              ) nil [47423 47704])
            ("docstring" code nil nil [47705 47751])
            ("_get_axes_msg" variable nil nil [47753 47874]))          
      :file "artist.py"
      :pointmax 47875
      :fsize 47874
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 489 . 493) (PERIOD 494 . 495) (FROM 369 . 373) (PERIOD 374 . 375)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("numpy" include nil nil [123 141])
            ("numpy" include nil nil [142 162])
            ("matplotlib.cbook" include nil nil [164 199])
            ("" code nil nil [230 334])
            ("" code nil nil [365 471])
            ("matplotlib.transforms" include nil nil [472 534])
            ("matplotlib" include nil nil [535 567])
            ("ScaleBase" type
               (:documentation "
    The base class for all scales.

    Scales are separable transformations, working on a single dimension.

    Any subclasses will want to override:

      - :attr:`name`
      - :meth:`get_transform`
      - :meth:`set_default_locators_and_formatters`

    And optionally:
      - :meth:`limit_range_for_scale`
    "
                :superclasses ("object")
                :members 
                  ( ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [948 952]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` object
        associated with this scale.
        ")
                        (reparse-symbol indented_block_body) [930 1119])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1164 1168])
                            ("axis" variable nil (reparse-symbol function_parameters) [1170 1174]))                          
                        :documentation "
        Set the :class:`~matplotlib.ticker.Locator` and
        :class:`~matplotlib.ticker.Formatter` objects on the given
        axis to match this scale.
        ")
                        (reparse-symbol indented_block_body) [1124 1394])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1425 1429])
                            ("vmin" variable nil (reparse-symbol function_parameters) [1431 1435])
                            ("vmax" variable nil (reparse-symbol function_parameters) [1437 1441])
                            ("minpos" variable nil (reparse-symbol function_parameters) [1443 1449]))                          
                        :documentation "
        Returns the range *vmin*, *vmax*, possibly limited to the
        domain supported by this scale.

        *minpos* should be the minimum positive value in the data.
         This is used by log scales to determine a minimum value.
        ")
                        (reparse-symbol indented_block_body) [1399 1742]))                  
                :type "class")
                nil [570 1742])
            ("LinearScale" type
               (:documentation "
    The default linear scale.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [1825 1840])
                    ("__init__" function
                       (:suite 
                          ( ("pass" code nil (reparse-symbol indented_block_body) [1890 1894]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1859 1863])
                            ("axis" variable nil (reparse-symbol function_parameters) [1865 1869])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1871 1879]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1846 1895])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1940 1944])
                            ("axis" variable nil (reparse-symbol function_parameters) [1946 1950]))                          
                        :documentation "
        Set the locators and formatters to reasonable defaults for
        linear scaling.
        ")
                        (reparse-symbol indented_block_body) [1900 2262])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2285 2289]))                          
                        :documentation "
        The transform for linear scaling is just the
        :class:`~matplotlib.transforms.IdentityTransform`.
        ")
                        (reparse-symbol indented_block_body) [2267 2463]))                  
                :type "class")
                nil [1744 2463])
            ("LogTransformBase" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [2504 2518])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [2523 2538])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [2543 2562])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [2567 2585])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [2627 2651])
                            ("if" code nil (reparse-symbol indented_block_body) [2660 2771]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2604 2608])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [2610 2616]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2591 2771])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2801 2805])
                            ("a" variable nil (reparse-symbol function_parameters) [2807 2808]))                          )
                        (reparse-symbol indented_block_body) [2776 2978]))                  
                :type "class")
                nil [2465 2978])
            ("InvertedLogTransformBase" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [3027 3041])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [3046 3061])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [3066 3085])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [3090 3108])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3139 3143])
                            ("a" variable nil (reparse-symbol function_parameters) [3145 3146]))                          )
                        (reparse-symbol indented_block_body) [3114 3187]))                  
                :type "class")
                nil [2980 3187])
            ("Log10Transform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3233 3244])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3263 3267]))                          )
                        (reparse-symbol indented_block_body) [3250 3310]))                  
                :type "class")
                nil [3189 3310])
            ("InvertedLog10Transform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3372 3383])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3402 3406]))                          )
                        (reparse-symbol indented_block_body) [3389 3441]))                  
                :type "class")
                nil [3312 3441])
            ("Log2Transform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3486 3496])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3515 3519]))                          )
                        (reparse-symbol indented_block_body) [3502 3561]))                  
                :type "class")
                nil [3443 3561])
            ("InvertedLog2Transform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3622 3632])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3651 3655]))                          )
                        (reparse-symbol indented_block_body) [3638 3689]))                  
                :type "class")
                nil [3563 3689])
            ("NaturalLogTransform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3740 3751])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3770 3774]))                          )
                        (reparse-symbol indented_block_body) [3757 3822]))                  
                :type "class")
                nil [3691 3822])
            ("InvertedNaturalLogTransform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("base" variable nil (reparse-symbol indented_block_body) [3889 3900])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3919 3923]))                          )
                        (reparse-symbol indented_block_body) [3906 3963]))                  
                :type "class")
                nil [3824 3963])
            ("LogTransform" type
               (:superclasses ("LogTransformBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("LogTransformBase" code nil (reparse-symbol indented_block_body) [4049 4088])
                            ("self" variable nil (reparse-symbol indented_block_body) [4097 4113]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4020 4024])
                            ("base" variable nil (reparse-symbol function_parameters) [4026 4030])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [4032 4038]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4007 4114])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4132 4136]))                          )
                        (reparse-symbol indented_block_body) [4119 4186]))                  
                :type "class")
                nil [3965 4186])
            ("InvertedLogTransform" type
               (:superclasses ("InvertedLogTransformBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("InvertedLogTransformBase" code nil (reparse-symbol indented_block_body) [4280 4319])
                            ("self" variable nil (reparse-symbol indented_block_body) [4328 4344]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4259 4263])
                            ("base" variable nil (reparse-symbol function_parameters) [4265 4269]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4246 4345])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4363 4367]))                          )
                        (reparse-symbol indented_block_body) [4350 4409]))                  
                :type "class")
                nil [4188 4409])
            ("LogScale" type
               (:documentation "
    A standard logarithmic scale.  Care is taken so non-positive
    values are not plotted.

    For computational efficiency (to push as much as possible to Numpy
    C code in the common cases), this scale provides different
    transforms depending on the base of the logarithm:

       - base 10 (:class:`Log10Transform`)
       - base 2 (:class:`Log2Transform`)
       - base e (:class:`NaturalLogTransform`)
       - arbitrary base (:class:`LogTransform`)
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [4921 4933])
                    ("LogTransformBase" variable nil (reparse-symbol indented_block_body) [4964 4999])
                    ("Log10Transform" variable nil (reparse-symbol indented_block_body) [5004 5035])
                    ("InvertedLog10Transform" variable nil (reparse-symbol indented_block_body) [5040 5087])
                    ("Log2Transform" variable nil (reparse-symbol indented_block_body) [5092 5121])
                    ("InvertedLog2Transform" variable nil (reparse-symbol indented_block_body) [5126 5171])
                    ("NaturalLogTransform" variable nil (reparse-symbol indented_block_body) [5176 5217])
                    ("InvertedNaturalLogTransform" variable nil (reparse-symbol indented_block_body) [5222 5279])
                    ("LogTransform" variable nil (reparse-symbol indented_block_body) [5284 5311])
                    ("InvertedLogTransform" variable nil (reparse-symbol indented_block_body) [5316 5359])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *basex*/*basey*:
           The base of the logarithm

        *nonposx*/*nonposy*: ['mask' | 'clip' ]
          non-positive values in *x* or *y* can be masked as
          invalid, or clipped to a very small positive number

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5409 5961])
                            ("if" code nil (reparse-symbol indented_block_body) [5970 6292])
                            ("if" code nil (reparse-symbol indented_block_body) [6301 6416])
                            ("if" code nil (reparse-symbol indented_block_body) [6425 6749])
                            ("self" variable nil (reparse-symbol indented_block_body) [6758 6774])
                            ("self" variable nil (reparse-symbol indented_block_body) [6783 6799]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5378 5382])
                            ("axis" variable nil (reparse-symbol function_parameters) [5384 5388])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5390 5398]))                          
                        :documentation "
        *basex*/*basey*:
           The base of the logarithm

        *nonposx*/*nonposy*: ['mask' | 'clip' ]
          non-positive values in *x* or *y* can be masked as
          invalid, or clipped to a very small positive number

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5365 6800])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6845 6849])
                            ("axis" variable nil (reparse-symbol function_parameters) [6851 6855]))                          
                        :documentation "
        Set the locators and formatters to specialized versions for
        log scaling.
        ")
                        (reparse-symbol indented_block_body) [6805 7316])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7339 7343]))                          
                        :documentation "
        Return a :class:`~matplotlib.transforms.Transform` instance
        appropriate for the given logarithm base.
        ")
                        (reparse-symbol indented_block_body) [7321 7519])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7550 7554])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7556 7560])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7562 7566])
                            ("minpos" variable nil (reparse-symbol function_parameters) [7568 7574]))                          
                        :documentation "
        Limit the domain to positive values.
        ")
                        (reparse-symbol indented_block_body) [7524 7902]))                  
                :type "class")
                nil [4411 7902])
            ("SymmetricalLogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [7950 7964])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [7969 7984])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [7989 8008])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [8013 8031])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [8092 8116])
                            ("self" variable nil (reparse-symbol indented_block_body) [8125 8141])
                            ("self" variable nil (reparse-symbol indented_block_body) [8150 8176])
                            ("self" variable nil (reparse-symbol indented_block_body) [8185 8209])
                            ("self" variable nil (reparse-symbol indented_block_body) [8218 8275])
                            ("self" variable nil (reparse-symbol indented_block_body) [8284 8313]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8050 8054])
                            ("base" variable nil (reparse-symbol function_parameters) [8056 8060])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [8062 8071])
                            ("linscale" variable nil (reparse-symbol function_parameters) [8073 8081]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8037 8314])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8344 8348])
                            ("a" variable nil (reparse-symbol function_parameters) [8350 8351]))                          )
                        (reparse-symbol indented_block_body) [8319 8844])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8862 8866]))                          )
                        (reparse-symbol indented_block_body) [8849 9005]))                  
                :type "class")
                nil [7904 9005])
            ("InvertedSymmetricalLogTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [9061 9075])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [9080 9095])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [9100 9119])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [9124 9142])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [9203 9227])
                            ("symlog" variable nil (reparse-symbol indented_block_body) [9236 9295])
                            ("self" variable nil (reparse-symbol indented_block_body) [9304 9320])
                            ("self" variable nil (reparse-symbol indented_block_body) [9329 9355])
                            ("self" variable nil (reparse-symbol indented_block_body) [9364 9411])
                            ("self" variable nil (reparse-symbol indented_block_body) [9420 9444])
                            ("self" variable nil (reparse-symbol indented_block_body) [9453 9510]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9161 9165])
                            ("base" variable nil (reparse-symbol function_parameters) [9167 9171])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [9173 9182])
                            ("linscale" variable nil (reparse-symbol function_parameters) [9184 9192]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9148 9511])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9541 9545])
                            ("a" variable nil (reparse-symbol function_parameters) [9547 9548]))                          )
                        (reparse-symbol indented_block_body) [9516 9978])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9996 10000]))                          )
                        (reparse-symbol indented_block_body) [9983 10123]))                  
                :type "class")
                nil [9007 10123])
            ("SymmetricalLogScale" type
               (:documentation "
    The symmetrical logarithmic scale is logarithmic in both the
    positive and negative directions from the origin.

    Since the values close to zero tend toward infinity, there is a
    need to have a range around zero that is linear.  The parameter
    *linthresh* allows the user to specify the size of this range
    (-*linthresh*, *linthresh*).
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [10538 10553])
                    ("SymmetricalLogTransform" variable nil (reparse-symbol indented_block_body) [10583 10632])
                    ("InvertedSymmetricalLogTransform" variable nil (reparse-symbol indented_block_body) [10637 10702])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *basex*/*basey*:
           The base of the logarithm

        *linthreshx*/*linthreshy*:
          The range (-*x*, *x*) within which the plot is linear (to
          avoid having the plot go to infinity around zero).

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.

        *linscalex*/*linscaley*:
           This allows the linear range (-*linthresh* to *linthresh*)
           to be stretched relative to the logarithmic range.  Its
           value is the number of decades to use for each half of the
           linear range.  For example, when *linscale* == 1.0 (the
           default), the space used for the positive and negative
           halves of the linear range will be equal to one decade in
           the logarithmic range.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10752 11774])
                            ("if" code nil (reparse-symbol indented_block_body) [11783 12215])
                            ("if" code nil (reparse-symbol indented_block_body) [12224 12308])
                            ("if" code nil (reparse-symbol indented_block_body) [12316 12410])
                            ("if" code nil (reparse-symbol indented_block_body) [12418 12510])
                            ("self" variable nil (reparse-symbol indented_block_body) [12519 12702])
                            ("self" variable nil (reparse-symbol indented_block_body) [12712 12728])
                            ("self" variable nil (reparse-symbol indented_block_body) [12737 12763])
                            ("self" variable nil (reparse-symbol indented_block_body) [12772 12796])
                            ("self" variable nil (reparse-symbol indented_block_body) [12805 12821]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10721 10725])
                            ("axis" variable nil (reparse-symbol function_parameters) [10727 10731])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10733 10741]))                          
                        :documentation "
        *basex*/*basey*:
           The base of the logarithm

        *linthreshx*/*linthreshy*:
          The range (-*x*, *x*) within which the plot is linear (to
          avoid having the plot go to infinity around zero).

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.

        *linscalex*/*linscaley*:
           This allows the linear range (-*linthresh* to *linthresh*)
           to be stretched relative to the logarithmic range.  Its
           value is the number of decades to use for each half of the
           linear range.  For example, when *linscale* == 1.0 (the
           default), the space used for the positive and negative
           halves of the linear range will be equal to one decade in
           the logarithmic range.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10708 12822])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12867 12871])
                            ("axis" variable nil (reparse-symbol function_parameters) [12873 12877]))                          
                        :documentation "
        Set the locators and formatters to specialized versions for
        symmetrical log scaling.
        ")
                        (reparse-symbol indented_block_body) [12827 13340])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13363 13367]))                          
                        :documentation "
        Return a :class:`SymmetricalLogTransform` instance.
        ")
                        (reparse-symbol indented_block_body) [13345 13485]))                  
                :type "class")
                nil [10125 13485])
            ("LogitTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [13524 13538])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [13543 13558])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [13563 13582])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [13587 13605])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [13647 13671])
                            ("if" code nil (reparse-symbol indented_block_body) [13680 13791])
                            ("self" variable nil (reparse-symbol indented_block_body) [13799 13820]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13624 13628])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [13630 13636]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13611 13821])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13851 13855])
                            ("a" variable nil (reparse-symbol function_parameters) [13857 13858]))                          
                        :documentation "logit transform (base 10), masked or clipped")
                        (reparse-symbol indented_block_body) [13826 14107])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14125 14129]))                          )
                        (reparse-symbol indented_block_body) [14112 14179]))                  
                :type "class")
                nil [13487 14179])
            ("LogisticTransform" type
               (:superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [14221 14235])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [14240 14255])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [14260 14279])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [14284 14302])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [14351 14375])
                            ("self" variable nil (reparse-symbol indented_block_body) [14384 14405]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14321 14325])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [14327 14333]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14308 14406])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14436 14440])
                            ("a" variable nil (reparse-symbol function_parameters) [14442 14443]))                          
                        :documentation "logistic transform (base 10)")
                        (reparse-symbol indented_block_body) [14411 14525])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14543 14547]))                          )
                        (reparse-symbol indented_block_body) [14530 14594]))                  
                :type "class")
                nil [14181 14594])
            ("LogitScale" type
               (:documentation "
    Logit scale for data between zero and one, both excluded.

    This scale is similar to a log scale close to zero and to one, and almost
    linear around 0.5. It maps the interval ]0, 1[ onto ]-infty, +infty[.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [14860 14874])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *nonpos*: ['mask' | 'clip' ]
          values beyond ]0, 1[ can be masked as invalid, or clipped to a number
          very close to 0 or 1
        \"\"\"" code nil (reparse-symbol indented_block_body) [14929 15092])
                            ("if" code nil (reparse-symbol indented_block_body) [15101 15216])
                            ("self" variable nil (reparse-symbol indented_block_body) [15225 15265]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14893 14897])
                            ("axis" variable nil (reparse-symbol function_parameters) [14899 14903])
                            ("nonpos" variable nil (reparse-symbol function_parameters) [14905 14911]))                          
                        :documentation "
        *nonpos*: ['mask' | 'clip' ]
          values beyond ]0, 1[ can be masked as invalid, or clipped to a number
          very close to 0 or 1
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14880 15266])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15289 15293]))                          
                        :documentation "
        Return a :class:`LogitTransform` instance.
        ")
                        (reparse-symbol indented_block_body) [15271 15402])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15447 15451])
                            ("axis" variable nil (reparse-symbol function_parameters) [15453 15457]))                          )
                        (reparse-symbol indented_block_body) [15407 15712])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15743 15747])
                            ("vmin" variable nil (reparse-symbol function_parameters) [15749 15753])
                            ("vmax" variable nil (reparse-symbol function_parameters) [15755 15759])
                            ("minpos" variable nil (reparse-symbol function_parameters) [15761 15767]))                          
                        :documentation "
        Limit the domain to values between 0 and 1 (excluded).
        ")
                        (reparse-symbol indented_block_body) [15717 16116]))                  
                :type "class")
                nil [14596 16116])
            ("_scale_mapping" variable nil nil [16118 16254])
            ("get_scale_names" function nil nil [16257 16361])
            ("scale_factory" function
               (:documentation "
    Return a scale class by name.

    ACCEPTS: [ %(names)s ]
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [16381 16386])
                    ("axis" variable nil (reparse-symbol function_parameters) [16388 16392])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16394 16402]))                  )
                nil [16363 16703])
            ("scale_factory" code nil nil [16703 16805])
            ("register_scale" function
               (:documentation "
    Register a new kind of scale.

    *scale_class* must be a subclass of :class:`ScaleBase`.
    "
                :arguments 
                  ( ("scale_class" variable nil (reparse-symbol function_parameters) [16827 16838]))                  )
                nil [16808 17003])
            ("get_scale_docs" function (:documentation "
    Helper function for generating docstrings related to scales.
    ") nil [17005 17517])
            ("docstring" code nil nil [17519 17652]))          
      :file "scale.py"
      :pointmax 17653
      :fsize 17652
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module provides a large set of colormaps, functions for
registering new colormaps and for getting a colormap by name,
and a mixin class for adding color mapping functionality.

\"\"\"" code nil nil [1 190])
            ("" code nil nil [214 299])
            ("six" include nil nil [301 311])
            ("os" include nil nil [313 322])
            ("numpy" include nil nil [323 341])
            ("numpy" include nil nil [342 362])
            ("matplotlib" include nil nil [363 387])
            ("matplotlib.colors" include nil nil [388 422])
            ("matplotlib.cbook" include nil nil [423 455])
            ("matplotlib._cm" include nil nil [456 508])
            ("matplotlib._cm" include nil nil [509 545])
            ("matplotlib._cm_listed" include nil nil [546 601])
            ("cmap_d" variable nil nil [603 632])
            ("_reverser" function (:arguments 
              ( ("f" variable nil (reparse-symbol function_parameters) [732 733]))              ) nil [718 803])
            ("revcmap" function
               (:documentation "Can only handle specification *data* in dictionary format."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [817 821]))                  )
                nil [805 1426])
            ("_reverse_cmap_spec" function
               (:documentation "Reverses cmap specification *spec*, can handle both dict and tuple
    type specs."
                :arguments 
                  ( ("spec" variable nil (reparse-symbol function_parameters) [1451 1455]))                  )
                nil [1428 1871])
            ("_generate_cmap" function
               (:documentation "Generates the requested cmap from its *name*.  The lut size is
    *lutsize*."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1892 1896])
                    ("lutsize" variable nil (reparse-symbol function_parameters) [1898 1905]))                  )
                nil [1873 2416])
            ("LUTSIZE" variable nil nil [2417 2452])
            ("for" code nil nil [2497 2752])
            ("for" code nil nil [2885 2979])
            ("cmap_d" code nil nil [2980 3007])
            ("locals" code nil nil [3009 3032])
            ("register_cmap" function
               (:documentation "
    Add a colormap to the set recognized by :func:`get_cmap`.

    It can be used in two ways::

        register_cmap(name='swirly', cmap=swirly_cmap)

        register_cmap(name='choppy', data=choppydata, lut=128)

    In the first case, *cmap* must be a :class:`matplotlib.colors.Colormap`
    instance.  The *name* is optional; if absent, the name will
    be the :attr:`~matplotlib.colors.Colormap.name` attribute of the *cmap*.

    In the second case, the three arguments are passed to
    the :class:`~matplotlib.colors.LinearSegmentedColormap` initializer,
    and the resulting colormap is registered.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3087 3091])
                    ("cmap" variable nil (reparse-symbol function_parameters) [3098 3102])
                    ("data" variable nil (reparse-symbol function_parameters) [3109 3113])
                    ("lut" variable nil (reparse-symbol function_parameters) [3120 3123]))                  )
                nil [3069 4310])
            ("get_cmap" function
               (:documentation "
    Get a colormap instance, defaulting to rc values if *name* is None.

    Colormaps added with :func:`register_cmap` take precedence over
    built-in colormaps.

    If *name* is a :class:`matplotlib.colors.Colormap` instance, it will be
    returned.

    If *lut* is not None it must be an integer giving the number of
    entries desired in the lookup table, and *name* must be a standard
    mpl colormap name.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4325 4329])
                    ("lut" variable nil (reparse-symbol function_parameters) [4336 4339]))                  )
                nil [4312 5210])
            ("ScalarMappable" type
               (:documentation "
    This is a mixin class to support scalar data to RGBA mapping.
    The ScalarMappable makes use of data normalization before returning
    RGBA colors from the given colormap.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("r\"\"\"

        Parameters
        ----------
        norm : :class:`matplotlib.colors.Normalize` instance
            The normalizing object which scales data, typically into the
            interval ``[0, 1]``.
            If *None*, *norm* defaults to a *colors.Normalize* object which
            initializes its scaling based on the first data processed.
        cmap : str or :class:`~matplotlib.colors.Colormap` instance
            The colormap used to map normalized data values to RGBA colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5492 6005])
                            ("self" variable nil (reparse-symbol indented_block_body) [6015 6058])
                            ("if" code nil (reparse-symbol indented_block_body) [6068 6115])
                            ("if" code nil (reparse-symbol indented_block_body) [6123 6178])
                            ("self" variable nil (reparse-symbol indented_block_body) [6187 6201])
                            ("self" variable nil (reparse-symbol indented_block_body) [6272 6288])
                            ("self" variable nil (reparse-symbol indented_block_body) [6354 6380])
                            ("self" variable nil (reparse-symbol indented_block_body) [6468 6488])
                            ("self" variable nil (reparse-symbol indented_block_body) [6497 6532]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5455 5459])
                            ("norm" variable nil (reparse-symbol function_parameters) [5461 5465])
                            ("cmap" variable nil (reparse-symbol function_parameters) [5472 5476]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5442 6533])
                    ("to_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6550 6554])
                            ("x" variable nil (reparse-symbol function_parameters) [6556 6557])
                            ("alpha" variable nil (reparse-symbol function_parameters) [6559 6564])
                            ("bytes" variable nil (reparse-symbol function_parameters) [6571 6576])
                            ("norm" variable nil (reparse-symbol function_parameters) [6584 6588]))                          
                        :documentation "
        Return a normalized rgba array corresponding to *x*.

        In the normal case, *x* is a 1-D or 2-D sequence of scalars, and
        the corresponding ndarray of rgba values will be returned,
        based on the norm and colormap set for this ScalarMappable.

        There is one special case, for handling images that are already
        rgb or rgba, such as might have been read from an image file.
        If *x* is an ndarray with 3 dimensions,
        and the last dimension is either 3 or 4, then it will be
        treated as an rgb or rgba array, and no mapping will be done.
        If the last dimension is 3, the *alpha* kwarg (defaulting to 1)
        will be used to fill in the transparency.  If the last dimension
        is 4, the *alpha* kwarg is ignored; it does not
        replace the pre-existing alpha.  A ValueError will be raised
        if the third dimension is other than 3 or 4.

        In either case, if *bytes* is *False* (default), the rgba
        array will be floats in the 0-1 range; if it is *True*,
        the returned rgba array will be uint8 in the 0 to 255 range.

        If norm is False, no normalization of the input data is
        performed, and it is assumed to already be in the range (0-1).

        Note: this method assumes the input is well-behaved; it does
        not check for anomalies such as *x* being a masked rgba
        array, or being an integer type other than uint8, or being
        a floating point rgba array with values outside the 0-1 range.
        ")
                        (reparse-symbol indented_block_body) [6538 9333])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9352 9356])
                            ("A" variable nil (reparse-symbol function_parameters) [9358 9359]))                          )
                        (reparse-symbol indented_block_body) [9338 9474])
                    ("get_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9493 9497]))                          )
                        (reparse-symbol indented_block_body) [9479 9550])
                    ("get_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9568 9572]))                          )
                        (reparse-symbol indented_block_body) [9555 9630])
                    ("get_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9648 9652]))                          )
                        (reparse-symbol indented_block_body) [9635 9769])
                    ("set_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9787 9791])
                            ("vmin" variable nil (reparse-symbol function_parameters) [9793 9797])
                            ("vmax" variable nil (reparse-symbol function_parameters) [9804 9808]))                          
                        :documentation "
        set the norm limits for image scaling; if *vmin* is a length2
        sequence, interpret it as ``(vmin, vmax)`` which is used to
        support setp

        ACCEPTS: a length 2 sequence of floats
        ")
                        (reparse-symbol indented_block_body) [9774 10335])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10353 10357])
                            ("cmap" variable nil (reparse-symbol function_parameters) [10359 10363]))                          
                        :documentation "
        set the colormap for luminance data

        ACCEPTS: a colormap or registered colormap name
        ")
                        (reparse-symbol indented_block_body) [10340 10569])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10587 10591])
                            ("norm" variable nil (reparse-symbol function_parameters) [10593 10597]))                          )
                        (reparse-symbol indented_block_body) [10574 10752])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10771 10775]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array
        ")
                        (reparse-symbol indented_block_body) [10757 11048])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11072 11076]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array, changing only limits that are None
        ")
                        (reparse-symbol indented_block_body) [11053 11390])
                    ("add_checker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11411 11415])
                            ("checker" variable nil (reparse-symbol function_parameters) [11417 11424]))                          
                        :documentation "
        Add an entry to a dictionary of boolean flags
        that are set to True when the mappable is changed.
        ")
                        (reparse-symbol indented_block_body) [11395 11606])
                    ("check_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11628 11632])
                            ("checker" variable nil (reparse-symbol function_parameters) [11634 11641]))                          
                        :documentation "
        If mappable has changed since the last check,
        return True; else return False
        ")
                        (reparse-symbol indented_block_body) [11611 11890])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11907 11911]))                          
                        :documentation "
        Call this whenever the mappable is changed to notify all the
        callbackSM listeners to the 'changed' signal
        ")
                        (reparse-symbol indented_block_body) [11895 12189]))                  
                :type "class")
                nil [5212 12189]))          
      :file "cm.py"
      :pointmax 12189
      :fsize 12188
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for converting numbers or color arguments to *RGB* or *RGBA*

*RGB* and *RGBA* are sequences of, respectively, 3 or 4 floats in the
range 0-1.

This module includes functions and classes for color specification
conversions, and for mapping numbers to colors in a 1-D array of colors called
a colormap. Colormapping typically involves two steps: a data array is first
mapped onto the range 0-1 using an instance of :class:`Normalize` or of a
subclass; then this number in the 0-1 range is mapped to a color using an
instance of a subclass of :class:`Colormap`.  Two are provided here:
:class:`LinearSegmentedColormap`, which is used to generate all the built-in
colormap instances, but is also useful for making custom colormaps, and
:class:`ListedColormap`, which is used for generating a custom colormap from a
list of color specifications.

The module also provides functions for checking whether an object can be
interpreted as a color (:func:`is_color_like`), for converting such an object
to an RGBA tuple (:func:`to_rgba`) or to an HTML-like hex string in the
`#rrggbb` format (:func:`to_hex`), and a sequence of colors to an `(n, 4)`
RGBA array (:func:`to_rgba_array`).  Caching is used for efficiency.

Commands which take color arguments can use several formats to specify
the colors.  For the basic built-in colors, you can use a single letter

    - `b`: blue
    - `g`: green
    - `r`: red
    - `c`: cyan
    - `m`: magenta
    - `y`: yellow
    - `k`: black
    - `w`: white

To use the colors that are part of the active color cycle in the current style,
use `C` followed by a digit.  For example:

    - `C0`: The first color in the cycle
    - `C1`: The second color in the cycle

Gray shades can be given as a string encoding a float in the 0-1 range, e.g.::

    color = '0.75'

For a greater range of colors, you have two options.  You can specify the
color using an html hex string, as in::

    color = '#eeefff'

(possibly specifying an alpha value as well), or you can pass an `(r, g, b)`
or `(r, g, b, a)` tuple, where each of `r`, `g`, `b` and `a` are in the range
[0,1].

Finally, legal html names for colors, like 'red', 'burlywood' and 'chartreuse'
are supported.
\"\"\"" code nil nil [1 2211])
            ("" code nil nil [2236 2321])
            ("re" include nil nil [2322 2331])
            ("six" include nil nil [2332 2342])
            ("six.moves" include nil nil [2343 2368])
            ("warnings" include nil nil [2369 2384])
            ("numpy" include nil nil [2386 2404])
            ("numpy" include nil nil [2405 2425])
            ("matplotlib.cbook" include nil nil [2426 2458])
            ("XKCD_COLORS" include nil nil [2477 2537])
            ("CSS4_COLORS" include nil nil [2477 2537])
            ("TABLEAU_COLORS" include nil nil [2477 2537])
            ("BASE_COLORS" include nil nil [2477 2537])
            ("_ColorMapping" type
               (:superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [2608 2652])
                            ("self" variable nil (reparse-symbol indented_block_body) [2661 2676]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2584 2588])
                            ("mapping" variable nil (reparse-symbol function_parameters) [2590 2597]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2571 2677])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2698 2702])
                            ("key" variable nil (reparse-symbol function_parameters) [2704 2707])
                            ("value" variable nil (reparse-symbol function_parameters) [2709 2714]))                          )
                        (reparse-symbol indented_block_body) [2682 2803])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2824 2828])
                            ("key" variable nil (reparse-symbol function_parameters) [2830 2833])
                            ("value" variable nil (reparse-symbol function_parameters) [2835 2840]))                          )
                        (reparse-symbol indented_block_body) [2808 2929]))                  
                :type "class")
                nil [2540 2929])
            ("_colors_full_map" variable nil nil [2931 2952])
            ("_colors_full_map" code nil nil [2986 3022])
            ("_colors_full_map" code nil nil [3023 3175])
            ("_colors_full_map" code nil nil [3176 3212])
            ("_colors_full_map" code nil nil [3213 3252])
            ("_colors_full_map" code nil nil [3253 3408])
            ("_colors_full_map" code nil nil [3409 3445])
            ("_colors_full_map" variable nil nil [3446 3496])
            ("get_named_colors_mapping" function (:documentation "Return the global mapping of names to named colors.
    ") nil [3499 3626])
            ("_is_nth_color" function
               (:documentation "Return whether `c` can be interpreted as an item in the color cycle.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [3646 3647]))                  )
                nil [3628 3808])
            ("is_color_like" function
               (:documentation "Return whether `c` can be interpreted as an RGB(A) color.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [3828 3829]))                  )
                nil [3810 4136])
            ("to_rgba" function
               (:documentation "Convert `c` to an RGBA color.

    If `alpha` is not `None`, it forces the alpha value, except if `c` is
    \"none\" (case-insensitive), which always maps to `(0, 0, 0, 0)`.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [4150 4151])
                    ("alpha" variable nil (reparse-symbol function_parameters) [4153 4158]))                  )
                nil [4138 4935])
            ("_to_rgba_no_colorcycle" function
               (:documentation "Convert `c` to an RGBA color, with no support for color-cycle syntax.

    If `alpha` is not `None`, it forces the alpha value, except if `c` is
    \"none\" (case-insensitive), which always maps to `(0, 0, 0, 0)`.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [4964 4965])
                    ("alpha" variable nil (reparse-symbol function_parameters) [4967 4972]))                  )
                nil [4937 7175])
            ("to_rgba_array" function
               (:documentation "Convert `c` to a (n, 4) array of RGBA colors.

    If `alpha` is not `None`, it forces the alpha value.  If `c` is \"none\"
    (case-insensitive) or an empty list, an empty array is returned.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [7195 7196])
                    ("alpha" variable nil (reparse-symbol function_parameters) [7198 7203]))                  )
                nil [7177 8521])
            ("to_rgb" function
               (:documentation "Convert `c` to an RGB color, silently dropping the alpha channel.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [8534 8535]))                  )
                nil [8523 8645])
            ("to_hex" function
               (:documentation "Convert `c` to a hex color.

    Uses the #rrggbb format if `keep_alpha` is False (the default), `#rrggbbaa`
    otherwise.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [8658 8659])
                    ("keep_alpha" variable nil (reparse-symbol function_parameters) [8661 8671]))                  )
                nil [8647 8983])
            ("cnames" variable nil nil [9032 9052])
            ("hexColorPattern" variable nil nil [9053 9104])
            ("rgb2hex" function (:arguments 
              ( ("c" variable nil (reparse-symbol function_parameters) [9119 9120]))              ) nil [9107 9217])
            ("hex2color" function
               (:documentation "
    Take a hex string *s* and return the corresponding rgb 3-tuple
    Example: #efefef -> (0.93725, 0.93725, 0.93725)
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [9233 9234]))                  )
                nil [9219 9408])
            ("ColorConverter" type
               (:documentation "
    Provides methods for converting color specifications to *RGB* or *RGBA*

    Caching is used for more efficient conversion upon repeated calls
    with the same argument.

    Ordinarily only the single instance instantiated in this module,
    *colorConverter*, is needed.
    "
                :superclasses ("object")
                :members 
                  ( ("colors" variable nil (reparse-symbol indented_block_body) [9739 9764])
                    ("cache" variable nil (reparse-symbol indented_block_body) [9769 9799])
                    ("to_rgb" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("arg" variable nil (reparse-symbol function_parameters) [9834 9837]))                          
                        :documentation "
        Returns an *RGB* tuple of three floats from 0-1.

        *arg* can be an *RGB* or *RGBA* sequence or a string in any of
        several forms:

            1) a letter from the set 'rgbcmykw'
            2) a hex color string, like '#00FFFF'
            3) a standard name, like 'aqua'
            4) a string representation of a float, like '0.4',
               indicating gray on a 0-1 scale

        if *arg* is *RGBA*, the *A* will simply be discarded.
        ")
                        (reparse-symbol indented_block_body) [9805 10358])
                    ("to_rgba" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("arg" variable nil (reparse-symbol function_parameters) [10393 10396])
                            ("alpha" variable nil (reparse-symbol function_parameters) [10398 10403]))                          
                        :documentation "
        Returns an *RGBA* tuple of four floats from 0-1.

        For acceptable values of *arg*, see :meth:`to_rgb`.
        In addition, if *arg* is \"none\" (case-insensitive),
        then (0,0,0,0) will be returned.
        If *arg* is an *RGBA* sequence and *alpha* is not *None*,
        *alpha* will replace the original *A*.
        ")
                        (reparse-symbol indented_block_body) [10363 10802])
                    ("to_rgba_array" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("arg" variable nil (reparse-symbol function_parameters) [10843 10846])
                            ("alpha" variable nil (reparse-symbol function_parameters) [10848 10853]))                          
                        :documentation "
        Returns a numpy array of *RGBA* tuples.

        Accepts a single mpl color spec or a sequence of specs.

        Special case to handle \"no color\": if *c* is \"none\" (case-insensitive),
        then an empty array will be returned.  Same for an empty list.
        ")
                        (reparse-symbol indented_block_body) [10807 11191]))                  
                :type "class")
                nil [9410 11191])
            ("colorConverter" variable nil nil [11193 11226])
            ("makeMappingArray" function
               (:documentation "Create an *N* -element 1-d lookup table

    *data* represented by a list of x,y0,y1 mapping correspondences.
    Each element in this list represents how a value between 0 and 1
    (inclusive) represented by x is mapped to a corresponding value
    between 0 and 1 (inclusive). The two values of y are to allow
    for discontinuous mapping functions (say as might be found in a
    sawtooth) where y0 represents the value of y for values of x
    <= to that given, and y1 is the value to be used for x > than
    that given). The list must start with x=0, end with x=1, and
    all values of x must be in increasing order. Values between
    the given mapping points are determined by simple linear interpolation.

    Alternatively, data can be a function mapping values between 0 - 1
    to 0 - 1.

    The function returns an array \"result\" where ``result[x*(N-1)]``
    gives the closest value for values of x between 0 and 1.
    "
                :arguments 
                  ( ("N" variable nil (reparse-symbol function_parameters) [11304 11305])
                    ("data" variable nil (reparse-symbol function_parameters) [11307 11311])
                    ("gamma" variable nil (reparse-symbol function_parameters) [11313 11318]))                  )
                nil [11283 13463])
            ("Colormap" type
               (:documentation "
    Baseclass for all scalar to RGBA mappings.

    Typically Colormap instances are used to convert data values (floats) from
    the interval ``[0, 1]`` to the RGBA color that the respective Colormap
    represents. For scaling of data into the ``[0, 1]`` interval see
    :class:`matplotlib.colors.Normalize`. It is worth noting that
    :class:`matplotlib.cm.ScalarMappable` subclasses make heavy use of this
    ``data->normalize->map-to-color`` processing chain.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        name : str
            The name of the colormap.
        N : int
            The number of rgb quantization levels.

        \"\"\"" code nil (reparse-symbol indented_block_body) [14020 14198])
                            ("self" variable nil (reparse-symbol indented_block_body) [14207 14223])
                            ("self" variable nil (reparse-symbol indented_block_body) [14232 14247])
                            ("self" variable nil (reparse-symbol indented_block_body) [14287 14324])
                            ("self" variable nil (reparse-symbol indented_block_body) [14366 14389])
                            ("self" variable nil (reparse-symbol indented_block_body) [14398 14420])
                            ("self" variable nil (reparse-symbol indented_block_body) [14429 14451])
                            ("self" code nil (reparse-symbol indented_block_body) [14460 14485])
                            ("self" code nil (reparse-symbol indented_block_body) [14494 14518])
                            ("self" variable nil (reparse-symbol indented_block_body) [14527 14547])
                            ("self" variable nil (reparse-symbol indented_block_body) [14839 14867]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13992 13996])
                            ("name" variable nil (reparse-symbol function_parameters) [13998 14002])
                            ("N" variable nil (reparse-symbol function_parameters) [14004 14005]))                          
                        :documentation "
        Parameters
        ----------
        name : str
            The name of the colormap.
        N : int
            The number of rgb quantization levels.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13979 14868])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14886 14890])
                            ("X" variable nil (reparse-symbol function_parameters) [14892 14893])
                            ("alpha" variable nil (reparse-symbol function_parameters) [14895 14900])
                            ("bytes" variable nil (reparse-symbol function_parameters) [14907 14912]))                          
                        :documentation "
        Parameters
        ----------
        X : scalar, ndarray
            The data value(s) to convert to RGBA.
            For floats, X should be in the interval ``[0.0, 1.0]`` to
            return the RGBA values ``X*100`` percent along the Colormap line.
            For integers, X should be in the interval ``[0, Colormap.N)`` to
            return RGBA values *indexed* from the Colormap with index ``X``.
        alpha : float, None
            Alpha must be a scalar between 0 and 1, or None.
        bytes : bool
            If False (default), the returned RGBA values will be floats in the
            interval ``[0, 1]`` otherwise they will be uint8s in the interval
            ``[0, 255]``.

        Returns
        -------
        Tuple of RGBA values if X is scalar, othewise an array of
        RGBA values with a shape of ``X.shape + (4, )``.

        ")
                        (reparse-symbol indented_block_body) [14873 18648])
                    ("set_bad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18665 18669])
                            ("color" variable nil (reparse-symbol function_parameters) [18671 18676])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18682 18687]))                          
                        :documentation "Set color to be used for masked values.
        ")
                        (reparse-symbol indented_block_body) [18653 18878])
                    ("set_under" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18897 18901])
                            ("color" variable nil (reparse-symbol function_parameters) [18903 18908])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18914 18919]))                          
                        :documentation "Set color to be used for low out-of-range values.
           Requires norm.clip = False
        ")
                        (reparse-symbol indented_block_body) [18883 19160])
                    ("set_over" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19178 19182])
                            ("color" variable nil (reparse-symbol function_parameters) [19184 19189])
                            ("alpha" variable nil (reparse-symbol function_parameters) [19195 19200]))                          
                        :documentation "Set color to be used for high out-of-range values.
           Requires norm.clip = False
        ")
                        (reparse-symbol indented_block_body) [19165 19441])
                    ("_set_extremes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19464 19468]))                          )
                        (reparse-symbol indented_block_body) [19446 19826])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19841 19845]))                          
                        :documentation "Generate the lookup table, self._lut")
                        (reparse-symbol indented_block_body) [19831 19956])
                    ("is_gray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19973 19977]))                          )
                        (reparse-symbol indented_block_body) [19961 20165])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20184 20188])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [20190 20197]))                          
                        :documentation "
        Return a new color map with *lutsize* entries.
        ")
                        (reparse-symbol indented_block_body) [20170 20315]))                  
                :type "class")
                nil [13465 20315])
            ("LinearSegmentedColormap" type
               (:documentation "Colormap objects based on lookup tables using linear segments.

    The lookup table is generated using linear interpolation for each
    primary color, with the 0-1 domain divided into any number of
    segments.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create color map from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table. Entries for alpha are optional.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.


        .. seealso::

               :meth:`LinearSegmentedColormap.from_list`
               Static method; factory function for generating a
               smoothly-varying LinearSegmentedColormap.

               :func:`makeMappingArray`
               For information about making a mapping array.
        \"\"\"" code nil (reparse-symbol indented_block_body) [20656 22458])
                            ("self" variable nil (reparse-symbol indented_block_body) [22546 22569])
                            ("Colormap" code nil (reparse-symbol indented_block_body) [22578 22610])
                            ("self" variable nil (reparse-symbol indented_block_body) [22619 22650])
                            ("self" variable nil (reparse-symbol indented_block_body) [22659 22678]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20604 20608])
                            ("name" variable nil (reparse-symbol function_parameters) [20610 20614])
                            ("segmentdata" variable nil (reparse-symbol function_parameters) [20616 20627])
                            ("N" variable nil (reparse-symbol function_parameters) [20629 20630])
                            ("gamma" variable nil (reparse-symbol function_parameters) [20636 20641]))                          
                        :documentation "Create color map from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table. Entries for alpha are optional.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.


        .. seealso::

               :meth:`LinearSegmentedColormap.from_list`
               Static method; factory function for generating a
               smoothly-varying LinearSegmentedColormap.

               :func:`makeMappingArray`
               For information about making a mapping array.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20591 22679])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22694 22698]))                          )
                        (reparse-symbol indented_block_body) [22684 23277])
                    ("set_gamma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23296 23300])
                            ("gamma" variable nil (reparse-symbol function_parameters) [23302 23307]))                          
                        :documentation "
        Set a new gamma value and regenerate color map.
        ")
                        (reparse-symbol indented_block_body) [23282 23439])
                    ("from_list" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [23476 23480])
                            ("colors" variable nil (reparse-symbol function_parameters) [23482 23488])
                            ("N" variable nil (reparse-symbol function_parameters) [23490 23491])
                            ("gamma" variable nil (reparse-symbol function_parameters) [23497 23502]))                          
                        :documentation "
        Make a linear segmented colormap with *name* from a sequence
        of *colors* which evenly transitions from colors[0] at val=0
        to colors[-1] at val=1.  *N* is the number of rgb quantization
        levels.
        Alternatively, a list of (value, color) tuples can be given
        to divide the range unevenly.
        ")
                        (reparse-symbol indented_block_body) [23444 24641])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24660 24664])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [24666 24673]))                          
                        :documentation "
        Return a new color map with *lutsize* entries.
        ")
                        (reparse-symbol indented_block_body) [24646 24833]))                  
                :type "class")
                nil [20317 24833])
            ("ListedColormap" type
               (:documentation "Colormap object generated from a list of colors.

    This may be most useful when indexing directly into a colormap,
    but it can also be used to generate special colormaps for ordinary
    mapping.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Make a colormap from a list of colors.

        *colors*
            a list of matplotlib color specifications,
            or an equivalent Nx3 or Nx4 floating point array
            (*N* rgb or rgba values)
        *name*
            a string to identify the colormap
        *N*
            the number of entries in the map.  The default is *None*,
            in which case there is one colormap entry for each
            element in the list of colors.  If::

                N < len(colors)

            the list will be truncated at *N*.  If::

                N > len(colors)

            the list will be extended by repetition.
        \"\"\"" code nil (reparse-symbol indented_block_body) [25150 25812])
                            ("self" variable nil (reparse-symbol indented_block_body) [25821 25841])
                            ("self" variable nil (reparse-symbol indented_block_body) [25850 25873])
                            ("if" code nil (reparse-symbol indented_block_body) [25989 26833])
                            ("Colormap" code nil (reparse-symbol indented_block_body) [26841 26873]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25101 25105])
                            ("colors" variable nil (reparse-symbol function_parameters) [25107 25113])
                            ("name" variable nil (reparse-symbol function_parameters) [25115 25119])
                            ("N" variable nil (reparse-symbol function_parameters) [25133 25134]))                          
                        :documentation "
        Make a colormap from a list of colors.

        *colors*
            a list of matplotlib color specifications,
            or an equivalent Nx3 or Nx4 floating point array
            (*N* rgb or rgba values)
        *name*
            a string to identify the colormap
        *N*
            the number of entries in the map.  The default is *None*,
            in which case there is one colormap entry for each
            element in the list of colors.  If::

                N < len(colors)

            the list will be truncated at *N*.  If::

                N > len(colors)

            the list will be extended by repetition.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25088 26874])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26889 26893]))                          )
                        (reparse-symbol indented_block_body) [26879 27096])
                    ("_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27115 27119])
                            ("lutsize" variable nil (reparse-symbol function_parameters) [27121 27128]))                          
                        :documentation "
        Return a new color map with *lutsize* entries.
        ")
                        (reparse-symbol indented_block_body) [27101 27314]))                  
                :type "class")
                nil [24835 27314])
            ("Normalize" type
               (:documentation "
    A class which, when called, can normalize data into
    the ``[0.0, 1.0]`` interval.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        If *vmin* or *vmax* is not given, they are initialized from the
        minimum and maximum value respectively of the first input
        processed.  That is, *__call__(A)* calls *autoscale_None(A)*.
        If *clip* is *True* and the given value falls outside the range,
        the returned value will be 0 or 1, whichever is closer.
        Returns 0 if::

            vmin==vmax

        Works with scalars or arrays, including masked arrays.  If
        *clip* is *True*, masked values are set to 1; otherwise they
        remain masked.  Clipping silently defeats the purpose of setting
        the over, under, and masked colors in the colormap, so it is
        likely to lead to surprises; therefore the default is
        *clip* = *False*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [27513 28287])
                            ("self" variable nil (reparse-symbol indented_block_body) [28296 28312])
                            ("self" variable nil (reparse-symbol indented_block_body) [28321 28337])
                            ("self" variable nil (reparse-symbol indented_block_body) [28346 28362]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27464 27468])
                            ("vmin" variable nil (reparse-symbol function_parameters) [27470 27474])
                            ("vmax" variable nil (reparse-symbol function_parameters) [27481 27485])
                            ("clip" variable nil (reparse-symbol function_parameters) [27492 27496]))                          
                        :documentation "
        If *vmin* or *vmax* is not given, they are initialized from the
        minimum and maximum value respectively of the first input
        processed.  That is, *__call__(A)* calls *autoscale_None(A)*.
        If *clip* is *True* and the given value falls outside the range,
        the returned value will be 0 or 1, whichever is closer.
        Returns 0 if::

            vmin==vmax

        Works with scalars or arrays, including masked arrays.  If
        *clip* is *True*, masked values are set to 1; otherwise they
        remain masked.  Clipping silently defeats the purpose of setting
        the over, under, and masked colors in the colormap, so it is
        likely to lead to surprises; therefore the default is
        *clip* = *False*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27451 28363])
                    ("process_value" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [28404 28409]))                          
                        :documentation "
        Homogenize the input *value* for easy and efficient normalization.

        *value* can be a scalar or sequence.

        Returns *result*, *is_scalar*, where *result* is a
        masked array matching *value*.  Float dtypes are preserved;
        integer types with two bytes or smaller are converted to
        np.float32, and larger types are converted to np.float.
        Preserving float32 when possible, and using in-place operations,
        can greatly improve speed for large arrays.

        Experimental; we may want to add an option to force the
        use of float32.
        ")
                        (reparse-symbol indented_block_body) [28368 29452])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29470 29474])
                            ("value" variable nil (reparse-symbol function_parameters) [29476 29481])
                            ("clip" variable nil (reparse-symbol function_parameters) [29483 29487]))                          
                        :documentation "
        Normalize *value* data in the ``[vmin, vmax]`` interval into
        the ``[0.0, 1.0]`` interval and return it.  *clip* defaults
        to *self.clip* (which defaults to *False*).  If not already
        initialized, *vmin* and *vmax* are initialized using
        *autoscale_None(value)*.
        ")
                        (reparse-symbol indented_block_body) [29457 30975])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30992 30996])
                            ("value" variable nil (reparse-symbol function_parameters) [30998 31003]))                          )
                        (reparse-symbol indented_block_body) [30980 31377])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31396 31400])
                            ("A" variable nil (reparse-symbol function_parameters) [31402 31403]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [31382 31537])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31561 31565])
                            ("A" variable nil (reparse-symbol function_parameters) [31567 31568]))                          )
                        (reparse-symbol indented_block_body) [31542 31788])
                    ("scaled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31804 31808]))                          )
                        (reparse-symbol indented_block_body) [31793 31919]))                  
                :type "class")
                nil [27316 31919])
            ("LogNorm" type
               (:documentation "
    Normalize a given value to the 0-1 range on a log scale
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32040 32044])
                            ("value" variable nil (reparse-symbol function_parameters) [32046 32051])
                            ("clip" variable nil (reparse-symbol function_parameters) [32053 32057]))                          )
                        (reparse-symbol indented_block_body) [32027 33314])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33331 33335])
                            ("value" variable nil (reparse-symbol function_parameters) [33337 33342]))                          )
                        (reparse-symbol indented_block_body) [33319 33669])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33688 33692])
                            ("A" variable nil (reparse-symbol function_parameters) [33694 33695]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [33674 33880])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33904 33908])
                            ("A" variable nil (reparse-symbol function_parameters) [33910 33911]))                          )
                        (reparse-symbol indented_block_body) [33885 34223]))                  
                :type "class")
                nil [31921 34223])
            ("SymLogNorm" type
               (:documentation "
    The symmetrical logarithmic scale is logarithmic in both the
    positive and negative directions from the origin.

    Since the values close to zero tend toward infinity, there is a
    need to have a range around zero that is linear.  The parameter
    *linthresh* allows the user to specify the size of this range
    (-*linthresh*, *linthresh*).
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *linthresh*:
        The range within which the plot is linear (to
        avoid having the plot go to infinity around zero).

        *linscale*:
        This allows the linear range (-*linthresh* to *linthresh*)
        to be stretched relative to the logarithmic range.  Its
        value is the number of decades to use for each half of the
        linear range.  For example, when *linscale* == 1.0 (the
        default), the space used for the positive and negative
        halves of the linear range will be equal to one decade in
        the logarithmic range. Defaults to 1.
        \"\"\"" code nil (reparse-symbol indented_block_body) [34734 35341])
                            ("Normalize" code nil (reparse-symbol indented_block_body) [35350 35392])
                            ("self" variable nil (reparse-symbol indented_block_body) [35401 35434])
                            ("self" variable nil (reparse-symbol indented_block_body) [35443 35495])
                            ("if" code nil (reparse-symbol indented_block_body) [35504 35586]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34642 34646])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [34649 34658])
                            ("linscale" variable nil (reparse-symbol function_parameters) [34660 34668])
                            ("vmin" variable nil (reparse-symbol function_parameters) [34691 34695])
                            ("vmax" variable nil (reparse-symbol function_parameters) [34702 34706])
                            ("clip" variable nil (reparse-symbol function_parameters) [34713 34717]))                          
                        :documentation "
        *linthresh*:
        The range within which the plot is linear (to
        avoid having the plot go to infinity around zero).

        *linscale*:
        This allows the linear range (-*linthresh* to *linthresh*)
        to be stretched relative to the logarithmic range.  Its
        value is the number of decades to use for each half of the
        linear range.  For example, when *linscale* == 1.0 (the
        default), the space used for the positive and negative
        halves of the linear range will be equal to one decade in
        the logarithmic range. Defaults to 1.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34629 35586])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35604 35608])
                            ("value" variable nil (reparse-symbol function_parameters) [35610 35615])
                            ("clip" variable nil (reparse-symbol function_parameters) [35617 35621]))                          )
                        (reparse-symbol indented_block_body) [35591 36445])
                    ("_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36465 36469])
                            ("a" variable nil (reparse-symbol function_parameters) [36471 36472]))                          
                        :documentation "
        Inplace transformation.
        ")
                        (reparse-symbol indented_block_body) [36450 36808])
                    ("_inv_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36832 36836])
                            ("a" variable nil (reparse-symbol function_parameters) [36838 36839]))                          
                        :documentation "
        Inverse inplace Transformation.
        ")
                        (reparse-symbol indented_block_body) [36813 37203])
                    ("_transform_vmin_vmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37233 37237]))                          
                        :documentation "
        Calculates vmin and vmax in the transformed system.
        ")
                        (reparse-symbol indented_block_body) [37208 37476])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37493 37497])
                            ("value" variable nil (reparse-symbol function_parameters) [37499 37504]))                          )
                        (reparse-symbol indented_block_body) [37481 37731])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37750 37754])
                            ("A" variable nil (reparse-symbol function_parameters) [37756 37757]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [37736 37927])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37951 37955])
                            ("A" variable nil (reparse-symbol function_parameters) [37957 37958]))                          
                        :documentation " autoscale only None-valued vmin or vmax ")
                        (reparse-symbol indented_block_body) [37932 38258]))                  
                :type "class")
                nil [34225 38258])
            ("PowerNorm" type
               (:documentation "
    Normalize a given value to the ``[0, 1]`` interval with a power-law
    scaling. This will clip any negative data points to 0.
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Normalize" code nil (reparse-symbol indented_block_body) [38508 38550])
                            ("self" variable nil (reparse-symbol indented_block_body) [38559 38577]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38452 38456])
                            ("gamma" variable nil (reparse-symbol function_parameters) [38458 38463])
                            ("vmin" variable nil (reparse-symbol function_parameters) [38465 38469])
                            ("vmax" variable nil (reparse-symbol function_parameters) [38476 38480])
                            ("clip" variable nil (reparse-symbol function_parameters) [38487 38491]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38439 38578])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38596 38600])
                            ("value" variable nil (reparse-symbol function_parameters) [38602 38607])
                            ("clip" variable nil (reparse-symbol function_parameters) [38609 38613]))                          )
                        (reparse-symbol indented_block_body) [38583 39560])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39577 39581])
                            ("value" variable nil (reparse-symbol function_parameters) [39583 39588]))                          )
                        (reparse-symbol indented_block_body) [39565 39968])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39987 39991])
                            ("A" variable nil (reparse-symbol function_parameters) [39993 39994]))                          
                        :documentation "
        Set *vmin*, *vmax* to min, max of *A*.
        ")
                        (reparse-symbol indented_block_body) [39973 40307])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40331 40335])
                            ("A" variable nil (reparse-symbol function_parameters) [40337 40338]))                          )
                        (reparse-symbol indented_block_body) [40312 40753]))                  
                :type "class")
                nil [38260 40753])
            ("BoundaryNorm" type
               (:documentation "
    Generate a colormap index based on discrete intervals.

    Unlike :class:`Normalize` or :class:`LogNorm`,
    :class:`BoundaryNorm` maps values to integers instead of to the
    interval 0-1.

    Mapping to the 0-1 interval could have been done via
    piece-wise linear interpolation, but using integers seems
    simpler, and reduces the number of conversions back and forth
    between integer and floating point.
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *boundaries*
            a monotonically increasing sequence
        *ncolors*
            number of colors in the colormap to be used

        If::

            b[i] <= v < b[i+1]

        then v is mapped to color j;
        as i varies from 0 to len(boundaries)-2,
        j goes from 0 to ncolors-1.

        Out-of-range values are mapped
        to -1 if low and ncolors if high; these are converted
        to valid indices by
        :meth:`Colormap.__call__` .
        If clip == True, out-of-range values
        are mapped to 0 if low and ncolors-1 if high.
        \"\"\"" code nil (reparse-symbol indented_block_body) [41290 41882])
                            ("self" variable nil (reparse-symbol indented_block_body) [41891 41907])
                            ("self" variable nil (reparse-symbol indented_block_body) [41916 41941])
                            ("self" variable nil (reparse-symbol indented_block_body) [41950 41976])
                            ("self" variable nil (reparse-symbol indented_block_body) [41985 42025])
                            ("self" variable nil (reparse-symbol indented_block_body) [42034 42063])
                            ("self" variable nil (reparse-symbol indented_block_body) [42072 42092])
                            ("if" code nil (reparse-symbol indented_block_body) [42101 42209]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41242 41246])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [41248 41258])
                            ("ncolors" variable nil (reparse-symbol function_parameters) [41260 41267])
                            ("clip" variable nil (reparse-symbol function_parameters) [41269 41273]))                          
                        :documentation "
        *boundaries*
            a monotonically increasing sequence
        *ncolors*
            number of colors in the colormap to be used

        If::

            b[i] <= v < b[i+1]

        then v is mapped to color j;
        as i varies from 0 to len(boundaries)-2,
        j goes from 0 to ncolors-1.

        Out-of-range values are mapped
        to -1 if low and ncolors if high; these are converted
        to valid indices by
        :meth:`Colormap.__call__` .
        If clip == True, out-of-range values
        are mapped to 0 if low and ncolors-1 if high.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41229 42209])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42227 42231])
                            ("value" variable nil (reparse-symbol function_parameters) [42233 42238])
                            ("clip" variable nil (reparse-symbol function_parameters) [42240 42244]))                          )
                        (reparse-symbol indented_block_body) [42214 43076])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43093 43097])
                            ("value" variable nil (reparse-symbol function_parameters) [43099 43104]))                          )
                        (reparse-symbol indented_block_body) [43081 43167]))                  
                :type "class")
                nil [40755 43167])
            ("NoNorm" type
               (:documentation "
    Dummy replacement for Normalize, for the case where we
    want to use indices directly in a
    :class:`~matplotlib.cm.ScalarMappable` .
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43369 43373])
                            ("value" variable nil (reparse-symbol function_parameters) [43375 43380])
                            ("clip" variable nil (reparse-symbol function_parameters) [43382 43386]))                          )
                        (reparse-symbol indented_block_body) [43356 43415])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43432 43436])
                            ("value" variable nil (reparse-symbol function_parameters) [43438 43443]))                          )
                        (reparse-symbol indented_block_body) [43420 43467]))                  
                :type "class")
                nil [43169 43467])
            ("rgb_to_hsv" function
               (:documentation "
    convert float rgb values (in the range [0, 1]), in a numpy array to hsv
    values.

    Parameters
    ----------
    arr : (..., 3) array-like
       All values must be in the range [0, 1]

    Returns
    -------
    hsv : (..., 3) ndarray
       Colors converted to hsv values in range [0, 1]
    "
                :arguments 
                  ( ("arr" variable nil (reparse-symbol function_parameters) [43484 43487]))                  )
                nil [43469 45020])
            ("hsv_to_rgb" function
               (:documentation "
    convert hsv values in a numpy array to rgb values
    all values assumed to be in range [0, 1]

    Parameters
    ----------
    hsv : (..., 3) array-like
       All values assumed to be in range [0, 1]

    Returns
    -------
    rgb : (..., 3) ndarray
       Colors converted to RGB values in range [0, 1]
    "
                :arguments 
                  ( ("hsv" variable nil (reparse-symbol function_parameters) [45037 45040]))                  )
                nil [45022 46908])
            ("LightSource" type
               (:documentation "
    Create a light source coming from the specified azimuth and elevation.
    Angles are in degrees, with the azimuth measured
    clockwise from north and elevation up from the zero plane of the surface.

    The :meth:`shade` is used to produce \"shaded\" rgb values for a data array.
    :meth:`shade_rgb` can be used to combine an rgb image with
    The :meth:`shade_rgb`
    The :meth:`hillshade` produces an illumination map of a surface.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Specify the azimuth (measured clockwise from south) and altitude
        (measured up from the plane of the surface) of the light source
        in degrees.

        Parameters
        ----------
        azdeg : number, optional
            The azimuth (0-360, degrees clockwise from North) of the light
            source. Defaults to 315 degrees (from the northwest).
        altdeg : number, optional
            The altitude (0-90, degrees up from horizontal) of the light
            source.  Defaults to 45 degrees from horizontal.

        Notes
        -----
        For backwards compatibility, the parameters *hsv_min_val*,
        *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at
        initialization as well.  However, these parameters will only be used if
        \"blend_mode='hsv'\" is passed into :meth:`shade` or :meth:`shade_rgb`.
        See the documentation for :meth:`blend_hsv` for more details.
        \"\"\"" code nil (reparse-symbol indented_block_body) [47528 48488])
                            ("self" variable nil (reparse-symbol indented_block_body) [48497 48515])
                            ("self" variable nil (reparse-symbol indented_block_body) [48524 48544])
                            ("self" variable nil (reparse-symbol indented_block_body) [48553 48583])
                            ("self" variable nil (reparse-symbol indented_block_body) [48592 48622])
                            ("self" variable nil (reparse-symbol indented_block_body) [48631 48661])
                            ("self" variable nil (reparse-symbol indented_block_body) [48670 48700]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47414 47418])
                            ("azdeg" variable nil (reparse-symbol function_parameters) [47420 47425])
                            ("altdeg" variable nil (reparse-symbol function_parameters) [47431 47437])
                            ("hsv_min_val" variable nil (reparse-symbol function_parameters) [47442 47453])
                            ("hsv_max_val" variable nil (reparse-symbol function_parameters) [47457 47468])
                            ("hsv_min_sat" variable nil (reparse-symbol function_parameters) [47489 47500])
                            ("hsv_max_sat" variable nil (reparse-symbol function_parameters) [47504 47515]))                          
                        :documentation "
        Specify the azimuth (measured clockwise from south) and altitude
        (measured up from the plane of the surface) of the light source
        in degrees.

        Parameters
        ----------
        azdeg : number, optional
            The azimuth (0-360, degrees clockwise from North) of the light
            source. Defaults to 315 degrees (from the northwest).
        altdeg : number, optional
            The altitude (0-90, degrees up from horizontal) of the light
            source.  Defaults to 45 degrees from horizontal.

        Notes
        -----
        For backwards compatibility, the parameters *hsv_min_val*,
        *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at
        initialization as well.  However, these parameters will only be used if
        \"blend_mode='hsv'\" is passed into :meth:`shade` or :meth:`shade_rgb`.
        See the documentation for :meth:`blend_hsv` for more details.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47401 48701])
                    ("hillshade" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48720 48724])
                            ("elevation" variable nil (reparse-symbol function_parameters) [48726 48735])
                            ("vert_exag" variable nil (reparse-symbol function_parameters) [48737 48746])
                            ("dx" variable nil (reparse-symbol function_parameters) [48750 48752])
                            ("dy" variable nil (reparse-symbol function_parameters) [48756 48758])
                            ("fraction" variable nil (reparse-symbol function_parameters) [48762 48770]))                          
                        :documentation "
        Calculates the illumination intensity for a surface using the defined
        azimuth and elevation for the light source.

        Imagine an artificial sun placed at infinity in some azimuth and
        elevation position illuminating our surface. The parts of the surface
        that slope toward the sun should brighten while those sides facing away
        should become darker.

        Parameters
        ----------
        elevation : array-like
            A 2d array (or equivalent) of the height values used to generate an
            illumination map
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs meters) or to exaggerate
            or de-emphasize topographic effects.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        fraction : number, optional
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.
        Returns
        -------
        intensity : ndarray
            A 2d array of illumination values between 0-1, where 0 is
            completely in shadow and 1 is completely illuminated.
        ")
                        (reparse-symbol indented_block_body) [48706 52173])
                    ("shade" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52188 52192])
                            ("data" variable nil (reparse-symbol function_parameters) [52194 52198])
                            ("cmap" variable nil (reparse-symbol function_parameters) [52200 52204])
                            ("norm" variable nil (reparse-symbol function_parameters) [52206 52210])
                            ("blend_mode" variable nil (reparse-symbol function_parameters) [52217 52227])
                            ("vmin" variable nil (reparse-symbol function_parameters) [52239 52243])
                            ("vmax" variable nil (reparse-symbol function_parameters) [52264 52268])
                            ("vert_exag" variable nil (reparse-symbol function_parameters) [52275 52284])
                            ("dx" variable nil (reparse-symbol function_parameters) [52288 52290])
                            ("dy" variable nil (reparse-symbol function_parameters) [52294 52296])
                            ("fraction" variable nil (reparse-symbol function_parameters) [52300 52308])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52312 52320]))                          
                        :documentation "
        Combine colormapped data values with an illumination intensity map
        (a.k.a.  \"hillshade\") of the values.

        Parameters
        ----------
        data : array-like
            A 2d array (or equivalent) of the height values used to generate a
            shaded map.
        cmap : `~matplotlib.colors.Colormap` instance
            The colormap used to color the *data* array. Note that this must be
            a `~matplotlib.colors.Colormap` instance.  For example, rather than
            passing in `cmap='gist_earth'`, use
            `cmap=plt.get_cmap('gist_earth')` instead.
        norm : `~matplotlib.colors.Normalize` instance, optional
            The normalization used to scale values before colormapping. If
            None, the input will be linearly scaled between its min and max.
        blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional
            The type of blending used to combine the colormapped data
            values with the illumination intensity.  Default is
            \"overlay\".  Note that for most topographic surfaces,
            \"overlay\" or \"soft\" appear more visually realistic. If a
            user-defined function is supplied, it is expected to
            combine an MxNx3 RGB array of floats (ranging 0 to 1) with
            an MxNx1 hillshade array (also 0 to 1).  (Call signature
            `func(rgb, illum, **kwargs)`) Additional kwargs supplied
            to this function will be passed on to the *blend_mode*
            function.
        vmin : scalar or None, optional
            The minimum value used in colormapping *data*. If *None* the
            minimum value in *data* is used. If *norm* is specified, then this
            argument will be ignored.
        vmax : scalar or None, optional
            The maximum value used in colormapping *data*. If *None* the
            maximum value in *data* is used. If *norm* is specified, then this
            argument will be ignored.
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs meters) or to exaggerate
            or de-emphasize topography.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        fraction : number, optional
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.
        Additional kwargs are passed on to the *blend_mode* function.

        Returns
        -------
        rgba : ndarray
            An MxNx4 array of floats ranging between 0-1.
        ")
                        (reparse-symbol indented_block_body) [52178 56010])
                    ("shade_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56029 56033])
                            ("rgb" variable nil (reparse-symbol function_parameters) [56035 56038])
                            ("elevation" variable nil (reparse-symbol function_parameters) [56040 56049])
                            ("fraction" variable nil (reparse-symbol function_parameters) [56051 56059])
                            ("blend_mode" variable nil (reparse-symbol function_parameters) [56064 56074])
                            ("vert_exag" variable nil (reparse-symbol function_parameters) [56100 56109])
                            ("dx" variable nil (reparse-symbol function_parameters) [56113 56115])
                            ("dy" variable nil (reparse-symbol function_parameters) [56119 56121])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56125 56133]))                          
                        :documentation "
        Take the input RGB array (ny*nx*3) adjust their color values
        to given the impression of a shaded relief map with a
        specified light source using the elevation (ny*nx).
        A new RGB array ((ny*nx*3)) is returned.

        Parameters
        ----------
        rgb : array-like
            An MxNx3 RGB array, assumed to be in the range of 0 to 1.
        elevation : array-like
            A 2d array (or equivalent) of the height values used to generate a
            shaded map.
        fraction : number
            Increases or decreases the contrast of the hillshade.  Values
            greater than one will cause intermediate values to move closer to
            full illumination or shadow (and clipping any values that move
            beyond 0 or 1). Note that this is not visually or mathematically
            the same as vertical exaggeration.
        blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional
            The type of blending used to combine the colormapped data values
            with the illumination intensity.  For backwards compatibility, this
            defaults to \"hsv\". Note that for most topographic surfaces,
            \"overlay\" or \"soft\" appear more visually realistic. If a
            user-defined function is supplied, it is expected to combine an
            MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade
            array (also 0 to 1).  (Call signature `func(rgb, illum, **kwargs)`)
            Additional kwargs supplied to this function will be passed on to
            the *blend_mode* function.
        vert_exag : number, optional
            The amount to exaggerate the elevation values by when calculating
            illumination. This can be used either to correct for differences in
            units between the x-y coordinate system and the elevation
            coordinate system (e.g. decimal degrees vs meters) or to exaggerate
            or de-emphasize topography.
        dx : number, optional
            The x-spacing (columns) of the input *elevation* grid.
        dy : number, optional
            The y-spacing (rows) of the input *elevation* grid.
        Additional kwargs are passed on to the *blend_mode* function.

        Returns
        -------
        shaded_rgb : ndarray
            An MxNx3 array of floats ranging between 0-1.
        ")
                        (reparse-symbol indented_block_body) [56015 59542])
                    ("blend_hsv" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59561 59565])
                            ("rgb" variable nil (reparse-symbol function_parameters) [59567 59570])
                            ("intensity" variable nil (reparse-symbol function_parameters) [59572 59581])
                            ("hsv_max_sat" variable nil (reparse-symbol function_parameters) [59583 59594])
                            ("hsv_max_val" variable nil (reparse-symbol function_parameters) [59601 59612])
                            ("hsv_min_val" variable nil (reparse-symbol function_parameters) [59637 59648])
                            ("hsv_min_sat" variable nil (reparse-symbol function_parameters) [59655 59666]))                          
                        :documentation "
        Take the input data array, convert to HSV values in the given colormap,
        then adjust those color values to give the impression of a shaded
        relief map with a specified light source.  RGBA values are returned,
        which can then be used to plot the shaded image with imshow.

        The color of the resulting image will be darkened by moving the (s,v)
        values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the
        shaded regions, or lightened by sliding (s,v) toward (hsv_max_sat
        hsv_max_val) in regions that are illuminated.  The default extremes are
        chose so that completely shaded points are nearly black (s = 1, v = 0)
        and completely illuminated points are nearly white (s = 0, v = 1).

        Parameters
        ----------
        rgb : ndarray
            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
        intensity : ndarray
            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).
        hsv_max_sat : number, optional
            The maximum saturation value that the *intensity* map can shift the
            output image to. Defaults to 1.
        hsv_min_sat : number, optional
            The minimum saturation value that the *intensity* map can shift the
            output image to. Defaults to 0.
        hsv_max_val : number, optional
            The maximum value (\"v\" in \"hsv\") that the *intensity* map can shift
            the output image to. Defaults to 1.
        hsv_min_val: number, optional
            The minimum value (\"v\" in \"hsv\") that the *intensity* map can shift
            the output image to. Defaults to 0.

        Returns
        -------
        rgb : ndarray
            An MxNx3 RGB array representing the combined images.
        ")
                        (reparse-symbol indented_block_body) [59547 63381])
                    ("blend_soft_light" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63407 63411])
                            ("rgb" variable nil (reparse-symbol function_parameters) [63413 63416])
                            ("intensity" variable nil (reparse-symbol function_parameters) [63418 63427]))                          
                        :documentation "
        Combines an rgb image with an intensity map using \"soft light\"
        blending.  Uses the \"pegtop\" formula.

        Parameters
        ----------
        rgb : ndarray
            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
        intensity : ndarray
            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).

        Returns
        -------
        rgb : ndarray
            An MxNx3 RGB array representing the combined images.
        ")
                        (reparse-symbol indented_block_body) [63386 63998])
                    ("blend_overlay" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64021 64025])
                            ("rgb" variable nil (reparse-symbol function_parameters) [64027 64030])
                            ("intensity" variable nil (reparse-symbol function_parameters) [64032 64041]))                          
                        :documentation "
        Combines an rgb image with an intensity map using \"overlay\" blending.

        Parameters
        ----------
        rgb : ndarray
            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
        intensity : ndarray
            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).

        Returns
        -------
        rgb : ndarray
            An MxNx3 RGB array representing the combined images.
        ")
                        (reparse-symbol indented_block_body) [64003 64639]))                  
                :type "class")
                nil [46910 64639])
            ("from_levels_and_colors" function
               (:documentation "
    A helper routine to generate a cmap and a norm instance which
    behave similar to contourf's levels and colors arguments.

    Parameters
    ----------
    levels : sequence of numbers
        The quantization levels used to construct the :class:`BoundaryNorm`.
        Values ``v`` are quantizized to level ``i`` if
        ``lev[i] <= v < lev[i+1]``.
    colors : sequence of colors
        The fill color to use for each level. If `extend` is \"neither\" there
        must be ``n_level - 1`` colors. For an `extend` of \"min\" or \"max\" add
        one extra color, and for an `extend` of \"both\" add two colors.
    extend : {'neither', 'min', 'max', 'both'}, optional
        The behaviour when a value falls out of range of the given levels.
        See :func:`~matplotlib.pyplot.contourf` for details.

    Returns
    -------
    (cmap, norm) : tuple containing a :class:`Colormap` and a \\
                   :class:`Normalize` instance
    "
                :arguments 
                  ( ("levels" variable nil (reparse-symbol function_parameters) [64668 64674])
                    ("colors" variable nil (reparse-symbol function_parameters) [64676 64682])
                    ("extend" variable nil (reparse-symbol function_parameters) [64684 64690]))                  )
                nil [64641 66888]))          
      :file "colors.py"
      :pointmax 66888
      :fsize 66887
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((NAME 8038 . 8044) (IF 8060 . 8062) (ELSE 8081 . 8085) (FROM 2459 . 2463) (PERIOD 2464 . 2465)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module contains all the 2D line class which can draw with a
variety of line styles, markers and colors.
\"\"\"" code nil nil [1 117])
            ("" code nil nil [182 267])
            ("six" include nil nil [269 279])
            ("warnings" include nil nil [281 296])
            ("numpy" include nil nil [298 316])
            ("numpy" include nil nil [317 337])
            ("colors" include nil nil [345 377])
            ("artist" include nil nil [345 377])
            ("Artist" include nil nil [391 404])
            ("" code nil nil [424 588])
            ("Path" include nil nil [601 612])
            ("IdentityTransform" include nil nil [630 677])
            ("TransformedPath" include nil nil [630 677])
            ("Bbox" include nil nil [630 677])
            ("matplotlib" include nil nil [679 710])
            ("allow_rasterization" include nil nil [724 750])
            ("matplotlib" include nil nil [751 783])
            ("matplotlib.markers" include nil nil [784 826])
            ("matplotlib.markers" include nil nil [911 979])
            ("" code nil nil [1011 1122])
            ("matplotlib" include nil nil [1124 1152])
            ("_get_dash_pattern" function
               (:documentation "Convert linestyle -> dash pattern

    "
                :arguments 
                  ( ("style" variable nil (reparse-symbol function_parameters) [1177 1182]))                  )
                nil [1155 1993])
            ("_scale_dashes" function (:arguments 
              ( ("offset" variable nil (reparse-symbol function_parameters) [2013 2019])
                ("dashes" variable nil (reparse-symbol function_parameters) [2021 2027])
                ("lw" variable nil (reparse-symbol function_parameters) [2029 2031]))              ) nil [1995 2381])
            ("segment_hits" function
               (:documentation "
    Determine if any line segments are within radius of a
    point. Returns the list of line segments that are within that
    radius.
    "
                :arguments 
                  ( ("cx" variable nil (reparse-symbol function_parameters) [2400 2402])
                    ("cy" variable nil (reparse-symbol function_parameters) [2404 2406])
                    ("x" variable nil (reparse-symbol function_parameters) [2408 2409])
                    ("y" variable nil (reparse-symbol function_parameters) [2411 2412])
                    ("radius" variable nil (reparse-symbol function_parameters) [2414 2420]))                  )
                nil [2383 4035])
            ("_mark_every_path" function
               (:documentation "
    Helper function that sorts out how to deal the input
    `markevery` and returns the points where markers should be drawn.

    Takes in the `markevery` value and the line path and returns the
    sub-sampled path.
    "
                :arguments 
                  ( ("markevery" variable nil (reparse-symbol function_parameters) [4058 4067])
                    ("tpath" variable nil (reparse-symbol function_parameters) [4069 4074])
                    ("affine" variable nil (reparse-symbol function_parameters) [4076 4082])
                    ("ax_transform" variable nil (reparse-symbol function_parameters) [4084 4096]))                  )
                nil [4037 8486])
            ("Line2D" type
               (:documentation "
    A line - the line can have both a solid linestyle connecting all
    the vertices, and a marker at each vertex.  Additionally, the
    drawing of the solid line is influenced by the drawstyle, e.g., one
    can create \"stepped\" lines in various styles.


    "
                :superclasses ("Artist")
                :members 
                  ( ("lineStyles" variable nil (reparse-symbol indented_block_body) [8789 9078])
                    ("_drawStyles_l" variable nil (reparse-symbol indented_block_body) [9084 9268])
                    ("_drawStyles_s" variable nil (reparse-symbol indented_block_body) [9274 9333])
                    ("drawStyles" variable nil (reparse-symbol indented_block_body) [9339 9354])
                    ("drawStyles" code nil (reparse-symbol indented_block_body) [9359 9391])
                    ("drawStyles" code nil (reparse-symbol indented_block_body) [9396 9428])
                    ("drawStyleKeys" variable nil (reparse-symbol indented_block_body) [9482 9590])
                    ("markers" variable nil (reparse-symbol indented_block_body) [9675 9704])
                    ("filled_markers" variable nil (reparse-symbol indented_block_body) [9709 9752])
                    ("fillStyles" variable nil (reparse-symbol indented_block_body) [9757 9792])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [9798 9808])
                    ("validCap" variable nil (reparse-symbol indented_block_body) [9813 9855])
                    ("validJoin" variable nil (reparse-symbol indented_block_body) [9860 9899])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9917 9921]))                          )
                        (reparse-symbol indented_block_body) [9905 10424])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a :class:`~matplotlib.lines.Line2D` instance with *x*
        and *y* data in sequences *xdata*, *ydata*.

        The kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        See :meth:`set_linestyle` for a decription of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11180 11612])
                            ("Artist" code nil (reparse-symbol indented_block_body) [11621 11642])
                            ("if" code nil (reparse-symbol indented_block_body) [11695 11778])
                            ("if" code nil (reparse-symbol indented_block_body) [11786 11869])
                            ("if" code nil (reparse-symbol indented_block_body) [11878 11952])
                            ("if" code nil (reparse-symbol indented_block_body) [11961 12035])
                            ("if" code nil (reparse-symbol indented_block_body) [12043 12108])
                            ("if" code nil (reparse-symbol indented_block_body) [12116 12178])
                            ("if" code nil (reparse-symbol indented_block_body) [12187 12264])
                            ("if" code nil (reparse-symbol indented_block_body) [12272 12352])
                            ("if" code nil (reparse-symbol indented_block_body) [12360 12446])
                            ("if" code nil (reparse-symbol indented_block_body) [12454 12543])
                            ("if" code nil (reparse-symbol indented_block_body) [12551 12640])
                            ("if" code nil (reparse-symbol indented_block_body) [12648 12740])
                            ("if" code nil (reparse-symbol indented_block_body) [12749 13258])
                            ("if" code nil (reparse-symbol indented_block_body) [13267 13323])
                            ("self" variable nil (reparse-symbol indented_block_body) [13332 13357])
                            ("self" variable nil (reparse-symbol indented_block_body) [13366 13392])
                            ("self" variable nil (reparse-symbol indented_block_body) [13401 13428])
                            ("self" variable nil (reparse-symbol indented_block_body) [13437 13463])
                            ("self" code nil (reparse-symbol indented_block_body) [13472 13509])
                            ("self" code nil (reparse-symbol indented_block_body) [13518 13557])
                            ("self" code nil (reparse-symbol indented_block_body) [13566 13605])
                            ("self" code nil (reparse-symbol indented_block_body) [13614 13655])
                            ("self" variable nil (reparse-symbol indented_block_body) [13665 13688])
                            ("self" variable nil (reparse-symbol indented_block_body) [13697 13719])
                            ("self" variable nil (reparse-symbol indented_block_body) [13728 13755])
                            ("self" variable nil (reparse-symbol indented_block_body) [13796 13816])
                            ("self" variable nil (reparse-symbol indented_block_body) [13825 13845])
                            ("self" variable nil (reparse-symbol indented_block_body) [13950 13973])
                            ("self" variable nil (reparse-symbol indented_block_body) [13982 14005])
                            ("self" code nil (reparse-symbol indented_block_body) [14015 14044])
                            ("self" code nil (reparse-symbol indented_block_body) [14053 14082])
                            ("self" code nil (reparse-symbol indented_block_body) [14091 14120])
                            ("self" variable nil (reparse-symbol indented_block_body) [14130 14148])
                            ("self" code nil (reparse-symbol indented_block_body) [14157 14178])
                            ("self" variable nil (reparse-symbol indented_block_body) [14187 14215])
                            ("self" code nil (reparse-symbol indented_block_body) [14224 14247])
                            ("self" variable nil (reparse-symbol indented_block_body) [14257 14279])
                            ("self" variable nil (reparse-symbol indented_block_body) [14288 14311])
                            ("self" variable nil (reparse-symbol indented_block_body) [14320 14344])
                            ("self" code nil (reparse-symbol indented_block_body) [14354 14383])
                            ("self" code nil (reparse-symbol indented_block_body) [14392 14425])
                            ("self" code nil (reparse-symbol indented_block_body) [14434 14465])
                            ("self" variable nil (reparse-symbol indented_block_body) [14475 14503])
                            ("self" variable nil (reparse-symbol indented_block_body) [14512 14540])
                            ("self" variable nil (reparse-symbol indented_block_body) [14549 14577])
                            ("self" variable nil (reparse-symbol indented_block_body) [14586 14617])
                            ("self" code nil (reparse-symbol indented_block_body) [14627 14668])
                            ("self" code nil (reparse-symbol indented_block_body) [14677 14724])
                            ("self" code nil (reparse-symbol indented_block_body) [14733 14774])
                            ("self" code nil (reparse-symbol indented_block_body) [14783 14824])
                            ("self" code nil (reparse-symbol indented_block_body) [14834 14863])
                            ("self" variable nil (reparse-symbol indented_block_body) [14873 14899])
                            ("self" code nil (reparse-symbol indented_block_body) [15030 15049])
                            ("self" variable nil (reparse-symbol indented_block_body) [15058 15086])
                            ("self" variable nil (reparse-symbol indented_block_body) [15095 15114])
                            ("if" code nil (reparse-symbol indented_block_body) [15123 15195])
                            ("self" variable nil (reparse-symbol indented_block_body) [15204 15232])
                            ("self" variable nil (reparse-symbol indented_block_body) [15241 15269])
                            ("self" variable nil (reparse-symbol indented_block_body) [15278 15299])
                            ("self" variable nil (reparse-symbol indented_block_body) [15308 15329])
                            ("self" variable nil (reparse-symbol indented_block_body) [15338 15352])
                            ("self" variable nil (reparse-symbol indented_block_body) [15361 15375])
                            ("self" variable nil (reparse-symbol indented_block_body) [15384 15399])
                            ("self" variable nil (reparse-symbol indented_block_body) [15408 15425])
                            ("self" variable nil (reparse-symbol indented_block_body) [15434 15463])
                            ("self" variable nil (reparse-symbol indented_block_body) [15472 15494])
                            ("self" variable nil (reparse-symbol indented_block_body) [15503 15524])
                            ("self" code nil (reparse-symbol indented_block_body) [15574 15601]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10442 10446])
                            ("xdata" variable nil (reparse-symbol function_parameters) [10448 10453])
                            ("ydata" variable nil (reparse-symbol function_parameters) [10455 10460])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [10479 10488])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [10539 10548])
                            ("color" variable nil (reparse-symbol function_parameters) [10572 10577])
                            ("marker" variable nil (reparse-symbol function_parameters) [10601 10607])
                            ("markersize" variable nil (reparse-symbol function_parameters) [10631 10641])
                            ("markeredgewidth" variable nil (reparse-symbol function_parameters) [10665 10680])
                            ("markeredgecolor" variable nil (reparse-symbol function_parameters) [10704 10719])
                            ("markerfacecolor" variable nil (reparse-symbol function_parameters) [10743 10758])
                            ("markerfacecoloralt" variable nil (reparse-symbol function_parameters) [10782 10800])
                            ("fillstyle" variable nil (reparse-symbol function_parameters) [10826 10835])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [10859 10870])
                            ("dash_capstyle" variable nil (reparse-symbol function_parameters) [10894 10907])
                            ("solid_capstyle" variable nil (reparse-symbol function_parameters) [10931 10945])
                            ("dash_joinstyle" variable nil (reparse-symbol function_parameters) [10969 10983])
                            ("solid_joinstyle" variable nil (reparse-symbol function_parameters) [11007 11022])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [11046 11056])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [11077 11086])
                            ("markevery" variable nil (reparse-symbol function_parameters) [11110 11119])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11143 11151]))                          
                        :documentation "
        Create a :class:`~matplotlib.lines.Line2D` instance with *x*
        and *y* data in sequences *xdata*, *ydata*.

        The kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        See :meth:`set_linestyle` for a decription of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10429 15602])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15624 15628]))                          )
                        (reparse-symbol indented_block_body) [15607 15791])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15809 15813])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [15815 15825]))                          
                        :documentation "
        Test whether the mouse event occurred on the line.  The pick
        radius determines the precision of the location test (usually
        within five points of the value).  Use
        :meth:`~matplotlib.lines.Line2D.get_pickradius` or
        :meth:`~matplotlib.lines.Line2D.set_pickradius` to view or
        modify it.

        Returns *True* if any values are within the radius along with
        ``{'ind': pointlist}``, where *pointlist* is the set of points
        within the radius.

        TODO: sort returned indices by distance
        ")
                        (reparse-symbol indented_block_body) [15796 18674])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18698 18702]))                          
                        :documentation "return the pick radius used for containment tests")
                        (reparse-symbol indented_block_body) [18679 18800])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18824 18828])
                            ("d" variable nil (reparse-symbol function_parameters) [18830 18831]))                          
                        :documentation "Sets the pick radius used for containment tests

        ACCEPTS: float distance in points
        ")
                        (reparse-symbol indented_block_body) [18805 18976])
                    ("get_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18999 19003]))                          
                        :documentation "
        return the marker fillstyle
        ")
                        (reparse-symbol indented_block_body) [18981 19110])
                    ("set_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19133 19137])
                            ("fs" variable nil (reparse-symbol function_parameters) [19139 19141]))                          
                        :documentation "
        Set the marker fill style; 'full' means fill the whole marker.
        'none' means no filling; other options are for half-filled markers.

        ACCEPTS: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']
        ")
                        (reparse-symbol indented_block_body) [19115 19454])
                    ("set_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19477 19481])
                            ("every" variable nil (reparse-symbol function_parameters) [19483 19488]))                          
                        :documentation "Set the markevery property to subsample the plot when using markers.

        e.g., if `every=5`, every 5-th marker will be plotted.

        ACCEPTS: [None | int | length-2 tuple of int | slice |
        list/array of int | float | length-2 tuple of float]

        Parameters
        ----------
        every: None | int | length-2 tuple of int | slice | list/array of int |
        float | length-2 tuple of float
            Which markers to plot.

            - every=None, every point will be plotted.
            - every=N, every N-th marker will be plotted starting with
              marker 0.
            - every=(start, N), every N-th marker, starting at point
              start, will be plotted.
            - every=slice(start, end, N), every N-th marker, starting at
              point start, upto but not including point end, will be plotted.
            - every=[i, j, m, n], only markers at points i, j, m, and n
              will be plotted.
            - every=0.1, (i.e. a float) then markers will be spaced at
              approximately equal distances along the line; the distance
              along the line between markers is determined by multiplying the
              display-coordinate distance of the axes bounding-box diagonal
              by the value of every.
            - every=(0.5, 0.1) (i.e. a length-2 tuple of float), the
              same functionality as every=0.1 is exhibited but the first
              marker will be 0.5 multiplied by the
              display-cordinate-diagonal-distance along the line.

        Notes
        -----
        Setting the markevery property will only show markers at actual data
        points.  When using float arguments to set the markevery property
        on irregularly spaced data, the markers will likely not appear evenly
        spaced because the actual data points do not coincide with the
        theoretical spacing between markers.

        When using a start offset to specify the first marker, the offset will
        be from the first data point which may be different from the first
        the visible data point if the plot is zoomed in.

        If zooming in on a plot when using float arguments then the actual
        data points that have markers will change because the distance between
        markers is always determined from the display-coordinates
        axes-bounding-box-diagonal regardless of the actual axes data limits.

        ")
                        (reparse-symbol indented_block_body) [19459 22057])
                    ("get_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22080 22084]))                          
                        :documentation "return the markevery setting")
                        (reparse-symbol indented_block_body) [22062 22161])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22181 22185])
                            ("p" variable nil (reparse-symbol function_parameters) [22187 22188]))                          
                        :documentation "Sets the event picker details for the line.

        ACCEPTS: float distance in points or callable pick function
        ``fn(artist, event)``
        ")
                        (reparse-symbol indented_block_body) [22166 22487])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22514 22518])
                            ("renderer" variable nil (reparse-symbol function_parameters) [22520 22528]))                          )
                        (reparse-symbol indented_block_body) [22492 22932])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22970 22974])
                            ("ax" variable nil (reparse-symbol function_parameters) [22976 22978]))                          
                        :decorators 
                          ( ("Artist.axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22937 23505])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23523 23527])
                            ("args" variable nil (reparse-symbol function_parameters) [23529 23534]))                          
                        :documentation "
        Set the x and y data

        ACCEPTS: 2D array (rows are x, y) or two 1D arrays
        ")
                        (reparse-symbol indented_block_body) [23510 23795])
                    ("recache_always" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23819 23823]))                          )
                        (reparse-symbol indented_block_body) [23800 23860])
                    ("recache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23877 23881])
                            ("always" variable nil (reparse-symbol function_parameters) [23883 23889]))                          )
                        (reparse-symbol indented_block_body) [23865 26040])
                    ("_transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26065 26069])
                            ("subslice" variable nil (reparse-symbol function_parameters) [26071 26079]))                          
                        :documentation "
        Puts a TransformedPath instance at self._transformed_path;
        all invalidation of the transform is then handled by the
        TransformedPath instance.
        ")
                        (reparse-symbol indented_block_body) [26045 26628])
                    ("_get_transformed_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26659 26663]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.TransformedPath` instance
        of this line.
        ")
                        (reparse-symbol indented_block_body) [26633 26904])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26927 26931])
                            ("t" variable nil (reparse-symbol function_parameters) [26933 26934]))                          
                        :documentation "
        set the Transformation instance used by this artist

        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [26909 27215])
                    ("_is_sorted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27235 27239])
                            ("x" variable nil (reparse-symbol function_parameters) [27241 27242]))                          
                        :documentation "return True if x is sorted in ascending order")
                        (reparse-symbol indented_block_body) [27220 27400])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27439 27443])
                            ("renderer" variable nil (reparse-symbol function_parameters) [27445 27453]))                          
                        :documentation "draw the Line with `renderer` unless visibility is False")
                        (reparse-symbol indented_block_body) [27405 32690])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32715 32719]))                          )
                        (reparse-symbol indented_block_body) [32695 32755])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32774 32778]))                          )
                        (reparse-symbol indented_block_body) [32760 32808])
                    ("get_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32831 32835]))                          )
                        (reparse-symbol indented_block_body) [32813 32869])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32892 32896]))                          )
                        (reparse-symbol indented_block_body) [32874 32930])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32953 32957]))                          )
                        (reparse-symbol indented_block_body) [32935 32991])
                    ("get_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33011 33015]))                          )
                        (reparse-symbol indented_block_body) [32996 33059])
                    ("get_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33088 33092]))                          )
                        (reparse-symbol indented_block_body) [33064 33542])
                    ("get_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33571 33575]))                          )
                        (reparse-symbol indented_block_body) [33547 33615])
                    ("_get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33645 33649])
                            ("alt" variable nil (reparse-symbol function_parameters) [33651 33654]))                          )
                        (reparse-symbol indented_block_body) [33620 33999])
                    ("get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34028 34032]))                          )
                        (reparse-symbol indented_block_body) [34004 34087])
                    ("get_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34119 34123]))                          )
                        (reparse-symbol indented_block_body) [34092 34177])
                    ("get_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34201 34205]))                          )
                        (reparse-symbol indented_block_body) [34182 34240])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34258 34262])
                            ("orig" variable nil (reparse-symbol function_parameters) [34264 34268]))                          
                        :documentation "
        Return the xdata, ydata.

        If *orig* is *True*, return the original data.
        ")
                        (reparse-symbol indented_block_body) [34245 34457])
                    ("get_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34476 34480])
                            ("orig" variable nil (reparse-symbol function_parameters) [34482 34486]))                          
                        :documentation "
        Return the xdata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [34462 34758])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34777 34781])
                            ("orig" variable nil (reparse-symbol function_parameters) [34783 34787]))                          
                        :documentation "
        Return the ydata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [34763 35059])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35077 35081]))                          
                        :documentation "
        Return the :class:`~matplotlib.path.Path` object associated
        with this line.
        ")
                        (reparse-symbol indented_block_body) [35064 35298])
                    ("get_xydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35318 35322]))                          
                        :documentation "
        Return the *xy* data as a Nx2 numpy array.
        ")
                        (reparse-symbol indented_block_body) [35303 35496])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35521 35525])
                            ("b" variable nil (reparse-symbol function_parameters) [35527 35528]))                          
                        :documentation "
        True if line should be drawin with antialiased rendering

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [35501 35748])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35767 35771])
                            ("color" variable nil (reparse-symbol function_parameters) [35773 35778]))                          
                        :documentation "
        Set the color of the line

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [35753 35932])
                    ("set_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35955 35959])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [35961 35970]))                          
                        :documentation "
        Set the drawstyle of the plot

        'default' connects the points with lines. The steps variants
        produce step-plots. 'steps' is equivalent to 'steps-pre' and
        is maintained for backward-compatibility.

        ACCEPTS: ['default' | 'steps' | 'steps-pre' | 'steps-mid' |
                  'steps-post']
        ")
                        (reparse-symbol indented_block_body) [35937 36657])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36680 36684])
                            ("w" variable nil (reparse-symbol function_parameters) [36686 36687]))                          
                        :documentation "
        Set the line width in points

        ACCEPTS: float value in points
        ")
                        (reparse-symbol indented_block_body) [36662 37067])
                    ("_split_drawstyle_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37103 37107])
                            ("ls" variable nil (reparse-symbol function_parameters) [37109 37111]))                          )
                        (reparse-symbol indented_block_body) [37072 37955])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37978 37982])
                            ("ls" variable nil (reparse-symbol function_parameters) [37984 37986]))                          
                        :documentation "
        Set the linestyle of the line (also accepts drawstyles,
        e.g., ``'steps--'``)


        ===========================   =================
        linestyle                     description
        ===========================   =================
        ``'-'`` or ``'solid'``        solid line
        ``'--'`` or  ``'dashed'``     dashed line
        ``'-.'`` or  ``'dashdot'``    dash-dotted line
        ``':'`` or ``'dotted'``       dotted line
        ``'None'``                    draw nothing
        ``' '``                       draw nothing
        ``''``                        draw nothing
        ===========================   =================

        'steps' is equivalent to 'steps-pre' and is maintained for
        backward-compatibility.

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq),

        where ``onoffseq`` is an even length tuple of on and off ink
        in points.


        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
                   (offset, on-off-dash-seq) |
                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
                   ``' '`` | ``''``]

        .. seealso::

            :meth:`set_drawstyle`
               To set the drawing style (stepping) of the plot.

        Parameters
        ----------
        ls : { ``'-'``,  ``'--'``, ``'-.'``, ``':'``} and more see description
            The line style.
        ")
                        (reparse-symbol indented_block_body) [37960 40463])
                    ("set_marker" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40513 40517])
                            ("marker" variable nil (reparse-symbol function_parameters) [40519 40525]))                          
                        :documentation "
        Set the line marker

        ACCEPTS: :mod:`A valid marker style <matplotlib.markers>`

        Parameters
        ----------

        marker: marker style
            See `~matplotlib.markers` for full description of possible
            argument

        ")
                        (reparse-symbol indented_block_body) [40468 40875])
                    ("set_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40904 40908])
                            ("ec" variable nil (reparse-symbol function_parameters) [40910 40912]))                          
                        :documentation "
        Set the marker edge color

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [40880 41164])
                    ("set_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41193 41197])
                            ("ew" variable nil (reparse-symbol function_parameters) [41199 41201]))                          
                        :documentation "
        Set the marker edge width in points

        ACCEPTS: float value in points
        ")
                        (reparse-symbol indented_block_body) [41169 41491])
                    ("set_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41520 41524])
                            ("fc" variable nil (reparse-symbol function_parameters) [41526 41528]))                          
                        :documentation "
        Set the marker face color.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [41496 41781])
                    ("set_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41813 41817])
                            ("fc" variable nil (reparse-symbol function_parameters) [41819 41821]))                          
                        :documentation "
        Set the alternate marker face color.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [41786 42090])
                    ("set_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42114 42118])
                            ("sz" variable nil (reparse-symbol function_parameters) [42120 42122]))                          
                        :documentation "
        Set the marker size in points

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [42095 42329])
                    ("set_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42348 42352])
                            ("x" variable nil (reparse-symbol function_parameters) [42354 42355]))                          
                        :documentation "
        Set the data np.array for x

        ACCEPTS: 1D array
        ")
                        (reparse-symbol indented_block_body) [42334 42525])
                    ("set_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42544 42548])
                            ("y" variable nil (reparse-symbol function_parameters) [42550 42551]))                          
                        :documentation "
        Set the data np.array for y

        ACCEPTS: 1D array
        ")
                        (reparse-symbol indented_block_body) [42530 42721])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42741 42745])
                            ("seq" variable nil (reparse-symbol function_parameters) [42747 42750]))                          
                        :documentation "
        Set the dash sequence, sequence of dashes with on off ink in
        points.  If seq is empty or if seq = (None, None), the
        linestyle will be set to solid.

        ACCEPTS: sequence of on/off ink in points
        ")
                        (reparse-symbol indented_block_body) [42726 43140])
                    ("_draw_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43161 43165])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43167 43175])
                            ("gc" variable nil (reparse-symbol function_parameters) [43177 43179])
                            ("path" variable nil (reparse-symbol function_parameters) [43181 43185])
                            ("trans" variable nil (reparse-symbol function_parameters) [43187 43192]))                          )
                        (reparse-symbol indented_block_body) [43145 43245])
                    ("_draw_steps_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43270 43274])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43276 43284])
                            ("gc" variable nil (reparse-symbol function_parameters) [43286 43288])
                            ("path" variable nil (reparse-symbol function_parameters) [43290 43294])
                            ("trans" variable nil (reparse-symbol function_parameters) [43296 43301]))                          )
                        (reparse-symbol indented_block_body) [43250 43507])
                    ("_draw_steps_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43533 43537])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43539 43547])
                            ("gc" variable nil (reparse-symbol function_parameters) [43549 43551])
                            ("path" variable nil (reparse-symbol function_parameters) [43553 43557])
                            ("trans" variable nil (reparse-symbol function_parameters) [43559 43564]))                          )
                        (reparse-symbol indented_block_body) [43512 43771])
                    ("_draw_steps_mid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43796 43800])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43802 43810])
                            ("gc" variable nil (reparse-symbol function_parameters) [43812 43814])
                            ("path" variable nil (reparse-symbol function_parameters) [43816 43820])
                            ("trans" variable nil (reparse-symbol function_parameters) [43822 43827]))                          )
                        (reparse-symbol indented_block_body) [43776 44033])
                    ("_draw_solid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44054 44058])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44060 44068])
                            ("gc" variable nil (reparse-symbol function_parameters) [44070 44072])
                            ("path" variable nil (reparse-symbol function_parameters) [44074 44078])
                            ("trans" variable nil (reparse-symbol function_parameters) [44080 44085]))                          )
                        (reparse-symbol indented_block_body) [44038 44221])
                    ("_draw_dashed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44243 44247])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44249 44257])
                            ("gc" variable nil (reparse-symbol function_parameters) [44259 44261])
                            ("path" variable nil (reparse-symbol function_parameters) [44263 44267])
                            ("trans" variable nil (reparse-symbol function_parameters) [44269 44274]))                          )
                        (reparse-symbol indented_block_body) [44226 44411])
                    ("_draw_dash_dot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44435 44439])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44441 44449])
                            ("gc" variable nil (reparse-symbol function_parameters) [44451 44453])
                            ("path" variable nil (reparse-symbol function_parameters) [44455 44459])
                            ("trans" variable nil (reparse-symbol function_parameters) [44461 44466]))                          )
                        (reparse-symbol indented_block_body) [44416 44604])
                    ("_draw_dotted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44626 44630])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44632 44640])
                            ("gc" variable nil (reparse-symbol function_parameters) [44642 44644])
                            ("path" variable nil (reparse-symbol function_parameters) [44646 44650])
                            ("trans" variable nil (reparse-symbol function_parameters) [44652 44657]))                          )
                        (reparse-symbol indented_block_body) [44609 44794])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44815 44819])
                            ("other" variable nil (reparse-symbol function_parameters) [44821 44826]))                          
                        :documentation "copy properties from other to self")
                        (reparse-symbol indented_block_body) [44799 45910])
                    ("_get_rgba_face" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45934 45938])
                            ("alt" variable nil (reparse-symbol function_parameters) [45940 45943]))                          )
                        (reparse-symbol indented_block_body) [45915 46206])
                    ("_get_rgba_ln_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46234 46238])
                            ("alt" variable nil (reparse-symbol function_parameters) [46240 46243]))                          )
                        (reparse-symbol indented_block_body) [46211 46309])
                    ("set_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46348 46352])
                            ("val" variable nil (reparse-symbol function_parameters) [46354 46357]))                          )
                        (reparse-symbol indented_block_body) [46337 46430])
                    ("set_c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46445 46449])
                            ("val" variable nil (reparse-symbol function_parameters) [46451 46454]))                          )
                        (reparse-symbol indented_block_body) [46435 46515])
                    ("set_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46531 46535])
                            ("val" variable nil (reparse-symbol function_parameters) [46537 46540]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [46520 46613])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46629 46633])
                            ("val" variable nil (reparse-symbol function_parameters) [46635 46638]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [46618 46711])
                    ("set_mec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46728 46732])
                            ("val" variable nil (reparse-symbol function_parameters) [46734 46737]))                          
                        :documentation "alias for set_markeredgecolor")
                        (reparse-symbol indented_block_body) [46716 46822])
                    ("set_mew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46839 46843])
                            ("val" variable nil (reparse-symbol function_parameters) [46845 46848]))                          
                        :documentation "alias for set_markeredgewidth")
                        (reparse-symbol indented_block_body) [46827 46933])
                    ("set_mfc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46950 46954])
                            ("val" variable nil (reparse-symbol function_parameters) [46956 46959]))                          
                        :documentation "alias for set_markerfacecolor")
                        (reparse-symbol indented_block_body) [46938 47044])
                    ("set_mfcalt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47064 47068])
                            ("val" variable nil (reparse-symbol function_parameters) [47070 47073]))                          
                        :documentation "alias for set_markerfacecoloralt")
                        (reparse-symbol indented_block_body) [47049 47164])
                    ("set_ms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47180 47184])
                            ("val" variable nil (reparse-symbol function_parameters) [47186 47189]))                          
                        :documentation "alias for set_markersize")
                        (reparse-symbol indented_block_body) [47169 47264])
                    ("get_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47280 47284]))                          
                        :documentation "alias for get_antialiased")
                        (reparse-symbol indented_block_body) [47269 47365])
                    ("get_c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47380 47384]))                          
                        :documentation "alias for get_color")
                        (reparse-symbol indented_block_body) [47370 47453])
                    ("get_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47469 47473]))                          
                        :documentation "alias for get_linestyle")
                        (reparse-symbol indented_block_body) [47458 47550])
                    ("get_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47566 47570]))                          
                        :documentation "alias for get_linewidth")
                        (reparse-symbol indented_block_body) [47555 47647])
                    ("get_mec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47664 47668]))                          
                        :documentation "alias for get_markeredgecolor")
                        (reparse-symbol indented_block_body) [47652 47757])
                    ("get_mew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47774 47778]))                          
                        :documentation "alias for get_markeredgewidth")
                        (reparse-symbol indented_block_body) [47762 47867])
                    ("get_mfc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47884 47888]))                          
                        :documentation "alias for get_markerfacecolor")
                        (reparse-symbol indented_block_body) [47872 47977])
                    ("get_mfcalt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47997 48001])
                            ("alt" variable nil (reparse-symbol function_parameters) [48003 48006]))                          
                        :documentation "alias for get_markerfacecoloralt")
                        (reparse-symbol indented_block_body) [47982 48107])
                    ("get_ms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48123 48127]))                          
                        :documentation "alias for get_markersize")
                        (reparse-symbol indented_block_body) [48112 48206])
                    ("set_dash_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48234 48238])
                            ("s" variable nil (reparse-symbol function_parameters) [48240 48241]))                          
                        :documentation "
        Set the join style for dashed linestyles
        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [48211 48671])
                    ("set_solid_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48700 48704])
                            ("s" variable nil (reparse-symbol function_parameters) [48706 48707]))                          
                        :documentation "
        Set the join style for solid linestyles
        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [48676 49140])
                    ("get_dash_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49168 49172]))                          
                        :documentation "
        Get the join style for dashed linestyles
        ")
                        (reparse-symbol indented_block_body) [49145 49283])
                    ("get_solid_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49312 49316]))                          
                        :documentation "
        Get the join style for solid linestyles
        ")
                        (reparse-symbol indented_block_body) [49288 49427])
                    ("set_dash_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49454 49458])
                            ("s" variable nil (reparse-symbol function_parameters) [49460 49461]))                          
                        :documentation "
        Set the cap style for dashed linestyles

        ACCEPTS: ['butt' | 'round' | 'projecting']
        ")
                        (reparse-symbol indented_block_body) [49432 49889])
                    ("set_solid_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49917 49921])
                            ("s" variable nil (reparse-symbol function_parameters) [49923 49924]))                          
                        :documentation "
        Set the cap style for solid linestyles

        ACCEPTS: ['butt' | 'round' |  'projecting']
        ")
                        (reparse-symbol indented_block_body) [49894 50355])
                    ("get_dash_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50382 50386]))                          
                        :documentation "
        Get the cap style for dashed linestyles
        ")
                        (reparse-symbol indented_block_body) [50360 50495])
                    ("get_solid_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50523 50527]))                          
                        :documentation "
        Get the cap style for solid linestyles
        ")
                        (reparse-symbol indented_block_body) [50500 50636])
                    ("is_dashed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50655 50659]))                          )
                        (reparse-symbol indented_block_body) [50641 50757]))                  
                :type "class")
                nil [8488 50757])
            ("VertexSelector" type
               (:documentation "
    Manage the callbacks to maintain a list of selected vertices for
    :class:`matplotlib.lines.Line2D`. Derived classes should override
    :meth:`~matplotlib.lines.VertexSelector.process_selected` to do
    something with the picks.

    Here is an example which highlights the selected verts with red
    circles::

        import numpy as np
        import matplotlib.pyplot as plt
        import matplotlib.lines as lines

        class HighlightSelected(lines.VertexSelector):
            def __init__(self, line, fmt='ro', **kwargs):
                lines.VertexSelector.__init__(self, line)
                self.markers, = self.axes.plot([], [], fmt, **kwargs)

            def process_selected(self, ind, xs, ys):
                self.markers.set_data(xs, ys)
                self.canvas.draw()

        fig = plt.figure()
        ax = fig.add_subplot(111)
        x, y = np.random.rand(2, 30)
        line, = ax.plot(x, y, 'bs-', picker=5)

        selector = HighlightSelected(line)
        plt.show()

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the class with a :class:`matplotlib.lines.Line2D`
        instance.  The line should already be added to some
        :class:`matplotlib.axes.Axes` instance and should have the
        picker property set.
        \"\"\"" code nil (reparse-symbol indented_block_body) [51859 52099])
                            ("if" code nil (reparse-symbol indented_block_body) [52108 52204])
                            ("if" code nil (reparse-symbol indented_block_body) [52213 52362])
                            ("self" variable nil (reparse-symbol indented_block_body) [52371 52392])
                            ("self" variable nil (reparse-symbol indented_block_body) [52401 52417])
                            ("self" variable nil (reparse-symbol indented_block_body) [52426 52463])
                            ("self" variable nil (reparse-symbol indented_block_body) [52472 52533])
                            ("self" variable nil (reparse-symbol indented_block_body) [52543 52559]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51838 51842])
                            ("line" variable nil (reparse-symbol function_parameters) [51844 51848]))                          
                        :documentation "
        Initialize the class with a :class:`matplotlib.lines.Line2D`
        instance.  The line should already be added to some
        :class:`matplotlib.axes.Axes` instance and should have the
        picker property set.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51825 52560])
                    ("process_selected" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52586 52590])
                            ("ind" variable nil (reparse-symbol function_parameters) [52592 52595])
                            ("xs" variable nil (reparse-symbol function_parameters) [52597 52599])
                            ("ys" variable nil (reparse-symbol function_parameters) [52601 52603]))                          
                        :documentation "
        Default \"do nothing\" implementation of the
        :meth:`process_selected` method.

        *ind* are the indices of the selected vertices.  *xs* and *ys*
        are the coordinates of the selected vertices.
        ")
                        (reparse-symbol indented_block_body) [52565 52861])
                    ("onpick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52877 52881])
                            ("event" variable nil (reparse-symbol function_parameters) [52883 52888]))                          
                        :documentation "When the line is picked, update the set of selected indicies.")
                        (reparse-symbol indented_block_body) [52866 53324]))                  
                :type "class")
                nil [50759 53324])
            ("lineStyles" variable nil nil [53326 53357])
            ("lineMarkers" variable nil nil [53358 53391])
            ("drawStyles" variable nil nil [53392 53422])
            ("fillStyles" variable nil nil [53423 53458])
            ("docstring" code nil nil [53460 53513])
            ("docstring" code nil nil [53623 53664]))          
      :file "lines.py"
      :pointmax 53665
      :fsize 53664
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 711 . 715) (PERIOD 716 . 717) (FROM 613 . 617) (PERIOD 618 . 619) (FROM 590 . 594) (PERIOD 595 . 596) (FROM 405 . 409) (PERIOD 410 . 411) (FROM 378 . 382) (PERIOD 383 . 384) (FROM 338 . 342) (PERIOD 343 . 344)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for including text in a figure.
\"\"\"" code nil nil [1 48])
            ("" code nil nil [72 157])
            ("six" include nil nil [159 169])
            ("six.moves" include nil nil [170 195])
            ("math" include nil nil [197 208])
            ("warnings" include nil nil [209 224])
            ("contextlib" include nil nil [226 243])
            ("numpy" include nil nil [245 263])
            ("matplotlib" include nil nil [265 293])
            ("matplotlib" include nil nil [294 325])
            ("matplotlib.artist" include nil nil [326 360])
            ("matplotlib.artist" include nil nil [361 397])
            ("matplotlib.cbook" include nil nil [398 450])
            ("matplotlib" include nil nil [451 483])
            ("matplotlib.font_manager" include nil nil [484 534])
            ("matplotlib.patches" include nil nil [535 580])
            ("matplotlib.patches" include nil nil [581 638])
            ("matplotlib.transforms" include nil nil [639 682])
            ("matplotlib.transforms" include nil nil [683 742])
            ("matplotlib.transforms" include nil nil [743 802])
            ("matplotlib.lines" include nil nil [803 838])
            ("matplotlib.path" include nil nil [839 871])
            ("matplotlib.artist" include nil nil [872 921])
            ("matplotlib.backend_bases" include nil nil [923 972])
            ("matplotlib.textpath" include nil nil [973 1013])
            ("_process_text_args" function (:arguments 
              ( ("override" variable nil (reparse-symbol function_parameters) [1039 1047])
                ("fontdict" variable nil (reparse-symbol function_parameters) [1049 1057])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1064 1072]))              ) nil [1016 1264])
            ("_wrap_text" function
               (:documentation "
    Temporarily inserts newlines to the text if the wrap option is enabled.
    "
                :arguments 
                  ( ("textobj" variable nil (reparse-symbol function_parameters) [1308 1315]))                  
                :decorators 
                  ( ("contextlib.contextmanager" function (:type "decorator") nil nil))                  )
                nil [1266 1660])
            ("get_rotation" function
               (:documentation "
    Return the text angle as float. The returned
    angle is between 0 and 360 deg.

    *rotation* may be 'horizontal', 'vertical', or a numeric value in degrees.
    "
                :arguments 
                  ( ("rotation" variable nil (reparse-symbol function_parameters) [1733 1741]))                  )
                nil [1716 2462])
            ("docstring" code nil nil [2649 5294])
            ("_get_textbox" function
               (:documentation "
    Calculate the bounding box of the text. Unlike
    :meth:`matplotlib.text.Text.get_extents` method, The bbox size of
    the text before the rotation is calculated.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [5652 5656])
                    ("renderer" variable nil (reparse-symbol function_parameters) [5658 5666]))                  )
                nil [5635 6543])
            ("Text" type
               (:documentation "
    Handle storing and drawing of text in window or data coordinates.
    "
                :superclasses ("Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [6655 6665])
                    ("_cached" variable nil (reparse-symbol indented_block_body) [6671 6692])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6710 6714]))                          )
                        (reparse-symbol indented_block_body) [6698 6788])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
        with string *text*.

        Valid kwargs are
        %(Text)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [7375 7530])
                            ("Artist" code nil (reparse-symbol indented_block_body) [7540 7561])
                            ("self, self" code nil (reparse-symbol indented_block_body) [7570 7593])
                            ("if" code nil (reparse-symbol indented_block_body) [7603 7664])
                            ("if" code nil (reparse-symbol indented_block_body) [7672 7850])
                            ("self" code nil (reparse-symbol indented_block_body) [7859 7878])
                            ("self" code nil (reparse-symbol indented_block_body) [7887 7908])
                            ("self" code nil (reparse-symbol indented_block_body) [7917 7940])
                            ("self" code nil (reparse-symbol indented_block_body) [7949 7968])
                            ("self" variable nil (reparse-symbol indented_block_body) [7977 8020])
                            ("self" variable nil (reparse-symbol indented_block_body) [8029 8076])
                            ("self" variable nil (reparse-symbol indented_block_body) [8085 8122])
                            ("self" variable nil (reparse-symbol indented_block_body) [8131 8156])
                            ("self" variable nil (reparse-symbol indented_block_body) [8165 8202])
                            ("self" variable nil (reparse-symbol indented_block_body) [8211 8234])
                            ("self" variable nil (reparse-symbol indented_block_body) [8272 8293])
                            ("if" code nil (reparse-symbol indented_block_body) [8302 8385])
                            ("self" variable nil (reparse-symbol indented_block_body) [8393 8424])
                            ("self" code nil (reparse-symbol indented_block_body) [8433 8470])
                            ("self" code nil (reparse-symbol indented_block_body) [8479 8498]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6806 6810])
                            ("x" variable nil (reparse-symbol function_parameters) [6829 6830])
                            ("y" variable nil (reparse-symbol function_parameters) [6834 6835])
                            ("text" variable nil (reparse-symbol function_parameters) [6839 6843])
                            ("color" variable nil (reparse-symbol function_parameters) [6865 6870])
                            ("verticalalignment" variable nil (reparse-symbol function_parameters) [6928 6945])
                            ("horizontalalignment" variable nil (reparse-symbol function_parameters) [6975 6994])
                            ("multialignment" variable nil (reparse-symbol function_parameters) [7020 7034])
                            ("fontproperties" variable nil (reparse-symbol function_parameters) [7058 7072])
                            ("rotation" variable nil (reparse-symbol function_parameters) [7128 7136])
                            ("linespacing" variable nil (reparse-symbol function_parameters) [7160 7171])
                            ("rotation_mode" variable nil (reparse-symbol function_parameters) [7195 7208])
                            ("usetex" variable nil (reparse-symbol function_parameters) [7232 7238])
                            ("wrap" variable nil (reparse-symbol function_parameters) [7309 7313])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7338 7346]))                          
                        :documentation "
        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
        with string *text*.

        Valid kwargs are
        %(Text)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6793 8499])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8515 8519])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8521 8527]))                          
                        :documentation "
        Update properties from a dictionary.
        ")
                        (reparse-symbol indented_block_body) [8504 8759])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8781 8785]))                          )
                        (reparse-symbol indented_block_body) [8764 8933])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8951 8955])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [8957 8967]))                          
                        :documentation "Test whether the mouse event occurred in the patch.

        In the case of text, a hit is true anywhere in the
        axis-aligned bounding-box containing the text.

        Returns True or False.
        ")
                        (reparse-symbol indented_block_body) [8938 9936])
                    ("_get_xy_display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9961 9965]))                          )
                        (reparse-symbol indented_block_body) [9941 10151])
                    ("_get_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10180 10184]))                          )
                        (reparse-symbol indented_block_body) [10156 10331])
                    ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10353 10357]))                          )
                        (reparse-symbol indented_block_body) [10336 10486])
                    ("set_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10513 10517])
                            ("m" variable nil (reparse-symbol function_parameters) [10519 10520]))                          
                        :documentation "
        set text rotation mode. If \"anchor\", the un-rotated text
        will first aligned according to their *ha* and
        *va*, and then will be rotated with the alignement
        reference point as a origin. If None (default), the text will be
        rotated first then will be aligned.
        ")
                        (reparse-symbol indented_block_body) [10491 11040])
                    ("get_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11067 11071]))                          )
                        (reparse-symbol indented_block_body) [11045 11142])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11163 11167])
                            ("other" variable nil (reparse-symbol function_parameters) [11169 11174]))                          )
                        (reparse-symbol indented_block_body) [11147 11683])
                    ("_get_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11704 11708])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11710 11718]))                          
                        :documentation "
        return the extent (bbox) of the text together with
        multiple-alignment information. Note that it returns an extent
        of a rotated text when necessary.
        ")
                        (reparse-symbol indented_block_body) [11688 17097])
                    ("set_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17115 17119])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [17121 17130]))                          
                        :documentation "
        Draw a bounding box around self.  rectprops are any settable
        properties for a FancyBboxPatch, e.g., facecolor='red', alpha=0.5.

          t.set_bbox(dict(facecolor='red', alpha=0.5))

        The default boxstyle is 'square'. The mutation
        scale of the FancyBboxPatch is set to the fontsize.

        ACCEPTS: FancyBboxPatch prop dict
        ")
                        (reparse-symbol indented_block_body) [17102 18678])
                    ("get_bbox_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18702 18706]))                          
                        :documentation "
        Return the bbox Patch object. Returns None if the
        FancyBboxPatch is not made.
        ")
                        (reparse-symbol indented_block_body) [18683 18859])
                    ("update_bbox_position_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18894 18898])
                            ("renderer" variable nil (reparse-symbol function_parameters) [18900 18908]))                          
                        :documentation "
        Update the location and the size of the bbox. This method
        should be used when the position and size of the bbox needs to
        be updated before actually drawing the bbox.
        ")
                        (reparse-symbol indented_block_body) [18864 20001])
                    ("_draw_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20021 20025])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20027 20035])
                            ("posx" variable nil (reparse-symbol function_parameters) [20037 20041])
                            ("posy" variable nil (reparse-symbol function_parameters) [20043 20047]))                          
                        :documentation " Update the location and the size of the bbox
        (FancyBboxPatch), and draw
        ")
                        (reparse-symbol indented_block_body) [20006 20649])
                    ("_update_clip_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20682 20686]))                          )
                        (reparse-symbol indented_block_body) [20654 20919])
                    ("set_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20941 20945])
                            ("clipbox" variable nil (reparse-symbol function_parameters) [20947 20954]))                          
                        :documentation "
        Set the artist's clip :class:`~matplotlib.transforms.Bbox`.

        ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance
        ")
                        (reparse-symbol indented_block_body) [20924 21201])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21224 21228])
                            ("path" variable nil (reparse-symbol function_parameters) [21230 21234])
                            ("transform" variable nil (reparse-symbol function_parameters) [21236 21245]))                          
                        :documentation "
        Set the artist's clip path, which may be:

          * a :class:`~matplotlib.patches.Patch` (or subclass) instance

          * a :class:`~matplotlib.path.Path` instance, in which case
             an optional :class:`~matplotlib.transforms.Transform`
             instance may be provided, which will be applied to the
             path before using it for clipping.

          * *None*, to remove the clipping path

        For efficiency, if the path happens to be an axis-aligned
        rectangle, this method will set the clipping box to the
        corresponding rectangle and set the clipping path to *None*.

        ACCEPTS: [ (:class:`~matplotlib.path.Path`,
        :class:`~matplotlib.transforms.Transform`) |
        :class:`~matplotlib.patches.Patch` | None ]
        ")
                        (reparse-symbol indented_block_body) [21206 22156])
                    ("set_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22177 22181])
                            ("b" variable nil (reparse-symbol function_parameters) [22183 22184]))                          
                        :documentation "
        Set whether artist uses clipping.

        When False artists will be visible out side of the axes which
        can lead to unexpected results.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [22161 22477])
                    ("get_wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22495 22499]))                          
                        :documentation "
        Returns the wrapping state for the text.
        ")
                        (reparse-symbol indented_block_body) [22482 22601])
                    ("set_wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22619 22623])
                            ("wrap" variable nil (reparse-symbol function_parameters) [22625 22629]))                          
                        :documentation "
        Sets the wrapping state for the text.
        ")
                        (reparse-symbol indented_block_body) [22606 22728])
                    ("_get_wrap_line_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22758 22762]))                          
                        :documentation "
        Returns the maximum line width for wrapping text based on the
        current orientation.
        ")
                        (reparse-symbol indented_block_body) [22733 23623])
                    ("_get_dist_to_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23649 23653])
                            ("rotation" variable nil (reparse-symbol function_parameters) [23655 23663])
                            ("x0" variable nil (reparse-symbol function_parameters) [23665 23667])
                            ("y0" variable nil (reparse-symbol function_parameters) [23669 23671])
                            ("figure_box" variable nil (reparse-symbol function_parameters) [23673 23683]))                          
                        :documentation "
        Returns the distance from the given points, to the boundaries
        of a rotated box in pixels.
        ")
                        (reparse-symbol indented_block_body) [23628 24551])
                    ("_get_rendered_text_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24585 24589])
                            ("text" variable nil (reparse-symbol function_parameters) [24591 24595]))                          
                        :documentation "
        Returns the width of a given text string, in pixels.
        ")
                        (reparse-symbol indented_block_body) [24556 24851])
                    ("_get_wrapped_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24878 24882]))                          
                        :documentation "
        Return a copy of the text with new lines added, so that
        the text is wrapped relative to the parent figure.
        ")
                        (reparse-symbol indented_block_body) [24856 26158])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26197 26201])
                            ("renderer" variable nil (reparse-symbol function_parameters) [26203 26211]))                          
                        :documentation "
        Draws the :class:`Text` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [26163 28850])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28869 28873]))                          )
                        (reparse-symbol indented_block_body) [28855 28942])
                    ("get_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28970 28974]))                          )
                        (reparse-symbol indented_block_body) [28947 29079])
                    ("get_font_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29108 29112]))                          )
                        (reparse-symbol indented_block_body) [29084 29195])
                    ("get_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29215 29219]))                          )
                        (reparse-symbol indented_block_body) [29200 29335])
                    ("get_fontfamily" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29359 29363]))                          )
                        (reparse-symbol indented_block_body) [29340 29430])
                    ("get_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29448 29452]))                          )
                        (reparse-symbol indented_block_body) [29435 29543])
                    ("get_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29562 29566]))                          )
                        (reparse-symbol indented_block_body) [29548 29659])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29677 29681]))                          )
                        (reparse-symbol indented_block_body) [29664 29783])
                    ("get_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29804 29808]))                          )
                        (reparse-symbol indented_block_body) [29788 29907])
                    ("get_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29932 29936]))                          )
                        (reparse-symbol indented_block_body) [29912 30005])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30025 30029]))                          )
                        (reparse-symbol indented_block_body) [30010 30131])
                    ("get_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30153 30157]))                          )
                        (reparse-symbol indented_block_body) [30136 30220])
                    ("get_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30243 30247]))                          )
                        (reparse-symbol indented_block_body) [30225 30312])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30334 30338]))                          )
                        (reparse-symbol indented_block_body) [30317 30401])
                    ("get_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30425 30429]))                          )
                        (reparse-symbol indented_block_body) [30406 30496])
                    ("get_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30517 30521]))                          )
                        (reparse-symbol indented_block_body) [30501 30627])
                    ("get_fontstretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30652 30656]))                          )
                        (reparse-symbol indented_block_body) [30632 30725])
                    ("get_ha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30741 30745]))                          )
                        (reparse-symbol indented_block_body) [30730 30838])
                    ("get_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30871 30875]))                          
                        :documentation "
        Return the horizontal alignment as string.  Will be one of
        'left', 'center' or 'right'.
        ")
                        (reparse-symbol indented_block_body) [30843 31047])
                    ("get_unitless_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31078 31082]))                          )
                        (reparse-symbol indented_block_body) [31052 31431])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31453 31457]))                          )
                        (reparse-symbol indented_block_body) [31436 31672])
                    ("get_prop_tup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31694 31698])
                            ("renderer" variable nil (reparse-symbol function_parameters) [31700 31708]))                          
                        :documentation "
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (e.g., layouts) and
        need to know if the text has changed.
        ")
                        (reparse-symbol indented_block_body) [31677 32322])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32340 32344]))                          )
                        (reparse-symbol indented_block_body) [32327 32406])
                    ("get_va" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32422 32426]))                          )
                        (reparse-symbol indented_block_body) [32411 32522])
                    ("get_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32553 32557]))                          
                        :documentation "
        Return the vertical alignment as string.  Will be one of
        'top', 'center', 'bottom' or 'baseline'.
        ")
                        (reparse-symbol indented_block_body) [32527 32737])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32764 32768])
                            ("renderer" variable nil (reparse-symbol function_parameters) [32770 32778])
                            ("dpi" variable nil (reparse-symbol function_parameters) [32785 32788]))                          )
                        (reparse-symbol indented_block_body) [32742 34490])
                    ("set_backgroundcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34519 34523])
                            ("color" variable nil (reparse-symbol function_parameters) [34525 34530]))                          
                        :documentation "
        Set the background color of the text by updating the bbox.

        .. seealso::

            :meth:`set_bbox`
               To change the position of the bounding box.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [34495 35016])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35035 35039])
                            ("color" variable nil (reparse-symbol function_parameters) [35041 35046]))                          
                        :documentation "
        Set the foreground color of the text

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [35021 35370])
                    ("set_ha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35386 35390])
                            ("align" variable nil (reparse-symbol function_parameters) [35392 35397]))                          )
                        (reparse-symbol indented_block_body) [35375 35488])
                    ("set_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35521 35525])
                            ("align" variable nil (reparse-symbol function_parameters) [35527 35532]))                          
                        :documentation "
        Set the horizontal alignment to one of

        ACCEPTS: [ 'center' | 'right' | 'left' ]
        ")
                        (reparse-symbol indented_block_body) [35493 35912])
                    ("set_ma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35928 35932])
                            ("align" variable nil (reparse-symbol function_parameters) [35934 35939]))                          )
                        (reparse-symbol indented_block_body) [35917 36023])
                    ("set_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36051 36055])
                            ("align" variable nil (reparse-symbol function_parameters) [36057 36062]))                          
                        :documentation "
        Set the alignment for multiple lines layout.  The layout of the
        bounding box of all the lines is determined bu the horizontalalignment
        and verticalalignment properties, but the multiline text within that
        box can be

        ACCEPTS: ['left' | 'right' | 'center' ]
        ")
                        (reparse-symbol indented_block_body) [36028 36636])
                    ("set_linespacing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36661 36665])
                            ("spacing" variable nil (reparse-symbol function_parameters) [36667 36674]))                          
                        :documentation "
        Set the line spacing as a multiple of the font size.
        Default is 1.2.

        ACCEPTS: float (multiple of font size)
        ")
                        (reparse-symbol indented_block_body) [36641 36896])
                    ("set_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36916 36920])
                            ("fontname" variable nil (reparse-symbol function_parameters) [36922 36930]))                          
                        :documentation "
        Set the font family.  May be either a single string, or a list
        of strings in decreasing priority.  Each string may be either
        a real font name or a generic font class name.  If the latter,
        the specific font names will be looked up in the
        :file:`matplotlibrc` file.

        ACCEPTS: [FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' |
                  'monospace' ]
        ")
                        (reparse-symbol indented_block_body) [36901 37448])
                    ("set_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37469 37473])
                            ("variant" variable nil (reparse-symbol function_parameters) [37475 37482]))                          
                        :documentation "
        Set the font variant, either 'normal' or 'small-caps'.

        ACCEPTS: [ 'normal' | 'small-caps' ]
        ")
                        (reparse-symbol indented_block_body) [37453 37694])
                    ("set_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37719 37723])
                            ("variant" variable nil (reparse-symbol function_parameters) [37725 37732]))                          )
                        (reparse-symbol indented_block_body) [37699 37808])
                    ("set_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37826 37830])
                            ("fontname" variable nil (reparse-symbol function_parameters) [37832 37840]))                          
                        :documentation "alias for set_family")
                        (reparse-symbol indented_block_body) [37813 37919])
                    ("set_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37941 37945])
                            ("fontname" variable nil (reparse-symbol function_parameters) [37947 37955]))                          
                        :documentation "alias for set_family")
                        (reparse-symbol indented_block_body) [37924 38027])
                    ("set_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38046 38050])
                            ("fontstyle" variable nil (reparse-symbol function_parameters) [38052 38061]))                          
                        :documentation "
        Set the font style.

        ACCEPTS: [ 'normal' | 'italic' | 'oblique']
        ")
                        (reparse-symbol indented_block_body) [38032 38245])
                    ("set_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38268 38272])
                            ("fontstyle" variable nil (reparse-symbol function_parameters) [38274 38283]))                          )
                        (reparse-symbol indented_block_body) [38250 38357])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38375 38379])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [38381 38389]))                          
                        :documentation "
        Set the font size.  May be either a size string, relative to
        the default font size, or an absolute font size in points.

        ACCEPTS: [size in points | 'xx-small' | 'x-small' | 'small' |
                  'medium' | 'large' | 'x-large' | 'xx-large' ]
        ")
                        (reparse-symbol indented_block_body) [38362 38761])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38783 38787])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [38789 38797]))                          )
                        (reparse-symbol indented_block_body) [38766 38868])
                    ("set_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38888 38892])
                            ("weight" variable nil (reparse-symbol function_parameters) [38894 38900]))                          
                        :documentation "
        Set the font weight.

        ACCEPTS: [a numeric value in range 0-1000 | 'ultralight' | 'light' |
                  'normal' | 'regular' | 'book' | 'medium' | 'roman' |
                  'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' |
                  'extra bold' | 'black' ]
        ")
                        (reparse-symbol indented_block_body) [38873 39294])
                    ("set_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39318 39322])
                            ("weight" variable nil (reparse-symbol function_parameters) [39324 39330]))                          )
                        (reparse-symbol indented_block_body) [39299 39403])
                    ("set_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39424 39428])
                            ("stretch" variable nil (reparse-symbol function_parameters) [39430 39437]))                          
                        :documentation "
        Set the font stretch (horizontal condensation or expansion).

        ACCEPTS: [a numeric value in range 0-1000 | 'ultra-condensed' |
                  'extra-condensed' | 'condensed' | 'semi-condensed' |
                  'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' |
                  'ultra-expanded' ]
        ")
                        (reparse-symbol indented_block_body) [39408 39869])
                    ("set_fontstretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39894 39898])
                            ("stretch" variable nil (reparse-symbol function_parameters) [39900 39907]))                          )
                        (reparse-symbol indented_block_body) [39874 39983])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40005 40009])
                            ("xy" variable nil (reparse-symbol function_parameters) [40011 40013]))                          
                        :documentation "
        Set the (*x*, *y*) position of the text

        ACCEPTS: (x,y)
        ")
                        (reparse-symbol indented_block_body) [39988 40164])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40179 40183])
                            ("x" variable nil (reparse-symbol function_parameters) [40185 40186]))                          
                        :documentation "
        Set the *x* position of the text

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [40169 40324])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40339 40343])
                            ("y" variable nil (reparse-symbol function_parameters) [40345 40346]))                          
                        :documentation "
        Set the *y* position of the text

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [40329 40484])
                    ("set_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40506 40510])
                            ("s" variable nil (reparse-symbol function_parameters) [40512 40513]))                          
                        :documentation "
        Set the rotation of the text

        ACCEPTS: [ angle in degrees | 'vertical' | 'horizontal' ]
        ")
                        (reparse-symbol indented_block_body) [40489 40697])
                    ("set_va" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40713 40717])
                            ("align" variable nil (reparse-symbol function_parameters) [40719 40724]))                          )
                        (reparse-symbol indented_block_body) [40702 40811])
                    ("set_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40842 40846])
                            ("align" variable nil (reparse-symbol function_parameters) [40848 40853]))                          
                        :documentation "
        Set the vertical alignment

        ACCEPTS: [ 'center' | 'top' | 'bottom' | 'baseline' ]
        ")
                        (reparse-symbol indented_block_body) [40816 41243])
                    ("set_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41261 41265])
                            ("s" variable nil (reparse-symbol function_parameters) [41267 41268]))                          
                        :documentation "
        Set the text string *s*

        It may contain newlines (``\\\\n``) or math in LaTeX syntax.

        ACCEPTS: string or anything printable with '%s' conversion.
        ")
                        (reparse-symbol indented_block_body) [41248 41523])
                    ("is_math_text" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("s" variable nil (reparse-symbol function_parameters) [41563 41564])
                            ("usetex" variable nil (reparse-symbol function_parameters) [41566 41572]))                          
                        :documentation "
        Returns a cleaned string and a boolean flag.
        The flag indicates if the given string *s* contains any mathtext,
        determined by counting unescaped dollar signs. If no mathtext
        is present, the cleaned string has its dollar signs unescaped.
        If usetex is on, the flag always has the value \"TeX\".
        ")
                        (reparse-symbol indented_block_body) [41528 42334])
                    ("set_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42362 42366])
                            ("fp" variable nil (reparse-symbol function_parameters) [42368 42370]))                          
                        :documentation "
        Set the font properties that control the text.  *fp* must be a
        :class:`matplotlib.font_manager.FontProperties` object.

        ACCEPTS: a :class:`matplotlib.font_manager.FontProperties` instance
        ")
                        (reparse-symbol indented_block_body) [42339 42743])
                    ("set_font_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42772 42776])
                            ("fp" variable nil (reparse-symbol function_parameters) [42778 42780]))                          )
                        (reparse-symbol indented_block_body) [42748 42858])
                    ("set_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42878 42882])
                            ("usetex" variable nil (reparse-symbol function_parameters) [42884 42890]))                          
                        :documentation "
        Set this `Text` object to render using TeX (or not).

        If `None` is given, the option will be reset to use the value of
        `rcParams['text.usetex']`
        ")
                        (reparse-symbol indented_block_body) [42863 43244])
                    ("get_usetex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43264 43268]))                          
                        :documentation "
        Return whether this `Text` object will render using TeX.

        If the user has not manually set this value, it will default to
        the value of `rcParams['text.usetex']`
        ")
                        (reparse-symbol indented_block_body) [43249 43602]))                  
                :type "class")
                nil [6545 43602])
            ("docstring" code nil nil [43603 43652])
            ("docstring" code nil nil [43653 43692])
            ("TextWithDash" type
               (:documentation "
    This is basically a :class:`~matplotlib.text.Text` with a dash
    (drawn with a :class:`~matplotlib.lines.Line2D`) before/after
    it. It is intended to be a drop-in replacement for
    :class:`~matplotlib.text.Text`, and should behave identically to
    it when *dashlength* = 0.0.

    The dash always comes between the point specified by
    :meth:`~matplotlib.text.Text.set_position` and the text. When a
    dash exists, the text alignment arguments (*horizontalalignment*,
    *verticalalignment*) are ignored.

    *dashlength* is the length of the dash in canvas units.
    (default = 0.0).

    *dashdirection* is one of 0 or 1, where 0 draws the dash after the
    text and 1 before.  (default = 0).

    *dashrotation* specifies the rotation of the dash, and should
    generally stay *None*. In this case
    :meth:`~matplotlib.text.TextWithDash.get_dashrotation` returns
    :meth:`~matplotlib.text.Text.get_rotation`.  (i.e., the dash takes
    its rotation from the text's rotation). Because the text center is
    projected onto the dash, major deviations in the rotation cause
    what may be considered visually unappealing results.
    (default = *None*)

    *dashpad* is a padding length to add (or subtract) space
    between the text and the dash, in canvas units.
    (default = 3)

    *dashpush* \"pushes\" the dash and text away from the point
    specified by :meth:`~matplotlib.text.Text.set_position` by the
    amount in canvas units.  (default = 0)

    .. note::

        The alignment of the two objects is based on the bounding box
        of the :class:`~matplotlib.text.Text`, as obtained by
        :meth:`~matplotlib.artist.Artist.get_window_extent`.  This, in
        turn, appears to depend on the font metrics as given by the
        rendering backend. Hence the quality of the \"centering\" of the
        label text with respect to the dash varies depending on the
        backend used.

    .. note::

        I'm not sure that I got the
        :meth:`~matplotlib.text.TextWithDash.get_window_extent` right,
        or whether that's sufficient for providing the object bounding
        box.

    "
                :superclasses ("Text")
                :members 
                  ( ("__name__" variable nil (reparse-symbol indented_block_body) [45882 45907])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45925 45929]))                          )
                        (reparse-symbol indented_block_body) [45913 46011])
                    ("__init__" function
                       (:suite 
                          ( ("Text" code nil (reparse-symbol indented_block_body) [46589 46958])
                            ("self" variable nil (reparse-symbol indented_block_body) [47144 47313])
                            ("self" variable nil (reparse-symbol indented_block_body) [47323 47345])
                            ("self" variable nil (reparse-symbol indented_block_body) [47354 47376])
                            ("self" variable nil (reparse-symbol indented_block_body) [47385 47414])
                            ("self" variable nil (reparse-symbol indented_block_body) [47423 47458])
                            ("self" variable nil (reparse-symbol indented_block_body) [47467 47500])
                            ("self" variable nil (reparse-symbol indented_block_body) [47509 47532])
                            ("self" variable nil (reparse-symbol indented_block_body) [47541 47566]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46029 46033])
                            ("x" variable nil (reparse-symbol function_parameters) [46052 46053])
                            ("y" variable nil (reparse-symbol function_parameters) [46057 46058])
                            ("text" variable nil (reparse-symbol function_parameters) [46062 46066])
                            ("color" variable nil (reparse-symbol function_parameters) [46088 46093])
                            ("verticalalignment" variable nil (reparse-symbol function_parameters) [46150 46167])
                            ("horizontalalignment" variable nil (reparse-symbol function_parameters) [46195 46214])
                            ("multialignment" variable nil (reparse-symbol function_parameters) [46242 46256])
                            ("fontproperties" variable nil (reparse-symbol function_parameters) [46280 46294])
                            ("rotation" variable nil (reparse-symbol function_parameters) [46350 46358])
                            ("linespacing" variable nil (reparse-symbol function_parameters) [46382 46393])
                            ("dashlength" variable nil (reparse-symbol function_parameters) [46417 46427])
                            ("dashdirection" variable nil (reparse-symbol function_parameters) [46450 46463])
                            ("dashrotation" variable nil (reparse-symbol function_parameters) [46484 46496])
                            ("dashpad" variable nil (reparse-symbol function_parameters) [46520 46527])
                            ("dashpush" variable nil (reparse-symbol function_parameters) [46548 46556]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46016 47567])
                    ("get_unitless_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47635 47639]))                          )
                        (reparse-symbol indented_block_body) [47609 47996])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48018 48022]))                          )
                        (reparse-symbol indented_block_body) [48001 48240])
                    ("get_prop_tup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48262 48266])
                            ("renderer" variable nil (reparse-symbol function_parameters) [48268 48276]))                          
                        :documentation "
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (e.g., layouts) and
        need to know if the text has changed.
        ")
                        (reparse-symbol indented_block_body) [48245 48821])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48835 48839])
                            ("renderer" variable nil (reparse-symbol function_parameters) [48841 48849]))                          
                        :documentation "
        Draw the :class:`TextWithDash` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [48826 49126])
                    ("update_coords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49149 49153])
                            ("renderer" variable nil (reparse-symbol function_parameters) [49155 49163]))                          
                        :documentation "
        Computes the actual *x*, *y* coordinates for text based on the
        input *x*, *y* and the *dashlength*. Since the rotation is
        with respect to the actual canvas's coordinates we need to map
        back and forth.
        ")
                        (reparse-symbol indented_block_body) [49131 52371])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52398 52402])
                            ("renderer" variable nil (reparse-symbol function_parameters) [52404 52412]))                          )
                        (reparse-symbol indented_block_body) [52376 53260])
                    ("get_dashlength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53284 53288]))                          
                        :documentation "
        Get the length of the dash.
        ")
                        (reparse-symbol indented_block_body) [53265 53383])
                    ("set_dashlength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53407 53411])
                            ("dl" variable nil (reparse-symbol function_parameters) [53413 53415]))                          
                        :documentation "
        Set the length of the dash.

        ACCEPTS: float (canvas units)
        ")
                        (reparse-symbol indented_block_body) [53388 53573])
                    ("get_dashdirection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53600 53604]))                          
                        :documentation "
        Get the direction dash.  1 is before the text and 0 is after.
        ")
                        (reparse-symbol indented_block_body) [53578 53736])
                    ("set_dashdirection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53763 53767])
                            ("dd" variable nil (reparse-symbol function_parameters) [53769 53771]))                          
                        :documentation "
        Set the direction of the dash following the text.
        1 is before the text and 0 is after. The default
        is 0, which is what you'd want for the typical
        case of ticks below and on the left of the figure.

        ACCEPTS: int (1 is before, 0 is after)
        ")
                        (reparse-symbol indented_block_body) [53741 54134])
                    ("get_dashrotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54160 54164]))                          
                        :documentation "
        Get the rotation of the dash in degrees.
        ")
                        (reparse-symbol indented_block_body) [54139 54370])
                    ("set_dashrotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54396 54400])
                            ("dr" variable nil (reparse-symbol function_parameters) [54402 54404]))                          
                        :documentation "
        Set the rotation of the dash, in degrees

        ACCEPTS: float (degrees)
        ")
                        (reparse-symbol indented_block_body) [54375 54572])
                    ("get_dashpad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54593 54597]))                          
                        :documentation "
        Get the extra spacing between the dash and the text, in canvas units.
        ")
                        (reparse-symbol indented_block_body) [54577 54731])
                    ("set_dashpad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54752 54756])
                            ("dp" variable nil (reparse-symbol function_parameters) [54758 54760]))                          
                        :documentation "
        Set the \"pad\" of the TextWithDash, which is the extra spacing
        between the dash and the text, in canvas units.

        ACCEPTS: float (canvas units)
        ")
                        (reparse-symbol indented_block_body) [54736 55005])
                    ("get_dashpush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55027 55031]))                          
                        :documentation "
        Get the extra spacing between the dash and the specified text
        position, in canvas units.
        ")
                        (reparse-symbol indented_block_body) [55010 55193])
                    ("set_dashpush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55215 55219])
                            ("dp" variable nil (reparse-symbol function_parameters) [55221 55223]))                          
                        :documentation "
        Set the \"push\" of the TextWithDash, which
        is the extra spacing between the beginning
        of the dash and the specified position.

        ACCEPTS: float (canvas units)
        ")
                        (reparse-symbol indented_block_body) [55198 55492])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55514 55518])
                            ("xy" variable nil (reparse-symbol function_parameters) [55520 55522]))                          
                        :documentation "
        Set the (*x*, *y*) position of the :class:`TextWithDash`.

        ACCEPTS: (x, y)
        ")
                        (reparse-symbol indented_block_body) [55497 55692])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55707 55711])
                            ("x" variable nil (reparse-symbol function_parameters) [55713 55714]))                          
                        :documentation "
        Set the *x* position of the :class:`TextWithDash`.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [55697 55881])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55896 55900])
                            ("y" variable nil (reparse-symbol function_parameters) [55902 55903]))                          
                        :documentation "
        Set the *y* position of the :class:`TextWithDash`.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [55886 56070])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56093 56097])
                            ("t" variable nil (reparse-symbol function_parameters) [56099 56100]))                          
                        :documentation "
        Set the :class:`matplotlib.transforms.Transform` instance used
        by this artist.

        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [56075 56393])
                    ("get_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56413 56417]))                          )
                        (reparse-symbol indented_block_body) [56398 56506])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56526 56530])
                            ("fig" variable nil (reparse-symbol function_parameters) [56532 56535]))                          
                        :documentation "
        Set the figure instance the artist belong to.

        ACCEPTS: a :class:`matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [56511 56752]))                  
                :type "class")
                nil [43695 56752])
            ("docstring" code nil nil [56753 56818])
            ("OffsetFrom" type
               (:superclasses ("object")
                :members 
                  ( ("'Callable helper class for working with `Annotation`'" code nil (reparse-symbol indented_block_body) [56851 56904])
                    ("__init__" function
                       (:suite 
                          ( ("'''
        Parameters
        ----------
        artist : `Artist`, `BboxBase`, or `Transform`
            The object to compute the offset from.

        ref_coord : length 2 sequence
            If `artist` is an `Artist` or `BboxBase`, this values is
            the location to of the offset origin in fractions of the
            `artist` bounding box.

            If `artist` is a transform, the offset origin is the
            transform applied to this value.

        unit : {'points, 'pixels'}
            The screen units to use (pixels or points) for the offset
            input.

        '''" code nil (reparse-symbol indented_block_body) [56971 57578])
                            ("self" variable nil (reparse-symbol indented_block_body) [57587 57608])
                            ("self" variable nil (reparse-symbol indented_block_body) [57617 57644])
                            ("self" code nil (reparse-symbol indented_block_body) [57653 57672]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56922 56926])
                            ("artist" variable nil (reparse-symbol function_parameters) [56928 56934])
                            ("ref_coord" variable nil (reparse-symbol function_parameters) [56936 56945])
                            ("unit" variable nil (reparse-symbol function_parameters) [56947 56951]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56909 57673])
                    ("set_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57691 57695])
                            ("unit" variable nil (reparse-symbol function_parameters) [57697 57701]))                          )
                        (reparse-symbol indented_block_body) [57678 58017])
                    ("get_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58035 58039]))                          )
                        (reparse-symbol indented_block_body) [58022 58135])
                    ("_get_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58155 58159])
                            ("renderer" variable nil (reparse-symbol function_parameters) [58161 58169]))                          )
                        (reparse-symbol indented_block_body) [58140 58317])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58335 58339])
                            ("renderer" variable nil (reparse-symbol function_parameters) [58341 58349]))                          )
                        (reparse-symbol indented_block_body) [58322 59394]))                  
                :type "class")
                nil [56821 59394])
            ("_AnnotationBase" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [59554 59566])
                            ("self" variable nil (reparse-symbol indented_block_body) [59575 59599])
                            ("self" code nil (reparse-symbol indented_block_body) [59608 59649])
                            ("self" variable nil (reparse-symbol indented_block_body) [59659 59681]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59444 59448])
                            ("xy" variable nil (reparse-symbol function_parameters) [59467 59469])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [59488 59496])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [59522 59537]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [59431 59682])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59699 59703])
                            ("renderer" variable nil (reparse-symbol function_parameters) [59705 59713])
                            ("x" variable nil (reparse-symbol function_parameters) [59715 59716])
                            ("y" variable nil (reparse-symbol function_parameters) [59718 59719])
                            ("s" variable nil (reparse-symbol function_parameters) [59721 59722]))                          )
                        (reparse-symbol indented_block_body) [59687 60080])
                    ("_get_xy_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60107 60111])
                            ("renderer" variable nil (reparse-symbol function_parameters) [60113 60121])
                            ("s" variable nil (reparse-symbol function_parameters) [60123 60124]))                          )
                        (reparse-symbol indented_block_body) [60085 63081])
                    ("_get_ref_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63102 63106])
                            ("renderer" variable nil (reparse-symbol function_parameters) [63108 63116]))                          
                        :documentation "
        return x, y (in display coordinate) that is to be used for a reference
        of any offset coordinate
        ")
                        (reparse-symbol indented_block_body) [63086 63999])
                    ("set_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64453 64457])
                            ("b" variable nil (reparse-symbol function_parameters) [64459 64460]))                          
                        :documentation "
        set *annotation_clip* attribute.

          * True: the annotation will only be drawn when self.xy is inside
                  the axes.
          * False: the annotation will always be drawn regardless of its
                   position.
          * None: the self.xy will be checked only if *xycoords* is \"data\"
        ")
                        (reparse-symbol indented_block_body) [64429 64843])
                    ("get_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64872 64876]))                          
                        :documentation "
        Return *annotation_clip* attribute.
        See :meth:`set_annotation_clip` for the meaning of return values.
        ")
                        (reparse-symbol indented_block_body) [64848 65058])
                    ("_get_position_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65084 65088])
                            ("renderer" variable nil (reparse-symbol function_parameters) [65090 65098]))                          )
                        (reparse-symbol indented_block_body) [65063 65243])
                    ("_check_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65262 65266])
                            ("renderer" variable nil (reparse-symbol function_parameters) [65268 65276])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [65278 65286]))                          
                        :documentation "
        given the xy pixel coordinate, check if the annotation need to
        be drawn.
        ")
                        (reparse-symbol indented_block_body) [65248 65656])
                    ("draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65675 65679])
                            ("state" variable nil (reparse-symbol function_parameters) [65681 65686])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [65693 65701]))                          
                        :documentation "
        Set the draggable state -- if state is

          * None : toggle the current state

          * True : turn draggable on

          * False : turn draggable off

        If draggable is on, you can drag the annotation on the canvas with
        the mouse.  The DraggableAnnotation helper instance is returned if
        draggable is on.
        ")
                        (reparse-symbol indented_block_body) [65661 66595]))                  
                :type "class")
                nil [59396 66595])
            ("Annotation" type
               (:superclasses ("Text" "_AnnotationBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66654 66658]))                          )
                        (reparse-symbol indented_block_body) [66642 66826])
                    ("__init__" function
                       (:suite 
                          ( ("'''
        Annotate the point ``xy`` with text ``s``.

        Additional kwargs are passed to `~matplotlib.text.Text`.

        Parameters
        ----------

        s : str
            The text of the annotation

        xy : iterable
            Length 2 sequence specifying the *(x,y)* point to annotate

        xytext : iterable, optional
            Length 2 sequence specifying the *(x,y)* to place the text
            at.  If None, defaults to ``xy``.

        xycoords : str, Artist, Transform, callable or tuple, optional

            The coordinate system that ``xy`` is given in.

            For a `str` the allowed values are:

            =================   ===============================================
            Property            Description
            =================   ===============================================
            'figure points'     points from the lower left of the figure
            'figure pixels'     pixels from the lower left of the figure
            'figure fraction'   fraction of figure from lower left
            'axes points'       points from lower left corner of axes
            'axes pixels'       pixels from lower left corner of axes
            'axes fraction'     fraction of axes from lower left
            'data'              use the coordinate system of the object being
                                annotated (default)
            'polar'             *(theta,r)* if not native 'data' coordinates
            =================   ===============================================

            If a `~matplotlib.artist.Artist` object is passed in the units are
            fraction if it's bounding box.

            If a `~matplotlib.transforms.Transform` object is passed
            in use that to transform ``xy`` to screen coordinates

            If a callable it must take a
            `~matplotlib.backend_bases.RendererBase` object as input
            and return a `~matplotlib.transforms.Transform` or
            `~matplotlib.transforms.Bbox` object

            If a `tuple` must be length 2 tuple of str, `Artist`,
            `Transform` or callable objects.  The first transform is
            used for the *x* coordinate and the second for *y*.

            See :ref:`plotting-guide-annotation` for more details.

            Defaults to ``'data'``

        textcoords : str, `Artist`, `Transform`, callable or tuple, optional
            The coordinate system that ``xytext`` is given, which
            may be different than the coordinate system used for
            ``xy``.

            All ``xycoords`` values are valid as well as the following
            strings:

            =================   =========================================
            Property            Description
            =================   =========================================
            'offset points'     offset (in points) from the *xy* value
            'offset pixels'     offset (in pixels) from the *xy* value
            =================   =========================================

            defaults to the input of ``xycoords``

        arrowprops : dict, optional
            If not None, properties used to draw a
            `~matplotlib.patches.FancyArrowPatch` arrow between ``xy`` and
            ``xytext``.

            If `arrowprops` does not contain the key ``'arrowstyle'`` the
            allowed keys are:

            ==========   ======================================================
            Key          Description
            ==========   ======================================================
            width        the width of the arrow in points
            headwidth    the width of the base of the arrow head in points
            headlength   the length of the arrow head in points
            shrink       fraction of total length to 'shrink' from both ends
            ?            any key to :class:`matplotlib.patches.FancyArrowPatch`
            ==========   ======================================================

            If the `arrowprops` contains the key ``'arrowstyle'`` the
            above keys are forbidden.  The allowed values of
            ``'arrowstyle'`` are:

            ============   =============================================
            Name           Attrs
            ============   =============================================
            ``'-'``        None
            ``'->'``       head_length=0.4,head_width=0.2
            ``'-['``       widthB=1.0,lengthB=0.2,angleB=None
            ``'|-|'``      widthA=1.0,widthB=1.0
            ``'-|>'``      head_length=0.4,head_width=0.2
            ``'<-'``       head_length=0.4,head_width=0.2
            ``'<->'``      head_length=0.4,head_width=0.2
            ``'<|-'``      head_length=0.4,head_width=0.2
            ``'<|-|>'``    head_length=0.4,head_width=0.2
            ``'fancy'``    head_length=0.4,head_width=0.4,tail_width=0.4
            ``'simple'``   head_length=0.5,head_width=0.5,tail_width=0.2
            ``'wedge'``    tail_width=0.3,shrink_factor=0.5
            ============   =============================================

            Valid keys for `~matplotlib.patches.FancyArrowPatch` are:

            ===============  ==================================================
            Key              Description
            ===============  ==================================================
            arrowstyle       the arrow style
            connectionstyle  the connection style
            relpos           default is (0.5, 0.5)
            patchA           default is bounding box of the text
            patchB           default is None
            shrinkA          default is 2 points
            shrinkB          default is 2 points
            mutation_scale   default is text size (in points)
            mutation_aspect  default is 1.
            ?                any key for :class:`matplotlib.patches.PathPatch`
            ===============  ==================================================

            Defaults to None

        annotation_clip : bool, optional
            Controls the visibility of the annotation when it goes
            outside the axes area.

            If `True`, the annotation will only be drawn when the
            ``xy`` is inside the axes. If `False`, the annotation will
            always be drawn regardless of its position.

            The default is `None`, which behave as `True` only if
            *xycoords* is \"data\".

        Returns
        -------
        Annotation

        '''" code nil (reparse-symbol indented_block_body) [67094 73681])
                            ("_AnnotationBase" code nil (reparse-symbol indented_block_body) [73691 73876])
                            ("if" code nil (reparse-symbol indented_block_body) [73923 74221])
                            ("if" code nil (reparse-symbol indented_block_body) [74279 74341])
                            ("self" variable nil (reparse-symbol indented_block_body) [74349 74378])
                            ("if" code nil (reparse-symbol indented_block_body) [74422 74470])
                            ("x, y" code nil (reparse-symbol indented_block_body) [74478 74491])
                            ("Text" code nil (reparse-symbol indented_block_body) [74501 74539])
                            ("self" variable nil (reparse-symbol indented_block_body) [74549 74577])
                            ("self" variable nil (reparse-symbol indented_block_body) [74587 74604])
                            ("if" code nil (reparse-symbol indented_block_body) [74614 75383]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66874 66878])
                            ("s" variable nil (reparse-symbol function_parameters) [66880 66881])
                            ("xy" variable nil (reparse-symbol function_parameters) [66883 66885])
                            ("xytext" variable nil (reparse-symbol function_parameters) [66904 66910])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [66934 66942])
                            ("textcoords" variable nil (reparse-symbol function_parameters) [66968 66978])
                            ("arrowprops" variable nil (reparse-symbol function_parameters) [67002 67012])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [67036 67051])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [67075 67083]))                          
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [66831 75383])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75401 75405])
                            ("event" variable nil (reparse-symbol function_parameters) [75407 75412]))                          )
                        (reparse-symbol indented_block_body) [75388 75776])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75805 75809]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [75781 75847])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75880 75884])
                            ("xytext" variable nil (reparse-symbol function_parameters) [75886 75892]))                          
                        :decorators 
                          ( ("xyann.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [75852 75929])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75962 75966]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [75934 76001])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76042 76046])
                            ("coords" variable nil (reparse-symbol function_parameters) [76048 76054]))                          
                        :decorators 
                          ( ("anncoords.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [76006 76091])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76111 76115])
                            ("fig" variable nil (reparse-symbol function_parameters) [76117 76120]))                          )
                        (reparse-symbol indented_block_body) [76096 76321])
                    ("update_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76347 76351])
                            ("renderer" variable nil (reparse-symbol function_parameters) [76353 76361]))                          
                        :documentation "\"Update the pixel positions of the annotated point and the
        text.
        ")
                        (reparse-symbol indented_block_body) [76326 76568])
                    ("_update_position_xytext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76601 76605])
                            ("renderer" variable nil (reparse-symbol function_parameters) [76607 76615])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [76617 76625]))                          
                        :documentation "Update the pixel positions of the annotation text and the arrow
        patch.
        ")
                        (reparse-symbol indented_block_body) [76573 80706])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80745 80749])
                            ("renderer" variable nil (reparse-symbol function_parameters) [80751 80759]))                          
                        :documentation "
        Draw the :class:`Annotation` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [80711 81627])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81654 81658])
                            ("renderer" variable nil (reparse-symbol function_parameters) [81660 81668]))                          )
                        (reparse-symbol indented_block_body) [81632 82786]))                  
                :type "class")
                nil [66597 82786])
            ("docstring" code nil nil [82788 82852]))          
      :file "text.py"
      :pointmax 82853
      :fsize 82852
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((NAME 27659 . 27664) (IF 27675 . 27677) (ELSE 27693 . 27697)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [49 134])
            ("six" include nil nil [136 146])
            ("six.moves" include nil nil [147 177])
            ("warnings" include nil nil [178 193])
            ("math" include nil nil [195 206])
            ("matplotlib" include nil nil [208 232])
            ("numpy" include nil nil [233 251])
            ("matplotlib.cbook" include nil nil [252 284])
            ("matplotlib.artist" include nil nil [285 319])
            ("matplotlib.artist" include nil nil [320 369])
            ("matplotlib.colors" include nil nil [370 404])
            ("matplotlib" include nil nil [405 437])
            ("matplotlib.transforms" include nil nil [438 480])
            ("matplotlib.path" include nil nil [481 513])
            ("matplotlib.lines" include nil nil [514 547])
            ("matplotlib.bezier" include nil nil [549 620])
            ("matplotlib.bezier" include nil nil [621 697])
            ("matplotlib.bezier" include nil nil [698 747])
            ("matplotlib.bezier" include nil nil [748 807])
            ("matplotlib.bezier" include nil nil [808 874])
            ("docstring" code nil nil [1070 2292])
            ("_patch_alias_map" variable nil nil [2294 2466])
            ("Patch" type
               (:documentation "
    A patch is a 2D artist with a face color and an edge color.

    If any of *edgecolor*, *facecolor*, *linewidth*, or *antialiased*
    are *None*, they default to their rc params setting.
    "
                :superclasses ("artist.Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [2709 2719])
                    ("validCap" variable nil (reparse-symbol indented_block_body) [2724 2766])
                    ("validJoin" variable nil (reparse-symbol indented_block_body) [2771 2810])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [2902 2923])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2941 2945]))                          )
                        (reparse-symbol indented_block_body) [2929 2998])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The following kwarg properties are supported

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [3376 3463])
                            ("artist" code nil (reparse-symbol indented_block_body) [3472 3500])
                            ("if" code nil (reparse-symbol indented_block_body) [3510 3588])
                            ("if" code nil (reparse-symbol indented_block_body) [3596 3650])
                            ("if" code nil (reparse-symbol indented_block_body) [3658 3709])
                            ("if" code nil (reparse-symbol indented_block_body) [3717 3771])
                            ("if" code nil (reparse-symbol indented_block_body) [3779 3863])
                            ("self" variable nil (reparse-symbol indented_block_body) [3872 3935])
                            ("self" variable nil (reparse-symbol indented_block_body) [3944 3961])
                            ("if" code nil (reparse-symbol indented_block_body) [4003 4370])
                            ("self" variable nil (reparse-symbol indented_block_body) [4442 4464])
                            ("self" variable nil (reparse-symbol indented_block_body) [4473 4492])
                            ("self" code nil (reparse-symbol indented_block_body) [4502 4521])
                            ("self" code nil (reparse-symbol indented_block_body) [4530 4559])
                            ("self" code nil (reparse-symbol indented_block_body) [4568 4597])
                            ("self" code nil (reparse-symbol indented_block_body) [4606 4639])
                            ("self" code nil (reparse-symbol indented_block_body) [4648 4669])
                            ("self" code nil (reparse-symbol indented_block_body) [4678 4705])
                            ("self" code nil (reparse-symbol indented_block_body) [4714 4743])
                            ("self" variable nil (reparse-symbol indented_block_body) [4752 4809])
                            ("if" code nil (reparse-symbol indented_block_body) [4819 4867]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3016 3020])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [3039 3048])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [3072 3081])
                            ("color" variable nil (reparse-symbol function_parameters) [3105 3110])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [3134 3143])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [3167 3176])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [3200 3211])
                            ("hatch" variable nil (reparse-symbol function_parameters) [3235 3240])
                            ("fill" variable nil (reparse-symbol function_parameters) [3264 3268])
                            ("capstyle" variable nil (reparse-symbol function_parameters) [3292 3300])
                            ("joinstyle" variable nil (reparse-symbol function_parameters) [3324 3333])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3357 3365]))                          
                        :documentation "
        The following kwarg properties are supported

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3003 4867])
                    ("get_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4886 4890]))                          
                        :documentation "
        Return a copy of the vertices used in this patch

        If the patch contains Bezier curves, the curves will be
        interpolated by line segments.  To access the curves as
        curves, use :meth:`get_path`.
        ")
                        (reparse-symbol indented_block_body) [4872 5327])
                    ("_process_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5352 5356])
                            ("radius" variable nil (reparse-symbol function_parameters) [5358 5364]))                          )
                        (reparse-symbol indented_block_body) [5332 5677])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5695 5699])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [5701 5711])
                            ("radius" variable nil (reparse-symbol function_parameters) [5713 5719]))                          
                        :documentation "Test whether the mouse event occurred in the patch.

        Returns T/F, {}
        ")
                        (reparse-symbol indented_block_body) [5682 6113])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6137 6141])
                            ("point" variable nil (reparse-symbol function_parameters) [6143 6148])
                            ("radius" variable nil (reparse-symbol function_parameters) [6150 6156]))                          
                        :documentation "
        Returns *True* if the given point is inside the path
        (transformed with its transform attribute).
        ")
                        (reparse-symbol indented_block_body) [6118 6522])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6543 6547])
                            ("other" variable nil (reparse-symbol function_parameters) [6549 6554]))                          
                        :documentation "
        Updates this :class:`Patch` from the properties of *other*.
        ")
                        (reparse-symbol indented_block_body) [6527 7244])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7265 7269]))                          
                        :documentation "
        Return a :class:`~matplotlib.transforms.Bbox` object defining
        the axis-aligned extents of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [7249 7487])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7510 7514]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [7492 7719])
                    ("get_data_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7747 7751]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` instance which
        maps data coordinates to physical coordinates.
        ")
                        (reparse-symbol indented_block_body) [7724 7958])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7987 7991]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` instance which
        takes patch coordinates to data coordinates.

        For example, one may define a patch of a circle which represents a
        radius of 5 by providing coordinates for a unit circle, and a
        transform which scales the coordinates (the patch coordinate) by 5.
        ")
                        (reparse-symbol indented_block_body) [7963 8415])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8440 8444]))                          
                        :documentation "
        Returns True if the :class:`Patch` is to be drawn with antialiasing.
        ")
                        (reparse-symbol indented_block_body) [8420 8581])
                    ("get_aa" variable nil (reparse-symbol indented_block_body) [8585 8609])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8633 8637]))                          
                        :documentation "
        Return the edge color of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [8615 8748])
                    ("get_ec" variable nil (reparse-symbol indented_block_body) [8752 8774])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8798 8802]))                          
                        :documentation "
        Return the face color of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [8780 8913])
                    ("get_fc" variable nil (reparse-symbol indented_block_body) [8917 8939])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8963 8967]))                          
                        :documentation "
        Return the line width in points.
        ")
                        (reparse-symbol indented_block_body) [8945 9066])
                    ("get_lw" variable nil (reparse-symbol indented_block_body) [9070 9092])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9116 9120]))                          
                        :documentation "
        Return the linestyle.  Will be one of ['solid' | 'dashed' |
        'dashdot' | 'dotted']
        ")
                        (reparse-symbol indented_block_body) [9098 9276])
                    ("get_ls" variable nil (reparse-symbol indented_block_body) [9280 9302])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9328 9332])
                            ("aa" variable nil (reparse-symbol function_parameters) [9334 9336]))                          
                        :documentation "
        Set whether to use antialiased rendering

        ACCEPTS: [True | False]  or None for default
        ")
                        (reparse-symbol indented_block_body) [9308 9597])
                    ("set_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9613 9617])
                            ("aa" variable nil (reparse-symbol function_parameters) [9619 9621]))                          
                        :documentation "alias for set_antialiased")
                        (reparse-symbol indented_block_body) [9602 9704])
                    ("_set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9728 9732])
                            ("color" variable nil (reparse-symbol function_parameters) [9734 9739]))                          )
                        (reparse-symbol indented_block_body) [9709 10224])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10247 10251])
                            ("color" variable nil (reparse-symbol function_parameters) [10253 10258]))                          
                        :documentation "
        Set the patch edge color

        ACCEPTS: mpl color spec, None, 'none', or 'auto'
        ")
                        (reparse-symbol indented_block_body) [10229 10452])
                    ("set_ec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10468 10472])
                            ("color" variable nil (reparse-symbol function_parameters) [10474 10479]))                          
                        :documentation "alias for set_edgecolor")
                        (reparse-symbol indented_block_body) [10457 10561])
                    ("_set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10585 10589])
                            ("color" variable nil (reparse-symbol function_parameters) [10591 10596]))                          )
                        (reparse-symbol indented_block_body) [10566 10807])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10830 10834])
                            ("color" variable nil (reparse-symbol function_parameters) [10836 10841]))                          
                        :documentation "
        Set the patch face color

        ACCEPTS: mpl color spec, or None for default, or 'none' for no color
        ")
                        (reparse-symbol indented_block_body) [10812 11055])
                    ("set_fc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11071 11075])
                            ("color" variable nil (reparse-symbol function_parameters) [11077 11082]))                          
                        :documentation "alias for set_facecolor")
                        (reparse-symbol indented_block_body) [11060 11164])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11183 11187])
                            ("c" variable nil (reparse-symbol function_parameters) [11189 11190]))                          
                        :documentation "
        Set both the edgecolor and the facecolor.

        ACCEPTS: matplotlib color spec

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [11169 11511])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11530 11534])
                            ("alpha" variable nil (reparse-symbol function_parameters) [11536 11541]))                          
                        :documentation "
        Set the alpha tranparency of the patch.

        ACCEPTS: float or None
        ")
                        (reparse-symbol indented_block_body) [11516 11972])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12027 12031])
                            ("w" variable nil (reparse-symbol function_parameters) [12033 12034]))                          
                        :documentation "
        Set the patch linewidth in points

        ACCEPTS: float or None for default
        ")
                        (reparse-symbol indented_block_body) [12009 12547])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12563 12567])
                            ("lw" variable nil (reparse-symbol function_parameters) [12569 12571]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [12552 12650])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12673 12677])
                            ("ls" variable nil (reparse-symbol function_parameters) [12679 12681]))                          
                        :documentation "
        Set the patch linestyle

        ===========================   =================
        linestyle                     description
        ===========================   =================
        ``'-'`` or ``'solid'``        solid line
        ``'--'`` or  ``'dashed'``     dashed line
        ``'-.'`` or  ``'dashdot'``    dash-dotted line
        ``':'`` or ``'dotted'``       dotted line
        ===========================   =================

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq),

        where ``onoffseq`` is an even length tuple of on and off ink
        in points.

        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
                   (offset, on-off-dash-seq) |
                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
                   ``' '`` | ``''``]

        Parameters
        ----------
        ls : { '-',  '--', '-.', ':'} and more see description
            The line style.
        ")
                        (reparse-symbol indented_block_body) [12655 14076])
                    ("set_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14092 14096])
                            ("ls" variable nil (reparse-symbol function_parameters) [14098 14100]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [14081 14179])
                    ("set_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14197 14201])
                            ("b" variable nil (reparse-symbol function_parameters) [14203 14204]))                          
                        :documentation "
        Set whether to fill the patch

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [14184 14465])
                    ("get_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14483 14487]))                          )
                        (reparse-symbol indented_block_body) [14470 14553])
                    ("fill" variable nil (reparse-symbol indented_block_body) [14700 14735])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14758 14762])
                            ("s" variable nil (reparse-symbol function_parameters) [14764 14765]))                          
                        :documentation "
        Set the patch capstyle

        ACCEPTS: ['butt' | 'round' | 'projecting']
        ")
                        (reparse-symbol indented_block_body) [14741 15127])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15149 15153]))                          )
                        (reparse-symbol indented_block_body) [15132 15224])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15247 15251])
                            ("s" variable nil (reparse-symbol function_parameters) [15253 15254]))                          
                        :documentation "
        Set the patch joinstyle

        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [15229 15618])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15641 15645]))                          )
                        (reparse-symbol indented_block_body) [15623 15718])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15737 15741])
                            ("hatch" variable nil (reparse-symbol function_parameters) [15743 15748]))                          
                        :documentation "
        Set the hatching pattern

        *hatch* can be one of::

          /   - diagonal hatching
          \\   - back diagonal
          |   - vertical
          -   - horizontal
          +   - crossed
          x   - crossed diagonal
          o   - small circle
          O   - large circle
          .   - dots
          *   - stars

        Letters can be combined, in which case all the specified
        hatchings are done.  If same letter repeats, it increases the
        density of hatching of that pattern.

        Hatching is supported in the PostScript, PDF, SVG and Agg
        backends only.

        ACCEPTS: ['/' | '\\\\\\\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']
        ")
                        (reparse-symbol indented_block_body) [15723 16522])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16541 16545]))                          )
                        (reparse-symbol indented_block_body) [16527 16621])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16660 16664])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16666 16674]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16626 18462])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18480 18484]))                          
                        :documentation "
        Return the path of this patch
        ")
                        (reparse-symbol indented_block_body) [18467 18608])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18635 18639])
                            ("renderer" variable nil (reparse-symbol function_parameters) [18641 18649]))                          )
                        (reparse-symbol indented_block_body) [18613 18722]))                  
                :type "class")
                nil [2469 18722])
            ("patchdoc" variable nil nil [18724 18754])
            ("for" code nil nil [18755 18987])
            ("docstring" code nil nil [19064 19104])
            ("Shadow" type
               (:superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19144 19148]))                          )
                        (reparse-symbol indented_block_body) [19132 19199])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a shadow of the given *patch* offset by *ox*, *oy*.
        *props*, if not *None*, is a patch property update dictionary.
        If *None*, the shadow will have have the same color as the face,
        but darkened.

        kwargs are
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [19299 19585])
                            ("Patch" code nil (reparse-symbol indented_block_body) [19594 19614])
                            ("self" variable nil (reparse-symbol indented_block_body) [19623 19641])
                            ("self" variable nil (reparse-symbol indented_block_body) [19650 19668])
                            ("self, self" code nil (reparse-symbol indented_block_body) [19677 19704])
                            ("self" variable nil (reparse-symbol indented_block_body) [19713 19759])
                            ("self" code nil (reparse-symbol indented_block_body) [19768 19782]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19247 19251])
                            ("patch" variable nil (reparse-symbol function_parameters) [19253 19258])
                            ("ox" variable nil (reparse-symbol function_parameters) [19260 19262])
                            ("oy" variable nil (reparse-symbol function_parameters) [19264 19266])
                            ("props" variable nil (reparse-symbol function_parameters) [19268 19273])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19280 19288]))                          
                        :documentation "
        Create a shadow of the given *patch* offset by *ox*, *oy*.
        *props*, if not *None*, is a patch property update dictionary.
        If *None*, the shadow will have have the same color as the face,
        but darkened.

        kwargs are
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19204 19783])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19800 19804]))                          )
                        (reparse-symbol indented_block_body) [19788 20218])
                    ("_update_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20245 20249])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20251 20259]))                          )
                        (reparse-symbol indented_block_body) [20223 20417])
                    ("_get_ox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20434 20438]))                          )
                        (reparse-symbol indented_block_body) [20422 20465])
                    ("_set_ox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20482 20486])
                            ("ox" variable nil (reparse-symbol function_parameters) [20488 20490]))                          )
                        (reparse-symbol indented_block_body) [20470 20515])
                    ("_get_oy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20532 20536]))                          )
                        (reparse-symbol indented_block_body) [20520 20563])
                    ("_set_oy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20580 20584])
                            ("oy" variable nil (reparse-symbol function_parameters) [20586 20588]))                          )
                        (reparse-symbol indented_block_body) [20568 20613])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20631 20635]))                          )
                        (reparse-symbol indented_block_body) [20618 20675])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20704 20708]))                          )
                        (reparse-symbol indented_block_body) [20680 20784])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20798 20802])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20804 20812]))                          )
                        (reparse-symbol indented_block_body) [20789 20891]))                  
                :type "class")
                nil [19107 20891])
            ("Rectangle" type
               (:documentation "
    Draw a rectangle with lower left at *xy* = (*x*, *y*) with
    specified *width* and *height*.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21049 21053]))                          )
                        (reparse-symbol indented_block_body) [21037 21175])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"

        *angle*
          rotation in degrees (anti-clockwise)

        *fill* is a boolean indicating whether to fill the rectangle

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [21278 21472])
                            ("Patch" code nil (reparse-symbol indented_block_body) [21482 21512])
                            ("self" variable nil (reparse-symbol indented_block_body) [21522 21544])
                            ("self" variable nil (reparse-symbol indented_block_body) [21553 21575])
                            ("self" variable nil (reparse-symbol indented_block_body) [21584 21610])
                            ("self" variable nil (reparse-symbol indented_block_body) [21619 21647])
                            ("self" variable nil (reparse-symbol indented_block_body) [21656 21682])
                            ("self" variable nil (reparse-symbol indented_block_body) [21764 21817]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21223 21227])
                            ("xy" variable nil (reparse-symbol function_parameters) [21229 21231])
                            ("width" variable nil (reparse-symbol function_parameters) [21233 21238])
                            ("height" variable nil (reparse-symbol function_parameters) [21240 21246])
                            ("angle" variable nil (reparse-symbol function_parameters) [21248 21253])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21259 21267]))                          
                        :documentation "

        *angle*
          rotation in degrees (anti-clockwise)

        *fill* is a boolean indicating whether to fill the rectangle

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21180 21818])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21836 21840]))                          
                        :documentation "
        Return the vertices of the rectangle
        ")
                        (reparse-symbol indented_block_body) [21823 21949])
                    ("_update_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21982 21986]))                          
                        :documentation "NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 maxes it very important to call the accessor method and
                 not directly access the transformation member variable.
        ")
                        (reparse-symbol indented_block_body) [21954 22738])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22767 22771]))                          )
                        (reparse-symbol indented_block_body) [22743 22849])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22864 22868]))                          )
                        (reparse-symbol indented_block_body) [22854 22943])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22958 22962]))                          )
                        (reparse-symbol indented_block_body) [22948 23039])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23055 23059]))                          )
                        (reparse-symbol indented_block_body) [23044 23155])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23174 23178]))                          )
                        (reparse-symbol indented_block_body) [23160 23253])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23273 23277]))                          )
                        (reparse-symbol indented_block_body) [23258 23353])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23368 23372])
                            ("x" variable nil (reparse-symbol function_parameters) [23374 23375]))                          
                        :documentation "
        Set the left coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [23358 23516])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23531 23535])
                            ("y" variable nil (reparse-symbol function_parameters) [23537 23538]))                          
                        :documentation "
        Set the bottom coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [23521 23681])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23697 23701])
                            ("xy" variable nil (reparse-symbol function_parameters) [23703 23705]))                          
                        :documentation "
        Set the left and bottom coords of the rectangle

        ACCEPTS: 2-item sequence
        ")
                        (reparse-symbol indented_block_body) [23686 23878])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23897 23901])
                            ("w" variable nil (reparse-symbol function_parameters) [23903 23904]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [23883 24037])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24057 24061])
                            ("h" variable nil (reparse-symbol function_parameters) [24063 24064]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [24042 24198])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24218 24222])
                            ("args" variable nil (reparse-symbol function_parameters) [24224 24229]))                          
                        :documentation "
        Set the bounds of the rectangle: l,b,w,h

        ACCEPTS: (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [24203 24572])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24590 24594]))                          )
                        (reparse-symbol indented_block_body) [24577 24728])
                    ("xy" variable nil (reparse-symbol indented_block_body) [24733 24762]))                  
                :type "class")
                nil [20893 24763])
            ("RegularPolygon" type
               (:documentation "
    A regular polygon patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24855 24859]))                          )
                        (reparse-symbol indented_block_body) [24843 24941])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments:

        *xy*
          A length 2 tuple (*x*, *y*) of the center.

        *numVertices*
          the number of vertices.

        *radius*
          The distance from the center to each of the vertices.

        *orientation*
          rotates the polygon (in radians).

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [25073 25437])
                            ("self" variable nil (reparse-symbol indented_block_body) [25446 25459])
                            ("self" variable nil (reparse-symbol indented_block_body) [25468 25499])
                            ("self" variable nil (reparse-symbol indented_block_body) [25508 25539])
                            ("self" variable nil (reparse-symbol indented_block_body) [25548 25569])
                            ("self" variable nil (reparse-symbol indented_block_body) [25578 25629])
                            ("self" variable nil (reparse-symbol indented_block_body) [25638 25682])
                            ("self" code nil (reparse-symbol indented_block_body) [25691 25715])
                            ("Patch" code nil (reparse-symbol indented_block_body) [25725 25755]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24989 24993])
                            ("xy" variable nil (reparse-symbol function_parameters) [24995 24997])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [24999 25010])
                            ("radius" variable nil (reparse-symbol function_parameters) [25012 25018])
                            ("orientation" variable nil (reparse-symbol function_parameters) [25022 25033])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25054 25062]))                          
                        :documentation "
        Constructor arguments:

        *xy*
          A length 2 tuple (*x*, *y*) of the center.

        *numVertices*
          the number of vertices.

        *radius*
          The distance from the center to each of the vertices.

        *orientation*
          rotates the polygon (in radians).

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24946 25756])
                    ("_update_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25783 25787]))                          )
                        (reparse-symbol indented_block_body) [25761 25936])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25953 25957]))                          )
                        (reparse-symbol indented_block_body) [25941 25984])
                    ("_set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26001 26005])
                            ("xy" variable nil (reparse-symbol function_parameters) [26007 26009]))                          )
                        (reparse-symbol indented_block_body) [25989 26067])
                    ("xy" variable nil (reparse-symbol indented_block_body) [26071 26102])
                    ("_get_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26129 26133]))                          )
                        (reparse-symbol indented_block_body) [26108 26169])
                    ("_set_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26195 26199])
                            ("orientation" variable nil (reparse-symbol function_parameters) [26201 26212]))                          )
                        (reparse-symbol indented_block_body) [26174 26288])
                    ("orientation" variable nil (reparse-symbol indented_block_body) [26292 26350])
                    ("_get_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26372 26376]))                          )
                        (reparse-symbol indented_block_body) [26356 26407])
                    ("_set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26428 26432])
                            ("radius" variable nil (reparse-symbol function_parameters) [26434 26440]))                          )
                        (reparse-symbol indented_block_body) [26412 26506])
                    ("radius" variable nil (reparse-symbol indented_block_body) [26510 26553])
                    ("_get_numvertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26580 26584]))                          )
                        (reparse-symbol indented_block_body) [26559 26620])
                    ("_set_numvertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26646 26650])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [26652 26663]))                          )
                        (reparse-symbol indented_block_body) [26625 26706])
                    ("numvertices" variable nil (reparse-symbol indented_block_body) [26711 26769])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26788 26792]))                          )
                        (reparse-symbol indented_block_body) [26775 26821])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26850 26854]))                          )
                        (reparse-symbol indented_block_body) [26826 26926]))                  
                :type "class")
                nil [24765 26926])
            ("PathPatch" type
               (:documentation "
    A general polycurve path patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [27008 27028])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27046 27050]))                          )
                        (reparse-symbol indented_block_body) [27034 27121])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *path* is a :class:`matplotlib.path.Path` object.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        \"\"\"" code nil (reparse-symbol indented_block_body) [27200 27407])
                            ("Patch" code nil (reparse-symbol indented_block_body) [27416 27446])
                            ("self" variable nil (reparse-symbol indented_block_body) [27455 27472]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27169 27173])
                            ("path" variable nil (reparse-symbol function_parameters) [27175 27179])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27181 27189]))                          
                        :documentation "
        *path* is a :class:`matplotlib.path.Path` object.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27126 27473])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27491 27495]))                          )
                        (reparse-symbol indented_block_body) [27478 27524]))                  
                :type "class")
                nil [26928 27524])
            ("Polygon" type
               (:documentation "
    A general polygon patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27609 27613]))                          )
                        (reparse-symbol indented_block_body) [27597 27684])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        \"\"\"" code nil (reparse-symbol indented_block_body) [27774 28084])
                            ("Patch" code nil (reparse-symbol indented_block_body) [28093 28123])
                            ("self" variable nil (reparse-symbol indented_block_body) [28132 28153])
                            ("self" code nil (reparse-symbol indented_block_body) [28162 28177]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27732 27736])
                            ("xy" variable nil (reparse-symbol function_parameters) [27738 27740])
                            ("closed" variable nil (reparse-symbol function_parameters) [27742 27748])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27755 27763]))                          
                        :documentation "
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27689 28178])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28196 28200]))                          
                        :documentation "
        Get the path of the polygon

        Returns
        -------
        path : Path
           The :class:`~matplotlib.path.Path` object for
           the polygon
        ")
                        (reparse-symbol indented_block_body) [28183 28422])
                    ("get_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28442 28446]))                          
                        :documentation "
        Returns if the polygon is closed

        Returns
        -------
        closed : bool
            If the path is closed
        ")
                        (reparse-symbol indented_block_body) [28427 28631])
                    ("set_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28651 28655])
                            ("closed" variable nil (reparse-symbol function_parameters) [28657 28663]))                          
                        :documentation "
        Set if the polygon is closed

        Parameters
        ----------
        closed : bool
           True if the polygon is closed
        ")
                        (reparse-symbol indented_block_body) [28636 28986])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29002 29006]))                          
                        :documentation "
        Get the vertices of the path

        Returns
        -------
        vertices : numpy array
            The coordinates of the vertices as a Nx2
            ndarray.
        ")
                        (reparse-symbol indented_block_body) [28991 29243])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29259 29263])
                            ("xy" variable nil (reparse-symbol function_parameters) [29265 29267]))                          
                        :documentation "
        Set the vertices of the polygon

        Parameters
        ----------
        xy : numpy array or iterable of pairs
            The coordinates of the vertices as a Nx2
            ndarray or iterable of pairs.
        ")
                        (reparse-symbol indented_block_body) [29248 29846])
                    ("_get_xy" variable nil (reparse-symbol indented_block_body) [29851 29867])
                    ("_set_xy" variable nil (reparse-symbol indented_block_body) [29872 29888])
                    ("xy" variable nil (reparse-symbol indented_block_body) [29893 30236]))                  
                :type "class")
                nil [27526 30237])
            ("Wedge" type
               (:documentation "
    Wedge shaped patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30315 30319]))                          )
                        (reparse-symbol indented_block_body) [30303 30381])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draw a wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid kwargs are:

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [30493 30795])
                            ("Patch" code nil (reparse-symbol indented_block_body) [30804 30834])
                            ("self" variable nil (reparse-symbol indented_block_body) [30843 30863])
                            ("self, self" code nil (reparse-symbol indented_block_body) [30872 30901])
                            ("self, self" code nil (reparse-symbol indented_block_body) [30910 30951])
                            ("self" variable nil (reparse-symbol indented_block_body) [30960 31014])
                            ("self" code nil (reparse-symbol indented_block_body) [31023 31045]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30429 30433])
                            ("center" variable nil (reparse-symbol function_parameters) [30435 30441])
                            ("r" variable nil (reparse-symbol function_parameters) [30443 30444])
                            ("theta1" variable nil (reparse-symbol function_parameters) [30446 30452])
                            ("theta2" variable nil (reparse-symbol function_parameters) [30454 30460])
                            ("width" variable nil (reparse-symbol function_parameters) [30462 30467])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30474 30482]))                          
                        :documentation "
        Draw a wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid kwargs are:

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30386 31046])
                    ("_recompute_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31071 31075]))                          )
                        (reparse-symbol indented_block_body) [31051 32261])
                    ("set_center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32281 32285])
                            ("center" variable nil (reparse-symbol function_parameters) [32287 32293]))                          )
                        (reparse-symbol indented_block_body) [32266 32377])
                    ("set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32397 32401])
                            ("radius" variable nil (reparse-symbol function_parameters) [32403 32409]))                          )
                        (reparse-symbol indented_block_body) [32382 32488])
                    ("set_theta1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32508 32512])
                            ("theta1" variable nil (reparse-symbol function_parameters) [32514 32520]))                          )
                        (reparse-symbol indented_block_body) [32493 32604])
                    ("set_theta2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32624 32628])
                            ("theta2" variable nil (reparse-symbol function_parameters) [32630 32636]))                          )
                        (reparse-symbol indented_block_body) [32609 32720])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32739 32743])
                            ("width" variable nil (reparse-symbol function_parameters) [32745 32750]))                          )
                        (reparse-symbol indented_block_body) [32725 32832])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32850 32854]))                          )
                        (reparse-symbol indented_block_body) [32837 32949]))                  
                :type "class")
                nil [30239 32949])
            ("Arrow" type
               (:documentation "
    An arrow patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33077 33081]))                          )
                        (reparse-symbol indented_block_body) [33065 33109])
                    ("_path" variable nil (reparse-symbol indented_block_body) [33114 33312])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draws an arrow, starting at (*x*, *y*), direction and length
        given by (*dx*, *dy*) the width of the arrow is scaled by *width*.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [33411 33615])
                            ("Patch" code nil (reparse-symbol indented_block_body) [33624 33654])
                            ("L" variable nil (reparse-symbol indented_block_body) [33663 33683])
                            ("if" code nil (reparse-symbol indented_block_body) [33693 33849])
                            ("trans1" variable nil (reparse-symbol indented_block_body) [33858 33904])
                            ("trans2" variable nil (reparse-symbol indented_block_body) [33913 33980])
                            ("trans3" variable nil (reparse-symbol indented_block_body) [33989 34035])
                            ("trans" code nil (reparse-symbol indented_block_body) [34044 34076])
                            ("self" variable nil (reparse-symbol indented_block_body) [34085 34123]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33361 33365])
                            ("x" variable nil (reparse-symbol function_parameters) [33367 33368])
                            ("y" variable nil (reparse-symbol function_parameters) [33370 33371])
                            ("dx" variable nil (reparse-symbol function_parameters) [33373 33375])
                            ("dy" variable nil (reparse-symbol function_parameters) [33377 33379])
                            ("width" variable nil (reparse-symbol function_parameters) [33381 33386])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33392 33400]))                          
                        :documentation "
        Draws an arrow, starting at (*x*, *y*), direction and length
        given by (*dx*, *dy*) the width of the arrow is scaled by *width*.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33318 34124])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34142 34146]))                          )
                        (reparse-symbol indented_block_body) [34129 34175])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34204 34208]))                          )
                        (reparse-symbol indented_block_body) [34180 34248]))                  
                :type "class")
                nil [33005 34248])
            ("FancyArrow" type
               (:documentation "
    Like Arrow, but lets you set head width and head height independently.
    "
                :superclasses ("Polygon")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [34373 34393])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34411 34415]))                          )
                        (reparse-symbol indented_block_body) [34399 34448])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments
          *width*: float (default: 0.001)
            width of full arrow tail

          *length_includes_head*: [True | False] (default: False)
            True if head is to be counted in calculating the length.

          *head_width*: float or None (default: 3*width)
            total width of the full arrow head

          *head_length*: float or None (default: 1.5 * head_width)
            length of arrow head

          *shape*: ['full', 'left', 'right'] (default: 'full')
            draw the left-half, right-half, or full arrow

          *overhang*: float (default: 0)
            fraction that the arrow is swept back (0 overhang means
            triangular shape). Can be negative or greater than one.

          *head_starts_at_zero*: [True | False] (default: False)
            if True, the head starts being drawn at coordinate 0
            instead of ending at coordinate 0.

        Other valid kwargs (inherited from :class:`Patch`) are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [34698 35726])
                            ("if" code nil (reparse-symbol indented_block_body) [35735 35793])
                            ("if" code nil (reparse-symbol indented_block_body) [35801 35868])
                            ("distance" variable nil (reparse-symbol indented_block_body) [35877 35904])
                            ("if" code nil (reparse-symbol indented_block_body) [35914 36027])
                            ("if" code nil (reparse-symbol indented_block_body) [36035 37972])
                            ("Polygon" code nil (reparse-symbol indented_block_body) [37981 38051]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34496 34500])
                            ("x" variable nil (reparse-symbol function_parameters) [34502 34503])
                            ("y" variable nil (reparse-symbol function_parameters) [34505 34506])
                            ("dx" variable nil (reparse-symbol function_parameters) [34508 34510])
                            ("dy" variable nil (reparse-symbol function_parameters) [34512 34514])
                            ("width" variable nil (reparse-symbol function_parameters) [34516 34521])
                            ("length_includes_head" variable nil (reparse-symbol function_parameters) [34529 34549])
                            ("head_width" variable nil (reparse-symbol function_parameters) [34574 34584])
                            ("head_length" variable nil (reparse-symbol function_parameters) [34591 34602])
                            ("shape" variable nil (reparse-symbol function_parameters) [34609 34614])
                            ("overhang" variable nil (reparse-symbol function_parameters) [34623 34631])
                            ("head_starts_at_zero" variable nil (reparse-symbol function_parameters) [34652 34671])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34679 34687]))                          
                        :documentation "
        Constructor arguments
          *width*: float (default: 0.001)
            width of full arrow tail

          *length_includes_head*: [True | False] (default: False)
            True if head is to be counted in calculating the length.

          *head_width*: float or None (default: 3*width)
            total width of the full arrow head

          *head_length*: float or None (default: 1.5 * head_width)
            length of arrow head

          *shape*: ['full', 'left', 'right'] (default: 'full')
            draw the left-half, right-half, or full arrow

          *overhang*: float (default: 0)
            fraction that the arrow is swept back (0 overhang means
            triangular shape). Can be negative or greater than one.

          *head_starts_at_zero*: [True | False] (default: False)
            if True, the head starts being drawn at coordinate 0
            instead of ending at coordinate 0.

        Other valid kwargs (inherited from :class:`Patch`) are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34453 38052]))                  
                :type "class")
                nil [34250 38052])
            ("docstring" code nil nil [38054 38123])
            ("docstring" code nil nil [38125 38194])
            ("YAArrow" type
               (:documentation "
    Yet another arrow class.

    This is an arrow that is defined in display space and has a tip at
    *x1*, *y1* and a base at *x2*, *y2*.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38393 38397]))                          )
                        (reparse-symbol indented_block_body) [38381 38427])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments:

        *xytip*
          (*x*, *y*) location of arrow tip

        *xybase*
          (*x*, *y*) location the arrow base mid point

        *figure*
          The :class:`~matplotlib.figure.Figure` instance
          (fig.dpi)

        *width*
          The width of the arrow in points

        *frac*
          The fraction of the arrow length occupied by the head

        *headwidth*
          The width of the base of the arrow head in points

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [38573 39115])
                            ("self" variable nil (reparse-symbol indented_block_body) [39124 39142])
                            ("self" variable nil (reparse-symbol indented_block_body) [39151 39171])
                            ("self" variable nil (reparse-symbol indented_block_body) [39180 39198])
                            ("self" variable nil (reparse-symbol indented_block_body) [39207 39223])
                            ("self" variable nil (reparse-symbol indented_block_body) [39232 39258])
                            ("Patch" code nil (reparse-symbol indented_block_body) [39267 39297])
                            ("self" variable nil (reparse-symbol indented_block_body) [39398 39418]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38475 38479])
                            ("figure" variable nil (reparse-symbol function_parameters) [38481 38487])
                            ("xytip" variable nil (reparse-symbol function_parameters) [38489 38494])
                            ("xybase" variable nil (reparse-symbol function_parameters) [38496 38502])
                            ("width" variable nil (reparse-symbol function_parameters) [38521 38526])
                            ("frac" variable nil (reparse-symbol function_parameters) [38530 38534])
                            ("headwidth" variable nil (reparse-symbol function_parameters) [38540 38549])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38554 38562]))                          
                        :documentation "
        Constructor arguments:

        *xytip*
          (*x*, *y*) location of arrow tip

        *xybase*
          (*x*, *y*) location the arrow base mid point

        *figure*
          The :class:`~matplotlib.figure.Figure` instance
          (fig.dpi)

        *width*
          The width of the arrow in points

        *frac*
          The fraction of the arrow length occupied by the head

        *headwidth*
          The width of the base of the arrow head in points

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38432 39419])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39437 39441]))                          )
                        (reparse-symbol indented_block_body) [39424 40406])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40435 40439]))                          )
                        (reparse-symbol indented_block_body) [40411 40488])
                    ("getpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40507 40511])
                            ("x1" variable nil (reparse-symbol function_parameters) [40513 40515])
                            ("y1" variable nil (reparse-symbol function_parameters) [40517 40519])
                            ("x2" variable nil (reparse-symbol function_parameters) [40521 40523])
                            ("y2" variable nil (reparse-symbol function_parameters) [40525 40527])
                            ("k" variable nil (reparse-symbol function_parameters) [40529 40530]))                          
                        :documentation "
        For line segment defined by (*x1*, *y1*) and (*x2*, *y2*)
        return the points on the line that is perpendicular to the
        line and intersects (*x2*, *y2*) and the distance from (*x2*,
        *y2*) of the returned points is *k*.
        ")
                        (reparse-symbol indented_block_body) [40493 41390]))                  
                :type "class")
                nil [38197 41390])
            ("CirclePolygon" type
               (:documentation "
    A polygon-approximation of a circle patch.
    "
                :superclasses ("RegularPolygon")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41508 41512]))                          )
                        (reparse-symbol indented_block_body) [41496 41567])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a circle at *xy* = (*x*, *y*) with given *radius*.
        This circle is approximated by a regular polygon with
        *resolution* sides.  For a smoother circle drawn with splines,
        see :class:`~matplotlib.patches.Circle`.

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [41730 42039])
                            ("RegularPolygon" code nil (reparse-symbol indented_block_body) [42048 42254]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41615 41619])
                            ("xy" variable nil (reparse-symbol function_parameters) [41621 41623])
                            ("radius" variable nil (reparse-symbol function_parameters) [41625 41631])
                            ("resolution" variable nil (reparse-symbol function_parameters) [41652 41662])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41710 41719]))                          
                        :documentation "
        Create a circle at *xy* = (*x*, *y*) with given *radius*.
        This circle is approximated by a regular polygon with
        *resolution* sides.  For a smoother circle drawn with splines,
        see :class:`~matplotlib.patches.Circle`.

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41572 42255]))                  
                :type "class")
                nil [41392 42255])
            ("Ellipse" type
               (:documentation "
    A scale-free ellipse.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42337 42341]))                          )
                        (reparse-symbol indented_block_body) [42325 42483])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy*
          center of ellipse

        *width*
          total length (diameter) of horizontal axis

        *height*
          total length (diameter) of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [42586 42890])
                            ("Patch" code nil (reparse-symbol indented_block_body) [42899 42929])
                            ("self" variable nil (reparse-symbol indented_block_body) [42939 42955])
                            ("self, self" code nil (reparse-symbol indented_block_body) [42964 43003])
                            ("self" variable nil (reparse-symbol indented_block_body) [43012 43030])
                            ("self" variable nil (reparse-symbol indented_block_body) [43039 43070])
                            ("self" variable nil (reparse-symbol indented_block_body) [43152 43206]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42531 42535])
                            ("xy" variable nil (reparse-symbol function_parameters) [42537 42539])
                            ("width" variable nil (reparse-symbol function_parameters) [42541 42546])
                            ("height" variable nil (reparse-symbol function_parameters) [42548 42554])
                            ("angle" variable nil (reparse-symbol function_parameters) [42556 42561])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42567 42575]))                          
                        :documentation "
        *xy*
          center of ellipse

        *width*
          total length (diameter) of horizontal axis

        *height*
          total length (diameter) of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42488 43207])
                    ("_recompute_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43237 43241]))                          
                        :documentation "NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 maxes it very important to call the accessor method and
                 not directly access the transformation member variable.
        ")
                        (reparse-symbol indented_block_body) [43212 43926])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43944 43948]))                          
                        :documentation "
        Return the vertices of the rectangle
        ")
                        (reparse-symbol indented_block_body) [43931 44046])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44075 44079]))                          )
                        (reparse-symbol indented_block_body) [44051 44155]))                  
                :type "class")
                nil [42257 44155])
            ("Circle" type
               (:documentation "
    A circle patch.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44232 44236]))                          )
                        (reparse-symbol indented_block_body) [44220 44407])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create true circle at center *xy* = (*x*, *y*) with given
        *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`
        which is a polygonal approximation, this uses Bézier splines
        and is much closer to a scale-free circle.

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [44494 44810])
                            ("Ellipse" code nil (reparse-symbol indented_block_body) [44819 44879])
                            ("self" variable nil (reparse-symbol indented_block_body) [44888 44908]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44455 44459])
                            ("xy" variable nil (reparse-symbol function_parameters) [44461 44463])
                            ("radius" variable nil (reparse-symbol function_parameters) [44465 44471])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44475 44483]))                          
                        :documentation "
        Create true circle at center *xy* = (*x*, *y*) with given
        *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`
        which is a polygonal approximation, this uses Bézier splines
        and is much closer to a scale-free circle.

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44412 44909])
                    ("set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44929 44933])
                            ("radius" variable nil (reparse-symbol function_parameters) [44935 44941]))                          
                        :documentation "
        Set the radius of the circle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [44914 45101])
                    ("get_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45121 45125]))                          )
                        (reparse-symbol indented_block_body) [45106 45201])
                    ("radius" variable nil (reparse-symbol indented_block_body) [45206 45247]))                  
                :type "class")
                nil [44157 45248])
            ("Arc" type
               (:documentation "
    An elliptical arc.  Because it performs various optimizations, it
    can not be filled.

    The arc must be used in an :class:`~matplotlib.axes.Axes`
    instance---it can not be added directly to a
    :class:`~matplotlib.figure.Figure`---because it is optimized to
    only render the segments that are inside the axes bounding box
    with high resolution.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45668 45672]))                          )
                        (reparse-symbol indented_block_body) [45656 45806])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The following args are supported:

        *xy*
          center of ellipse

        *width*
          length of horizontal axis

        *height*
          length of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        *theta1*
          starting angle of the arc in degrees

        *theta2*
          ending angle of the arc in degrees

        If *theta1* and *theta2* are not provided, the arc will form a
        complete ellipse.

        Valid kwargs are:

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [45952 46492])
                            ("fill" variable nil (reparse-symbol indented_block_body) [46501 46540])
                            ("if" code nil (reparse-symbol indented_block_body) [46549 46620])
                            ("Ellipse" code nil (reparse-symbol indented_block_body) [46629 46687])
                            ("self" variable nil (reparse-symbol indented_block_body) [46697 46717])
                            ("self" variable nil (reparse-symbol indented_block_body) [46726 46746])
                            ("self" variable nil (reparse-symbol indented_block_body) [46756 46803]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45854 45858])
                            ("xy" variable nil (reparse-symbol function_parameters) [45860 45862])
                            ("width" variable nil (reparse-symbol function_parameters) [45864 45869])
                            ("height" variable nil (reparse-symbol function_parameters) [45871 45877])
                            ("angle" variable nil (reparse-symbol function_parameters) [45879 45884])
                            ("theta1" variable nil (reparse-symbol function_parameters) [45907 45913])
                            ("theta2" variable nil (reparse-symbol function_parameters) [45919 45925])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45933 45941]))                          
                        :documentation "
        The following args are supported:

        *xy*
          center of ellipse

        *width*
          length of horizontal axis

        *height*
          length of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        *theta1*
          starting angle of the arc in degrees

        *theta2*
          ending angle of the arc in degrees

        If *theta1* and *theta2* are not provided, the arc will form a
        complete ellipse.

        Valid kwargs are:

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45811 46804])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46843 46847])
                            ("renderer" variable nil (reparse-symbol function_parameters) [46849 46857]))                          
                        :documentation "
        Ellipses are normally drawn using an approximation that uses
        eight cubic bezier splines.  The error of this approximation
        is 1.89818e-6, according to this unverified source:

          Lancaster, Don.  Approximating a Circle or an Ellipse Using
          Four Bezier Cubic Splines.

          http://www.tinaja.com/glib/ellipse4.pdf

        There is a use case where very large ellipses must be drawn
        with very high accuracy, and it is too expensive to render the
        entire ellipse with enough segments (either splines or line
        segments).  Therefore, in the case where either radius of the
        ellipse is large enough that the error of the spline
        approximation will be visible (greater than one pixel offset
        from the ideal), a different technique is used.

        In that case, only the visible parts of the ellipse are drawn,
        with each visible arc using a fixed number of spline segments
        (8).  The algorithm proceeds as follows:

          1. The points where the ellipse intersects the axes bounding
             box are located.  (This is done be performing an inverse
             transformation on the axes bbox such that it is relative
             to the unit circle -- this makes the intersection
             calculation much easier than doing rotated ellipse
             intersection directly).

             This uses the \"line intersecting a circle\" algorithm
             from:

               Vince, John.  Geometry for Computer Graphics: Formulae,
               Examples & Proofs.  London: Springer-Verlag, 2005.

          2. The angles of each of the intersection points are
             calculated.

          3. Proceeding counterclockwise starting in the positive
             x-direction, each of the visible arc-segments between the
             pairs of vertices are drawn using the bezier arc
             approximation technique implemented in
             :meth:`matplotlib.path.Path.arc`.
        ")
                        (reparse-symbol indented_block_body) [46809 52789]))                  
                :type "class")
                nil [45250 52789])
            ("bbox_artist" function
               (:documentation "
    This is a debug function to draw a rectangle around the bounding
    box returned by
    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
    to test whether the artist is returning the correct bbox.

    *props* is a dict of rectangle props with the additional property
    'pad' that sets the padding around the bbox in points.
    "
                :arguments 
                  ( ("artist" variable nil (reparse-symbol function_parameters) [52807 52813])
                    ("renderer" variable nil (reparse-symbol function_parameters) [52815 52823])
                    ("props" variable nil (reparse-symbol function_parameters) [52825 52830])
                    ("fill" variable nil (reparse-symbol function_parameters) [52837 52841]))                  )
                nil [52791 53783])
            ("draw_bbox" function
               (:documentation "
    This is a debug function to draw a rectangle around the bounding
    box returned by
    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
    to test whether the artist is returning the correct bbox.
    "
                :arguments 
                  ( ("bbox" variable nil (reparse-symbol function_parameters) [53799 53803])
                    ("renderer" variable nil (reparse-symbol function_parameters) [53805 53813])
                    ("color" variable nil (reparse-symbol function_parameters) [53815 53820])
                    ("trans" variable nil (reparse-symbol function_parameters) [53826 53831]))                  )
                nil [53785 54378])
            ("_pprint_table" function
               (:documentation "
    Given the list of list of strings, return a string of REST table format.
    "
                :arguments 
                  ( ("_table" variable nil (reparse-symbol function_parameters) [54398 54404])
                    ("leadingspace" variable nil (reparse-symbol function_parameters) [54406 54418]))                  )
                nil [54380 55447])
            ("_pprint_styles" function
               (:documentation "
    A helper function for the _Style class.  Given the dictionary of
    (stylename : styleclass), return a formatted string listing all the
    styles. Used to update the documentation.
    "
                :arguments 
                  ( ("_styles" variable nil (reparse-symbol function_parameters) [55468 55475]))                  )
                nil [55449 56622])
            ("_simpleprint_styles" function
               (:documentation "
    A helper function for the _Style class.  Given the dictionary of
    (stylename : styleclass), return a string rep of the list of keys.
    Used to update the documentation.
    "
                :arguments 
                  ( ("_styles" variable nil (reparse-symbol function_parameters) [56648 56655]))                  )
                nil [56624 56980])
            ("_Style" type
               (:documentation "
    A base class for the Styles. It is meant to be a container class,
    where actual styles are declared as subclass of it, and it
    provides some helper functions.
    "
                :superclasses ("object")
                :members 
                  ( ("__new__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57205 57209])
                            ("stylename" variable nil (reparse-symbol function_parameters) [57211 57220])
                            ("kw" variable nil (reparse-symbol function_parameters) [57222 57226]))                          
                        :documentation "
        return the instance of the subclass with the given style name.
        ")
                        (reparse-symbol indented_block_body) [57193 57977])
                    ("get_styles" function
                       (:documentation "
        A class method which returns a dictionary of available styles.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [58014 58019]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [57982 58150])
                    ("pprint_styles" function
                       (:documentation "
        A class method which returns a string of the available styles.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [58190 58195]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58155 58342])
                    ("register" function
                       (:documentation "
        Register a new style.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [58377 58382])
                            ("name" variable nil (reparse-symbol function_parameters) [58384 58388])
                            ("style" variable nil (reparse-symbol function_parameters) [58390 58395]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [58347 58685]))                  
                :type "class")
                nil [56982 58685])
            ("BoxStyle" type
               (:documentation "
    :class:`BoxStyle` is a container class which defines several
    boxstyle classes, which are used for :class:`FancyBboxPatch`.

    A style object can be created as::

           BoxStyle.Round(pad=0.2)

    or::

           BoxStyle(\"Round\", pad=0.2)

    or::

           BoxStyle(\"Round, pad=0.2\")

    Following boxstyle classes are defined.

    %(AvailableBoxstyles)s

    An instance of any boxstyle class is an callable object,
    whose call signature is::

       __call__(self, x0, y0, width, height, mutation_size, aspect_ratio=1.)

    and returns a :class:`Path` instance. *x0*, *y0*, *width* and
    *height* specify the location and size of the box to be
    drawn. *mutation_scale* determines the overall size of the
    mutation (by which I mean the transformation of the rectangle to
    the fancy box).  *mutation_aspect* determines the aspect-ratio of
    the mutation.

    .. plot:: mpl_examples/pylab_examples/fancybox_demo2.py
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [59688 59704])
                    ("_Base" type
                       (:documentation "
        :class:`BBoxTransmuterBase` and its derivatives are used to make a
        fancy box around a given rectangle. The :meth:`__call__` method
        returns the :class:`~matplotlib.path.Path` of the fancy box. This
        class is not an artist and actual drawing of the fancy box is done
        by the :class:`FancyBboxPatch` class.
        "
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            initializtion.
            \"\"\"" code nil (reparse-symbol indented_block_body) [60313 60359])
                                    ("super" code nil (reparse-symbol indented_block_body) [60372 60410]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [60294 60298]))                                  
                                :documentation "
            initializtion.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [60281 60411])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [60434 60438])
                                    ("x0" variable nil (reparse-symbol function_parameters) [60440 60442])
                                    ("y0" variable nil (reparse-symbol function_parameters) [60444 60446])
                                    ("width" variable nil (reparse-symbol function_parameters) [60448 60453])
                                    ("height" variable nil (reparse-symbol function_parameters) [60455 60461])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [60463 60476]))                                  
                                :documentation "
            The transmute method is a very core of the
            :class:`BboxTransmuter` class and must be overriden in the
            subclasses. It receives the location and size of the
            rectangle, and the mutation_size, with which the amount of
            padding and etc. will be scaled. It returns a
            :class:`~matplotlib.path.Path` instance.
            ")
                                (reparse-symbol indented_block_body) [60420 60947])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [60969 60973])
                                    ("x0" variable nil (reparse-symbol function_parameters) [60975 60977])
                                    ("y0" variable nil (reparse-symbol function_parameters) [60979 60981])
                                    ("width" variable nil (reparse-symbol function_parameters) [60983 60988])
                                    ("height" variable nil (reparse-symbol function_parameters) [60990 60996])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [60998 61011])
                                    ("aspect_ratio" variable nil (reparse-symbol function_parameters) [61034 61046]))                                  
                                :documentation "
            Given the location and size of the box, return the path of
            the box around it.

              - *x0*, *y0*, *width*, *height* : location and size of the box
              - *mutation_size* : a reference scale for the mutation.
              - *aspect_ratio* : aspect-ration for the mutation.
            ")
                                (reparse-symbol indented_block_body) [60956 62134])
                            ("__reduce__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [62158 62162]))                                  )
                                (reparse-symbol indented_block_body) [62143 62510]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [59710 62510])
                    ("Square" type
                       (:documentation "
        A simple square box.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
             *pad*
                amount of padding
            \"\"\"" code nil (reparse-symbol indented_block_body) [62639 62711])
                                    ("self" variable nil (reparse-symbol indented_block_body) [62725 62739])
                                    ("super" code nil (reparse-symbol indented_block_body) [62752 62791]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [62611 62615])
                                    ("pad" variable nil (reparse-symbol function_parameters) [62617 62620]))                                  
                                :documentation "
             *pad*
                amount of padding
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [62598 62792])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [62815 62819])
                                    ("x0" variable nil (reparse-symbol function_parameters) [62821 62823])
                                    ("y0" variable nil (reparse-symbol function_parameters) [62825 62827])
                                    ("width" variable nil (reparse-symbol function_parameters) [62829 62834])
                                    ("height" variable nil (reparse-symbol function_parameters) [62836 62842])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [62844 62857]))                                  )
                                (reparse-symbol indented_block_body) [62801 63330]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [62515 63330])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [63335 63365])
                    ("Circle" type
                       (:documentation "A simple circle box."
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            pad : float
                The amount of padding around the original box.
            \"\"\"" code nil (reparse-symbol indented_block_body) [63476 63628])
                                    ("self" variable nil (reparse-symbol indented_block_body) [63641 63655])
                                    ("super" code nil (reparse-symbol indented_block_body) [63668 63707]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [63448 63452])
                                    ("pad" variable nil (reparse-symbol function_parameters) [63454 63457]))                                  
                                :documentation "
            Parameters
            ----------
            pad : float
                The amount of padding around the original box.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [63435 63708])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [63731 63735])
                                    ("x0" variable nil (reparse-symbol function_parameters) [63737 63739])
                                    ("y0" variable nil (reparse-symbol function_parameters) [63741 63743])
                                    ("width" variable nil (reparse-symbol function_parameters) [63745 63750])
                                    ("height" variable nil (reparse-symbol function_parameters) [63752 63758])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [63760 63773]))                                  )
                                (reparse-symbol indented_block_body) [63717 64088]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [63371 64088])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [64093 64123])
                    ("LArrow" type
                       (:documentation "
        (left) Arrow Box
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [64248 64262])
                                    ("super" code nil (reparse-symbol indented_block_body) [64275 64314]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [64220 64224])
                                    ("pad" variable nil (reparse-symbol function_parameters) [64226 64229]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [64207 64315])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [64338 64342])
                                    ("x0" variable nil (reparse-symbol function_parameters) [64344 64346])
                                    ("y0" variable nil (reparse-symbol function_parameters) [64348 64350])
                                    ("width" variable nil (reparse-symbol function_parameters) [64352 64357])
                                    ("height" variable nil (reparse-symbol function_parameters) [64359 64365])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [64367 64380]))                                  )
                                (reparse-symbol indented_block_body) [64324 65291]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [64129 65291])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [65295 65325])
                    ("RArrow" type
                       (:documentation "
        (right) Arrow Box
        "
                        :superclasses ("LArrow")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [65453 65495]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65425 65429])
                                    ("pad" variable nil (reparse-symbol function_parameters) [65431 65434]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [65412 65496])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65519 65523])
                                    ("x0" variable nil (reparse-symbol function_parameters) [65525 65527])
                                    ("y0" variable nil (reparse-symbol function_parameters) [65529 65531])
                                    ("width" variable nil (reparse-symbol function_parameters) [65533 65538])
                                    ("height" variable nil (reparse-symbol function_parameters) [65540 65546])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [65548 65561]))                                  )
                                (reparse-symbol indented_block_body) [65505 65781]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [65331 65781])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [65786 65816])
                    ("DArrow" type
                       (:documentation "
        (Double) Arrow Box
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [66042 66056])
                                    ("super" code nil (reparse-symbol indented_block_body) [66069 66108]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [66014 66018])
                                    ("pad" variable nil (reparse-symbol function_parameters) [66020 66023]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [66001 66109])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [66132 66136])
                                    ("x0" variable nil (reparse-symbol function_parameters) [66138 66140])
                                    ("y0" variable nil (reparse-symbol function_parameters) [66142 66144])
                                    ("width" variable nil (reparse-symbol function_parameters) [66146 66151])
                                    ("height" variable nil (reparse-symbol function_parameters) [66153 66159])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [66161 66174]))                                  )
                                (reparse-symbol indented_block_body) [66118 67426]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [65822 67426])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [67431 67461])
                    ("Round" type
                       (:documentation "
        A box with round corners.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *rounding_size*
              rounding radius of corners. *pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [67615 67769])
                                    ("self" variable nil (reparse-symbol indented_block_body) [67782 67796])
                                    ("self" variable nil (reparse-symbol indented_block_body) [67809 67843])
                                    ("super" code nil (reparse-symbol indented_block_body) [67856 67894]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [67567 67571])
                                    ("pad" variable nil (reparse-symbol function_parameters) [67573 67576])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [67582 67595]))                                  
                                :documentation "
            *pad*
              amount of padding

            *rounding_size*
              rounding radius of corners. *pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [67554 67895])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [67918 67922])
                                    ("x0" variable nil (reparse-symbol function_parameters) [67924 67926])
                                    ("y0" variable nil (reparse-symbol function_parameters) [67928 67930])
                                    ("width" variable nil (reparse-symbol function_parameters) [67932 67937])
                                    ("height" variable nil (reparse-symbol function_parameters) [67939 67945])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [67947 67960]))                                  )
                                (reparse-symbol indented_block_body) [67904 69309]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [67467 69309])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [69314 69342])
                    ("Round4" type
                       (:documentation "
        Another box with round edges.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *rounding_size*
              rounding size of edges. *pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [69501 69651])
                                    ("self" variable nil (reparse-symbol indented_block_body) [69665 69679])
                                    ("self" variable nil (reparse-symbol indented_block_body) [69692 69726])
                                    ("super" code nil (reparse-symbol indented_block_body) [69739 69778]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [69453 69457])
                                    ("pad" variable nil (reparse-symbol function_parameters) [69459 69462])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [69468 69481]))                                  
                                :documentation "
            *pad*
              amount of padding

            *rounding_size*
              rounding size of edges. *pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [69440 69779])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [69802 69806])
                                    ("x0" variable nil (reparse-symbol function_parameters) [69808 69810])
                                    ("y0" variable nil (reparse-symbol function_parameters) [69812 69814])
                                    ("width" variable nil (reparse-symbol function_parameters) [69816 69821])
                                    ("height" variable nil (reparse-symbol function_parameters) [69823 69829])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [69831 69844]))                                  )
                                (reparse-symbol indented_block_body) [69788 71015]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [69348 71015])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [71020 71050])
                    ("Sawtooth" type
                       (:documentation "
        A sawtooth box.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [71194 71338])
                                    ("self" variable nil (reparse-symbol indented_block_body) [71351 71365])
                                    ("self" variable nil (reparse-symbol indented_block_body) [71378 71406])
                                    ("super" code nil (reparse-symbol indented_block_body) [71419 71460]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [71149 71153])
                                    ("pad" variable nil (reparse-symbol function_parameters) [71155 71158])
                                    ("tooth_size" variable nil (reparse-symbol function_parameters) [71164 71174]))                                  
                                :documentation "
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [71136 71461])
                            ("_get_sawtooth_vertices" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [71497 71501])
                                    ("x0" variable nil (reparse-symbol function_parameters) [71503 71505])
                                    ("y0" variable nil (reparse-symbol function_parameters) [71507 71509])
                                    ("width" variable nil (reparse-symbol function_parameters) [71511 71516])
                                    ("height" variable nil (reparse-symbol function_parameters) [71518 71524])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [71526 71539]))                                  )
                                (reparse-symbol indented_block_body) [71470 74641])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [74664 74668])
                                    ("x0" variable nil (reparse-symbol function_parameters) [74670 74672])
                                    ("y0" variable nil (reparse-symbol function_parameters) [74674 74676])
                                    ("width" variable nil (reparse-symbol function_parameters) [74678 74683])
                                    ("height" variable nil (reparse-symbol function_parameters) [74685 74691])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [74693 74706]))                                  )
                                (reparse-symbol indented_block_body) [74650 74933]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [71056 74933])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [74938 74972])
                    ("Roundtooth" type
                       (:documentation "A rounded tooth box."
                        :superclasses ("Sawtooth")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [75107 75251])
                                    ("super" code nil (reparse-symbol indented_block_body) [75264 75322]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [75062 75066])
                                    ("pad" variable nil (reparse-symbol function_parameters) [75068 75071])
                                    ("tooth_size" variable nil (reparse-symbol function_parameters) [75077 75087]))                                  
                                :documentation "
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [75049 75323])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [75346 75350])
                                    ("x0" variable nil (reparse-symbol function_parameters) [75352 75354])
                                    ("y0" variable nil (reparse-symbol function_parameters) [75356 75358])
                                    ("width" variable nil (reparse-symbol function_parameters) [75360 75365])
                                    ("height" variable nil (reparse-symbol function_parameters) [75367 75373])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [75375 75388]))                                  )
                                (reparse-symbol indented_block_body) [75332 76011]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [74978 76011])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [76016 76054])
                    ("if" code nil (reparse-symbol indented_block_body) [76060 76239]))                  
                :type "class")
                nil [58687 76239])
            ("docstring" code nil nil [76240 76387])
            ("FancyBboxPatch" type
               (:documentation "
    Draw a fancy box around a rectangle with lower left at *xy*=(*x*,
    *y*) with specified width and height.

    :class:`FancyBboxPatch` class is similar to :class:`Rectangle`
    class, but it draws a fancy box around the rectangle. The
    transformation of the rectangle box to the fancy box is delegated
    to the :class:`BoxTransmuterBase` and its derived classes.

    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [76816 76836])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76854 76858]))                          )
                        (reparse-symbol indented_block_body) [76842 77043])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy* = lower left corner

        *width*, *height*

        *boxstyle* determines what kind of fancy box will be drawn. It
        can be a string of the style name with a comma separated
        attribute, or an instance of :class:`BoxStyle`. Following box
        styles are available.

        %(AvailableBoxstyles)s

        *mutation_scale* : a value with which attributes of boxstyle
        (e.g., pad) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
        squeezed by this value before the mutation and the mutated
        box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [77301 78005])
                            ("Patch" code nil (reparse-symbol indented_block_body) [78015 78045])
                            ("self" variable nil (reparse-symbol indented_block_body) [78055 78070])
                            ("self" variable nil (reparse-symbol indented_block_body) [78079 78094])
                            ("self" variable nil (reparse-symbol indented_block_body) [78103 78122])
                            ("self" variable nil (reparse-symbol indented_block_body) [78131 78152])
                            ("if" code nil (reparse-symbol indented_block_body) [78162 78461])
                            ("self" variable nil (reparse-symbol indented_block_body) [78470 78507])
                            ("self" variable nil (reparse-symbol indented_block_body) [78516 78555])
                            ("self" variable nil (reparse-symbol indented_block_body) [78565 78582]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77091 77095])
                            ("xy" variable nil (reparse-symbol function_parameters) [77097 77099])
                            ("width" variable nil (reparse-symbol function_parameters) [77101 77106])
                            ("height" variable nil (reparse-symbol function_parameters) [77108 77114])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [77133 77141])
                            ("bbox_transmuter" variable nil (reparse-symbol function_parameters) [77168 77183])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [77207 77221])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [77243 77258])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [77282 77290]))                          
                        :documentation "
        *xy* = lower left corner

        *width*, *height*

        *boxstyle* determines what kind of fancy box will be drawn. It
        can be a string of the style name with a comma separated
        attribute, or an instance of :class:`BoxStyle`. Following box
        styles are available.

        %(AvailableBoxstyles)s

        *mutation_scale* : a value with which attributes of boxstyle
        (e.g., pad) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
        squeezed by this value before the mutation and the mutated
        box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [77048 78583])
                    ("set_boxstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78635 78639])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [78641 78649])
                            ("kw" variable nil (reparse-symbol function_parameters) [78656 78660]))                          
                        :documentation "
        Set the box style.

        *boxstyle* can be a string with boxstyle name with optional
        comma-separated attributes. Alternatively, the attrs can
        be provided as keywords::

            set_boxstyle(\"round,pad=0.2\")
            set_boxstyle(\"round\", pad=0.2)

        Old attrs simply are forgotten.

        Without argument (or with *boxstyle* = None), it returns
        available box styles.

        The following boxstyles are available:
        %(AvailableBoxstyles)s

        ACCEPTS: %(ListBoxstyles)s

        ")
                        (reparse-symbol indented_block_body) [78588 79572])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79600 79604])
                            ("scale" variable nil (reparse-symbol function_parameters) [79606 79611]))                          
                        :documentation "
        Set the mutation scale.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [79577 79757])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79785 79789]))                          
                        :documentation "
        Return the mutation scale.
        ")
                        (reparse-symbol indented_block_body) [79762 79887])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79916 79920])
                            ("aspect" variable nil (reparse-symbol function_parameters) [79922 79928]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [79892 80095])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80124 80128]))                          
                        :documentation "
        Return the aspect ratio of the bbox mutation.
        ")
                        (reparse-symbol indented_block_body) [80100 80246])
                    ("get_boxstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80268 80272]))                          )
                        (reparse-symbol indented_block_body) [80251 80349])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80367 80371]))                          
                        :documentation "
        Return the mutated path of the rectangle
        ")
                        (reparse-symbol indented_block_body) [80354 80713])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80792 80796]))                          )
                        (reparse-symbol indented_block_body) [80782 80871])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80886 80890]))                          )
                        (reparse-symbol indented_block_body) [80876 80967])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80986 80990]))                          )
                        (reparse-symbol indented_block_body) [80972 81065])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81085 81089]))                          )
                        (reparse-symbol indented_block_body) [81070 81165])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81180 81184])
                            ("x" variable nil (reparse-symbol function_parameters) [81186 81187]))                          
                        :documentation "
        Set the left coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [81170 81328])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81343 81347])
                            ("y" variable nil (reparse-symbol function_parameters) [81349 81350]))                          
                        :documentation "
        Set the bottom coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [81333 81493])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81512 81516])
                            ("w" variable nil (reparse-symbol function_parameters) [81518 81519]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [81498 81652])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81672 81676])
                            ("h" variable nil (reparse-symbol function_parameters) [81678 81679]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [81657 81813])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81833 81837])
                            ("args" variable nil (reparse-symbol function_parameters) [81839 81844]))                          
                        :documentation "
        Set the bounds of the rectangle: l,b,w,h

        ACCEPTS: (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [81818 82187])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82205 82209]))                          )
                        (reparse-symbol indented_block_body) [82192 82343]))                  
                :type "class")
                nil [76390 82343])
            ("ConnectionStyle" type
               (:documentation "
    :class:`ConnectionStyle` is a container class which defines
    several connectionstyle classes, which is used to create a path
    between two points. These are mainly used with
    :class:`FancyArrowPatch`.

    A connectionstyle object can be either created as::

           ConnectionStyle.Arc3(rad=0.2)

    or::

           ConnectionStyle(\"Arc3\", rad=0.2)

    or::

           ConnectionStyle(\"Arc3, rad=0.2\")

    The following classes are defined

    %(AvailableConnectorstyles)s


    An instance of any connection style class is an callable object,
    whose call signature is::

        __call__(self, posA, posB,
                 patchA=None, patchB=None,
                 shrinkA=2., shrinkB=2.)

    and it returns a :class:`Path` instance. *posA* and *posB* are
    tuples of x,y coordinates of the two points to be
    connected. *patchA* (or *patchB*) is given, the returned path is
    clipped so that it start (or end) from the boundary of the
    patch. The path is further shrunk by *shrinkA* (or *shrinkB*)
    which is given in points.

    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [83464 83480])
                    ("_Base" type
                       (:documentation "
        A base class for connectionstyle classes. The subclass needs
        to implement a *connect* method whose call signature is::

          connect(posA, posB)

        where posA and posB are tuples of x, y coordinates to be
        connected.  The method needs to return a path connecting two
        points. This base class defines a __call__ method, and a few
        helper methods.
        "
                        :superclasses ("object")
                        :members 
                          ( ("SimpleEvent" type
                               (:members 
                                  ( ("__init__" function
                                       (:suite 
                                          ( ("self, self" code nil (reparse-symbol indented_block_body) [84005 84024]))                                          
                                        :parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [83978 83982])
                                            ("xy" variable nil (reparse-symbol function_parameters) [83984 83986]))                                          
                                        :constructor-flag t)
                                        (reparse-symbol indented_block_body) [83965 84025]))                                  
                                :type "class")
                                (reparse-symbol indented_block_body) [83934 84025])
                            ("_clip" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [84044 84048])
                                    ("path" variable nil (reparse-symbol function_parameters) [84050 84054])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [84056 84062])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [84064 84070]))                                  
                                :documentation "
            Clip the path to the boundary of the patchA and patchB.
            The starting point of the path needed to be inside of the
            patchA and the end point inside the patch B. The *contains*
            methods of each patch object is utilized to test if the point
            is inside the path.
            ")
                                (reparse-symbol indented_block_body) [84034 85212])
                            ("_shrink" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [85233 85237])
                                    ("path" variable nil (reparse-symbol function_parameters) [85239 85243])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [85245 85252])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [85254 85261]))                                  
                                :documentation "
            Shrink the path by fixed size (in points) with shrinkA and shrinkB
            ")
                                (reparse-symbol indented_block_body) [85221 86001])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [86023 86027])
                                    ("posA" variable nil (reparse-symbol function_parameters) [86029 86033])
                                    ("posB" variable nil (reparse-symbol function_parameters) [86035 86039])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [86062 86069])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [86074 86081])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [86086 86092])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [86099 86105]))                                  
                                :documentation "
            Calls the *connect* method to create a path between *posA*
             and *posB*. The path is clipped and shrunken.
            ")
                                (reparse-symbol indented_block_body) [86010 86484])
                            ("__reduce__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [86508 86512]))                                  )
                                (reparse-symbol indented_block_body) [86493 86868]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [83486 86868])
                    ("Arc3" type
                       (:documentation "
        Creates a simple quadratic bezier curve between two
        points. The curve is created so that the middle contol points
        (C1) is located at the same distance from the start (C0) and
        end points(C2) and the distance of the C1 to the line
        connecting C0-C2 is *rad* times the distance of C0-C2.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *rad*
              curvature of the curve.
            \"\"\"" code nil (reparse-symbol indented_block_body) [87289 87364])
                                    ("self" variable nil (reparse-symbol indented_block_body) [87377 87391]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [87262 87266])
                                    ("rad" variable nil (reparse-symbol function_parameters) [87268 87271]))                                  
                                :documentation "
            *rad*
              curvature of the curve.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [87249 87392])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [87413 87417])
                                    ("posA" variable nil (reparse-symbol function_parameters) [87419 87423])
                                    ("posB" variable nil (reparse-symbol function_parameters) [87425 87429]))                                  )
                                (reparse-symbol indented_block_body) [87401 87898]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [86873 87898])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [87903 87929])
                    ("Angle3" type
                       (:documentation "
        Creates a simple quadratic bezier curve between two
        points. The middle control points is placed at the
        intersecting point of two lines which crosses the start (or
        end) point and has a angle of angleA (or angleB).
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            \"\"\"" code nil (reparse-symbol indented_block_body) [88287 88429])
                                    ("self" variable nil (reparse-symbol indented_block_body) [88443 88463])
                                    ("self" variable nil (reparse-symbol indented_block_body) [88476 88496]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [88247 88251])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [88253 88259])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [88264 88270]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [88234 88497])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [88518 88522])
                                    ("posA" variable nil (reparse-symbol function_parameters) [88524 88528])
                                    ("posB" variable nil (reparse-symbol function_parameters) [88530 88534]))                                  )
                                (reparse-symbol indented_block_body) [88506 89128]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [87935 89128])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [89133 89163])
                    ("Angle" type
                       (:documentation "
        Creates a picewise continuous quadratic bezier path between
        two points. The path has a one passing-through point placed at
        the intersecting point of two lines which crosses the start
        (or end) point and has a angle of angleA (or angleB).  The
        connecting edges are rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            \"\"\"" code nil (reparse-symbol indented_block_body) [89606 89809])
                                    ("self" variable nil (reparse-symbol indented_block_body) [89823 89843])
                                    ("self" variable nil (reparse-symbol indented_block_body) [89856 89876])
                                    ("self" variable nil (reparse-symbol indented_block_body) [89890 89904]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [89558 89562])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [89564 89570])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [89575 89581])
                                    ("rad" variable nil (reparse-symbol function_parameters) [89585 89588]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [89545 89905])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [89926 89930])
                                    ("posA" variable nil (reparse-symbol function_parameters) [89932 89936])
                                    ("posB" variable nil (reparse-symbol function_parameters) [89938 89942]))                                  )
                                (reparse-symbol indented_block_body) [89914 91201]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [89169 91201])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [91206 91234])
                    ("Arc" type
                       (:documentation "
        Creates a picewise continuous quadratic bezier path between
        two points. The path can have two passing-through points, a
        point placed at the distance of armA and angle of angleA from
        point A, another point with respect to point B. The edges are
        rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            \"\"\"" code nil (reparse-symbol indented_block_body) [91677 92011])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92025 92045])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92058 92078])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92091 92107])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92120 92136])
                                    ("self" variable nil (reparse-symbol indented_block_body) [92150 92164]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [91608 91612])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [91614 91620])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [91624 91630])
                                    ("armA" variable nil (reparse-symbol function_parameters) [91634 91638])
                                    ("armB" variable nil (reparse-symbol function_parameters) [91645 91649])
                                    ("rad" variable nil (reparse-symbol function_parameters) [91656 91659]))                                  
                                :documentation "
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [91595 92165])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [92186 92190])
                                    ("posA" variable nil (reparse-symbol function_parameters) [92192 92196])
                                    ("posB" variable nil (reparse-symbol function_parameters) [92198 92202]))                                  )
                                (reparse-symbol indented_block_body) [92174 94318]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [91240 94318])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [94323 94347])
                    ("Bar" type
                       (:documentation "
        A line with *angle* between A and B with *armA* and
        *armB*. One of the arms is extended so that they are connected in
        a right angle. The length of armA is determined by (*armA*
        + *fraction* x AB distance). Same for armB.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            armA : float
                minimum length of armA

            armB : float
                minimum length of armB

            fraction : float
                a fraction of the distance between two points that
                will be added to armA and armB.

            angle : float or None
                angle of the connecting line (if None, parallel
                to A and B)
            \"\"\"" code nil (reparse-symbol indented_block_body) [94733 95199])
                                    ("self" variable nil (reparse-symbol indented_block_body) [95212 95228])
                                    ("self" variable nil (reparse-symbol indented_block_body) [95241 95257])
                                    ("self" variable nil (reparse-symbol indented_block_body) [95270 95294])
                                    ("self" variable nil (reparse-symbol indented_block_body) [95307 95325]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [94670 94674])
                                    ("armA" variable nil (reparse-symbol function_parameters) [94676 94680])
                                    ("armB" variable nil (reparse-symbol function_parameters) [94685 94689])
                                    ("fraction" variable nil (reparse-symbol function_parameters) [94694 94702])
                                    ("angle" variable nil (reparse-symbol function_parameters) [94708 94713]))                                  
                                :documentation "
            Parameters
            ----------
            armA : float
                minimum length of armA

            armB : float
                minimum length of armB

            fraction : float
                a fraction of the distance between two points that
                will be added to armA and armB.

            angle : float or None
                angle of the connecting line (if None, parallel
                to A and B)
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [94657 95326])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [95347 95351])
                                    ("posA" variable nil (reparse-symbol function_parameters) [95353 95357])
                                    ("posB" variable nil (reparse-symbol function_parameters) [95359 95363]))                                  )
                                (reparse-symbol indented_block_body) [95335 97198]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [94353 97198])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [97203 97227])
                    ("if" code nil (reparse-symbol indented_block_body) [97233 97362]))                  
                :type "class")
                nil [82345 97362])
            ("_point_along_a_line" function
               (:documentation "
    find a point along a line connecting (x0, y0) -- (x1, y1) whose
    distance from (x0, y0) is d.
    "
                :arguments 
                  ( ("x0" variable nil (reparse-symbol function_parameters) [97388 97390])
                    ("y0" variable nil (reparse-symbol function_parameters) [97392 97394])
                    ("x1" variable nil (reparse-symbol function_parameters) [97396 97398])
                    ("y1" variable nil (reparse-symbol function_parameters) [97400 97402])
                    ("d" variable nil (reparse-symbol function_parameters) [97404 97405]))                  )
                nil [97364 97653])
            ("ArrowStyle" type
               (:documentation "
    :class:`ArrowStyle` is a container class which defines several
    arrowstyle classes, which is used to create an arrow path along a
    given path. These are mainly used with :class:`FancyArrowPatch`.

    A arrowstyle object can be either created as::

           ArrowStyle.Fancy(head_length=.4, head_width=.4, tail_width=.4)

    or::

           ArrowStyle(\"Fancy\", head_length=.4, head_width=.4, tail_width=.4)

    or::

           ArrowStyle(\"Fancy, head_length=.4, head_width=.4, tail_width=.4\")

    The following classes are defined

    %(AvailableArrowstyles)s


    An instance of any arrow style class is a callable object,
    whose call signature is::

        __call__(self, path, mutation_size, linewidth, aspect_ratio=1.)

    and it returns a tuple of a :class:`Path` instance and a boolean
    value. *path* is a :class:`Path` instance along which the arrow
    will be drawn. *mutation_size* and *aspect_ratio* have the same
    meaning as in :class:`BoxStyle`. *linewidth* is a line width to be
    stroked. This is meant to be used to correct the location of the
    head so that it does not overshoot the destination point, but not all
    classes support it.

    .. plot:: mpl_examples/pylab_examples/fancyarrow_demo.py
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [98954 98970])
                    ("_Base" type
                       (:documentation "
        Arrow Transmuter Base class

        ArrowTransmuterBase and its derivatives are used to make a fancy
        arrow around a given path. The __call__ method returns a path
        (which will be used to create a PathPatch instance) and a boolean
        value indicating the path is open therefore is not fillable.  This
        class is not an artist and actual drawing of the fancy arrow is
        done by the FancyArrowPatch class.

        "
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [99682 99722]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [99663 99667]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [99650 99723])
                            ("ensure_quadratic_bezier" function
                               (:typemodifiers ("static")
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  
                                :arguments 
                                  ( ("path" variable nil (reparse-symbol function_parameters) [99782 99786]))                                  
                                :documentation " Some ArrowStyle class only wokrs with a simple
            quaratic bezier curve (created with Arc3Connetion or
            Angle3Connector). This static method is to check if the
            provided path is a simple quadratic bezier curve and returns
            its control points if true.
            ")
                                (reparse-symbol indented_block_body) [99732 100466])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [100489 100493])
                                    ("path" variable nil (reparse-symbol function_parameters) [100495 100499])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [100501 100514])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [100516 100525]))                                  
                                :documentation "
            The transmute method is the very core of the ArrowStyle
            class and must be overriden in the subclasses. It receives
            the path object along which the arrow will be drawn, and
            the mutation_size, with which the arrow head etc.
            will be scaled. The linewidth may be used to adjust
            the path so that it does not pass beyond the given
            points. It returns a tuple of a Path instance and a
            boolean. The boolean value indicate whether the path can
            be filled or not. The return value can also be a list of paths
            and list of booleans of a same length.
            ")
                                (reparse-symbol indented_block_body) [100475 101280])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [101302 101306])
                                    ("path" variable nil (reparse-symbol function_parameters) [101308 101312])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [101314 101327])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [101329 101338])
                                    ("aspect_ratio" variable nil (reparse-symbol function_parameters) [101361 101373]))                                  
                                :documentation "
            The __call__ method is a thin wrapper around the transmute method
            and take care of the aspect ratio.
            ")
                                (reparse-symbol indented_block_body) [101289 102714])
                            ("__reduce__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [102738 102742]))                                  )
                                (reparse-symbol indented_block_body) [102723 103092]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [98976 103092])
                    ("_Curve" type
                       (:documentation "
        A simple arrow which will work with any path instance. The
        returned path is simply concatenation of the original path + at
        most two paths representing the arrow head at the begin point and the
        at the end point. The arrow heads can be either open or closed.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            The arrows are drawn if *beginarrow* and/or *endarrow* are
            true. *head_length* and *head_width* determines the size
            of the arrow relative to the *mutation scale*.  The
            arrowhead at the begin (or end) is closed if fillbegin (or
            fillend) is True.
            \"\"\"" code nil (reparse-symbol indented_block_body) [103609 103933])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [103946 103999])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [104012 104071])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [104084 104133])
                                    ("super" code nil (reparse-symbol indented_block_body) [104146 104187]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [103453 103457])
                                    ("beginarrow" variable nil (reparse-symbol function_parameters) [103459 103469])
                                    ("endarrow" variable nil (reparse-symbol function_parameters) [103476 103484])
                                    ("fillbegin" variable nil (reparse-symbol function_parameters) [103512 103521])
                                    ("fillend" variable nil (reparse-symbol function_parameters) [103529 103536])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [103565 103576])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [103581 103591]))                                  
                                :documentation "
            The arrows are drawn if *beginarrow* and/or *endarrow* are
            true. *head_length* and *head_width* determines the size
            of the arrow relative to the *mutation scale*.  The
            arrowhead at the begin (or end) is closed if fillbegin (or
            fillend) is True.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [103440 104188])
                            ("_get_arrow_wedge" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [104218 104222])
                                    ("x0" variable nil (reparse-symbol function_parameters) [104224 104226])
                                    ("y0" variable nil (reparse-symbol function_parameters) [104228 104230])
                                    ("x1" variable nil (reparse-symbol function_parameters) [104232 104234])
                                    ("y1" variable nil (reparse-symbol function_parameters) [104236 104238])
                                    ("head_dist" variable nil (reparse-symbol function_parameters) [104269 104278])
                                    ("cos_t" variable nil (reparse-symbol function_parameters) [104280 104285])
                                    ("sin_t" variable nil (reparse-symbol function_parameters) [104287 104292])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [104294 104303]))                                  
                                :documentation "
            Return the paths for arrow heads. Since arrow lines are
            drawn with capstyle=projected, The arrow goes beyond the
            desired point. This method also returns the amount of the path
            to be shrunken so that it does not overshoot.
            ")
                                (reparse-symbol indented_block_body) [104197 105823])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [105846 105850])
                                    ("path" variable nil (reparse-symbol function_parameters) [105852 105856])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [105858 105871])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [105873 105882]))                                  )
                                (reparse-symbol indented_block_body) [105832 108904]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [103097 108904])
                    ("Curve" type
                       (:documentation "
        A simple curve without any arrow head.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [109042 109131]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [109023 109027]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [109010 109132]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [108909 109132])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [109137 109161])
                    ("CurveA" type
                       (:documentation "
        An arrow with a head at its begin point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [109334 109594])
                                    ("super" code nil (reparse-symbol indented_block_body) [109608 109765]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [109284 109288])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [109290 109301])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [109306 109316]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [109271 109766]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [109167 109766])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [109771 109797])
                    ("CurveB" type
                       (:documentation "
        An arrow with a head at its end point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [109968 110228])
                                    ("super" code nil (reparse-symbol indented_block_body) [110242 110395]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [109918 109922])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [109924 109935])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [109940 109950]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [109905 110396]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [109803 110396])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [110401 110427])
                    ("CurveAB" type
                       (:documentation "
        An arrow with heads both at the begin and the end point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [110617 110877])
                                    ("super" code nil (reparse-symbol indented_block_body) [110891 111044]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [110567 110571])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [110573 110584])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [110589 110599]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [110554 111045]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [110433 111045])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [111050 111078])
                    ("CurveFilledA" type
                       (:documentation "
        An arrow with filled triangle head at the begin.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [111265 111525])
                                    ("super" code nil (reparse-symbol indented_block_body) [111539 111745]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [111215 111219])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [111221 111232])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [111237 111247]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [111202 111746]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [111084 111746])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [111751 111784])
                    ("CurveFilledB" type
                       (:documentation "
        An arrow with filled triangle head at the end.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [111969 112229])
                                    ("super" code nil (reparse-symbol indented_block_body) [112243 112449]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [111919 111923])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [111925 111936])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [111941 111951]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [111906 112450]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [111790 112450])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [112455 112488])
                    ("CurveFilledAB" type
                       (:documentation "
        An arrow with filled triangle heads at both ends.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [112677 112937])
                                    ("super" code nil (reparse-symbol indented_block_body) [112951 113156]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [112627 112631])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [112633 112644])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [112649 112659]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.2
                Width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [112614 113157]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [112494 113157])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [113162 113198])
                    ("_Bracket" type
                       (:superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self, self" code nil (reparse-symbol indented_block_body) [113482 113531])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [113544 113585])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [113598 113643])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [113656 113697])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [113710 113751]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [113249 113253])
                                    ("bracketA" variable nil (reparse-symbol function_parameters) [113255 113263])
                                    ("bracketB" variable nil (reparse-symbol function_parameters) [113270 113278])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [113306 113312])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [113317 113323])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [113349 113356])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [113362 113369])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [113396 113402])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [113409 113415])
                                    ("scaleA" variable nil (reparse-symbol function_parameters) [113443 113449])
                                    ("scaleB" variable nil (reparse-symbol function_parameters) [113456 113462]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [113236 113752])
                            ("_get_bracket" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [113778 113782])
                                    ("x0" variable nil (reparse-symbol function_parameters) [113784 113786])
                                    ("y0" variable nil (reparse-symbol function_parameters) [113788 113790])
                                    ("cos_t" variable nil (reparse-symbol function_parameters) [113817 113822])
                                    ("sin_t" variable nil (reparse-symbol function_parameters) [113824 113829])
                                    ("width" variable nil (reparse-symbol function_parameters) [113831 113836])
                                    ("length" variable nil (reparse-symbol function_parameters) [113838 113844]))                                  )
                                (reparse-symbol indented_block_body) [113761 114468])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [114491 114495])
                                    ("path" variable nil (reparse-symbol function_parameters) [114497 114501])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [114503 114516])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [114518 114527]))                                  )
                                (reparse-symbol indented_block_body) [114477 116088]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [113204 116088])
                    ("BracketAB" type
                       (:documentation "
        An arrow with a bracket(]) at both ends.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            lengthA : float, optional, default : 0.2
                Length of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line

            widthB : float, optional, default : 1.0
                Width of the bracket

            lengthB : float, optional, default : 0.2
                Length of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [116350 116996])
                                    ("super" code nil (reparse-symbol indented_block_body) [117010 117231]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [116215 116219])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [116242 116248])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [116253 116260])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [116266 116272])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [116300 116306])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [116311 116318])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [116324 116330]))                                  
                                :documentation "
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            lengthA : float, optional, default : 0.2
                Length of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line

            widthB : float, optional, default : 1.0
                Width of the bracket

            lengthB : float, optional, default : 0.2
                Length of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [116202 117232]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [116093 117232])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [117237 117267])
                    ("BracketA" type
                       (:documentation "
        An arrow with a bracket(])  at its end.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            lengthA : float, optional, default : 0.2
                Length of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [117449 117804])
                                    ("super" code nil (reparse-symbol indented_block_body) [117818 118080]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [117393 117397])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [117399 117405])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [117410 117417])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [117423 117429]))                                  
                                :documentation "
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            lengthA : float, optional, default : 0.2
                Length of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [117380 118081]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [117273 118081])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [118086 118114])
                    ("BracketB" type
                       (:documentation "
        An arrow with a bracket([)  at its end.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthB : float, optional, default : 1.0
                Width of the bracket

            lengthB : float, optional, default : 0.2
                Length of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [118296 118651])
                                    ("super" code nil (reparse-symbol indented_block_body) [118665 118927]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [118240 118244])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [118246 118252])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [118257 118264])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [118270 118276]))                                  
                                :documentation "
            Parameters
            ----------
            widthB : float, optional, default : 1.0
                Width of the bracket

            lengthB : float, optional, default : 0.2
                Length of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [118227 118928]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [118120 118928])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [118933 118961])
                    ("BarAB" type
                       (:documentation "
        An arrow with a bar(|) at both ends.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line

            widthB : float, optional, default : 1.0
                Width of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [119190 119652])
                                    ("super" code nil (reparse-symbol indented_block_body) [119666 119847]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [119081 119085])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [119108 119114])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [119119 119125])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [119153 119159])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [119164 119170]))                                  
                                :documentation "
            Parameters
            ----------
            widthA : float, optional, default : 1.0
                Width of the bracket

            angleA : float, optional, default : None
                Angle between the bracket and the line

            widthB : float, optional, default : 1.0
                Width of the bracket

            angleB : float, optional, default : None
                Angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [119068 119848]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [118967 119848])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [119853 119879])
                    ("Simple" type
                       (:documentation "
        A simple arrow. Only works with a quadratic bezier curve.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.5
                Length of the arrow head

            head_width : float, optional, default : 0.5
                Width of the arrow head

            tail_width : float, optional, default : 0.2
                Width of the arrow tail
            \"\"\"" code nil (reparse-symbol indented_block_body) [120083 120440])
                                    ("self, self, self" code nil (reparse-symbol indented_block_body) [120454 120560])
                                    ("super" code nil (reparse-symbol indented_block_body) [120573 120614]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [120018 120022])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [120024 120035])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [120040 120050])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [120055 120065]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.5
                Length of the arrow head

            head_width : float, optional, default : 0.5
                Width of the arrow head

            tail_width : float, optional, default : 0.2
                Width of the arrow tail
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [120005 120615])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [120638 120642])
                                    ("path" variable nil (reparse-symbol function_parameters) [120644 120648])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [120650 120663])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [120665 120674]))                                  )
                                (reparse-symbol indented_block_body) [120624 123505]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [119885 123505])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [123510 123540])
                    ("Fancy" type
                       (:documentation "
        A fancy arrow. Only works with a quadratic bezier curve.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.4
                Width of the arrow head

            tail_width : float, optional, default : 0.4
                Width of the arrow tail
            \"\"\"" code nil (reparse-symbol indented_block_body) [123742 124099])
                                    ("self, self, self" code nil (reparse-symbol indented_block_body) [124113 124219])
                                    ("super" code nil (reparse-symbol indented_block_body) [124232 124272]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [123677 123681])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [123683 123694])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [123699 123709])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [123714 123724]))                                  
                                :documentation "
            Parameters
            ----------
            head_length : float, optional, default : 0.4
                Length of the arrow head

            head_width : float, optional, default : 0.4
                Width of the arrow head

            tail_width : float, optional, default : 0.4
                Width of the arrow tail
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [123664 124273])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [124296 124300])
                                    ("path" variable nil (reparse-symbol function_parameters) [124302 124306])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [124308 124321])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [124323 124332]))                                  )
                                (reparse-symbol indented_block_body) [124282 127689]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [123546 127689])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [127694 127722])
                    ("Wedge" type
                       (:documentation "
        Wedge(?) shape. Only works with a quadratic bezier curve.  The
        begin point has a width of the tail_width and the end point has a
        width of 0. At the middle, the width is shrink_factor*tail_width.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            Parameters
            ----------
            tail_width : float, optional, default : 0.3
                Width of the tail

            shrink_factor : float, optional, default : 0.5
                Fraction of the arrow width at the middle point
            \"\"\"" code nil (reparse-symbol indented_block_body) [128066 128345])
                                    ("self" variable nil (reparse-symbol indented_block_body) [128359 128387])
                                    ("self" variable nil (reparse-symbol indented_block_body) [128400 128434])
                                    ("super" code nil (reparse-symbol indented_block_body) [128447 128487]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [128013 128017])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [128019 128029])
                                    ("shrink_factor" variable nil (reparse-symbol function_parameters) [128034 128047]))                                  
                                :documentation "
            Parameters
            ----------
            tail_width : float, optional, default : 0.3
                Width of the tail

            shrink_factor : float, optional, default : 0.5
                Fraction of the arrow width at the middle point
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [128000 128488])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [128511 128515])
                                    ("path" variable nil (reparse-symbol function_parameters) [128517 128521])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [128523 128536])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [128538 128547]))                                  )
                                (reparse-symbol indented_block_body) [128497 129423]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [127728 129423])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [129428 129456])
                    ("if" code nil (reparse-symbol indented_block_body) [129462 129587]))                  
                :type "class")
                nil [97655 129587])
            ("docstring" code nil nil [129589 129755])
            ("FancyArrowPatch" type
               (:documentation "
    A fancy arrow patch. It draws an arrow using the :class:ArrowStyle.
    "
                :superclasses ("Patch")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [129880 129900])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129918 129922]))                          )
                        (reparse-symbol indented_block_body) [129906 130234])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        If *posA* and *posB* is given, a path connecting two point are
        created according to the connectionstyle. The path will be
        clipped with *patchA* and *patchB* and further shrunken by
        *shrinkA* and *shrinkB*. An arrow is drawn along this
        resulting path using the *arrowstyle* parameter. If *path*
        provided, an arrow is drawn along this path and *patchA*,
        *patchB*, *shrinkA*, and *shrinkB* are ignored.

        The *connectionstyle* describes how *posA* and *posB* are
        connected. It can be an instance of the ConnectionStyle class
        (matplotlib.patches.ConnectionStlye) or a string of the
        connectionstyle name, with optional comma-separated
        attributes.  The following connection styles are available.

        %(AvailableConnectorstyles)s


        The *arrowstyle* describes how the fancy arrow will be
        drawn. It can be string of the available arrowstyle names,
        with optional comma-separated attributes, or one of the
        ArrowStyle instance. The optional attributes are meant to be
        scaled with the *mutation_scale*. The following arrow styles are
        available.

        %(AvailableArrowstyles)s

        *mutation_scale* : a value with which attributes of arrowstyle
            (e.g., head_length) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
            squeezed by this value before the mutation and the mutated
            box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [130748 132359])
                            ("Patch" code nil (reparse-symbol indented_block_body) [132368 132398])
                            ("if" code nil (reparse-symbol indented_block_body) [132408 132875])
                            ("self" variable nil (reparse-symbol indented_block_body) [132884 132904])
                            ("self" variable nil (reparse-symbol indented_block_body) [132913 132933])
                            ("self" variable nil (reparse-symbol indented_block_body) [132942 132964])
                            ("self" variable nil (reparse-symbol indented_block_body) [132973 132995])
                            ("self" variable nil (reparse-symbol indented_block_body) [133005 133031])
                            ("self" code nil (reparse-symbol indented_block_body) [133041 133072])
                            ("self" variable nil (reparse-symbol indented_block_body) [133082 133119])
                            ("self" variable nil (reparse-symbol indented_block_body) [133128 133167])
                            ("self" code nil (reparse-symbol indented_block_body) [133177 133202]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130282 130286])
                            ("posA" variable nil (reparse-symbol function_parameters) [130288 130292])
                            ("posB" variable nil (reparse-symbol function_parameters) [130299 130303])
                            ("path" variable nil (reparse-symbol function_parameters) [130327 130331])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [130355 130365])
                            ("arrow_transmuter" variable nil (reparse-symbol function_parameters) [130393 130409])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [130433 130448])
                            ("connector" variable nil (reparse-symbol function_parameters) [130474 130483])
                            ("patchA" variable nil (reparse-symbol function_parameters) [130507 130513])
                            ("patchB" variable nil (reparse-symbol function_parameters) [130537 130543])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [130567 130574])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [130596 130603])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [130625 130639])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [130661 130676])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [130700 130707])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [130729 130737]))                          
                        :documentation "
        If *posA* and *posB* is given, a path connecting two point are
        created according to the connectionstyle. The path will be
        clipped with *patchA* and *patchB* and further shrunken by
        *shrinkA* and *shrinkB*. An arrow is drawn along this
        resulting path using the *arrowstyle* parameter. If *path*
        provided, an arrow is drawn along this path and *patchA*,
        *patchB*, *shrinkA*, and *shrinkB* are ignored.

        The *connectionstyle* describes how *posA* and *posB* are
        connected. It can be an instance of the ConnectionStyle class
        (matplotlib.patches.ConnectionStlye) or a string of the
        connectionstyle name, with optional comma-separated
        attributes.  The following connection styles are available.

        %(AvailableConnectorstyles)s


        The *arrowstyle* describes how the fancy arrow will be
        drawn. It can be string of the available arrowstyle names,
        with optional comma-separated attributes, or one of the
        ArrowStyle instance. The optional attributes are meant to be
        scaled with the *mutation_scale*. The following arrow styles are
        available.

        %(AvailableArrowstyles)s

        *mutation_scale* : a value with which attributes of arrowstyle
            (e.g., head_length) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
            squeezed by this value before the mutation and the mutated
            box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [130239 133203])
                    ("set_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133273 133277])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [133279 133286]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shrink factor. Mutation scale is affected by this.
        ")
                        (reparse-symbol indented_block_body) [133257 133498])
                    ("get_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133519 133523]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shrink factor. Mutation scale is affected by this.
        ")
                        (reparse-symbol indented_block_body) [133503 133706])
                    ("set_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133729 133733])
                            ("posA" variable nil (reparse-symbol function_parameters) [133735 133739])
                            ("posB" variable nil (reparse-symbol function_parameters) [133741 133745]))                          
                        :documentation " set the begin and end positions of the connecting
        path. Use current value if None.
        ")
                        (reparse-symbol indented_block_body) [133711 134023])
                    ("set_patchA" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134043 134047])
                            ("patchA" variable nil (reparse-symbol function_parameters) [134049 134055]))                          
                        :documentation " set the begin patch.
        ")
                        (reparse-symbol indented_block_body) [134028 134158])
                    ("set_patchB" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134178 134182])
                            ("patchB" variable nil (reparse-symbol function_parameters) [134184 134190]))                          
                        :documentation " set the begin patch
        ")
                        (reparse-symbol indented_block_body) [134163 134292])
                    ("set_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134321 134325])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [134327 134342])
                            ("kw" variable nil (reparse-symbol function_parameters) [134344 134348]))                          
                        :documentation "
        Set the connection style.

        *connectionstyle* can be a string with connectionstyle name with
         optional comma-separated attributes. Alternatively, the attrs can be
         provided as keywords.

         set_connectionstyle(\"arc,angleA=0,armA=30,rad=10\")
         set_connectionstyle(\"arc\", angleA=0,armA=30,rad=10)

        Old attrs simply are forgotten.

        Without argument (or with connectionstyle=None), return
        available styles as a list of strings.
        ")
                        (reparse-symbol indented_block_body) [134297 135341])
                    ("get_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135370 135374]))                          
                        :documentation "
        Return the ConnectionStyle instance
        ")
                        (reparse-symbol indented_block_body) [135346 135476])
                    ("set_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135500 135504])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [135506 135516])
                            ("kw" variable nil (reparse-symbol function_parameters) [135523 135527]))                          
                        :documentation "
        Set the arrow style.

        *arrowstyle* can be a string with arrowstyle name with optional
         comma-separated attributes. Alternatively, the attrs can
         be provided as keywords.

         set_arrowstyle(\"Fancy,head_length=0.2\")
         set_arrowstyle(\"fancy\", head_length=0.2)

        Old attrs simply are forgotten.

        Without argument (or with arrowstyle=None), return
        available box styles as a list of strings.
        ")
                        (reparse-symbol indented_block_body) [135481 136294])
                    ("get_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136318 136322]))                          
                        :documentation "
        Return the arrowstyle object
        ")
                        (reparse-symbol indented_block_body) [136299 136424])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136452 136456])
                            ("scale" variable nil (reparse-symbol function_parameters) [136458 136463]))                          
                        :documentation "
        Set the mutation scale.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [136429 136609])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136637 136641]))                          
                        :documentation "
        Return the mutation scale.
        ")
                        (reparse-symbol indented_block_body) [136614 136739])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136768 136772])
                            ("aspect" variable nil (reparse-symbol function_parameters) [136774 136780]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [136744 136947])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136976 136980]))                          
                        :documentation "
        Return the aspect ratio of the bbox mutation.
        ")
                        (reparse-symbol indented_block_body) [136952 137098])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137116 137120]))                          
                        :documentation "
        return the path of the arrow in the data coordinate. Use
        get_path_in_displaycoord() method to retrieve the arrow path
        in the display coord.
        ")
                        (reparse-symbol indented_block_body) [137103 137522])
                    ("get_path_in_displaycoord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137556 137560]))                          
                        :documentation "
        Return the mutated path of the arrow in the display coord
        ")
                        (reparse-symbol indented_block_body) [137527 138820])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138834 138838])
                            ("renderer" variable nil (reparse-symbol function_parameters) [138840 138848]))                          )
                        (reparse-symbol indented_block_body) [138825 140980]))                  
                :type "class")
                nil [129758 140980])
            ("ConnectionPatch" type
               (:documentation "
    A :class:`~matplotlib.patches.ConnectionPatch` class is to make
    connecting lines between two points (possibly in different axes).
    "
                :superclasses ("FancyArrowPatch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141192 141196]))                          )
                        (reparse-symbol indented_block_body) [141180 141321])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*


        Valid keys are


        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for :class:`matplotlib.patches.PathPatch`
        ===============  ======================================================


        *coordsA* and *coordsB* are strings that indicate the
        coordinates of *xyA* and *xyB*.

        =================   ===================================================
        Property            Description
        =================   ===================================================
        'figure points'     points from the lower left corner of the figure
        'figure pixels'     pixels from the lower left corner of the figure
        'figure fraction'   0,0 is lower left of figure and 1,1 is upper, right
        'axes points'       points from lower left corner of axes
        'axes pixels'       pixels from lower left corner of axes
        'axes fraction'     0,1 is lower left of axes and 1,1 is upper right
        'data'              use the coordinate system of the object being
                            annotated (default)
        'offset points'     Specify an offset (in points) from the *xy* value

        'polar'             you can specify *theta*, *r* for the annotation,
                            even in cartesian plots.  Note that if you
                            are using a polar axes, you do not need
                            to specify polar for the coordinate
                            system since that is the native \"data\" coordinate
                            system.
        =================   ===================================================

        \"\"\"" code nil (reparse-symbol indented_block_body) [141887 144197])
                            ("if" code nil (reparse-symbol indented_block_body) [144206 144256])
                            ("self" variable nil (reparse-symbol indented_block_body) [144333 144347])
                            ("self" variable nil (reparse-symbol indented_block_body) [144356 144370])
                            ("self" variable nil (reparse-symbol indented_block_body) [144379 144401])
                            ("self" variable nil (reparse-symbol indented_block_body) [144410 144432])
                            ("self" variable nil (reparse-symbol indented_block_body) [144442 144460])
                            ("self" variable nil (reparse-symbol indented_block_body) [144469 144487])
                            ("FancyArrowPatch" code nil (reparse-symbol indented_block_body) [144497 145299])
                            ("self" variable nil (reparse-symbol indented_block_body) [145379 145407]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141369 141373])
                            ("xyA" variable nil (reparse-symbol function_parameters) [141375 141378])
                            ("xyB" variable nil (reparse-symbol function_parameters) [141380 141383])
                            ("coordsA" variable nil (reparse-symbol function_parameters) [141385 141392])
                            ("coordsB" variable nil (reparse-symbol function_parameters) [141394 141401])
                            ("axesA" variable nil (reparse-symbol function_parameters) [141425 141430])
                            ("axesB" variable nil (reparse-symbol function_parameters) [141437 141442])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [141466 141476])
                            ("arrow_transmuter" variable nil (reparse-symbol function_parameters) [141499 141515])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [141539 141554])
                            ("connector" variable nil (reparse-symbol function_parameters) [141580 141589])
                            ("patchA" variable nil (reparse-symbol function_parameters) [141613 141619])
                            ("patchB" variable nil (reparse-symbol function_parameters) [141643 141649])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [141673 141680])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [141702 141709])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [141731 141745])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [141768 141783])
                            ("clip_on" variable nil (reparse-symbol function_parameters) [141807 141814])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [141839 141846])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [141868 141876]))                          
                        :documentation "
        Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*


        Valid keys are


        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for :class:`matplotlib.patches.PathPatch`
        ===============  ======================================================


        *coordsA* and *coordsB* are strings that indicate the
        coordinates of *xyA* and *xyB*.

        =================   ===================================================
        Property            Description
        =================   ===================================================
        'figure points'     points from the lower left corner of the figure
        'figure pixels'     pixels from the lower left corner of the figure
        'figure fraction'   0,0 is lower left of figure and 1,1 is upper, right
        'axes points'       points from lower left corner of axes
        'axes pixels'       pixels from lower left corner of axes
        'axes fraction'     0,1 is lower left of axes and 1,1 is upper right
        'data'              use the coordinate system of the object being
                            annotated (default)
        'offset points'     Specify an offset (in points) from the *xy* value

        'polar'             you can specify *theta*, *r* for the annotation,
                            even in cartesian plots.  Note that if you
                            are using a polar axes, you do not need
                            to specify polar for the coordinate
                            system since that is the native \"data\" coordinate
                            system.
        =================   ===================================================

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [141326 145408])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145425 145429])
                            ("x" variable nil (reparse-symbol function_parameters) [145431 145432])
                            ("y" variable nil (reparse-symbol function_parameters) [145434 145435])
                            ("s" variable nil (reparse-symbol function_parameters) [145437 145438])
                            ("axes" variable nil (reparse-symbol function_parameters) [145440 145444]))                          
                        :documentation "
        caculate the pixel position of given point
        ")
                        (reparse-symbol indented_block_body) [145413 148467])
                    ("set_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148496 148500])
                            ("b" variable nil (reparse-symbol function_parameters) [148502 148503]))                          
                        :documentation "
        set *annotation_clip* attribute.

          * True: the annotation will only be drawn when self.xy is inside the
                   axes.
          * False: the annotation will always be drawn regardless of its
                    position.
          * None: the self.xy will be checked only if *xycoords* is \"data\"
        ")
                        (reparse-symbol indented_block_body) [148472 148914])
                    ("get_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148943 148947]))                          
                        :documentation "
        Return *annotation_clip* attribute.
        See :meth:`set_annotation_clip` for the meaning of return values.
        ")
                        (reparse-symbol indented_block_body) [148919 149129])
                    ("get_path_in_displaycoord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149163 149167]))                          
                        :documentation "
        Return the mutated path of the arrow in the display coord
        ")
                        (reparse-symbol indented_block_body) [149134 150231])
                    ("_check_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150250 150254])
                            ("renderer" variable nil (reparse-symbol function_parameters) [150256 150264]))                          
                        :documentation "
        check if the annotation need to
        be drawn.
        ")
                        (reparse-symbol indented_block_body) [150236 150999])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151013 151017])
                            ("renderer" variable nil (reparse-symbol function_parameters) [151019 151027]))                          
                        :documentation "
        Draw.
        ")
                        (reparse-symbol indented_block_body) [151004 151301]))                  
                :type "class")
                nil [140982 151301]))          
      :file "patches.py"
      :pointmax 151301
      :fsize 151301
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 124590 . 124594) (PERIOD 124595 . 124596) (FROM 120986 . 120990) (PERIOD 120991 . 120992) (NAME 10685 . 10690) (IF 10705 . 10707) (ELSE 10719 . 10723)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
GUI neutral widgets
===================

Widgets that are designed to work for any of the GUI backends.
All of these widgets require you to predefine a :class:`matplotlib.axes.Axes`
instance and pass that as the first arg.  matplotlib doesn't try to
be too smart with respect to layout -- you will have to figure out how
wide and tall you want your Axes to be to accommodate your widget.
\"\"\"" code nil nil [1 396])
            ("" code nil nil [421 506])
            ("copy" include nil nil [508 519])
            ("six" include nil nil [520 530])
            ("six.moves" include nil nil [531 556])
            ("numpy" include nil nil [558 576])
            ("dist" include nil nil [589 600])
            ("Ellipse" include nil nil [615 648])
            ("Rectangle" include nil nil [615 648])
            ("Circle" include nil nil [615 648])
            ("Line2D" include nil nil [661 674])
            ("blended_transform_factory" include nil nil [692 724])
            ("LockDraw" type
               (:documentation "
    Some widgets, like the cursor, draw onto the canvas, and this is not
    desirable under all circumstances, like when the toolbar is in
    zoom-to-rect mode and drawing a rectangle.  The module level \"lock\"
    allows someone to grab the lock and prevent other widgets from
    drawing.  Use ``matplotlib.widgets.lock(someobj)`` to prevent
    other widgets from drawing while you're interacting with the canvas.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1218 1236]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1203 1207]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1190 1237])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1255 1259])
                            ("o" variable nil (reparse-symbol function_parameters) [1261 1262]))                          
                        :documentation "reserve the lock for *o*")
                        (reparse-symbol indented_block_body) [1242 1409])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1426 1430])
                            ("o" variable nil (reparse-symbol function_parameters) [1432 1433]))                          
                        :documentation "release the lock")
                        (reparse-symbol indented_block_body) [1414 1585])
                    ("available" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1604 1608])
                            ("o" variable nil (reparse-symbol function_parameters) [1610 1611]))                          
                        :documentation "drawing is available to *o*")
                        (reparse-symbol indented_block_body) [1590 1708])
                    ("isowner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1725 1729])
                            ("o" variable nil (reparse-symbol function_parameters) [1731 1732]))                          
                        :documentation "Return True if *o* owns this lock")
                        (reparse-symbol indented_block_body) [1713 1815])
                    ("locked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1831 1835]))                          
                        :documentation "Return True if the lock is currently held by an owner")
                        (reparse-symbol indented_block_body) [1820 1945]))                  
                :type "class")
                nil [727 1945])
            ("Widget" type
               (:documentation "
    Abstract base class for GUI neutral widgets
    "
                :superclasses ("object")
                :members 
                  ( ("drawon" variable nil (reparse-symbol indented_block_body) [2037 2050])
                    ("eventson" variable nil (reparse-symbol indented_block_body) [2055 2070])
                    ("_active" variable nil (reparse-symbol indented_block_body) [2075 2089])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2110 2114])
                            ("active" variable nil (reparse-symbol function_parameters) [2116 2122]))                          
                        :documentation "Set whether the widget is active.
        ")
                        (reparse-symbol indented_block_body) [2095 2212])
                    ("get_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2232 2236]))                          
                        :documentation "Get whether the widget is active.
        ")
                        (reparse-symbol indented_block_body) [2217 2324])
                    ("active" variable nil (reparse-symbol indented_block_body) [2379 2505])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2522 2526])
                            ("event" variable nil (reparse-symbol function_parameters) [2528 2533]))                          
                        :documentation "Return True if event should be ignored.

        This method (or a version of it) should be called at the beginning
        of any event callback.
        ")
                        (reparse-symbol indented_block_body) [2511 2737]))                  
                :type "class")
                nil [1947 2737])
            ("AxesWidget" type
               (:documentation "Widget that is connected to a single
    :class:`~matplotlib.axes.Axes`.

    To guarantee that the widget remains responsive and not garbage-collected,
    a reference to the object should be maintained by the user.

    This is necessary because the callback registry
    maintains only weak-refs to the functions, which are member
    functions of the widget.  If there are no references to the widget
    object it may be garbage collected which will disconnect the
    callbacks.

    Attributes:

    *ax* : :class:`~matplotlib.axes.Axes`
        The parent axes for the widget
    *canvas* : :class:`~matplotlib.backend_bases.FigureCanvasBase` subclass
        The parent figure canvas for the widget.
    *active* : bool
        If False, the widget does not respond to events.
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3602 3614])
                            ("self" variable nil (reparse-symbol indented_block_body) [3623 3653])
                            ("self" variable nil (reparse-symbol indented_block_body) [3662 3676]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3583 3587])
                            ("ax" variable nil (reparse-symbol function_parameters) [3589 3591]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3570 3677])
                    ("connect_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3700 3704])
                            ("event" variable nil (reparse-symbol function_parameters) [3706 3711])
                            ("callback" variable nil (reparse-symbol function_parameters) [3713 3721]))                          
                        :documentation "Connect callback with an event.

        This should be used in lieu of `figure.canvas.mpl_connect` since this
        function stores callback ids for later clean up.
        ")
                        (reparse-symbol indented_block_body) [3682 4000])
                    ("disconnect_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4027 4031]))                          
                        :documentation "Disconnect all events created by this widget.")
                        (reparse-symbol indented_block_body) [4005 4164]))                  
                :type "class")
                nil [2739 4164])
            ("Button" type
               (:documentation "
    A GUI neutral button.

    For the button to remain responsive you must keep a reference to it.

    The following attributes are accessible

      *ax*
        The :class:`matplotlib.axes.Axes` the button renders into.

      *label*
        A :class:`matplotlib.text.Text` instance.

      *color*
        The color of the button when not hovering.

      *hovercolor*
        The color of the button when hovering.

    Call :meth:`on_clicked` to connect to the button
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        ax : matplotlib.axes.Axes
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        label : str
            The button text. Accepts string.

        image : array, mpl image, Pillow Image
            The image to place in the button, if not *None*.
            Can be any legal arg to imshow (numpy array,
            matplotlib Image instance, or Pillow Image).

        color : color
            The color of the button when not activated

        hovercolor : color
            The color of the button when the mouse is over it
        \"\"\"" code nil (reparse-symbol indented_block_body) [4790 5433])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [5442 5471])
                            ("if" code nil (reparse-symbol indented_block_body) [5481 5532])
                            ("self" variable nil (reparse-symbol indented_block_body) [5540 5746])
                            ("self" variable nil (reparse-symbol indented_block_body) [5756 5768])
                            ("self" variable nil (reparse-symbol indented_block_body) [5777 5796])
                            ("self" code nil (reparse-symbol indented_block_body) [5806 5859])
                            ("self" code nil (reparse-symbol indented_block_body) [5868 5925])
                            ("self" code nil (reparse-symbol indented_block_body) [5934 5989])
                            ("ax" code nil (reparse-symbol indented_block_body) [5998 6020])
                            ("ax" code nil (reparse-symbol indented_block_body) [6029 6052])
                            ("ax" code nil (reparse-symbol indented_block_body) [6061 6078])
                            ("ax" code nil (reparse-symbol indented_block_body) [6087 6104])
                            ("self" variable nil (reparse-symbol indented_block_body) [6113 6131])
                            ("self" variable nil (reparse-symbol indented_block_body) [6140 6168])
                            ("self" variable nil (reparse-symbol indented_block_body) [6178 6201]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4702 4706])
                            ("ax" variable nil (reparse-symbol function_parameters) [4708 4710])
                            ("label" variable nil (reparse-symbol function_parameters) [4712 4717])
                            ("image" variable nil (reparse-symbol function_parameters) [4719 4724])
                            ("color" variable nil (reparse-symbol function_parameters) [4748 4753])
                            ("hovercolor" variable nil (reparse-symbol function_parameters) [4762 4772]))                          
                        :documentation "
        Parameters
        ----------
        ax : matplotlib.axes.Axes
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        label : str
            The button text. Accepts string.

        image : array, mpl image, Pillow Image
            The image to place in the button, if not *None*.
            Can be any legal arg to imshow (numpy array,
            matplotlib Image instance, or Pillow Image).

        color : color
            The color of the button when not activated

        hovercolor : color
            The color of the button when the mouse is over it
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4689 6202])
                    ("_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6218 6222])
                            ("event" variable nil (reparse-symbol function_parameters) [6224 6229]))                          )
                        (reparse-symbol indented_block_body) [6207 6481])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6499 6503])
                            ("event" variable nil (reparse-symbol function_parameters) [6505 6510]))                          )
                        (reparse-symbol indented_block_body) [6486 6860])
                    ("_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6877 6881])
                            ("event" variable nil (reparse-symbol function_parameters) [6883 6888]))                          )
                        (reparse-symbol indented_block_body) [6865 7225])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7245 7249])
                            ("func" variable nil (reparse-symbol function_parameters) [7251 7255]))                          
                        :documentation "
        When the button is clicked, call this *func* with event.

        A connection id is returned. It can be used to disconnect
        the button from its callback.
        ")
                        (reparse-symbol indented_block_body) [7230 7551])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7571 7575])
                            ("cid" variable nil (reparse-symbol function_parameters) [7577 7580]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [7556 7733]))                  
                :type "class")
                nil [4166 7733])
            ("Slider" type
               (:documentation "
    A slider representing a floating point range.

    For the slider to remain responsive you must maintain a
    reference to it.

    The following attributes are defined
      *ax*        : the slider :class:`matplotlib.axes.Axes` instance

      *val*       : the current slider value

      *vline*     : a :class:`matplotlib.lines.Line2D` instance
                     representing the initial value of the slider

      *poly*      : A :class:`matplotlib.patches.Polygon` instance
                     which is the slider knob

      *valfmt*    : the format string for formatting the slider text

      *label*     : a :class:`matplotlib.text.Text` instance
                     for the slider label

      *closedmin* : whether the slider is closed on the minimum

      *closedmax* : whether the slider is closed on the maximum

      *slidermin* : another slider - if not *None*, this slider must be
                     greater than *slidermin*

      *slidermax* : another slider - if not *None*, this slider must be
                     less than *slidermax*

      *dragging*  : allow for mouse dragging on slider

    Call :meth:`on_changed` to connect to the slider event
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a slider from *valmin* to *valmax* in axes *ax*.

        Additional kwargs are passed on to ``self.poly`` which is the
        :class:`matplotlib.patches.Rectangle` that draws the slider
        knob.  See the :class:`matplotlib.patches.Rectangle` documentation for
        valid property names (e.g., *facecolor*, *edgecolor*, *alpha*, ...).

        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in

        label : str
            Slider label

        valmin : float
            The minimum value of the slider

        valmax : float
            The maximum value of the slider

        valinit : float
            The slider initial position

        label : str
            The slider label

        valfmt : str
            Used to format the slider value, fprint format string

        closedmin : bool
            Indicate whether the slider interval is closed on the bottom

        closedmax : bool
            Indicate whether the slider interval is closed on the top

        slidermin : Slider or None
            Do not allow the current slider to have a value less than
            `slidermin`

        slidermax : Slider or None
            Do not allow the current slider to have a value greater than
            `slidermax`


        dragging : bool
            if the slider can be dragged by the mouse

        \"\"\"" code nil (reparse-symbol indented_block_body) [9178 10575])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [10584 10613])
                            ("self" variable nil (reparse-symbol indented_block_body) [10623 10643])
                            ("self" variable nil (reparse-symbol indented_block_body) [10652 10672])
                            ("self" variable nil (reparse-symbol indented_block_body) [10681 10699])
                            ("self" variable nil (reparse-symbol indented_block_body) [10708 10730])
                            ("self" variable nil (reparse-symbol indented_block_body) [10739 10794])
                            ("self" variable nil (reparse-symbol indented_block_body) [10804 10859])
                            ("self" variable nil (reparse-symbol indented_block_body) [10869 10889])
                            ("ax" code nil (reparse-symbol indented_block_body) [10898 10915])
                            ("ax" code nil (reparse-symbol indented_block_body) [10924 10953])
                            ("ax" code nil (reparse-symbol indented_block_body) [10962 10979])
                            ("ax" code nil (reparse-symbol indented_block_body) [10988 11010])
                            ("self" code nil (reparse-symbol indented_block_body) [11020 11074])
                            ("self" code nil (reparse-symbol indented_block_body) [11083 11139])
                            ("if" code nil (reparse-symbol indented_block_body) [11148 11229])
                            ("self" variable nil (reparse-symbol indented_block_body) [11237 11415])
                            ("self" variable nil (reparse-symbol indented_block_body) [11425 11649])
                            ("self" variable nil (reparse-symbol indented_block_body) [11659 11671])
                            ("self" variable nil (reparse-symbol indented_block_body) [11680 11699])
                            ("self" variable nil (reparse-symbol indented_block_body) [11709 11735])
                            ("self" variable nil (reparse-symbol indented_block_body) [11744 11770])
                            ("self" variable nil (reparse-symbol indented_block_body) [11779 11805])
                            ("self" variable nil (reparse-symbol indented_block_body) [11814 11840])
                            ("self" variable nil (reparse-symbol indented_block_body) [11849 11873]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8984 8988])
                            ("ax" variable nil (reparse-symbol function_parameters) [8990 8992])
                            ("label" variable nil (reparse-symbol function_parameters) [8994 8999])
                            ("valmin" variable nil (reparse-symbol function_parameters) [9001 9007])
                            ("valmax" variable nil (reparse-symbol function_parameters) [9009 9015])
                            ("valinit" variable nil (reparse-symbol function_parameters) [9017 9024])
                            ("valfmt" variable nil (reparse-symbol function_parameters) [9030 9036])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [9063 9072])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [9079 9088])
                            ("slidermin" variable nil (reparse-symbol function_parameters) [9095 9104])
                            ("slidermax" variable nil (reparse-symbol function_parameters) [9128 9137])
                            ("dragging" variable nil (reparse-symbol function_parameters) [9144 9152])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9159 9167]))                          
                        :documentation "
        Create a slider from *valmin* to *valmax* in axes *ax*.

        Additional kwargs are passed on to ``self.poly`` which is the
        :class:`matplotlib.patches.Rectangle` that draws the slider
        knob.  See the :class:`matplotlib.patches.Rectangle` documentation for
        valid property names (e.g., *facecolor*, *edgecolor*, *alpha*, ...).

        Parameters
        ----------
        ax : Axes
            The Axes to put the slider in

        label : str
            Slider label

        valmin : float
            The minimum value of the slider

        valmax : float
            The maximum value of the slider

        valinit : float
            The slider initial position

        label : str
            The slider label

        valfmt : str
            Used to format the slider value, fprint format string

        closedmin : bool
            Indicate whether the slider interval is closed on the bottom

        closedmax : bool
            Indicate whether the slider interval is closed on the top

        slidermin : Slider or None
            Do not allow the current slider to have a value less than
            `slidermin`

        slidermax : Slider or None
            Do not allow the current slider to have a value greater than
            `slidermax`


        dragging : bool
            if the slider can be dragged by the mouse

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8971 11874])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11891 11895])
                            ("event" variable nil (reparse-symbol function_parameters) [11897 11902]))                          
                        :documentation "update the slider position")
                        (reparse-symbol indented_block_body) [11879 13137])
                    ("set_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13154 13158])
                            ("val" variable nil (reparse-symbol function_parameters) [13160 13163]))                          )
                        (reparse-symbol indented_block_body) [13142 13533])
                    ("on_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13553 13557])
                            ("func" variable nil (reparse-symbol function_parameters) [13559 13563]))                          
                        :documentation "
        When the slider value is changed, call *func* with the new
        slider position

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [13538 13849])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13869 13873])
                            ("cid" variable nil (reparse-symbol function_parameters) [13875 13878]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [13854 14031])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14046 14050]))                          
                        :documentation "reset the slider to the initial value if needed")
                        (reparse-symbol indented_block_body) [14036 14193]))                  
                :type "class")
                nil [7735 14193])
            ("CheckButtons" type
               (:documentation "
    A GUI neutral radio button.

    For the check buttons to remain responsive you must keep a
    reference to this object.

    The following attributes are exposed

     *ax*
        The :class:`matplotlib.axes.Axes` instance the buttons are
        located in

     *labels*
        List of :class:`matplotlib.text.Text` instances

     *lines*
        List of (line1, line2) tuples for the x's in the check boxes.
        These lines exist for each box, but have ``set_visible(False)``
        when its box is not checked.

     *rectangles*
        List of :class:`matplotlib.patches.Rectangle` instances

    Connect to the CheckButtons with the :meth:`on_clicked` method
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *actives*
            A len(buttons) list of booleans indicating whether
             the button is active
        \"\"\"" code nil (reparse-symbol indented_block_body) [14976 15251])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [15260 15289])
                            ("ax" code nil (reparse-symbol indented_block_body) [15299 15316])
                            ("ax" code nil (reparse-symbol indented_block_body) [15325 15342])
                            ("ax" code nil (reparse-symbol indented_block_body) [15351 15373])
                            ("if" code nil (reparse-symbol indented_block_body) [15383 15556])
                            ("cnt" variable nil (reparse-symbol indented_block_body) [15565 15572])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [15581 15609])
                            ("self" variable nil (reparse-symbol indented_block_body) [15619 15635])
                            ("self" variable nil (reparse-symbol indented_block_body) [15644 15659])
                            ("self" variable nil (reparse-symbol indented_block_body) [15668 15688])
                            ("lineparams" variable nil (reparse-symbol indented_block_body) [15698 15819])
                            ("for" code nil (reparse-symbol indented_block_body) [15828 16672])
                            ("self" code nil (reparse-symbol indented_block_body) [16681 16736])
                            ("self" variable nil (reparse-symbol indented_block_body) [16746 16758])
                            ("self" variable nil (reparse-symbol indented_block_body) [16767 16786]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14940 14944])
                            ("ax" variable nil (reparse-symbol function_parameters) [14946 14948])
                            ("labels" variable nil (reparse-symbol function_parameters) [14950 14956])
                            ("actives" variable nil (reparse-symbol function_parameters) [14958 14965]))                          
                        :documentation "
        Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *actives*
            A len(buttons) list of booleans indicating whether
             the button is active
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14927 16787])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16805 16809])
                            ("event" variable nil (reparse-symbol function_parameters) [16811 16816]))                          )
                        (reparse-symbol indented_block_body) [16792 17274])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17294 17298])
                            ("index" variable nil (reparse-symbol function_parameters) [17300 17305]))                          
                        :documentation "
        Directly (de)activate a check button by index.

        *index* is an index into the original label list
            that this object was constructed with.
            Raises ValueError if *index* is invalid.

        Callbacks will be triggered if :attr:`eventson` is True.

        ")
                        (reparse-symbol indented_block_body) [17279 18074])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18094 18098])
                            ("func" variable nil (reparse-symbol function_parameters) [18100 18104]))                          
                        :documentation "
        When the button is clicked, call *func* with button label

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [18079 18365])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18385 18389])
                            ("cid" variable nil (reparse-symbol function_parameters) [18391 18394]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [18370 18547]))                  
                :type "class")
                nil [14195 18547])
            ("RadioButtons" type
               (:documentation "
    A GUI neutral radio button.

    For the buttons to remain responsive
    you must keep a reference to this object.

    The following attributes are exposed:

     *ax*
        The :class:`matplotlib.axes.Axes` instance the buttons are in

     *activecolor*
        The color of the button when clicked

     *labels*
        A list of :class:`matplotlib.text.Text` instances

     *circles*
        A list of :class:`matplotlib.patches.Circle` instances

     *value_selected*
        A string listing the current value selected

    Connect to the RadioButtons with the :meth:`on_clicked` method
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *active*
            The index into labels for the button that is active

        *activecolor*
            The color of the button when clicked
        \"\"\"" code nil (reparse-symbol indented_block_body) [19275 19588])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [19597 19626])
                            ("self" variable nil (reparse-symbol indented_block_body) [19635 19665])
                            ("self" variable nil (reparse-symbol indented_block_body) [19674 19700])
                            ("ax" code nil (reparse-symbol indented_block_body) [19710 19727])
                            ("ax" code nil (reparse-symbol indented_block_body) [19736 19753])
                            ("ax" code nil (reparse-symbol indented_block_body) [19762 19784])
                            ("dy" code nil (reparse-symbol indented_block_body) [19793 19820])
                            ("ys" variable nil (reparse-symbol indented_block_body) [19829 19870])
                            ("cnt" variable nil (reparse-symbol indented_block_body) [19879 19886])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [19895 19923])
                            ("self" variable nil (reparse-symbol indented_block_body) [19933 19949])
                            ("self" variable nil (reparse-symbol indented_block_body) [19958 19975])
                            ("for" code nil (reparse-symbol indented_block_body) [19984 20611])
                            ("self" code nil (reparse-symbol indented_block_body) [20620 20675])
                            ("self" variable nil (reparse-symbol indented_block_body) [20685 20697])
                            ("self" variable nil (reparse-symbol indented_block_body) [20706 20725]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19218 19222])
                            ("ax" variable nil (reparse-symbol function_parameters) [19224 19226])
                            ("labels" variable nil (reparse-symbol function_parameters) [19228 19234])
                            ("active" variable nil (reparse-symbol function_parameters) [19236 19242])
                            ("activecolor" variable nil (reparse-symbol function_parameters) [19246 19257]))                          
                        :documentation "
        Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *active*
            The index into labels for the button that is active

        *activecolor*
            The color of the button when clicked
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19205 20726])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20744 20748])
                            ("event" variable nil (reparse-symbol function_parameters) [20750 20755]))                          )
                        (reparse-symbol indented_block_body) [20731 21404])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21424 21428])
                            ("index" variable nil (reparse-symbol function_parameters) [21430 21435]))                          
                        :documentation "
        Trigger which radio button to make active.

        *index* is an index into the original label list
            that this object was constructed with.
            Raise ValueError if the index is invalid.

        Callbacks will be triggered if :attr:`eventson` is True.

        ")
                        (reparse-symbol indented_block_body) [21409 22351])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22371 22375])
                            ("func" variable nil (reparse-symbol function_parameters) [22377 22381]))                          
                        :documentation "
        When the button is clicked, call *func* with button label

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [22356 22642])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22662 22666])
                            ("cid" variable nil (reparse-symbol function_parameters) [22668 22671]))                          
                        :documentation "remove the observer with connection id *cid*")
                        (reparse-symbol indented_block_body) [22647 22824]))                  
                :type "class")
                nil [18549 22824])
            ("SubplotTool" type
               (:documentation "
    A tool to adjust the subplot params of a :class:`matplotlib.figure.Figure`.
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *targetfig*
            The figure instance to adjust.

        *toolfig*
            The figure instance to embed the subplot tool into. If
            *None*, a default figure will be created. If you are using
            this from the GUI
        \"\"\"" code nil (reparse-symbol indented_block_body) [23001 23266])
                            ("self" variable nil (reparse-symbol indented_block_body) [23345 23371])
                            ("toolfig" code nil (reparse-symbol indented_block_body) [23380 23424])
                            ("toolbarfmt" type
                               (:members 
                                  ( ("__init__" function
                                       (:suite 
                                          ( ("self" variable nil (reparse-symbol indented_block_body) [23508 23528]))                                          
                                        :parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [23477 23481])
                                            ("slider" variable nil (reparse-symbol function_parameters) [23483 23489]))                                          
                                        :constructor-flag t)
                                        (reparse-symbol indented_block_body) [23464 23529])
                                    ("__call__" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [23555 23559])
                                            ("x" variable nil (reparse-symbol function_parameters) [23561 23562])
                                            ("y" variable nil (reparse-symbol function_parameters) [23564 23565]))                                          )
                                        (reparse-symbol indented_block_body) [23542 23715]))                                  
                                :type "class")
                                (reparse-symbol indented_block_body) [23434 23715])
                            ("self" variable nil (reparse-symbol indented_block_body) [23724 23762])
                            ("self" code nil (reparse-symbol indented_block_body) [23771 23835])
                            ("self" code nil (reparse-symbol indented_block_body) [23844 23875])
                            ("self" variable nil (reparse-symbol indented_block_body) [23885 24047])
                            ("self" code nil (reparse-symbol indented_block_body) [24056 24097])
                            ("self" variable nil (reparse-symbol indented_block_body) [24107 24147])
                            ("self" code nil (reparse-symbol indented_block_body) [24156 24189])
                            ("self" variable nil (reparse-symbol indented_block_body) [24198 24407])
                            ("self" code nil (reparse-symbol indented_block_body) [24416 24461])
                            ("self" variable nil (reparse-symbol indented_block_body) [24471 24510])
                            ("self" code nil (reparse-symbol indented_block_body) [24519 24551])
                            ("self" variable nil (reparse-symbol indented_block_body) [24560 24728])
                            ("self" code nil (reparse-symbol indented_block_body) [24737 24780])
                            ("self" variable nil (reparse-symbol indented_block_body) [24790 24827])
                            ("self" code nil (reparse-symbol indented_block_body) [24836 24866])
                            ("self" variable nil (reparse-symbol indented_block_body) [24875 25031])
                            ("self" code nil (reparse-symbol indented_block_body) [25040 25079])
                            ("self" variable nil (reparse-symbol indented_block_body) [25089 25129])
                            ("self" code nil (reparse-symbol indented_block_body) [25138 25171])
                            ("self" variable nil (reparse-symbol indented_block_body) [25180 25354])
                            ("self" code nil (reparse-symbol indented_block_body) [25363 25408])
                            ("self" variable nil (reparse-symbol indented_block_body) [25418 25458])
                            ("self" code nil (reparse-symbol indented_block_body) [25467 25500])
                            ("self" variable nil (reparse-symbol indented_block_body) [25509 25683])
                            ("self" code nil (reparse-symbol indented_block_body) [25692 25737])
                            ("self" variable nil (reparse-symbol indented_block_body) [25769 25813])
                            ("self" variable nil (reparse-symbol indented_block_body) [25822 25866])
                            ("self" variable nil (reparse-symbol indented_block_body) [25875 25919])
                            ("self" variable nil (reparse-symbol indented_block_body) [25928 25972])
                            ("bax" variable nil (reparse-symbol indented_block_body) [25982 26030])
                            ("self" variable nil (reparse-symbol indented_block_body) [26039 26078])
                            ("sliders" variable nil (reparse-symbol indented_block_body) [26088 26226])
                            ("func" function (:arguments 
                              ( ("event" variable nil (reparse-symbol function_parameters) [26245 26250]))                              ) (reparse-symbol indented_block_body) [26236 26920])
                            ("validate" variable nil (reparse-symbol indented_block_body) [27091 27130])
                            ("toolfig" variable nil (reparse-symbol indented_block_body) [27139 27175])
                            ("self" code nil (reparse-symbol indented_block_body) [27184 27217])
                            ("toolfig" variable nil (reparse-symbol indented_block_body) [27226 27265]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22966 22970])
                            ("targetfig" variable nil (reparse-symbol function_parameters) [22972 22981])
                            ("toolfig" variable nil (reparse-symbol function_parameters) [22983 22990]))                          
                        :documentation "
        *targetfig*
            The figure instance to adjust.

        *toolfig*
            The figure instance to embed the subplot tool into. If
            *None*, a default figure will be created. If you are using
            this from the GUI
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22953 27266])
                    ("funcleft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27284 27288])
                            ("val" variable nil (reparse-symbol function_parameters) [27290 27293]))                          )
                        (reparse-symbol indented_block_body) [27271 27410])
                    ("funcright" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27429 27433])
                            ("val" variable nil (reparse-symbol function_parameters) [27435 27438]))                          )
                        (reparse-symbol indented_block_body) [27415 27556])
                    ("funcbottom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27576 27580])
                            ("val" variable nil (reparse-symbol function_parameters) [27582 27585]))                          )
                        (reparse-symbol indented_block_body) [27561 27704])
                    ("functop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27721 27725])
                            ("val" variable nil (reparse-symbol function_parameters) [27727 27730]))                          )
                        (reparse-symbol indented_block_body) [27709 27846])
                    ("funcwspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27866 27870])
                            ("val" variable nil (reparse-symbol function_parameters) [27872 27875]))                          )
                        (reparse-symbol indented_block_body) [27851 27994])
                    ("funchspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28014 28018])
                            ("val" variable nil (reparse-symbol function_parameters) [28020 28023]))                          )
                        (reparse-symbol indented_block_body) [27999 28142]))                  
                :type "class")
                nil [22826 28142])
            ("Cursor" type
               (:documentation "
    A horizontal and vertical line that spans the axes and moves with
    the pointer.  You can turn off the hline or vline respectively with
    the following attributes:

      *horizOn*
        Controls the visibility of the horizontal line

      *vertOn*
        Controls the visibility of the horizontal line

    and the visibility of the cursor itself with the *visible* attribute.

    For the cursor to remain responsive you must keep a reference to
    it.
    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add a cursor to *ax*.  If ``useblit=True``, use the backend-
        dependent blitting features for faster updates (GTKAgg
        only for now).  *lineprops* is a dictionary of line properties.

        .. plot :: mpl_examples/widgets/cursor.py
        \"\"\"" code nil (reparse-symbol indented_block_body) [28762 29032])
                            ("AxesWidget" code nil (reparse-symbol indented_block_body) [29094 29123])
                            ("self" code nil (reparse-symbol indented_block_body) [29133 29187])
                            ("self" code nil (reparse-symbol indented_block_body) [29196 29240])
                            ("self" variable nil (reparse-symbol indented_block_body) [29250 29269])
                            ("self" variable nil (reparse-symbol indented_block_body) [29278 29300])
                            ("self" variable nil (reparse-symbol indented_block_body) [29309 29329])
                            ("self" code nil (reparse-symbol indented_block_body) [29338 29390])
                            ("if" code nil (reparse-symbol indented_block_body) [29400 29458])
                            ("self" variable nil (reparse-symbol indented_block_body) [29466 29537])
                            ("self" variable nil (reparse-symbol indented_block_body) [29546 29617])
                            ("self" variable nil (reparse-symbol indented_block_body) [29627 29649])
                            ("self" variable nil (reparse-symbol indented_block_body) [29658 29680]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28671 28675])
                            ("ax" variable nil (reparse-symbol function_parameters) [28677 28679])
                            ("horizOn" variable nil (reparse-symbol function_parameters) [28681 28688])
                            ("vertOn" variable nil (reparse-symbol function_parameters) [28695 28701])
                            ("useblit" variable nil (reparse-symbol function_parameters) [28708 28715])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [28740 28751]))                          
                        :documentation "
        Add a cursor to *ax*.  If ``useblit=True``, use the backend-
        dependent blitting features for faster updates (GTKAgg
        only for now).  *lineprops* is a dictionary of line properties.

        .. plot :: mpl_examples/widgets/cursor.py
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28658 29681])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29696 29700])
                            ("event" variable nil (reparse-symbol function_parameters) [29702 29707]))                          
                        :documentation "clear the cursor")
                        (reparse-symbol indented_block_body) [29686 29963])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29979 29983])
                            ("event" variable nil (reparse-symbol function_parameters) [29985 29990]))                          
                        :documentation "on mouse motion draw the cursor if visible")
                        (reparse-symbol indented_block_body) [29968 30759])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30776 30780]))                          )
                        (reparse-symbol indented_block_body) [30764 31117]))                  
                :type "class")
                nil [28144 31117])
            ("MultiCursor" type
               (:documentation "
    Provide a vertical (default) and/or horizontal line cursor shared between
    multiple axes.

    For the cursor to remain responsive you must keep a reference to
    it.

    Example usage::

        from matplotlib.widgets import MultiCursor
        from pylab import figure, show, np

        t = np.arange(0.0, 2.0, 0.01)
        s1 = np.sin(2*np.pi*t)
        s2 = np.sin(4*np.pi*t)
        fig = figure()
        ax1 = fig.add_subplot(211)
        ax1.plot(t, s1)


        ax2 = fig.add_subplot(212, sharex=ax1)
        ax2.plot(t, s2)

        multi = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1,
                            horizOn=False, vertOn=True)
        show()

    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [31970 31990])
                            ("self" variable nil (reparse-symbol indented_block_body) [31999 32015])
                            ("self" variable nil (reparse-symbol indented_block_body) [32024 32046])
                            ("self" variable nil (reparse-symbol indented_block_body) [32055 32075])
                            ("xmin, xmax" code nil (reparse-symbol indented_block_body) [32085 32117])
                            ("ymin, ymax" code nil (reparse-symbol indented_block_body) [32126 32158])
                            ("xmid" code nil (reparse-symbol indented_block_body) [32167 32193])
                            ("ymid" code nil (reparse-symbol indented_block_body) [32202 32228])
                            ("self" variable nil (reparse-symbol indented_block_body) [32238 32257])
                            ("self" code nil (reparse-symbol indented_block_body) [32266 32318])
                            ("self" variable nil (reparse-symbol indented_block_body) [32327 32349])
                            ("self" variable nil (reparse-symbol indented_block_body) [32358 32380])
                            ("if" code nil (reparse-symbol indented_block_body) [32390 32448])
                            ("if" code nil (reparse-symbol indented_block_body) [32457 32626])
                            ("if" code nil (reparse-symbol indented_block_body) [32635 32805])
                            ("self" code nil (reparse-symbol indented_block_body) [32814 32828]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31868 31872])
                            ("canvas" variable nil (reparse-symbol function_parameters) [31874 31880])
                            ("axes" variable nil (reparse-symbol function_parameters) [31882 31886])
                            ("useblit" variable nil (reparse-symbol function_parameters) [31888 31895])
                            ("horizOn" variable nil (reparse-symbol function_parameters) [31902 31909])
                            ("vertOn" variable nil (reparse-symbol function_parameters) [31917 31923])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [31947 31958]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31855 32829])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32846 32850]))                          
                        :documentation "connect events")
                        (reparse-symbol indented_block_body) [32834 33092])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33112 33116]))                          
                        :documentation "disconnect events")
                        (reparse-symbol indented_block_body) [33097 33253])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33268 33272])
                            ("event" variable nil (reparse-symbol function_parameters) [33274 33279]))                          
                        :documentation "clear the cursor")
                        (reparse-symbol indented_block_body) [33258 33572])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33588 33592])
                            ("event" variable nil (reparse-symbol function_parameters) [33594 33599]))                          )
                        (reparse-symbol indented_block_body) [33577 34214])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34231 34235]))                          )
                        (reparse-symbol indented_block_body) [34219 34732]))                  
                :type "class")
                nil [31119 34732])
            ("_SelectorWidget" type
               (:superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("AxesWidget" code nil (reparse-symbol indented_block_body) [34887 34916])
                            ("self" variable nil (reparse-symbol indented_block_body) [34926 34945])
                            ("self" variable nil (reparse-symbol indented_block_body) [34954 34978])
                            ("self" code nil (reparse-symbol indented_block_body) [34987 35039])
                            ("self" code nil (reparse-symbol indented_block_body) [35048 35077])
                            ("self" variable nil (reparse-symbol indented_block_body) [35087 35218])
                            ("self" code nil (reparse-symbol indented_block_body) [35227 35285])
                            ("self" variable nil (reparse-symbol indented_block_body) [35295 35317])
                            ("self" variable nil (reparse-symbol indented_block_body) [35326 35343])
                            ("if" code nil (reparse-symbol indented_block_body) [35353 35475])
                            ("self" variable nil (reparse-symbol indented_block_body) [35538 35560])
                            ("self" variable nil (reparse-symbol indented_block_body) [35621 35645])
                            ("self" variable nil (reparse-symbol indented_block_body) [35654 35677])
                            ("self" variable nil (reparse-symbol indented_block_body) [35686 35704]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34787 34791])
                            ("ax" variable nil (reparse-symbol function_parameters) [34793 34795])
                            ("onselect" variable nil (reparse-symbol function_parameters) [34797 34805])
                            ("useblit" variable nil (reparse-symbol function_parameters) [34807 34814])
                            ("button" variable nil (reparse-symbol function_parameters) [34822 34828])
                            ("state_modifier_keys" variable nil (reparse-symbol function_parameters) [34852 34871]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34774 35705])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35725 35729])
                            ("active" variable nil (reparse-symbol function_parameters) [35731 35737]))                          )
                        (reparse-symbol indented_block_body) [35710 35844])
                    ("update_background" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35871 35875])
                            ("event" variable nil (reparse-symbol function_parameters) [35877 35882]))                          
                        :documentation "force an update of the background")
                        (reparse-symbol indented_block_body) [35849 36177])
                    ("connect_default_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36209 36213]))                          
                        :documentation "Connect the major canvas events to methods.")
                        (reparse-symbol indented_block_body) [36182 36721])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36737 36741])
                            ("event" variable nil (reparse-symbol function_parameters) [36743 36748]))                          
                        :documentation "return *True* if *event* should be ignored")
                        (reparse-symbol indented_block_body) [36726 37813])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37829 37833]))                          
                        :documentation "draw using newfangled blit or oldfangled draw depending on
        useblit

        ")
                        (reparse-symbol indented_block_body) [37818 38328])
                    ("_get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38347 38351])
                            ("event" variable nil (reparse-symbol function_parameters) [38353 38358]))                          
                        :documentation "Get the xdata and ydata for event, with limits")
                        (reparse-symbol indented_block_body) [38333 38724])
                    ("_clean_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38746 38750])
                            ("event" variable nil (reparse-symbol function_parameters) [38752 38757]))                          
                        :documentation "Clean up an event

        Use prev event if there is no xdata
        Limit the xdata and ydata to the axes limits
        Set the prev event
        ")
                        (reparse-symbol indented_block_body) [38729 39158])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39173 39177])
                            ("event" variable nil (reparse-symbol function_parameters) [39179 39184]))                          
                        :documentation "Button press handler and validator")
                        (reparse-symbol indented_block_body) [39163 39699])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39715 39719])
                            ("event" variable nil (reparse-symbol function_parameters) [39721 39726]))                          
                        :documentation "Button press handler")
                        (reparse-symbol indented_block_body) [39704 39777])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39794 39798])
                            ("event" variable nil (reparse-symbol function_parameters) [39800 39805]))                          
                        :documentation "Button release event handler and validator")
                        (reparse-symbol indented_block_body) [39782 40192])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40210 40214])
                            ("event" variable nil (reparse-symbol function_parameters) [40216 40221]))                          
                        :documentation "Button release event handler")
                        (reparse-symbol indented_block_body) [40197 40280])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40296 40300])
                            ("event" variable nil (reparse-symbol function_parameters) [40302 40307]))                          
                        :documentation "Cursor move event handler and validator")
                        (reparse-symbol indented_block_body) [40285 40541])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40558 40562])
                            ("event" variable nil (reparse-symbol function_parameters) [40564 40569]))                          
                        :documentation "Cursor move event handler")
                        (reparse-symbol indented_block_body) [40546 40625])
                    ("on_scroll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40644 40648])
                            ("event" variable nil (reparse-symbol function_parameters) [40650 40655]))                          
                        :documentation "Mouse scroll event handler and validator")
                        (reparse-symbol indented_block_body) [40630 40783])
                    ("_on_scroll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40803 40807])
                            ("event" variable nil (reparse-symbol function_parameters) [40809 40814]))                          
                        :documentation "Mouse scroll event handler")
                        (reparse-symbol indented_block_body) [40788 40871])
                    ("on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40893 40897])
                            ("event" variable nil (reparse-symbol function_parameters) [40899 40904]))                          
                        :documentation "Key press event handler and validator for all selection widgets")
                        (reparse-symbol indented_block_body) [40876 41479])
                    ("_on_key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41502 41506])
                            ("event" variable nil (reparse-symbol function_parameters) [41508 41513]))                          
                        :documentation "Key press event handler - use for widget-specific key press actions.
        ")
                        (reparse-symbol indented_block_body) [41484 41621])
                    ("on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41645 41649])
                            ("event" variable nil (reparse-symbol function_parameters) [41651 41656]))                          
                        :documentation "Key release event handler and validator")
                        (reparse-symbol indented_block_body) [41626 41964])
                    ("_on_key_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41989 41993])
                            ("event" variable nil (reparse-symbol function_parameters) [41995 42000]))                          
                        :documentation "Key release event handler")
                        (reparse-symbol indented_block_body) [41969 42056])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42077 42081])
                            ("visible" variable nil (reparse-symbol function_parameters) [42083 42090]))                          
                        :documentation " Set the visibility of our artists ")
                        (reparse-symbol indented_block_body) [42061 42250]))                  
                :type "class")
                nil [34734 42250])
            ("SpanSelector" type
               (:documentation "
    Visually select a min/max range on a single axis and call a function with
    those values.

    To guarantee that the selector remains responsive, keep a reference to
    it.

    In order to turn off the SpanSelector, set `span_selector.active=False`. To
    turn it back on, set `span_selector.active=True`.

    Parameters
    ----------
    ax :  :class:`matplotlib.axes.Axes` object

    onselect : func(min, max), min/max are floats

    direction : \"horizontal\" or \"vertical\"
      The axis along which to draw the span selector

    minspan : float, default is None
     If selection is less than *minspan*, do not call *onselect*

    useblit : bool, default is False
      If True, use the backend-dependent blitting features for faster
      canvas updates. Only available for GTKAgg right now.

    rectprops : dict, default is None
      Dictionary of :class:`matplotlib.patches.Patch` properties

    onmove_callback : func(min, max), min/max are floats, default is None
      Called on mouse move while the span is being selected

    span_stays : bool, default is False
      If True, the span stays visible after the mouse is released

    button : int or list of ints
      Determines which mouse buttons activate the span selector
        1 = left mouse button\\n
        2 = center mouse button (scroll wheel)\\n
        3 = right mouse button\\n

    Examples
    --------
    >>> import matplotlib.pyplot as plt
    >>> import matplotlib.widgets as mwidgets
    >>> fig, ax = plt.subplots()
    >>> ax.plot([1, 2, 3], [10, 50, 100])
    >>> def onselect(vmin, vmax):
            print(vmin, vmax)
    >>> rectprops = dict(facecolor='blue', alpha=0.5)
    >>> span = mwidgets.SpanSelector(ax, onselect, 'horizontal',
                                     rectprops=rectprops)
    >>> fig.show()

    See also: :ref:`widgets-span_selector`

    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_SelectorWidget" code nil (reparse-symbol indented_block_body) [44358 44467])
                            ("if" code nil (reparse-symbol indented_block_body) [44477 44556])
                            ("rectprops" variable nil (reparse-symbol indented_block_body) [44565 44601])
                            ("if" code nil (reparse-symbol indented_block_body) [44611 44764])
                            ("self" variable nil (reparse-symbol indented_block_body) [44772 44798])
                            ("self" variable nil (reparse-symbol indented_block_body) [44808 44824])
                            ("self" variable nil (reparse-symbol indented_block_body) [44833 44851])
                            ("self" variable nil (reparse-symbol indented_block_body) [44861 44887])
                            ("self" variable nil (reparse-symbol indented_block_body) [44896 44934])
                            ("self" variable nil (reparse-symbol indented_block_body) [44943 44965])
                            ("self" variable nil (reparse-symbol indented_block_body) [44974 45002])
                            ("self" variable nil (reparse-symbol indented_block_body) [45055 45073])
                            ("self" variable nil (reparse-symbol indented_block_body) [45142 45160])
                            ("self" code nil (reparse-symbol indented_block_body) [45169 45186]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44185 44189])
                            ("ax" variable nil (reparse-symbol function_parameters) [44191 44193])
                            ("onselect" variable nil (reparse-symbol function_parameters) [44195 44203])
                            ("direction" variable nil (reparse-symbol function_parameters) [44205 44214])
                            ("minspan" variable nil (reparse-symbol function_parameters) [44216 44223])
                            ("useblit" variable nil (reparse-symbol function_parameters) [44230 44237])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [44262 44271])
                            ("onmove_callback" variable nil (reparse-symbol function_parameters) [44278 44293])
                            ("span_stays" variable nil (reparse-symbol function_parameters) [44300 44310])
                            ("button" variable nil (reparse-symbol function_parameters) [44335 44341]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44172 45187])
                    ("new_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45205 45209])
                            ("ax" variable nil (reparse-symbol function_parameters) [45211 45213]))                          
                        :documentation "Set SpanSelector to operate on a new Axes")
                        (reparse-symbol indented_block_body) [45192 46472])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46488 46492])
                            ("event" variable nil (reparse-symbol function_parameters) [46494 46499]))                          
                        :documentation "return *True* if *event* should be ignored")
                        (reparse-symbol indented_block_body) [46477 46630])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46646 46650])
                            ("event" variable nil (reparse-symbol function_parameters) [46652 46657]))                          
                        :documentation "on button press event")
                        (reparse-symbol indented_block_body) [46635 47165])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47183 47187])
                            ("event" variable nil (reparse-symbol function_parameters) [47189 47194]))                          
                        :documentation "on button release event")
                        (reparse-symbol indented_block_body) [47170 48150])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48167 48171])
                            ("event" variable nil (reparse-symbol function_parameters) [48173 48178]))                          
                        :documentation "on motion notify event")
                        (reparse-symbol indented_block_body) [48155 49218]))                  
                :type "class")
                nil [42252 49218])
            ("ToolHandles" type
               (:documentation "Control handles for canvas tools.

    Parameters
    ----------
    ax : :class:`matplotlib.axes.Axes`
        Matplotlib axes where tool handles are displayed.
    x, y : 1D arrays
        Coordinates of control handles.
    marker : str
        Shape of marker used to display handle. See `matplotlib.pyplot.plot`.
    marker_props : dict
        Additional marker properties. See :class:`matplotlib.lines.Line2D`.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [49768 49780])
                            ("props" variable nil (reparse-symbol indented_block_body) [49790 49918])
                            ("props" code nil (reparse-symbol indented_block_body) [49927 49989])
                            ("self" variable nil (reparse-symbol indented_block_body) [49998 50053])
                            ("self" code nil (reparse-symbol indented_block_body) [50062 50093])
                            ("self" variable nil (reparse-symbol indented_block_body) [50102 50129]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49698 49702])
                            ("ax" variable nil (reparse-symbol function_parameters) [49704 49706])
                            ("x" variable nil (reparse-symbol function_parameters) [49708 49709])
                            ("y" variable nil (reparse-symbol function_parameters) [49711 49712])
                            ("marker" variable nil (reparse-symbol function_parameters) [49714 49720])
                            ("marker_props" variable nil (reparse-symbol function_parameters) [49726 49738])
                            ("useblit" variable nil (reparse-symbol function_parameters) [49745 49752]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49685 50130])
                    ("x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50155 50159]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [50135 50203])
                    ("y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50228 50232]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [50208 50276])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50294 50298])
                            ("pts" variable nil (reparse-symbol function_parameters) [50300 50303])
                            ("y" variable nil (reparse-symbol function_parameters) [50305 50306]))                          
                        :documentation "Set x and y positions of handles")
                        (reparse-symbol indented_block_body) [50281 50478])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50499 50503])
                            ("val" variable nil (reparse-symbol function_parameters) [50505 50508]))                          )
                        (reparse-symbol indented_block_body) [50483 50550])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50572 50576])
                            ("val" variable nil (reparse-symbol function_parameters) [50578 50581]))                          )
                        (reparse-symbol indented_block_body) [50555 50624])
                    ("closest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50641 50645])
                            ("x" variable nil (reparse-symbol function_parameters) [50647 50648])
                            ("y" variable nil (reparse-symbol function_parameters) [50650 50651]))                          
                        :documentation "Return index and pixel distance to closest index.")
                        (reparse-symbol indented_block_body) [50629 51092]))                  
                :type "class")
                nil [49220 51092])
            ("RectangleSelector" type
               (:documentation "
    Select a rectangular region of an axes.

    For the cursor to remain responsive you must keep a reference to
    it.

    Example usage::

        from matplotlib.widgets import  RectangleSelector
        from pylab import *

        def onselect(eclick, erelease):
          'eclick and erelease are matplotlib events at press and release'
          print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))
          print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))
          print(' used button   : ', eclick.button)

        def toggle_selector(event):
            print(' Key pressed.')
            if event.key in ['Q', 'q'] and toggle_selector.RS.active:
                print(' RectangleSelector deactivated.')
                toggle_selector.RS.set_active(False)
            if event.key in ['A', 'a'] and not toggle_selector.RS.active:
                print(' RectangleSelector activated.')
                toggle_selector.RS.set_active(True)

        x = arange(100)/(99.0)
        y = sin(x)
        fig = figure
        ax = subplot(111)
        ax.plot(x,y)

        toggle_selector.RS = RectangleSelector(ax, onselect, drawtype='line')
        connect('key_press_event', toggle_selector)
        show()
    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("_shape_klass" variable nil (reparse-symbol indented_block_body) [52409 52433])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a selector in *ax*.  When a selection is made, clear
        the span and call onselect with::

          onselect(pos_1, pos_2)

        and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are
        arrays of length 2 containing the x- and y-coordinate.

        If *minspanx* is not *None* then events smaller than *minspanx*
        in x direction are ignored (it's the same for y).

        The rectangle is drawn with *rectprops*; default::

          rectprops = dict(facecolor='red', edgecolor = 'black',
                           alpha=0.2, fill=True)

        The line is drawn with *lineprops*; default::

          lineprops = dict(color='black', linestyle='-',
                           linewidth = 2, alpha=0.5)

        Use *drawtype* if you want the mouse to draw a line,
        a box or nothing between click and actual position by setting

        ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.

        *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*
        and *minspanx* will be interpreted in the same coordinates as
        the x and y axis. If 'pixels', they are in pixels.

        *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button

        *interactive* will draw a set of handles and allow you interact
        with the widget after it is drawn.

        *state_modifier_keys* are keyboard modifiers that affect the behavior
        of the widget.

        The defaults are:
        dict(move=' ', clear='escape', square='shift', center='ctrl')

        Keyboard modifiers, which:
        'move': Move the existing shape.
        'clear': Clear the current shape.
        'square': Makes the shape square.
        'center': Make the initial point the center of the shape.
        'square' and 'center' can be combined.
        \"\"\"" code nil (reparse-symbol indented_block_body) [52751 54932])
                            ("_SelectorWidget" code nil (reparse-symbol indented_block_body) [54941 55124])
                            ("self" variable nil (reparse-symbol indented_block_body) [55134 55153])
                            ("self" variable nil (reparse-symbol indented_block_body) [55162 55181])
                            ("self" variable nil (reparse-symbol indented_block_body) [55190 55220])
                            ("if" code nil (reparse-symbol indented_block_body) [55230 55397])
                            ("if" code nil (reparse-symbol indented_block_body) [55406 55855])
                            ("if" code nil (reparse-symbol indented_block_body) [55863 56288])
                            ("self" variable nil (reparse-symbol indented_block_body) [56297 56321])
                            ("self" variable nil (reparse-symbol indented_block_body) [56330 56354])
                            ("if" code nil (reparse-symbol indented_block_body) [56364 56509])
                            ("self" variable nil (reparse-symbol indented_block_body) [56518 56546])
                            ("self" variable nil (reparse-symbol indented_block_body) [56555 56579])
                            ("self" variable nil (reparse-symbol indented_block_body) [56589 56611])
                            ("if" code nil (reparse-symbol indented_block_body) [56621 56753])
                            ("self" variable nil (reparse-symbol indented_block_body) [56761 56806])
                            ("xc, yc" code nil (reparse-symbol indented_block_body) [56815 56836])
                            ("self" variable nil (reparse-symbol indented_block_body) [56845 56981])
                            ("self" variable nil (reparse-symbol indented_block_body) [56991 57030])
                            ("xe, ye" code nil (reparse-symbol indented_block_body) [57039 57065])
                            ("self" variable nil (reparse-symbol indented_block_body) [57074 57259])
                            ("xc, yc" code nil (reparse-symbol indented_block_body) [57269 57289])
                            ("self" variable nil (reparse-symbol indented_block_body) [57298 57490])
                            ("self" variable nil (reparse-symbol indented_block_body) [57500 57525])
                            ("self" variable nil (reparse-symbol indented_block_body) [57535 57696])
                            ("if" code nil (reparse-symbol indented_block_body) [57706 57773])
                            ("self" variable nil (reparse-symbol indented_block_body) [57782 57811]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52452 52456])
                            ("ax" variable nil (reparse-symbol function_parameters) [52458 52460])
                            ("onselect" variable nil (reparse-symbol function_parameters) [52462 52470])
                            ("drawtype" variable nil (reparse-symbol function_parameters) [52472 52480])
                            ("minspanx" variable nil (reparse-symbol function_parameters) [52505 52513])
                            ("minspany" variable nil (reparse-symbol function_parameters) [52520 52528])
                            ("useblit" variable nil (reparse-symbol function_parameters) [52535 52542])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [52567 52576])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [52583 52592])
                            ("spancoords" variable nil (reparse-symbol function_parameters) [52599 52609])
                            ("button" variable nil (reparse-symbol function_parameters) [52635 52641])
                            ("maxdist" variable nil (reparse-symbol function_parameters) [52648 52655])
                            ("marker_props" variable nil (reparse-symbol function_parameters) [52660 52672])
                            ("interactive" variable nil (reparse-symbol function_parameters) [52696 52707])
                            ("state_modifier_keys" variable nil (reparse-symbol function_parameters) [52715 52734]))                          
                        :documentation "
        Create a selector in *ax*.  When a selection is made, clear
        the span and call onselect with::

          onselect(pos_1, pos_2)

        and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are
        arrays of length 2 containing the x- and y-coordinate.

        If *minspanx* is not *None* then events smaller than *minspanx*
        in x direction are ignored (it's the same for y).

        The rectangle is drawn with *rectprops*; default::

          rectprops = dict(facecolor='red', edgecolor = 'black',
                           alpha=0.2, fill=True)

        The line is drawn with *lineprops*; default::

          lineprops = dict(color='black', linestyle='-',
                           linewidth = 2, alpha=0.5)

        Use *drawtype* if you want the mouse to draw a line,
        a box or nothing between click and actual position by setting

        ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.

        *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*
        and *minspanx* will be interpreted in the same coordinates as
        the x and y axis. If 'pixels', they are in pixels.

        *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button

        *interactive* will draw a set of handles and allow you interact
        with the widget after it is drawn.

        *state_modifier_keys* are keyboard modifiers that affect the behavior
        of the widget.

        The defaults are:
        dict(move=' ', clear='escape', square='shift', center='ctrl')

        Keyboard modifiers, which:
        'move': Move the existing shape.
        'clear': Clear the current shape.
        'square': Makes the shape square.
        'center': Make the initial point the center of the shape.
        'square' and 'center' can be combined.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52439 57812])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57828 57832])
                            ("event" variable nil (reparse-symbol function_parameters) [57834 57839]))                          
                        :documentation "on button press event")
                        (reparse-symbol indented_block_body) [57817 58324])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58342 58346])
                            ("event" variable nil (reparse-symbol function_parameters) [58348 58353]))                          
                        :documentation "on button release event")
                        (reparse-symbol indented_block_body) [58329 60237])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60254 60258])
                            ("event" variable nil (reparse-symbol function_parameters) [60260 60265]))                          
                        :documentation "on motion notify event if box/line is wanted")
                        (reparse-symbol indented_block_body) [60242 62201])
                    ("_rect_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62235 62239]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [62206 62659])
                    ("corners" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62690 62694]))                          
                        :documentation "Corners of rectangle from lower left, moving clockwise.")
                        (reparse-symbol indented_block_body) [62664 62927])
                    ("edge_centers" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62963 62967]))                          
                        :documentation "Midpoint of rectangle edges from left, moving clockwise.")
                        (reparse-symbol indented_block_body) [62932 63247])
                    ("center" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63277 63281]))                          
                        :documentation "Center of rectangle")
                        (reparse-symbol indented_block_body) [63252 63415])
                    ("extents" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63446 63450]))                          
                        :documentation "Return (xmin, xmax, ymin, ymax).")
                        (reparse-symbol indented_block_body) [63420 63679])
                    ("extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63716 63720])
                            ("extents" variable nil (reparse-symbol function_parameters) [63722 63729]))                          
                        :decorators 
                          ( ("extents.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [63684 64054])
                    ("draw_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64074 64078])
                            ("extents" variable nil (reparse-symbol function_parameters) [64080 64087]))                          )
                        (reparse-symbol indented_block_body) [64059 64728])
                    ("_set_active_handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64756 64760])
                            ("event" variable nil (reparse-symbol function_parameters) [64762 64767]))                          
                        :documentation "Set active handle based on the location of the mouse event")
                        (reparse-symbol indented_block_body) [64733 66097])
                    ("geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66129 66133]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [66102 66394]))                  
                :type "class")
                nil [51094 66394])
            ("EllipseSelector" type
               (:documentation "
    Select an elliptical region of an axes.

    For the cursor to remain responsive you must keep a reference to
    it.

    Example usage::

        from matplotlib.widgets import  EllipseSelector
        from pylab import *

        def onselect(eclick, erelease):
          'eclick and erelease are matplotlib events at press and release'
          print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))
          print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))
          print(' used button   : ', eclick.button)

        def toggle_selector(event):
            print(' Key pressed.')
            if event.key in ['Q', 'q'] and toggle_selector.ES.active:
                print(' EllipseSelector deactivated.')
                toggle_selector.RS.set_active(False)
            if event.key in ['A', 'a'] and not toggle_selector.ES.active:
                print(' EllipseSelector activated.')
                toggle_selector.ES.set_active(True)

        x = arange(100)/(99.0)
        y = sin(x)
        fig = figure
        ax = subplot(111)
        ax.plot(x,y)

        toggle_selector.ES = EllipseSelector(ax, onselect, drawtype='line')
        connect('key_press_event', toggle_selector)
        show()
    "
                :superclasses ("RectangleSelector")
                :members 
                  ( ("_shape_klass" variable nil (reparse-symbol indented_block_body) [67702 67724])
                    ("draw_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67745 67749])
                            ("extents" variable nil (reparse-symbol function_parameters) [67751 67758]))                          )
                        (reparse-symbol indented_block_body) [67730 68341])
                    ("_rect_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68375 68379]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [68346 68775]))                  
                :type "class")
                nil [66396 68775])
            ("LassoSelector" type
               (:documentation "Selection curve of an arbitrary shape.

    For the selector to remain responsive you must keep a reference to
    it.

    The selected path can be used in conjunction with
    :func:`~matplotlib.path.Path.contains_point` to select
    data points from an image.

    In contrast to :class:`Lasso`, `LassoSelector` is written with an interface
    similar to :class:`RectangleSelector` and :class:`SpanSelector` and will
    continue to interact with the axes until disconnected.

    Parameters:

    *ax* : :class:`~matplotlib.axes.Axes`
        The parent axes for the widget.
    *onselect* : function
        Whenever the lasso is released, the `onselect` function is called and
        passed the vertices of the selected path.

    Example usage::

        ax = subplot(111)
        ax.plot(x,y)

        def onselect(verts):
            print(verts)
        lasso = LassoSelector(ax, onselect)

     *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button

    "
                :superclasses ("_SelectorWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_SelectorWidget" code nil (reparse-symbol indented_block_body) [70257 70366])
                            ("self" variable nil (reparse-symbol indented_block_body) [70376 70393])
                            ("if" code nil (reparse-symbol indented_block_body) [70403 70456])
                            ("if" code nil (reparse-symbol indented_block_body) [70464 70517])
                            ("self" variable nil (reparse-symbol indented_block_body) [70525 70564])
                            ("self" code nil (reparse-symbol indented_block_body) [70573 70601])
                            ("self" code nil (reparse-symbol indented_block_body) [70610 70637])
                            ("self" variable nil (reparse-symbol indented_block_body) [70646 70672]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70163 70167])
                            ("ax" variable nil (reparse-symbol function_parameters) [70169 70171])
                            ("onselect" variable nil (reparse-symbol function_parameters) [70173 70181])
                            ("useblit" variable nil (reparse-symbol function_parameters) [70188 70195])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [70202 70211])
                            ("button" variable nil (reparse-symbol function_parameters) [70235 70241]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [70150 70673])
                    ("onpress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70690 70694])
                            ("event" variable nil (reparse-symbol function_parameters) [70696 70701]))                          )
                        (reparse-symbol indented_block_body) [70678 70730])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70746 70750])
                            ("event" variable nil (reparse-symbol function_parameters) [70752 70757]))                          )
                        (reparse-symbol indented_block_body) [70735 70841])
                    ("onrelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70860 70864])
                            ("event" variable nil (reparse-symbol function_parameters) [70866 70871]))                          )
                        (reparse-symbol indented_block_body) [70846 70902])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70920 70924])
                            ("event" variable nil (reparse-symbol function_parameters) [70926 70931]))                          )
                        (reparse-symbol indented_block_body) [70907 71160])
                    ("_onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71177 71181])
                            ("event" variable nil (reparse-symbol function_parameters) [71183 71188]))                          )
                        (reparse-symbol indented_block_body) [71165 71365]))                  
                :type "class")
                nil [68777 71365])
            ("Lasso" type
               (:documentation "Selection curve of an arbitrary shape.

    The selected path can be used in conjunction with
    :func:`~matplotlib.path.Path.contains_point` to select data points
    from an image.

    Unlike :class:`LassoSelector`, this must be initialized with a starting
    point `xy`, and the `Lasso` events are destroyed upon release.

    Parameters:

    *ax* : :class:`~matplotlib.axes.Axes`
        The parent axes for the widget.
    *xy* : array
        Coordinates of the start of the lasso.
    *callback* : function
        Whenever the lasso is released, the `callback` function is called and
        passed the vertices of the selected path.

    "
                :superclasses ("AxesWidget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("AxesWidget" code nil (reparse-symbol indented_block_body) [72124 72153])
                            ("self" code nil (reparse-symbol indented_block_body) [72163 72215])
                            ("if" code nil (reparse-symbol indented_block_body) [72224 72312])
                            ("x, y" code nil (reparse-symbol indented_block_body) [72321 72330])
                            ("self" variable nil (reparse-symbol indented_block_body) [72339 72360])
                            ("self" variable nil (reparse-symbol indented_block_body) [72369 72433])
                            ("self" code nil (reparse-symbol indented_block_body) [72442 72469])
                            ("self" variable nil (reparse-symbol indented_block_body) [72478 72502])
                            ("self" code nil (reparse-symbol indented_block_body) [72511 72569])
                            ("self" code nil (reparse-symbol indented_block_body) [72578 72632]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72072 72076])
                            ("ax" variable nil (reparse-symbol function_parameters) [72078 72080])
                            ("xy" variable nil (reparse-symbol function_parameters) [72082 72084])
                            ("callback" variable nil (reparse-symbol function_parameters) [72086 72094])
                            ("useblit" variable nil (reparse-symbol function_parameters) [72101 72108]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [72059 72633])
                    ("onrelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72652 72656])
                            ("event" variable nil (reparse-symbol function_parameters) [72658 72663]))                          )
                        (reparse-symbol indented_block_body) [72638 72990])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73006 73010])
                            ("event" variable nil (reparse-symbol function_parameters) [73012 73017]))                          )
                        (reparse-symbol indented_block_body) [72995 73548]))                  
                :type "class")
                nil [71367 73548]))          
      :file "widgets.py"
      :pointmax 73548
      :fsize 73547
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 675 . 679) (PERIOD 680 . 681) (FROM 649 . 653) (PERIOD 654 . 655) (FROM 601 . 605) (PERIOD 606 . 607) (FROM 578 . 582) (PERIOD 583 . 584)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for the efficient drawing of large collections of objects that
share most properties, e.g., a large number of line segments or
polygons.

The classes are not meant to be as flexible as their single element
counterparts (e.g., you may not be able to select all line styles) but
they are meant to be fast for common use cases (e.g., a large set of solid
line segemnts)
\"\"\"" code nil nil [1 383])
            ("" code nil nil [407 492])
            ("six" include nil nil [494 504])
            ("six.moves" include nil nil [505 530])
            ("try" code nil nil [531 632])
            ("warnings" include nil nil [632 647])
            ("numpy" include nil nil [649 667])
            ("numpy.ma" include nil nil [668 689])
            ("matplotlib" include nil nil [691 715])
            ("matplotlib.cbook" include nil nil [716 748])
            ("matplotlib.colors" include nil nil [749 784])
            ("matplotlib.cm" include nil nil [785 811])
            ("matplotlib" include nil nil [812 844])
            ("matplotlib.transforms" include nil nil [845 887])
            ("matplotlib.artist" include nil nil [888 922])
            ("matplotlib.artist" include nil nil [923 972])
            ("matplotlib.path" include nil nil [973 1004])
            ("matplotlib" include nil nil [1005 1033])
            ("matplotlib.mlab" include nil nil [1034 1064])
            ("matplotlib.lines" include nil nil [1065 1098])
            ("CIRCLE_AREA_FACTOR" code nil nil [1100 1141])
            ("_color_aliases" variable nil nil [1144 1237])
            ("Collection" type
               (:documentation "
    Base class for Collections.  Must be subclassed to be usable.

    All properties in a collection must be sequences or scalars;
    if scalars, they will be converted to sequences.  The
    property of the ith element of the collection is::

      prop[i % len(props)]

    Keyword arguments and default values:

        * *edgecolors*: None
        * *facecolors*: None
        * *linewidths*: None
        * *antialiaseds*: None
        * *offsets*: None
        * *transOffset*: transforms.IdentityTransform()
        * *offset_position*: 'screen' (default) or 'data'
        * *norm*: None (optional for
          :class:`matplotlib.cm.ScalarMappable`)
        * *cmap*: None (optional for
          :class:`matplotlib.cm.ScalarMappable`)
        * *hatch*: None
        * *zorder*: 1


    *offsets* and *transOffset* are used to translate the patch after
    rendering (default no offsets).  If offset_position is 'screen'
    (default) the offset is applied after the master transform has
    been applied, that is, the offsets are in screen coordinates.  If
    offset_position is 'data', the offset is applied before the master
    transform, i.e., the offsets are in data coordinates.

    If any of *edgecolors*, *facecolors*, *linewidths*, *antialiaseds*
    are None, they default to their :data:`matplotlib.rcParams` patch
    setting, in sequence form.

    The use of :class:`~matplotlib.cm.ScalarMappable` is optional.  If
    the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not None
    (i.e., a call to set_array has been made), at draw time a call to
    scalar mappable will be made to set the face colors.
    "
                :superclasses ("artist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("_offsets" variable nil (reparse-symbol indented_block_body) [2952 2986])
                    ("_offsets" variable nil (reparse-symbol indented_block_body) [3027 3050])
                    ("_transOffset" variable nil (reparse-symbol indented_block_body) [3055 3100])
                    ("_transforms" variable nil (reparse-symbol indented_block_body) [3473 3506])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [3598 3619])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a Collection

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [4195 4262])
                            ("artist" code nil (reparse-symbol indented_block_body) [4271 4299])
                            ("cm" code nil (reparse-symbol indented_block_body) [4308 4352])
                            ("self" variable nil (reparse-symbol indented_block_body) [4466 4502])
                            ("self" variable nil (reparse-symbol indented_block_body) [4543 4576])
                            ("self" variable nil (reparse-symbol indented_block_body) [4633 4650])
                            ("self" variable nil (reparse-symbol indented_block_body) [4659 4681])
                            ("self" variable nil (reparse-symbol indented_block_body) [4690 4712])
                            ("self" variable nil (reparse-symbol indented_block_body) [4761 4825])
                            ("self" code nil (reparse-symbol indented_block_body) [4834 4864])
                            ("self" code nil (reparse-symbol indented_block_body) [4873 4903])
                            ("self" code nil (reparse-symbol indented_block_body) [4912 4942])
                            ("self" code nil (reparse-symbol indented_block_body) [4951 4981])
                            ("self" code nil (reparse-symbol indented_block_body) [4990 5024])
                            ("self" code nil (reparse-symbol indented_block_body) [5033 5064])
                            ("self" code nil (reparse-symbol indented_block_body) [5073 5092])
                            ("self" code nil (reparse-symbol indented_block_body) [5101 5122])
                            ("self" code nil (reparse-symbol indented_block_body) [5131 5172])
                            ("self" code nil (reparse-symbol indented_block_body) [5181 5204])
                            ("self" variable nil (reparse-symbol indented_block_body) [5214 5242])
                            ("self" variable nil (reparse-symbol indented_block_body) [5251 5296])
                            ("if" code nil (reparse-symbol indented_block_body) [5305 5630])
                            ("self" variable nil (reparse-symbol indented_block_body) [5639 5664])
                            ("self" code nil (reparse-symbol indented_block_body) [5673 5692])
                            ("self" variable nil (reparse-symbol indented_block_body) [5701 5719]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3638 3642])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [3661 3671])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [3695 3705])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [3729 3739])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [3763 3773])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [3800 3812])
                            ("offsets" variable nil (reparse-symbol function_parameters) [3836 3843])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [3867 3878])
                            ("norm" variable nil (reparse-symbol function_parameters) [3902 3906])
                            ("cmap" variable nil (reparse-symbol function_parameters) [3961 3965])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [3998 4008])
                            ("hatch" variable nil (reparse-symbol function_parameters) [4031 4036])
                            ("urls" variable nil (reparse-symbol function_parameters) [4060 4064])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [4088 4103])
                            ("zorder" variable nil (reparse-symbol function_parameters) [4131 4137])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4158 4166]))                          
                        :documentation "
        Create a Collection

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3625 5720])
                    ("_get_value" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("val" variable nil (reparse-symbol function_parameters) [5758 5761]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5725 6183])
                    ("_get_bool" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("val" variable nil (reparse-symbol function_parameters) [6220 6223]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6188 6485])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6504 6508]))                          )
                        (reparse-symbol indented_block_body) [6490 6538])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6557 6561]))                          )
                        (reparse-symbol indented_block_body) [6543 6598])
                    ("get_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6622 6626]))                          )
                        (reparse-symbol indented_block_body) [6603 6661])
                    ("get_offset_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6691 6695]))                          )
                        (reparse-symbol indented_block_body) [6666 6898])
                    ("get_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6919 6923])
                            ("transData" variable nil (reparse-symbol function_parameters) [6925 6934]))                          )
                        (reparse-symbol indented_block_body) [6903 8036])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8063 8067])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8069 8077]))                          )
                        (reparse-symbol indented_block_body) [8041 8250])
                    ("_prepare_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8275 8279]))                          
                        :documentation "Point prep for drawing and hit testing")
                        (reparse-symbol indented_block_body) [8255 9821])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9860 9864])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9866 9874]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9826 13036])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13060 13064])
                            ("pr" variable nil (reparse-symbol function_parameters) [13066 13068]))                          )
                        (reparse-symbol indented_block_body) [13041 13101])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13125 13129]))                          )
                        (reparse-symbol indented_block_body) [13106 13164])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13182 13186])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [13188 13198]))                          
                        :documentation "
        Test whether the mouse event occurred in the collection.

        Returns True | False, ``dict(ind=itemlist)``, where every
        item in itemlist contains the event.
        ")
                        (reparse-symbol indented_block_body) [13169 14552])
                    ("set_urls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14570 14574])
                            ("urls" variable nil (reparse-symbol function_parameters) [14576 14580]))                          )
                        (reparse-symbol indented_block_body) [14557 14712])
                    ("get_urls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14730 14734]))                          )
                        (reparse-symbol indented_block_body) [14717 14763])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14782 14786])
                            ("hatch" variable nil (reparse-symbol function_parameters) [14788 14793]))                          
                        :documentation "
        Set the hatching pattern

        *hatch* can be one of::

          /   - diagonal hatching
          \\   - back diagonal
          |   - vertical
          -   - horizontal
          +   - crossed
          x   - crossed diagonal
          o   - small circle
          O   - large circle
          .   - dots
          *   - stars

        Letters can be combined, in which case all the specified
        hatchings are done.  If same letter repeats, it increases the
        density of hatching of that pattern.

        Hatching is supported in the PostScript, PDF, SVG and Agg
        backends only.

        Unlike other properties such as linewidth and colors, hatching
        can only be specified for the collection as a whole, not separately
        for each member.

        ACCEPTS: [ '/' | '\\\\\\\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]
        ")
                        (reparse-symbol indented_block_body) [14768 15742])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15761 15765]))                          )
                        (reparse-symbol indented_block_body) [15747 15841])
                    ("set_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15862 15866])
                            ("offsets" variable nil (reparse-symbol function_parameters) [15868 15875]))                          
                        :documentation "
        Set the offsets for the collection.  *offsets* can be a scalar
        or a sequence.

        ACCEPTS: float or sequence of floats
        ")
                        (reparse-symbol indented_block_body) [15846 16380])
                    ("get_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16401 16405]))                          
                        :documentation "
        Return the offsets for the collection.
        ")
                        (reparse-symbol indented_block_body) [16385 16689])
                    ("set_offset_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16718 16722])
                            ("offset_position" variable nil (reparse-symbol function_parameters) [16724 16739]))                          
                        :documentation "
        Set how offsets are applied.  If *offset_position* is 'screen'
        (default) the offset is applied after the master transform has
        been applied, that is, the offsets are in screen coordinates.
        If offset_position is 'data', the offset is applied before the
        master transform, i.e., the offsets are in data coordinates.
        ")
                        (reparse-symbol indented_block_body) [16694 17321])
                    ("get_offset_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17350 17354]))                          
                        :documentation "
        Returns how offsets are applied for the collection.  If
        *offset_position* is 'screen', the offset is applied after the
        master transform has been applied, that is, the offsets are in
        screen coordinates.  If offset_position is 'data', the offset
        is applied before the master transform, i.e., the offsets are
        in data coordinates.
        ")
                        (reparse-symbol indented_block_body) [17326 17793])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17816 17820])
                            ("lw" variable nil (reparse-symbol function_parameters) [17822 17824]))                          
                        :documentation "
        Set the linewidth(s) for the collection.  *lw* can be a scalar
        or a sequence; if it is a sequence the patches will cycle
        through the sequence

        ACCEPTS: float or sequence of floats
        ")
                        (reparse-symbol indented_block_body) [17798 18476])
                    ("set_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18500 18504])
                            ("lw" variable nil (reparse-symbol function_parameters) [18506 18508]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [18481 18587])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18603 18607])
                            ("lw" variable nil (reparse-symbol function_parameters) [18609 18611]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [18592 18690])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18713 18717])
                            ("ls" variable nil (reparse-symbol function_parameters) [18719 18721]))                          
                        :documentation "
        Set the linestyle(s) for the collection.

        ===========================   =================
        linestyle                     description
        ===========================   =================
        ``'-'`` or ``'solid'``        solid line
        ``'--'`` or  ``'dashed'``     dashed line
        ``'-.'`` or  ``'dashdot'``    dash-dotted line
        ``':'`` or ``'dotted'``       dotted line
        ===========================   =================

        Alternatively a dash tuple of the following form can be provided::

            (offset, onoffseq),

        where ``onoffseq`` is an even length tuple of on and off ink
        in points.

        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
                   (offset, on-off-dash-seq) |
                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
                   ``' '`` | ``''``]

        Parameters
        ----------
        ls : { '-',  '--', '-.', ':'} and more see description
            The line style.
        ")
                        (reparse-symbol indented_block_body) [18695 20545])
                    ("_bcast_lwls" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("linewidths" variable nil (reparse-symbol function_parameters) [20584 20594])
                            ("dashes" variable nil (reparse-symbol function_parameters) [20596 20602]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20550 21924])
                    ("set_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21948 21952])
                            ("ls" variable nil (reparse-symbol function_parameters) [21954 21956]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [21929 22035])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22055 22059])
                            ("ls" variable nil (reparse-symbol function_parameters) [22061 22063]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [22040 22142])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22167 22171])
                            ("aa" variable nil (reparse-symbol function_parameters) [22173 22175]))                          
                        :documentation "
        Set the antialiasing state for rendering.

        ACCEPTS: Boolean or sequence of booleans
        ")
                        (reparse-symbol indented_block_body) [22147 22450])
                    ("set_antialiaseds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22476 22480])
                            ("aa" variable nil (reparse-symbol function_parameters) [22482 22484]))                          
                        :documentation "alias for set_antialiased")
                        (reparse-symbol indented_block_body) [22455 22567])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22586 22590])
                            ("c" variable nil (reparse-symbol function_parameters) [22592 22593]))                          
                        :documentation "
        Set both the edgecolor and the facecolor.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [22572 22940])
                    ("_set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22964 22968])
                            ("c" variable nil (reparse-symbol function_parameters) [22970 22971]))                          )
                        (reparse-symbol indented_block_body) [22945 23304])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23327 23331])
                            ("c" variable nil (reparse-symbol function_parameters) [23333 23334]))                          
                        :documentation "
        Set the facecolor(s) of the collection.  *c* can be a
        matplotlib color spec (all patches have same color), or a
        sequence of specs; if it is a sequence the patches will
        cycle through the sequence.

        If *c* is 'none', the patch will not be filled.

        ACCEPTS: matplotlib color spec or sequence of specs
        ")
                        (reparse-symbol indented_block_body) [23309 23775])
                    ("set_facecolors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23799 23803])
                            ("c" variable nil (reparse-symbol function_parameters) [23805 23806]))                          
                        :documentation "alias for set_facecolor")
                        (reparse-symbol indented_block_body) [23780 23884])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23907 23911]))                          )
                        (reparse-symbol indented_block_body) [23889 23946])
                    ("get_facecolors" variable nil (reparse-symbol indented_block_body) [23950 23980])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24004 24008]))                          )
                        (reparse-symbol indented_block_body) [23986 24218])
                    ("get_edgecolors" variable nil (reparse-symbol indented_block_body) [24222 24252])
                    ("_set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24277 24281])
                            ("c" variable nil (reparse-symbol function_parameters) [24283 24284]))                          )
                        (reparse-symbol indented_block_body) [24258 25178])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25201 25205])
                            ("c" variable nil (reparse-symbol function_parameters) [25207 25208]))                          
                        :documentation "
        Set the edgecolor(s) of the collection. *c* can be a
        matplotlib color spec (all patches have same color), or a
        sequence of specs; if it is a sequence the patches will
        cycle through the sequence.

        If *c* is 'face', the edge color will always be the same as
        the face color.  If it is 'none', the patch boundary will not
        be drawn.

        ACCEPTS: matplotlib color spec or sequence of specs
        ")
                        (reparse-symbol indented_block_body) [25183 25748])
                    ("set_edgecolors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25772 25776])
                            ("c" variable nil (reparse-symbol function_parameters) [25778 25779]))                          
                        :documentation "alias for set_edgecolor")
                        (reparse-symbol indented_block_body) [25753 25857])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25876 25880])
                            ("alpha" variable nil (reparse-symbol function_parameters) [25882 25887]))                          
                        :documentation "
        Set the alpha tranparencies of the collection.  *alpha* must be
        a float or *None*.

        ACCEPTS: float or None
        ")
                        (reparse-symbol indented_block_body) [25862 26369])
                    ("get_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26393 26397]))                          )
                        (reparse-symbol indented_block_body) [26374 26432])
                    ("get_linewidth" variable nil (reparse-symbol indented_block_body) [26436 26466])
                    ("get_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26491 26495]))                          )
                        (reparse-symbol indented_block_body) [26472 26530])
                    ("get_dashes" variable nil (reparse-symbol indented_block_body) [26534 26577])
                    ("update_scalarmappable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26609 26613]))                          
                        :documentation "
        If the scalar mappable array is not none, update colors
        from scalar data
        ")
                        (reparse-symbol indented_block_body) [26583 27155])
                    ("get_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27173 27177]))                          )
                        (reparse-symbol indented_block_body) [27160 27248])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27269 27273])
                            ("other" variable nil (reparse-symbol function_parameters) [27275 27280]))                          )
                        (reparse-symbol indented_block_body) [27253 28094]))                  
                :type "class")
                nil [1240 28094])
            ("docstring" code nil nil [28282 29019])
            ("_CollectionWithSizes" type
               (:documentation "
    Base class for collections that have an array of sizes.
    "
                :superclasses ("Collection")
                :members 
                  ( ("_factor" variable nil (reparse-symbol indented_block_body) [29142 29155])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29175 29179]))                          
                        :documentation "
        Returns the sizes of the elements in the collection.  The
        value represents the 'area' of the element.

        Returns
        -------
        sizes : array
            The 'area' of each element.
        ")
                        (reparse-symbol indented_block_body) [29161 29446])
                    ("set_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29465 29469])
                            ("sizes" variable nil (reparse-symbol function_parameters) [29471 29476])
                            ("dpi" variable nil (reparse-symbol function_parameters) [29478 29481]))                          
                        :documentation "
        Set the sizes of each member of the collection.

        Parameters
        ----------
        sizes : ndarray or None
            The size to set for each element of the collection.  The
            value is the 'area' of the element.

        dpi : float
            The dpi of the canvas. Defaults to 72.0.
        ")
                        (reparse-symbol indented_block_body) [29451 30302])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30341 30345])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30347 30355]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30307 30451]))                  
                :type "class")
                nil [29022 30451])
            ("PathCollection" type
               (:documentation "
    This is the most basic :class:`Collection` subclass.
    "
                :superclasses ("_CollectionWithSizes")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *paths* is a sequence of :class:`matplotlib.path.Path`
        instances.

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [30661 30782])
                            ("Collection" code nil (reparse-symbol indented_block_body) [30792 30827])
                            ("self" code nil (reparse-symbol indented_block_body) [30836 30857])
                            ("self" code nil (reparse-symbol indented_block_body) [30866 30887])
                            ("self" variable nil (reparse-symbol indented_block_body) [30896 30913]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30617 30621])
                            ("paths" variable nil (reparse-symbol function_parameters) [30623 30628])
                            ("sizes" variable nil (reparse-symbol function_parameters) [30630 30635])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30642 30650]))                          
                        :documentation "
        *paths* is a sequence of :class:`matplotlib.path.Path`
        instances.

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30574 30914])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30933 30937])
                            ("paths" variable nil (reparse-symbol function_parameters) [30939 30944]))                          )
                        (reparse-symbol indented_block_body) [30919 31001])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31020 31024]))                          )
                        (reparse-symbol indented_block_body) [31006 31054]))                  
                :type "class")
                nil [30453 31054])
            ("PolyCollection" type
               (:superclasses ("_CollectionWithSizes")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *verts* is a sequence of ( *verts0*, *verts1*, ...) where
        *verts_i* is a sequence of *xy* tuples of vertices, or an
        equivalent :mod:`numpy` array of shape (*nv*, 2).

        *sizes* is *None* (default) or a sequence of floats that
        scale the corresponding *verts_i*.  The scaling is applied
        before the Artist master transform; if the latter is an identity
        transform, then the overall scaling is such that if
        *verts_i* specify a unit square, then *sizes_i* is the area
        of that square in points^2.
        If len(*sizes*) < *nv*, the additional values will be
        taken cyclically from the array.

        *closed*, when *True*, will explicitly close the polygon.

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [31204 31973])
                            ("Collection" code nil (reparse-symbol indented_block_body) [31982 32017])
                            ("self" code nil (reparse-symbol indented_block_body) [32026 32047])
                            ("self" code nil (reparse-symbol indented_block_body) [32056 32085])
                            ("self" variable nil (reparse-symbol indented_block_body) [32094 32111]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31147 31151])
                            ("verts" variable nil (reparse-symbol function_parameters) [31153 31158])
                            ("sizes" variable nil (reparse-symbol function_parameters) [31160 31165])
                            ("closed" variable nil (reparse-symbol function_parameters) [31172 31178])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31185 31193]))                          
                        :documentation "
        *verts* is a sequence of ( *verts0*, *verts1*, ...) where
        *verts_i* is a sequence of *xy* tuples of vertices, or an
        equivalent :mod:`numpy` array of shape (*nv*, 2).

        *sizes* is *None* (default) or a sequence of floats that
        scale the corresponding *verts_i*.  The scaling is applied
        before the Artist master transform; if the latter is an identity
        transform, then the overall scaling is such that if
        *verts_i* specify a unit square, then *sizes_i* is the area
        of that square in points^2.
        If len(*sizes*) < *nv*, the additional values will be
        taken cyclically from the array.

        *closed*, when *True*, will explicitly close the polygon.

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31104 32112])
                    ("set_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32131 32135])
                            ("verts" variable nil (reparse-symbol function_parameters) [32137 32142])
                            ("closed" variable nil (reparse-symbol function_parameters) [32144 32150]))                          )
                        (reparse-symbol indented_block_body) [32117 33210])
                    ("set_paths" variable nil (reparse-symbol indented_block_body) [33215 33236])
                    ("set_verts_and_codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33266 33270])
                            ("verts" variable nil (reparse-symbol function_parameters) [33272 33277])
                            ("codes" variable nil (reparse-symbol function_parameters) [33279 33284]))                          )
                        (reparse-symbol indented_block_body) [33242 33769]))                  
                :type "class")
                nil [31056 33769])
            ("BrokenBarHCollection" type
               (:documentation "
    A collection of horizontal bars spanning *yrange* with a sequence of
    *xranges*.
    "
                :superclasses ("PolyCollection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xranges*
            sequence of (*xmin*, *xwidth*)

        *yrange*
            *ymin*, *ywidth*

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [34008 34155])
                            ("ymin, ywidth" code nil (reparse-symbol indented_block_body) [34164 34185])
                            ("ymax" code nil (reparse-symbol indented_block_body) [34194 34214])
                            ("verts" variable nil (reparse-symbol indented_block_body) [34223 34421])
                            ("PolyCollection" code nil (reparse-symbol indented_block_body) [34430 34476]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33966 33970])
                            ("xranges" variable nil (reparse-symbol function_parameters) [33972 33979])
                            ("yrange" variable nil (reparse-symbol function_parameters) [33981 33987])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33989 33997]))                          
                        :documentation "
        *xranges*
            sequence of (*xmin*, *xwidth*)

        *yrange*
            *ymin*, *ywidth*

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33923 34477])
                    ("span_where" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x" variable nil (reparse-symbol function_parameters) [34515 34516])
                            ("ymin" variable nil (reparse-symbol function_parameters) [34518 34522])
                            ("ymax" variable nil (reparse-symbol function_parameters) [34524 34528])
                            ("where" variable nil (reparse-symbol function_parameters) [34530 34535])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34537 34545]))                          
                        :documentation "
        Create a BrokenBarHCollection to plot horizontal bars from
        over the regions in *x* where *where* is True.  The bars range
        on the y-axis from *ymin* to *ymax*

        A :class:`BrokenBarHCollection` is returned.  *kwargs* are
        passed on to the collection.
        ")
                        (reparse-symbol indented_block_body) [34482 35215]))                  
                :type "class")
                nil [33771 35215])
            ("RegularPolyCollection" type
               (:documentation "Draw a collection of regular polygons with *numsides*."
                :superclasses ("_CollectionWithSizes")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [35337 35386])
                    ("_factor" variable nil (reparse-symbol indented_block_body) [35392 35420])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *numsides*
            the number of sides of the polygon

        *rotation*
            the rotation of the polygon in radians

        *sizes*
            gives the area of the circle circumscribing the
            regular polygon in points^2

        %(Collection)s

        Example: see :file:`examples/dynamic_collection.py` for
        complete example::

            offsets = np.random.rand(20,2)
            facecolors = [cm.jet(x) for x in np.random.rand(20)]
            black = (0,0,0,1)

            collection = RegularPolyCollection(
                numsides=5, # a pentagon
                rotation=0, sizes=(50,),
                facecolors = facecolors,
                edgecolors = (black,),
                linewidths = (1,),
                offsets = offsets,
                transOffset = ax.transData,
                )
        \"\"\"" code nil (reparse-symbol indented_block_body) [35596 36463])
                            ("Collection" code nil (reparse-symbol indented_block_body) [36472 36507])
                            ("self" code nil (reparse-symbol indented_block_body) [36516 36537])
                            ("self" variable nil (reparse-symbol indented_block_body) [36546 36571])
                            ("self" variable nil (reparse-symbol indented_block_body) [36580 36626])
                            ("self" variable nil (reparse-symbol indented_block_body) [36635 36660])
                            ("self" code nil (reparse-symbol indented_block_body) [36669 36719]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35469 35473])
                            ("numsides" variable nil (reparse-symbol function_parameters) [35492 35500])
                            ("rotation" variable nil (reparse-symbol function_parameters) [35519 35527])
                            ("sizes" variable nil (reparse-symbol function_parameters) [35548 35553])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35577 35585]))                          
                        :documentation "
        *numsides*
            the number of sides of the polygon

        *rotation*
            the rotation of the polygon in radians

        *sizes*
            gives the area of the circle circumscribing the
            regular polygon in points^2

        %(Collection)s

        Example: see :file:`examples/dynamic_collection.py` for
        complete example::

            offsets = np.random.rand(20,2)
            facecolors = [cm.jet(x) for x in np.random.rand(20)]
            black = (0,0,0,1)

            collection = RegularPolyCollection(
                numsides=5, # a pentagon
                rotation=0, sizes=(50,),
                facecolors = facecolors,
                edgecolors = (black,),
                linewidths = (1,),
                offsets = offsets,
                transOffset = ax.transData,
                )
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35426 36720])
                    ("get_numsides" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36742 36746]))                          )
                        (reparse-symbol indented_block_body) [36725 36779])
                    ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36801 36805]))                          )
                        (reparse-symbol indented_block_body) [36784 36838])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36877 36881])
                            ("renderer" variable nil (reparse-symbol function_parameters) [36883 36891]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [36843 37136]))                  
                :type "class")
                nil [35217 37136])
            ("StarPolygonCollection" type
               (:documentation "
    Draw a collection of regular stars with *numsides* points."
                :superclasses ("RegularPolyCollection")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [37269 37315]))                  
                :type "class")
                nil [37138 37316])
            ("AsteriskPolygonCollection" type
               (:documentation "
    Draw a collection of regular asterisks with *numsides* points."
                :superclasses ("RegularPolyCollection")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [37457 37507]))                  
                :type "class")
                nil [37318 37508])
            ("LineCollection" type
               (:documentation "
    All parameters must be sequences or scalars; if scalars, they will
    be converted to sequences.  The property of the ith line
    segment is::

       prop[i % len(props)]

    i.e., the properties cycle if the ``len`` of props is less than the
    number of segments.
    "
                :superclasses ("Collection")
                :members 
                  ( ("_edge_default" variable nil (reparse-symbol indented_block_body) [37840 37860])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *segments*
            a sequence of (*line0*, *line1*, *line2*), where::

                linen = (x0, y0), (x1, y1), ... (xm, ym)

            or the equivalent numpy array with two columns. Each line
            can be a different length.

        *colors*
            must be a sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        *antialiaseds*
            must be a sequence of ones or zeros

        *linestyles* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]
            a string or dash tuple. The dash tuple is::

                (offset, onoffseq),

            where *onoffseq* is an even length tuple of on and off ink
            in points.

        If *linewidths*, *colors*, or *antialiaseds* is None, they
        default to their rcParams setting, in sequence form.

        If *offsets* and *transOffset* are not None, then
        *offsets* are transformed by *transOffset* and applied after
        the segments have been transformed to display coordinates.

        If *offsets* is not None but *transOffset* is None, then the
        *offsets* are added to the segments before any transformation.
        In this case, a single offset can be specified as::

            offsets=(xo,yo)

        and this value will be added cumulatively to each successive
        segment, so as to produce a set of successively offset curves.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        *zorder*
           The zorder of the LineCollection.  Default is 2

        *facecolors*
           The facecolors of the LineCollection. Default is 'none'
           Setting to a value other than 'none' will lead to a filled
           polygon being drawn between points on each line.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [38321 40665])
                            ("if" code nil (reparse-symbol indented_block_body) [40674 40742])
                            ("if" code nil (reparse-symbol indented_block_body) [40750 40833])
                            ("if" code nil (reparse-symbol indented_block_body) [40841 40930])
                            ("colors" variable nil (reparse-symbol indented_block_body) [40939 40977])
                            ("Collection" code nil (reparse-symbol indented_block_body) [40987 41396])
                            ("self" code nil (reparse-symbol indented_block_body) [41406 41433]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37879 37883])
                            ("segments" variable nil (reparse-symbol function_parameters) [37885 37893])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [37931 37941])
                            ("colors" variable nil (reparse-symbol function_parameters) [37965 37971])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [37995 38007])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [38031 38041])
                            ("offsets" variable nil (reparse-symbol function_parameters) [38068 38075])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [38099 38110])
                            ("norm" variable nil (reparse-symbol function_parameters) [38134 38138])
                            ("cmap" variable nil (reparse-symbol function_parameters) [38162 38166])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [38190 38200])
                            ("zorder" variable nil (reparse-symbol function_parameters) [38221 38227])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [38248 38258])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38284 38292]))                          
                        :documentation "
        *segments*
            a sequence of (*line0*, *line1*, *line2*), where::

                linen = (x0, y0), (x1, y1), ... (xm, ym)

            or the equivalent numpy array with two columns. Each line
            can be a different length.

        *colors*
            must be a sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        *antialiaseds*
            must be a sequence of ones or zeros

        *linestyles* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]
            a string or dash tuple. The dash tuple is::

                (offset, onoffseq),

            where *onoffseq* is an even length tuple of on and off ink
            in points.

        If *linewidths*, *colors*, or *antialiaseds* is None, they
        default to their rcParams setting, in sequence form.

        If *offsets* and *transOffset* are not None, then
        *offsets* are transformed by *transOffset* and applied after
        the segments have been transformed to display coordinates.

        If *offsets* is not None but *transOffset* is None, then the
        *offsets* are added to the segments before any transformation.
        In this case, a single offset can be specified as::

            offsets=(xo,yo)

        and this value will be added cumulatively to each successive
        segment, so as to produce a set of successively offset curves.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        *zorder*
           The zorder of the LineCollection.  Default is 2

        *facecolors*
           The facecolors of the LineCollection. Default is 'none'
           Setting to a value other than 'none' will lead to a filled
           polygon being drawn between points on each line.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37866 41434])
                    ("set_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41456 41460])
                            ("segments" variable nil (reparse-symbol function_parameters) [41462 41470]))                          )
                        (reparse-symbol indented_block_body) [41439 41892])
                    ("set_verts" variable nil (reparse-symbol indented_block_body) [41897 41921])
                    ("set_paths" variable nil (reparse-symbol indented_block_body) [41967 41991])
                    ("get_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42014 42018]))                          )
                        (reparse-symbol indented_block_body) [41997 42254])
                    ("_add_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42276 42280])
                            ("segs" variable nil (reparse-symbol function_parameters) [42282 42286]))                          )
                        (reparse-symbol indented_block_body) [42259 42649])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42668 42672])
                            ("c" variable nil (reparse-symbol function_parameters) [42674 42675]))                          
                        :documentation "
        Set the color(s) of the line collection.  *c* can be a
        matplotlib color arg (all patches have same color), or a
        sequence or rgba tuples; if it is a sequence the patches will
        cycle through the sequence.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples
        ")
                        (reparse-symbol indented_block_body) [42654 43058])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43077 43081]))                          )
                        (reparse-symbol indented_block_body) [43063 43116])
                    ("get_colors" variable nil (reparse-symbol indented_block_body) [43121 43143]))                  
                :type "class")
                nil [37510 43183])
            ("EventCollection" type
               (:superclasses ("LineCollection")
                :members 
                  ( ("'''
    A collection of discrete events.

    An event is a 1-dimensional value, usually the position of something along
    an axis, such as time or length.  Events do not have an amplitude.  They
    are displayed as v
    '''" code nil (reparse-symbol indented_block_body) [43228 43456])
                    ("_edge_default" variable nil (reparse-symbol indented_block_body) [43462 43482])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *positions*
            a sequence of numerical values or a 1D numpy array.  Can be None

        *orientation* [ 'horizontal' | 'vertical' | None ]
            defaults to 'horizontal' if not specified or None

        *lineoffset*
            a single numerical value, corresponding to the offset of the center
            of the markers from the origin

        *linelength*
            a single numerical value, corresponding to the total height of the
            marker (i.e. the marker stretches from lineoffset+linelength/2 to
            lineoffset-linelength/2).  Defaults to 1

        *linewidth*
            a single numerical value

        *color*
            must be a sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        *linestyle* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]

        *antialiased*
            1 or 2

        If *linewidth*, *color*, or *antialiased* is None, they
        default to their rcParams setting, in sequence form.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.

        **Example:**

        .. plot:: mpl_examples/pylab_examples/eventcollection_demo.py
        \"\"\"" code nil (reparse-symbol indented_block_body) [43838 45594])
                            ("segment" variable nil (reparse-symbol indented_block_body) [45604 45693])
                            ("if" code nil (reparse-symbol indented_block_body) [45702 46578])
                            ("LineCollection" code nil (reparse-symbol indented_block_body) [46587 46912])
                            ("self" variable nil (reparse-symbol indented_block_body) [46922 46951])
                            ("self" variable nil (reparse-symbol indented_block_body) [46960 46989]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43501 43505])
                            ("positions" variable nil (reparse-symbol function_parameters) [43524 43533])
                            ("orientation" variable nil (reparse-symbol function_parameters) [43571 43582])
                            ("lineoffset" variable nil (reparse-symbol function_parameters) [43606 43616])
                            ("linelength" variable nil (reparse-symbol function_parameters) [43637 43647])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [43668 43677])
                            ("color" variable nil (reparse-symbol function_parameters) [43701 43706])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [43730 43739])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [43766 43777])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43801 43809]))                          
                        :documentation "
        *positions*
            a sequence of numerical values or a 1D numpy array.  Can be None

        *orientation* [ 'horizontal' | 'vertical' | None ]
            defaults to 'horizontal' if not specified or None

        *lineoffset*
            a single numerical value, corresponding to the offset of the center
            of the markers from the origin

        *linelength*
            a single numerical value, corresponding to the total height of the
            marker (i.e. the marker stretches from lineoffset+linelength/2 to
            lineoffset-linelength/2).  Defaults to 1

        *linewidth*
            a single numerical value

        *color*
            must be a sequence of RGBA tuples (e.g., arbitrary color
            strings, etc, not allowed).

        *linestyle* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]

        *antialiased*
            1 or 2

        If *linewidth*, *color*, or *antialiased* is None, they
        default to their rcParams setting, in sequence form.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.

        **Example:**

        .. plot:: mpl_examples/pylab_examples/eventcollection_demo.py
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43488 46990])
                    ("get_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47013 47017]))                          )
                        (reparse-symbol indented_block_body) [46995 47335])
                    ("set_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47358 47362])
                            ("positions" variable nil (reparse-symbol function_parameters) [47364 47373]))                          )
                        (reparse-symbol indented_block_body) [47340 48200])
                    ("add_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48223 48227])
                            ("position" variable nil (reparse-symbol function_parameters) [48229 48237]))                          )
                        (reparse-symbol indented_block_body) [48205 48602])
                    ("extend_positions" variable nil (reparse-symbol indented_block_body) [48606 48657])
                    ("is_horizontal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48681 48685]))                          )
                        (reparse-symbol indented_block_body) [48663 48816])
                    ("get_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48841 48845]))                          )
                        (reparse-symbol indented_block_body) [48821 49033])
                    ("switch_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49061 49065]))                          )
                        (reparse-symbol indented_block_body) [49038 49448])
                    ("set_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49473 49477])
                            ("orientation" variable nil (reparse-symbol function_parameters) [49479 49490]))                          )
                        (reparse-symbol indented_block_body) [49453 50105])
                    ("get_linelength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50129 50133]))                          )
                        (reparse-symbol indented_block_body) [50110 50252])
                    ("set_linelength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50276 50280])
                            ("linelength" variable nil (reparse-symbol function_parameters) [50282 50292]))                          )
                        (reparse-symbol indented_block_body) [50257 50800])
                    ("get_lineoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50824 50828]))                          )
                        (reparse-symbol indented_block_body) [50805 50947])
                    ("set_lineoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50971 50975])
                            ("lineoffset" variable nil (reparse-symbol function_parameters) [50977 50987]))                          )
                        (reparse-symbol indented_block_body) [50952 51495])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51518 51522]))                          )
                        (reparse-symbol indented_block_body) [51500 51648])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51671 51675]))                          )
                        (reparse-symbol indented_block_body) [51653 51852])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51871 51875]))                          )
                        (reparse-symbol indented_block_body) [51857 51997]))                  
                :type "class")
                nil [43185 51997])
            ("CircleCollection" type
               (:documentation "
    A collection of circles, drawn using splines.
    "
                :superclasses ("_CollectionWithSizes")
                :members 
                  ( ("_factor" variable nil (reparse-symbol indented_block_body) [52115 52143])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *sizes*
            Gives the area of the circle in points^2

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [52224 52332])
                            ("Collection" code nil (reparse-symbol indented_block_body) [52341 52376])
                            ("self" code nil (reparse-symbol indented_block_body) [52385 52406])
                            ("self" code nil (reparse-symbol indented_block_body) [52415 52465])
                            ("self" variable nil (reparse-symbol indented_block_body) [52474 52514]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52192 52196])
                            ("sizes" variable nil (reparse-symbol function_parameters) [52198 52203])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52205 52213]))                          
                        :documentation "
        *sizes*
            Gives the area of the circle in points^2

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52149 52515]))                  
                :type "class")
                nil [51999 52515])
            ("EllipseCollection" type
               (:documentation "
    A collection of ellipses, drawn using splines.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *widths*: sequence
            lengths of first axes (e.g., major axis lengths)

        *heights*: sequence
            lengths of second axes

        *angles*: sequence
            angles of first axes, degrees CCW from the X-axis

        *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'
        | 'x' | 'y' | 'xy']

            units in which majors and minors are given; 'width' and
            'height' refer to the dimensions of the axes, while 'x'
            and 'y' refer to the *offsets* data units. 'xy' differs
            from all others in that the angle as plotted varies with
            the aspect ratio, and equals the specified angle only when
            the aspect ratio is unity.  Hence it behaves the same as
            the :class:`~matplotlib.patches.Ellipse` with
            axes.transData as its transform.

        Additional kwargs inherited from the base :class:`Collection`:

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [52734 53701])
                            ("Collection" code nil (reparse-symbol indented_block_body) [53710 53745])
                            ("self" code nil (reparse-symbol indented_block_body) [53754 53801])
                            ("self" code nil (reparse-symbol indented_block_body) [53810 53859])
                            ("self" code nil (reparse-symbol indented_block_body) [53868 53927])
                            ("self" variable nil (reparse-symbol indented_block_body) [53936 53955])
                            ("self" code nil (reparse-symbol indented_block_body) [53964 54014])
                            ("self" variable nil (reparse-symbol indented_block_body) [54023 54061])
                            ("self" variable nil (reparse-symbol indented_block_body) [54070 54110]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52668 52672])
                            ("widths" variable nil (reparse-symbol function_parameters) [52674 52680])
                            ("heights" variable nil (reparse-symbol function_parameters) [52682 52689])
                            ("angles" variable nil (reparse-symbol function_parameters) [52691 52697])
                            ("units" variable nil (reparse-symbol function_parameters) [52699 52704])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52715 52723]))                          
                        :documentation "
        *widths*: sequence
            lengths of first axes (e.g., major axis lengths)

        *heights*: sequence
            lengths of second axes

        *angles*: sequence
            angles of first axes, degrees CCW from the X-axis

        *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'
        | 'x' | 'y' | 'xy']

            units in which majors and minors are given; 'width' and
            'height' refer to the dimensions of the axes, while 'x'
            and 'y' refer to the *offsets* data units. 'xy' differs
            from all others in that the angle as plotted varies with
            the aspect ratio, and equals the specified angle only when
            the aspect ratio is unity.  Hence it behaves the same as
            the :class:`~matplotlib.patches.Ellipse` with
            axes.transData as its transform.

        Additional kwargs inherited from the base :class:`Collection`:

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52625 54111])
                    ("_set_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54136 54140]))                          
                        :documentation "
        Calculate transforms immediately before drawing.
        ")
                        (reparse-symbol indented_block_body) [54116 55587])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55626 55630])
                            ("renderer" variable nil (reparse-symbol function_parameters) [55632 55640]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [55592 55714]))                  
                :type "class")
                nil [52517 55714])
            ("PatchCollection" type
               (:documentation "
    A generic collection of patches.

    This makes it easier to assign a color map to a heterogeneous
    collection of patches.

    This also may improve plotting speed, since PatchCollection will
    draw faster than a large number of patches.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *patches*
            a sequence of Patch objects.  This list may include
            a heterogeneous assortment of different patch types.

        *match_original*
            If True, use the colors and linewidths of the original
            patches.  If False, new colors may be assigned by
            providing the standard collection arguments, facecolor,
            edgecolor, linewidths, norm or cmap.

        If any of *edgecolors*, *facecolors*, *linewidths*,
        *antialiaseds* are None, they default to their
        :data:`matplotlib.rcParams` patch setting, in sequence form.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not
        None (i.e., a call to set_array has been made), at draw time a
        call to scalar mappable will be made to set the face colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [56090 56992])
                            ("if" code nil (reparse-symbol indented_block_body) [57002 57557])
                            ("Collection" code nil (reparse-symbol indented_block_body) [57566 57601])
                            ("self" code nil (reparse-symbol indented_block_body) [57611 57634]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56034 56038])
                            ("patches" variable nil (reparse-symbol function_parameters) [56040 56047])
                            ("match_original" variable nil (reparse-symbol function_parameters) [56049 56063])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56071 56079]))                          
                        :documentation "
        *patches*
            a sequence of Patch objects.  This list may include
            a heterogeneous assortment of different patch types.

        *match_original*
            If True, use the colors and linewidths of the original
            patches.  If False, new colors may be assigned by
            providing the standard collection arguments, facecolor,
            edgecolor, linewidths, norm or cmap.

        If any of *edgecolors*, *facecolors*, *linewidths*,
        *antialiaseds* are None, they default to their
        :data:`matplotlib.rcParams` patch setting, in sequence form.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not
        None (i.e., a call to set_array has been made), at draw time a
        call to scalar mappable will be made to set the face colors.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56021 57635])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57654 57658])
                            ("patches" variable nil (reparse-symbol function_parameters) [57660 57667]))                          )
                        (reparse-symbol indented_block_body) [57640 57797]))                  
                :type "class")
                nil [55716 57797])
            ("TriMesh" type
               (:documentation "
    Class for the efficient drawing of a triangular mesh using
    Gouraud shading.

    A triangular mesh is a :class:`~matplotlib.tri.Triangulation`
    object.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Collection" code nil (reparse-symbol indented_block_body) [58062 58097])
                            ("self" variable nil (reparse-symbol indented_block_body) [58106 58141])
                            ("self" variable nil (reparse-symbol indented_block_body) [58150 58175])
                            ("self" variable nil (reparse-symbol indented_block_body) [58184 58206])
                            ("self" variable nil (reparse-symbol indented_block_body) [58216 58251])
                            ("xy" variable nil (reparse-symbol indented_block_body) [58353 58457])
                            ("self" code nil (reparse-symbol indented_block_body) [58466 58500]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58022 58026])
                            ("triangulation" variable nil (reparse-symbol function_parameters) [58028 58041])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58043 58051]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58009 58501])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58520 58524]))                          )
                        (reparse-symbol indented_block_body) [58506 58615])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58634 58638]))                          )
                        (reparse-symbol indented_block_body) [58620 58711])
                    ("convert_mesh_to_paths" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("tri" variable nil (reparse-symbol function_parameters) [58760 58763]))                          
                        :documentation "
        Converts a given mesh into a sequence of
        :class:`matplotlib.path.Path` objects for easier rendering by
        backends that do not directly support meshes.

        This function is primarily of use to backend implementers.
        ")
                        (reparse-symbol indented_block_body) [58716 59287])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59326 59330])
                            ("renderer" variable nil (reparse-symbol function_parameters) [59332 59340]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [59292 60130]))                  
                :type "class")
                nil [57799 60130])
            ("QuadMesh" type
               (:documentation "
    Class for the efficient drawing of a quadrilateral mesh.

    A quadrilateral mesh consists of a grid of vertices. The
    dimensions of this array are (*meshWidth* + 1, *meshHeight* +
    1). Each vertex in the mesh has a different set of \"mesh
    coordinates\" representing its position in the topology of the
    mesh. For any values (*m*, *n*) such that 0 <= *m* <= *meshWidth*
    and 0 <= *n* <= *meshHeight*, the vertices at mesh coordinates
    (*m*, *n*), (*m*, *n* + 1), (*m* + 1, *n* + 1), and (*m* + 1, *n*)
    form one of the quadrilaterals in the mesh. There are thus
    (*meshWidth* * *meshHeight*) quadrilaterals in the mesh.  The mesh
    need not be regular and the polygons need not be convex.

    A quadrilateral mesh is represented by a (2 x ((*meshWidth* + 1) *
    (*meshHeight* + 1))) numpy array *coordinates*, where each row is
    the *x* and *y* coordinates of one of the vertices.  To define the
    function that maps from a data point to its corresponding color,
    use the :meth:`set_cmap` method.  Each of these arrays is indexed in
    row-major order by the mesh coordinates of the vertex (or the mesh
    coordinates of the lower left vertex, in the case of the
    colors).

    For example, the first entry in *coordinates* is the
    coordinates of the vertex at mesh coordinates (0, 0), then the one
    at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and
    so on.

    *shading* may be 'flat', or 'gouraud'
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Collection" code nil (reparse-symbol indented_block_body) [61776 61811])
                            ("self" variable nil (reparse-symbol indented_block_body) [61820 61847])
                            ("self" variable nil (reparse-symbol indented_block_body) [61856 61885])
                            ("self" variable nil (reparse-symbol indented_block_body) [61894 61925])
                            ("self" variable nil (reparse-symbol indented_block_body) [61934 61965])
                            ("self" variable nil (reparse-symbol indented_block_body) [61974 61997])
                            ("self" variable nil (reparse-symbol indented_block_body) [62007 62042])
                            ("self" code nil (reparse-symbol indented_block_body) [62051 62156])
                            ("self" variable nil (reparse-symbol indented_block_body) [62238 62332])
                            ("self" variable nil (reparse-symbol indented_block_body) [62341 62399]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61664 61668])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [61670 61679])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [61681 61691])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [61693 61704])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [61723 61734])
                            ("shading" variable nil (reparse-symbol function_parameters) [61741 61748])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [61757 61765]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61651 62400])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62419 62423]))                          )
                        (reparse-symbol indented_block_body) [62405 62514])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62533 62537]))                          )
                        (reparse-symbol indented_block_body) [62519 62682])
                    ("get_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62703 62707])
                            ("transData" variable nil (reparse-symbol function_parameters) [62709 62718]))                          )
                        (reparse-symbol indented_block_body) [62687 62798])
                    ("convert_mesh_to_paths" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("meshWidth" variable nil (reparse-symbol function_parameters) [62847 62856])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [62858 62868])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [62870 62881]))                          
                        :documentation "
        Converts a given mesh into a sequence of
        :class:`matplotlib.path.Path` objects for easier rendering by
        backends that do not directly support quadmeshes.

        This function is primarily of use to backend implementers.
        ")
                        (reparse-symbol indented_block_body) [62803 63630])
                    ("convert_mesh_to_triangles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63665 63669])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [63671 63680])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [63682 63692])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [63694 63705]))                          
                        :documentation "
        Converts a given mesh into a sequence of triangles, each point
        with its own color.  This is useful for experiments using
        `draw_qouraud_triangle`.
        ")
                        (reparse-symbol indented_block_body) [63635 65019])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65058 65062])
                            ("renderer" variable nil (reparse-symbol function_parameters) [65064 65072]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [65024 67047]))                  
                :type "class")
                nil [60132 67047])
            ("patchstr" variable nil nil [67049 67084])
            ("for" code nil nil [67085 67357])
            ("docstring" code nil nil [67357 67426]))          
      :file "collections.py"
      :pointmax 67427
      :fsize 67426
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((NAME 51231 . 51234) (IF 51239 . 51241) (ELSE 51263 . 51267) (NAME 50536 . 50539) (IF 50544 . 50546) (ELSE 50568 . 50572) (RETURN 48973 . 48979) (IF 48993 . 48995) (ELSE 49017 . 49021) (NAME 47169 . 47172) (IF 47177 . 47179) (ELSE 47201 . 47205)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
These are  classes to support contour plotting and
labelling for the axes class
\"\"\"" code nil nil [1 88])
            ("" code nil nil [112 197])
            ("six" include nil nil [199 209])
            ("six.moves" include nil nil [210 238])
            ("warnings" include nil nil [240 255])
            ("matplotlib" include nil nil [256 280])
            ("numpy" include nil nil [281 299])
            ("numpy" include nil nil [300 320])
            ("matplotlib._cntr" include nil nil [321 353])
            ("matplotlib._contour" include nil nil [354 392])
            ("matplotlib.path" include nil nil [393 424])
            ("matplotlib.ticker" include nil nil [425 459])
            ("matplotlib.cm" include nil nil [460 486])
            ("matplotlib.colors" include nil nil [487 521])
            ("matplotlib.collections" include nil nil [522 560])
            ("matplotlib.font_manager" include nil nil [561 607])
            ("matplotlib.text" include nil nil [608 638])
            ("matplotlib.cbook" include nil nil [639 671])
            ("matplotlib.mlab" include nil nil [672 702])
            ("matplotlib.mathtext" include nil nil [703 741])
            ("matplotlib.patches" include nil nil [742 779])
            ("matplotlib.texmanager" include nil nil [780 822])
            ("matplotlib.transforms" include nil nil [823 861])
            ("matplotlib.blocking_input" include nil nil [928 988])
            ("ClabelText" type
               (:documentation "
    Unlike the ordinary text, the get_rotation returns an updated
    angle in the pixel coordinate assuming that the input rotation is
    an angle in data coordinate (or whatever transform set).
    "
                :superclasses ("text.Text")
                :members 
                  ( ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1632 1636]))                          )
                        (reparse-symbol indented_block_body) [1615 1912]))                  
                :type "class")
                nil [1369 1912])
            ("ContourLabeler" type
               (:documentation "Mixin to provide labelling capability to ContourSet"
                :superclasses ("object")
                :members 
                  ( ("clabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2022 2026])
                            ("args" variable nil (reparse-symbol function_parameters) [2028 2033])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2035 2043]))                          
                        :documentation "
        Label a contour plot.

        Call signature::

          clabel(cs, **kwargs)

        Adds labels to line contours in *cs*, where *cs* is a
        :class:`~matplotlib.contour.ContourSet` object returned by
        contour.

        ::

          clabel(cs, v, **kwargs)

        only labels contours listed in *v*.

        Optional keyword arguments:

          *fontsize*:
            size in points or relative size e.g., 'smaller', 'x-large'

          *colors*:
            - if *None*, the color of each label matches the color of
              the corresponding contour

            - if one string color, e.g., *colors* = 'r' or *colors* =
              'red', all labels will be plotted in this color

            - if a tuple of matplotlib color args (string, float, rgb, etc),
              different labels will be plotted in different colors in the order
              specified

          *inline*:
            controls whether the underlying contour is removed or
            not. Default is *True*.

          *inline_spacing*:
            space in pixels to leave on each side of label when
            placing inline.  Defaults to 5.  This spacing will be
            exact for labels at locations where the contour is
            straight, less so for labels on curved contours.

          *fmt*:
            a format string for the label. Default is '%1.3f'
            Alternatively, this can be a dictionary matching contour
            levels with arbitrary strings to use for each contour level
            (i.e., fmt[level]=string), or it can be any callable, such
            as a :class:`~matplotlib.ticker.Formatter` instance, that
            returns a string when called with a numeric contour level.

          *manual*:
            if *True*, contour labels will be placed manually using
            mouse clicks.  Click the first button near a contour to
            add a label, click the second button (or potentially both
            mouse buttons at once) to finish adding labels.  The third
            button can be used to remove the last label added, but
            only if labels are not inline.  Alternatively, the keyboard
            can be used to select label locations (enter to end label
            placement, delete or backspace act like the third mouse button,
            and any other key will select a label location).

            *manual* can be an iterable object of x,y tuples. Contour labels
            will be created as if mouse is clicked at each x,y positions.

          *rightside_up*:
            if *True* (default), label rotations will always be plus
            or minus 90 degrees from level.

          *use_clabeltext*:
            if *True* (default is False), ClabelText class (instead of
            matplotlib.Text) is used to create labels. ClabelText
            recalculates rotation angles of texts during the drawing time,
            therefore this can be used if aspect of the axes changes.

        .. plot:: mpl_examples/pylab_examples/contour_demo.py
        ")
                        (reparse-symbol indented_block_body) [2011 8726])
                    ("print_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8747 8751])
                            ("linecontour" variable nil (reparse-symbol function_parameters) [8753 8764])
                            ("labelwidth" variable nil (reparse-symbol function_parameters) [8766 8776]))                          )
                        (reparse-symbol indented_block_body) [8731 9260])
                    ("too_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9279 9283])
                            ("x" variable nil (reparse-symbol function_parameters) [9285 9286])
                            ("y" variable nil (reparse-symbol function_parameters) [9288 9289])
                            ("lw" variable nil (reparse-symbol function_parameters) [9291 9293]))                          )
                        (reparse-symbol indented_block_body) [9265 9537])
                    ("get_label_coords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9563 9567])
                            ("distances" variable nil (reparse-symbol function_parameters) [9569 9578])
                            ("XX" variable nil (reparse-symbol function_parameters) [9580 9582])
                            ("YY" variable nil (reparse-symbol function_parameters) [9584 9586])
                            ("ysize" variable nil (reparse-symbol function_parameters) [9588 9593])
                            ("lw" variable nil (reparse-symbol function_parameters) [9595 9597]))                          
                        :documentation "
        Return x, y, and the index of a label location.

        Labels are plotted at a location with the smallest
        deviation of the contour from a straight line
        unless there is another label nearby, in which case
        the next best place on the contour is picked up.
        If all such candidates are rejected, the beginning
        of the contour is chosen.
        ")
                        (reparse-symbol indented_block_body) [9542 10345])
                    ("get_label_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10370 10374])
                            ("lev" variable nil (reparse-symbol function_parameters) [10376 10379])
                            ("fmt" variable nil (reparse-symbol function_parameters) [10381 10384])
                            ("fsize" variable nil (reparse-symbol function_parameters) [10386 10391]))                          
                        :documentation "
        Return the width of the label in points.
        ")
                        (reparse-symbol indented_block_body) [10350 11384])
                    ("get_real_label_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11414 11418])
                            ("lev" variable nil (reparse-symbol function_parameters) [11420 11423])
                            ("fmt" variable nil (reparse-symbol function_parameters) [11425 11428])
                            ("fsize" variable nil (reparse-symbol function_parameters) [11430 11435]))                          
                        :documentation "
        This computes actual onscreen label width.
        This uses some black magic to determine onscreen extent of non-drawn
        label.  This magic may not be very robust.

        This method is not being used, and may be modified or removed.
        ")
                        (reparse-symbol indented_block_body) [11389 12410])
                    ("set_label_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12435 12439])
                            ("label" variable nil (reparse-symbol function_parameters) [12441 12446])
                            ("text" variable nil (reparse-symbol function_parameters) [12448 12452])
                            ("color" variable nil (reparse-symbol function_parameters) [12454 12459]))                          )
                        (reparse-symbol indented_block_body) [12415 12676])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12694 12698])
                            ("lev" variable nil (reparse-symbol function_parameters) [12700 12703])
                            ("fmt" variable nil (reparse-symbol function_parameters) [12705 12708]))                          )
                        (reparse-symbol indented_block_body) [12681 13011])
                    ("locate_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13033 13037])
                            ("linecontour" variable nil (reparse-symbol function_parameters) [13039 13050])
                            ("labelwidth" variable nil (reparse-symbol function_parameters) [13052 13062]))                          
                        :documentation "
        Find a good place to plot a label (relatively flat
        part of the contour).
        ")
                        (reparse-symbol indented_block_body) [13016 14230])
                    ("calc_label_rot_and_inline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14265 14269])
                            ("slc" variable nil (reparse-symbol function_parameters) [14271 14274])
                            ("ind" variable nil (reparse-symbol function_parameters) [14276 14279])
                            ("lw" variable nil (reparse-symbol function_parameters) [14281 14283])
                            ("lc" variable nil (reparse-symbol function_parameters) [14285 14287])
                            ("spacing" variable nil (reparse-symbol function_parameters) [14294 14301]))                          
                        :documentation "
        This function calculates the appropriate label rotation given
        the linecontour coordinates in screen units, the index of the
        label location and the label width.

        It will also break contour and calculate inlining if *lc* is
        not empty (lc defaults to the empty list if None).  *spacing*
        is the space around the label in pixels to leave empty.

        Do both of these tasks at once to avoid calling mlab.path_length
        multiple times, which is relatively costly.

        The method used here involves calculating the path length
        along the contour in pixel coordinates and then looking
        approximately label width / 2 away from central point to
        determine rotation and then to break contour if desired.
        ")
                        (reparse-symbol indented_block_body) [14235 18321])
                    ("_get_label_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18346 18350])
                            ("x" variable nil (reparse-symbol function_parameters) [18352 18353])
                            ("y" variable nil (reparse-symbol function_parameters) [18355 18356])
                            ("rotation" variable nil (reparse-symbol function_parameters) [18358 18366]))                          )
                        (reparse-symbol indented_block_body) [18326 18607])
                    ("_get_label_clabeltext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18638 18642])
                            ("x" variable nil (reparse-symbol function_parameters) [18644 18645])
                            ("y" variable nil (reparse-symbol function_parameters) [18647 18648])
                            ("rotation" variable nil (reparse-symbol function_parameters) [18650 18658]))                          )
                        (reparse-symbol indented_block_body) [18612 19319])
                    ("_add_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19339 19343])
                            ("t" variable nil (reparse-symbol function_parameters) [19345 19346])
                            ("x" variable nil (reparse-symbol function_parameters) [19348 19349])
                            ("y" variable nil (reparse-symbol function_parameters) [19351 19352])
                            ("lev" variable nil (reparse-symbol function_parameters) [19354 19357])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [19359 19365]))                          )
                        (reparse-symbol indented_block_body) [19324 19751])
                    ("add_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19770 19774])
                            ("x" variable nil (reparse-symbol function_parameters) [19776 19777])
                            ("y" variable nil (reparse-symbol function_parameters) [19779 19780])
                            ("rotation" variable nil (reparse-symbol function_parameters) [19782 19790])
                            ("lev" variable nil (reparse-symbol function_parameters) [19792 19795])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [19797 19803]))                          
                        :documentation "
        Add contour label using :class:`~matplotlib.text.Text` class.
        ")
                        (reparse-symbol indented_block_body) [19756 19996])
                    ("add_label_clabeltext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20026 20030])
                            ("x" variable nil (reparse-symbol function_parameters) [20032 20033])
                            ("y" variable nil (reparse-symbol function_parameters) [20035 20036])
                            ("rotation" variable nil (reparse-symbol function_parameters) [20038 20046])
                            ("lev" variable nil (reparse-symbol function_parameters) [20048 20051])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [20053 20059]))                          
                        :documentation "
        Add contour label using :class:`ClabelText` class.
        ")
                        (reparse-symbol indented_block_body) [20001 20481])
                    ("add_label_near" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20505 20509])
                            ("x" variable nil (reparse-symbol function_parameters) [20511 20512])
                            ("y" variable nil (reparse-symbol function_parameters) [20514 20515])
                            ("inline" variable nil (reparse-symbol function_parameters) [20517 20523])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [20530 20544])
                            ("transform" variable nil (reparse-symbol function_parameters) [20571 20580]))                          
                        :documentation "
        Add a label near the point (x, y). If transform is None
        (default), (x, y) is in data coordinates; if transform is
        False, (x, y) is in display coordinates; otherwise, the
        specified transform will be used to translate (x, y) into
        display coordinates.

        *inline*:
          controls whether the underlying contour is removed or
          not. Default is *True*.

        *inline_spacing*:
          space in pixels to leave on each side of label when
          placing inline.  Defaults to 5.  This spacing will be
          exact for labels at locations where the contour is
          straight, less so for labels on curved contours.
        ")
                        (reparse-symbol indented_block_body) [20486 23618])
                    ("pop_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23637 23641])
                            ("index" variable nil (reparse-symbol function_parameters) [23643 23648]))                          
                        :documentation "Defaults to removing last label, but any index can be supplied")
                        (reparse-symbol indented_block_body) [23623 23826])
                    ("labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23842 23846])
                            ("inline" variable nil (reparse-symbol function_parameters) [23848 23854])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [23856 23870]))                          )
                        (reparse-symbol indented_block_body) [23831 26224]))                  
                :type "class")
                nil [1914 26224])
            ("_find_closest_point_on_leg" function
               (:documentation "find closest point to p0 on line segment connecting p1 and p2"
                :arguments 
                  ( ("p1" variable nil (reparse-symbol function_parameters) [26257 26259])
                    ("p2" variable nil (reparse-symbol function_parameters) [26261 26263])
                    ("p0" variable nil (reparse-symbol function_parameters) [26265 26267]))                  )
                nil [26226 26758])
            ("_find_closest_point_on_path" function
               (:documentation "
    lc: coordinates of vertices
    point: coordinates of test point
    "
                :arguments 
                  ( ("lc" variable nil (reparse-symbol function_parameters) [26792 26794])
                    ("point" variable nil (reparse-symbol function_parameters) [26796 26801]))                  )
                nil [26760 27564])
            ("ContourSet" type
               (:documentation "
    Store a set of contour lines or filled regions.

    User-callable method: clabel

    Useful attributes:
      ax:
        The axes object in which the contours are drawn

      collections:
        a silent_list of LineCollections or PolyCollections

      levels:
        contour levels

      layers:
        same as levels for line contours; half-way between
        levels for filled contours.  See :meth:`_process_colors`.
    "
                :superclasses ("cm.ScalarMappable" "ContourLabeler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draw contour lines or filled regions, depending on
        whether keyword arg 'filled' is *False* (default) or *True*.

        The first three arguments must be:

          *ax*: axes object.

          *levels*: [level0, level1, ..., leveln]
            A list of floating point numbers indicating the contour
            levels.

          *allsegs*: [level0segs, level1segs, ...]
            List of all the polygon segments for all the *levels*.
            For contour lines ``len(allsegs) == len(levels)``, and for
            filled contour regions ``len(allsegs) = len(levels)-1``.

            level0segs = [polygon0, polygon1, ...]

            polygon0 = array_like [[x0,y0], [x1,y1], ...]

          *allkinds*: *None* or [level0kinds, level1kinds, ...]
            Optional list of all the polygon vertex kinds (code types), as
            described and used in Path.   This is used to allow multiply-
            connected paths such as holes within filled polygons.
            If not *None*, len(allkinds) == len(allsegs).

            level0kinds = [polygon0kinds, ...]

            polygon0kinds = [vertexcode0, vertexcode1, ...]

            If *allkinds* is not *None*, usually all polygons for a particular
            contour level are grouped together so that

            level0segs = [polygon0] and level0kinds = [polygon0kinds].

        Keyword arguments are as described in
        :attr:`matplotlib.contour.QuadContourSet.contour_doc`.

        **Examples:**

        .. plot:: mpl_examples/misc/contour_manual.py
        \"\"\"" code nil (reparse-symbol indented_block_body) [28123 29691])
                            ("self" variable nil (reparse-symbol indented_block_body) [29700 29712])
                            ("self" variable nil (reparse-symbol indented_block_body) [29721 29761])
                            ("self" variable nil (reparse-symbol indented_block_body) [29770 29811])
                            ("self" variable nil (reparse-symbol indented_block_body) [29820 29868])
                            ("self" variable nil (reparse-symbol indented_block_body) [29877 29925])
                            ("self" variable nil (reparse-symbol indented_block_body) [29935 29979])
                            ("self" variable nil (reparse-symbol indented_block_body) [29989 30027])
                            ("self" variable nil (reparse-symbol indented_block_body) [30036 30076])
                            ("self" variable nil (reparse-symbol indented_block_body) [30085 30125])
                            ("cmap" variable nil (reparse-symbol indented_block_body) [30134 30165])
                            ("self" variable nil (reparse-symbol indented_block_body) [30174 30214])
                            ("norm" variable nil (reparse-symbol indented_block_body) [30223 30254])
                            ("vmin" variable nil (reparse-symbol indented_block_body) [30263 30294])
                            ("vmax" variable nil (reparse-symbol indented_block_body) [30303 30334])
                            ("self" variable nil (reparse-symbol indented_block_body) [30343 30388])
                            ("self" variable nil (reparse-symbol indented_block_body) [30397 30447])
                            ("if" code nil (reparse-symbol indented_block_body) [30456 30573])
                            ("self" variable nil (reparse-symbol indented_block_body) [30811 30848])
                            ("self" variable nil (reparse-symbol indented_block_body) [30857 30899])
                            ("if" code nil (reparse-symbol indented_block_body) [30908 31324])
                            ("if" code nil (reparse-symbol indented_block_body) [31333 31519])
                            ("if" code nil (reparse-symbol indented_block_body) [31527 31701])
                            ("if" code nil (reparse-symbol indented_block_body) [31709 31825])
                            ("if" code nil (reparse-symbol indented_block_body) [31833 31915])
                            ("self" variable nil (reparse-symbol indented_block_body) [31924 31971])
                            ("self" code nil (reparse-symbol indented_block_body) [31981 32016])
                            ("self" code nil (reparse-symbol indented_block_body) [32025 32047])
                            ("if" code nil (reparse-symbol indented_block_body) [32057 33299])
                            ("if" code nil (reparse-symbol indented_block_body) [33308 33484])
                            ("self" variable nil (reparse-symbol indented_block_body) [33539 33559])
                            ("self" variable nil (reparse-symbol indented_block_body) [33568 33590])
                            ("kw" variable nil (reparse-symbol indented_block_body) [33600 33619])
                            ("if" code nil (reparse-symbol indented_block_body) [33628 33679])
                            ("cm" code nil (reparse-symbol indented_block_body) [33729 33767])
                            ("if" code nil (reparse-symbol indented_block_body) [33776 33831])
                            ("if" code nil (reparse-symbol indented_block_body) [33839 33894])
                            ("self" code nil (reparse-symbol indented_block_body) [33902 33924])
                            ("self, self" code nil (reparse-symbol indented_block_body) [33934 33996])
                            ("if" code nil (reparse-symbol indented_block_body) [34006 36025])
                            ("for" code nil (reparse-symbol indented_block_body) [36034 36197])
                            ("self" code nil (reparse-symbol indented_block_body) [36205 36253])
                            ("self" code nil (reparse-symbol indented_block_body) [36262 36296])
                            ("self" code nil (reparse-symbol indented_block_body) [36306 36320]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28087 28091])
                            ("ax" variable nil (reparse-symbol function_parameters) [28093 28095])
                            ("args" variable nil (reparse-symbol function_parameters) [28097 28102])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28104 28112]))                          
                        :documentation "
        Draw contour lines or filled regions, depending on
        whether keyword arg 'filled' is *False* (default) or *True*.

        The first three arguments must be:

          *ax*: axes object.

          *levels*: [level0, level1, ..., leveln]
            A list of floating point numbers indicating the contour
            levels.

          *allsegs*: [level0segs, level1segs, ...]
            List of all the polygon segments for all the *levels*.
            For contour lines ``len(allsegs) == len(levels)``, and for
            filled contour regions ``len(allsegs) = len(levels)-1``.

            level0segs = [polygon0, polygon1, ...]

            polygon0 = array_like [[x0,y0], [x1,y1], ...]

          *allkinds*: *None* or [level0kinds, level1kinds, ...]
            Optional list of all the polygon vertex kinds (code types), as
            described and used in Path.   This is used to allow multiply-
            connected paths such as holes within filled polygons.
            If not *None*, len(allkinds) == len(allsegs).

            level0kinds = [polygon0kinds, ...]

            polygon0kinds = [vertexcode0, vertexcode1, ...]

            If *allkinds* is not *None*, usually all polygons for a particular
            contour level are grouped together so that

            level0segs = [polygon0] and level0kinds = [polygon0kinds].

        Keyword arguments are as described in
        :attr:`matplotlib.contour.QuadContourSet.contour_doc`.

        **Examples:**

        .. plot:: mpl_examples/misc/contour_manual.py
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28074 36339])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36362 36366]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform`
        instance used by this ContourSet.
        ")
                        (reparse-symbol indented_block_body) [36344 36814])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36836 36840]))                          )
                        (reparse-symbol indented_block_body) [36819 37123])
                    ("legend_elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37148 37152])
                            ("variable_name" variable nil (reparse-symbol function_parameters) [37154 37167])
                            ("str_format" variable nil (reparse-symbol function_parameters) [37173 37183]))                          
                        :documentation "
        Return a list of artist and labels suitable for passing through
        to :func:`plt.legend` which represent this ContourSet.

        Args:

            *variable_name*: the string used inside the inequality used
              on the labels

            *str_format*: function used to format the numbers in the labels
        ")
                        (reparse-symbol indented_block_body) [37128 39243])
                    ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39266 39270])
                            ("args" variable nil (reparse-symbol function_parameters) [39272 39277])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39279 39287]))                          
                        :documentation "
        Process *args* and *kwargs*; override in derived classes.

        Must set self.levels, self.zmin and self.zmax, and update axes
        limits.
        ")
                        (reparse-symbol indented_block_body) [39248 40557])
                    ("_get_allsegs_and_allkinds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40592 40596]))                          
                        :documentation "
        Override in derived classes to create and return allsegs and allkinds.
        allkinds can be None.
        ")
                        (reparse-symbol indented_block_body) [40562 40775])
                    ("_get_lowers_and_uppers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40807 40811]))                          
                        :documentation "
        Return (lowers,uppers) for filled contours.
        ")
                        (reparse-symbol indented_block_body) [40780 41276])
                    ("_make_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41297 41301])
                            ("segs" variable nil (reparse-symbol function_parameters) [41303 41307])
                            ("kinds" variable nil (reparse-symbol function_parameters) [41309 41314]))                          )
                        (reparse-symbol indented_block_body) [41281 41517])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41534 41538]))                          )
                        (reparse-symbol indented_block_body) [41522 42331])
                    ("_autolev" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42349 42353])
                            ("N" variable nil (reparse-symbol function_parameters) [42355 42356]))                          
                        :documentation "
        Select contour levels to span the data.

        We need two more levels for filled contours than for
        line contours, because for the latter we need to specify
        the lower and upper boundary of each range. For example,
        a single contour boundary, say at z = 0, requires only
        one contour line, but two filled regions, and therefore
        three levels to provide boundaries for both regions.
        ")
                        (reparse-symbol indented_block_body) [42336 43302])
                    ("_contour_level_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43331 43335])
                            ("z" variable nil (reparse-symbol function_parameters) [43337 43338])
                            ("args" variable nil (reparse-symbol function_parameters) [43340 43344]))                          
                        :documentation "
        Determine the contour levels and store in self.levels.
        ")
                        (reparse-symbol indented_block_body) [43307 44560])
                    ("_process_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44585 44589]))                          
                        :documentation "
        Assign values to :attr:`layers` based on :attr:`levels`,
        adding extended layers as needed if contours are filled.

        For line contours, layers simply coincide with levels;
        a line is a thin layer.  No extended levels are needed
        with line contours.
        ")
                        (reparse-symbol indented_block_body) [44565 46060])
                    ("_process_colors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46085 46089]))                          
                        :documentation "
        Color argument processing for contouring.

        Note that we base the color mapping on the contour levels
        and layers, not on the actual range of the Z values.  This
        means we don't have to worry about bad values in Z, and we
        always have the full dynamic range available for the selected
        levels.

        The color is based on the midpoint of the layer, except for
        extended end layers.  By default, the norm vmin and vmax
        are the extreme values of the non-extended levels.  Hence,
        the layer color extremes are not the extreme values of
        the colormap itself, but approach those values as the number
        of levels increases.  An advantage of this scheme is that
        line contours, when added to filled contours, take on
        colors that are consistent with those of the filled regions;
        for example, a contour line on the boundary between two
        regions will have a color intermediate between those
        of the regions.

        ")
                        (reparse-symbol indented_block_body) [46065 47853])
                    ("_process_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47938 47942]))                          )
                        (reparse-symbol indented_block_body) [47914 48623])
                    ("_process_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48652 48656]))                          )
                        (reparse-symbol indented_block_body) [48628 49679])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49698 49702]))                          
                        :documentation "returns alpha to be applied to all ContourSet artists")
                        (reparse-symbol indented_block_body) [49684 49799])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49818 49822])
                            ("alpha" variable nil (reparse-symbol function_parameters) [49824 49829]))                          
                        :documentation "sets alpha for all ContourSet artists")
                        (reparse-symbol indented_block_body) [49804 49934])
                    ("find_nearest_contour" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49964 49968])
                            ("x" variable nil (reparse-symbol function_parameters) [49970 49971])
                            ("y" variable nil (reparse-symbol function_parameters) [49973 49974])
                            ("indices" variable nil (reparse-symbol function_parameters) [49976 49983])
                            ("pixel" variable nil (reparse-symbol function_parameters) [49990 49995]))                          
                        :documentation "
        Finds contour that is closest to a point.  Defaults to
        measuring distance in pixels (screen space - useful for manual
        contour labeling), but this can be controlled via a keyword
        argument.

        Returns a tuple containing the contour, segment, index of
        segment, x & y of segment point and distance to minimum point.

        Optional keyword arguments:

          *indices*:
            Indexes of contour levels to consider when looking for
            nearest point.  Defaults to using all levels.

          *pixel*:
            If *True*, measure distance in pixel space, if not, measure
            distance in axes space.  Defaults to *True*.

        ")
                        (reparse-symbol indented_block_body) [49939 52139]))                  
                :type "class")
                nil [27566 52139])
            ("QuadContourSet" type
               (:documentation "
    Create and store a set of contour lines or filled regions.

    User-callable method: :meth:`clabel`

    Useful attributes:
      ax:
        The axes object in which the contours are drawn

      collections:
        A silent_list of LineCollections or PolyCollections

      levels:
        Contour levels

      layers:
        Same as levels for line contours; half-way between
        levels for filled contours.  See :meth:`_process_colors` method.
    "
                :superclasses ("ContourSet")
                :members 
                  ( ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52674 52678])
                            ("args" variable nil (reparse-symbol function_parameters) [52680 52685])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52687 52695]))                          
                        :documentation "
        Process args and kwargs.
        ")
                        (reparse-symbol indented_block_body) [52656 54919])
                    ("_get_allsegs_and_allkinds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54954 54958]))                          
                        :documentation "
        Create and return allsegs and allkinds by calling underlying C code.
        ")
                        (reparse-symbol indented_block_body) [54924 56290])
                    ("_contour_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56313 56317])
                            ("args" variable nil (reparse-symbol function_parameters) [56319 56323])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56325 56331]))                          )
                        (reparse-symbol indented_block_body) [56295 57216])
                    ("_check_xyz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57236 57240])
                            ("args" variable nil (reparse-symbol function_parameters) [57242 57246])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57248 57254]))                          
                        :documentation "
        For functions like contour, check that the dimensions
        of the input arrays match; if x and y are 1D, convert
        them to 2D using meshgrid.

        Possible change: I think we should make and use an ArgumentError
        Exception class (here and elsewhere).
        ")
                        (reparse-symbol indented_block_body) [57221 58941])
                    ("_initialize_x_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58966 58970])
                            ("z" variable nil (reparse-symbol function_parameters) [58972 58973]))                          
                        :documentation "
        Return X, Y arrays such that contour(Z) will match imshow(Z)
        if origin is not None.
        The center of pixel Z[i,j] depends on origin:
        if origin is None, x = j, y = i;
        if origin is 'lower', x = j + 0.5, y = i + 0.5;
        if origin is 'upper', x = j + 0.5, y = Nrows - i - 0.5
        If extent is not None, x and y will be scaled to match,
        as in imshow.
        If origin is None and extent is not None, then extent
        will give the minimum and maximum values of x and y.
        ")
                        (reparse-symbol indented_block_body) [58946 60408])
                    ("contour_doc" variable nil (reparse-symbol indented_block_body) [60413 68919]))                  
                :type "class")
                nil [52141 68920]))          
      :file "contour.py"
      :pointmax 68920
      :fsize 68919
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for dealing with the polylines used throughout matplotlib.

The primary class for polyline handling in matplotlib is :class:`Path`.
Almost all vector drawing makes use of Paths somewhere in the drawing
pipeline.

Whilst a :class:`Path` instance itself cannot be drawn, there exists
:class:`~matplotlib.artist.Artist` subclasses which can be used for
convenient Path visualisation - the two most frequently used of these are
:class:`~matplotlib.patches.PathPatch` and
:class:`~matplotlib.collections.PathCollection`.
\"\"\"" code nil nil [1 533])
            ("" code nil nil [558 643])
            ("six" include nil nil [645 655])
            ("math" include nil nil [657 668])
            ("weakref" include nil nil [669 708])
            ("numpy" include nil nil [710 728])
            ("numpy" include nil nil [729 749])
            ("matplotlib" include nil nil [751 779])
            ("matplotlib.cbook" include nil nil [780 845])
            ("matplotlib" include nil nil [846 877])
            ("Path" type
               (:documentation "
    :class:`Path` represents a series of possibly disconnected,
    possibly closed, line and curve segments.

    The underlying storage is made up of two parallel numpy arrays:
      - *vertices*: an Nx2 float array of vertices
      - *codes*: an N-length uint8 array of vertex types

    These two arrays always have the same length in the first
    dimension.  For example, to represent a cubic curve, you must
    provide three vertices as well as three codes ``CURVE3``.

    The code types are:

       - ``STOP``   :  1 vertex (ignored)
           A marker for the end of the entire path (currently not
           required and ignored)

       - ``MOVETO`` :  1 vertex
            Pick up the pen and move to the given vertex.

       - ``LINETO`` :  1 vertex
            Draw a line from the current position to the given vertex.

       - ``CURVE3`` :  1 control point, 1 endpoint
          Draw a quadratic Bezier curve from the current position,
          with the given control point, to the given end point.

       - ``CURVE4`` :  2 control points, 1 endpoint
          Draw a cubic Bezier curve from the current position, with
          the given control points, to the given end point.

       - ``CLOSEPOLY`` : 1 vertex (ignored)
          Draw a line segment to the start point of the current
          polyline.

    Users of Path objects should not access the vertices and codes
    arrays directly.  Instead, they should use :meth:`iter_segments`
    or :meth:`cleaned` to get the vertex/code pairs.  This is important,
    since many :class:`Path` objects, as an optimization, do not store a
    *codes* at all, but have a default one provided for them by
    :meth:`iter_segments`.

    .. note::

        The vertices and codes arrays should be treated as
        immutable -- there are a number of optimizations and assumptions
        made up front in the constructor that will not change when the
        data changes.

    "
                :superclasses ("object")
                :members 
                  ( ("STOP" variable nil (reparse-symbol indented_block_body) [2887 2895])
                    ("MOVETO" variable nil (reparse-symbol indented_block_body) [2919 2929])
                    ("LINETO" variable nil (reparse-symbol indented_block_body) [2951 2961])
                    ("CURVE3" variable nil (reparse-symbol indented_block_body) [2983 2993])
                    ("CURVE4" variable nil (reparse-symbol indented_block_body) [3017 3027])
                    ("CLOSEPOLY" variable nil (reparse-symbol indented_block_body) [3051 3065])
                    ("NUM_VERTICES_FOR_CODE" variable nil (reparse-symbol indented_block_body) [3179 3415])
                    ("code_type" variable nil (reparse-symbol indented_block_body) [3421 3441])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new path with the given vertices and codes.

        Parameters
        ----------
        vertices : array_like
            The ``(n, 2)`` float array, masked array or sequence of pairs
            representing the vertices of the path.

            If *vertices* contains masked values, they will be converted
            to NaNs which are then handled correctly by the Agg
            PathIterator and other consumers of path data, such as
            :meth:`iter_segments`.
        codes : {None, array_like}, optional
            n-length array integers representing the codes of the path.
            If not None, codes must be the same length as vertices.
            If None, *vertices* will be treated as a series of line segments.
        _interpolation_steps : int, optional
            Used as a hint to certain projections, such as Polar, that this
            path should be linearly interpolated immediately before drawing.
            This attribute is primarily an implementation detail and is not
            intended for public use.
        closed : bool, optional
            If *codes* is None and closed is True, vertices will be treated as
            line segments of a closed polygon.
        readonly : bool, optional
            Makes the path behave in an immutable way and sets the vertices
            and codes as read-only arrays.
        \"\"\"" code nil (reparse-symbol indented_block_body) [3568 4963])
                            ("if" code nil (reparse-symbol indented_block_body) [4972 5137])
                            ("if" code nil (reparse-symbol indented_block_body) [5146 5306])
                            ("if" code nil (reparse-symbol indented_block_body) [5315 6039])
                            ("self" variable nil (reparse-symbol indented_block_body) [6048 6073])
                            ("self" variable nil (reparse-symbol indented_block_body) [6082 6101])
                            ("self" variable nil (reparse-symbol indented_block_body) [6110 6158])
                            ("self" code nil (reparse-symbol indented_block_body) [6167 6188])
                            ("if" code nil (reparse-symbol indented_block_body) [6198 6437]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3460 3464])
                            ("vertices" variable nil (reparse-symbol function_parameters) [3466 3474])
                            ("codes" variable nil (reparse-symbol function_parameters) [3476 3481])
                            ("_interpolation_steps" variable nil (reparse-symbol function_parameters) [3488 3508])
                            ("closed" variable nil (reparse-symbol function_parameters) [3529 3535])
                            ("readonly" variable nil (reparse-symbol function_parameters) [3543 3551]))                          
                        :documentation "
        Create a new path with the given vertices and codes.

        Parameters
        ----------
        vertices : array_like
            The ``(n, 2)`` float array, masked array or sequence of pairs
            representing the vertices of the path.

            If *vertices* contains masked values, they will be converted
            to NaNs which are then handled correctly by the Agg
            PathIterator and other consumers of path data, such as
            :meth:`iter_segments`.
        codes : {None, array_like}, optional
            n-length array integers representing the codes of the path.
            If not None, codes must be the same length as vertices.
            If None, *vertices* will be treated as a series of line segments.
        _interpolation_steps : int, optional
            Used as a hint to certain projections, such as Polar, that this
            path should be linearly interpolated immediately before drawing.
            This attribute is primarily an implementation detail and is not
            intended for public use.
        closed : bool, optional
            If *codes* is None and closed is True, vertices will be treated as
            line segments of a closed polygon.
        readonly : bool, optional
            Makes the path behave in an immutable way and sets the vertices
            and codes as read-only arrays.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3447 6437])
                    ("_fast_from_codes_and_verts" function
                       (:documentation "
        Creates a Path instance without the expense of calling the constructor

        Parameters
        ----------
        verts : numpy array
        codes : numpy array
        internals : dict or None
            The attributes that the resulting path should have.
            Allowed keys are ``readonly``, ``should_simplify``,
            ``simplify_threshold``, ``has_nonfinite`` and
            ``interpolation_steps``.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6490 6493])
                            ("verts" variable nil (reparse-symbol function_parameters) [6495 6500])
                            ("codes" variable nil (reparse-symbol function_parameters) [6502 6507])
                            ("internals" variable nil (reparse-symbol function_parameters) [6509 6518]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6442 7998])
                    ("_update_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8022 8026]))                          )
                        (reparse-symbol indented_block_body) [8003 8372])
                    ("vertices" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8404 8408]))                          
                        :documentation "
        The list of vertices in the `Path` as an Nx2 numpy array.
        ")
                        (reparse-symbol indented_block_body) [8377 8531])
                    ("vertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8570 8574])
                            ("vertices" variable nil (reparse-symbol function_parameters) [8576 8584]))                          
                        :decorators 
                          ( ("vertices.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8536 8752])
                    ("codes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8781 8785]))                          
                        :documentation "
        The list of codes in the `Path` as a 1-D numpy array.  Each
        code is one of `STOP`, `MOVETO`, `LINETO`, `CURVE3`, `CURVE4`
        or `CLOSEPOLY`.  For codes that correspond to more than one
        vertex (`CURVE3` and `CURVE4`), that code will be repeated so
        that the length of `self.vertices` and `self.codes` is always
        the same.
        ")
                        (reparse-symbol indented_block_body) [8757 9203])
                    ("codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9236 9240])
                            ("codes" variable nil (reparse-symbol function_parameters) [9242 9247]))                          
                        :decorators 
                          ( ("codes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9208 9406])
                    ("simplify_threshold" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9448 9452]))                          
                        :documentation "
        The fraction of a pixel difference below which vertices will
        be simplified out.
        ")
                        (reparse-symbol indented_block_body) [9411 9615])
                    ("simplify_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9674 9678])
                            ("threshold" variable nil (reparse-symbol function_parameters) [9680 9689]))                          
                        :decorators 
                          ( ("simplify_threshold.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9620 9737])
                    ("has_nonfinite" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9774 9778]))                          
                        :documentation "
        `True` if the vertices array has nonfinite values.
        ")
                        (reparse-symbol indented_block_body) [9742 9899])
                    ("should_simplify" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9938 9942]))                          
                        :documentation "
        `True` if the vertices array should be simplified.
        ")
                        (reparse-symbol indented_block_body) [9904 10065])
                    ("should_simplify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10118 10122])
                            ("should_simplify" variable nil (reparse-symbol function_parameters) [10124 10139]))                          
                        :decorators 
                          ( ("should_simplify.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10070 10190])
                    ("readonly" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10222 10226]))                          
                        :documentation "
        `True` if the `Path` is read-only.
        ")
                        (reparse-symbol indented_block_body) [10195 10326])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10344 10348]))                          
                        :documentation "
        Returns a shallow copy of the `Path`, which will share the
        vertices and codes with the source `Path`.
        ")
                        (reparse-symbol indented_block_body) [10331 10544])
                    ("copy" variable nil (reparse-symbol indented_block_body) [10549 10564])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10587 10591])
                            ("memo" variable nil (reparse-symbol function_parameters) [10593 10597]))                          
                        :documentation "
        Returns a deepcopy of the `Path`.  The `Path` will not be
        readonly, even if the source `Path` is.
        ")
                        (reparse-symbol indented_block_body) [10570 10982])
                    ("deepcopy" variable nil (reparse-symbol indented_block_body) [10987 11010])
                    ("make_compound_path_from_polys" function
                       (:documentation "
        Make a compound path object to draw a number
        of polygons with equal numbers of sides XY is a (numpolys x
        numsides x 2) numpy array of vertices.  Return object is a
        :class:`Path`

        .. plot:: mpl_examples/api/histogram_path_demo.py

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11067 11070])
                            ("XY" variable nil (reparse-symbol function_parameters) [11072 11074]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11016 12069])
                    ("make_compound_path" function
                       (:documentation "Make a compound path from a list of Path objects."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [12114 12117])
                            ("args" variable nil (reparse-symbol function_parameters) [12119 12124]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12074 12895])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12913 12917]))                          )
                        (reparse-symbol indented_block_body) [12900 12980])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12997 13001]))                          )
                        (reparse-symbol indented_block_body) [12985 13038])
                    ("iter_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13061 13065])
                            ("transform" variable nil (reparse-symbol function_parameters) [13067 13076])
                            ("remove_nans" variable nil (reparse-symbol function_parameters) [13083 13094])
                            ("clip" variable nil (reparse-symbol function_parameters) [13101 13105])
                            ("snap" variable nil (reparse-symbol function_parameters) [13134 13138])
                            ("stroke_width" variable nil (reparse-symbol function_parameters) [13146 13158])
                            ("simplify" variable nil (reparse-symbol function_parameters) [13164 13172])
                            ("curves" variable nil (reparse-symbol function_parameters) [13201 13207])
                            ("sketch" variable nil (reparse-symbol function_parameters) [13214 13220]))                          
                        :documentation "
        Iterates over all of the curve segments in the path.  Each
        iteration returns a 2-tuple (*vertices*, *code*), where
        *vertices* is a sequence of 1 - 3 coordinate pairs, and *code* is
        one of the :class:`Path` codes.

        Additionally, this method can provide a number of standard
        cleanups and conversions to the path.

        Parameters
        ----------
        transform : None or :class:`~matplotlib.transforms.Transform` instance
            If not None, the given affine transformation will
            be applied to the path.
        remove_nans : {False, True}, optional
            If True, will remove all NaNs from the path and
            insert MOVETO commands to skip over them.
        clip : None or sequence, optional
            If not None, must be a four-tuple (x1, y1, x2, y2)
            defining a rectangle in which to clip the path.
        snap : None or bool, optional
            If None, auto-snap to pixels, to reduce
            fuzziness of rectilinear lines.  If True, force snapping, and
            if False, don't snap.
        stroke_width : float, optional
            The width of the stroke being drawn.  Needed
             as a hint for the snapping algorithm.
        simplify : None or bool, optional
            If True, perform simplification, to remove
             vertices that do not affect the appearance of the path.  If
             False, perform no simplification.  If None, use the
             should_simplify member variable.
        curves : {True, False}, optional
            If True, curve segments will be returned as curve
            segments.  If False, all curves will be converted to line
            segments.
        sketch : None or sequence, optional
            If not None, must be a 3-tuple of the form
            (scale, length, randomness), representing the sketch
            parameters.
        ")
                        (reparse-symbol indented_block_body) [13043 16113])
                    ("cleaned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16130 16134])
                            ("transform" variable nil (reparse-symbol function_parameters) [16136 16145])
                            ("remove_nans" variable nil (reparse-symbol function_parameters) [16152 16163])
                            ("clip" variable nil (reparse-symbol function_parameters) [16171 16175])
                            ("quantize" variable nil (reparse-symbol function_parameters) [16198 16206])
                            ("simplify" variable nil (reparse-symbol function_parameters) [16214 16222])
                            ("curves" variable nil (reparse-symbol function_parameters) [16230 16236])
                            ("stroke_width" variable nil (reparse-symbol function_parameters) [16260 16272])
                            ("snap" variable nil (reparse-symbol function_parameters) [16278 16282])
                            ("sketch" variable nil (reparse-symbol function_parameters) [16290 16296]))                          
                        :documentation "
        Cleans up the path according to the parameters returning a new
        Path instance.

        .. seealso::

            See :meth:`iter_segments` for details of the keyword arguments.

        Returns
        -------
        Path instance with cleaned up vertices and codes.

        ")
                        (reparse-symbol indented_block_body) [16118 17246])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17267 17271])
                            ("transform" variable nil (reparse-symbol function_parameters) [17273 17282]))                          
                        :documentation "
        Return a transformed copy of the path.

        .. seealso::

            :class:`matplotlib.transforms.TransformedPath`
                A specialized path class that will cache the
                transformed result and automatically update when the
                transform changes.
        ")
                        (reparse-symbol indented_block_body) [17251 17718])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17742 17746])
                            ("point" variable nil (reparse-symbol function_parameters) [17748 17753])
                            ("transform" variable nil (reparse-symbol function_parameters) [17755 17764])
                            ("radius" variable nil (reparse-symbol function_parameters) [17771 17777]))                          
                        :documentation "
        Returns whether the (closed) path contains the given point.

        If *transform* is not ``None``, the path will be transformed before
        performing the test.

        *radius* allows the path to be made slightly larger or smaller.
        ")
                        (reparse-symbol indented_block_body) [17723 18273])
                    ("contains_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18298 18302])
                            ("points" variable nil (reparse-symbol function_parameters) [18304 18310])
                            ("transform" variable nil (reparse-symbol function_parameters) [18312 18321])
                            ("radius" variable nil (reparse-symbol function_parameters) [18328 18334]))                          
                        :documentation "
        Returns a bool array which is ``True`` if the (closed) path contains
        the corresponding point.

        If *transform* is not ``None``, the path will be transformed before
        performing the test.

        *radius* allows the path to be made slightly larger or smaller.
        ")
                        (reparse-symbol indented_block_body) [18278 18839])
                    ("contains_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18862 18866])
                            ("path" variable nil (reparse-symbol function_parameters) [18868 18872])
                            ("transform" variable nil (reparse-symbol function_parameters) [18874 18883]))                          
                        :documentation "
        Returns whether this (closed) path completely contains the given path.

        If *transform* is not ``None``, the path will be transformed before
        performing the test.
        ")
                        (reparse-symbol indented_block_body) [18844 19240])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19261 19265])
                            ("transform" variable nil (reparse-symbol function_parameters) [19267 19276]))                          
                        :documentation "
        Returns the extents (*xmin*, *ymin*, *xmax*, *ymax*) of the
        path.

        Unlike computing the extents on the *vertices* alone, this
        algorithm will take into account the curves and deal with
        control points appropriately.
        ")
                        (reparse-symbol indented_block_body) [19245 19881])
                    ("intersects_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19906 19910])
                            ("other" variable nil (reparse-symbol function_parameters) [19912 19917])
                            ("filled" variable nil (reparse-symbol function_parameters) [19919 19925]))                          
                        :documentation "
        Returns *True* if this path intersects another given path.

        *filled*, when True, treats the paths as if they were filled.
        That is, if one path completely encloses the other,
        :meth:`intersects_path` will return True.
        ")
                        (reparse-symbol indented_block_body) [19886 20268])
                    ("intersects_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20293 20297])
                            ("bbox" variable nil (reparse-symbol function_parameters) [20299 20303])
                            ("filled" variable nil (reparse-symbol function_parameters) [20305 20311]))                          
                        :documentation "
        Returns *True* if this path intersects a given
        :class:`~matplotlib.transforms.Bbox`.

        *filled*, when True, treats the path as if it was filled.
        That is, if one path completely encloses the other,
        :meth:`intersects_path` will return True.
        ")
                        (reparse-symbol indented_block_body) [20273 20838])
                    ("interpolated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20860 20864])
                            ("steps" variable nil (reparse-symbol function_parameters) [20866 20871]))                          
                        :documentation "
        Returns a new path resampled to length N x steps.  Does not
        currently handle interpolating curves.
        ")
                        (reparse-symbol indented_block_body) [20843 21391])
                    ("to_polygons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21412 21416])
                            ("transform" variable nil (reparse-symbol function_parameters) [21418 21427])
                            ("width" variable nil (reparse-symbol function_parameters) [21434 21439])
                            ("height" variable nil (reparse-symbol function_parameters) [21443 21449])
                            ("closed_only" variable nil (reparse-symbol function_parameters) [21453 21464]))                          
                        :documentation "
        Convert this path to a list of polygons or polylines.  Each
        polygon/polyline is an Nx2 array of vertices.  In other words,
        each polygon has no ``MOVETO`` instructions or curves.  This
        is useful for displaying in backends that do not support
        compound paths or Bezier curves, such as GDK.

        If *width* and *height* are both non-zero then the lines will
        be simplified so that vertices outside of (0, 0), (width,
        height) will be clipped.

        If *closed_only* is `True` (default), only closed polygons,
        with the last point being the same as the first point, will be
        returned.  Any unclosed polylines in the path will be
        explicitly closed.  If *closed_only* is `False`, any unclosed
        polygons in the path will be returned as unclosed polygons,
        and the closed polygons will be returned explicitly closed by
        setting the last point to the same as the first point.
        ")
                        (reparse-symbol indented_block_body) [21396 23276])
                    ("_unit_rectangle" variable nil (reparse-symbol indented_block_body) [23281 23303])
                    ("unit_rectangle" function
                       (:documentation "
        Return a :class:`Path` instance of the unit rectangle
        from (0, 0) to (1, 1).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23345 23348]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23309 23823])
                    ("_unit_regular_polygons" variable nil (reparse-symbol indented_block_body) [23828 23874])
                    ("unit_regular_polygon" function
                       (:documentation "
        Return a :class:`Path` instance for a unit regular
        polygon with the given *numVertices* and radius of 1.0,
        centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23922 23925])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [23927 23938]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23880 24921])
                    ("_unit_regular_stars" variable nil (reparse-symbol indented_block_body) [24926 24969])
                    ("unit_regular_star" function
                       (:documentation "
        Return a :class:`Path` for a unit regular star
        with the given numVertices and radius of 1.0, centered at (0,
        0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [25014 25017])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [25019 25030])
                            ("innerCircle" variable nil (reparse-symbol function_parameters) [25032 25043]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24975 26077])
                    ("unit_regular_asterisk" function
                       (:documentation "
        Return a :class:`Path` for a unit regular
        asterisk with the given numVertices and radius of 1.0,
        centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26125 26128])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [26130 26141]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26082 26364])
                    ("_unit_circle" variable nil (reparse-symbol indented_block_body) [26369 26388])
                    ("unit_circle" function
                       (:documentation "
        Return the readonly :class:`Path` of the unit circle.

        For most cases, :func:`Path.circle` will be what you want.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26427 26430]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26394 26781])
                    ("circle" function
                       (:documentation "
        Return a Path representing a circle of a given radius and center.

        Parameters
        ----------
        center : pair of floats
            The center of the circle. Default ``(0, 0)``.
        radius : float
            The radius of the circle. Default is 1.
        readonly : bool
            Whether the created path should have the \"readonly\" argument
            set when creating the Path instance.

        Notes
        -----
        The circle is approximated using cubic Bezier curves.  This
        uses 8 splines around the circle using the approach presented
        here:

          Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four
          Bezier Cubic Splines <http://www.tinaja.com/glib/ellipse4.pdf>`_.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26814 26817])
                            ("center" variable nil (reparse-symbol function_parameters) [26819 26825])
                            ("radius" variable nil (reparse-symbol function_parameters) [26836 26842])
                            ("readonly" variable nil (reparse-symbol function_parameters) [26847 26855]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26786 29335])
                    ("_unit_circle_righthalf" variable nil (reparse-symbol indented_block_body) [29340 29369])
                    ("unit_circle_righthalf" function
                       (:documentation "
        Return a :class:`Path` of the right half
        of a unit circle. The circle is approximated using cubic Bezier
        curves.  This uses 4 splines around the circle using the approach
        presented here:

          Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four
          Bezier Cubic Splines <http://www.tinaja.com/glib/ellipse4.pdf>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [29418 29421]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29375 30835])
                    ("arc" function
                       (:documentation "
        Return an arc on the unit circle from angle
        *theta1* to angle *theta2* (in degrees).

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.

           Masionobe, L.  2003.  `Drawing an elliptical arc using
           polylines, quadratic or cubic Bezier curves
           <http://www.spaceroots.org/documents/ellipse/index.html>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [30865 30868])
                            ("theta1" variable nil (reparse-symbol function_parameters) [30870 30876])
                            ("theta2" variable nil (reparse-symbol function_parameters) [30878 30884])
                            ("n" variable nil (reparse-symbol function_parameters) [30886 30887])
                            ("is_wedge" variable nil (reparse-symbol function_parameters) [30894 30902]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30840 33481])
                    ("wedge" function
                       (:documentation "
        Return a wedge of the unit circle from angle
        *theta1* to angle *theta2* (in degrees).

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [33513 33516])
                            ("theta1" variable nil (reparse-symbol function_parameters) [33518 33524])
                            ("theta2" variable nil (reparse-symbol function_parameters) [33526 33532])
                            ("n" variable nil (reparse-symbol function_parameters) [33534 33535]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33486 33925])
                    ("_hatch_dict" variable nil (reparse-symbol indented_block_body) [33930 33954])
                    ("hatch" function
                       (:documentation "
        Given a hatch specifier, *hatchpattern*, generates a Path that
        can be used in a repeated hatching pattern.  *density* is the
        number of lines per unit square.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [33987 33990])
                            ("hatchpattern" variable nil (reparse-symbol function_parameters) [33992 34004])
                            ("density" variable nil (reparse-symbol function_parameters) [34006 34013]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [33960 34602])
                    ("clip_to_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34624 34628])
                            ("bbox" variable nil (reparse-symbol function_parameters) [34630 34634])
                            ("inside" variable nil (reparse-symbol function_parameters) [34636 34642]))                          
                        :documentation "
        Clip the path to the given bounding box.

        The path must be made up of one or more closed polygons.  This
        algorithm will not behave correctly for unclosed paths.

        If *inside* is `True`, clip to the inside of the box, otherwise
        to the outside of the box.
        ")
                        (reparse-symbol indented_block_body) [34607 35165]))                  
                :type "class")
                nil [880 35165])
            ("get_path_collection_extents" function
               (:documentation "
    Given a sequence of :class:`Path` objects,
    :class:`~matplotlib.transforms.Transform` objects and offsets, as
    found in a :class:`~matplotlib.collections.PathCollection`,
    returns the bounding box that encapsulates all of them.

    *master_transform* is a global transformation to apply to all paths

    *paths* is a sequence of :class:`Path` instances.

    *transforms* is a sequence of
    :class:`~matplotlib.transforms.Affine2D` instances.

    *offsets* is a sequence of (x, y) offsets (or an Nx2 array)

    *offset_transform* is a :class:`~matplotlib.transforms.Affine2D`
    to apply to the offsets before applying the offset to the path.

    The way that *paths*, *transforms* and *offsets* are combined
    follows the same method as for collections.  Each is iterated over
    independently, so if you have 3 paths, 2 transforms and 1 offset,
    their combinations are as follows:

        (A, A, A), (B, B, A), (C, A, A)
    "
                :arguments 
                  ( ("master_transform" variable nil (reparse-symbol function_parameters) [35208 35224])
                    ("paths" variable nil (reparse-symbol function_parameters) [35226 35231])
                    ("transforms" variable nil (reparse-symbol function_parameters) [35233 35243])
                    ("offsets" variable nil (reparse-symbol function_parameters) [35245 35252])
                    ("offset_transform" variable nil (reparse-symbol function_parameters) [35254 35270]))                  )
                nil [35167 36504])
            ("get_paths_extents" function
               (:documentation "
    Given a sequence of :class:`Path` objects and optional
    :class:`~matplotlib.transforms.Transform` objects, returns the
    bounding box that encapsulates all of them.

    *paths* is a sequence of :class:`Path` instances.

    *transforms* is an optional sequence of
    :class:`~matplotlib.transforms.Affine2D` instances to apply to
    each path.
    "
                :arguments 
                  ( ("paths" variable nil (reparse-symbol function_parameters) [36528 36533])
                    ("transforms" variable nil (reparse-symbol function_parameters) [36535 36545]))                  )
                nil [36506 37157])
            ("_define_deprecated_functions" function (:arguments 
              ( ("ns" variable nil (reparse-symbol function_parameters) [37192 37194]))              ) nil [37159 38067])
            ("_define_deprecated_functions" code nil nil [38069 38107]))          
      :file "path.py"
      :pointmax 38108
      :fsize 38107
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 37201 . 37205) (PERIOD 37206 . 37207) (FROM 36927 . 36931) (PERIOD 36932 . 36933) (FROM 36244 . 36248) (PERIOD 36249 . 36250) (FROM 20629 . 20633) (PERIOD 20634 . 20635) (FROM 19570 . 19574) (PERIOD 19575 . 19576)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Tick locating and formatting
============================

This module contains classes to support completely configurable tick
locating and formatting.  Although the locators know nothing about major
or minor ticks, they are used by the Axis class to support major and
minor tick locating and formatting.  Generic tick locators and
formatters are provided, as well as domain specific custom ones.


Default Formatter
-----------------

The default formatter identifies when the x-data being
plotted is a small range on top of a large off set.  To
reduce the chances that the ticklabels overlap the ticks
are labeled as deltas from a fixed offset.  For example::

   ax.plot(np.arange(2000, 2010), range(10))

will have tick of 0-9 with an offset of +2e3.  If this
is not desired turn off the use of the offset on the default
formatter::


   ax.get_xaxis().get_major_formatter().set_useOffset(False)

set the rcParam ``axes.formatter.useoffset=False`` to turn it off
globally, or set a different formatter.

Tick locating
-------------

The Locator class is the base class for all tick locators.  The locators
handle autoscaling of the view limits based on the data limits, and the
choosing of tick locations.  A useful semi-automatic tick locator is
MultipleLocator.  You initialize this with a base, e.g., 10, and it
picks axis limits and ticks that are multiples of your base.

The Locator subclasses defined here are

:class:`NullLocator`
    No ticks

:class:`FixedLocator`
    Tick locations are fixed

:class:`IndexLocator`
    locator for index plots (e.g., where x = range(len(y)))

:class:`LinearLocator`
    evenly spaced ticks from min to max

:class:`LogLocator`
    logarithmically ticks from min to max

:class:`SymmetricalLogLocator`
    locator for use with with the symlog norm, works like the
    `LogLocator` for the part outside of the threshold and add 0 if
    inside the limits

:class:`MultipleLocator`
    ticks and range are a multiple of base;
                  either integer or float
:class:`OldAutoLocator`
    choose a MultipleLocator and dyamically reassign it for
    intelligent ticking during navigation

:class:`MaxNLocator`
    finds up to a max number of ticks at nice locations

:class:`AutoLocator`
    :class:`MaxNLocator` with simple defaults. This is the default
    tick locator for most plotting.

:class:`AutoMinorLocator`
    locator for minor ticks when the axis is linear and the
    major ticks are uniformly spaced.  It subdivides the major
    tick interval into a specified number of minor intervals,
    defaulting to 4 or 5 depending on the major interval.

:class:`LogitLocator`
    Locator for logit scaling.


There are a number of locators specialized for date locations - see
the dates module

You can define your own locator by deriving from Locator.  You must
override the __call__ method, which returns a sequence of locations,
and you will probably want to override the autoscale method to set the
view limits from the data limits.

If you want to override the default locator, use one of the above or a
custom locator and pass it to the x or y axis instance.  The relevant
methods are::

  ax.xaxis.set_major_locator( xmajorLocator )
  ax.xaxis.set_minor_locator( xminorLocator )
  ax.yaxis.set_major_locator( ymajorLocator )
  ax.yaxis.set_minor_locator( yminorLocator )

The default minor locator is the NullLocator, e.g., no minor ticks on by
default.

Tick formatting
---------------

Tick formatting is controlled by classes derived from Formatter.  The
formatter operates on a single tick value and returns a string to the
axis.

:class:`NullFormatter`
    No labels on the ticks

:class:`IndexFormatter`
    Set the strings from a list of labels

:class:`FixedFormatter`
    Set the strings manually for the labels

:class:`FuncFormatter`
    User defined function sets the labels

:class:`StrMethodFormatter`
    Use string `format` method

:class:`FormatStrFormatter`
    Use an old-style sprintf format string

:class:`ScalarFormatter`
    Default formatter for scalars: autopick the format string

:class:`LogFormatter`
    Formatter for log axes

:class:`LogFormatterExponent`
    Format values for log axis using ``exponent = log_base(value)``.

:class:`LogFormatterMathtext`
    Format values for log axis using ``exponent = log_base(value)``
    using Math text.

:class:`LogFormatterSciNotation`
    Format values for log axis using scientific notation.

:class:`LogitFormatter`
    Probability formatter.


You can derive your own formatter from the Formatter base class by
simply overriding the ``__call__`` method.  The formatter class has
access to the axis view and data limits.

To control the major and minor tick label formats, use one of the
following methods::

  ax.xaxis.set_major_formatter( xmajorFormatter )
  ax.xaxis.set_minor_formatter( xminorFormatter )
  ax.yaxis.set_major_formatter( ymajorFormatter )
  ax.yaxis.set_minor_formatter( yminorFormatter )

See :ref:`pylab_examples-major_minor_demo1` for an example of setting
major and minor ticks.  See the :mod:`matplotlib.dates` module for
more information and examples of using date locators and formatters.
\"\"\"" code nil nil [1 5170])
            ("" code nil nil [5195 5280])
            ("six" include nil nil [5282 5292])
            ("decimal" include nil nil [5294 5308])
            ("itertools" include nil nil [5309 5325])
            ("locale" include nil nil [5326 5339])
            ("math" include nil nil [5340 5351])
            ("numpy" include nil nil [5352 5370])
            ("matplotlib" include nil nil [5371 5402])
            ("matplotlib" include nil nil [5403 5431])
            ("matplotlib" include nil nil [5432 5480])
            ("matplotlib.cbook" include nil nil [5481 5524])
            ("warnings" include nil nil [5526 5541])
            ("if" code nil nil [5543 5570])
            ("_divmod" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5616 5617])
                ("y" variable nil (reparse-symbol function_parameters) [5619 5620]))              ) nil [5604 5776])
            ("_mathdefault" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [5795 5796]))              ) nil [5778 5834])
            ("_DummyAxis" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5904 5942])
                            ("self" variable nil (reparse-symbol indented_block_body) [5951 5989])
                            ("self" variable nil (reparse-symbol indented_block_body) [5998 6019]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5879 5883])
                            ("minpos" variable nil (reparse-symbol function_parameters) [5885 5891]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5866 6020])
                    ("get_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6047 6051]))                          )
                        (reparse-symbol indented_block_body) [6025 6092])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6119 6123])
                            ("vmin" variable nil (reparse-symbol function_parameters) [6125 6129])
                            ("vmax" variable nil (reparse-symbol function_parameters) [6131 6135]))                          )
                        (reparse-symbol indented_block_body) [6097 6182])
                    ("get_minpos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6202 6206]))                          )
                        (reparse-symbol indented_block_body) [6187 6237])
                    ("get_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6264 6268]))                          )
                        (reparse-symbol indented_block_body) [6242 6309])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6336 6340])
                            ("vmin" variable nil (reparse-symbol function_parameters) [6342 6346])
                            ("vmax" variable nil (reparse-symbol function_parameters) [6348 6352]))                          )
                        (reparse-symbol indented_block_body) [6314 6399])
                    ("get_tick_space" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6423 6427]))                          )
                        (reparse-symbol indented_block_body) [6404 6504]))                  
                :type "class")
                nil [5836 6504])
            ("TickHelper" type
               (:superclasses ("object")
                :members 
                  ( ("axis" variable nil (reparse-symbol indented_block_body) [6536 6547])
                    ("set_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6566 6570])
                            ("axis" variable nil (reparse-symbol function_parameters) [6572 6576]))                          )
                        (reparse-symbol indented_block_body) [6553 6604])
                    ("create_dummy_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6631 6635])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6637 6645]))                          )
                        (reparse-symbol indented_block_body) [6609 6723])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6750 6754])
                            ("vmin" variable nil (reparse-symbol function_parameters) [6756 6760])
                            ("vmax" variable nil (reparse-symbol function_parameters) [6762 6766]))                          )
                        (reparse-symbol indented_block_body) [6728 6817])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6844 6848])
                            ("vmin" variable nil (reparse-symbol function_parameters) [6850 6854])
                            ("vmax" variable nil (reparse-symbol function_parameters) [6856 6860]))                          )
                        (reparse-symbol indented_block_body) [6822 6911])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6931 6935])
                            ("vmin" variable nil (reparse-symbol function_parameters) [6937 6941])
                            ("vmax" variable nil (reparse-symbol function_parameters) [6943 6947]))                          )
                        (reparse-symbol indented_block_body) [6916 7036]))                  
                :type "class")
                nil [6506 7036])
            ("Formatter" type
               (:documentation "
    Create a string based on a tick value and location.
    "
                :superclasses ("TickHelper")
                :members 
                  ( ("locs" variable nil (reparse-symbol indented_block_body) [7224 7233])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7252 7256])
                            ("x" variable nil (reparse-symbol function_parameters) [7258 7259])
                            ("pos" variable nil (reparse-symbol function_parameters) [7261 7264]))                          
                        :documentation "
        Return the format for tick value `x` at position pos.
        ``pos=None`` indicates an unspecified location.
        ")
                        (reparse-symbol indented_block_body) [7239 7473])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7494 7498])
                            ("value" variable nil (reparse-symbol function_parameters) [7500 7505]))                          
                        :documentation "
        Returns the full string representation of the value with the
        position unspecified.
        ")
                        (reparse-symbol indented_block_body) [7478 7667])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7694 7698])
                            ("value" variable nil (reparse-symbol function_parameters) [7700 7705]))                          
                        :documentation "
        Return a short string version of the tick value.

        Defaults to the position-independent long value.
        ")
                        (reparse-symbol indented_block_body) [7672 7886])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7906 7910]))                          )
                        (reparse-symbol indented_block_body) [7891 7931])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7949 7953])
                            ("locs" variable nil (reparse-symbol function_parameters) [7955 7959]))                          )
                        (reparse-symbol indented_block_body) [7936 7987])
                    ("fix_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8006 8010])
                            ("s" variable nil (reparse-symbol function_parameters) [8012 8013]))                          
                        :documentation "
        Some classes may want to replace a hyphen for minus with the
        proper unicode symbol (U+2212) for typographical correctness.
        The default is to not replace it.

        Note, if you use this method, e.g., in :meth:`format_data` or
        call, you probably don't want to use it for
        :meth:`format_data_short` since the toolbar uses this for
        interactive coord reporting and I doubt we can expect GUIs
        across platforms will handle the unicode correctly.  So for
        now the classes that override :meth:`fix_minus` should have an
        explicit :meth:`format_data_short` method
        ")
                        (reparse-symbol indented_block_body) [7992 8683]))                  
                :type "class")
                nil [7038 8683])
            ("IndexFormatter" type
               (:documentation "
    Format the position x to the nearest i-th label where i=int(x+0.5)
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8845 8865])
                            ("self" variable nil (reparse-symbol indented_block_body) [8874 8894]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8822 8826])
                            ("labels" variable nil (reparse-symbol function_parameters) [8828 8834]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8809 8895])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8913 8917])
                            ("x" variable nil (reparse-symbol function_parameters) [8919 8920])
                            ("pos" variable nil (reparse-symbol function_parameters) [8922 8925]))                          
                        :documentation "
        Return the format for tick value `x` at position pos.

        The position is ignored and the value is rounded to the nearest
        integer, which is used to look up the label.
        ")
                        (reparse-symbol indented_block_body) [8900 9273]))                  
                :type "class")
                nil [8685 9273])
            ("NullFormatter" type
               (:documentation "
    Always return the empty string.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9376 9380])
                            ("x" variable nil (reparse-symbol function_parameters) [9382 9383])
                            ("pos" variable nil (reparse-symbol function_parameters) [9385 9388]))                          
                        :documentation "
        Returns an empty string for all inputs.
        ")
                        (reparse-symbol indented_block_body) [9363 9486]))                  
                :type "class")
                nil [9275 9486])
            ("FixedFormatter" type
               (:documentation "
    Return fixed strings for tick labels based only on position, not
    value.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Set the sequence of strings that will be used for labels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [9654 9735])
                            ("self" variable nil (reparse-symbol indented_block_body) [9744 9758])
                            ("self" variable nil (reparse-symbol indented_block_body) [9767 9790]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9634 9638])
                            ("seq" variable nil (reparse-symbol function_parameters) [9640 9643]))                          
                        :documentation "
        Set the sequence of strings that will be used for labels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9621 9791])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9809 9813])
                            ("x" variable nil (reparse-symbol function_parameters) [9815 9816])
                            ("pos" variable nil (reparse-symbol function_parameters) [9818 9821]))                          
                        :documentation "
        Returns the label that matches the position regardless of the
        value.

        For positions ``pos < len(seq)``, return `seq[i]` regardless of
        `x`. Otherwise return empty string. `seq` is the sequence of
        strings that this object was initialized with.
        ")
                        (reparse-symbol indented_block_body) [9796 10252])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10272 10276]))                          )
                        (reparse-symbol indented_block_body) [10257 10313])
                    ("set_offset_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10340 10344])
                            ("ofs" variable nil (reparse-symbol function_parameters) [10346 10349]))                          )
                        (reparse-symbol indented_block_body) [10318 10385]))                  
                :type "class")
                nil [9488 10385])
            ("FuncFormatter" type
               (:documentation "
    Use a user-defined function for formatting.

    The function should take in two inputs (a tick value ``x`` and a
    position ``pos``), and return a string containing the corresponding
    tick label.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10679 10695]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10658 10662])
                            ("func" variable nil (reparse-symbol function_parameters) [10664 10668]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10645 10696])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10714 10718])
                            ("x" variable nil (reparse-symbol function_parameters) [10720 10721])
                            ("pos" variable nil (reparse-symbol function_parameters) [10723 10726]))                          
                        :documentation "
        Return the value of the user defined function.

        `x` and `pos` are passed through as-is.
        ")
                        (reparse-symbol indented_block_body) [10701 10895]))                  
                :type "class")
                nil [10387 10895])
            ("FormatStrFormatter" type
               (:documentation "
    Use an old-style ('%' operator) format string to format the tick.

    The format string should have a single variable format (%) in it.
    It will be applied to the value (not the position) of the tick.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11196 11210]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11176 11180])
                            ("fmt" variable nil (reparse-symbol function_parameters) [11182 11185]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11163 11211])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11229 11233])
                            ("x" variable nil (reparse-symbol function_parameters) [11235 11236])
                            ("pos" variable nil (reparse-symbol function_parameters) [11238 11241]))                          
                        :documentation "
        Return the formatted label string.

        Only the value `x` is formatted. The position is ignored.
        ")
                        (reparse-symbol indented_block_body) [11216 11411]))                  
                :type "class")
                nil [10897 11411])
            ("StrMethodFormatter" type
               (:documentation "
    Use a new-style format string (as used by `str.format()`)
    to format the tick.

    The field used for the value must be labeled `x` and the field used
    for the position must be labeled `pos`.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11706 11720]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11686 11690])
                            ("fmt" variable nil (reparse-symbol function_parameters) [11692 11695]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11673 11721])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11739 11743])
                            ("x" variable nil (reparse-symbol function_parameters) [11745 11746])
                            ("pos" variable nil (reparse-symbol function_parameters) [11748 11751]))                          
                        :documentation "
        Return the formatted label string.

        `x` and `pos` are passed to `str.format` as keyword arguments
        with those exact names.
        ")
                        (reparse-symbol indented_block_body) [11726 11974]))                  
                :type "class")
                nil [11413 11974])
            ("OldScalarFormatter" type
               (:documentation "
    Tick location is a plain old number.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12088 12092])
                            ("x" variable nil (reparse-symbol function_parameters) [12094 12095])
                            ("pos" variable nil (reparse-symbol function_parameters) [12097 12100]))                          
                        :documentation "
        Return the format for tick val `x` based on the width of the
        axis.

        The position `pos` is ignored.
        ")
                        (reparse-symbol indented_block_body) [12075 12373])
                    ("pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12393 12397])
                            ("x" variable nil (reparse-symbol function_parameters) [12399 12400])
                            ("d" variable nil (reparse-symbol function_parameters) [12402 12403]))                          
                        :documentation "
        Formats the value `x` based on the size of the axis range `d`.
        ")
                        (reparse-symbol indented_block_body) [12378 13307]))                  
                :type "class")
                nil [11976 13307])
            ("ScalarFormatter" type
               (:documentation "
    Format tick values as a number.

    Tick value is interpreted as a plain old number. If
    ``useOffset==True`` and the data range is much smaller than the data
    average, then an offset will be determined such that the tick labels
    are meaningful. Scientific notation is used for ``data < 10^-n`` or
    ``data >= 10^m``, where ``n`` and ``m`` are the power limits set
    using ``set_powerlimits((n,m))``. The defaults for these are
    controlled by the ``axes.formatter.limits`` rc parameter.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [14150 14233])
                            ("self" variable nil (reparse-symbol indented_block_body) [14241 14309])
                            ("self" code nil (reparse-symbol indented_block_body) [14318 14347])
                            ("self" variable nil (reparse-symbol indented_block_body) [14356 14394])
                            ("if" code nil (reparse-symbol indented_block_body) [14403 14493])
                            ("self" variable nil (reparse-symbol indented_block_body) [14501 14532])
                            ("self" variable nil (reparse-symbol indented_block_body) [14541 14566])
                            ("self" variable nil (reparse-symbol indented_block_body) [14575 14591])
                            ("self" variable nil (reparse-symbol indented_block_body) [14600 14623])
                            ("self" variable nil (reparse-symbol indented_block_body) [14632 14685])
                            ("if" code nil (reparse-symbol indented_block_body) [14694 14778])
                            ("self" variable nil (reparse-symbol indented_block_body) [14786 14813]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13883 13887])
                            ("useOffset" variable nil (reparse-symbol function_parameters) [13889 13898])
                            ("useMathText" variable nil (reparse-symbol function_parameters) [13905 13916])
                            ("useLocale" variable nil (reparse-symbol function_parameters) [13923 13932]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13870 14814])
                    ("get_useOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14837 14841]))                          )
                        (reparse-symbol indented_block_body) [14819 14875])
                    ("set_useOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14898 14902])
                            ("val" variable nil (reparse-symbol function_parameters) [14904 14907]))                          )
                        (reparse-symbol indented_block_body) [14880 15085])
                    ("useOffset" variable nil (reparse-symbol indented_block_body) [15090 15150])
                    ("get_useLocale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15174 15178]))                          )
                        (reparse-symbol indented_block_body) [15156 15212])
                    ("set_useLocale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15235 15239])
                            ("val" variable nil (reparse-symbol function_parameters) [15241 15244]))                          )
                        (reparse-symbol indented_block_body) [15217 15387])
                    ("useLocale" variable nil (reparse-symbol indented_block_body) [15392 15452])
                    ("fix_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15472 15476])
                            ("s" variable nil (reparse-symbol function_parameters) [15478 15479]))                          
                        :documentation "
        Replace hyphens with a unicode minus.
        ")
                        (reparse-symbol indented_block_body) [15458 15705])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15723 15727])
                            ("x" variable nil (reparse-symbol function_parameters) [15729 15730])
                            ("pos" variable nil (reparse-symbol function_parameters) [15732 15735]))                          
                        :documentation "
        Return the format for tick value `x` at position `pos`.
        ")
                        (reparse-symbol indented_block_body) [15710 15971])
                    ("set_scientific" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15995 15999])
                            ("b" variable nil (reparse-symbol function_parameters) [16001 16002]))                          
                        :documentation "
        Turn scientific notation on or off.

        .. seealso:: Method :meth:`set_powerlimits`
        ")
                        (reparse-symbol indented_block_body) [15976 16161])
                    ("set_powerlimits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16186 16190])
                            ("lims" variable nil (reparse-symbol function_parameters) [16192 16196]))                          
                        :documentation "
        Sets size thresholds for scientific notation.

        ``lims`` is a two-element sequence containing the powers of 10
        that determine the switchover threshold. Numbers below
        ``10**lims[0]`` and above ``10**lims[1]`` will be displayed in
        scientific notation.

        For example, ``formatter.set_powerlimits((-3, 4))`` sets the
        pre-2007 default in which scientific notation is used for
        numbers less than 1e-3 or greater than 1e4.

        .. seealso:: Method :meth:`set_scientific`
        ")
                        (reparse-symbol indented_block_body) [16166 16882])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16909 16913])
                            ("value" variable nil (reparse-symbol function_parameters) [16915 16920]))                          
                        :documentation "
        Return a short formatted string representation of a number.
        ")
                        (reparse-symbol indented_block_body) [16887 17151])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17172 17176])
                            ("value" variable nil (reparse-symbol function_parameters) [17178 17183]))                          
                        :documentation "
        Return a formatted string representation of a number.
        ")
                        (reparse-symbol indented_block_body) [17156 17476])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17496 17500]))                          
                        :documentation "
        Return scientific notation, plus offset.
        ")
                        (reparse-symbol indented_block_body) [17481 18678])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18696 18700])
                            ("locs" variable nil (reparse-symbol function_parameters) [18702 18706]))                          
                        :documentation "
        Set the locations of the ticks.
        ")
                        (reparse-symbol indented_block_body) [18683 19071])
                    ("_compute_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19096 19100]))                          )
                        (reparse-symbol indented_block_body) [19076 21075])
                    ("_set_orderOfMagnitude" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21106 21110])
                            ("range" variable nil (reparse-symbol function_parameters) [21112 21117]))                          )
                        (reparse-symbol indented_block_body) [21080 21951])
                    ("_set_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21972 21976])
                            ("vmin" variable nil (reparse-symbol function_parameters) [21978 21982])
                            ("vmax" variable nil (reparse-symbol function_parameters) [21984 21988]))                          )
                        (reparse-symbol indented_block_body) [21956 23344])
                    ("pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23364 23368])
                            ("x" variable nil (reparse-symbol function_parameters) [23370 23371]))                          )
                        (reparse-symbol indented_block_body) [23349 23630])
                    ("_formatSciNotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23658 23662])
                            ("s" variable nil (reparse-symbol function_parameters) [23664 23665]))                          )
                        (reparse-symbol indented_block_body) [23635 24808]))                  
                :type "class")
                nil [13309 24808])
            ("LogFormatter" type
               (:documentation "
    Base class for formatting ticks on a log or symlog scale.

    It may be instantiated directly, or subclassed.

    Parameters
    ----------
    base : float, optional, default: 10.
        Base of the logarithm used in all calculations.

    labelOnlyBase : bool, optional, default: False
        If True, label ticks only at integer powers of base.
        This is normally True for major ticks and False for
        minor ticks.

    minor_thresholds : (subset, all), optional, default: (1, 0.4)
        If labelOnlyBase is False, these two numbers control
        the labeling of ticks that are not at integer powers of
        base; normally these are the minor ticks. The controlling
        parameter is the log of the axis data range.  In the typical
        case where base is 10 it is the number of decades spanned
        by the axis, so we can call it 'numdec'. If ``numdec <= all``,
        all minor ticks will be labeled.  If ``all < numdec <= subset``,
        then only a subset of minor ticks will be labeled, so as to
        avoid crowding. If ``numdec > subset`` then no minor ticks will
        be labeled.

    linthresh : None or float, optional, default: None
        If a symmetric log scale is in use, its ``linthresh``
        parameter must be supplied here.

    Notes
    -----
    The `set_locs` method must be called to enable the subsetting
    logic controlled by the ``minor_thresholds`` parameter.

    In some cases such as the colorbar, there is no distinction between
    major and minor ticks; the tick locations might be set manually,
    or by a locator that puts ticks at integer powers of base and
    at intermediate locations.  For this situation, disable the
    minor_thresholds logic by using ``minor_thresholds=(np.inf, np.inf)``,
    so that all ticks will be labeled.

    To disable labeling of minor ticks when 'labelOnlyBase' is False,
    use ``minor_thresholds=(0, 0)``.  This is the default for the
    \"classic\" style.

    Examples
    --------
    To label a subset of minor ticks when the view limits span up
    to 2 decades, and all of the ticks when zoomed in to 0.5 decades
    or less, use ``minor_thresholds=(2, 0.5)``.

    To label all minor ticks when the view limits span up to 1.5
    decades, use ``minor_thresholds=(1.5, 1.5)``.

    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [27306 27330])
                            ("self" variable nil (reparse-symbol indented_block_body) [27339 27373])
                            ("if" code nil (reparse-symbol indented_block_body) [27382 27566])
                            ("self" variable nil (reparse-symbol indented_block_body) [27574 27614])
                            ("self" variable nil (reparse-symbol indented_block_body) [27623 27645])
                            ("self" variable nil (reparse-symbol indented_block_body) [27654 27681]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27185 27189])
                            ("base" variable nil (reparse-symbol function_parameters) [27191 27195])
                            ("labelOnlyBase" variable nil (reparse-symbol function_parameters) [27202 27215])
                            ("minor_thresholds" variable nil (reparse-symbol function_parameters) [27240 27256])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [27280 27289]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27172 27682])
                    ("base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27696 27700])
                            ("base" variable nil (reparse-symbol function_parameters) [27702 27706]))                          
                        :documentation "
        change the `base` for labeling.

        .. warning::
           Should always match the base used for :class:`LogLocator`

        ")
                        (reparse-symbol indented_block_body) [27687 27891])
                    ("label_minor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27912 27916])
                            ("labelOnlyBase" variable nil (reparse-symbol function_parameters) [27918 27931]))                          
                        :documentation "
        Switch minor tick labeling on or off.

        Parameters
        ----------
        labelOnlyBase : bool
            If True, label ticks only at integer powers of base.

        ")
                        (reparse-symbol indented_block_body) [27896 28181])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28199 28203])
                            ("locs" variable nil (reparse-symbol function_parameters) [28205 28209]))                          
                        :documentation "
        Use axis view limits to control which ticks are labeled.

        The ``locs`` parameter is ignored in the present algorithm.

        ")
                        (reparse-symbol indented_block_body) [28186 30382])
                    ("_num_to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30406 30410])
                            ("x" variable nil (reparse-symbol function_parameters) [30412 30413])
                            ("vmin" variable nil (reparse-symbol function_parameters) [30415 30419])
                            ("vmax" variable nil (reparse-symbol function_parameters) [30421 30425]))                          )
                        (reparse-symbol indented_block_body) [30387 30605])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30626 30630])
                            ("x" variable nil (reparse-symbol function_parameters) [30632 30633])
                            ("pos" variable nil (reparse-symbol function_parameters) [30635 30638]))                          
                        :documentation "
        Return the format for tick val `x`.
        ")
                        (reparse-symbol indented_block_body) [30613 31433])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31454 31458])
                            ("value" variable nil (reparse-symbol function_parameters) [31460 31465]))                          )
                        (reparse-symbol indented_block_body) [31438 31641])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31668 31672])
                            ("value" variable nil (reparse-symbol function_parameters) [31674 31679]))                          
                        :documentation "
        Return a short formatted string representation of a number.
        ")
                        (reparse-symbol indented_block_body) [31646 31805])
                    ("pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31825 31829])
                            ("x" variable nil (reparse-symbol function_parameters) [31831 31832])
                            ("d" variable nil (reparse-symbol function_parameters) [31834 31835]))                          )
                        (reparse-symbol indented_block_body) [31810 32628]))                  
                :type "class")
                nil [24810 32628])
            ("LogFormatterExponent" type
               (:documentation "
    Format values for log axis using ``exponent = log_base(value)``.
    "
                :superclasses ("LogFormatter")
                :members 
                  ( ("_num_to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32780 32784])
                            ("x" variable nil (reparse-symbol function_parameters) [32786 32787])
                            ("vmin" variable nil (reparse-symbol function_parameters) [32789 32793])
                            ("vmax" variable nil (reparse-symbol function_parameters) [32795 32799]))                          )
                        (reparse-symbol indented_block_body) [32761 33095]))                  
                :type "class")
                nil [32630 33095])
            ("LogFormatterMathtext" type
               (:documentation "
    Format values for log axis using ``exponent = log_base(value)``.
    "
                :superclasses ("LogFormatter")
                :members 
                  ( ("_non_decade_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33252 33256])
                            ("sign_string" variable nil (reparse-symbol function_parameters) [33258 33269])
                            ("base" variable nil (reparse-symbol function_parameters) [33271 33275])
                            ("fx" variable nil (reparse-symbol function_parameters) [33277 33279])
                            ("usetex" variable nil (reparse-symbol function_parameters) [33281 33287]))                          )
                        (reparse-symbol indented_block_body) [33229 33536])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33554 33558])
                            ("x" variable nil (reparse-symbol function_parameters) [33560 33561])
                            ("pos" variable nil (reparse-symbol function_parameters) [33563 33566]))                          
                        :documentation "
        Return the format for tick value `x`.

        The position `pos` is ignored.
        ")
                        (reparse-symbol indented_block_body) [33541 34982]))                  
                :type "class")
                nil [33097 34982])
            ("LogFormatterSciNotation" type
               (:documentation "
    Format values following scientific notation in a logarithmic axis
    "
                :superclasses ("LogFormatterMathtext")
                :members 
                  ( ("_non_decade_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35151 35155])
                            ("sign_string" variable nil (reparse-symbol function_parameters) [35157 35168])
                            ("base" variable nil (reparse-symbol function_parameters) [35170 35174])
                            ("fx" variable nil (reparse-symbol function_parameters) [35176 35178])
                            ("usetex" variable nil (reparse-symbol function_parameters) [35180 35186]))                          )
                        (reparse-symbol indented_block_body) [35128 35713]))                  
                :type "class")
                nil [34984 35713])
            ("LogitFormatter" type
               (:documentation "
    Probability formatter (using Math text).
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35826 35830])
                            ("x" variable nil (reparse-symbol function_parameters) [35832 35833])
                            ("pos" variable nil (reparse-symbol function_parameters) [35835 35838]))                          )
                        (reparse-symbol indented_block_body) [35813 36294])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36321 36325])
                            ("value" variable nil (reparse-symbol function_parameters) [36327 36332]))                          )
                        (reparse-symbol indented_block_body) [36299 36435]))                  
                :type "class")
                nil [35715 36435])
            ("EngFormatter" type
               (:documentation "
    Formats axis values using engineering prefixes to represent powers
    of 1000, plus a specified unit, e.g., 10 MHz instead of 1e7.

    `unit` is a string containing the abbreviated name of the unit,
    suitable for use with single-letter representations of powers of
    1000. For example, 'Hz' or 'm'.

    `places` is the precision with which to display the number,
    specified in digits after the decimal point (there will be between
    one and three digits before the decimal point).
    "
                :superclasses ("Formatter")
                :members 
                  ( ("ENG_PREFIXES" variable nil (reparse-symbol indented_block_body) [37020 37351])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [37407 37423])
                            ("self" variable nil (reparse-symbol indented_block_body) [37432 37452]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37370 37374])
                            ("unit" variable nil (reparse-symbol function_parameters) [37376 37380])
                            ("places" variable nil (reparse-symbol function_parameters) [37385 37391]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37357 37453])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37471 37475])
                            ("x" variable nil (reparse-symbol function_parameters) [37477 37478])
                            ("pos" variable nil (reparse-symbol function_parameters) [37480 37483]))                          )
                        (reparse-symbol indented_block_body) [37458 37577])
                    ("format_eng" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37597 37601])
                            ("num" variable nil (reparse-symbol function_parameters) [37603 37606]))                          
                        :documentation " Formats a number in engineering notation, appending a letter
        representing the power of 1000 of the original number. Some examples:

        >>> format_eng(0)       # for self.places = 0
        '0'

        >>> format_eng(1000000) # for self.places = 1
        '1.0 M'

        >>> format_eng(\"-1e-6\") # for self.places = 2
        u'-1.00 \\u03bc'

        @param num: the value to represent
        @type num: either a numeric value or a string that can be converted to
                   a numeric value (as per decimal.Decimal constructor)

        @return: engineering formatted string
        ")
                        (reparse-symbol indented_block_body) [37582 39153]))                  
                :type "class")
                nil [36437 39153])
            ("Locator" type
               (:documentation "
    Determine the tick locations;

    Note, you should not use the same locator between different
    :class:`~matplotlib.axis.Axis` because the locator stores references to
    the Axis data and view limits
    "
                :superclasses ("TickHelper")
                :members 
                  ( ("MAXTICKS" variable nil (reparse-symbol indented_block_body) [39635 39650])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39672 39676])
                            ("vmin" variable nil (reparse-symbol function_parameters) [39678 39682])
                            ("vmax" variable nil (reparse-symbol function_parameters) [39684 39688]))                          
                        :documentation "
        Return the values of the located ticks given **vmin** and **vmax**.

        .. note::
            To get tick locations with the vmin and vmax values defined
            automatically for the associated :attr:`axis` simply call
            the Locator instance::

                >>> print((type(loc)))
                <type 'Locator'>
                >>> print((loc()))
                [1, 2, 3, 4]

        ")
                        (reparse-symbol indented_block_body) [39656 40184])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40204 40208])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40210 40218]))                          
                        :documentation "
        Do nothing, and rase a warning. Any locator class not supporting the
        set_params() function will call this.
        ")
                        (reparse-symbol indented_block_body) [40189 40481])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40499 40503]))                          
                        :documentation "Return the locations of the ticks")
                        (reparse-symbol indented_block_body) [40486 40759])
                    ("raise_if_exceeds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40785 40789])
                            ("locs" variable nil (reparse-symbol function_parameters) [40791 40795]))                          
                        :documentation "raise a RuntimeError if Locator attempts to create more than
           MAXTICKS locs")
                        (reparse-symbol indented_block_body) [40764 41153])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41174 41178])
                            ("vmin" variable nil (reparse-symbol function_parameters) [41180 41184])
                            ("vmax" variable nil (reparse-symbol function_parameters) [41186 41190]))                          
                        :documentation "
        select a scale for the range from vmin to vmax

        Normally this method is overridden by subclasses to
        change locator behaviour.
        ")
                        (reparse-symbol indented_block_body) [41158 41418])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41437 41441]))                          
                        :documentation "autoscale the view limits")
                        (reparse-symbol indented_block_body) [41423 41548])
                    ("pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41561 41565])
                            ("numsteps" variable nil (reparse-symbol function_parameters) [41567 41575]))                          
                        :documentation "Pan numticks (can be positive or negative)")
                        (reparse-symbol indented_block_body) [41553 42080])
                    ("zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42094 42098])
                            ("direction" variable nil (reparse-symbol function_parameters) [42100 42109]))                          )
                        (reparse-symbol indented_block_body) [42085 42462])
                    ("refresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42479 42483]))                          
                        :documentation "refresh internal information based on current lim")
                        (reparse-symbol indented_block_body) [42467 42563]))                  
                :type "class")
                nil [39155 42563])
            ("IndexLocator" type
               (:documentation "
    Place a tick on every multiple of some base number of points
    plotted, e.g., on every 5th point.  It is assumed that you are doing
    index plotting; i.e., the axis is 0, len(data).  This is mainly
    useful for x ticks.
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("'place ticks on the i-th data points where (i-offset)%base==0'" code nil (reparse-symbol indented_block_body) [42886 42948])
                            ("self" variable nil (reparse-symbol indented_block_body) [42957 42974])
                            ("self" variable nil (reparse-symbol indented_block_body) [42983 43003]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42857 42861])
                            ("base" variable nil (reparse-symbol function_parameters) [42863 42867])
                            ("offset" variable nil (reparse-symbol function_parameters) [42869 42875]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42844 43004])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43024 43028])
                            ("base" variable nil (reparse-symbol function_parameters) [43030 43034])
                            ("offset" variable nil (reparse-symbol function_parameters) [43041 43047]))                          
                        :documentation "Set parameters within this locator")
                        (reparse-symbol indented_block_body) [43009 43227])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43245 43249]))                          
                        :documentation "Return the locations of the ticks")
                        (reparse-symbol indented_block_body) [43232 43395])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43416 43420])
                            ("vmin" variable nil (reparse-symbol function_parameters) [43422 43426])
                            ("vmax" variable nil (reparse-symbol function_parameters) [43428 43432]))                          )
                        (reparse-symbol indented_block_body) [43400 43538]))                  
                :type "class")
                nil [42565 43538])
            ("FixedLocator" type
               (:documentation "
    Tick locations are fixed.  If nbins is not None,
    the array of possible positions will be subsampled to
    keep the number of ticks <= nbins +1.
    The subsampling will be done so as to include the smallest
    absolute value; for example, if zero is included in the
    array of possibilities, then it is guaranteed to be one of
    the chosen ticks.
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [43997 44025])
                            ("self" variable nil (reparse-symbol indented_block_body) [44034 44052])
                            ("if" code nil (reparse-symbol indented_block_body) [44061 44132]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43964 43968])
                            ("locs" variable nil (reparse-symbol function_parameters) [43970 43974])
                            ("nbins" variable nil (reparse-symbol function_parameters) [43976 43981]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43951 44132])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44152 44156])
                            ("nbins" variable nil (reparse-symbol function_parameters) [44158 44163]))                          
                        :documentation "Set parameters within this locator.")
                        (reparse-symbol indented_block_body) [44137 44282])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44300 44304]))                          )
                        (reparse-symbol indented_block_body) [44287 44351])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44372 44376])
                            ("vmin" variable nil (reparse-symbol function_parameters) [44378 44382])
                            ("vmax" variable nil (reparse-symbol function_parameters) [44384 44388]))                          
                        :documentation "\"
        Return the locations of the ticks.

        .. note::

            Because the values are fixed, vmin and vmax are not used in this
            method.

        ")
                        (reparse-symbol indented_block_body) [44356 44958]))                  
                :type "class")
                nil [43540 44958])
            ("NullLocator" type
               (:documentation "
    No ticks
    "
                :superclasses ("Locator")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45035 45039]))                          )
                        (reparse-symbol indented_block_body) [45022 45086])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45107 45111])
                            ("vmin" variable nil (reparse-symbol function_parameters) [45113 45117])
                            ("vmax" variable nil (reparse-symbol function_parameters) [45119 45123]))                          
                        :documentation "\"
        Return the locations of the ticks.

        .. note::

            Because the values are Null, vmin and vmax are not used in this
            method.
        ")
                        (reparse-symbol indented_block_body) [45091 45328]))                  
                :type "class")
                nil [44960 45328])
            ("LinearLocator" type
               (:documentation "
    Determine the tick locations

    The first time this function is called it will try to set the
    number of ticks to make a nice tick partitioning.  Thereafter the
    number of ticks will be fixed so that interactive navigation will
    be nice

    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Use presets to set locs based on lom.  A dict mapping vmin, vmax->locs
        \"\"\"" code nil (reparse-symbol indented_block_body) [45690 45784])
                            ("self" variable nil (reparse-symbol indented_block_body) [45793 45817])
                            ("if" code nil (reparse-symbol indented_block_body) [45826 45925]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45646 45650])
                            ("numticks" variable nil (reparse-symbol function_parameters) [45652 45660])
                            ("presets" variable nil (reparse-symbol function_parameters) [45667 45674]))                          
                        :documentation "
        Use presets to set locs based on lom.  A dict mapping vmin, vmax->locs
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45633 45925])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45945 45949])
                            ("numticks" variable nil (reparse-symbol function_parameters) [45951 45959])
                            ("presets" variable nil (reparse-symbol function_parameters) [45966 45973]))                          
                        :documentation "Set parameters within this locator.")
                        (reparse-symbol indented_block_body) [45930 46168])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46186 46190]))                          )
                        (reparse-symbol indented_block_body) [46173 46332])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46353 46357])
                            ("vmin" variable nil (reparse-symbol function_parameters) [46359 46363])
                            ("vmax" variable nil (reparse-symbol function_parameters) [46365 46369]))                          )
                        (reparse-symbol indented_block_body) [46337 46820])
                    ("_set_numticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46843 46847]))                          )
                        (reparse-symbol indented_block_body) [46825 46922])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46943 46947])
                            ("vmin" variable nil (reparse-symbol function_parameters) [46949 46953])
                            ("vmax" variable nil (reparse-symbol function_parameters) [46955 46959]))                          )
                        (reparse-symbol indented_block_body) [46927 47636]))                  
                :type "class")
                nil [45330 47636])
            ("closeto" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [47650 47651])
                ("y" variable nil (reparse-symbol function_parameters) [47653 47654]))              ) nil [47638 47735])
            ("Base" type
               (:superclasses ("object")
                :members 
                  ( ("'this solution has some hacks to deal with floating point inaccuracies'" code nil (reparse-symbol indented_block_body) [47761 47832])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [47871 47941])
                            ("self" variable nil (reparse-symbol indented_block_body) [47949 47966]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47850 47854])
                            ("base" variable nil (reparse-symbol function_parameters) [47856 47860]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47837 47967])
                    ("lt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47979 47983])
                            ("x" variable nil (reparse-symbol function_parameters) [47985 47986]))                          )
                        (reparse-symbol indented_block_body) [47972 48208])
                    ("le" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48220 48224])
                            ("x" variable nil (reparse-symbol function_parameters) [48226 48227]))                          )
                        (reparse-symbol indented_block_body) [48213 48503])
                    ("gt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48515 48519])
                            ("x" variable nil (reparse-symbol function_parameters) [48521 48522]))                          )
                        (reparse-symbol indented_block_body) [48508 48774])
                    ("ge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48786 48790])
                            ("x" variable nil (reparse-symbol function_parameters) [48792 48793]))                          )
                        (reparse-symbol indented_block_body) [48779 49017])
                    ("get_base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49035 49039]))                          )
                        (reparse-symbol indented_block_body) [49022 49068]))                  
                :type "class")
                nil [47737 49068])
            ("MultipleLocator" type
               (:documentation "
    Set a tick on every integer that is multiple of base in the
    view interval
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [49243 49266]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49218 49222])
                            ("base" variable nil (reparse-symbol function_parameters) [49224 49228]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49205 49267])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49287 49291])
                            ("base" variable nil (reparse-symbol function_parameters) [49293 49297]))                          
                        :documentation "Set parameters within this locator.")
                        (reparse-symbol indented_block_body) [49272 49409])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49427 49431]))                          )
                        (reparse-symbol indented_block_body) [49414 49573])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49594 49598])
                            ("vmin" variable nil (reparse-symbol function_parameters) [49600 49604])
                            ("vmax" variable nil (reparse-symbol function_parameters) [49606 49610]))                          )
                        (reparse-symbol indented_block_body) [49578 49890])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49911 49915])
                            ("dmin" variable nil (reparse-symbol function_parameters) [49917 49921])
                            ("dmax" variable nil (reparse-symbol function_parameters) [49923 49927]))                          
                        :documentation "
        Set the view limits to the nearest multiples of base that
        contain the data
        ")
                        (reparse-symbol indented_block_body) [49895 50381]))                  
                :type "class")
                nil [49070 50381])
            ("scale_range" function (:arguments 
              ( ("vmin" variable nil (reparse-symbol function_parameters) [50399 50403])
                ("vmax" variable nil (reparse-symbol function_parameters) [50405 50409])
                ("n" variable nil (reparse-symbol function_parameters) [50411 50412])
                ("threshold" variable nil (reparse-symbol function_parameters) [50416 50425]))              ) nil [50383 50737])
            ("MaxNLocator" type
               (:documentation "
    Select no more than N intervals at nice locations.
    "
                :superclasses ("Locator")
                :members 
                  ( ("default_params" variable nil (reparse-symbol indented_block_body) [50842 51074])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Keyword args:

        *nbins*
            Maximum number of intervals; one less than max number of
            ticks.  If the string `'auto'`, the number of bins will be
            automatically determined based on the length of the axis.

        *steps*
            Sequence of nice numbers starting with 1 and ending with 10;
            e.g., [1, 2, 4, 5, 10]

        *integer*
            If True, ticks will take only integer values, provided
            at least `min_n_ticks` integers are found within the
            view limits.

        *symmetric*
            If True, autoscaling will result in a range symmetric
            about zero.

        *prune*
            ['lower' | 'upper' | 'both' | None]
            Remove edge ticks -- useful for stacked or ganged plots
            where the upper tick of one axes overlaps with the lower
            tick of the axes above it, primarily when
            `rcParams['axes.autolimit_mode']` is `'round_numbers'`.
            If `prune=='lower'`, the smallest tick will
            be removed.  If `prune=='upper'`, the largest tick will be
            removed.  If `prune=='both'`, the largest and smallest ticks
            will be removed.  If `prune==None`, no ticks will be removed.

        *min_n_ticks*
            Relax `nbins` and `integer` constraints if necessary to
            obtain this minimum number of ticks.

        \"\"\"" code nil (reparse-symbol indented_block_body) [51125 52540])
                            ("if" code nil (reparse-symbol indented_block_body) [52549 52738])
                            ("self" code nil (reparse-symbol indented_block_body) [52746 52784])
                            ("self" code nil (reparse-symbol indented_block_body) [52793 52818]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51093 51097])
                            ("args" variable nil (reparse-symbol function_parameters) [51099 51104])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51106 51114]))                          
                        :documentation "
        Keyword args:

        *nbins*
            Maximum number of intervals; one less than max number of
            ticks.  If the string `'auto'`, the number of bins will be
            automatically determined based on the length of the axis.

        *steps*
            Sequence of nice numbers starting with 1 and ending with 10;
            e.g., [1, 2, 4, 5, 10]

        *integer*
            If True, ticks will take only integer values, provided
            at least `min_n_ticks` integers are found within the
            view limits.

        *symmetric*
            If True, autoscaling will result in a range symmetric
            about zero.

        *prune*
            ['lower' | 'upper' | 'both' | None]
            Remove edge ticks -- useful for stacked or ganged plots
            where the upper tick of one axes overlaps with the lower
            tick of the axes above it, primarily when
            `rcParams['axes.autolimit_mode']` is `'round_numbers'`.
            If `prune=='lower'`, the smallest tick will
            be removed.  If `prune=='upper'`, the largest tick will be
            removed.  If `prune=='both'`, the largest and smallest ticks
            will be removed.  If `prune==None`, no ticks will be removed.

        *min_n_ticks*
            Relax `nbins` and `integer` constraints if necessary to
            obtain this minimum number of ticks.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [51080 52819])
                    ("_validate_steps" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("steps" variable nil (reparse-symbol function_parameters) [52862 52867]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [52824 53691])
                    ("_staircase" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("steps" variable nil (reparse-symbol function_parameters) [53729 53734]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [53696 53977])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53997 54001])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [54003 54011]))                          
                        :documentation "Set parameters within this locator.")
                        (reparse-symbol indented_block_body) [53982 55233])
                    ("_raw_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55253 55257])
                            ("vmin" variable nil (reparse-symbol function_parameters) [55259 55263])
                            ("vmax" variable nil (reparse-symbol function_parameters) [55265 55269]))                          )
                        (reparse-symbol indented_block_body) [55238 57084])
                    ("" code nil (reparse-symbol indented_block_body) [57106 57113])
                    ("bin_boundaries" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57137 57141])
                            ("vmin" variable nil (reparse-symbol function_parameters) [57143 57147])
                            ("vmax" variable nil (reparse-symbol function_parameters) [57149 57153]))                          )
                        (reparse-symbol indented_block_body) [57118 57199])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57217 57221]))                          )
                        (reparse-symbol indented_block_body) [57204 57319])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57340 57344])
                            ("vmin" variable nil (reparse-symbol function_parameters) [57346 57350])
                            ("vmax" variable nil (reparse-symbol function_parameters) [57352 57356]))                          )
                        (reparse-symbol indented_block_body) [57324 57847])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57868 57872])
                            ("dmin" variable nil (reparse-symbol function_parameters) [57874 57878])
                            ("dmax" variable nil (reparse-symbol function_parameters) [57880 57884]))                          )
                        (reparse-symbol indented_block_body) [57852 58248]))                  
                :type "class")
                nil [50739 58248])
            ("decade_down" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [58266 58267])
                ("base" variable nil (reparse-symbol function_parameters) [58269 58273]))              ) nil [58250 58425])
            ("decade_up" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [58441 58442])
                ("base" variable nil (reparse-symbol function_parameters) [58444 58448]))              ) nil [58427 58598])
            ("nearest_long" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [58617 58618]))              ) nil [58600 58743])
            ("is_decade" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [58759 58760])
                ("base" variable nil (reparse-symbol function_parameters) [58762 58766]))              ) nil [58745 58930])
            ("is_close_to_int" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [58952 58953]))              ) nil [58932 59048])
            ("LogLocator" type
               (:documentation "
    Determine the tick locations for log axes
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Place ticks on the locations : subs[j] * base**i

        Parameters
        ----------
        subs : None, string, or sequence of float, optional, default (1.0,)
            Gives the multiples of integer powers of the base at which
            to place ticks.  The default places ticks only at
            integer powers of the base.
            The permitted string values are ``'auto'`` and ``'all'``,
            both of which use an algorithm based on the axis view
            limits to determine whether and how to put ticks between
            integer powers of the base.  With ``'auto'``, ticks are
            placed only between integer powers; with ``'all'``, the
            integer powers are included.  A value of None is
            equivalent to ``'auto'``.

        \"\"\"" code nil (reparse-symbol indented_block_body) [59222 60023])
                            ("if" code nil (reparse-symbol indented_block_body) [60032 60186])
                            ("self" code nil (reparse-symbol indented_block_body) [60194 60209])
                            ("self" code nil (reparse-symbol indented_block_body) [60218 60233])
                            ("self" variable nil (reparse-symbol indented_block_body) [60242 60264])
                            ("self" variable nil (reparse-symbol indented_block_body) [60273 60297]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59157 59161])
                            ("base" variable nil (reparse-symbol function_parameters) [59163 59167])
                            ("subs" variable nil (reparse-symbol function_parameters) [59174 59178])
                            ("numdecs" variable nil (reparse-symbol function_parameters) [59187 59194])
                            ("numticks" variable nil (reparse-symbol function_parameters) [59198 59206]))                          
                        :documentation "
        Place ticks on the locations : subs[j] * base**i

        Parameters
        ----------
        subs : None, string, or sequence of float, optional, default (1.0,)
            Gives the multiples of integer powers of the base at which
            to place ticks.  The default places ticks only at
            integer powers of the base.
            The permitted string values are ``'auto'`` and ``'all'``,
            both of which use an algorithm based on the axis view
            limits to determine whether and how to put ticks between
            integer powers of the base.  With ``'auto'``, ticks are
            placed only between integer powers; with ``'all'``, the
            integer powers are included.  A value of None is
            equivalent to ``'auto'``.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [59144 60298])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60318 60322])
                            ("base" variable nil (reparse-symbol function_parameters) [60324 60328])
                            ("subs" variable nil (reparse-symbol function_parameters) [60335 60339])
                            ("numdecs" variable nil (reparse-symbol function_parameters) [60346 60353])
                            ("numticks" variable nil (reparse-symbol function_parameters) [60360 60368]))                          
                        :documentation "Set parameters within this locator.")
                        (reparse-symbol indented_block_body) [60303 60677])
                    ("base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60784 60788])
                            ("base" variable nil (reparse-symbol function_parameters) [60790 60794]))                          
                        :documentation "
        set the base of the log scaling (major tick every base**i, i integer)
        ")
                        (reparse-symbol indented_block_body) [60775 60932])
                    ("subs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60946 60950])
                            ("subs" variable nil (reparse-symbol function_parameters) [60952 60956]))                          
                        :documentation "
        set the minor ticks for the log scaling every base**i*subs[j]
        ")
                        (reparse-symbol indented_block_body) [60937 61461])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61479 61483]))                          )
                        (reparse-symbol indented_block_body) [61466 61625])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61646 61650])
                            ("vmin" variable nil (reparse-symbol function_parameters) [61652 61656])
                            ("vmax" variable nil (reparse-symbol function_parameters) [61658 61662]))                          )
                        (reparse-symbol indented_block_body) [61630 64354])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64375 64379])
                            ("vmin" variable nil (reparse-symbol function_parameters) [64381 64385])
                            ("vmax" variable nil (reparse-symbol function_parameters) [64387 64391]))                          )
                        (reparse-symbol indented_block_body) [64359 64962])
                    ("nonsingular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64983 64987])
                            ("vmin" variable nil (reparse-symbol function_parameters) [64989 64993])
                            ("vmax" variable nil (reparse-symbol function_parameters) [64995 64999]))                          )
                        (reparse-symbol indented_block_body) [64967 65696]))                  
                :type "class")
                nil [59050 65696])
            ("SymmetricalLogLocator" type
               (:documentation "
    Determine the tick locations for symmetric log axes
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        place ticks on the location= base**i*subs[j]
        \"\"\"" code nil (reparse-symbol indented_block_body) [65895 65963])
                            ("if" code nil (reparse-symbol indented_block_body) [65972 66357])
                            ("if" code nil (reparse-symbol indented_block_body) [66365 66457])
                            ("self" variable nil (reparse-symbol indented_block_body) [66465 66483]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65826 65830])
                            ("transform" variable nil (reparse-symbol function_parameters) [65832 65841])
                            ("subs" variable nil (reparse-symbol function_parameters) [65848 65852])
                            ("linthresh" variable nil (reparse-symbol function_parameters) [65859 65868])
                            ("base" variable nil (reparse-symbol function_parameters) [65875 65879]))                          
                        :documentation "
        place ticks on the location= base**i*subs[j]
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [65813 66484])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66504 66508])
                            ("subs" variable nil (reparse-symbol function_parameters) [66510 66514])
                            ("numticks" variable nil (reparse-symbol function_parameters) [66521 66529]))                          
                        :documentation "Set parameters within this locator.")
                        (reparse-symbol indented_block_body) [66489 66716])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66734 66738]))                          )
                        (reparse-symbol indented_block_body) [66721 66932])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66953 66957])
                            ("vmin" variable nil (reparse-symbol function_parameters) [66959 66963])
                            ("vmax" variable nil (reparse-symbol function_parameters) [66965 66969]))                          )
                        (reparse-symbol indented_block_body) [66937 70082])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70103 70107])
                            ("vmin" variable nil (reparse-symbol function_parameters) [70109 70113])
                            ("vmax" variable nil (reparse-symbol function_parameters) [70115 70119]))                          )
                        (reparse-symbol indented_block_body) [70087 71054]))                  
                :type "class")
                nil [65698 71054])
            ("LogitLocator" type
               (:documentation "
    Determine the tick locations for logit axes
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        place ticks on the logit locations
        \"\"\"" code nil (reparse-symbol indented_block_body) [71195 71253])
                            ("self" variable nil (reparse-symbol indented_block_body) [71262 71280]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71167 71171])
                            ("minor" variable nil (reparse-symbol function_parameters) [71173 71178]))                          
                        :documentation "
        place ticks on the logit locations
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [71154 71281])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71301 71305])
                            ("minor" variable nil (reparse-symbol function_parameters) [71307 71312]))                          
                        :documentation "Set parameters within this locator.")
                        (reparse-symbol indented_block_body) [71286 71431])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71449 71453]))                          )
                        (reparse-symbol indented_block_body) [71436 71595])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71616 71620])
                            ("vmin" variable nil (reparse-symbol function_parameters) [71622 71626])
                            ("vmax" variable nil (reparse-symbol function_parameters) [71628 71632]))                          )
                        (reparse-symbol indented_block_body) [71600 73207])
                    ("nonsingular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73228 73232])
                            ("vmin" variable nil (reparse-symbol function_parameters) [73234 73238])
                            ("vmax" variable nil (reparse-symbol function_parameters) [73240 73244]))                          )
                        (reparse-symbol indented_block_body) [73212 74267]))                  
                :type "class")
                nil [71056 74267])
            ("AutoLocator" type
               (:superclasses ("MaxNLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [74333 74508])
                            ("MaxNLocator" code nil (reparse-symbol indented_block_body) [74516 74568]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74318 74322]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74305 74569]))                  
                :type "class")
                nil [74269 74569])
            ("AutoMinorLocator" type
               (:documentation "
    Dynamically find minor tick positions based on the positions of
    major ticks. Assumes the scale is linear and major ticks are
    evenly spaced.
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *n* is the number of subdivisions of the interval between
        major ticks; e.g., n=2 will place a single minor tick midway
        between major ticks.

        If *n* is omitted or None, it will be set to 5 or 4.
        \"\"\"" code nil (reparse-symbol indented_block_body) [74812 75053])
                            ("self" variable nil (reparse-symbol indented_block_body) [75062 75076]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74789 74793])
                            ("n" variable nil (reparse-symbol function_parameters) [74795 74796]))                          
                        :documentation "
        *n* is the number of subdivisions of the interval between
        major ticks; e.g., n=2 will place a single minor tick midway
        between major ticks.

        If *n* is omitted or None, it will be set to 5 or 4.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74776 75077])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75095 75099]))                          )
                        (reparse-symbol indented_block_body) [75082 76556])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76577 76581])
                            ("vmin" variable nil (reparse-symbol function_parameters) [76583 76587])
                            ("vmax" variable nil (reparse-symbol function_parameters) [76589 76593]))                          )
                        (reparse-symbol indented_block_body) [76561 76724]))                  
                :type "class")
                nil [74571 76724])
            ("OldAutoLocator" type
               (:documentation "
    On autoscale this class picks the best MultipleLocator to set the
    view limits and the tick locs.

    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [76911 76942]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76896 76900]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [76883 76943])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76961 76965]))                          )
                        (reparse-symbol indented_block_body) [76948 77089])
                    ("tick_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77110 77114])
                            ("vmin" variable nil (reparse-symbol function_parameters) [77116 77120])
                            ("vmax" variable nil (reparse-symbol function_parameters) [77122 77126]))                          )
                        (reparse-symbol indented_block_body) [77094 77257])
                    ("refresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77274 77278]))                          )
                        (reparse-symbol indented_block_body) [77262 77537])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77558 77562])
                            ("vmin" variable nil (reparse-symbol function_parameters) [77564 77568])
                            ("vmax" variable nil (reparse-symbol function_parameters) [77570 77574]))                          )
                        (reparse-symbol indented_block_body) [77542 77758])
                    ("get_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77779 77783])
                            ("d" variable nil (reparse-symbol function_parameters) [77785 77786]))                          )
                        (reparse-symbol indented_block_body) [77763 78512]))                  
                :type "class")
                nil [76726 78512])
            ("__all__" variable nil nil [78514 78990]))          
      :file "ticker.py"
      :pointmax 78991
      :fsize 78990
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((NAME 62801 . 62807) (IF 62814 . 62816) (ELSE 62838 . 62842) (NAME 34083 . 34091) (IF 34107 . 34109) (ELSE 34122 . 34126) (NAME 33883 . 33894) (IF 33901 . 33903) (ELSE 33910 . 33914) (NAME 30959 . 30967) (IF 30983 . 30985) (ELSE 30998 . 31002)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
matplotlib includes a framework for arbitrary geometric
transformations that is used determine the final position of all
elements drawn on the canvas.

Transforms are composed into trees of :class:`TransformNode` objects
whose actual value depends on their children.  When the contents of
children change, their parents are automatically invalidated.  The
next time an invalidated transform is accessed, it is recomputed to
reflect those changes.  This invalidation/caching approach prevents
unnecessary recomputations of transforms, and contributes to better
interactive performance.

For example, here is a graph of the transform tree used to plot data
to the graph:

.. image:: ../_static/transforms.png

The framework can be used for both affine and non-affine
transformations.  However, for speed, we want use the backend
renderers to perform affine transformations whenever possible.
Therefore, it is possible to perform just the affine or non-affine
part of a transformation on a set of data.  The affine is always
assumed to occur after the non-affine.  For any transform::

  full transform == non-affine part + affine part

The backends are not expected to handle non-affine transformations
themselves.
\"\"\"" code nil nil [1 1221])
            ("" code nil nil [1246 1331])
            ("six" include nil nil [1333 1343])
            ("numpy" include nil nil [1345 1363])
            ("numpy" include nil nil [1364 1384])
            ("" code nil nil [1414 1488])
            ("numpy.linalg" include nil nil [1489 1517])
            ("weakref" include nil nil [1519 1558])
            ("warnings" include nil nil [1559 1574])
            ("try" code nil nil [1575 1638])
            ("cbook" include nil nil [1646 1658])
            ("Path" include nil nil [1670 1681])
            ("DEBUG" variable nil nil [1683 1696])
            ("MINFLOAT" variable nil nil [1756 1788])
            ("MaskedArray" variable nil nil [1789 1817])
            ("TransformNode" type
               (:documentation "
    :class:`TransformNode` is the base class for anything that
    participates in the transform tree and needs to invalidate its
    parents or be invalidated.  This includes classes that are not
    really transforms, such as bounding boxes, since some transforms
    depend on bounding boxes to compute their values.
    "
                :superclasses ("object")
                :members 
                  ( ("_gid" variable nil (reparse-symbol indented_block_body) [2189 2197])
                    ("INVALID_NON_AFFINE" variable nil (reparse-symbol indented_block_body) [2357 2379])
                    ("INVALID_AFFINE" variable nil (reparse-symbol indented_block_body) [2384 2402])
                    ("INVALID" code nil (reparse-symbol indented_block_body) [2407 2452])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [2562 2579])
                    ("is_bbox" variable nil (reparse-symbol indented_block_body) [2584 2599])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [2605 2625])
                    ("\"\"\"
    If pass_through is True, all ancestors will always be
    invalidated, even if 'self' is already invalid.
    \"\"\"" code nil (reparse-symbol indented_block_body) [2630 2751])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Creates a new :class:`TransformNode`.

        **shorthand_name** - a string representing the \"name\" of this
                             transform. The name carries no significance
                             other than to improve the readability of
                             ``str(transform)`` when DEBUG=True.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2806 3146])
                            ("self" variable nil (reparse-symbol indented_block_body) [3318 3355])
                            ("self" variable nil (reparse-symbol indented_block_body) [3473 3490])
                            ("self" code nil (reparse-symbol indented_block_body) [3499 3542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2770 2774])
                            ("shorthand_name" variable nil (reparse-symbol function_parameters) [2776 2790]))                          
                        :documentation "
        Creates a new :class:`TransformNode`.

        **shorthand_name** - a string representing the \"name\" of this
                             transform. The name carries no significance
                             other than to improve the readability of
                             ``str(transform)`` when DEBUG=True.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2757 3543])
                    ("if" code nil (reparse-symbol indented_block_body) [3548 3717])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3739 3743]))                          )
                        (reparse-symbol indented_block_body) [3722 3918])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3940 3944])
                            ("data_dict" variable nil (reparse-symbol function_parameters) [3946 3955]))                          )
                        (reparse-symbol indented_block_body) [3923 4120])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4138 4142])
                            ("args" variable nil (reparse-symbol function_parameters) [4144 4149]))                          )
                        (reparse-symbol indented_block_body) [4125 4295])
                    ("__deepcopy__" variable nil (reparse-symbol indented_block_body) [4299 4322])
                    ("invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4343 4347]))                          
                        :documentation "
        Invalidate this :class:`TransformNode` and triggers an
        invalidation of its ancestors.  Should be called any
        time the transform changes.
        ")
                        (reparse-symbol indented_block_body) [4328 4702])
                    ("_invalidate_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4732 4736])
                            ("value" variable nil (reparse-symbol function_parameters) [4738 4743])
                            ("invalidating_node" variable nil (reparse-symbol function_parameters) [4745 4762]))                          
                        :documentation "
        Called by :meth:`invalidate` and subsequently ascends the transform
        stack calling each TransformNode's _invalidate_internal method.
        ")
                        (reparse-symbol indented_block_body) [4707 5876])
                    ("set_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5898 5902])
                            ("children" variable nil (reparse-symbol function_parameters) [5904 5913]))                          
                        :documentation "
        Set the children of the transform, to let the invalidation
        system know which transforms can invalidate this transform.
        Should be called from the constructor of any transforms that
        depend on other transforms.
        ")
                        (reparse-symbol indented_block_body) [5881 6255])
                    ("if" code nil (reparse-symbol indented_block_body) [6260 6484])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6500 6504]))                          
                        :documentation "
        Returns a frozen copy of this transform node.  The frozen copy
        will not update when its children change.  Useful for storing
        a previously known state of a transform where
        ``copy.deepcopy()`` might normally be used.
        ")
                        (reparse-symbol indented_block_body) [6489 6798])
                    ("if" code nil (reparse-symbol indented_block_body) [6803 8856]))                  
                :type "class")
                nil [1820 8856])
            ("BboxBase" type
               (:documentation "
    This is the base class of all bounding boxes, and provides
    read-only access to its data.  A mutable bounding box is provided
    by the :class:`Bbox` class.

    The canonical representation is as two points, with no
    restrictions on their ordering.  Convenience properties are
    provided to get the left, bottom, right and top edges and width
    and height, but these are not stored explicitly.
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("is_bbox" variable nil (reparse-symbol indented_block_body) [9319 9333])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [9338 9354])
                    ("if" code nil (reparse-symbol indented_block_body) [9474 9847])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9863 9867]))                          )
                        (reparse-symbol indented_block_body) [9852 9916])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [9920 9958])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9978 9982])
                            ("args" variable nil (reparse-symbol function_parameters) [9984 9989])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9991 9999]))                          )
                        (reparse-symbol indented_block_body) [9964 10035])
                    ("is_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10052 10056]))                          
                        :documentation "
        Returns True if the :class:`Bbox` is the unit bounding box
        from (0, 0) to (1, 1).
        ")
                        (reparse-symbol indented_block_body) [10040 10250])
                    ("_get_x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10267 10271]))                          )
                        (reparse-symbol indented_block_body) [10255 10313])
                    ("x0" variable nil (reparse-symbol indented_block_body) [10317 10580])
                    ("_get_y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10598 10602]))                          )
                        (reparse-symbol indented_block_body) [10586 10644])
                    ("y0" variable nil (reparse-symbol indented_block_body) [10648 10911])
                    ("_get_x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10929 10933]))                          )
                        (reparse-symbol indented_block_body) [10917 10975])
                    ("x1" variable nil (reparse-symbol indented_block_body) [10979 11246])
                    ("_get_y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11264 11268]))                          )
                        (reparse-symbol indented_block_body) [11252 11310])
                    ("y1" variable nil (reparse-symbol indented_block_body) [11314 11581])
                    ("_get_p0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11599 11603]))                          )
                        (reparse-symbol indented_block_body) [11587 11642])
                    ("p0" variable nil (reparse-symbol indented_block_body) [11646 11891])
                    ("_get_p1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11909 11913]))                          )
                        (reparse-symbol indented_block_body) [11897 11952])
                    ("p1" variable nil (reparse-symbol indented_block_body) [11956 12200])
                    ("_get_xmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12220 12224]))                          )
                        (reparse-symbol indented_block_body) [12206 12271])
                    ("xmin" variable nil (reparse-symbol indented_block_body) [12275 12391])
                    ("_get_ymin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12411 12415]))                          )
                        (reparse-symbol indented_block_body) [12397 12462])
                    ("ymin" variable nil (reparse-symbol indented_block_body) [12466 12584])
                    ("_get_xmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12604 12608]))                          )
                        (reparse-symbol indented_block_body) [12590 12655])
                    ("xmax" variable nil (reparse-symbol indented_block_body) [12659 12776])
                    ("_get_ymax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12796 12800]))                          )
                        (reparse-symbol indented_block_body) [12782 12847])
                    ("ymax" variable nil (reparse-symbol indented_block_body) [12851 12966])
                    ("_get_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12985 12989]))                          )
                        (reparse-symbol indented_block_body) [12972 13084])
                    ("min" variable nil (reparse-symbol indented_block_body) [13088 13218])
                    ("_get_max" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13237 13241]))                          )
                        (reparse-symbol indented_block_body) [13224 13336])
                    ("max" variable nil (reparse-symbol indented_block_body) [13340 13460])
                    ("_get_intervalx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13485 13489]))                          )
                        (reparse-symbol indented_block_body) [13466 13531])
                    ("intervalx" variable nil (reparse-symbol indented_block_body) [13535 13759])
                    ("_get_intervaly" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13784 13788]))                          )
                        (reparse-symbol indented_block_body) [13765 13830])
                    ("intervaly" variable nil (reparse-symbol indented_block_body) [13834 14059])
                    ("_get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14080 14084]))                          )
                        (reparse-symbol indented_block_body) [14065 14165])
                    ("width" variable nil (reparse-symbol indented_block_body) [14169 14323])
                    ("_get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14345 14349]))                          )
                        (reparse-symbol indented_block_body) [14329 14430])
                    ("height" variable nil (reparse-symbol indented_block_body) [14434 14591])
                    ("_get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14611 14615]))                          )
                        (reparse-symbol indented_block_body) [14597 14690])
                    ("size" variable nil (reparse-symbol indented_block_body) [14694 14880])
                    ("_get_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14902 14906]))                          )
                        (reparse-symbol indented_block_body) [14886 15004])
                    ("bounds" variable nil (reparse-symbol indented_block_body) [15008 15150])
                    ("_get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15173 15177]))                          )
                        (reparse-symbol indented_block_body) [15156 15230])
                    ("extents" variable nil (reparse-symbol indented_block_body) [15234 15371])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15392 15396]))                          )
                        (reparse-symbol indented_block_body) [15377 15436])
                    ("containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15455 15459])
                            ("x" variable nil (reparse-symbol function_parameters) [15461 15462]))                          
                        :documentation "
        Returns True if *x* is between or equal to :attr:`x0` and
        :attr:`x1`.
        ")
                        (reparse-symbol indented_block_body) [15441 15718])
                    ("containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15737 15741])
                            ("y" variable nil (reparse-symbol function_parameters) [15743 15744]))                          
                        :documentation "
        Returns True if *y* is between or equal to :attr:`y0` and
        :attr:`y1`.
        ")
                        (reparse-symbol indented_block_body) [15723 16000])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16018 16022])
                            ("x" variable nil (reparse-symbol function_parameters) [16024 16025])
                            ("y" variable nil (reparse-symbol function_parameters) [16027 16028]))                          
                        :documentation "
        Returns *True* if (*x*, *y*) is a coordinate inside the
        bounding box or on its edge.
        ")
                        (reparse-symbol indented_block_body) [16005 16211])
                    ("overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16229 16233])
                            ("other" variable nil (reparse-symbol function_parameters) [16235 16240]))                          
                        :documentation "
        Returns True if this bounding box overlaps with the given
        bounding box *other*.
        ")
                        (reparse-symbol indented_block_body) [16216 16922])
                    ("fully_containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16947 16951])
                            ("x" variable nil (reparse-symbol function_parameters) [16953 16954]))                          
                        :documentation "
        Returns True if *x* is between but not equal to :attr:`x0` and
        :attr:`x1`.
        ")
                        (reparse-symbol indented_block_body) [16927 17211])
                    ("fully_containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17236 17240])
                            ("y" variable nil (reparse-symbol function_parameters) [17242 17243]))                          
                        :documentation "
        Returns True if *y* is between but not equal to :attr:`y0` and
        :attr:`y1`.
        ")
                        (reparse-symbol indented_block_body) [17216 17500])
                    ("fully_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17524 17528])
                            ("x" variable nil (reparse-symbol function_parameters) [17530 17531])
                            ("y" variable nil (reparse-symbol function_parameters) [17533 17534]))                          
                        :documentation "
        Returns True if (*x*, *y*) is a coordinate inside the bounding
        box, but not on its edge.
        ")
                        (reparse-symbol indented_block_body) [17505 17747])
                    ("fully_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17771 17775])
                            ("other" variable nil (reparse-symbol function_parameters) [17777 17782]))                          
                        :documentation "
        Returns True if this bounding box overlaps with the given
        bounding box *other*, but not on its edge alone.
        ")
                        (reparse-symbol indented_block_body) [17752 18391])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18412 18416])
                            ("transform" variable nil (reparse-symbol function_parameters) [18418 18427]))                          
                        :documentation "
        Return a new :class:`Bbox` object, statically transformed by
        the given transform.
        ")
                        (reparse-symbol indented_block_body) [18396 18747])
                    ("inverse_transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18776 18780])
                            ("transform" variable nil (reparse-symbol function_parameters) [18782 18791]))                          
                        :documentation "
        Return a new :class:`Bbox` object, statically transformed by
        the inverse of the given transform.
        ")
                        (reparse-symbol indented_block_body) [18752 18985])
                    ("coefs" variable nil (reparse-symbol indented_block_body) [18990 19252])
                    ("anchored" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19271 19275])
                            ("c" variable nil (reparse-symbol function_parameters) [19277 19278])
                            ("container" variable nil (reparse-symbol function_parameters) [19280 19289]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shifted to position *c*
        within a container.

        *c*: may be either:

          * a sequence (*cx*, *cy*) where *cx* and *cy* range from 0
            to 1, where 0 is left or bottom and 1 is right or top

          * a string:
            - 'C' for centered
            - 'S' for bottom-center
            - 'SE' for bottom-left
            - 'E' for left
            - etc.

        Optional argument *container* is the box within which the
        :class:`Bbox` is positioned; it defaults to the initial
        :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [19258 20279])
                    ("shrunk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20295 20299])
                            ("mx" variable nil (reparse-symbol function_parameters) [20301 20303])
                            ("my" variable nil (reparse-symbol function_parameters) [20305 20307]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shrunk by the factor *mx*
        in the *x* direction and the factor *my* in the *y* direction.
        The lower left corner of the box remains unchanged.  Normally
        *mx* and *my* will be less than 1, but this is not enforced.
        ")
                        (reparse-symbol indented_block_body) [20284 20734])
                    ("shrunk_to_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20760 20764])
                            ("box_aspect" variable nil (reparse-symbol function_parameters) [20766 20776])
                            ("container" variable nil (reparse-symbol function_parameters) [20778 20787])
                            ("fig_aspect" variable nil (reparse-symbol function_parameters) [20794 20804]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shrunk so that it is as
        large as it can be while having the desired aspect ratio,
        *box_aspect*.  If the box coordinates are relative---that
        is, fractions of a larger box such as a figure---then the
        physical aspect ratio of that figure is specified with
        *fig_aspect*, so that *box_aspect* can also be given as a
        ratio of the absolute dimensions, not the relative dimensions.
        ")
                        (reparse-symbol indented_block_body) [20739 21755])
                    ("splitx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21771 21775])
                            ("args" variable nil (reparse-symbol function_parameters) [21777 21782]))                          
                        :documentation "
        e.g., ``bbox.splitx(f1, f2, ...)``

        Returns a list of new :class:`Bbox` objects formed by
        splitting the original one with vertical lines at fractional
        positions *f1*, *f2*, ...
        ")
                        (reparse-symbol indented_block_body) [21760 22278])
                    ("splity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22294 22298])
                            ("args" variable nil (reparse-symbol function_parameters) [22300 22305]))                          
                        :documentation "
        e.g., ``bbox.splitx(f1, f2, ...)``

        Returns a list of new :class:`Bbox` objects formed by
        splitting the original one with horizontal lines at fractional
        positions *f1*, *f2*, ...
        ")
                        (reparse-symbol indented_block_body) [22283 22803])
                    ("count_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22827 22831])
                            ("vertices" variable nil (reparse-symbol function_parameters) [22833 22841]))                          
                        :documentation "
        Count the number of vertices contained in the :class:`Bbox`.

        *vertices* is a Nx2 Numpy array.
        ")
                        (reparse-symbol indented_block_body) [22808 23436])
                    ("count_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23460 23464])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [23466 23472]))                          
                        :documentation "
        Count the number of bounding boxes that overlap this one.

        bboxes is a sequence of :class:`BboxBase` objects
        ")
                        (reparse-symbol indented_block_body) [23441 23734])
                    ("expanded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23752 23756])
                            ("sw" variable nil (reparse-symbol function_parameters) [23758 23760])
                            ("sh" variable nil (reparse-symbol function_parameters) [23762 23764]))                          
                        :documentation "
        Return a new :class:`Bbox` which is this :class:`Bbox`
        expanded around its center by the given factors *sw* and
        *sh*.
        ")
                        (reparse-symbol indented_block_body) [23739 24178])
                    ("padded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24194 24198])
                            ("p" variable nil (reparse-symbol function_parameters) [24200 24201]))                          
                        :documentation "
        Return a new :class:`Bbox` that is padded on all four sides by
        the given value.
        ")
                        (reparse-symbol indented_block_body) [24183 24408])
                    ("translated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24428 24432])
                            ("tx" variable nil (reparse-symbol function_parameters) [24434 24436])
                            ("ty" variable nil (reparse-symbol function_parameters) [24438 24440]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, statically translated by
        *tx* and *ty*.
        ")
                        (reparse-symbol indented_block_body) [24413 24604])
                    ("corners" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24621 24625]))                          
                        :documentation "
        Return an array of points which are the four corners of this
        rectangle.  For example, if this :class:`Bbox` is defined by
        the points (*a*, *b*) and (*c*, *d*), :meth:`corners` returns
        (*a*, *b*), (*a*, *d*), (*c*, *b*) and (*c*, *d*).
        ")
                        (reparse-symbol indented_block_body) [24609 25026])
                    ("rotated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25043 25047])
                            ("radians" variable nil (reparse-symbol function_parameters) [25049 25056]))                          
                        :documentation "
        Return a new bounding box that bounds a rotated version of
        this bounding box by the given radians.  The new bounding box
        is still aligned with the axes, of course.
        ")
                        (reparse-symbol indented_block_body) [25031 25486])
                    ("union" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bboxes" variable nil (reparse-symbol function_parameters) [25519 25525]))                          
                        :documentation "
        Return a :class:`Bbox` that contains all of the given bboxes.
        ")
                        (reparse-symbol indented_block_body) [25491 26175])
                    ("intersection" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bbox1" variable nil (reparse-symbol function_parameters) [26215 26220])
                            ("bbox2" variable nil (reparse-symbol function_parameters) [26222 26227]))                          
                        :documentation "
        Return the intersection of the two bboxes or None
        if they do not intersect.

        Implements the algorithm described at:

            http://www.tekpool.com/node/2687

        ")
                        (reparse-symbol indented_block_body) [26180 26937]))                  
                :type "class")
                nil [8858 26937])
            ("Bbox" type
               (:documentation "
    A mutable bounding box.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *points*: a 2x2 numpy array of the form [[x0, y0], [x1, y1]]

        If you need to create a :class:`Bbox` object from another form
        of data, consider the static methods :meth:`unit`,
        :meth:`from_bounds` and :meth:`from_extents`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [27056 27325])
                            ("BboxBase" code nil (reparse-symbol indented_block_body) [27334 27367])
                            ("points" variable nil (reparse-symbol indented_block_body) [27376 27414])
                            ("if" code nil (reparse-symbol indented_block_body) [27423 27570])
                            ("self" variable nil (reparse-symbol indented_block_body) [27578 27599])
                            ("self" variable nil (reparse-symbol indented_block_body) [27608 27649])
                            ("self" variable nil (reparse-symbol indented_block_body) [27658 27677])
                            ("self" variable nil (reparse-symbol indented_block_body) [27857 27896]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27023 27027])
                            ("points" variable nil (reparse-symbol function_parameters) [27029 27035])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27037 27045]))                          
                        :documentation "
        *points*: a 2x2 numpy array of the form [[x0, y0], [x1, y1]]

        If you need to create a :class:`Bbox` object from another form
        of data, consider the static methods :meth:`unit`,
        :meth:`from_bounds` and :meth:`from_extents`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27010 27897])
                    ("if" code nil (reparse-symbol indented_block_body) [27901 28176])
                    ("unit" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Create a new unit :class:`Bbox` from (0, 0) to
        (1, 1).
        ")
                        (reparse-symbol indented_block_body) [28181 28387])
                    ("null" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Create a new null :class:`Bbox` from (inf, inf) to
        (-inf, -inf).
        ")
                        (reparse-symbol indented_block_body) [28392 28622])
                    ("from_bounds" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x0" variable nil (reparse-symbol function_parameters) [28661 28663])
                            ("y0" variable nil (reparse-symbol function_parameters) [28665 28667])
                            ("width" variable nil (reparse-symbol function_parameters) [28669 28674])
                            ("height" variable nil (reparse-symbol function_parameters) [28676 28682]))                          
                        :documentation "
        (staticmethod) Create a new :class:`Bbox` from *x0*, *y0*,
        *width* and *height*.

        *width* and *height* may be negative.
        ")
                        (reparse-symbol indented_block_body) [28627 28919])
                    ("from_extents" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [28959 28964]))                          
                        :documentation "
        (staticmethod) Create a new Bbox from *left*, *bottom*,
        *right* and *top*.

        The *y*-axis increases upwards.
        ")
                        (reparse-symbol indented_block_body) [28924 29214])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29234 29238])
                            ("fmt" variable nil (reparse-symbol function_parameters) [29240 29243]))                          )
                        (reparse-symbol indented_block_body) [29219 29374])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29391 29395]))                          )
                        (reparse-symbol indented_block_body) [29379 29430])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29448 29452]))                          )
                        (reparse-symbol indented_block_body) [29435 29528])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29544 29548])
                            ("value" variable nil (reparse-symbol function_parameters) [29550 29555]))                          
                        :documentation "
        Set whether the existing bounds of the box should be ignored
        by subsequent calls to :meth:`update_from_data_xy`.

        *value*:

           - When True, subsequent calls to :meth:`update_from_data_xy`
             will ignore the existing bounds of the :class:`Bbox`.

           - When False, subsequent calls to :meth:`update_from_data_xy`
             will include the existing bounds of the :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [29533 30040])
                    ("" code nil (reparse-symbol indented_block_body) [30062 30104])
                    ("update_from_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30130 30134])
                            ("x" variable nil (reparse-symbol function_parameters) [30136 30137])
                            ("y" variable nil (reparse-symbol function_parameters) [30139 30140])
                            ("ignore" variable nil (reparse-symbol function_parameters) [30142 30148]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        *x*: a numpy array of *x*-values

        *y*: a numpy array of *y*-values

        *ignore*:
           - when True, ignore the existing bounds of the :class:`Bbox`.
           - when False, include the existing bounds of the :class:`Bbox`.
           - when None, use the last value passed to :meth:`ignore`.
        ")
                        (reparse-symbol indented_block_body) [30109 30965])
                    ("update_from_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30991 30995])
                            ("path" variable nil (reparse-symbol function_parameters) [30997 31001])
                            ("ignore" variable nil (reparse-symbol function_parameters) [31003 31009])
                            ("updatex" variable nil (reparse-symbol function_parameters) [31016 31023])
                            ("updatey" variable nil (reparse-symbol function_parameters) [31030 31037]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        *path*: a :class:`~matplotlib.path.Path` instance

        *ignore*:
           - when True, ignore the existing bounds of the :class:`Bbox`.
           - when False, include the existing bounds of the :class:`Bbox`.
           - when None, use the last value passed to :meth:`ignore`.

        *updatex*: when True, update the x values

        *updatey*: when True, update the y values

        ")
                        (reparse-symbol indented_block_body) [30970 32190])
                    ("update_from_data_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32219 32223])
                            ("xy" variable nil (reparse-symbol function_parameters) [32225 32227])
                            ("ignore" variable nil (reparse-symbol function_parameters) [32229 32235])
                            ("updatex" variable nil (reparse-symbol function_parameters) [32242 32249])
                            ("updatey" variable nil (reparse-symbol function_parameters) [32256 32263]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        *xy*: a numpy array of 2D points

        *ignore*:
           - when True, ignore the existing bounds of the :class:`Bbox`.
           - when False, include the existing bounds of the :class:`Bbox`.
           - when None, use the last value passed to :meth:`ignore`.

        *updatex*: when True, update the x values

        *updatey*: when True, update the y values
        ")
                        (reparse-symbol indented_block_body) [32195 33068])
                    ("_set_x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33085 33089])
                            ("val" variable nil (reparse-symbol function_parameters) [33091 33094]))                          )
                        (reparse-symbol indented_block_body) [33073 33156])
                    ("x0" variable nil (reparse-symbol indented_block_body) [33160 33200])
                    ("_set_y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33218 33222])
                            ("val" variable nil (reparse-symbol function_parameters) [33224 33227]))                          )
                        (reparse-symbol indented_block_body) [33206 33289])
                    ("y0" variable nil (reparse-symbol indented_block_body) [33293 33333])
                    ("_set_x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33351 33355])
                            ("val" variable nil (reparse-symbol function_parameters) [33357 33360]))                          )
                        (reparse-symbol indented_block_body) [33339 33422])
                    ("x1" variable nil (reparse-symbol indented_block_body) [33426 33466])
                    ("_set_y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33484 33488])
                            ("val" variable nil (reparse-symbol function_parameters) [33490 33493]))                          )
                        (reparse-symbol indented_block_body) [33472 33555])
                    ("y1" variable nil (reparse-symbol indented_block_body) [33559 33599])
                    ("_set_p0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33617 33621])
                            ("val" variable nil (reparse-symbol function_parameters) [33623 33626]))                          )
                        (reparse-symbol indented_block_body) [33605 33685])
                    ("p0" variable nil (reparse-symbol indented_block_body) [33689 33729])
                    ("_set_p1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33747 33751])
                            ("val" variable nil (reparse-symbol function_parameters) [33753 33756]))                          )
                        (reparse-symbol indented_block_body) [33735 33815])
                    ("p1" variable nil (reparse-symbol indented_block_body) [33819 33859])
                    ("_set_intervalx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33884 33888])
                            ("interval" variable nil (reparse-symbol function_parameters) [33890 33898]))                          )
                        (reparse-symbol indented_block_body) [33865 33965])
                    ("intervalx" variable nil (reparse-symbol indented_block_body) [33969 34030])
                    ("_set_intervaly" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34055 34059])
                            ("interval" variable nil (reparse-symbol function_parameters) [34061 34069]))                          )
                        (reparse-symbol indented_block_body) [34036 34136])
                    ("intervaly" variable nil (reparse-symbol indented_block_body) [34140 34201])
                    ("_set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34223 34227])
                            ("bounds" variable nil (reparse-symbol function_parameters) [34229 34235]))                          )
                        (reparse-symbol indented_block_body) [34207 34436])
                    ("bounds" variable nil (reparse-symbol indented_block_body) [34440 34492])
                    ("_get_minpos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34514 34518]))                          )
                        (reparse-symbol indented_block_body) [34498 34549])
                    ("minpos" variable nil (reparse-symbol indented_block_body) [34553 34583])
                    ("_get_minposx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34606 34610]))                          )
                        (reparse-symbol indented_block_body) [34589 34644])
                    ("minposx" variable nil (reparse-symbol indented_block_body) [34648 34680])
                    ("_get_minposy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34703 34707]))                          )
                        (reparse-symbol indented_block_body) [34686 34741])
                    ("minposy" variable nil (reparse-symbol indented_block_body) [34745 34777])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34798 34802]))                          
                        :documentation "
        Get the points of the bounding box directly as a numpy array
        of the form: [[x0, y0], [x1, y1]].
        ")
                        (reparse-symbol indented_block_body) [34783 34995])
                    ("set_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35015 35019])
                            ("points" variable nil (reparse-symbol function_parameters) [35021 35027]))                          
                        :documentation "
        Set the points of the bounding box directly from a numpy array
        of the form: [[x0, y0], [x1, y1]].  No error checking is
        performed, as this method is mainly for internal use.
        ")
                        (reparse-symbol indented_block_body) [35000 35359])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35372 35376])
                            ("other" variable nil (reparse-symbol function_parameters) [35378 35383]))                          
                        :documentation "
        Set this bounding box from the \"frozen\" bounds of another
        :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [35364 35630])
                    ("mutated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35647 35651]))                          )
                        (reparse-symbol indented_block_body) [35635 35761])
                    ("mutatedx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35779 35783]))                          )
                        (reparse-symbol indented_block_body) [35766 35976])
                    ("mutatedy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35994 35998]))                          )
                        (reparse-symbol indented_block_body) [35981 36191]))                  
                :type "class")
                nil [26939 36191])
            ("TransformedBbox" type
               (:documentation "
    A :class:`Bbox` that is automatically transformed by a given
    transform.  When either the child bounding box or transform
    changes, the bounds of this bbox will update accordingly.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *bbox*: a child :class:`Bbox`

        *transform*: a 2D :class:`Transform`
        \"\"\"" code nil (reparse-symbol indented_block_body) [36492 36591])
                            ("if" code nil (reparse-symbol indented_block_body) [36600 36674])
                            ("if" code nil (reparse-symbol indented_block_body) [36682 36869])
                            ("if" code nil (reparse-symbol indented_block_body) [36877 37048])
                            ("BboxBase" code nil (reparse-symbol indented_block_body) [37057 37090])
                            ("self" variable nil (reparse-symbol indented_block_body) [37099 37116])
                            ("self" variable nil (reparse-symbol indented_block_body) [37125 37152])
                            ("self" code nil (reparse-symbol indented_block_body) [37161 37195])
                            ("self" variable nil (reparse-symbol indented_block_body) [37204 37223]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36450 36454])
                            ("bbox" variable nil (reparse-symbol function_parameters) [36456 36460])
                            ("transform" variable nil (reparse-symbol function_parameters) [36462 36471])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36473 36481]))                          
                        :documentation "
        *bbox*: a child :class:`Bbox`

        *transform*: a 2D :class:`Transform`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36437 37224])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37242 37246]))                          )
                        (reparse-symbol indented_block_body) [37229 37322])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37342 37346]))                          )
                        (reparse-symbol indented_block_body) [37327 38234])
                    ("get_points" variable nil (reparse-symbol indented_block_body) [38238 38282])
                    ("if" code nil (reparse-symbol indented_block_body) [38288 38460]))                  
                :type "class")
                nil [36193 38460])
            ("Transform" type
               (:documentation "
    The base class of all :class:`TransformNode` instances that
    actually perform a transformation.

    All non-affine transformations should be subclasses of this class.
    New affine transformations should be subclasses of
    :class:`Affine2D`.

    Subclasses of this class should override the following members (at
    minimum):

      - :attr:`input_dims`
      - :attr:`output_dims`
      - :meth:`transform`
      - :attr:`is_separable`
      - :attr:`has_inverse`
      - :meth:`inverted` (if :attr:`has_inverse` is True)

    If the transform needs to do something non-standard with
    :class:`matplotlib.path.Path` objects, such as adding curves
    where there were once line segments, it should override:

      - :meth:`transform_path`
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [39270 39287])
                    ("\"\"\"
    The number of input dimensions of this transform.
    Must be overridden (with integers) in the subclass.
    \"\"\"" code nil (reparse-symbol indented_block_body) [39292 39413])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [39419 39437])
                    ("\"\"\"
    The number of output dimensions of this transform.
    Must be overridden (with integers) in the subclass.
    \"\"\"" code nil (reparse-symbol indented_block_body) [39442 39564])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [39570 39589])
                    ("\"\"\"True if this transform has a corresponding inverse transform.\"\"\"" code nil (reparse-symbol indented_block_body) [39594 39661])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [39667 39687])
                    ("\"\"\"True if this transform is separable in the x- and y- dimensions.\"\"\"" code nil (reparse-symbol indented_block_body) [39692 39762])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39780 39784])
                            ("other" variable nil (reparse-symbol function_parameters) [39786 39791]))                          
                        :documentation "
        Composes two transforms together such that *self* is followed
        by *other*.
        ")
                        (reparse-symbol indented_block_body) [39768 40108])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40126 40130])
                            ("other" variable nil (reparse-symbol function_parameters) [40132 40137]))                          
                        :documentation "
        Composes two transforms together such that *self* is followed
        by *other*.
        ")
                        (reparse-symbol indented_block_body) [40113 40454])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40470 40474])
                            ("other" variable nil (reparse-symbol function_parameters) [40476 40481]))                          )
                        (reparse-symbol indented_block_body) [40459 40688])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40728 40732]))                          
                        :documentation "
        Returns an iterator breaking down this transform stack from left to
        right recursively. If self == ((A, N), A) then the result will be an
        iterator which yields I : ((A, N), A), followed by A : (N, A),
        followed by (A, N) : (A), but not ((A, N), A) : I.

        This is equivalent to flattening the stack then yielding
        ``flat_stack[:i], flat_stack[i:]`` where i=0..(n-1).

        ")
                        (reparse-symbol indented_block_body) [40693 41210])
                    ("depth" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41239 41243]))                          
                        :documentation "
        Returns the number of transforms which have been chained
        together to form this Transform instance.

        .. note::

            For the special case of a Composite transform, the maximum depth
            of the two is returned.

        ")
                        (reparse-symbol indented_block_body) [41215 41536])
                    ("contains_branch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41561 41565])
                            ("other" variable nil (reparse-symbol function_parameters) [41567 41572]))                          
                        :documentation "
        Return whether the given transform is a sub-tree of this transform.

        This routine uses transform equality to identify sub-trees, therefore
        in many situations it is object id which will be used.

        For the case where the given transform represents the whole
        of this transform, returns True.

        ")
                        (reparse-symbol indented_block_body) [41541 42210])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42246 42250])
                            ("other_transform" variable nil (reparse-symbol function_parameters) [42252 42267]))                          
                        :documentation "
        Returns whether the given branch is a sub-tree of this transform on
        each seperate dimension.

        A common use for this method is to identify if a transform is a blended
        transform containing an axes' data transform. e.g.::

            x_isdata, y_isdata = trans.contains_branch_seperately(ax.transData)

        ")
                        (reparse-symbol indented_block_body) [42215 42984])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43001 43005])
                            ("other" variable nil (reparse-symbol function_parameters) [43007 43012]))                          
                        :documentation "
        Returns a transform stack which goes all the way down self's transform
        stack, and then ascends back up other's stack. If it can, this is
        optimised::

            # normally
            A - B == a + b.inverted()

            # sometimes, when A contains the tree B there is no need to
            # descend all the way down to the base of A (via B), instead we
            # can just stop at B.

            (A + B) - (B)^-1 == A

            # similarly, when B contains tree A, we can avoid decending A at
            # all, basically:
            A - (A + B) == ((B + A) - A).inverted() or B^-1

        For clarity, the result of ``(A + B) - B + B == (A + B)``.

        ")
                        (reparse-symbol indented_block_body) [42989 44747])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44766 44770])
                            ("args" variable nil (reparse-symbol function_parameters) [44772 44777])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44779 44787]))                          
                        :documentation "
        Array interface to get at this Transform's affine matrix.
        ")
                        (reparse-symbol indented_block_body) [44752 44926])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44945 44949])
                            ("values" variable nil (reparse-symbol function_parameters) [44951 44957]))                          
                        :documentation "
        Performs the transformation on the given array of values.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).

        Alternatively, accepts a numpy array of length :attr:`input_dims`
        and returns a numpy array of length :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [44931 46144])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46170 46174])
                            ("values" variable nil (reparse-symbol function_parameters) [46176 46182]))                          
                        :documentation "
        Performs only the affine part of this transformation on the
        given array of values.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally a no-op.  In
        affine transformations, this is equivalent to
        ``transform(values)``.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).

        Alternatively, accepts a numpy array of length :attr:`input_dims`
        and returns a numpy array of length :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [46149 46905])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46935 46939])
                            ("values" variable nil (reparse-symbol function_parameters) [46941 46947]))                          
                        :documentation "
        Performs only the non-affine part of the transformation.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally equivalent to
        ``transform(values)``.  In affine transformations, this is
        always a no-op.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).

        Alternatively, accepts a numpy array of length :attr:`input_dims`
        and returns a numpy array of length :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [46910 47614])
                    ("transform_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47638 47642])
                            ("bbox" variable nil (reparse-symbol function_parameters) [47644 47648]))                          
                        :documentation "
        Transform the given bounding box.

        Note, for smarter transforms including caching (a common
        requirement for matplotlib figures), see :class:`TransformedBbox`.
        ")
                        (reparse-symbol indented_block_body) [47619 47913])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47933 47937]))                          
                        :documentation "
        Get the affine part of this transform.
        ")
                        (reparse-symbol indented_block_body) [47918 48046])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48066 48070]))                          
                        :documentation "
        Get the Affine transformation array for the affine part
        of this transform.

        ")
                        (reparse-symbol indented_block_body) [48051 48235])
                    ("transform_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48260 48264])
                            ("point" variable nil (reparse-symbol function_parameters) [48266 48271]))                          
                        :documentation "
        A convenience function that returns the transformed copy of a
        single point.

        The point is given as a sequence of length :attr:`input_dims`.
        The transformed point is returned as a sequence of length
        :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [48240 48755])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48779 48783])
                            ("path" variable nil (reparse-symbol function_parameters) [48785 48789]))                          
                        :documentation "
        Returns a transformed path.

        *path*: a :class:`~matplotlib.path.Path` instance.

        In some cases, this transform may insert curves into the path
        that began as line segments.
        ")
                        (reparse-symbol indented_block_body) [48760 49100])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49131 49135])
                            ("path" variable nil (reparse-symbol function_parameters) [49137 49141]))                          
                        :documentation "
        Returns a path, transformed only by the affine part of
        this transform.

        *path*: a :class:`~matplotlib.path.Path` instance.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [49105 49497])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49532 49536])
                            ("path" variable nil (reparse-symbol function_parameters) [49538 49542]))                          
                        :documentation "
        Returns a path, transformed only by the non-affine
        part of this transform.

        *path*: a :class:`~matplotlib.path.Path` instance.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [49502 50082])
                    ("transform_angles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50108 50112])
                            ("angles" variable nil (reparse-symbol function_parameters) [50114 50120])
                            ("pts" variable nil (reparse-symbol function_parameters) [50122 50125])
                            ("radians" variable nil (reparse-symbol function_parameters) [50127 50134])
                            ("pushoff" variable nil (reparse-symbol function_parameters) [50142 50149]))                          
                        :documentation "
        Performs transformation on a set of angles anchored at
        specific locations.

        The *angles* must be a column vector (i.e., numpy array).

        The *pts* must be a two-column numpy array of x,y positions
        (angle transforms currently only work in 2D).  This array must
        have the same number of rows as *angles*.

        *radians* indicates whether or not input angles are given in
         radians (True) or degrees (False; the default).

        *pushoff* is the distance to move away from *pts* for
         determining transformed angles (see discussion of method
         below).

        The transformed angles are returned in an array with the same
        size as *angles*.

        The generic version of this method uses a very generic
        algorithm that transforms *pts*, as well as locations very
        close to *pts*, to find the angle in the transformed system.
        ")
                        (reparse-symbol indented_block_body) [50087 52113])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52131 52135]))                          
                        :documentation "
        Return the corresponding inverse transformation.

        The return value of this method should be treated as
        temporary.  An update to *self* does not cause a corresponding
        update to its inverted copy.

        ``x === self.inverted().transform(self.transform(x))``
        ")
                        (reparse-symbol indented_block_body) [52118 52489]))                  
                :type "class")
                nil [38462 52489])
            ("TransformWrapper" type
               (:documentation "
    A helper class that holds a single child transform and acts
    equivalently to it.

    This is useful if a node of the transform tree must be replaced at
    run time with a transform of a different type.  This class allows
    that replacement to correctly trigger invalidation.

    Note that :class:`TransformWrapper` instances must have the same
    input and output dimensions during their entire lifetime, so the
    child transform may only be replaced with another child transform
    of the same dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [53069 53088])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *child*: A class:`Transform` instance.  This child may later
        be replaced with :meth:`set`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [53129 53251])
                            ("if" code nil (reparse-symbol indented_block_body) [53260 53439])
                            ("self" code nil (reparse-symbol indented_block_body) [53447 53464])
                            ("self" code nil (reparse-symbol indented_block_body) [53473 53497]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53107 53111])
                            ("child" variable nil (reparse-symbol function_parameters) [53113 53118]))                          
                        :documentation "
        *child*: A class:`Transform` instance.  This child may later
        be replaced with :meth:`set`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53094 53498])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53513 53517])
                            ("child" variable nil (reparse-symbol function_parameters) [53519 53524]))                          )
                        (reparse-symbol indented_block_body) [53503 53699])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53715 53719])
                            ("other" variable nil (reparse-symbol function_parameters) [53721 53726]))                          )
                        (reparse-symbol indented_block_body) [53704 53770])
                    ("if" code nil (reparse-symbol indented_block_body) [53775 53849])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53965 53969]))                          )
                        (reparse-symbol indented_block_body) [53948 54301])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54323 54327])
                            ("state" variable nil (reparse-symbol function_parameters) [54329 54334]))                          )
                        (reparse-symbol indented_block_body) [54306 54739])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54757 54761]))                          )
                        (reparse-symbol indented_block_body) [54744 54816])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54832 54836]))                          )
                        (reparse-symbol indented_block_body) [54821 54875])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [54879 54920])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54935 54939])
                            ("child" variable nil (reparse-symbol function_parameters) [54941 54946]))                          )
                        (reparse-symbol indented_block_body) [54926 55451])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55676 55680])
                            ("child" variable nil (reparse-symbol function_parameters) [55682 55687]))                          
                        :documentation "
        Replace the current child of this transform with another one.

        The new child must have the same number of input and output
        dimensions as the current child.
        ")
                        (reparse-symbol indented_block_body) [55668 56310])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56334 56338]))                          )
                        (reparse-symbol indented_block_body) [56315 56378])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [56382 56418])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56446 56450]))                          )
                        (reparse-symbol indented_block_body) [56424 56493])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [56497 56539])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56566 56570]))                          )
                        (reparse-symbol indented_block_body) [56545 56612])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [56616 56656]))                  
                :type "class")
                nil [52491 56657])
            ("AffineBase" type
               (:documentation "
    The base class of all affine transformations of any number of
    dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("is_affine" variable nil (reparse-symbol indented_block_body) [56790 56806])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [56857 56898])
                            ("self" variable nil (reparse-symbol indented_block_body) [56907 56928]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56825 56829])
                            ("args" variable nil (reparse-symbol function_parameters) [56831 56836])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56838 56846]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56812 56929])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56948 56952])
                            ("args" variable nil (reparse-symbol function_parameters) [56954 56959])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56961 56969]))                          )
                        (reparse-symbol indented_block_body) [56934 57078])
                    ("_concat" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [57113 57114])
                            ("b" variable nil (reparse-symbol function_parameters) [57116 57117]))                          
                        :documentation "
        Concatenates two transformation matrices (represented as numpy
        arrays) together.
        ")
                        (reparse-symbol indented_block_body) [57083 57269])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57285 57289])
                            ("other" variable nil (reparse-symbol function_parameters) [57291 57296]))                          )
                        (reparse-symbol indented_block_body) [57274 57443])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57462 57466])
                            ("values" variable nil (reparse-symbol function_parameters) [57468 57474]))                          )
                        (reparse-symbol indented_block_body) [57448 57522])
                    ("transform" variable nil (reparse-symbol indented_block_body) [57526 57573])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57600 57604])
                            ("values" variable nil (reparse-symbol function_parameters) [57606 57612]))                          )
                        (reparse-symbol indented_block_body) [57579 57736])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [57740 57801])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57832 57836])
                            ("points" variable nil (reparse-symbol function_parameters) [57838 57844]))                          )
                        (reparse-symbol indented_block_body) [57807 57869])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [57873 57942])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57967 57971])
                            ("path" variable nil (reparse-symbol function_parameters) [57973 57977]))                          )
                        (reparse-symbol indented_block_body) [57948 58028])
                    ("transform_path" variable nil (reparse-symbol indented_block_body) [58032 58089])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58121 58125])
                            ("path" variable nil (reparse-symbol function_parameters) [58127 58131]))                          )
                        (reparse-symbol indented_block_body) [58095 58251])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [58255 58326])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58362 58366])
                            ("path" variable nil (reparse-symbol function_parameters) [58368 58372]))                          )
                        (reparse-symbol indented_block_body) [58332 58395])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [58399 58478])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58499 58503]))                          )
                        (reparse-symbol indented_block_body) [58484 58526])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [58530 58579]))                  
                :type "class")
                nil [56659 58580])
            ("Affine2DBase" type
               (:documentation "
    The base class of all 2D affine transformations.

    2D affine transformations are performed using a 3x3 numpy array::

        a c e
        b d f
        0 0 1

    This class provides the read-only interface.  For a mutable 2D
    affine transformation, use :class:`Affine2D`.

    Subclasses of this class will generally only need to override a
    constructor and :meth:`get_matrix` that generates a custom 3x3 matrix.
    "
                :superclasses ("AffineBase")
                :members 
                  ( ("has_inverse" variable nil (reparse-symbol indented_block_body) [59063 59081])
                    ("input_dims" variable nil (reparse-symbol indented_block_body) [59087 59101])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [59106 59121])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59138 59142]))                          )
                        (reparse-symbol indented_block_body) [59127 59195])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [59199 59241])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59269 59273]))                          )
                        (reparse-symbol indented_block_body) [59247 59361])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [59365 59407])
                    ("to_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59427 59431]))                          
                        :documentation "
        Return the values of the matrix as a sequence (a,b,c,d,e,f)
        ")
                        (reparse-symbol indented_block_body) [59413 59613])
                    ("matrix_from_values" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [59659 59660])
                            ("b" variable nil (reparse-symbol function_parameters) [59662 59663])
                            ("c" variable nil (reparse-symbol function_parameters) [59665 59666])
                            ("d" variable nil (reparse-symbol function_parameters) [59668 59669])
                            ("e" variable nil (reparse-symbol function_parameters) [59671 59672])
                            ("f" variable nil (reparse-symbol function_parameters) [59674 59675]))                          
                        :documentation "
        (staticmethod) Create a new transformation matrix as a 3x3
        numpy array of the form::

          a c e
          b d f
          0 0 1
        ")
                        (reparse-symbol indented_block_body) [59618 59928])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59954 59958])
                            ("points" variable nil (reparse-symbol function_parameters) [59960 59966]))                          )
                        (reparse-symbol indented_block_body) [59933 60215])
                    ("transform_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60240 60244])
                            ("point" variable nil (reparse-symbol function_parameters) [60246 60251]))                          )
                        (reparse-symbol indented_block_body) [60220 60335])
                    ("transform_point" variable nil (reparse-symbol indented_block_body) [60339 60399])
                    ("if" code nil (reparse-symbol indented_block_body) [60405 61052])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [61056 61118])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61137 61141]))                          )
                        (reparse-symbol indented_block_body) [61124 61507])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [61511 61557]))                  
                :type "class")
                nil [58582 61558])
            ("Affine2D" type
               (:documentation "
    A mutable 2D affine transformation.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        \"\"\"" code nil (reparse-symbol indented_block_body) [61702 61906])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [61915 61952])
                            ("if" code nil (reparse-symbol indented_block_body) [61961 62129])
                            ("self" variable nil (reparse-symbol indented_block_body) [62137 62155])
                            ("self" variable nil (reparse-symbol indented_block_body) [62164 62181]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61664 61668])
                            ("matrix" variable nil (reparse-symbol function_parameters) [61670 61676])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [61683 61691]))                          
                        :documentation "
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61651 62182])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62200 62204]))                          )
                        (reparse-symbol indented_block_body) [62187 62255])
                    ("from_values" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [62524 62525])
                            ("b" variable nil (reparse-symbol function_parameters) [62527 62528])
                            ("c" variable nil (reparse-symbol function_parameters) [62530 62531])
                            ("d" variable nil (reparse-symbol function_parameters) [62533 62534])
                            ("e" variable nil (reparse-symbol function_parameters) [62536 62537])
                            ("f" variable nil (reparse-symbol function_parameters) [62539 62540]))                          
                        :documentation "
        (staticmethod) Create a new Affine2D instance from the given
        values::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [62490 62835])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62855 62859]))                          
                        :documentation "
        Get the underlying transformation matrix as a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [62840 63069])
                    ("set_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63089 63093])
                            ("mtx" variable nil (reparse-symbol function_parameters) [63095 63098]))                          
                        :documentation "
        Set the underlying transformation matrix from a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        .
        ")
                        (reparse-symbol indented_block_body) [63074 63309])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63322 63326])
                            ("other" variable nil (reparse-symbol function_parameters) [63328 63333]))                          
                        :documentation "
        Set this transformation from the frozen copy of another
        :class:`Affine2DBase` object.
        ")
                        (reparse-symbol indented_block_body) [63314 63720])
                    ("identity" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Return a new :class:`Affine2D` object that is
        the identity transform.

        Unless this transform will be mutated later on, consider using
        the faster :class:`IdentityTransform` class instead.
        ")
                        (reparse-symbol indented_block_body) [63725 64057])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64072 64076]))                          
                        :documentation "
        Reset the underlying matrix to the identity transform.
        ")
                        (reparse-symbol indented_block_body) [64062 64247])
                    ("rotate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64263 64267])
                            ("theta" variable nil (reparse-symbol function_parameters) [64269 64274]))                          
                        :documentation "
        Add a rotation (in radians) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [64252 64795])
                    ("rotate_deg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64815 64819])
                            ("degrees" variable nil (reparse-symbol function_parameters) [64821 64828]))                          
                        :documentation "
        Add a rotation (in degrees) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [64800 65140])
                    ("rotate_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65163 65167])
                            ("x" variable nil (reparse-symbol function_parameters) [65169 65170])
                            ("y" variable nil (reparse-symbol function_parameters) [65172 65173])
                            ("theta" variable nil (reparse-symbol function_parameters) [65175 65180]))                          
                        :documentation "
        Add a rotation (in radians) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [65145 65515])
                    ("rotate_deg_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65542 65546])
                            ("x" variable nil (reparse-symbol function_parameters) [65548 65549])
                            ("y" variable nil (reparse-symbol function_parameters) [65551 65552])
                            ("degrees" variable nil (reparse-symbol function_parameters) [65554 65561]))                          
                        :documentation "
        Add a rotation (in degrees) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [65520 65902])
                    ("translate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65921 65925])
                            ("tx" variable nil (reparse-symbol function_parameters) [65927 65929])
                            ("ty" variable nil (reparse-symbol function_parameters) [65931 65933]))                          
                        :documentation "
        Adds a translation in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [65907 66386])
                    ("scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66401 66405])
                            ("sx" variable nil (reparse-symbol function_parameters) [66407 66409])
                            ("sy" variable nil (reparse-symbol function_parameters) [66411 66413]))                          
                        :documentation "
        Adds a scale in place.

        If *sy* is None, the same scale is applied in both the *x*- and
        *y*-directions.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [66391 66997])
                    ("skew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67011 67015])
                            ("xShear" variable nil (reparse-symbol function_parameters) [67017 67023])
                            ("yShear" variable nil (reparse-symbol function_parameters) [67025 67031]))                          
                        :documentation "
        Adds a skew in place.

        *xShear* and *yShear* are the shear angles along the *x*- and
        *y*-axes, respectively, in radians.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [67002 67654])
                    ("skew_deg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67672 67676])
                            ("xShear" variable nil (reparse-symbol function_parameters) [67678 67684])
                            ("yShear" variable nil (reparse-symbol function_parameters) [67686 67692]))                          
                        :documentation "
        Adds a skew in place.

        *xShear* and *yShear* are the shear angles along the *x*- and
        *y*-axes, respectively, in degrees.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [67659 68099])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68126 68130]))                          )
                        (reparse-symbol indented_block_body) [68104 68218])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [68222 68264]))                  
                :type "class")
                nil [61560 68265])
            ("IdentityTransform" type
               (:documentation "
    A special class that does one thing, the identity transform, in a
    fast way.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("_mtx" variable nil (reparse-symbol indented_block_body) [68410 68431])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68448 68452]))                          )
                        (reparse-symbol indented_block_body) [68437 68475])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [68479 68523])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68542 68546]))                          )
                        (reparse-symbol indented_block_body) [68529 68586])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68606 68610]))                          )
                        (reparse-symbol indented_block_body) [68591 68638])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [68642 68694])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68714 68718])
                            ("points" variable nil (reparse-symbol function_parameters) [68720 68726]))                          )
                        (reparse-symbol indented_block_body) [68700 68766])
                    ("transform" variable nil (reparse-symbol indented_block_body) [68770 68820])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [68826 68854])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [68859 68923])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [68929 68961])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [68966 69038])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69063 69067])
                            ("path" variable nil (reparse-symbol function_parameters) [69069 69073]))                          )
                        (reparse-symbol indented_block_body) [69044 69096])
                    ("transform_path" variable nil (reparse-symbol indented_block_body) [69100 69160])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [69166 69204])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [69209 69283])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [69289 69331])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [69336 69418])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69439 69443]))                          )
                        (reparse-symbol indented_block_body) [69424 69466])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [69470 69522])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [69528 69549])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [69554 69602]))                  
                :type "class")
                nil [68267 69603])
            ("BlendedGenericTransform" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This \"generic\" version can handle any given child transform in the
    *x*- and *y*-directions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [69885 69899])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [69904 69919])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [69924 69943])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [69948 69967])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [70037 70428])
                            ("Transform" code nil (reparse-symbol indented_block_body) [70478 70512])
                            ("self" variable nil (reparse-symbol indented_block_body) [70521 70542])
                            ("self" variable nil (reparse-symbol indented_block_body) [70551 70572])
                            ("self" code nil (reparse-symbol indented_block_body) [70581 70624])
                            ("self" variable nil (reparse-symbol indented_block_body) [70633 70652]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69986 69990])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [69992 70003])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [70005 70016])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [70018 70026]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [69973 70653])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70669 70673])
                            ("other" variable nil (reparse-symbol function_parameters) [70675 70680]))                          )
                        (reparse-symbol indented_block_body) [70658 71005])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71041 71045])
                            ("transform" variable nil (reparse-symbol function_parameters) [71047 71056]))                          )
                        (reparse-symbol indented_block_body) [71010 71229])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71258 71262]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [71234 71316])
                    ("contains_branch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71341 71345])
                            ("other" variable nil (reparse-symbol function_parameters) [71347 71352]))                          )
                        (reparse-symbol indented_block_body) [71321 71470])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71494 71498]))                          )
                        (reparse-symbol indented_block_body) [71475 71556])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [71560 71596])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71623 71627]))                          )
                        (reparse-symbol indented_block_body) [71602 71689])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [71693 71733])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71750 71754]))                          )
                        (reparse-symbol indented_block_body) [71739 71834])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [71838 71879])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71898 71902]))                          )
                        (reparse-symbol indented_block_body) [71885 71974])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72004 72008])
                            ("points" variable nil (reparse-symbol function_parameters) [72010 72016]))                          )
                        (reparse-symbol indented_block_body) [71979 72898])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [72902 72971])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72990 72994]))                          )
                        (reparse-symbol indented_block_body) [72977 73076])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [73080 73125])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73146 73150]))                          )
                        (reparse-symbol indented_block_body) [73131 73772])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [73776 73825]))                  
                :type "class")
                nil [69605 73826])
            ("BlendedAffine2D" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This version is an optimization for the case where both child
    transforms are of type :class:`Affine2DBase`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [74119 74138])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine
        transforms.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [74208 74683])
                            ("is_affine" code nil (reparse-symbol indented_block_body) [74692 74751])
                            ("is_separable" code nil (reparse-symbol indented_block_body) [74760 74828])
                            ("is_correct" code nil (reparse-symbol indented_block_body) [74837 74876])
                            ("if" code nil (reparse-symbol indented_block_body) [74885 75049])
                            ("Transform" code nil (reparse-symbol indented_block_body) [75058 75092])
                            ("self" variable nil (reparse-symbol indented_block_body) [75101 75122])
                            ("self" variable nil (reparse-symbol indented_block_body) [75131 75152])
                            ("self" code nil (reparse-symbol indented_block_body) [75161 75204])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [75214 75241])
                            ("self" variable nil (reparse-symbol indented_block_body) [75250 75266]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74157 74161])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [74163 74174])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [74176 74187])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [74189 74197]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine
        transforms.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74144 75267])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75283 75287])
                            ("other" variable nil (reparse-symbol function_parameters) [75289 75294]))                          )
                        (reparse-symbol indented_block_body) [75272 75627])
                    ("contains_branch_seperately" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75663 75667])
                            ("transform" variable nil (reparse-symbol function_parameters) [75669 75678]))                          )
                        (reparse-symbol indented_block_body) [75632 75852])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75870 75874]))                          )
                        (reparse-symbol indented_block_body) [75857 75938])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75958 75962]))                          )
                        (reparse-symbol indented_block_body) [75943 76523])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [76527 76579]))                  
                :type "class")
                nil [73828 76580])
            ("blended_transform_factory" function
               (:documentation "
    Create a new \"blended\" transform using *x_transform* to transform
    the *x*-axis and *y_transform* to transform the *y*-axis.

    A faster version of the blended transform is returned for the case
    where both child transforms are affine.
    "
                :arguments 
                  ( ("x_transform" variable nil (reparse-symbol function_parameters) [76612 76623])
                    ("y_transform" variable nil (reparse-symbol function_parameters) [76625 76636]))                  )
                nil [76582 77119])
            ("CompositeGenericTransform" type
               (:documentation "
    A composite transform formed by applying transform *a* then
    transform *b*.

    This \"generic\" version can handle any two arbitrary
    transformations.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [77346 77365])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [77415 77785])
                            ("if" code nil (reparse-symbol indented_block_body) [77794 77979])
                            ("self" variable nil (reparse-symbol indented_block_body) [77987 78017])
                            ("self" variable nil (reparse-symbol indented_block_body) [78026 78058])
                            ("Transform" code nil (reparse-symbol indented_block_body) [78068 78102])
                            ("self" variable nil (reparse-symbol indented_block_body) [78111 78122])
                            ("self" variable nil (reparse-symbol indented_block_body) [78131 78142])
                            ("self" code nil (reparse-symbol indented_block_body) [78151 78174]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77384 77388])
                            ("a" variable nil (reparse-symbol function_parameters) [77390 77391])
                            ("b" variable nil (reparse-symbol function_parameters) [77393 77394])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [77396 77404]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [77371 78175])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [78180 78254])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78271 78275]))                          )
                        (reparse-symbol indented_block_body) [78260 78504])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [78508 78549])
                    ("_invalidate_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78580 78584])
                            ("value" variable nil (reparse-symbol function_parameters) [78586 78591])
                            ("invalidating_node" variable nil (reparse-symbol function_parameters) [78593 78610]))                          )
                        (reparse-symbol indented_block_body) [78555 79314])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79330 79334])
                            ("other" variable nil (reparse-symbol function_parameters) [79336 79341]))                          )
                        (reparse-symbol indented_block_body) [79319 79543])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79583 79587]))                          )
                        (reparse-symbol indented_block_body) [79548 79876])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79905 79909]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [79881 79957])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79981 79985]))                          )
                        (reparse-symbol indented_block_body) [79962 80043])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [80047 80083])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80111 80115]))                          )
                        (reparse-symbol indented_block_body) [80089 80179])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [80183 80225])
                    ("if" code nil (reparse-symbol indented_block_body) [80231 80319])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80337 80341]))                          )
                        (reparse-symbol indented_block_body) [80324 80416])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80442 80446])
                            ("points" variable nil (reparse-symbol function_parameters) [80448 80454]))                          )
                        (reparse-symbol indented_block_body) [80421 80508])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [80512 80573])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80604 80608])
                            ("points" variable nil (reparse-symbol function_parameters) [80610 80616]))                          )
                        (reparse-symbol indented_block_body) [80579 80933])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [80937 81006])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81042 81046])
                            ("path" variable nil (reparse-symbol function_parameters) [81048 81052]))                          )
                        (reparse-symbol indented_block_body) [81012 81382])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [81386 81465])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81486 81490]))                          )
                        (reparse-symbol indented_block_body) [81471 81719])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [81723 81772])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81791 81795]))                          )
                        (reparse-symbol indented_block_body) [81778 81879])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [81883 81928])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81955 81959]))                          )
                        (reparse-symbol indented_block_body) [81934 82021])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [82025 82065]))                  
                :type "class")
                nil [77121 82066])
            ("CompositeAffine2D" type
               (:documentation "
    A composite transform formed by applying transform *a* then transform *b*.

    This version is an optimization that handles the case where both *a*
    and *b* are 2D affines.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        Both *a* and *b* must be instances of :class:`Affine2DBase`.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [82352 82792])
                            ("if" code nil (reparse-symbol indented_block_body) [82801 82910])
                            ("if" code nil (reparse-symbol indented_block_body) [82918 83103])
                            ("self" variable nil (reparse-symbol indented_block_body) [83111 83141])
                            ("self" variable nil (reparse-symbol indented_block_body) [83150 83182])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [83192 83229])
                            ("self" variable nil (reparse-symbol indented_block_body) [83238 83249])
                            ("self" variable nil (reparse-symbol indented_block_body) [83258 83269])
                            ("self" code nil (reparse-symbol indented_block_body) [83278 83301])
                            ("self" variable nil (reparse-symbol indented_block_body) [83310 83326]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82321 82325])
                            ("a" variable nil (reparse-symbol function_parameters) [82327 82328])
                            ("b" variable nil (reparse-symbol function_parameters) [82330 82331])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [82333 82341]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        Both *a* and *b* must be instances of :class:`Affine2DBase`.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [82308 83327])
                    ("if" code nil (reparse-symbol indented_block_body) [83332 83420])
                    ("depth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83449 83453]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [83425 83501])
                    ("_iter_break_from_left_to_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83541 83545]))                          )
                        (reparse-symbol indented_block_body) [83506 83834])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83852 83856]))                          )
                        (reparse-symbol indented_block_body) [83839 83923])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83943 83947]))                          )
                        (reparse-symbol indented_block_body) [83928 84173])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [84177 84229]))                  
                :type "class")
                nil [82068 84230])
            ("composite_transform_factory" function
               (:documentation "
    Create a new composite transform that is the result of applying
    transform a then transform b.

    Shortcut versions of the blended transform are provided for the
    case where both child transforms are affine, or one or the other
    is the identity transform.

    Composite transforms may also be created using the '+' operator,
    e.g.::

      c = a + b
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [84264 84265])
                    ("b" variable nil (reparse-symbol function_parameters) [84267 84268]))                  )
                nil [84232 85163])
            ("BboxTransform" type
               (:documentation "
    :class:`BboxTransform` linearly transforms points from one
    :class:`Bbox` to another :class:`Bbox`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [85327 85346])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [85405 85530])
                            ("if" code nil (reparse-symbol indented_block_body) [85539 85671])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [85680 85717])
                            ("self" variable nil (reparse-symbol indented_block_body) [85726 85745])
                            ("self" variable nil (reparse-symbol indented_block_body) [85754 85775])
                            ("self" code nil (reparse-symbol indented_block_body) [85784 85816])
                            ("self" variable nil (reparse-symbol indented_block_body) [85825 85841])
                            ("self" variable nil (reparse-symbol indented_block_body) [85850 85871]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85365 85369])
                            ("boxin" variable nil (reparse-symbol function_parameters) [85371 85376])
                            ("boxout" variable nil (reparse-symbol function_parameters) [85378 85384])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [85386 85394]))                          
                        :documentation "
        Create a new :class:`BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [85352 85872])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85890 85894]))                          )
                        (reparse-symbol indented_block_body) [85877 85966])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85986 85990]))                          )
                        (reparse-symbol indented_block_body) [85971 86690])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [86694 86746]))                  
                :type "class")
                nil [85165 86747])
            ("BboxTransformTo" type
               (:documentation "
    :class:`BboxTransformTo` is a transformation that linearly
    transforms points from the unit bounding box to a given
    :class:`Bbox`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [86948 86967])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [87019 87160])
                            ("if" code nil (reparse-symbol indented_block_body) [87169 87246])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [87255 87292])
                            ("self" variable nil (reparse-symbol indented_block_body) [87301 87322])
                            ("self" code nil (reparse-symbol indented_block_body) [87331 87356])
                            ("self" variable nil (reparse-symbol indented_block_body) [87365 87381])
                            ("self" variable nil (reparse-symbol indented_block_body) [87390 87411]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86986 86990])
                            ("boxout" variable nil (reparse-symbol function_parameters) [86992 86998])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [87000 87008]))                          
                        :documentation "
        Create a new :class:`BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [86973 87412])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87430 87434]))                          )
                        (reparse-symbol indented_block_body) [87417 87491])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87511 87515]))                          )
                        (reparse-symbol indented_block_body) [87496 88028])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [88032 88084]))                  
                :type "class")
                nil [86749 88085])
            ("BboxTransformToMaxOnly" type
               (:documentation "
    :class:`BboxTransformTo` is a transformation that linearly
    transforms points from the unit bounding box to a given
    :class:`Bbox` with a fixed upper left of (0, 0).
    "
                :superclasses ("BboxTransformTo")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88343 88347]))                          )
                        (reparse-symbol indented_block_body) [88330 88411])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88431 88435]))                          )
                        (reparse-symbol indented_block_body) [88416 88927])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [88931 88983]))                  
                :type "class")
                nil [88087 88984])
            ("BboxTransformFrom" type
               (:documentation "
    :class:`BboxTransformFrom` linearly transforms points from a given
    :class:`Bbox` to the unit bounding box.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [89160 89179])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [89230 89305])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [89314 89351])
                            ("self" variable nil (reparse-symbol indented_block_body) [89360 89379])
                            ("self" code nil (reparse-symbol indented_block_body) [89388 89412])
                            ("self" variable nil (reparse-symbol indented_block_body) [89421 89437])
                            ("self" variable nil (reparse-symbol indented_block_body) [89446 89467]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89198 89202])
                            ("boxin" variable nil (reparse-symbol function_parameters) [89204 89209])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [89211 89219]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [89185 89468])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89486 89490]))                          )
                        (reparse-symbol indented_block_body) [89473 89548])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89568 89572]))                          )
                        (reparse-symbol indented_block_body) [89553 90189])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [90193 90245]))                  
                :type "class")
                nil [88986 90246])
            ("ScaledTranslation" type
               (:documentation "
    A transformation that translates by *xt* and *yt*, after *xt* and *yt*
    have been transformad by the given transform *scale_trans*.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Affine2DBase" code nil (reparse-symbol indented_block_body) [90505 90542])
                            ("self" variable nil (reparse-symbol indented_block_body) [90551 90569])
                            ("self" variable nil (reparse-symbol indented_block_body) [90578 90609])
                            ("self" code nil (reparse-symbol indented_block_body) [90618 90648])
                            ("self" variable nil (reparse-symbol indented_block_body) [90657 90673])
                            ("self" variable nil (reparse-symbol indented_block_body) [90682 90703]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90459 90463])
                            ("xt" variable nil (reparse-symbol function_parameters) [90465 90467])
                            ("yt" variable nil (reparse-symbol function_parameters) [90469 90471])
                            ("scale_trans" variable nil (reparse-symbol function_parameters) [90473 90484])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [90486 90494]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [90446 90704])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90722 90726]))                          )
                        (reparse-symbol indented_block_body) [90709 90781])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90801 90805]))                          )
                        (reparse-symbol indented_block_body) [90786 91186])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [91190 91242]))                  
                :type "class")
                nil [90248 91243])
            ("TransformedPath" type
               (:documentation "
    A :class:`TransformedPath` caches a non-affine transformed copy of
    the :class:`~matplotlib.path.Path`.  This cached copy is
    automatically updated when the non-affine part of the transform
    changes.

    .. note::

        Paths are considered immutable by this class. Any update to the
        path's vertices/codes will not trigger a transform recomputation.

    "
                :superclasses ("TransformNode")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`TransformedPath` from the given
        :class:`~matplotlib.path.Path` and :class:`Transform`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [91724 91863])
                            ("if" code nil (reparse-symbol indented_block_body) [91872 92059])
                            ("TransformNode" code nil (reparse-symbol indented_block_body) [92067 92095])
                            ("self" variable nil (reparse-symbol indented_block_body) [92105 92122])
                            ("self" variable nil (reparse-symbol indented_block_body) [92131 92158])
                            ("self" code nil (reparse-symbol indented_block_body) [92167 92195])
                            ("self" variable nil (reparse-symbol indented_block_body) [92204 92233])
                            ("self" variable nil (reparse-symbol indented_block_body) [92242 92273]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91692 91696])
                            ("path" variable nil (reparse-symbol function_parameters) [91698 91702])
                            ("transform" variable nil (reparse-symbol function_parameters) [91704 91713]))                          
                        :documentation "
        Create a new :class:`TransformedPath` from the given
        :class:`~matplotlib.path.Path` and :class:`Transform`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91679 92274])
                    ("_revalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92295 92299]))                          )
                        (reparse-symbol indented_block_body) [92279 92998])
                    ("get_transformed_points_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93041 93045]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.  Unlike
        :meth:`get_transformed_path_and_affine`, no interpolation will
        be performed.
        ")
                        (reparse-symbol indented_block_body) [93003 93456])
                    ("get_transformed_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93497 93501]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.
        ")
                        (reparse-symbol indented_block_body) [93461 93809])
                    ("get_fully_transformed_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93845 93849]))                          
                        :documentation "
        Return a fully-transformed copy of the child path.
        ")
                        (reparse-symbol indented_block_body) [93814 94039])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94059 94063]))                          )
                        (reparse-symbol indented_block_body) [94044 94110]))                  
                :type "class")
                nil [91245 94110])
            ("nonsingular" function (:arguments 
              ( ("vmin" variable nil (reparse-symbol function_parameters) [94128 94132])
                ("vmax" variable nil (reparse-symbol function_parameters) [94134 94138])
                ("expander" variable nil (reparse-symbol function_parameters) [94140 94148])
                ("tiny" variable nil (reparse-symbol function_parameters) [94156 94160])
                ("increasing" variable nil (reparse-symbol function_parameters) [94168 94178]))              ) nil [94112 95737])
            ("interval_contains" function (:arguments 
              ( ("interval" variable nil (reparse-symbol function_parameters) [95761 95769])
                ("val" variable nil (reparse-symbol function_parameters) [95771 95774]))              ) nil [95739 95892])
            ("interval_contains_open" function (:arguments 
              ( ("interval" variable nil (reparse-symbol function_parameters) [95920 95928])
                ("val" variable nil (reparse-symbol function_parameters) [95930 95933]))              ) nil [95893 96047])
            ("offset_copy" function (:arguments 
              ( ("trans" variable nil (reparse-symbol function_parameters) [96064 96069])
                ("fig" variable nil (reparse-symbol function_parameters) [96071 96074])
                ("x" variable nil (reparse-symbol function_parameters) [96081 96082])
                ("y" variable nil (reparse-symbol function_parameters) [96088 96089])
                ("units" variable nil (reparse-symbol function_parameters) [96095 96100]))              ) nil [96048 96777]))          
      :file "transforms.py"
      :pointmax 96777
      :fsize 96776
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 1659 . 1663) (PERIOD 1664 . 1665) (FROM 1639 . 1643) (PERIOD 1644 . 1645)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Manage figures for pyplot interface.
\"\"\"" code nil nil [1 45])
            ("" code nil nil [69 154])
            ("six" include nil nil [156 166])
            ("sys" include nil nil [167 177])
            ("gc" include nil nil [178 187])
            ("atexit" include nil nil [188 201])
            ("error_msg" function (:arguments 
              ( ("msg" variable nil (reparse-symbol function_parameters) [218 221]))              ) nil [204 256])
            ("Gcf" type
               (:documentation "
    Singleton to manage a set of integer-numbered figures.

    This class is never instantiated; it consists of two class
    attributes (a list and a dictionary), and a set of static
    methods that operate on those attributes, accessing them
    directly as class attributes.

    Attributes:

        *figs*:
          dictionary of the form {*num*: *manager*, ...}

        *_activeQue*:
          list of *managers*, with active one at the end

    "
                :superclasses ("object")
                :members 
                  ( ("_activeQue" variable nil (reparse-symbol indented_block_body) [749 764])
                    ("figs" variable nil (reparse-symbol indented_block_body) [769 778])
                    ("get_fig_manager" function
                       (:documentation "
        If figure manager *num* exists, make it the active
        figure and return the manager; otherwise return *None*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [821 824])
                            ("num" variable nil (reparse-symbol function_parameters) [826 829]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [784 1112])
                    ("destroy" function
                       (:documentation "
        Try to remove all traces of figure *num*.

        In the interactive backends, this is bound to the
        window \"destroy\" and \"delete\" events.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1146 1149])
                            ("num" variable nil (reparse-symbol function_parameters) [1151 1154]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1117 1827])
                    ("destroy_fig" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1865 1868])
                            ("fig" variable nil (reparse-symbol function_parameters) [1870 1873]))                          )
                        (reparse-symbol indented_block_body) [1832 2139])
                    ("destroy_all" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2177 2180]))                          )
                        (reparse-symbol indented_block_body) [2144 2568])
                    ("has_fignum" function
                       (:documentation "
        Return *True* if figure *num* exists.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2605 2608])
                            ("num" variable nil (reparse-symbol function_parameters) [2610 2613]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2573 2717])
                    ("get_all_fig_managers" function
                       (:documentation "
        Return a list of figure managers.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2764 2767]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2722 2875])
                    ("get_num_fig_managers" function
                       (:documentation "
        Return the number of figures being managed.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2922 2925]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2880 3033])
                    ("get_active" function
                       (:documentation "
        Return the manager of the active figure, or *None*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3070 3073]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3038 3273])
                    ("set_active" function
                       (:documentation "
        Make the figure corresponding to *manager* the active one.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3310 3313])
                            ("manager" variable nil (reparse-symbol function_parameters) [3315 3322]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3278 3653])
                    ("draw_all" function
                       (:documentation "
        Redraw all figures registered with the pyplot
        state machine.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3688 3691])
                            ("force" variable nil (reparse-symbol function_parameters) [3693 3698]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3658 3949]))                  
                :type "class")
                nil [258 3949])
            ("atexit" code nil nil [3950 3982]))          
      :file "_pylab_helpers.py"
      :pointmax 3983
      :fsize 3982
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module is to support *bbox_inches* option in savefig command.
\"\"\"" code nil nil [1 75])
            ("" code nil nil [100 185])
            ("six" include nil nil [187 197])
            ("warnings" include nil nil [199 214])
            ("matplotlib.transforms" include nil nil [215 280])
            ("adjust_bbox" function
               (:documentation "
    Temporarily adjust the figure so that only the specified area
    (bbox_inches) is saved.

    It modifies fig.bbox, fig.bbox_inches,
    fig.transFigure._boxout, and fig.patch.  While the figure size
    changes, the scale of the original figure is conserved.  A
    function which restores the original values are returned.
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [299 302])
                    ("bbox_inches" variable nil (reparse-symbol function_parameters) [304 315])
                    ("fixed_dpi" variable nil (reparse-symbol function_parameters) [317 326]))                  )
                nil [283 2203])
            ("process_figure_for_rasterizing" function
               (:documentation "
    This need to be called when figure dpi changes during the drawing
    (e.g., rasterizing). It recovers the bbox and re-adjust it with
    the new dpi.
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [2240 2243])
                    ("bbox_inches_restore" variable nil (reparse-symbol function_parameters) [2245 2264])
                    ("fixed_dpi" variable nil (reparse-symbol function_parameters) [2266 2275]))                  )
                nil [2205 2602]))          
      :file "tight_bbox.py"
      :pointmax 2602
      :fsize 2601
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [49 134])
            ("collections" include nil nil [136 171])
            ("six" include nil nil [173 183])
            ("six.moves" include nil nil [184 209])
            ("warnings" include nil nil [211 226])
            ("numpy" include nil nil [228 246])
            ("matplotlib.path" include nil nil [248 280])
            ("matplotlib" include nil nil [281 312])
            ("matplotlib.font_manager" include nil nil [313 359])
            ("matplotlib.ft2font" include nil nil [360 423])
            ("matplotlib.ft2font" include nil nil [424 472])
            ("matplotlib.mathtext" include nil nil [473 519])
            ("matplotlib.dviread" include nil nil [520 556])
            ("matplotlib.font_manager" include nil nil [557 617])
            ("matplotlib.transforms" include nil nil [618 660])
            ("six.moves.urllib.parse" include nil nil [661 717])
            ("TextToPath" type
               (:documentation "
    A class that convert a given text to a path using ttf fonts.
    "
                :superclasses ("object")
                :members 
                  ( ("FONT_SCALE" variable nil (reparse-symbol indented_block_body) [832 849])
                    ("DPI" variable nil (reparse-symbol indented_block_body) [854 862])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialization
        \"\"\"" code nil (reparse-symbol indented_block_body) [896 934])
                            ("self" variable nil (reparse-symbol indented_block_body) [943 988])
                            ("self" variable nil (reparse-symbol indented_block_body) [997 1021])
                            ("matplotlib.cbook" include nil (reparse-symbol indented_block_body) [1031 1067])
                            ("self" variable nil (reparse-symbol indented_block_body) [1076 1104])
                            ("self" variable nil (reparse-symbol indented_block_body) [1114 1137])
                            ("self" variable nil (reparse-symbol indented_block_body) [1147 1183]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [881 885]))                          
                        :documentation "
        Initialization
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [868 1184])
                    ("_get_adobe_standard_encoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1222 1226]))                          )
                        (reparse-symbol indented_block_body) [1189 1387])
                    ("_get_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1406 1410])
                            ("prop" variable nil (reparse-symbol function_parameters) [1412 1416]))                          
                        :documentation "
        find a ttf font.
        ")
                        (reparse-symbol indented_block_body) [1392 1613])
                    ("_get_hinting_flag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1640 1644]))                          )
                        (reparse-symbol indented_block_body) [1618 1678])
                    ("_get_char_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1700 1704])
                            ("font" variable nil (reparse-symbol function_parameters) [1706 1710])
                            ("ccode" variable nil (reparse-symbol function_parameters) [1712 1717]))                          
                        :documentation "
        Return a unique id for the given font and character-code set.
        ")
                        (reparse-symbol indented_block_body) [1683 2090])
                    ("_get_char_id_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2115 2119])
                            ("font" variable nil (reparse-symbol function_parameters) [2121 2125])
                            ("ccode" variable nil (reparse-symbol function_parameters) [2127 2132]))                          
                        :documentation "
        Return a unique id for the given font and character-code set (for tex).
        ")
                        (reparse-symbol indented_block_body) [2095 2366])
                    ("glyph_to_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2389 2393])
                            ("font" variable nil (reparse-symbol function_parameters) [2395 2399])
                            ("currx" variable nil (reparse-symbol function_parameters) [2401 2406]))                          
                        :documentation "
        convert the ft2font glyph to vertices and codes.
        ")
                        (reparse-symbol indented_block_body) [2371 2618])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2657 2661])
                            ("s" variable nil (reparse-symbol function_parameters) [2663 2664])
                            ("prop" variable nil (reparse-symbol function_parameters) [2666 2670])
                            ("ismath" variable nil (reparse-symbol function_parameters) [2672 2678]))                          )
                        (reparse-symbol indented_block_body) [2623 3657])
                    ("get_text_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3680 3684])
                            ("prop" variable nil (reparse-symbol function_parameters) [3686 3690])
                            ("s" variable nil (reparse-symbol function_parameters) [3692 3693])
                            ("ismath" variable nil (reparse-symbol function_parameters) [3695 3701])
                            ("usetex" variable nil (reparse-symbol function_parameters) [3709 3715]))                          
                        :documentation "
        convert text *s* to path (a tuple of vertices and codes for
        matplotlib.path.Path).

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. Effective only if usetex == False.


        ")
                        (reparse-symbol indented_block_body) [3662 5014])
                    ("get_glyphs_with_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5044 5048])
                            ("font" variable nil (reparse-symbol function_parameters) [5050 5054])
                            ("s" variable nil (reparse-symbol function_parameters) [5056 5057])
                            ("glyph_map" variable nil (reparse-symbol function_parameters) [5059 5068])
                            ("return_new_glyphs_only" variable nil (reparse-symbol function_parameters) [5104 5126]))                          
                        :documentation "
        convert the string *s* to vertices and codes using the
        provided ttf font.
        ")
                        (reparse-symbol indented_block_body) [5019 6680])
                    ("get_glyphs_mathtext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6709 6713])
                            ("prop" variable nil (reparse-symbol function_parameters) [6715 6719])
                            ("s" variable nil (reparse-symbol function_parameters) [6721 6722])
                            ("glyph_map" variable nil (reparse-symbol function_parameters) [6724 6733])
                            ("return_new_glyphs_only" variable nil (reparse-symbol function_parameters) [6768 6790]))                          
                        :documentation "
        convert the string *s* to vertices and codes by parsing it with
        mathtext.
        ")
                        (reparse-symbol indented_block_body) [6685 8425])
                    ("get_texmanager" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8449 8453]))                          
                        :documentation "
        return the :class:`matplotlib.texmanager.TexManager` instance
        ")
                        (reparse-symbol indented_block_body) [8430 8720])
                    ("get_glyphs_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8744 8748])
                            ("prop" variable nil (reparse-symbol function_parameters) [8750 8754])
                            ("s" variable nil (reparse-symbol function_parameters) [8756 8757])
                            ("glyph_map" variable nil (reparse-symbol function_parameters) [8759 8768])
                            ("return_new_glyphs_only" variable nil (reparse-symbol function_parameters) [8798 8820]))                          
                        :documentation "
        convert the string *s* to vertices and codes using matplotlib's usetex
        mode.
        ")
                        (reparse-symbol indented_block_body) [8725 13123]))                  
                :type "class")
                nil [720 13123])
            ("text_to_path" variable nil nil [13125 13152])
            ("TextPath" type
               (:documentation "
    Create a path from the text.
    "
                :superclasses ("Path")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a path from the text. No support for TeX yet. Note that
        it simply is a path, not an artist. You need to use the
        PathPatch (or other artists) to draw this path onto the
        canvas.

        xy : position of the text.
        s : text
        size : font size
        prop : font property
        \"\"\"" code nil (reparse-symbol indented_block_body) [13375 13712])
                            ("if" code nil (reparse-symbol indented_block_body) [13722 13775])
                            ("if" code nil (reparse-symbol indented_block_body) [13784 13846])
                            ("self" variable nil (reparse-symbol indented_block_body) [13855 13868])
                            ("self" code nil (reparse-symbol indented_block_body) [13877 13896])
                            ("self" variable nil (reparse-symbol indented_block_body) [13906 13934])
                            ("self, self" code nil (reparse-symbol indented_block_body) [13944 14115])
                            ("self" variable nil (reparse-symbol indented_block_body) [14125 14154])
                            ("self" variable nil (reparse-symbol indented_block_body) [14163 14225])
                            ("self" variable nil (reparse-symbol indented_block_body) [14234 14261])
                            ("self" variable nil (reparse-symbol indented_block_body) [14270 14318]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13244 13248])
                            ("xy" variable nil (reparse-symbol function_parameters) [13250 13252])
                            ("s" variable nil (reparse-symbol function_parameters) [13254 13255])
                            ("size" variable nil (reparse-symbol function_parameters) [13257 13261])
                            ("prop" variable nil (reparse-symbol function_parameters) [13268 13272])
                            ("_interpolation_steps" variable nil (reparse-symbol function_parameters) [13296 13316])
                            ("usetex" variable nil (reparse-symbol function_parameters) [13320 13326])
                            ("kl" variable nil (reparse-symbol function_parameters) [13351 13354])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13356 13364]))                          
                        :documentation "
        Create a path from the text. No support for TeX yet. Note that
        it simply is a path, not an artist. You need to use the
        PathPatch (or other artists) to draw this path onto the
        canvas.

        xy : position of the text.
        s : text
        size : font size
        prop : font property
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13231 14319])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14337 14341])
                            ("size" variable nil (reparse-symbol function_parameters) [14343 14347]))                          
                        :documentation "
        set the size of the text
        ")
                        (reparse-symbol indented_block_body) [14324 14462])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14480 14484]))                          
                        :documentation "
        get the size of the text
        ")
                        (reparse-symbol indented_block_body) [14467 14570])
                    ("_get_vertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14593 14597]))                          
                        :documentation "
        Return the cached path after updating it if necessary.
        ")
                        (reparse-symbol indented_block_body) [14575 14756])
                    ("_get_codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14776 14780]))                          
                        :documentation "
        Return the codes
        ")
                        (reparse-symbol indented_block_body) [14761 14859])
                    ("vertices" variable nil (reparse-symbol indented_block_body) [14864 14898])
                    ("codes" variable nil (reparse-symbol indented_block_body) [14903 14931])
                    ("_revalidate_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14958 14962]))                          
                        :documentation "
        update the path if necessary.

        The path for the text is initially create with the font size
        of FONT_SCALE, and this path is rescaled to other size when
        necessary.

        ")
                        (reparse-symbol indented_block_body) [14937 15531])
                    ("is_math_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15553 15557])
                            ("s" variable nil (reparse-symbol function_parameters) [15559 15560]))                          
                        :documentation "
        Returns True if the given string *s* contains any mathtext.
        ")
                        (reparse-symbol indented_block_body) [15536 16109])
                    ("text_get_vertices_codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16142 16146])
                            ("prop" variable nil (reparse-symbol function_parameters) [16148 16152])
                            ("s" variable nil (reparse-symbol function_parameters) [16154 16155])
                            ("usetex" variable nil (reparse-symbol function_parameters) [16157 16163]))                          
                        :documentation "
        convert the string *s* to vertices and codes using the
        provided font property *prop*. Mostly copied from
        backend_svg.py.
        ")
                        (reparse-symbol indented_block_body) [16114 16669]))                  
                :type "class")
                nil [13155 16669]))          
      :file "textpath.py"
      :pointmax 16669
      :fsize 16668
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Abstract base classes define the primitives for Tools.
These tools are used by `matplotlib.backend_managers.ToolManager`

:class:`ToolBase`
    Simple stateless tool

:class:`ToolToggleBase`
    Tool that has two states, only one Toggle tool can be
    active at any given time for the same
    `matplotlib.backend_managers.ToolManager`
\"\"\"" code nil nil [1 345])
            ("matplotlib" include nil nil [348 379])
            ("matplotlib._pylab_helpers" include nil nil [380 421])
            ("matplotlib.cbook" include nil nil [422 454])
            ("weakref" include nil nil [455 492])
            ("numpy" include nil nil [493 511])
            ("six" include nil nil [512 522])
            ("warnings" include nil nil [523 538])
            ("Cursors" type
               (:documentation "Simple namespace for cursor reference"
                :superclasses ("object")
                :members 
                  ( ("HAND, POINTER, SELECT_REGION, MOVE" code nil (reparse-symbol indented_block_body) [616 667]))                  
                :type "class")
                nil [541 668])
            ("cursors" variable nil nil [668 687])
            ("_views_positions" variable nil nil [712 740])
            ("ToolBase" type
               (:documentation "
    Base tool class

    A base tool, only implements `trigger` method or not method at all.
    The tool is instantiated by `matplotlib.backend_managers.ToolManager`

    Attributes
    ----------
    toolmanager: `matplotlib.backend_managers.ToolManager`
        ToolManager that controls this Tool
    figure: `FigureCanvas`
        Figure instance that is affected by this Tool
    name: String
        Used as **Id** of the tool, has to be unique among tools of the same
        ToolManager
    "
                :superclasses ("object")
                :members 
                  ( ("default_keymap" variable nil (reparse-symbol indented_block_body) [1284 1305])
                    ("\"\"\"
    Keymap to associate with this tool

    **String**: List of comma separated keys that will be used to call this
    tool when the keypress event of *self.figure.canvas* is emited
    \"\"\"" code nil (reparse-symbol indented_block_body) [1310 1504])
                    ("description" variable nil (reparse-symbol indented_block_body) [1510 1528])
                    ("\"\"\"
    Description of the Tool

    **String**: If the Tool is included in the Toolbar this text is used
    as a Tooltip
    \"\"\"" code nil (reparse-symbol indented_block_body) [1533 1663])
                    ("image" variable nil (reparse-symbol indented_block_body) [1669 1681])
                    ("\"\"\"
    Filename of the image

    **String**: Filename of the image to use in the toolbar. If None, the
    `name` is used as a label in the toolbar button
    \"\"\"" code nil (reparse-symbol indented_block_body) [1686 1850])
                    ("__init__" function
                       (:suite 
                          ( ("warnings" code nil (reparse-symbol indented_block_body) [1903 2122])
                            ("self" variable nil (reparse-symbol indented_block_body) [2131 2148])
                            ("self" variable nil (reparse-symbol indented_block_body) [2157 2176])
                            ("self" variable nil (reparse-symbol indented_block_body) [2185 2215])
                            ("self" variable nil (reparse-symbol indented_block_body) [2224 2263]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1869 1873])
                            ("toolmanager" variable nil (reparse-symbol function_parameters) [1875 1886])
                            ("name" variable nil (reparse-symbol function_parameters) [1888 1892]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1856 2264])
                    ("figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2269 2329])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2346 2350])
                            ("sender" variable nil (reparse-symbol function_parameters) [2352 2358])
                            ("event" variable nil (reparse-symbol function_parameters) [2360 2365])
                            ("data" variable nil (reparse-symbol function_parameters) [2367 2371]))                          
                        :documentation "
        Called when this tool gets used

        This method is called by
        `matplotlib.backend_managers.ToolManager.trigger_tool`

        Parameters
        ----------
        event: `Event`
            The Canvas event that caused this tool to be called
        sender: object
            Object that requested the tool to be triggered
        data: object
            Extra data
        ")
                        (reparse-symbol indented_block_body) [2334 2806])
                    ("figure" function
                       (:parent "dummy"
                        :decorators 
                          ( ("figure.setter" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2841 2845])
                            ("figure" variable nil (reparse-symbol function_parameters) [2847 2853]))                          
                        :documentation "
        Set the figure

        Set the figure to be affected by this tool

        Parameters
        ----------
        figure: `Figure`
        ")
                        (reparse-symbol indented_block_body) [2811 3050])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3078 3082]))                          
                        :documentation "Tool Id")
                        (reparse-symbol indented_block_body) [3055 3133])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3150 3154]))                          
                        :documentation "
        Destroy the tool

        This method is called when the tool is removed by
        `matplotlib.backend_managers.ToolManager.remove_tool`
        ")
                        (reparse-symbol indented_block_body) [3138 3340]))                  
                :type "class")
                nil [743 3340])
            ("ToolToggleBase" type
               (:documentation "
    Toggleable tool

    Every time it is triggered, it switches between enable and disable
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("radio_group" variable nil (reparse-symbol indented_block_body) [3487 3505])
                    ("\"\"\"Attribute to group 'radio' like tools (mutually exclusive)

    **String** that identifies the group or **None** if not belonging to a
    group
    \"\"\"" code nil (reparse-symbol indented_block_body) [3510 3665])
                    ("cursor" variable nil (reparse-symbol indented_block_body) [3671 3684])
                    ("\"\"\"Cursor to use when the tool is active\"\"\"" code nil (reparse-symbol indented_block_body) [3689 3732])
                    ("__init__" function
                       (:suite 
                          ( ("ToolBase" code nil (reparse-symbol indented_block_body) [3783 3823])
                            ("self" variable nil (reparse-symbol indented_block_body) [3832 3853]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3751 3755])
                            ("args" variable nil (reparse-symbol function_parameters) [3757 3762])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3764 3772]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3738 3854])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3871 3875])
                            ("sender" variable nil (reparse-symbol function_parameters) [3877 3883])
                            ("event" variable nil (reparse-symbol function_parameters) [3885 3890])
                            ("data" variable nil (reparse-symbol function_parameters) [3892 3896]))                          
                        :documentation "Calls `enable` or `disable` based on `toggled` value")
                        (reparse-symbol indented_block_body) [3859 4116])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4132 4136])
                            ("event" variable nil (reparse-symbol function_parameters) [4138 4143]))                          
                        :documentation "
        Enable the toggle tool

        `trigger` calls this method when `toggled` is False
        ")
                        (reparse-symbol indented_block_body) [4121 4281])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4298 4302])
                            ("event" variable nil (reparse-symbol function_parameters) [4304 4309]))                          
                        :documentation "
        Disable the toggle tool

        `trigger` call this method when `toggled` is True.

        This can happen in different circumstances

        * Click on the toolbar tool button
        * Call to `matplotlib.backend_managers.ToolManager.trigger_tool`
        * Another `ToolToggleBase` derived tool is triggered
          (from the same `ToolManager`)
        ")
                        (reparse-symbol indented_block_body) [4286 4717])
                    ("toggled" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4748 4752]))                          
                        :documentation "State of the toggled tool")
                        (reparse-symbol indented_block_body) [4722 4825]))                  
                :type "class")
                nil [3342 4825])
            ("SetCursorBase" type
               (:documentation "
    Change to the current cursor while inaxes

    This tool, keeps track of all `ToolToggleBase` derived tools, and calls
    set_cursor when a tool gets triggered
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("ToolBase" code nil (reparse-symbol indented_block_body) [5088 5128])
                            ("self" variable nil (reparse-symbol indented_block_body) [5137 5240])
                            ("self" variable nil (reparse-symbol indented_block_body) [5249 5268])
                            ("self" variable nil (reparse-symbol indented_block_body) [5277 5315])
                            ("self" variable nil (reparse-symbol indented_block_body) [5324 5364])
                            ("self" code nil (reparse-symbol indented_block_body) [5373 5494])
                            ("for" code nil (reparse-symbol indented_block_body) [5536 5614]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5056 5060])
                            ("args" variable nil (reparse-symbol function_parameters) [5062 5067])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5069 5077]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5043 5614])
                    ("_tool_trigger_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5641 5645])
                            ("event" variable nil (reparse-symbol function_parameters) [5647 5652]))                          )
                        (reparse-symbol indented_block_body) [5619 5826])
                    ("_add_tool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5845 5849])
                            ("tool" variable nil (reparse-symbol function_parameters) [5851 5855]))                          
                        :documentation "set the cursor when the tool is triggered")
                        (reparse-symbol indented_block_body) [5831 6121])
                    ("_add_tool_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6144 6148])
                            ("event" variable nil (reparse-symbol function_parameters) [6150 6155]))                          
                        :documentation "Process every newly added tool")
                        (reparse-symbol indented_block_body) [6126 6289])
                    ("_set_cursor_cbk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6314 6318])
                            ("event" variable nil (reparse-symbol function_parameters) [6320 6325]))                          )
                        (reparse-symbol indented_block_body) [6294 6806])
                    ("set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6826 6830])
                            ("cursor" variable nil (reparse-symbol function_parameters) [6832 6838]))                          
                        :documentation "
        Set the cursor

        This method has to be implemented per backend
        ")
                        (reparse-symbol indented_block_body) [6811 6977]))                  
                :type "class")
                nil [4827 6977])
            ("ToolCursorPosition" type
               (:documentation "
    Send message with the current pointer position

    This tool runs in the background reporting the position of the cursor
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("ToolBase" code nil (reparse-symbol indented_block_body) [7206 7246])
                            ("self" variable nil (reparse-symbol indented_block_body) [7255 7355]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7174 7178])
                            ("args" variable nil (reparse-symbol function_parameters) [7180 7185])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7187 7195]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7161 7356])
                    ("send_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7378 7382])
                            ("event" variable nil (reparse-symbol function_parameters) [7384 7389]))                          
                        :documentation "Call `matplotlib.backend_managers.ToolManager.message_event`")
                        (reparse-symbol indented_block_body) [7361 8323]))                  
                :type "class")
                nil [6979 8323])
            ("RubberbandBase" type
               (:documentation "Draw and remove rubberband"
                :superclasses ("ToolBase")
                :members 
                  ( ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8410 8414])
                            ("sender" variable nil (reparse-symbol function_parameters) [8416 8422])
                            ("event" variable nil (reparse-symbol function_parameters) [8424 8429])
                            ("data" variable nil (reparse-symbol function_parameters) [8431 8435]))                          
                        :documentation "Call `draw_rubberband` or `remove_rubberband` based on data")
                        (reparse-symbol indented_block_body) [8398 8715])
                    ("draw_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8740 8744])
                            ("data" variable nil (reparse-symbol function_parameters) [8746 8751]))                          
                        :documentation "
        Draw rubberband

        This method must get implemented per backend
        ")
                        (reparse-symbol indented_block_body) [8720 8890])
                    ("remove_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8917 8921]))                          
                        :documentation "
        Remove rubberband

        This method should get implemented per backend
        ")
                        (reparse-symbol indented_block_body) [8895 9043]))                  
                :type "class")
                nil [8325 9043])
            ("ToolQuit" type
               (:documentation "Tool to call the figure manager destroy method"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [9133 9164])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [9169 9209])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9227 9231])
                            ("sender" variable nil (reparse-symbol function_parameters) [9233 9239])
                            ("event" variable nil (reparse-symbol function_parameters) [9241 9246])
                            ("data" variable nil (reparse-symbol function_parameters) [9248 9252]))                          )
                        (reparse-symbol indented_block_body) [9215 9297]))                  
                :type "class")
                nil [9045 9297])
            ("ToolEnableAllNavigation" type
               (:documentation "Tool to enable all axes for toolmanager interaction"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [9407 9451])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [9456 9500])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9518 9522])
                            ("sender" variable nil (reparse-symbol function_parameters) [9524 9530])
                            ("event" variable nil (reparse-symbol function_parameters) [9532 9537])
                            ("data" variable nil (reparse-symbol function_parameters) [9539 9543]))                          )
                        (reparse-symbol indented_block_body) [9506 9785]))                  
                :type "class")
                nil [9299 9785])
            ("ToolEnableNavigation" type
               (:documentation "Tool to enable a specific axes for toolmanager interaction"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [9899 9943])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [9948 9992])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10010 10014])
                            ("sender" variable nil (reparse-symbol function_parameters) [10016 10022])
                            ("event" variable nil (reparse-symbol function_parameters) [10024 10029])
                            ("data" variable nil (reparse-symbol function_parameters) [10031 10035]))                          )
                        (reparse-symbol indented_block_body) [9998 10324]))                  
                :type "class")
                nil [9787 10324])
            ("ToolGrid" type
               (:documentation "Tool to toggle the grid of the figure"
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [10411 10438])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [10443 10483])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10501 10505])
                            ("sender" variable nil (reparse-symbol function_parameters) [10507 10513])
                            ("event" variable nil (reparse-symbol function_parameters) [10515 10520])
                            ("data" variable nil (reparse-symbol function_parameters) [10522 10526]))                          )
                        (reparse-symbol indented_block_body) [10489 10644])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10660 10664])
                            ("event" variable nil (reparse-symbol function_parameters) [10666 10671]))                          )
                        (reparse-symbol indented_block_body) [10649 10745])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10762 10766])
                            ("event" variable nil (reparse-symbol function_parameters) [10768 10773]))                          )
                        (reparse-symbol indented_block_body) [10750 10848]))                  
                :type "class")
                nil [10326 10848])
            ("ToolFullScreen" type
               (:documentation "Tool to toggle full screen"
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [10930 10968])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [10973 11019])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11036 11040])
                            ("event" variable nil (reparse-symbol function_parameters) [11042 11047]))                          )
                        (reparse-symbol indented_block_body) [11025 11106])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11123 11127])
                            ("event" variable nil (reparse-symbol function_parameters) [11129 11134]))                          )
                        (reparse-symbol indented_block_body) [11111 11193]))                  
                :type "class")
                nil [10850 11193])
            ("AxisScaleBase" type
               (:documentation "Base Tool to toggle between linear and logarithmic"
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11310 11314])
                            ("sender" variable nil (reparse-symbol function_parameters) [11316 11322])
                            ("event" variable nil (reparse-symbol function_parameters) [11324 11329])
                            ("data" variable nil (reparse-symbol function_parameters) [11331 11335]))                          )
                        (reparse-symbol indented_block_body) [11298 11453])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11469 11473])
                            ("event" variable nil (reparse-symbol function_parameters) [11475 11480]))                          )
                        (reparse-symbol indented_block_body) [11458 11566])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11583 11587])
                            ("event" variable nil (reparse-symbol function_parameters) [11589 11594]))                          )
                        (reparse-symbol indented_block_body) [11571 11683]))                  
                :type "class")
                nil [11195 11683])
            ("ToolYScale" type
               (:documentation "Tool to toggle between linear and logarithmic scales on the Y axis"
                :superclasses ("AxisScaleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [11800 11835])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [11840 11882])
                    ("set_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11902 11906])
                            ("ax" variable nil (reparse-symbol function_parameters) [11908 11910])
                            ("scale" variable nil (reparse-symbol function_parameters) [11912 11917]))                          )
                        (reparse-symbol indented_block_body) [11888 11949]))                  
                :type "class")
                nil [11685 11949])
            ("ToolXScale" type
               (:documentation "Tool to toggle between linear and logarithmic scales on the X axis"
                :superclasses ("AxisScaleBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [12066 12101])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [12106 12148])
                    ("set_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12168 12172])
                            ("ax" variable nil (reparse-symbol function_parameters) [12174 12176])
                            ("scale" variable nil (reparse-symbol function_parameters) [12178 12183]))                          )
                        (reparse-symbol indented_block_body) [12154 12215]))                  
                :type "class")
                nil [11951 12215])
            ("ToolViewsPositions" type
               (:documentation "
    Auxiliary Tool to handle changes in views and positions

    Runs in the background and should get used by all the tools that
    need to access the figure's history of views and positions, e.g.

    * `ToolZoom`
    * `ToolPan`
    * `ToolHome`
    * `ToolBack`
    * `ToolForward`
    "
                :superclasses ("ToolBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12606 12638])
                            ("self" variable nil (reparse-symbol indented_block_body) [12647 12683])
                            ("ToolBase" code nil (reparse-symbol indented_block_body) [12692 12732]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12574 12578])
                            ("args" variable nil (reparse-symbol function_parameters) [12580 12585])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12587 12595]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12561 12733])
                    ("add_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12753 12757]))                          
                        :documentation "Add the current figure to the stack of views and positions")
                        (reparse-symbol indented_block_body) [12738 13196])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13211 13215])
                            ("figure" variable nil (reparse-symbol function_parameters) [13217 13223]))                          
                        :documentation "Reset the axes stack")
                        (reparse-symbol indented_block_body) [13201 13376])
                    ("update_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13397 13401]))                          
                        :documentation "
        Update the viewlim and position from the view and
        position stack for each axes
        ")
                        (reparse-symbol indented_block_body) [13381 13988])
                    ("push_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14010 14014]))                          
                        :documentation "push the current view limits and position onto the stack")
                        (reparse-symbol indented_block_body) [13993 14473])
                    ("refresh_locators" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14499 14503]))                          
                        :documentation "Redraw the canvases, update the locators")
                        (reparse-symbol indented_block_body) [14478 15325])
                    ("home" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15339 15343]))                          
                        :documentation "Recall the first view and position from the stack")
                        (reparse-symbol indented_block_body) [15330 15492])
                    ("back" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15506 15510]))                          
                        :documentation "Back one step in the stack of views and positions")
                        (reparse-symbol indented_block_body) [15497 15659])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15676 15680]))                          
                        :documentation "Forward one step in the stack of views and positions")
                        (reparse-symbol indented_block_body) [15664 15838]))                  
                :type "class")
                nil [12217 15838])
            ("ViewsPositionsBase" type
               (:documentation "Base class for `ToolHome`, `ToolBack` and `ToolForward`"
                :superclasses ("ToolBase")
                :members 
                  ( ("_on_trigger" variable nil (reparse-symbol indented_block_body) [15947 15965])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15983 15987])
                            ("sender" variable nil (reparse-symbol function_parameters) [15989 15995])
                            ("event" variable nil (reparse-symbol function_parameters) [15997 16002])
                            ("data" variable nil (reparse-symbol function_parameters) [16004 16008]))                          )
                        (reparse-symbol indented_block_body) [15971 16244]))                  
                :type "class")
                nil [15840 16244])
            ("ToolHome" type
               (:documentation "Restore the original view lim"
                :superclasses ("ViewsPositionsBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [16327 16362])
                    ("image" variable nil (reparse-symbol indented_block_body) [16367 16385])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [16390 16430])
                    ("_on_trigger" variable nil (reparse-symbol indented_block_body) [16435 16455]))                  
                :type "class")
                nil [16246 16456])
            ("ToolBack" type
               (:documentation "Move back up the view lim stack"
                :superclasses ("ViewsPositionsBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [16541 16579])
                    ("image" variable nil (reparse-symbol indented_block_body) [16584 16602])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [16607 16647])
                    ("_on_trigger" variable nil (reparse-symbol indented_block_body) [16652 16672]))                  
                :type "class")
                nil [16458 16673])
            ("ToolForward" type
               (:documentation "Move forward in the view lim stack"
                :superclasses ("ViewsPositionsBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [16764 16800])
                    ("image" variable nil (reparse-symbol indented_block_body) [16805 16826])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [16831 16874])
                    ("_on_trigger" variable nil (reparse-symbol indented_block_body) [16879 16902]))                  
                :type "class")
                nil [16675 16903])
            ("ConfigureSubplotsBase" type
               (:documentation "Base tool for the configuration of subplots"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [17003 17037])
                    ("image" variable nil (reparse-symbol indented_block_body) [17042 17064]))                  
                :type "class")
                nil [16905 17065])
            ("SaveFigureBase" type
               (:documentation "Base tool for figure saving"
                :superclasses ("ToolBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [17142 17173])
                    ("image" variable nil (reparse-symbol indented_block_body) [17178 17200])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [17205 17245]))                  
                :type "class")
                nil [17067 17246])
            ("ZoomPanBase" type
               (:documentation "Base class for `ToolZoom` and `ToolPan`"
                :superclasses ("ToolToggleBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("ToolToggleBase" code nil (reparse-symbol indented_block_body) [17372 17408])
                            ("self" variable nil (reparse-symbol indented_block_body) [17417 17444])
                            ("self" variable nil (reparse-symbol indented_block_body) [17453 17473])
                            ("self" variable nil (reparse-symbol indented_block_body) [17482 17502])
                            ("self" variable nil (reparse-symbol indented_block_body) [17511 17533])
                            ("self" variable nil (reparse-symbol indented_block_body) [17542 17563])
                            ("self" variable nil (reparse-symbol indented_block_body) [17572 17592]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17350 17354])
                            ("args" variable nil (reparse-symbol function_parameters) [17356 17361]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17337 17593])
                    ("enable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17609 17613])
                            ("event" variable nil (reparse-symbol function_parameters) [17615 17620]))                          
                        :documentation "Connect press/release events and lock the canvas")
                        (reparse-symbol indented_block_body) [17598 18045])
                    ("disable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18062 18066])
                            ("event" variable nil (reparse-symbol function_parameters) [18068 18073]))                          
                        :documentation "Release the canvas and disconnect press/release events")
                        (reparse-symbol indented_block_body) [18050 18401])
                    ("trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18418 18422])
                            ("sender" variable nil (reparse-symbol function_parameters) [18424 18430])
                            ("event" variable nil (reparse-symbol function_parameters) [18432 18437])
                            ("data" variable nil (reparse-symbol function_parameters) [18439 18443]))                          )
                        (reparse-symbol indented_block_body) [18406 18574])
                    ("scroll_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18595 18599])
                            ("event" variable nil (reparse-symbol function_parameters) [18601 18606]))                          )
                        (reparse-symbol indented_block_body) [18579 19663]))                  
                :type "class")
                nil [17248 19663])
            ("ToolZoom" type
               (:documentation "Zoom to rectangle"
                :superclasses ("ZoomPanBase")
                :members 
                  ( ("description" variable nil (reparse-symbol indented_block_body) [19727 19760])
                    ("image" variable nil (reparse-symbol indented_block_body) [19765 19791])
                    ("default_keymap" variable nil (reparse-symbol indented_block_body) [19796 19836])
                    ("cursor" variable nil (reparse-symbol indented_block_body) [19841 19871])
                    ("radio_group" variable nil (reparse-symbol indented_block_body) [19876 19899])
                    ("__init__" function
                       (:suite 
                          ( ("ZoomPanBase" code nil (reparse-symbol indented_block_body) [19940 19973])
                            ("self" variable nil (reparse-symbol indented_block_body) [19982 20001]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19918 19922])
                            ("args" variable nil (reparse-symbol function_parameters) [19924 19929]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19905 20002])
                    ("_cancel_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20026 20030]))                          )
                        (reparse-symbol indented_block_body) [20007 20364])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20380 20384])
                            ("event" variable nil (reparse-symbol function_parameters) [20386 20391]))                          
                        :documentation "the _press mouse button in zoom to rect mode callback")
                        (reparse-symbol indented_block_body) [20369 21536])
                    ("_switch_on_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21566 21570])
                            ("event" variable nil (reparse-symbol function_parameters) [21572 21577]))                          )
                        (reparse-symbol indented_block_body) [21541 21648])
                    ("_switch_off_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21679 21683])
                            ("event" variable nil (reparse-symbol function_parameters) [21685 21690]))                          )
                        (reparse-symbol indented_block_body) [21653 21756])
                    ("_mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21777 21781])
                            ("event" variable nil (reparse-symbol function_parameters) [21783 21788]))                          
                        :documentation "the drag callback in zoom mode")
                        (reparse-symbol indented_block_body) [21761 22601])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22619 22623])
                            ("event" variable nil (reparse-symbol function_parameters) [22625 22630]))                          
                        :documentation "the release mouse button callback in zoom to rect mode")
                        (reparse-symbol indented_block_body) [22606 24083]))                  
                :type "class")
                nil [19665 24083])
            ("ToolPan" type
               (:documentation "Pan axes with left mouse, zoom with right"
                :superclasses ("ZoomPanBase")
                :members 
                  ( ("default_keymap" variable nil (reparse-symbol indented_block_body) [24170 24209])
                    ("description" variable nil (reparse-symbol indented_block_body) [24214 24271])
                    ("image" variable nil (reparse-symbol indented_block_body) [24276 24294])
                    ("cursor" variable nil (reparse-symbol indented_block_body) [24299 24320])
                    ("radio_group" variable nil (reparse-symbol indented_block_body) [24325 24348])
                    ("__init__" function
                       (:suite 
                          ( ("ZoomPanBase" code nil (reparse-symbol indented_block_body) [24389 24422])
                            ("self" variable nil (reparse-symbol indented_block_body) [24431 24450]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24367 24371])
                            ("args" variable nil (reparse-symbol function_parameters) [24373 24378]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24354 24451])
                    ("_cancel_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24475 24479]))                          )
                        (reparse-symbol indented_block_body) [24456 24723])
                    ("_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24739 24743])
                            ("event" variable nil (reparse-symbol function_parameters) [24745 24750]))                          )
                        (reparse-symbol indented_block_body) [24728 25468])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25486 25490])
                            ("event" variable nil (reparse-symbol function_parameters) [25492 25497]))                          )
                        (reparse-symbol indented_block_body) [25473 25946])
                    ("_mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25967 25971])
                            ("event" variable nil (reparse-symbol function_parameters) [25973 25978]))                          )
                        (reparse-symbol indented_block_body) [25951 26284]))                  
                :type "class")
                nil [24085 26284])
            ("default_tools" variable nil nil [26286 27019])
            ("\"\"\"Default tools\"\"\"" code nil nil [27020 27039])
            ("default_toolbar_tools" variable nil nil [27041 27220])
            ("\"\"\"Default tools in the toolbar\"\"\"" code nil nil [27221 27255])
            ("add_tools_to_manager" function
               (:documentation "
    Add multiple tools to `ToolManager`

    Parameters
    ----------
    toolmanager: ToolManager
        `backend_managers.ToolManager` object that will get the tools added
    tools : {str: class_like}, optional
        The tools to add in a {name: tool} dict, see `add_tool` for more
        info.
    "
                :arguments 
                  ( ("toolmanager" variable nil (reparse-symbol function_parameters) [27283 27294])
                    ("tools" variable nil (reparse-symbol function_parameters) [27296 27301]))                  )
                nil [27258 27723])
            ("add_tools_to_container" function
               (:documentation "
    Add multiple tools to the container.

    Parameters
    ----------
    container: Container
        `backend_bases.ToolContainerBase` object that will get the tools added
    tools : list, optional
        List in the form
        [[group1, [tool1, tool2 ...]], [group2, [...]]]
        Where the tools given by tool1, and tool2 will display in group1.
        See `add_tool` for details.
    "
                :arguments 
                  ( ("container" variable nil (reparse-symbol function_parameters) [27752 27761])
                    ("tools" variable nil (reparse-symbol function_parameters) [27763 27768]))                  )
                nil [27725 28347]))          
      :file "backend_tools.py"
      :pointmax 28347
      :fsize 28346
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This provides several classes used for blocking interaction with figure
windows:

:class:`BlockingInput`
    creates a callable object to retrieve events in a blocking way for
    interactive sessions

:class:`BlockingKeyMouseInput`
    creates a callable object to retrieve key or mouse clicks in a blocking
    way for interactive sessions.
    Note: Subclass of BlockingInput. Used by waitforbuttonpress

:class:`BlockingMouseInput`
    creates a callable object to retrieve mouse clicks in a blocking way for
    interactive sessions.
    Note: Subclass of BlockingInput.  Used by ginput

:class:`BlockingContourLabeler`
    creates a callable object to retrieve mouse clicks in a blocking way that
    will then be used to place labels on a ContourSet
    Note: Subclass of BlockingMouseInput.  Used by clabel
\"\"\"" code nil nil [1 823])
            ("" code nil nil [848 933])
            ("six" include nil nil [935 945])
            ("matplotlib" include nil nil [946 976])
            ("matplotlib.cbook" include nil nil [977 1028])
            ("matplotlib.lines" include nil nil [1029 1062])
            ("warnings" include nil nil [1064 1079])
            ("BlockingInput" type
               (:documentation "
    Class that creates a callable object to retrieve events in a
    blocking way.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1262 1276])
                            ("if" code nil (reparse-symbol indented_block_body) [1285 1402])
                            ("self" variable nil (reparse-symbol indented_block_body) [1410 1438]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1227 1231])
                            ("fig" variable nil (reparse-symbol function_parameters) [1233 1236])
                            ("eventslist" variable nil (reparse-symbol function_parameters) [1238 1248]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1214 1439])
                    ("on_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1457 1461])
                            ("event" variable nil (reparse-symbol function_parameters) [1463 1468]))                          
                        :documentation "
        Event handler that will be passed to the current figure to
        retrieve events.
        ")
                        (reparse-symbol indented_block_body) [1444 2047])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2067 2071]))                          
                        :documentation "For baseclass, do nothing but collect events")
                        (reparse-symbol indented_block_body) [2052 2146])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2163 2167]))                          
                        :documentation "Disconnect all callbacks")
                        (reparse-symbol indented_block_body) [2151 2319])
                    ("add_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2338 2342])
                            ("event" variable nil (reparse-symbol function_parameters) [2344 2349]))                          
                        :documentation "For base class, this just appends an event to events.")
                        (reparse-symbol indented_block_body) [2324 2454])
                    ("pop_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2473 2477])
                            ("index" variable nil (reparse-symbol function_parameters) [2479 2484]))                          
                        :documentation "
        This removes an event from the event list.  Defaults to
        removing last event, but an index can be supplied.  Note that
        this does not check that there are events, much like the
        normal pop method.  If not events exist, this will throw an
        exception.
        ")
                        (reparse-symbol indented_block_body) [2459 2831])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2844 2848])
                            ("index" variable nil (reparse-symbol function_parameters) [2850 2855]))                          )
                        (reparse-symbol indented_block_body) [2836 2891])
                    ("pop" variable nil (reparse-symbol indented_block_body) [2895 2926])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2945 2949])
                            ("n" variable nil (reparse-symbol function_parameters) [2951 2952])
                            ("timeout" variable nil (reparse-symbol function_parameters) [2956 2963]))                          
                        :documentation "
        Blocking call to retrieve n events
        ")
                        (reparse-symbol indented_block_body) [2932 3761]))                  
                :type "class")
                nil [1082 3761])
            ("BlockingMouseInput" type
               (:documentation "
    Class that creates a callable object to retrieve mouse clicks in a
    blocking way.

    This class will also retrieve keyboard clicks and treat them like
    appropriate mouse clicks (delete and backspace are like mouse button 3,
    enter is like mouse button 2 and all others are like mouse button 1).
    "
                :superclasses ("BlockingInput")
                :members 
                  ( ("button_add" variable nil (reparse-symbol indented_block_body) [4135 4149])
                    ("button_pop" variable nil (reparse-symbol indented_block_body) [4154 4168])
                    ("button_stop" variable nil (reparse-symbol indented_block_body) [4173 4188])
                    ("__init__" function
                       (:suite 
                          ( ("BlockingInput" code nil (reparse-symbol indented_block_body) [4267 4432])
                            ("self" variable nil (reparse-symbol indented_block_body) [4441 4468])
                            ("self" variable nil (reparse-symbol indented_block_body) [4477 4504])
                            ("self" variable nil (reparse-symbol indented_block_body) [4513 4542]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4207 4211])
                            ("fig" variable nil (reparse-symbol function_parameters) [4213 4216])
                            ("mouse_add" variable nil (reparse-symbol function_parameters) [4218 4227])
                            ("mouse_pop" variable nil (reparse-symbol function_parameters) [4231 4240])
                            ("mouse_stop" variable nil (reparse-symbol function_parameters) [4244 4254]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4194 4543])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4563 4567]))                          
                        :documentation "
        This will be called to process events
        ")
                        (reparse-symbol indented_block_body) [4548 4847])
                    ("mouse_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4868 4872]))                          )
                        (reparse-symbol indented_block_body) [4852 5195])
                    ("key_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5214 5218]))                          )
                        (reparse-symbol indented_block_body) [5200 5830])
                    ("mouse_event_add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5855 5859])
                            ("event" variable nil (reparse-symbol function_parameters) [5861 5866]))                          
                        :documentation "
        Will be called for any event involving a button other than
        button 2 or 3.  This will add a click if it is inside axes.
        ")
                        (reparse-symbol indented_block_body) [5835 6189])
                    ("mouse_event_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6215 6219])
                            ("event" variable nil (reparse-symbol function_parameters) [6221 6226]))                          
                        :documentation "
        Will be called for any event involving button 2.
        Button 2 ends blocking input.
        ")
                        (reparse-symbol indented_block_body) [6194 6714])
                    ("mouse_event_pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6739 6743])
                            ("event" variable nil (reparse-symbol function_parameters) [6745 6750]))                          
                        :documentation "
        Will be called for any event involving button 3.
        Button 3 removes the last click.
        ")
                        (reparse-symbol indented_block_body) [6719 7063])
                    ("add_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7082 7086])
                            ("event" variable nil (reparse-symbol function_parameters) [7088 7093]))                          
                        :documentation "
        This add the coordinates of an event to the list of clicks
        ")
                        (reparse-symbol indented_block_body) [7068 7650])
                    ("pop_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7669 7673])
                            ("event" variable nil (reparse-symbol function_parameters) [7675 7680])
                            ("index" variable nil (reparse-symbol function_parameters) [7682 7687]))                          
                        :documentation "
        This removes a click from the list of clicks.  Defaults to
        removing the last click.
        ")
                        (reparse-symbol indented_block_body) [7655 7982])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8207 8211])
                            ("event" variable nil (reparse-symbol function_parameters) [8213 8218])
                            ("index" variable nil (reparse-symbol function_parameters) [8220 8225]))                          
                        :documentation "
        This removes a click and the associated event from the object.
        Defaults to removing the last click, but any index can be
        supplied.
        ")
                        (reparse-symbol indented_block_body) [8199 8486])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8503 8507])
                            ("event" variable nil (reparse-symbol function_parameters) [8509 8514]))                          )
                        (reparse-symbol indented_block_body) [8491 8792])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8810 8814])
                            ("n" variable nil (reparse-symbol function_parameters) [8816 8817])
                            ("timeout" variable nil (reparse-symbol function_parameters) [8821 8828])
                            ("show_clicks" variable nil (reparse-symbol function_parameters) [8833 8844]))                          
                        :documentation "
        Blocking call to retrieve n coordinate pairs through mouse
        clicks.
        ")
                        (reparse-symbol indented_block_body) [8797 9134]))                  
                :type "class")
                nil [3763 9134])
            ("BlockingContourLabeler" type
               (:documentation "
    Class that creates a callable object that uses mouse clicks or key
    clicks on a figure window to place contour labels.
    "
                :superclasses ("BlockingMouseInput")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9364 9376])
                            ("BlockingMouseInput" code nil (reparse-symbol indented_block_body) [9385 9436]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9345 9349])
                            ("cs" variable nil (reparse-symbol function_parameters) [9351 9353]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9332 9437])
                    ("add_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9456 9460])
                            ("event" variable nil (reparse-symbol function_parameters) [9462 9467]))                          )
                        (reparse-symbol indented_block_body) [9442 9498])
                    ("pop_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9517 9521])
                            ("event" variable nil (reparse-symbol function_parameters) [9523 9528])
                            ("index" variable nil (reparse-symbol function_parameters) [9530 9535]))                          )
                        (reparse-symbol indented_block_body) [9503 9569])
                    ("button1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9586 9590])
                            ("event" variable nil (reparse-symbol function_parameters) [9592 9597]))                          
                        :documentation "
        This will be called if an event involving a button other than
        2 or 3 occcurs.  This will add a label to a contour.
        ")
                        (reparse-symbol indented_block_body) [9574 10118])
                    ("button3" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10135 10139])
                            ("event" variable nil (reparse-symbol function_parameters) [10141 10146]))                          
                        :documentation "
        This will be called if button 3 is clicked.  This will remove
        a label if not in inline mode.  Unfortunately, if one is doing
        inline labels, then there is currently no way to fix the
        broken contour - once humpty-dumpty is broken, he can't be put
        back together.  In inline mode, this does nothing.
        ")
                        (reparse-symbol indented_block_body) [10123 10641])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10659 10663])
                            ("inline" variable nil (reparse-symbol function_parameters) [10665 10671])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [10673 10687])
                            ("n" variable nil (reparse-symbol function_parameters) [10691 10692])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10697 10704]))                          )
                        (reparse-symbol indented_block_body) [10646 10904]))                  
                :type "class")
                nil [9136 10904])
            ("BlockingKeyMouseInput" type
               (:documentation "
    Class that creates a callable object to retrieve a single mouse or
    keyboard click
    "
                :superclasses ("BlockingInput")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("BlockingInput" code nil (reparse-symbol indented_block_body) [11093 11197]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11073 11077])
                            ("fig" variable nil (reparse-symbol function_parameters) [11079 11082]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11060 11198])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11218 11222]))                          
                        :documentation "
        Determines if it is a key event
        ")
                        (reparse-symbol indented_block_body) [11203 11452])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11470 11474])
                            ("timeout" variable nil (reparse-symbol function_parameters) [11476 11483]))                          
                        :documentation "
        Blocking call to retrieve a single mouse or key click
        Returns True if key click, False if mouse, or None if timeout
        ")
                        (reparse-symbol indented_block_body) [11457 11767]))                  
                :type "class")
                nil [10906 11767]))          
      :file "blocking_input.py"
      :pointmax 11767
      :fsize 11766
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The legend module defines the Legend class, which is responsible for
drawing legends associated with axes and/or figures.

.. important::

    It is unlikely that you would ever create a Legend instance manually.
    Most users would normally create a legend via the
    :meth:`~matplotlib.axes.Axes.legend` function. For more details on legends
    there is also a :ref:`legend guide <plotting-guide-legend>`.

The Legend class can be considered as a container of legend handles
and legend texts. Creation of corresponding legend handles from the
plot elements in the axes or figures (e.g., lines, patches, etc.) are
specified by the handler map, which defines the mapping between the
plot elements and the legend handlers to be used (the default legend
handlers are defined in the :mod:`~matplotlib.legend_handler` module).
Note that not all kinds of artist are supported by the legend yet by default
but it is possible to extend the legend handler's capabilities to
support arbitrary objects. See the :ref:`legend guide <plotting-guide-legend>`
for more information.

\"\"\"" code nil nil [1 1079])
            ("" code nil nil [1103 1188])
            ("six" include nil nil [1190 1200])
            ("six.moves" include nil nil [1201 1229])
            ("warnings" include nil nil [1231 1246])
            ("numpy" include nil nil [1248 1266])
            ("matplotlib" include nil nil [1268 1299])
            ("matplotlib.artist" include nil nil [1300 1357])
            ("" code nil nil [1387 1435])
            ("matplotlib.font_manager" include nil nil [1436 1486])
            ("matplotlib.lines" include nil nil [1487 1522])
            ("matplotlib.patches" include nil nil [1523 1594])
            ("" code nil nil [1630 1791])
            ("matplotlib.transforms" include nil nil [1792 1857])
            ("matplotlib.transforms" include nil nil [1858 1926])
            ("matplotlib.offsetbox" include nil nil [1928 2000])
            ("matplotlib.offsetbox" include nil nil [2001 2052])
            ("matplotlib.container" include nil nil [2054 2133])
            ("legend_handler" include nil nil [2141 2162])
            ("DraggableLegend" type
               (:superclasses ("DraggableOffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        update : If \"loc\", update *loc* parameter of
                 legend upon finalizing. If \"bbox\", update
                 *bbox_to_anchor* parameter.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2278 2450])
                            ("self" variable nil (reparse-symbol indented_block_body) [2459 2479])
                            ("if" code nil (reparse-symbol indented_block_body) [2489 2677])
                            ("DraggableOffsetBox" code nil (reparse-symbol indented_block_body) [2686 2802]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2225 2229])
                            ("legend" variable nil (reparse-symbol function_parameters) [2231 2237])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [2239 2247])
                            ("update" variable nil (reparse-symbol function_parameters) [2255 2261]))                          
                        :documentation "
        update : If \"loc\", update *loc* parameter of
                 legend upon finalizing. If \"bbox\", update
                 *bbox_to_anchor* parameter.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2212 2803])
                    ("artist_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2826 2830])
                            ("legend" variable nil (reparse-symbol function_parameters) [2832 2838])
                            ("evt" variable nil (reparse-symbol function_parameters) [2840 2843]))                          )
                        (reparse-symbol indented_block_body) [2808 2887])
                    ("finalize_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2912 2916]))                          )
                        (reparse-symbol indented_block_body) [2892 3272])
                    ("_update_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3293 3297])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [3299 3312]))                          )
                        (reparse-symbol indented_block_body) [3277 3796])
                    ("_update_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3828 3832])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [3834 3847]))                          )
                        (reparse-symbol indented_block_body) [3801 4000]))                  
                :type "class")
                nil [2165 4000])
            ("Legend" type
               (:documentation "
    Place a legend on the axes at location loc.  Labels are a
    sequence of strings and loc can be a string or an integer
    specifying the legend location

    The location codes are::

      'best'         : 0, (only implemented for axes legends)
      'upper right'  : 1,
      'upper left'   : 2,
      'lower left'   : 3,
      'lower right'  : 4,
      'right'        : 5,
      'center left'  : 6,
      'center right' : 7,
      'lower center' : 8,
      'upper center' : 9,
      'center'       : 10,

    loc can be a tuple of the normalized coordinate values with
    respect its parent.

    "
                :superclasses ("Artist")
                :members 
                  ( ("codes" variable nil (reparse-symbol indented_block_body) [4647 5047])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [5053 5063])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5081 5085]))                          )
                        (reparse-symbol indented_block_body) [5069 5112])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        - *parent*: the artist that contains the legend
        - *handles*: a list of artists (lines, patches) to be added to the
                      legend
        - *labels*: a list of strings to label the legend

        Optional keyword arguments:

        ================   ====================================================
        Keyword            Description
        ================   ====================================================
        loc                Location code string, or tuple (see below).
        prop               the font property
        fontsize           the font size (used only if prop is not specified)
        markerscale        the relative size of legend markers vs. original
        markerfirst        If True (default), marker is to left of the label.
        numpoints          the number of points in the legend for line
        scatterpoints      the number of points in the legend for scatter plot
        scatteryoffsets    a list of yoffsets for scatter symbols in legend
        frameon            If True, draw the legend on a patch (frame).
        fancybox           If True, draw the frame with a round fancybox.
        shadow             If True, draw a shadow behind legend.
        framealpha         Transparency of the frame.
        edgecolor          Frame edgecolor.
        facecolor          Frame facecolor.
        ncol               number of columns
        borderpad          the fractional whitespace inside the legend border
        labelspacing       the vertical space between the legend entries
        handlelength       the length of the legend handles
        handleheight       the height of the legend handles
        handletextpad      the pad between the legend handle and text
        borderaxespad      the pad between the axes and legend border
        columnspacing      the spacing between columns
        title              the legend title
        bbox_to_anchor     the bbox that the legend will be anchored.
        bbox_transform     the transform for the bbox. transAxes if None.
        ================   ====================================================


        The pad and spacing parameters are measured in font-size units.  e.g.,
        a fontsize of 10 points and a handlelength=5 implies a handlelength of
        50 points.  Values from rcParams will be used if None.

        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. bbox_to_anchor can be an instance
        of BboxBase(or its derivatives) or a tuple of 2 or 4 floats.
        See :meth:`set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7329 10205])
                            ("matplotlib.axes" include nil (reparse-symbol indented_block_body) [10263 10295])
                            ("matplotlib.figure" include nil (reparse-symbol indented_block_body) [10304 10340])
                            ("Artist" code nil (reparse-symbol indented_block_body) [10350 10371])
                            ("if" code nil (reparse-symbol indented_block_body) [10381 10814])
                            ("self" variable nil (reparse-symbol indented_block_body) [10823 10870])
                            ("self" variable nil (reparse-symbol indented_block_body) [10880 10895])
                            ("self" variable nil (reparse-symbol indented_block_body) [10904 10927])
                            ("self" variable nil (reparse-symbol indented_block_body) [10936 10965])
                            ("self" variable nil (reparse-symbol indented_block_body) [11068 11106])
                            ("locals_view" variable nil (reparse-symbol indented_block_body) [11116 11138])
                            ("for" code nil (reparse-symbol indented_block_body) [11147 11583])
                            ("del" code nil (reparse-symbol indented_block_body) [11591 11606])
                            ("handles" variable nil (reparse-symbol indented_block_body) [11616 11639])
                            ("if" code nil (reparse-symbol indented_block_body) [11648 11690])
                            ("self" variable nil (reparse-symbol indented_block_body) [11698 11715])
                            ("if" code nil (reparse-symbol indented_block_body) [11725 11826])
                            ("if" code nil (reparse-symbol indented_block_body) [11896 12077])
                            ("reps" code nil (reparse-symbol indented_block_body) [12085 12148])
                            ("self" variable nil (reparse-symbol indented_block_body) [12157 12278])
                            ("self" variable nil (reparse-symbol indented_block_body) [12442 12465])
                            ("if" code nil (reparse-symbol indented_block_body) [12475 12808])
                            ("self" variable nil (reparse-symbol indented_block_body) [12816 12836])
                            ("if" code nil (reparse-symbol indented_block_body) [12846 12994])
                            ("if" code nil (reparse-symbol indented_block_body) [13002 13818])
                            ("if" code nil (reparse-symbol indented_block_body) [13826 14072])
                            ("self" variable nil (reparse-symbol indented_block_body) [14081 14098])
                            ("self" code nil (reparse-symbol indented_block_body) [14107 14162])
                            ("if" code nil (reparse-symbol indented_block_body) [14313 14388])
                            ("if" code nil (reparse-symbol indented_block_body) [14396 14474])
                            ("if" code nil (reparse-symbol indented_block_body) [14483 14558])
                            ("if" code nil (reparse-symbol indented_block_body) [14566 14644])
                            ("self" variable nil (reparse-symbol indented_block_body) [14653 14880])
                            ("if" code nil (reparse-symbol indented_block_body) [15053 15125])
                            ("if" code nil (reparse-symbol indented_block_body) [15134 15339])
                            ("self" code nil (reparse-symbol indented_block_body) [15348 15388])
                            ("self" variable nil (reparse-symbol indented_block_body) [15398 15423])
                            ("if" code nil (reparse-symbol indented_block_body) [15432 15509])
                            ("self" code nil (reparse-symbol indented_block_body) [15552 15603])
                            ("if" code nil (reparse-symbol indented_block_body) [15613 15771])
                            ("self" variable nil (reparse-symbol indented_block_body) [15780 15795])
                            ("self" code nil (reparse-symbol indented_block_body) [15804 15825])
                            ("self" variable nil (reparse-symbol indented_block_body) [15834 15877])
                            ("self" variable nil (reparse-symbol indented_block_body) [15886 15908]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5130 5134])
                            ("parent" variable nil (reparse-symbol function_parameters) [5136 5142])
                            ("handles" variable nil (reparse-symbol function_parameters) [5144 5151])
                            ("labels" variable nil (reparse-symbol function_parameters) [5153 5159])
                            ("loc" variable nil (reparse-symbol function_parameters) [5178 5181])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [5205 5214])
                            ("markerscale" variable nil (reparse-symbol function_parameters) [5283 5294])
                            ("markerfirst" variable nil (reparse-symbol function_parameters) [5408 5419])
                            ("scatterpoints" variable nil (reparse-symbol function_parameters) [5545 5558])
                            ("scatteryoffsets" variable nil (reparse-symbol function_parameters) [5612 5627])
                            ("prop" variable nil (reparse-symbol function_parameters) [5651 5655])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [5722 5730])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [5870 5879])
                            ("labelspacing" variable nil (reparse-symbol function_parameters) [5950 5962])
                            ("handlelength" variable nil (reparse-symbol function_parameters) [6076 6088])
                            ("handleheight" variable nil (reparse-symbol function_parameters) [6149 6161])
                            ("handletextpad" variable nil (reparse-symbol function_parameters) [6222 6235])
                            ("borderaxespad" variable nil (reparse-symbol function_parameters) [6345 6358])
                            ("columnspacing" variable nil (reparse-symbol function_parameters) [6468 6481])
                            ("ncol" variable nil (reparse-symbol function_parameters) [6533 6537])
                            ("mode" variable nil (reparse-symbol function_parameters) [6582 6586])
                            ("fancybox" variable nil (reparse-symbol function_parameters) [6705 6713])
                            ("shadow" variable nil (reparse-symbol function_parameters) [6834 6840])
                            ("title" variable nil (reparse-symbol function_parameters) [6864 6869])
                            ("framealpha" variable nil (reparse-symbol function_parameters) [6924 6934])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [6977 6986])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [7035 7044])
                            ("bbox_to_anchor" variable nil (reparse-symbol function_parameters) [7094 7108])
                            ("bbox_transform" variable nil (reparse-symbol function_parameters) [7174 7188])
                            ("frameon" variable nil (reparse-symbol function_parameters) [7238 7245])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [7283 7294]))                          
                        :documentation "
        - *parent*: the artist that contains the legend
        - *handles*: a list of artists (lines, patches) to be added to the
                      legend
        - *labels*: a list of strings to label the legend

        Optional keyword arguments:

        ================   ====================================================
        Keyword            Description
        ================   ====================================================
        loc                Location code string, or tuple (see below).
        prop               the font property
        fontsize           the font size (used only if prop is not specified)
        markerscale        the relative size of legend markers vs. original
        markerfirst        If True (default), marker is to left of the label.
        numpoints          the number of points in the legend for line
        scatterpoints      the number of points in the legend for scatter plot
        scatteryoffsets    a list of yoffsets for scatter symbols in legend
        frameon            If True, draw the legend on a patch (frame).
        fancybox           If True, draw the frame with a round fancybox.
        shadow             If True, draw a shadow behind legend.
        framealpha         Transparency of the frame.
        edgecolor          Frame edgecolor.
        facecolor          Frame facecolor.
        ncol               number of columns
        borderpad          the fractional whitespace inside the legend border
        labelspacing       the vertical space between the legend entries
        handlelength       the length of the legend handles
        handleheight       the height of the legend handles
        handletextpad      the pad between the legend handle and text
        borderaxespad      the pad between the axes and legend border
        columnspacing      the spacing between columns
        title              the legend title
        bbox_to_anchor     the bbox that the legend will be anchored.
        bbox_transform     the transform for the bbox. transAxes if None.
        ================   ====================================================


        The pad and spacing parameters are measured in font-size units.  e.g.,
        a fontsize of 10 points and a handlelength=5 implies a handlelength of
        50 points.  Values from rcParams will be used if None.

        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. bbox_to_anchor can be an instance
        of BboxBase(or its derivatives) or a tuple of 2 or 4 floats.
        See :meth:`set_bbox_to_anchor` for more detail.

        The legend location can be specified by setting *loc* with a tuple of
        2 floats, which is interpreted as the lower-left corner of the legend
        in the normalized axes coordinate.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5117 15909])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15936 15940])
                            ("a" variable nil (reparse-symbol function_parameters) [15942 15943]))                          
                        :documentation "
        set the boilerplate props for artists added to axes
        ")
                        (reparse-symbol indented_block_body) [15914 16202])
                    ("_set_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16220 16224])
                            ("loc" variable nil (reparse-symbol function_parameters) [16226 16229]))                          )
                        (reparse-symbol indented_block_body) [16207 16805])
                    ("_get_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16823 16827]))                          )
                        (reparse-symbol indented_block_body) [16810 16860])
                    ("_loc" variable nil (reparse-symbol indented_block_body) [16865 16900])
                    ("_findoffset_best" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16927 16931])
                            ("width" variable nil (reparse-symbol function_parameters) [16933 16938])
                            ("height" variable nil (reparse-symbol function_parameters) [16940 16946])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [16948 16956])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [16958 16966])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16968 16976]))                          )
                        (reparse-symbol indented_block_body) [16906 17158])
                    ("_findoffset_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17183 17187])
                            ("width" variable nil (reparse-symbol function_parameters) [17189 17194])
                            ("height" variable nil (reparse-symbol function_parameters) [17196 17202])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [17204 17212])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [17214 17222])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17224 17232]))                          )
                        (reparse-symbol indented_block_body) [17163 17875])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17914 17918])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17920 17928]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17880 19093])
                    ("_approx_text_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19122 19126])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19128 19136]))                          
                        :documentation "
        Return the approximate height of the text. This is used to place
        the legend handle.
        ")
                        (reparse-symbol indented_block_body) [19098 19406])
                    ("_default_handler_map" variable nil (reparse-symbol indented_block_body) [19520 20261])
                    ("get_default_handler_map" function
                       (:documentation "
        A class method that returns the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20420 20423]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20375 20551])
                    ("set_default_handler_map" function
                       (:documentation "
        A class method to set the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20601 20604])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [20606 20617]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20556 20746])
                    ("update_default_handler_map" function
                       (:documentation "
        A class method to update the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20799 20802])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [20804 20815]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20751 20953])
                    ("get_legend_handler_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20985 20989]))                          
                        :documentation "
        return the handler map.
        ")
                        (reparse-symbol indented_block_body) [20958 21315])
                    ("get_legend_handler" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("legend_handler_map" variable nil (reparse-symbol function_parameters) [21361 21379])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [21381 21392]))                          
                        :documentation "
        return a legend handler from *legend_handler_map* that
        corresponds to *orig_handler*.

        *legend_handler_map* should be a dictionary object (that is
        returned by the get_legend_handler_map method).

        It first checks if the *orig_handle* itself is a key in the
        *legend_hanler_map* and return the associated value.
        Otherwise, it checks for each of the classes in its
        method-resolution-order. If no matching key is found, it
        returns None.
        ")
                        (reparse-symbol indented_block_body) [21320 22379])
                    ("_init_legend_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22405 22409])
                            ("handles" variable nil (reparse-symbol function_parameters) [22411 22418])
                            ("labels" variable nil (reparse-symbol function_parameters) [22420 22426])
                            ("markerfirst" variable nil (reparse-symbol function_parameters) [22428 22439]))                          
                        :documentation "
        Initialize the legend_box. The legend_box is an instance of
        the OffsetBox, which is packed with legend handles and
        texts. Once packed, their location is calculated during the
        drawing time.
        ")
                        (reparse-symbol indented_block_body) [22384 28752])
                    ("_auto_legend_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28779 28783]))                          
                        :documentation "
        Returns list of vertices and extents covered by the plot.

        Returns a two long list.

        First element is a list of (x, y) vertices (in
        display-coordinates) covered by all the lines and line
        collections, in the legend's handles.

        Second element is a list of bounding boxes for all the patches in
        the legend's handles.
        ")
                        (reparse-symbol indented_block_body) [28757 30449])
                    ("draw_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30469 30473])
                            ("b" variable nil (reparse-symbol function_parameters) [30475 30476]))                          )
                        (reparse-symbol indented_block_body) [30454 30555])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30577 30581]))                          )
                        (reparse-symbol indented_block_body) [30560 30789])
                    ("get_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30808 30812]))                          )
                        (reparse-symbol indented_block_body) [30794 30912])
                    ("get_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30931 30935]))                          )
                        (reparse-symbol indented_block_body) [30917 31074])
                    ("get_patches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31095 31099]))                          )
                        (reparse-symbol indented_block_body) [31079 31307])
                    ("get_texts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31326 31330]))                          )
                        (reparse-symbol indented_block_body) [31312 31440])
                    ("set_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31459 31463])
                            ("title" variable nil (reparse-symbol function_parameters) [31465 31470])
                            ("prop" variable nil (reparse-symbol function_parameters) [31472 31476]))                          
                        :documentation "
        set the legend title. Fontproperties can be optionally set
        with *prop* parameter.
        ")
                        (reparse-symbol indented_block_body) [31445 32006])
                    ("get_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32025 32029]))                          )
                        (reparse-symbol indented_block_body) [32011 32128])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32155 32159])
                            ("args" variable nil (reparse-symbol function_parameters) [32161 32166])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [32168 32176]))                          )
                        (reparse-symbol indented_block_body) [32133 32286])
                    ("get_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32308 32312]))                          
                        :documentation "
        Get whether the legend box patch is drawn
        ")
                        (reparse-symbol indented_block_body) [32291 32420])
                    ("set_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32442 32446])
                            ("b" variable nil (reparse-symbol function_parameters) [32448 32449]))                          
                        :documentation "
        Set whether the legend box patch is drawn

        ACCEPTS: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [32425 32619])
                    ("get_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32647 32651]))                          
                        :documentation "
        return the bbox that the legend will be anchored
        ")
                        (reparse-symbol indented_block_body) [32624 32866])
                    ("set_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32894 32898])
                            ("bbox" variable nil (reparse-symbol function_parameters) [32900 32904])
                            ("transform" variable nil (reparse-symbol function_parameters) [32906 32915]))                          
                        :documentation "
        set the bbox that the legend will be anchored.

        *bbox* can be a BboxBase instance, a tuple of [left, bottom,
        width, height] in the given transform (normalized axes
        coordinate if None), or a tuple of [left, bottom] where the
        width and height will be assumed to be zero.
        ")
                        (reparse-symbol indented_block_body) [32871 33966])
                    ("_get_anchored_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33994 33998])
                            ("loc" variable nil (reparse-symbol function_parameters) [34000 34003])
                            ("bbox" variable nil (reparse-symbol function_parameters) [34005 34009])
                            ("parentbbox" variable nil (reparse-symbol function_parameters) [34011 34021])
                            ("renderer" variable nil (reparse-symbol function_parameters) [34023 34031]))                          
                        :documentation "
        Place the *bbox* inside the *parentbbox* according to a given
        location code. Return the (x,y) coordinate of the bbox.

        - loc: a location code in range(1, 11).
          This corresponds to the possible values for self._loc, excluding
          \"best\".

        - bbox: bbox to be placed, display coodinate units.
        - parentbbox: a parent box which will contain the bbox. In
            display coordinates.
        ")
                        (reparse-symbol indented_block_body) [33971 35234])
                    ("_find_best_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35263 35267])
                            ("width" variable nil (reparse-symbol function_parameters) [35269 35274])
                            ("height" variable nil (reparse-symbol function_parameters) [35276 35282])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35284 35292])
                            ("consider" variable nil (reparse-symbol function_parameters) [35294 35302]))                          
                        :documentation "
        Determine the best location to place the legend.

        `consider` is a list of (x, y) pairs to consider as a potential
        lower-left corner of the legend. All are display coords.
        ")
                        (reparse-symbol indented_block_body) [35239 37763])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37781 37785])
                            ("event" variable nil (reparse-symbol function_parameters) [37787 37792]))                          )
                        (reparse-symbol indented_block_body) [37768 37843])
                    ("draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37862 37866])
                            ("state" variable nil (reparse-symbol function_parameters) [37868 37873])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [37880 37888])
                            ("update" variable nil (reparse-symbol function_parameters) [37896 37902]))                          
                        :documentation "
        Set the draggable state -- if state is

          * None : toggle the current state

          * True : turn draggable on

          * False : turn draggable off

        If draggable is on, you can drag the legend on the canvas with
        the mouse.  The DraggableLegend helper instance is returned if
        draggable is on.

        The update parameter control which parameter of the legend changes
        when dragged. If update is \"loc\", the *loc* paramter of the legend
        is changed. If \"bbox\", the *bbox_to_anchor* parameter is changed.
        ")
                        (reparse-symbol indented_block_body) [37848 39063]))                  
                :type "class")
                nil [4002 39063]))          
      :file "legend.py"
      :pointmax 39063
      :fsize 39062
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 2134 . 2138) (PERIOD 2139 . 2140)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for parsing and generating fontconfig patterns.

See the `fontconfig pattern specification
<https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_ for
more information.
\"\"\"" code nil nil [1 203])
            ("" code nil nil [709 794])
            ("six" include nil nil [796 806])
            ("sys" include nil nil [808 822])
            ("re" include nil nil [808 822])
            ("pyparsing" include nil nil [823 925])
            ("family_punc" variable nil nil [927 950])
            ("family_unescape" variable nil nil [951 1010])
            ("family_escape" variable nil nil [1011 1066])
            ("value_punc" variable nil nil [1068 1090])
            ("value_unescape" variable nil nil [1091 1148])
            ("value_escape" variable nil nil [1149 1202])
            ("FontconfigPatternParser" type
               (:documentation "A simple pyparsing-based parser for fontconfig-style patterns.

    See the `fontconfig pattern specification
    <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_
    for more information.
    "
                :superclasses ("object")
                :members 
                  ( ("_constants" variable nil (reparse-symbol indented_block_body) [1476 2712])
                    ("__init__" function
                       (:suite 
                          ( ("family" variable nil (reparse-symbol indented_block_body) [2746 2898])
                            ("size" variable nil (reparse-symbol indented_block_body) [2907 3009])
                            ("name" variable nil (reparse-symbol indented_block_body) [3018 3100])
                            ("value" variable nil (reparse-symbol indented_block_body) [3109 3258])
                            ("families" variable nil (reparse-symbol indented_block_body) [3268 3444])
                            ("point_sizes" variable nil (reparse-symbol indented_block_body) [3454 3629])
                            ("property" variable nil (reparse-symbol indented_block_body) [3639 3960])
                            ("pattern" variable nil (reparse-symbol indented_block_body) [3970 4294])
                            ("self" variable nil (reparse-symbol indented_block_body) [4304 4326])
                            ("self" variable nil (reparse-symbol indented_block_body) [4335 4371]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2731 2735]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2718 4372])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4387 4391])
                            ("pattern" variable nil (reparse-symbol function_parameters) [4393 4400]))                          
                        :documentation "
        Parse the given fontconfig *pattern* and return a dictionary
        of key/value pairs useful for initializing a
        :class:`font_manager.FontProperties` object.
        ")
                        (reparse-symbol indented_block_body) [4377 4932])
                    ("_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4949 4953])
                            ("s" variable nil (reparse-symbol function_parameters) [4955 4956])
                            ("loc" variable nil (reparse-symbol function_parameters) [4958 4961])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4963 4969]))                          )
                        (reparse-symbol indented_block_body) [4937 5028])
                    ("_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5043 5047])
                            ("s" variable nil (reparse-symbol function_parameters) [5049 5050])
                            ("loc" variable nil (reparse-symbol function_parameters) [5052 5055])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5057 5063]))                          )
                        (reparse-symbol indented_block_body) [5033 5100])
                    ("_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5115 5119])
                            ("s" variable nil (reparse-symbol function_parameters) [5121 5122])
                            ("loc" variable nil (reparse-symbol function_parameters) [5124 5127])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5129 5135]))                          )
                        (reparse-symbol indented_block_body) [5105 5170])
                    ("_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5186 5190])
                            ("s" variable nil (reparse-symbol function_parameters) [5192 5193])
                            ("loc" variable nil (reparse-symbol function_parameters) [5195 5198])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5200 5206]))                          )
                        (reparse-symbol indented_block_body) [5175 5264])
                    ("_families" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5283 5287])
                            ("s" variable nil (reparse-symbol function_parameters) [5289 5290])
                            ("loc" variable nil (reparse-symbol function_parameters) [5292 5295])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5297 5303]))                          )
                        (reparse-symbol indented_block_body) [5269 5386])
                    ("_point_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5408 5412])
                            ("s" variable nil (reparse-symbol function_parameters) [5414 5415])
                            ("loc" variable nil (reparse-symbol function_parameters) [5417 5420])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5422 5428]))                          )
                        (reparse-symbol indented_block_body) [5391 5509])
                    ("_property" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5528 5532])
                            ("s" variable nil (reparse-symbol function_parameters) [5534 5535])
                            ("loc" variable nil (reparse-symbol function_parameters) [5537 5540])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5542 5548]))                          )
                        (reparse-symbol indented_block_body) [5514 5894]))                  
                :type "class")
                nil [1204 5894])
            ("parse_fontconfig_pattern" variable nil nil [5895 5953])
            ("generate_fontconfig_pattern" function
               (:documentation "
    Given a dictionary of key/value pairs, generates a fontconfig
    pattern string.
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [5987 5988]))                  )
                nil [5955 6557]))          
      :file "fontconfig_pattern.py"
      :pointmax 6557
      :fsize 6556
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((INDENT_BLOCK 4740 . 4842) (NEWLINE 4739 . 4740) (COLON 4738 . 4739) (TRY 4648 . 4651) (AS 4734 . 4736)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Nothing here but dictionaries for generating LinearSegmentedColormaps,
and a dictionary of these dictionaries.

Documentation for each is in pyplot.colormaps().  Please update this
with the purpose and type of your colormap if you add data for one here.
\"\"\"" code nil nil [1 262])
            ("" code nil nil [287 372])
            ("matplotlib.cbook" include nil nil [374 418])
            ("numpy" include nil nil [419 437])
            ("_binary_data" variable nil nil [439 592])
            ("_autumn_data" variable nil nil [594 767])
            ("_bone_data" variable nil nil [769 1232])
            ("_cool_data" variable nil nil [1234 1399])
            ("_copper_data" variable nil nil [1401 1722])
            ("_flag_data" variable nil nil [1724 1940])
            ("_prism_data" variable nil nil [1942 2170])
            ("cubehelix" function
               (:documentation "Return custom data dictionary of (r,g,b) conversion functions, which
    can be used with :func:`register_cmap`, for the cubehelix color scheme.

    Unlike most other color schemes cubehelix was designed by D.A. Green to
    be monotonically increasing in terms of perceived brightness.
    Also, when printed on a black and white postscript printer, the scheme
    results in a greyscale with monotonically increasing brightness.
    This color scheme is named cubehelix because the r,g,b values produced
    can be visualised as a squashed helix around the diagonal in the
    r,g,b color cube.

    For a unit color cube (i.e. 3-D coordinates for r,g,b each in the
    range 0 to 1) the color scheme starts at (r,g,b) = (0,0,0), i.e. black,
    and finishes at (r,g,b) = (1,1,1), i.e. white. For some fraction *x*,
    between 0 and 1, the color is the corresponding grey value at that
    fraction along the black to white diagonal (x,x,x) plus a color
    element. This color element is calculated in a plane of constant
    perceived intensity and controlled by the following parameters.

    Optional keyword arguments:

      =========   =======================================================
      Keyword     Description
      =========   =======================================================
      gamma       gamma factor to emphasise either low intensity values
                  (gamma < 1), or high intensity values (gamma > 1);
                  defaults to 1.0.
      s           the start color; defaults to 0.5 (i.e. purple).
      r           the number of r,g,b rotations in color that are made
                  from the start to the end of the color scheme; defaults
                  to -1.5 (i.e. -> B -> G -> R -> B).
      h           the hue parameter which controls how saturated the
                  colors are. If this parameter is zero then the color
                  scheme is purely a greyscale; defaults to 1.0.
      =========   =======================================================

    "
                :arguments 
                  ( ("gamma" variable nil (reparse-symbol function_parameters) [2187 2192])
                    ("s" variable nil (reparse-symbol function_parameters) [2198 2199])
                    ("r" variable nil (reparse-symbol function_parameters) [2205 2206])
                    ("h" variable nil (reparse-symbol function_parameters) [2213 2214]))                  )
                nil [2173 4958])
            ("_cubehelix_data" variable nil nil [4959 4988])
            ("_bwr_data" variable nil nil [4990 5053])
            ("_brg_data" variable nil nil [5054 5117])
            ("gfunc" variable nil nil [5147 6579])
            ("gfunc32" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6594 6595]))              ) nil [6582 6796])
            ("_gnuplot_data" variable nil nil [6797 6895])
            ("_gnuplot2_data" variable nil nil [6897 6998])
            ("_ocean_data" variable nil nil [7000 7097])
            ("_afmhot_data" variable nil nil [7099 7198])
            ("_rainbow_data" variable nil nil [7200 7300])
            ("_seismic_data" variable nil nil [7302 7428])
            ("_terrain_data" variable nil nil [7430 7647])
            ("_gray_data" variable nil nil [7649 7795])
            ("_hot_data" variable nil nil [7797 8258])
            ("_hsv_data" variable nil nil [8260 9489])
            ("_jet_data" variable nil nil [9491 9856])
            ("_pink_data" variable nil nil [9858 20377])
            ("_spring_data" variable nil nil [20379 20552])
            ("_summer_data" variable nil nil [20555 20732])
            ("_winter_data" variable nil nil [20735 20908])
            ("_nipy_spectral_data" variable nil nil [20910 22673])
            ("_Blues_data" variable nil nil [23059 23718])
            ("_BrBG_data" variable nil nil [23720 24520])
            ("_BuGn_data" variable nil nil [24522 25180])
            ("_BuPu_data" variable nil nil [25182 25840])
            ("_GnBu_data" variable nil nil [25842 26500])
            ("_Greens_data" variable nil nil [26502 27162])
            ("_Greys_data" variable nil nil [27164 27823])
            ("_Oranges_data" variable nil nil [27825 28486])
            ("_OrRd_data" variable nil nil [28488 29146])
            ("_PiYG_data" variable nil nil [29148 29948])
            ("_PRGn_data" variable nil nil [29950 30750])
            ("_PuBu_data" variable nil nil [30752 31410])
            ("_PuBuGn_data" variable nil nil [31412 32072])
            ("_PuOr_data" variable nil nil [32074 32874])
            ("_PuRd_data" variable nil nil [32876 33534])
            ("_Purples_data" variable nil nil [33536 34197])
            ("_RdBu_data" variable nil nil [34199 34999])
            ("_RdGy_data" variable nil nil [35001 35801])
            ("_RdPu_data" variable nil nil [35803 36461])
            ("_RdYlBu_data" variable nil nil [36463 37254])
            ("_RdYlGn_data" variable nil nil [37256 38047])
            ("_Reds_data" variable nil nil [38049 38698])
            ("_Spectral_data" variable nil nil [38700 39493])
            ("_YlGn_data" variable nil nil [39495 40144])
            ("_YlGnBu_data" variable nil nil [40146 40797])
            ("_YlOrBr_data" variable nil nil [40799 41450])
            ("_YlOrRd_data" variable nil nil [41452 42103])
            ("_Accent_data" variable nil nil [42207 42781])
            ("_Dark2_data" variable nil nil [42783 43356])
            ("_Paired_data" variable nil nil [43358 44208])
            ("_Pastel1_data" variable nil nil [44210 44854])
            ("_Pastel2_data" variable nil nil [44856 45431])
            ("_Set1_data" variable nil nil [45433 46058])
            ("_Set2_data" variable nil nil [46060 46632])
            ("_Set3_data" variable nil nil [46634 47482])
            ("_gist_earth_data" variable nil nil [47995 49103])
            ("_gist_gray_data" variable nil nil [49105 49204])
            ("_gist_heat_data" variable nil nil [49206 49336])
            ("_gist_ncar_data" variable nil nil [49338 50604])
            ("_gist_rainbow_data" variable nil nil [50606 50925])
            ("_gist_stern_data" variable nil nil [50927 51298])
            ("_gist_yarg_data" variable nil nil [51300 51420])
            ("_coolwarm_data" variable nil nil [51611 56002])
            ("_CMRmap_data" variable nil nil [56221 57520])
            ("_wistia_data" variable nil nil [57929 58650])
            ("_tab10_data" variable nil nil [58752 59573])
            ("_tab20_data" variable nil nil [59575 61136])
            ("_tab20b_data" variable nil nil [61138 62680])
            ("_tab20c_data" variable nil nil [62682 64244])
            ("_deprecation_datad" type
               (:documentation "
    This class only exists for the purpose of raising an appropriate warning
    for the deprecation of spectral. It should be remove in 2.2, once the
    colormap spectral disappears.
    "
                :superclasses ("dict")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64500 64504])
                            ("key" variable nil (reparse-symbol function_parameters) [64506 64509]))                          )
                        (reparse-symbol indented_block_body) [64484 65154]))                  
                :type "class")
                nil [64247 65154])
            ("datad" variable nil nil [65156 66023])
            ("datad" variable nil nil [66026 66054])
            ("datad" variable nil nil [66055 66081])
            ("datad" variable nil nil [66082 66108])
            ("datad" variable nil nil [66109 66135])
            ("datad" variable nil nil [66136 66162])
            ("datad" variable nil nil [66163 66193])
            ("datad" variable nil nil [66194 66222])
            ("datad" variable nil nil [66223 66255])
            ("datad" variable nil nil [66256 66282])
            ("datad" variable nil nil [66283 66309])
            ("datad" variable nil nil [66310 66336])
            ("datad" variable nil nil [66337 66363])
            ("datad" variable nil nil [66364 66394])
            ("datad" variable nil nil [66395 66421])
            ("datad" variable nil nil [66422 66448])
            ("datad" variable nil nil [66449 66481])
            ("datad" variable nil nil [66482 66508])
            ("datad" variable nil nil [66509 66535])
            ("datad" variable nil nil [66536 66562])
            ("datad" variable nil nil [66563 66593])
            ("datad" variable nil nil [66594 66624])
            ("datad" variable nil nil [66625 66651])
            ("datad" variable nil nil [66652 66686])
            ("datad" variable nil nil [66687 66713])
            ("datad" variable nil nil [66714 66744])
            ("datad" variable nil nil [66745 66775])
            ("datad" variable nil nil [66776 66806])
            ("datad" variable nil nil [66808 66846])
            ("datad" variable nil nil [66847 66883])
            ("datad" variable nil nil [66884 66920])
            ("datad" variable nil nil [66921 66957])
            ("datad" variable nil nil [66958 67000])
            ("datad" variable nil nil [67001 67039])
            ("datad" variable nil nil [67040 67076])
            ("datad" variable nil nil [67078 67112])
            ("datad" variable nil nil [67114 67144])
            ("datad" variable nil nil [67160 67202])
            ("datad" variable nil nil [67203 67243])
            ("datad" variable nil nil [67244 67286])
            ("datad" variable nil nil [67287 67331])
            ("datad" variable nil nil [67332 67376])
            ("datad" variable nil nil [67377 67415])
            ("datad" variable nil nil [67416 67454])
            ("datad" variable nil nil [67455 67493])
            ("datad" variable nil nil [67495 67535])
            ("datad" variable nil nil [67536 67576])
            ("datad" variable nil nil [67577 67619])
            ("datad" variable nil nil [67620 67662])
            ("datad" variable nil nil [67664 67705])
            ("datad" variable nil nil [67706 67747])
            ("datad" variable nil nil [67748 67791])
            ("datad" variable nil nil [67792 67835]))          
      :file "_cm.py"
      :pointmax 67836
      :fsize 67835
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("ListedColormap" include nil nil [14 35])
            ("_magma_data" variable nil nil [37 12068])
            ("_inferno_data" variable nil nil [12070 24613])
            ("_plasma_data" variable nil nil [24615 36902])
            ("_viridis_data" variable nil nil [36904 49447])
            ("cmaps" variable nil nil [49450 49460])
            ("for" code nil nil [49461 49825]))          
      :file "_cm_listed.py"
      :pointmax 49825
      :fsize 49824
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((PERIOD 6 . 7)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module contains functions to handle markers.  Used by both the
marker functionality of `~matplotlib.axes.Axes.plot` and
`~matplotlib.axes.Axes.scatter`.

All possible markers are defined here:

============================== ===============================================
marker                         description
============================== ===============================================
`\".\"`                          point
`\",\"`                          pixel
`\"o\"`                          circle
`\"v\"`                          triangle_down
`\"^\"`                          triangle_up
`\"<\"`                          triangle_left
`\">\"`                          triangle_right
`\"1\"`                          tri_down
`\"2\"`                          tri_up
`\"3\"`                          tri_left
`\"4\"`                          tri_right
`\"8\"`                          octagon
`\"s\"`                          square
`\"p\"`                          pentagon
`\"P\"`                          plus (filled)
`\"*\"`                          star
`\"h\"`                          hexagon1
`\"H\"`                          hexagon2
`\"+\"`                          plus
`\"x\"`                          x
`\"X\"`                          x (filled)
`\"D\"`                          diamond
`\"d\"`                          thin_diamond
`\"|\"`                          vline
`\"_\"`                          hline
TICKLEFT                       tickleft
TICKRIGHT                      tickright
TICKUP                         tickup
TICKDOWN                       tickdown
CARETLEFT                      caretleft (centered at tip)
CARETRIGHT                     caretright (centered at tip)
CARETUP                        caretup (centered at tip)
CARETDOWN                      caretdown (centered at tip)
CARETLEFTBASE                  caretleft (centered at base)
CARETRIGHTBASE                 caretright (centered at base)
CARETUPBASE                    caretup (centered at base)
`\"None\"`, `\" \"` or `\"\"`        nothing
``'$...$'``                    render the string using mathtext.
`verts`                        a list of (x, y) pairs used for Path vertices.
                               The center of the marker is located at (0,0) and
                               the size is normalized.
path                           a `~matplotlib.path.Path` instance.
(`numsides`, `style`, `angle`) The marker can also be a tuple (`numsides`,
                               `style`, `angle`), which will create a custom,
                               regular symbol.

                               `numsides`:
                                   the number of sides

                               `style`:
                                   the style of the regular symbol:

                                   0
                                     a regular polygon
                                   1
                                     a star-like symbol
                                   2
                                     an asterisk
                                   3
                                     a circle (`numsides` and `angle` is
                                     ignored)

                               `angle`:
                                   the angle of rotation of the symbol
============================== ===============================================

For backward compatibility, the form (`verts`, 0) is also accepted,
but it is equivalent to just `verts` for giving a raw set of vertices
that define the shape.

`None` is the default which means 'nothing', however this table is
referred to from other docs for the valid inputs from marker inputs and in
those cases `None` still means 'default'.
\"\"\"" code nil nil [1 3735])
            ("" code nil nil [3760 3845])
            ("six" include nil nil [3847 3857])
            ("six.moves" include nil nil [3858 3886])
            ("numpy" include nil nil [3888 3906])
            ("iterable" include nil nil [3920 3977])
            ("is_numlike" include nil nil [3920 3977])
            ("is_string_like" include nil nil [3920 3977])
            ("is_math_text" include nil nil [3920 3977])
            ("matplotlib" include nil nil [3978 4009])
            ("Path" include nil nil [4021 4032])
            ("Affine2D" include nil nil [4050 4084])
            ("IdentityTransform" include nil nil [4050 4084])
            ("" code nil nil [4124 4286])
            ("MarkerStyle" type
               (:superclasses ("object")
                :members 
                  ( ("markers" variable nil (reparse-symbol indented_block_body) [4321 5455])
                    ("filled_markers" variable nil (reparse-symbol indented_block_body) [5563 5672])
                    ("fillstyles" variable nil (reparse-symbol indented_block_body) [5678 5741])
                    ("_half_fillstyles" variable nil (reparse-symbol indented_block_body) [5746 5799])
                    ("_point_size_reduction" variable nil (reparse-symbol indented_block_body) [5854 5881])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        MarkerStyle

        Attributes
        ----------
        markers : list of known markes

        fillstyles : list of known fillstyles

        filled_markers : list of known filled markers.

        Parameters
        ----------
        marker : string or array_like, optional, default: None
            See the descriptions of possible markers in the module docstring.

        fillstyle : string, optional, default: 'full'
            'full', 'left\", 'right', 'bottom', 'top', 'none'
        \"\"\"" code nil (reparse-symbol indented_block_body) [5944 6456])
                            ("self" variable nil (reparse-symbol indented_block_body) [6580 6607])
                            ("self" code nil (reparse-symbol indented_block_body) [6616 6639])
                            ("self" code nil (reparse-symbol indented_block_body) [6648 6677]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5900 5904])
                            ("marker" variable nil (reparse-symbol function_parameters) [5906 5912])
                            ("fillstyle" variable nil (reparse-symbol function_parameters) [5919 5928]))                          
                        :documentation "
        MarkerStyle

        Attributes
        ----------
        markers : list of known markes

        fillstyles : list of known fillstyles

        filled_markers : list of known filled markers.

        Parameters
        ----------
        marker : string or array_like, optional, default: None
            See the descriptions of possible markers in the module docstring.

        fillstyle : string, optional, default: 'full'
            'full', 'left\", 'right', 'bottom', 'top', 'none'
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5887 6678])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6700 6704]))                          )
                        (reparse-symbol indented_block_body) [6683 6791])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6813 6817])
                            ("statedict" variable nil (reparse-symbol function_parameters) [6819 6828]))                          )
                        (reparse-symbol indented_block_body) [6796 6927])
                    ("_recache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6945 6949]))                          )
                        (reparse-symbol indented_block_body) [6932 7269])
                    ("if" code nil (reparse-symbol indented_block_body) [7274 7455])
                    ("is_filled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7474 7478]))                          )
                        (reparse-symbol indented_block_body) [7460 7509])
                    ("get_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7532 7536]))                          )
                        (reparse-symbol indented_block_body) [7514 7570])
                    ("set_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7593 7597])
                            ("fillstyle" variable nil (reparse-symbol function_parameters) [7599 7608]))                          
                        :documentation "
        Sets fillstyle

        Parameters
        ----------
        fillstyle : string amongst known fillstyles
        ")
                        (reparse-symbol indented_block_body) [7575 8053])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8076 8080]))                          )
                        (reparse-symbol indented_block_body) [8058 8114])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8136 8140]))                          )
                        (reparse-symbol indented_block_body) [8119 8173])
                    ("get_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8193 8197]))                          )
                        (reparse-symbol indented_block_body) [8178 8228])
                    ("set_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8248 8252])
                            ("marker" variable nil (reparse-symbol function_parameters) [8254 8260]))                          )
                        (reparse-symbol indented_block_body) [8233 9329])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9347 9351]))                          )
                        (reparse-symbol indented_block_body) [9334 9380])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9403 9407]))                          )
                        (reparse-symbol indented_block_body) [9385 9450])
                    ("get_alt_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9472 9476]))                          )
                        (reparse-symbol indented_block_body) [9455 9509])
                    ("get_alt_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9536 9540]))                          )
                        (reparse-symbol indented_block_body) [9514 9587])
                    ("get_snap_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9615 9619]))                          )
                        (reparse-symbol indented_block_body) [9592 9658])
                    ("_set_nothing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9680 9684]))                          )
                        (reparse-symbol indented_block_body) [9663 9716])
                    ("_set_custom_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9744 9748])
                            ("path" variable nil (reparse-symbol function_parameters) [9750 9754]))                          )
                        (reparse-symbol indented_block_body) [9721 9973])
                    ("_set_path_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9999 10003]))                          )
                        (reparse-symbol indented_block_body) [9978 10052])
                    ("_set_vertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10075 10079]))                          )
                        (reparse-symbol indented_block_body) [10057 10180])
                    ("_set_tuple_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10207 10211]))                          )
                        (reparse-symbol indented_block_body) [10185 11221])
                    ("_set_mathtext_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11249 11253]))                          
                        :documentation "
        Draws mathtext markers '$...$' using TextPath object.

        Submitted by tcb
        ")
                        (reparse-symbol indented_block_body) [11226 12283])
                    ("_half_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12303 12307]))                          )
                        (reparse-symbol indented_block_body) [12288 12411])
                    ("_set_circle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12432 12436])
                            ("reduction" variable nil (reparse-symbol function_parameters) [12438 12447]))                          )
                        (reparse-symbol indented_block_body) [12416 13140])
                    ("_set_pixel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13160 13164]))                          )
                        (reparse-symbol indented_block_body) [13145 13895])
                    ("_set_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13915 13919]))                          )
                        (reparse-symbol indented_block_body) [13900 13985])
                    ("_triangle_path" variable nil (reparse-symbol indented_block_body) [13990 14138])
                    ("_triangle_path_u" variable nil (reparse-symbol indented_block_body) [14210 14372])
                    ("_triangle_path_d" variable nil (reparse-symbol indented_block_body) [14377 14584])
                    ("_triangle_path_l" variable nil (reparse-symbol indented_block_body) [14589 14739])
                    ("_triangle_path_r" variable nil (reparse-symbol indented_block_body) [14744 14893])
                    ("_set_triangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14917 14921])
                            ("rot" variable nil (reparse-symbol function_parameters) [14923 14926])
                            ("skip" variable nil (reparse-symbol function_parameters) [14928 14932]))                          )
                        (reparse-symbol indented_block_body) [14899 15976])
                    ("_set_triangle_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16002 16006]))                          )
                        (reparse-symbol indented_block_body) [15981 16051])
                    ("_set_triangle_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16079 16083]))                          )
                        (reparse-symbol indented_block_body) [16056 16130])
                    ("_set_triangle_left" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16158 16162]))                          )
                        (reparse-symbol indented_block_body) [16135 16208])
                    ("_set_triangle_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16237 16241]))                          )
                        (reparse-symbol indented_block_body) [16213 16288])
                    ("_set_square" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16309 16313]))                          )
                        (reparse-symbol indented_block_body) [16293 17315])
                    ("_set_diamond" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17337 17341]))                          )
                        (reparse-symbol indented_block_body) [17320 18142])
                    ("_set_thin_diamond" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18169 18173]))                          )
                        (reparse-symbol indented_block_body) [18147 18244])
                    ("_set_pentagon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18267 18271]))                          )
                        (reparse-symbol indented_block_body) [18249 19348])
                    ("_set_star" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19367 19371]))                          )
                        (reparse-symbol indented_block_body) [19353 20412])
                    ("_set_hexagon1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20435 20439]))                          )
                        (reparse-symbol indented_block_body) [20417 21514])
                    ("_set_hexagon2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21537 21541]))                          )
                        (reparse-symbol indented_block_body) [21519 22680])
                    ("_set_octagon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22702 22706]))                          )
                        (reparse-symbol indented_block_body) [22685 23587])
                    ("_line_marker_path" variable nil (reparse-symbol indented_block_body) [23592 23643])
                    ("_set_vline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23664 23668]))                          )
                        (reparse-symbol indented_block_body) [23649 23827])
                    ("_set_hline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23847 23851]))                          )
                        (reparse-symbol indented_block_body) [23832 24025])
                    ("_tickhoriz_path" variable nil (reparse-symbol indented_block_body) [24030 24078])
                    ("_set_tickleft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24102 24106]))                          )
                        (reparse-symbol indented_block_body) [24084 24269])
                    ("_set_tickright" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24293 24297]))                          )
                        (reparse-symbol indented_block_body) [24274 24459])
                    ("_tickvert_path" variable nil (reparse-symbol indented_block_body) [24464 24513])
                    ("_set_tickup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24535 24539]))                          )
                        (reparse-symbol indented_block_body) [24519 24700])
                    ("_set_tickdown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24723 24727]))                          )
                        (reparse-symbol indented_block_body) [24705 24889])
                    ("_plus_path" variable nil (reparse-symbol indented_block_body) [24894 25085])
                    ("_set_plus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25105 25109]))                          )
                        (reparse-symbol indented_block_body) [25091 25261])
                    ("_tri_path" variable nil (reparse-symbol indented_block_body) [25266 25547])
                    ("_set_tri_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25571 25575]))                          )
                        (reparse-symbol indented_block_body) [25553 25726])
                    ("_set_tri_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25747 25751]))                          )
                        (reparse-symbol indented_block_body) [25731 25918])
                    ("_set_tri_left" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25941 25945]))                          )
                        (reparse-symbol indented_block_body) [25923 26112])
                    ("_set_tri_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26136 26140]))                          )
                        (reparse-symbol indented_block_body) [26117 26306])
                    ("_caret_path" variable nil (reparse-symbol indented_block_body) [26311 26368])
                    ("_set_caretdown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26393 26397]))                          )
                        (reparse-symbol indented_block_body) [26374 26584])
                    ("_set_caretup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26606 26610]))                          )
                        (reparse-symbol indented_block_body) [26589 26813])
                    ("_set_caretleft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26837 26841]))                          )
                        (reparse-symbol indented_block_body) [26818 27044])
                    ("_set_caretright" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27069 27073]))                          )
                        (reparse-symbol indented_block_body) [27049 27275])
                    ("_caret_path_base" variable nil (reparse-symbol indented_block_body) [27280 27341])
                    ("_set_caretdownbase" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27370 27374]))                          )
                        (reparse-symbol indented_block_body) [27347 27566])
                    ("_set_caretupbase" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27592 27596]))                          )
                        (reparse-symbol indented_block_body) [27571 27804])
                    ("_set_caretleftbase" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27832 27836]))                          )
                        (reparse-symbol indented_block_body) [27809 28044])
                    ("_set_caretrightbase" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28073 28077]))                          )
                        (reparse-symbol indented_block_body) [28049 28284])
                    ("_x_path" variable nil (reparse-symbol indented_block_body) [28289 28470])
                    ("_set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28487 28491]))                          )
                        (reparse-symbol indented_block_body) [28476 28640])
                    ("_plus_filled_path" variable nil (reparse-symbol indented_block_body) [28645 29252])
                    ("_plus_filled_path_t" variable nil (reparse-symbol indented_block_body) [29258 29693])
                    ("_set_plus_filled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29720 29724]))                          )
                        (reparse-symbol indented_block_body) [29699 30608])
                    ("_x_filled_path" variable nil (reparse-symbol indented_block_body) [30613 31176])
                    ("_x_filled_path_t" variable nil (reparse-symbol indented_block_body) [31182 31556])
                    ("_set_x_filled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31580 31584]))                          )
                        (reparse-symbol indented_block_body) [31562 32459]))                  
                :type "class")
                nil [4289 32459]))          
      :file "markers.py"
      :pointmax 32459
      :fsize 32458
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 4033 . 4037) (PERIOD 4038 . 4039) (FROM 4010 . 4014) (PERIOD 4015 . 4016) (FROM 3908 . 3912) (PERIOD 3913 . 3914)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for finding, managing, and using fonts across platforms.

This module provides a single :class:`FontManager` instance that can
be shared across backends and platforms.  The :func:`findfont`
function returns the best TrueType (TTF) font file in the local or
system font path that matches the specified :class:`FontProperties`
instance.  The :class:`FontManager` also handles Adobe Font Metrics
(AFM) font files for use by the PostScript backend.

The design is based on the `W3C Cascading Style Sheet, Level 1 (CSS1)
font specification <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_.
Future versions may implement the Level 2 or 2.1 specifications.

Experimental support is included for using `fontconfig` on Unix
variant platforms (Linux, OS X, Solaris).  To enable it, set the
constant ``USE_FONTCONFIG`` in this file to ``True``.  Fontconfig has
the advantage that it is the standard way to look up fonts on X11
platforms, so if a font is installed, it is much more likely to be
found.
\"\"\"" code nil nil [1 1007])
            ("" code nil nil [1031 1116])
            ("six" include nil nil [1118 1128])
            ("six.moves" include nil nil [1129 1168])
            ("\"\"\"
KNOWN ISSUES

  - documentation
  - font variant is untested
  - font stretch is incomplete
  - font size is incomplete
  - font size_adjust is incomplete
  - default font algorithm needs improvement and testing
  - setWeights function needs improvement
  - 'light' is an invalid weight value, remove it.
  - update_fonts not implemented

Authors   : John Hunter <jdhunter@ace.bsd.uchicago.edu>
            Paul Barrett <Barrett@STScI.Edu>
            Michael Droettboom <mdroe@STScI.edu>
Copyright : John Hunter (2004,2005), Paul Barrett (2004,2005)
License   : matplotlib license (PSF compatible)
            The font directory code is from ttfquery,
            see license/LICENSE_TTFQUERY.
\"\"\"" code nil nil [1170 1872])
            ("collections" include nil nil [1874 1906])
            ("json" include nil nil [1907 1918])
            ("os" include nil nil [1919 1928])
            ("sys" include nil nil [1929 1939])
            ("threading" include nil nil [1940 1967])
            ("warnings" include nil nil [1968 1983])
            ("matplotlib" include nil nil [1985 2002])
            ("matplotlib" include nil nil [2003 2069])
            ("matplotlib.cbook" include nil nil [2070 2113])
            ("matplotlib.compat" include nil nil [2114 2154])
            ("" code nil nil [2197 2257])
            ("try" code nil nil [2259 2358])
            ("USE_FONTCONFIG" variable nil nil [2360 2382])
            ("verbose" variable nil nil [2383 2411])
            ("font_scalings" variable nil nil [2413 2664])
            ("stretch_dict" variable nil nil [2666 2943])
            ("weight_dict" variable nil nil [2945 3296])
            ("font_family_aliases" variable nil nil [3298 3462])
            ("MSFolders" variable nil nil [3481 3566])
            ("MSFontDirectories" variable nil nil [3569 3705])
            ("X11FontDirectories" variable nil nil [3708 4097])
            ("OSXFontDirectories" variable nil nil [4099 4278])
            ("if" code nil nil [4280 4596])
            ("get_fontext_synonyms" function
               (:documentation "
    Return a list of file extensions extensions that are synonyms for
    the given file extension *fileext*.
    "
                :arguments 
                  ( ("fontext" variable nil (reparse-symbol function_parameters) [4623 4630]))                  )
                nil [4598 4867])
            ("list_fonts" function
               (:documentation "
    Return a list of all fonts matching any of the extensions,
    possibly upper-cased, found recursively under the directory.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [4884 4893])
                    ("extensions" variable nil (reparse-symbol function_parameters) [4895 4905]))                  )
                nil [4869 5204])
            ("win32FontDirectory" function (:documentation "
    Return the user-specified font directory for Win32.  This is
    looked up from the registry key::

      \\\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Fonts

    If the key is not found, $WINDIR/Fonts will be returned.
    ") nil [5206 6084])
            ("win32InstalledFonts" function
               (:documentation "
    Search for fonts in the specified font directory, or use the
    system directories if none given.  A list of TrueType font
    filenames are returned by default, or AFM fonts if *fontext* ==
    'afm'.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [6110 6119])
                    ("fontext" variable nil (reparse-symbol function_parameters) [6126 6133]))                  )
                nil [6086 7614])
            ("OSXInstalledFonts" function
               (:documentation "
    Get list of font files on OS X - ignores font suffix by default.
    "
                :arguments 
                  ( ("directories" variable nil (reparse-symbol function_parameters) [7638 7649])
                    ("fontext" variable nil (reparse-symbol function_parameters) [7656 7663]))                  )
                nil [7616 8080])
            ("" code nil nil [8092 8094])
            ("_call_fc_list" function (:documentation "Cache and list the font filenames known to `fc-list`.
    ") nil [8095 8810])
            ("get_fontconfig_fonts" function
               (:documentation "List the font filenames known to `fc-list` having the given extension.
    "
                :arguments 
                  ( ("fontext" variable nil (reparse-symbol function_parameters) [8837 8844]))                  )
                nil [8812 9088])
            ("findSystemFonts" function
               (:documentation "
    Search for fonts in the specified font paths.  If no paths are
    given, will use a standard set of system paths, as well as the
    list of fonts tracked by fontconfig if fontconfig is installed and
    available.  A list of TrueType fonts are returned by default with
    AFM fonts as an option.
    "
                :arguments 
                  ( ("fontpaths" variable nil (reparse-symbol function_parameters) [9111 9120])
                    ("fontext" variable nil (reparse-symbol function_parameters) [9127 9134]))                  )
                nil [9091 10562])
            ("weight_as_number" function
               (:documentation "
    Return the weight property as a numeric value.  String values
    are converted to their corresponding numeric value.
    "
                :arguments 
                  ( ("weight" variable nil (reparse-symbol function_parameters) [10585 10591]))                  )
                nil [10564 11027])
            ("FontEntry" type
               (:documentation "
    A class for storing Font properties.  It is used when populating
    the font lookup dictionary.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11455 11475])
                            ("self" variable nil (reparse-symbol indented_block_body) [11484 11503])
                            ("self" variable nil (reparse-symbol indented_block_body) [11512 11532])
                            ("self" variable nil (reparse-symbol indented_block_body) [11541 11563])
                            ("self" variable nil (reparse-symbol indented_block_body) [11572 11593])
                            ("self" variable nil (reparse-symbol indented_block_body) [11602 11624])
                            ("try" code nil (reparse-symbol indented_block_body) [11633 11735]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11188 11192])
                            ("fname" variable nil (reparse-symbol function_parameters) [11211 11216])
                            ("name" variable nil (reparse-symbol function_parameters) [11240 11244])
                            ("style" variable nil (reparse-symbol function_parameters) [11269 11274])
                            ("variant" variable nil (reparse-symbol function_parameters) [11304 11311])
                            ("weight" variable nil (reparse-symbol function_parameters) [11339 11345])
                            ("stretch" variable nil (reparse-symbol function_parameters) [11374 11381])
                            ("size" variable nil (reparse-symbol function_parameters) [11409 11413]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11175 11735])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11753 11757]))                          )
                        (reparse-symbol indented_block_body) [11740 11928]))                  
                :type "class")
                nil [11029 11928])
            ("ttfFontProperty" function
               (:documentation "
    A function for populating the :class:`FontKey` by extracting
    information from the TrueType font file.

    *font* is a :class:`FT2Font` instance.
    "
                :arguments 
                  ( ("font" variable nil (reparse-symbol function_parameters) [11950 11954]))                  )
                nil [11930 14673])
            ("afmFontProperty" function
               (:documentation "
    A function for populating a :class:`FontKey` instance by
    extracting information from the AFM font file.

    *font* is a class:`AFM` instance.
    "
                :arguments 
                  ( ("fontpath" variable nil (reparse-symbol function_parameters) [14695 14703])
                    ("font" variable nil (reparse-symbol function_parameters) [14705 14709]))                  )
                nil [14675 16821])
            ("createFontList" function
               (:documentation "
    A function to create a font lookup list.  The default is to create
    a list of TrueType fonts.  An AFM font list can optionally be
    created.
    "
                :arguments 
                  ( ("fontfiles" variable nil (reparse-symbol function_parameters) [16842 16851])
                    ("fontext" variable nil (reparse-symbol function_parameters) [16853 16860]))                  )
                nil [16823 18637])
            ("FontProperties" type
               (:documentation "
    A class for storing and manipulating font properties.

    The font properties are those described in the `W3C Cascading
    Style Sheet, Level 1
    <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ font
    specification.  The six properties are:

      - family: A list of font names in decreasing order of priority.
        The items may include a generic font family name, either
        'serif', 'sans-serif', 'cursive', 'fantasy', or 'monospace'.
        In that case, the actual font to be used will be looked up
        from the associated rcParam in :file:`matplotlibrc`.

      - style: Either 'normal', 'italic' or 'oblique'.

      - variant: Either 'normal' or 'small-caps'.

      - stretch: A numeric value in the range 0-1000 or one of
        'ultra-condensed', 'extra-condensed', 'condensed',
        'semi-condensed', 'normal', 'semi-expanded', 'expanded',
        'extra-expanded' or 'ultra-expanded'

      - weight: A numeric value in the range 0-1000 or one of
        'ultralight', 'light', 'normal', 'regular', 'book', 'medium',
        'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',
        'extra bold', 'black'

      - size: Either an relative value of 'xx-small', 'x-small',
        'small', 'medium', 'large', 'x-large', 'xx-large' or an
        absolute font size, e.g., 12

    The default font property for TrueType fonts (as specified in the
    default :file:`matplotlibrc` file) is::

      sans-serif, normal, normal, normal, normal, scalable.

    Alternatively, a font may be specified using an absolute path to a
    .ttf file, by using the *fname* kwarg.

    The preferred usage of font sizes is to use the relative values,
    e.g.,  'large', instead of absolute font sizes, e.g., 12.  This
    approach allows all text sizes to be made larger or smaller based
    on the font manager's default font size.

    This class will also accept a `fontconfig
    <https://www.freedesktop.org/wiki/Software/fontconfig/>`_ pattern, if it is
    the only argument provided.  See the documentation on `fontconfig patterns
    <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_.
    This support does not require fontconfig to be installed.  We are merely
    borrowing its pattern syntax for use here.

    Note that matplotlib's internal font manager and fontconfig use a
    different algorithm to lookup fonts, so the results of the same pattern
    may be different in matplotlib than in other applications that use
    fontconfig.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [21574 21636])
                            ("self" variable nil (reparse-symbol indented_block_body) [21645 21681])
                            ("self" variable nil (reparse-symbol indented_block_body) [21690 21730])
                            ("self" variable nil (reparse-symbol indented_block_body) [21739 21777])
                            ("self" variable nil (reparse-symbol indented_block_body) [21786 21826])
                            ("self" variable nil (reparse-symbol indented_block_body) [21835 21869])
                            ("self" variable nil (reparse-symbol indented_block_body) [21878 21895])
                            ("if" code nil (reparse-symbol indented_block_body) [21943 22033])
                            ("if" code nil (reparse-symbol indented_block_body) [22042 22453])
                            ("self" code nil (reparse-symbol indented_block_body) [22462 22485])
                            ("self" code nil (reparse-symbol indented_block_body) [22494 22515])
                            ("self" code nil (reparse-symbol indented_block_body) [22524 22549])
                            ("self" code nil (reparse-symbol indented_block_body) [22558 22581])
                            ("self" code nil (reparse-symbol indented_block_body) [22590 22615])
                            ("self" code nil (reparse-symbol indented_block_body) [22624 22644])
                            ("self" code nil (reparse-symbol indented_block_body) [22653 22672]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21210 21214])
                            ("family" variable nil (reparse-symbol function_parameters) [21233 21239])
                            ("style" variable nil (reparse-symbol function_parameters) [21265 21270])
                            ("variant" variable nil (reparse-symbol function_parameters) [21297 21304])
                            ("weight" variable nil (reparse-symbol function_parameters) [21329 21335])
                            ("stretch" variable nil (reparse-symbol function_parameters) [21361 21368])
                            ("size" variable nil (reparse-symbol function_parameters) [21393 21397])
                            ("fname" variable nil (reparse-symbol function_parameters) [21425 21430])
                            ("_init" variable nil (reparse-symbol function_parameters) [21508 21513]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21197 22673])
                    ("_parse_fontconfig_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22708 22712])
                            ("pattern" variable nil (reparse-symbol function_parameters) [22714 22721]))                          )
                        (reparse-symbol indented_block_body) [22678 22773])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22791 22795]))                          )
                        (reparse-symbol indented_block_body) [22778 23059])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23075 23079])
                            ("other" variable nil (reparse-symbol function_parameters) [23081 23086]))                          )
                        (reparse-symbol indented_block_body) [23064 23130])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23146 23150])
                            ("other" variable nil (reparse-symbol function_parameters) [23152 23157]))                          )
                        (reparse-symbol indented_block_body) [23135 23201])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23218 23222]))                          )
                        (reparse-symbol indented_block_body) [23206 23270])
                    ("get_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23290 23294]))                          
                        :documentation "
        Return a list of font names that comprise the font family.
        ")
                        (reparse-symbol indented_block_body) [23275 23416])
                    ("get_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23434 23438]))                          
                        :documentation "
        Return the name of the font that best matches the font
        properties.
        ")
                        (reparse-symbol indented_block_body) [23421 23600])
                    ("get_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23619 23623]))                          
                        :documentation "
        Return the font style.  Values are: 'normal', 'italic' or
        'oblique'.
        ")
                        (reparse-symbol indented_block_body) [23605 23762])
                    ("get_slant" variable nil (reparse-symbol indented_block_body) [23766 23787])
                    ("get_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23809 23813]))                          
                        :documentation "
        Return the font variant.  Values are: 'normal' or
        'small-caps'.
        ")
                        (reparse-symbol indented_block_body) [23793 23949])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23969 23973]))                          
                        :documentation "
        Set the font weight.  Options are: A numeric value in the
        range 0-1000 or one of 'light', 'normal', 'regular', 'book',
        'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold',
        'heavy', 'extra bold', 'black'
        ")
                        (reparse-symbol indented_block_body) [23954 24269])
                    ("get_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24290 24294]))                          
                        :documentation "
        Return the font stretch or width.  Options are: 'ultra-condensed',
        'extra-condensed', 'condensed', 'semi-condensed', 'normal',
        'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'.
        ")
                        (reparse-symbol indented_block_body) [24274 24566])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24584 24588]))                          
                        :documentation "
        Return the font size.
        ")
                        (reparse-symbol indented_block_body) [24571 24671])
                    ("get_size_in_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24699 24703]))                          )
                        (reparse-symbol indented_block_body) [24676 24732])
                    ("get_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24750 24754]))                          
                        :documentation "
        Return the filename of the associated font.
        ")
                        (reparse-symbol indented_block_body) [24737 24859])
                    ("get_fontconfig_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24891 24895]))                          
                        :documentation "
        Get a fontconfig pattern suitable for looking up the font as
        specified with fontconfig's ``fc-match`` utility.

        See the documentation on `fontconfig patterns
        <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_.

        This support does not require fontconfig to be installed or
        support for it to be enabled.  We are merely borrowing its
        pattern syntax for use here.
        ")
                        (reparse-symbol indented_block_body) [24864 25408])
                    ("set_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25428 25432])
                            ("family" variable nil (reparse-symbol function_parameters) [25434 25440]))                          
                        :documentation "
        Change the font family.  May be either an alias (generic name
        is CSS parlance), such as: 'serif', 'sans-serif', 'cursive',
        'fantasy', or 'monospace', a real font name or a list of real
        font names.  Real font names are not supported when
        `text.usetex` is `True`.
        ")
                        (reparse-symbol indented_block_body) [25413 25895])
                    ("set_name" variable nil (reparse-symbol indented_block_body) [25899 25920])
                    ("set_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25940 25944])
                            ("style" variable nil (reparse-symbol function_parameters) [25946 25951]))                          
                        :documentation "
        Set the font style.  Values are: 'normal', 'italic' or
        'oblique'.
        ")
                        (reparse-symbol indented_block_body) [25926 26286])
                    ("set_slant" variable nil (reparse-symbol indented_block_body) [26290 26311])
                    ("set_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26333 26337])
                            ("variant" variable nil (reparse-symbol function_parameters) [26339 26346]))                          
                        :documentation "
        Set the font variant.  Values are: 'normal' or 'small-caps'.
        ")
                        (reparse-symbol indented_block_body) [26317 26670])
                    ("set_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26690 26694])
                            ("weight" variable nil (reparse-symbol function_parameters) [26696 26702]))                          
                        :documentation "
        Set the font weight.  May be either a numeric value in the
        range 0-1000 or one of 'ultralight', 'light', 'normal',
        'regular', 'book', 'medium', 'roman', 'semibold', 'demibold',
        'demi', 'bold', 'heavy', 'extra bold', 'black'
        ")
                        (reparse-symbol indented_block_body) [26675 27376])
                    ("set_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27397 27401])
                            ("stretch" variable nil (reparse-symbol function_parameters) [27403 27410]))                          
                        :documentation "
        Set the font stretch or width.  Options are: 'ultra-condensed',
        'extra-condensed', 'condensed', 'semi-condensed', 'normal',
        'semi-expanded', 'expanded', 'extra-expanded' or
        'ultra-expanded', or a numeric value in the range 0-1000.
        ")
                        (reparse-symbol indented_block_body) [27381 28062])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28080 28084])
                            ("size" variable nil (reparse-symbol function_parameters) [28086 28090]))                          
                        :documentation "
        Set the font size.  Either an relative value of 'xx-small',
        'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'
        or an absolute font size, e.g., 12.
        ")
                        (reparse-symbol indented_block_body) [28067 28802])
                    ("set_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28820 28824])
                            ("file" variable nil (reparse-symbol function_parameters) [28826 28830]))                          
                        :documentation "
        Set the filename of the fontfile to use.  In this case, all
        other properties will be ignored.
        ")
                        (reparse-symbol indented_block_body) [28807 28993])
                    ("set_fontconfig_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29025 29029])
                            ("pattern" variable nil (reparse-symbol function_parameters) [29031 29038]))                          
                        :documentation "
        Set the properties by parsing a fontconfig *pattern*.

        See the documentation on `fontconfig patterns
        <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_.

        This support does not require fontconfig to be installed or
        support for it to be enabled.  We are merely borrowing its
        pattern syntax for use here.
        ")
                        (reparse-symbol indented_block_body) [28998 29670])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29684 29688]))                          
                        :documentation "Return a deep copy of self")
                        (reparse-symbol indented_block_body) [29675 29774]))                  
                :type "class")
                nil [18639 29774])
            ("ttfdict_to_fnames" function
               (:documentation "
    flatten a ttfdict to all the filenames it contains
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [29798 29799]))                  )
                nil [29776 30270])
            ("pickle_dump" function
               (:documentation "
    Equivalent to pickle.dump(data, open(filename, 'w'))
    but closes the file to prevent filehandle leakage.
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [30288 30292])
                    ("filename" variable nil (reparse-symbol function_parameters) [30294 30302]))                  )
                nil [30272 30500])
            ("pickle_load" function
               (:documentation "
    Equivalent to pickle.load(open(filename, 'r'))
    but closes the file to prevent filehandle leakage.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [30518 30526]))                  )
                nil [30502 30735])
            ("_normalize_font_family" function (:arguments 
              ( ("family" variable nil (reparse-symbol function_parameters) [30764 30770]))              ) nil [30737 30954])
            ("TempCache" type
               (:documentation "
    A class to store temporary caches that are (a) not saved to disk
    and (b) invalidated whenever certain font-related
    rcParams---namely the family lookup lists---are changed or the
    font cache is reloaded.  This avoids the expensive linear search
    through all fonts every time a font is looked up.
    "
                :superclasses ("object")
                :members 
                  ( ("invalidating_rcparams" variable nil (reparse-symbol indented_block_body) [31394 31518])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [31552 31575])
                            ("self" variable nil (reparse-symbol indented_block_body) [31584 31630]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31537 31541]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31524 31631])
                    ("make_rcparams_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31658 31662]))                          )
                        (reparse-symbol indented_block_body) [31636 31771])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31784 31788])
                            ("prop" variable nil (reparse-symbol function_parameters) [31790 31794]))                          )
                        (reparse-symbol indented_block_body) [31776 31993])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32006 32010])
                            ("prop" variable nil (reparse-symbol function_parameters) [32012 32016])
                            ("value" variable nil (reparse-symbol function_parameters) [32018 32023]))                          )
                        (reparse-symbol indented_block_body) [31998 32219]))                  
                :type "class")
                nil [30956 32219])
            ("FontManager" type
               (:documentation "
    On import, the :class:`FontManager` singleton instance creates a
    list of TrueType fonts based on the font properties: name, style,
    variant, weight, stretch, and size.  The :meth:`findfont` method
    does a nearest neighbor search to find the font that most closely
    matches the specification.  If no good enough match is found, a
    default font is returned.
    "
                :superclasses ("object")
                :members 
                  ( ("__version__" variable nil (reparse-symbol indented_block_body) [32808 32825])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [32887 32919])
                            ("self" variable nil (reparse-symbol indented_block_body) [32929 32959])
                            ("self" variable nil (reparse-symbol indented_block_body) [32968 32992])
                            ("paths" variable nil (reparse-symbol indented_block_body) [33002 33209])
                            ("for" code nil (reparse-symbol indented_block_body) [33256 33666])
                            ("verbose" code nil (reparse-symbol indented_block_body) [33675 33725])
                            ("self" code nil (reparse-symbol indented_block_body) [33794 33852])
                            ("self" variable nil (reparse-symbol indented_block_body) [33861 33949])
                            ("self" variable nil (reparse-symbol indented_block_body) [33958 33979])
                            ("for" code nil (reparse-symbol indented_block_body) [33989 34305])
                            ("self" variable nil (reparse-symbol indented_block_body) [34314 34358])
                            ("self" code nil (reparse-symbol indented_block_body) [34368 34468])
                            ("self" variable nil (reparse-symbol indented_block_body) [34477 34536])
                            ("if" code nil (reparse-symbol indented_block_body) [34545 34680]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32844 32848])
                            ("size" variable nil (reparse-symbol function_parameters) [32850 32854])
                            ("weight" variable nil (reparse-symbol function_parameters) [32861 32867]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32831 34680])
                    ("get_default_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34708 34712]))                          
                        :documentation "
        Return the default font weight.
        ")
                        (reparse-symbol indented_block_body) [34685 34816])
                    ("get_default_size" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        Return the default font size.
        ")
                        (reparse-symbol indented_block_body) [34821 34962])
                    ("set_default_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34990 34994])
                            ("weight" variable nil (reparse-symbol function_parameters) [34996 35002]))                          
                        :documentation "
        Set the default font weight.  The initial value is 'normal'.
        ")
                        (reparse-symbol indented_block_body) [34967 35137])
                    ("update_fonts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35159 35163])
                            ("filenames" variable nil (reparse-symbol function_parameters) [35165 35174]))                          
                        :documentation "
        Update the font dictionary with new font files.
        Currently not implemented.
        ")
                        (reparse-symbol indented_block_body) [35142 35362])
                    ("score_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35507 35511])
                            ("families" variable nil (reparse-symbol function_parameters) [35513 35521])
                            ("family2" variable nil (reparse-symbol function_parameters) [35523 35530]))                          
                        :documentation "
        Returns a match score between the list of font families in
        *families* and the font family name *family2*.

        An exact match at the head of the list returns 0.0.

        A match further down the list will return between 0 and 1.

        No match will return 1.0.
        ")
                        (reparse-symbol indented_block_body) [35490 36733])
                    ("score_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36754 36758])
                            ("style1" variable nil (reparse-symbol function_parameters) [36760 36766])
                            ("style2" variable nil (reparse-symbol function_parameters) [36768 36774]))                          
                        :documentation "
        Returns a match score between *style1* and *style2*.

        An exact match returns 0.0.

        A match between 'italic' and 'oblique' returns 0.1.

        No match returns 1.0.
        ")
                        (reparse-symbol indented_block_body) [36738 37185])
                    ("score_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37208 37212])
                            ("variant1" variable nil (reparse-symbol function_parameters) [37214 37222])
                            ("variant2" variable nil (reparse-symbol function_parameters) [37224 37232]))                          
                        :documentation "
        Returns a match score between *variant1* and *variant2*.

        An exact match returns 0.0, otherwise 1.0.
        ")
                        (reparse-symbol indented_block_body) [37190 37469])
                    ("score_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37492 37496])
                            ("stretch1" variable nil (reparse-symbol function_parameters) [37498 37506])
                            ("stretch2" variable nil (reparse-symbol function_parameters) [37508 37516]))                          
                        :documentation "
        Returns a match score between *stretch1* and *stretch2*.

        The result is the absolute value of the difference between the
        CSS numeric values of *stretch1* and *stretch2*, normalized
        between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [37474 38108])
                    ("score_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38130 38134])
                            ("weight1" variable nil (reparse-symbol function_parameters) [38136 38143])
                            ("weight2" variable nil (reparse-symbol function_parameters) [38145 38152]))                          
                        :documentation "
        Returns a match score between *weight1* and *weight2*.

        The result is the absolute value of the difference between the
        CSS numeric values of *weight1* and *weight2*, normalized
        between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [38113 38728])
                    ("score_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38748 38752])
                            ("size1" variable nil (reparse-symbol function_parameters) [38754 38759])
                            ("size2" variable nil (reparse-symbol function_parameters) [38761 38766]))                          
                        :documentation "
        Returns a match score between *size1* and *size2*.

        If *size2* (the size specified in the font file) is 'scalable', this
        function always returns 0.0, since any font size can be generated.

        Otherwise, the result is the absolute distance between *size1* and
        *size2*, normalized so that the usual range of font sizes (6pt -
        72pt) will lie between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [38733 39585])
                    ("findfont" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39603 39607])
                            ("prop" variable nil (reparse-symbol function_parameters) [39609 39613])
                            ("fontext" variable nil (reparse-symbol function_parameters) [39615 39622])
                            ("directory" variable nil (reparse-symbol function_parameters) [39630 39639])
                            ("fallback_to_default" variable nil (reparse-symbol function_parameters) [39663 39682])
                            ("rebuild_if_missing" variable nil (reparse-symbol function_parameters) [39689 39707]))                          
                        :documentation "
        Search the font list for the font that most closely matches
        the :class:`FontProperties` *prop*.

        :meth:`findfont` performs a nearest neighbor search.  Each
        font is given a similarity score to the target font
        properties.  The first font with the highest score is
        returned.  If no matches below a certain threshold are found,
        the default font (usually DejaVu Sans) is returned.

        `directory`, is specified, will only return fonts from the
        given directory (or subdirectory of that directory).

        The result is cached, so subsequent lookups don't have to
        perform the O(n) nearest neighbor search.

        If `fallback_to_default` is True, will fallback to the default
        font family (usually \"DejaVu Sans\" or \"Helvetica\") if
        the first lookup hard-fails.

        See the `W3C Cascading Style Sheet, Level 1
        <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ documentation
        for a description of the font finding algorithm.
        ")
                        (reparse-symbol indented_block_body) [39590 43771]))                  
                :type "class")
                nil [32221 43771])
            ("_is_opentype_cff_font_cache" variable nil nil [43772 43804])
            ("is_opentype_cff_font" function
               (:documentation "
    Returns True if the given font is a Postscript Compact Font Format
    Font embedded in an OpenType wrapper.  Used by the PostScript and
    PDF backends that can not subset these fonts.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [43830 43838]))                  )
                nil [43805 44404])
            ("fontManager" variable nil nil [44405 44423])
            ("_fmcache" variable nil nil [44424 44439])
            ("get_font" variable nil nil [44442 44483])
            ("if" code nil nil [44531 47242]))          
      :file "font_manager.py"
      :pointmax 47242
      :fsize 47241
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((INDENT_BLOCK 8550 . 8573) (NEWLINE 8549 . 8550) (COLON 8548 . 8549) (FINALLY 8541 . 8548)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module providing some utility functions regarding bezier path manipulation.
\"\"\"" code nil nil [1 86])
            ("" code nil nil [111 196])
            ("six" include nil nil [198 208])
            ("numpy" include nil nil [210 228])
            ("matplotlib.path" include nil nil [229 261])
            ("operator" include nil nil [263 287])
            ("warnings" include nil nil [288 303])
            ("NonIntersectingPathException" type
               (:superclasses ("ValueError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [358 362]))                  
                :type "class")
                nil [306 363])
            ("get_intersection" function
               (:documentation " return a intersecting point between a line through (cx1, cy1)
    and having angle t1 and a line through (cx2, cy2) and angle t2.
    "
                :arguments 
                  ( ("cx1" variable nil (reparse-symbol function_parameters) [404 407])
                    ("cy1" variable nil (reparse-symbol function_parameters) [409 412])
                    ("cos_t1" variable nil (reparse-symbol function_parameters) [414 420])
                    ("sin_t1" variable nil (reparse-symbol function_parameters) [422 428])
                    ("cx2" variable nil (reparse-symbol function_parameters) [451 454])
                    ("cy2" variable nil (reparse-symbol function_parameters) [456 459])
                    ("cos_t2" variable nil (reparse-symbol function_parameters) [461 467])
                    ("sin_t2" variable nil (reparse-symbol function_parameters) [469 475]))                  )
                nil [383 1229])
            ("get_normal_points" function
               (:documentation "
    For a line passing through (*cx*, *cy*) and having a angle *t*, return
    locations of the two points located along its perpendicular line at the
    distance of *length*.
    "
                :arguments 
                  ( ("cx" variable nil (reparse-symbol function_parameters) [1253 1255])
                    ("cy" variable nil (reparse-symbol function_parameters) [1257 1259])
                    ("cos_t" variable nil (reparse-symbol function_parameters) [1261 1266])
                    ("sin_t" variable nil (reparse-symbol function_parameters) [1268 1273])
                    ("length" variable nil (reparse-symbol function_parameters) [1275 1281]))                  )
                nil [1231 1740])
            ("_de_casteljau1" function (:arguments 
              ( ("beta" variable nil (reparse-symbol function_parameters) [1891 1895])
                ("t" variable nil (reparse-symbol function_parameters) [1897 1898]))              ) nil [1872 1973])
            ("split_de_casteljau" function
               (:documentation "split a bezier segment defined by its controlpoints *beta*
    into two separate segment divided at *t* and return their control points.

    "
                :arguments 
                  ( ("beta" variable nil (reparse-symbol function_parameters) [1998 2002])
                    ("t" variable nil (reparse-symbol function_parameters) [2004 2005]))                  )
                nil [1975 2485])
            ("find_bezier_t_intersecting_with_closedpath" function
               (:documentation " Find a parameter t0 and t1 of the given bezier path which
    bounds the intersecting points with a provided closed
    path(*inside_closedpath*). Search starts from *t0* and *t1* and it
    uses a simple bisecting algorithm therefore one of the end point
    must be inside the path while the orther doesn't. The search stop
    when |t0-t1| gets smaller than the given tolerence.
    value for

    - bezier_point_at_t : a function which returns x, y coordinates at *t*

    - inside_closedpath : return True if the point is insed the path

    "
                :arguments 
                  ( ("bezier_point_at_t" variable nil (reparse-symbol function_parameters) [2602 2619])
                    ("inside_closedpath" variable nil (reparse-symbol function_parameters) [2668 2685])
                    ("t0" variable nil (reparse-symbol function_parameters) [2734 2736])
                    ("t1" variable nil (reparse-symbol function_parameters) [2741 2743])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [2748 2757]))                  )
                nil [2555 4315])
            ("BezierSegment" type
               (:documentation "
    A simple class of a 2-dimensional bezier segment
    "
                :superclasses ("object")
                :members 
                  ( ("_binom_coeff" variable nil (reparse-symbol indented_block_body) [4517 4653])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *control_points* : location of contol points. It needs have a
         shpae of n * 2, where n is the order of the bezier line. 1<=
         n <= 3 is supported.
        \"\"\"" code nil (reparse-symbol indented_block_body) [4703 4888])
                            ("_o" variable nil (reparse-symbol indented_block_body) [4897 4921])
                            ("self" variable nil (reparse-symbol indented_block_body) [4930 4958])
                            ("_coeff" variable nil (reparse-symbol indented_block_body) [4967 5010])
                            ("_control_points" variable nil (reparse-symbol indented_block_body) [5020 5064])
                            ("xx" variable nil (reparse-symbol indented_block_body) [5073 5099])
                            ("yy" variable nil (reparse-symbol indented_block_body) [5108 5134])
                            ("self" code nil (reparse-symbol indented_block_body) [5144 5166])
                            ("self" code nil (reparse-symbol indented_block_body) [5175 5197]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4672 4676])
                            ("control_points" variable nil (reparse-symbol function_parameters) [4678 4692]))                          
                        :documentation "
        *control_points* : location of contol points. It needs have a
         shpae of n * 2, where n is the order of the bezier line. 1<=
         n <= 3 is supported.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4659 5198])
                    ("point_at_t" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5218 5222])
                            ("t" variable nil (reparse-symbol function_parameters) [5224 5225]))                          )
                        (reparse-symbol indented_block_body) [5203 5502]))                  
                :type "class")
                nil [4317 5502])
            ("split_bezier_intersecting_with_closedpath" function
               (:documentation "
    bezier : control points of the bezier segment
    inside_closedpath : a function which returns true if the point is inside
                        the path
    "
                :arguments 
                  ( ("bezier" variable nil (reparse-symbol function_parameters) [5550 5556])
                    ("inside_closedpath" variable nil (reparse-symbol function_parameters) [5604 5621])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [5669 5678]))                  )
                nil [5504 6250])
            ("find_r_to_boundary_of_closedpath" function
               (:documentation "
    Find a radius r (centered at *xy*) between *rmin* and *rmax* at
    which it intersect with the path.

    inside_closedpath : function
    cx, cy : center
    cos_t, sin_t : cosine and sine for the angle
    rmin, rmax :
    "
                :arguments 
                  ( ("inside_closedpath" variable nil (reparse-symbol function_parameters) [6289 6306])
                    ("xy" variable nil (reparse-symbol function_parameters) [6308 6310])
                    ("cos_t" variable nil (reparse-symbol function_parameters) [6349 6354])
                    ("sin_t" variable nil (reparse-symbol function_parameters) [6356 6361])
                    ("rmin" variable nil (reparse-symbol function_parameters) [6400 6404])
                    ("rmax" variable nil (reparse-symbol function_parameters) [6409 6413])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [6418 6427]))                  )
                nil [6252 6960])
            ("split_path_inout" function
               (:documentation " divide a path into two segment at the point where inside(x, y)
    becomes False.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [7006 7010])
                    ("inside" variable nil (reparse-symbol function_parameters) [7012 7018])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [7020 7029])
                    ("reorder_inout" variable nil (reparse-symbol function_parameters) [7036 7049]))                  )
                nil [6985 9108])
            ("inside_circle" function (:arguments 
              ( ("cx" variable nil (reparse-symbol function_parameters) [9128 9130])
                ("cy" variable nil (reparse-symbol function_parameters) [9132 9134])
                ("r" variable nil (reparse-symbol function_parameters) [9136 9137]))              ) nil [9110 9255])
            ("get_cos_sin" function (:arguments 
              ( ("x0" variable nil (reparse-symbol function_parameters) [9299 9301])
                ("y0" variable nil (reparse-symbol function_parameters) [9303 9305])
                ("x1" variable nil (reparse-symbol function_parameters) [9307 9309])
                ("y1" variable nil (reparse-symbol function_parameters) [9311 9313]))              ) nil [9283 9478])
            ("check_if_parallel" function
               (:documentation " returns
       * 1 if two lines are parralel in same direction
       * -1 if two lines are parralel in opposite direction
       * 0 otherwise
    "
                :arguments 
                  ( ("dx1" variable nil (reparse-symbol function_parameters) [9502 9505])
                    ("dy1" variable nil (reparse-symbol function_parameters) [9507 9510])
                    ("dx2" variable nil (reparse-symbol function_parameters) [9512 9515])
                    ("dy2" variable nil (reparse-symbol function_parameters) [9517 9520])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [9522 9531]))                  )
                nil [9480 9943])
            ("get_parallels" function
               (:documentation "
    Given the quadratic bezier control points *bezier2*, returns
    control points of quadratic bezier lines roughly parallel to given
    one separated by *width*.
    "
                :arguments 
                  ( ("bezier2" variable nil (reparse-symbol function_parameters) [9963 9970])
                    ("width" variable nil (reparse-symbol function_parameters) [9972 9977]))                  )
                nil [9945 12904])
            ("find_control_points" function
               (:documentation " Find control points of the bezier line throught c1, mm, c2. We
    simply assume that c1, mm, c2 which have parametric value 0, 0.5, and 1.
    "
                :arguments 
                  ( ("c1x" variable nil (reparse-symbol function_parameters) [12930 12933])
                    ("c1y" variable nil (reparse-symbol function_parameters) [12935 12938])
                    ("mmx" variable nil (reparse-symbol function_parameters) [12940 12943])
                    ("mmy" variable nil (reparse-symbol function_parameters) [12945 12948])
                    ("c2x" variable nil (reparse-symbol function_parameters) [12950 12953])
                    ("c2y" variable nil (reparse-symbol function_parameters) [12955 12958]))                  )
                nil [12906 13245])
            ("make_wedged_bezier2" function
               (:documentation "
    Being similar to get_parallels, returns control points of two quadrativ
    bezier lines having a width roughly parralel to given one separated by
    *width*.
    "
                :arguments 
                  ( ("bezier2" variable nil (reparse-symbol function_parameters) [13271 13278])
                    ("width" variable nil (reparse-symbol function_parameters) [13280 13285])
                    ("w1" variable nil (reparse-symbol function_parameters) [13287 13289])
                    ("wm" variable nil (reparse-symbol function_parameters) [13294 13296])
                    ("w2" variable nil (reparse-symbol function_parameters) [13302 13304]))                  )
                nil [13247 15193])
            ("make_path_regular" function
               (:documentation "
    fill in the codes if None.
    "
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [15217 15218]))                  )
                nil [15195 15468])
            ("concatenate_paths" function
               (:documentation "
    concatenate list of paths into a single path.
    "
                :arguments 
                  ( ("paths" variable nil (reparse-symbol function_parameters) [15492 15497]))                  )
                nil [15470 15820]))          
      :file "bezier.py"
      :pointmax 15820
      :fsize 15819
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"

Numerical python functions written for compatability with MATLAB
commands with the same names.

MATLAB compatible functions
---------------------------

:func:`cohere`
    Coherence (normalized cross spectral density)

:func:`csd`
    Cross spectral density using Welch's average periodogram

:func:`detrend`
    Remove the mean or best fit line from an array

:func:`find`
    Return the indices where some condition is true;
    numpy.nonzero is similar but more general.

:func:`griddata`
    Interpolate irregularly distributed data to a
    regular grid.

:func:`prctile`
    Find the percentiles of a sequence

:func:`prepca`
    Principal Component Analysis

:func:`psd`
    Power spectral density using Welch's average periodogram

:func:`rk4`
    A 4th order runge kutta integrator for 1D or ND systems

:func:`specgram`
    Spectrogram (spectrum over segments of time)

Miscellaneous functions
-----------------------

Functions that don't exist in MATLAB, but are useful anyway:

:func:`cohere_pairs`
    Coherence over all pairs.  This is not a MATLAB function, but we
    compute coherence a lot in my lab, and we compute it for a lot of
    pairs.  This function is optimized to do this efficiently by
    caching the direct FFTs.

:func:`rk4`
    A 4th order Runge-Kutta ODE integrator in case you ever find
    yourself stranded without scipy (and the far superior
    scipy.integrate tools)

:func:`contiguous_regions`
    Return the indices of the regions spanned by some logical mask

:func:`cross_from_below`
    Return the indices where a 1D array crosses a threshold from below

:func:`cross_from_above`
    Return the indices where a 1D array crosses a threshold from above

:func:`complex_spectrum`
    Return the complex-valued frequency spectrum of a signal

:func:`magnitude_spectrum`
    Return the magnitude of the frequency spectrum of a signal

:func:`angle_spectrum`
    Return the angle (wrapped phase) of the frequency spectrum of a signal

:func:`phase_spectrum`
    Return the phase (unwrapped angle) of the frequency spectrum of a signal

:func:`detrend_mean`
    Remove the mean from a line.

:func:`demean`
    Remove the mean from a line. This function is the same as
    :func:`detrend_mean` except for the default *axis*.

:func:`detrend_linear`
    Remove the best fit line from a line.

:func:`detrend_none`
    Return the original line.

:func:`stride_windows`
    Get all windows in an array in a memory-efficient manner

:func:`stride_repeat`
    Repeat an array in a memory-efficient manner

:func:`apply_window`
    Apply a window along a given axis


record array helper functions
-----------------------------

A collection of helper methods for numpyrecord arrays

.. _htmlonly:

    See :ref:`misc-examples-index`

:func:`rec2txt`
    Pretty print a record array

:func:`rec2csv`
    Store record array in CSV file

:func:`csv2rec`
    Import record array from CSV file with type inspection

:func:`rec_append_fields`
    Adds  field(s)/array(s) to record array

:func:`rec_drop_fields`
    Drop fields from record array

:func:`rec_join`
    Join two record arrays on sequence of fields

:func:`recs_join`
    A simple join of multiple recarrays using a single column as a key

:func:`rec_groupby`
    Summarize data by groups (similar to SQL GROUP BY)

:func:`rec_summarize`
    Helper code to filter rec array fields into new fields

For the rec viewer functions(e rec2csv), there are a bunch of Format
objects you can pass into the functions that will do things like color
negative values red, set percent formatting and scaling, etc.

Example usage::

    r = csv2rec('somefile.csv', checkrows=0)

    formatd = dict(
        weight = FormatFloat(2),
        change = FormatPercent(2),
        cost   = FormatThousands(2),
        )


    rec2excel(r, 'test.xls', formatd=formatd)
    rec2csv(r, 'test.csv', formatd=formatd)
    scroll = rec2gtk(r, formatd=formatd)

    win = gtk.Window()
    win.set_size_request(600,800)
    win.add(scroll)
    win.show_all()
    gtk.main()


\"\"\"" code nil nil [1 4047])
            ("" code nil nil [4072 4157])
            ("six" include nil nil [4159 4169])
            ("six.moves" include nil nil [4170 4208])
            ("copy" include nil nil [4210 4221])
            ("csv" include nil nil [4222 4232])
            ("operator" include nil nil [4233 4248])
            ("os" include nil nil [4249 4258])
            ("warnings" include nil nil [4259 4274])
            ("numpy" include nil nil [4276 4294])
            ("matplotlib" include nil nil [4295 4325])
            ("matplotlib.cbook" include nil nil [4327 4359])
            ("matplotlib" include nil nil [4360 4392])
            ("matplotlib.path" include nil nil [4393 4425])
            ("math" include nil nil [4426 4437])
            ("ma" variable nil nil [4439 4449])
            ("if" code nil nil [4451 4478])
            ("logspace" function (:arguments 
              ( ("xmin" variable nil (reparse-symbol function_parameters) [4493 4497])
                ("xmax" variable nil (reparse-symbol function_parameters) [4499 4503])
                ("N" variable nil (reparse-symbol function_parameters) [4505 4506]))              ) nil [4480 4654])
            ("_norm" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4666 4667]))              ) nil [4656 4746])
            ("window_hanning" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4767 4768]))              ) nil [4748 4976])
            ("window_none" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4994 4995]))              ) nil [4978 5182])
            ("apply_window" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5201 5202])
                ("window" variable nil (reparse-symbol function_parameters) [5204 5210])
                ("axis" variable nil (reparse-symbol function_parameters) [5212 5216])
                ("return_window" variable nil (reparse-symbol function_parameters) [5220 5233]))              ) nil [5184 6748])
            ("detrend" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6762 6763])
                ("key" variable nil (reparse-symbol function_parameters) [6765 6768])
                ("axis" variable nil (reparse-symbol function_parameters) [6775 6779]))              ) nil [6750 8989])
            ("demean" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [9002 9003])
                ("axis" variable nil (reparse-symbol function_parameters) [9005 9009]))              ) nil [8991 9653])
            ("detrend_mean" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [9672 9673])
                ("axis" variable nil (reparse-symbol function_parameters) [9675 9679]))              ) nil [9655 10814])
            ("detrend_none" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [10833 10834])
                ("axis" variable nil (reparse-symbol function_parameters) [10836 10840]))              ) nil [10816 11507])
            ("detrend_linear" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [11528 11529]))              ) nil [11509 12625])
            ("stride_windows" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [12646 12647])
                ("n" variable nil (reparse-symbol function_parameters) [12649 12650])
                ("noverlap" variable nil (reparse-symbol function_parameters) [12652 12660])
                ("axis" variable nil (reparse-symbol function_parameters) [12667 12671]))              ) nil [12627 14640])
            ("stride_repeat" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [14660 14661])
                ("n" variable nil (reparse-symbol function_parameters) [14663 14664])
                ("axis" variable nil (reparse-symbol function_parameters) [14666 14670]))              ) nil [14642 16123])
            ("_spectral_helper" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [16146 16147])
                ("y" variable nil (reparse-symbol function_parameters) [16149 16150])
                ("NFFT" variable nil (reparse-symbol function_parameters) [16157 16161])
                ("Fs" variable nil (reparse-symbol function_parameters) [16168 16170])
                ("detrend_func" variable nil (reparse-symbol function_parameters) [16177 16189])
                ("window" variable nil (reparse-symbol function_parameters) [16217 16223])
                ("noverlap" variable nil (reparse-symbol function_parameters) [16230 16238])
                ("pad_to" variable nil (reparse-symbol function_parameters) [16245 16251])
                ("sides" variable nil (reparse-symbol function_parameters) [16279 16284])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [16291 16304])
                ("mode" variable nil (reparse-symbol function_parameters) [16311 16315]))              ) nil [16125 21801])
            ("_single_spectrum_helper" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [21831 21832])
                ("mode" variable nil (reparse-symbol function_parameters) [21834 21838])
                ("Fs" variable nil (reparse-symbol function_parameters) [21840 21842])
                ("window" variable nil (reparse-symbol function_parameters) [21849 21855])
                ("pad_to" variable nil (reparse-symbol function_parameters) [21862 21868])
                ("sides" variable nil (reparse-symbol function_parameters) [21903 21908]))              ) nil [21803 22883])
            ("docstring" code nil nil [22951 24043])
            ("docstring" code nil nil [24046 24602])
            ("docstring" code nil nil [24605 26630])
            ("psd" function
               (:decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [26667 26668])
                    ("NFFT" variable nil (reparse-symbol function_parameters) [26670 26674])
                    ("Fs" variable nil (reparse-symbol function_parameters) [26681 26683])
                    ("detrend" variable nil (reparse-symbol function_parameters) [26690 26697])
                    ("window" variable nil (reparse-symbol function_parameters) [26704 26710])
                    ("noverlap" variable nil (reparse-symbol function_parameters) [26725 26733])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [26740 26746])
                    ("sides" variable nil (reparse-symbol function_parameters) [26753 26758])
                    ("scale_by_freq" variable nil (reparse-symbol function_parameters) [26765 26778]))                  )
                nil [26633 28736])
            ("csd" function
               (:documentation "
    Compute the cross-spectral density.

    Call signature::

        csd(x, y, NFFT=256, Fs=2, detrend=mlab.detrend_none,
            window=mlab.window_hanning, noverlap=0, pad_to=None,
            sides='default', scale_by_freq=None)

    The cross spectral density :math:`P_{xy}` by Welch's average
    periodogram method.  The vectors *x* and *y* are divided into
    *NFFT* length segments.  Each segment is detrended by function
    *detrend* and windowed by function *window*.  *noverlap* gives
    the length of the overlap between segments.  The product of
    the direct FFTs of *x* and *y* are averaged over each segment
    to compute :math:`P_{xy}`, with a scaling to correct for power
    loss due to windowing.

    If len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero
    padded to *NFFT*.

    Parameters
    ----------
    x, y : 1-D arrays or sequences
        Arrays or sequences containing the data

    %(Spectral)s

    %(PSD)s

    noverlap : integer
        The number of points of overlap between segments.
        The default value is 0 (no overlap).

    Returns
    -------
    Pxy : 1-D array
        The values for the cross spectrum `P_{xy}` before scaling (real valued)

    freqs : 1-D array
        The frequencies corresponding to the elements in *Pxy*

    References
    ----------
    Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John
    Wiley & Sons (1986)

    See Also
    --------
    :func:`psd`
        :func:`psd` is the equivalent to setting y=x.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [28772 28773])
                    ("y" variable nil (reparse-symbol function_parameters) [28775 28776])
                    ("NFFT" variable nil (reparse-symbol function_parameters) [28778 28782])
                    ("Fs" variable nil (reparse-symbol function_parameters) [28789 28791])
                    ("detrend" variable nil (reparse-symbol function_parameters) [28798 28805])
                    ("window" variable nil (reparse-symbol function_parameters) [28812 28818])
                    ("noverlap" variable nil (reparse-symbol function_parameters) [28833 28841])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [28848 28854])
                    ("sides" variable nil (reparse-symbol function_parameters) [28861 28866])
                    ("scale_by_freq" variable nil (reparse-symbol function_parameters) [28873 28886]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [28738 30975])
            ("complex_spectrum" function
               (:documentation "
    Compute the complex-valued frequency spectrum of *x*.  Data is padded to a
    length of *pad_to* and the windowing function *window* is applied to the
    signal.

    Parameters
    ----------
    x : 1-D array or sequence
        Array or sequence containing the data

    %(Spectral)s

    %(Single_Spectrum)s

    Returns
    -------
    spectrum : 1-D array
        The values for the complex spectrum (complex valued)

    freqs : 1-D array
        The frequencies corresponding to the elements in *spectrum*

    See Also
    --------
    :func:`magnitude_spectrum`
        :func:`magnitude_spectrum` returns the absolute value of this function.

    :func:`angle_spectrum`
        :func:`angle_spectrum` returns the angle of this function.

    :func:`phase_spectrum`
        :func:`phase_spectrum` returns the phase (unwrapped angle) of this
        function.

    :func:`specgram`
        :func:`specgram` can return the complex spectrum of segments within the
        signal.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [31024 31025])
                    ("Fs" variable nil (reparse-symbol function_parameters) [31027 31029])
                    ("window" variable nil (reparse-symbol function_parameters) [31036 31042])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [31049 31055])
                    ("sides" variable nil (reparse-symbol function_parameters) [31083 31088]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [30977 32245])
            ("magnitude_spectrum" function
               (:documentation "
    Compute the magnitude (absolute value) of the frequency spectrum of
    *x*.  Data is padded to a length of *pad_to* and the windowing function
    *window* is applied to the signal.

    Parameters
    ----------
    x : 1-D array or sequence
        Array or sequence containing the data

    %(Spectral)s

    %(Single_Spectrum)s

    Returns
    -------
    spectrum : 1-D array
        The values for the magnitude spectrum (real valued)

    freqs : 1-D array
        The frequencies corresponding to the elements in *spectrum*

    See Also
    --------
    :func:`psd`
        :func:`psd` returns the power spectral density.

    :func:`complex_spectrum`
        This function returns the absolute value of :func:`complex_spectrum`.

    :func:`angle_spectrum`
        :func:`angle_spectrum` returns the angles of the corresponding
        frequencies.

    :func:`phase_spectrum`
        :func:`phase_spectrum` returns the phase (unwrapped angle) of the
        corresponding frequencies.

    :func:`specgram`
        :func:`specgram` can return the magnitude spectrum of segments within
        the signal.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [32296 32297])
                    ("Fs" variable nil (reparse-symbol function_parameters) [32299 32301])
                    ("window" variable nil (reparse-symbol function_parameters) [32308 32314])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [32321 32327])
                    ("sides" variable nil (reparse-symbol function_parameters) [32357 32362]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [32247 33651])
            ("angle_spectrum" function
               (:documentation "
    Compute the angle of the frequency spectrum (wrapped phase spectrum) of
    *x*.  Data is padded to a length of *pad_to* and the windowing function
    *window* is applied to the signal.

    Parameters
    ----------
    x : 1-D array or sequence
        Array or sequence containing the data

    %(Spectral)s

    %(Single_Spectrum)s

    Returns
    -------
    spectrum : 1-D array
        The values for the angle spectrum in radians (real valued)

    freqs : 1-D array
        The frequencies corresponding to the elements in *spectrum*

    See Also
    --------
    :func:`complex_spectrum`
        This function returns the angle value of :func:`complex_spectrum`.

    :func:`magnitude_spectrum`
        :func:`angle_spectrum` returns the magnitudes of the corresponding
        frequencies.

    :func:`phase_spectrum`
        :func:`phase_spectrum` returns the unwrapped version of this function.

    :func:`specgram`
        :func:`specgram` can return the angle spectrum of segments within the
        signal.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [33698 33699])
                    ("Fs" variable nil (reparse-symbol function_parameters) [33701 33703])
                    ("window" variable nil (reparse-symbol function_parameters) [33710 33716])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [33723 33729])
                    ("sides" variable nil (reparse-symbol function_parameters) [33755 33760]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [33653 34954])
            ("phase_spectrum" function
               (:documentation "
    Compute the phase of the frequency spectrum (unwrapped angle spectrum) of
    *x*.  Data is padded to a length of *pad_to* and the windowing function
    *window* is applied to the signal.

    Parameters
    ----------
    x : 1-D array or sequence
        Array or sequence containing the data

    %(Spectral)s

    %(Single_Spectrum)s

    Returns
    -------
    spectrum : 1-D array
        The values for the phase spectrum in radians (real valued)

    freqs : 1-D array
        The frequencies corresponding to the elements in *spectrum*

    See Also
    --------
    :func:`complex_spectrum`
        This function returns the angle value of :func:`complex_spectrum`.

    :func:`magnitude_spectrum`
        :func:`magnitude_spectrum` returns the magnitudes of the corresponding
        frequencies.

    :func:`angle_spectrum`
        :func:`angle_spectrum` returns the wrapped version of this function.

    :func:`specgram`
        :func:`specgram` can return the phase spectrum of segments within the
        signal.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [35001 35002])
                    ("Fs" variable nil (reparse-symbol function_parameters) [35004 35006])
                    ("window" variable nil (reparse-symbol function_parameters) [35013 35019])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [35026 35032])
                    ("sides" variable nil (reparse-symbol function_parameters) [35058 35063]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [34956 36261])
            ("specgram" function
               (:documentation "
    Compute a spectrogram.

    Compute and plot a spectrogram of data in x.  Data are split into
    NFFT length segments and the spectrum of each section is
    computed.  The windowing function window is applied to each
    segment, and the amount of overlap of each segment is
    specified with noverlap.

    Parameters
    ----------
    x : array_like
        1-D array or sequence.

    %(Spectral)s

    %(PSD)s

    noverlap : int, optional
        The number of points of overlap between blocks.  The default
        value is 128.
    mode : str, optional
        What sort of spectrum to use, default is 'psd'.
            'psd'
                Returns the power spectral density.

            'complex'
                Returns the complex-valued frequency spectrum.

            'magnitude'
                Returns the magnitude spectrum.

            'angle'
                Returns the phase spectrum without unwrapping.

            'phase'
                Returns the phase spectrum with unwrapping.

    Returns
    -------
    spectrum : array_like
        2-D array, columns are the periodograms of successive segments.

    freqs : array_like
        1-D array, frequencies corresponding to the rows in *spectrum*.

    t : array_like
        1-D array, the times corresponding to midpoints of segments
        (i.e the columns in *spectrum*).

    See Also
    --------
    psd : differs in the overlap and in the return values.
    complex_spectrum : similar, but with complex valued frequencies.
    magnitude_spectrum : similar single segment when mode is 'magnitude'.
    angle_spectrum : similar to single segment when mode is 'angle'.
    phase_spectrum : similar to single segment when mode is 'phase'.

    Notes
    -----
    detrend and scale_by_freq only apply when *mode* is set to 'psd'.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [36302 36303])
                    ("NFFT" variable nil (reparse-symbol function_parameters) [36305 36309])
                    ("Fs" variable nil (reparse-symbol function_parameters) [36316 36318])
                    ("detrend" variable nil (reparse-symbol function_parameters) [36325 36332])
                    ("window" variable nil (reparse-symbol function_parameters) [36339 36345])
                    ("noverlap" variable nil (reparse-symbol function_parameters) [36365 36373])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [36380 36386])
                    ("sides" variable nil (reparse-symbol function_parameters) [36393 36398])
                    ("scale_by_freq" variable nil (reparse-symbol function_parameters) [36405 36418])
                    ("mode" variable nil (reparse-symbol function_parameters) [36438 36442]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [36263 38978])
            ("_coh_error" variable nil nil [38980 39118])
            ("cohere" function
               (:documentation "
    The coherence between *x* and *y*.  Coherence is the normalized
    cross spectral density:

    .. math::

        C_{xy} = \\\\frac{|P_{xy}|^2}{P_{xx}P_{yy}}

    Parameters
    ----------
    x, y
        Array or sequence containing the data

    %(Spectral)s

    %(PSD)s

    noverlap : integer
        The number of points of overlap between blocks.  The default value
        is 0 (no overlap).

    Returns
    -------
    The return value is the tuple (*Cxy*, *f*), where *f* are the
    frequencies of the coherence vector. For cohere, scaling the
    individual densities by the sampling frequency has no effect,
    since the factors cancel out.

    See Also
    --------
    :func:`psd`, :func:`csd` :
        For information about the methods used to compute :math:`P_{xy}`,
        :math:`P_{xx}` and :math:`P_{yy}`.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [39158 39159])
                    ("y" variable nil (reparse-symbol function_parameters) [39161 39162])
                    ("NFFT" variable nil (reparse-symbol function_parameters) [39164 39168])
                    ("Fs" variable nil (reparse-symbol function_parameters) [39174 39176])
                    ("detrend" variable nil (reparse-symbol function_parameters) [39180 39187])
                    ("window" variable nil (reparse-symbol function_parameters) [39202 39208])
                    ("noverlap" variable nil (reparse-symbol function_parameters) [39236 39244])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [39248 39254])
                    ("sides" variable nil (reparse-symbol function_parameters) [39261 39266])
                    ("scale_by_freq" variable nil (reparse-symbol function_parameters) [39278 39291]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [39121 40625])
            ("donothing_callback" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [40650 40655]))              ) nil [40627 40667])
            ("cohere_pairs" function
               (:documentation "
    Compute the coherence and phase for all pairs *ij*, in *X*.

    *X* is a *numSamples* * *numCols* array

    *ij* is a list of tuples.  Each tuple is a pair of indexes into
    the columns of X for which you want to compute coherence.  For
    example, if *X* has 64 columns, and you want to compute all
    nonredundant pairs, define *ij* as::

      ij = []
      for i in range(64):
          for j in range(i+1,64):
              ij.append( (i,j) )

    *preferSpeedOverMemory* is an optional bool. Defaults to true. If
    False, limits the caching by only making one, rather than two,
    complex cache arrays. This is useful if memory becomes critical.
    Even when *preferSpeedOverMemory* is False, :func:`cohere_pairs`
    will still give significant performace gains over calling
    :func:`cohere` for each pair, and will use subtantially less
    memory than if *preferSpeedOverMemory* is True.  In my tests with
    a 43000,64 array over all nonredundant pairs,
    *preferSpeedOverMemory* = True delivered a 33% performance boost
    on a 1.7GHZ Athlon with 512MB RAM compared with
    *preferSpeedOverMemory* = False.  But both solutions were more
    than 10x faster than naively crunching all possible pairs through
    :func:`cohere`.

    Returns
    -------
    Cxy : dictionary of (*i*, *j*) tuples -> coherence vector for
        that pair.  i.e., ``Cxy[(i,j) = cohere(X[:,i], X[:,j])``.
        Number of dictionary keys is ``len(ij)``.

    Phase : dictionary of phases of the cross spectral density at
        each frequency for each pair.  Keys are (*i*, *j*).

    freqs : vector of frequencies, equal in length to either the
         coherence or phase vectors for any (*i*, *j*) key.

    e.g., to make a coherence Bode plot::

          subplot(211)
          plot( freqs, Cxy[(12,19)])
          subplot(212)
          plot( freqs, Phase[(12,19)])

    For a large number of pairs, :func:`cohere_pairs` can be much more
    efficient than just calling :func:`cohere` for each pair, because
    it caches most of the intensive computations.  If :math:`N` is the
    number of pairs, this function is :math:`O(N)` for most of the
    heavy lifting, whereas calling cohere for each pair is
    :math:`O(N^2)`.  However, because of the caching, it is also more
    memory intensive, making 2 additional complex arrays with
    approximately the same number of elements as *X*.

    See :file:`test/cohere_pairs_test.py` in the src tree for an
    example script that shows that this :func:`cohere_pairs` and
    :func:`cohere` give the same results for a given pair.

    See Also
    --------
    :func:`psd`
        For information about the methods used to compute :math:`P_{xy}`,
        :math:`P_{xx}` and :math:`P_{yy}`.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [40686 40687])
                    ("ij" variable nil (reparse-symbol function_parameters) [40689 40691])
                    ("NFFT" variable nil (reparse-symbol function_parameters) [40693 40697])
                    ("Fs" variable nil (reparse-symbol function_parameters) [40703 40705])
                    ("detrend" variable nil (reparse-symbol function_parameters) [40709 40716])
                    ("window" variable nil (reparse-symbol function_parameters) [40748 40754])
                    ("noverlap" variable nil (reparse-symbol function_parameters) [40771 40779])
                    ("preferSpeedOverMemory" variable nil (reparse-symbol function_parameters) [40800 40821])
                    ("progressCallback" variable nil (reparse-symbol function_parameters) [40845 40861])
                    ("returnPxx" variable nil (reparse-symbol function_parameters) [40899 40908]))                  )
                nil [40669 46324])
            ("entropy" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [46338 46339])
                ("bins" variable nil (reparse-symbol function_parameters) [46341 46345]))              ) nil [46326 47059])
            ("normpdf" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [47073 47074])
                ("args" variable nil (reparse-symbol function_parameters) [47076 47081]))              ) nil [47061 47256])
            ("find" function (:arguments 
              ( ("condition" variable nil (reparse-symbol function_parameters) [47267 47276]))              ) nil [47258 47393])
            ("longest_contiguous_ones" function
               (:documentation "
    Return the indices of the longest stretch of contiguous ones in *x*,
    assuming *x* is a vector of zeros and ones.  If there are two
    equally long stretches, pick the first.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [47423 47424]))                  )
                nil [47395 48079])
            ("longest_ones" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [48098 48099]))              ) nil [48081 48184])
            ("PCA" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        compute the SVD of a and store data for PCA.  Use project to
        project the data onto a reduced set of dimensions

        Parameters
        ----------
        a : np.ndarray
            A numobservations x numdims array
        standardize : bool
            True if input data are to be standardized. If False, only centering
            will be carried out.

        Attributes
        ----------
        a
            A centered unit sigma version of input ``a``.

        numrows, numcols
            The dimensions of ``a``.

        mu
            A numdims array of means of ``a``. This is the vector that points
            to the origin of PCA space.

        sigma
            A numdims array of standard deviation of ``a``.

        fracs
            The proportion of variance of each of the principal components.

        s
            The actual eigenvalues of the decomposition.

        Wt
            The weight vector for projecting a numdims point or array into
            PCA space.

        Y
            A projected into PCA space.

        Notes
        -----
        The factor loadings are in the ``Wt`` factor, i.e., the factor loadings
        for the first principal component are given by ``Wt[0]``. This row is
        also the first eigenvector.

        \"\"\"" code nil (reparse-symbol indented_block_body) [48258 49567])
                            ("n, m" code nil (reparse-symbol indented_block_body) [49576 49590])
                            ("if" code nil (reparse-symbol indented_block_body) [49599 49731])
                            ("self, self" code nil (reparse-symbol indented_block_body) [49740 49773])
                            ("self" variable nil (reparse-symbol indented_block_body) [49782 49806])
                            ("self" variable nil (reparse-symbol indented_block_body) [49815 49841])
                            ("self" variable nil (reparse-symbol indented_block_body) [49850 49880])
                            ("a" variable nil (reparse-symbol indented_block_body) [49890 49908])
                            ("self" variable nil (reparse-symbol indented_block_body) [49918 49928])
                            ("U, s, Vh" code nil (reparse-symbol indented_block_body) [49938 49986])
                            ("self" variable nil (reparse-symbol indented_block_body) [50407 50419])
                            ("Y" variable nil (reparse-symbol indented_block_body) [50471 50492])
                            ("self" variable nil (reparse-symbol indented_block_body) [50501 50511])
                            ("self" variable nil (reparse-symbol indented_block_body) [50552 50565])
                            ("vars" code nil (reparse-symbol indented_block_body) [50639 50666])
                            ("self" code nil (reparse-symbol indented_block_body) [50675 50703]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48222 48226])
                            ("a" variable nil (reparse-symbol function_parameters) [48228 48229])
                            ("standardize" variable nil (reparse-symbol function_parameters) [48231 48242]))                          
                        :documentation "
        compute the SVD of a and store data for PCA.  Use project to
        project the data onto a reduced set of dimensions

        Parameters
        ----------
        a : np.ndarray
            A numobservations x numdims array
        standardize : bool
            True if input data are to be standardized. If False, only centering
            will be carried out.

        Attributes
        ----------
        a
            A centered unit sigma version of input ``a``.

        numrows, numcols
            The dimensions of ``a``.

        mu
            A numdims array of means of ``a``. This is the vector that points
            to the origin of PCA space.

        sigma
            A numdims array of standard deviation of ``a``.

        fracs
            The proportion of variance of each of the principal components.

        s
            The actual eigenvalues of the decomposition.

        Wt
            The weight vector for projecting a numdims point or array into
            PCA space.

        Y
            A projected into PCA space.

        Notes
        -----
        The factor loadings are in the ``Wt`` factor, i.e., the factor loadings
        for the first principal component are given by ``Wt[0]``. This row is
        also the first eigenvector.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48209 50704])
                    ("project" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50721 50725])
                            ("x" variable nil (reparse-symbol function_parameters) [50727 50728])
                            ("minfrac" variable nil (reparse-symbol function_parameters) [50730 50737]))                          )
                        (reparse-symbol indented_block_body) [50709 51294])
                    ("center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51310 51314])
                            ("x" variable nil (reparse-symbol function_parameters) [51316 51317]))                          )
                        (reparse-symbol indented_block_body) [51299 51568])
                    ("_get_colinear" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [51573 52381]))                  
                :type "class")
                nil [48186 52381])
            ("prctile" function
               (:documentation "
    Return the percentiles of *x*.  *p* can either be a sequence of
    percentile values or a scalar.  If *p* is a sequence, the ith
    element of the return sequence is the *p*(i)-th percentile of *x*.
    If *p* is a scalar, the largest value of *x* less than or equal to
    the *p* percentage point in the sequence is returned.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [52395 52396])
                    ("p" variable nil (reparse-symbol function_parameters) [52398 52399]))                  )
                nil [52383 53640])
            ("prctile_rank" function
               (:documentation "
    Return the rank for each element in *x*, return the rank
    0..len(*p*).  e.g., if *p* = (25, 50, 75), the return value will be a
    len(*x*) array with values in [0,1,2,3] where 0 indicates the
    value is less than the 25th percentile, 1 indicates the value is
    >= the 25th and < 50th percentile, ... and 3 indicates the value
    is above the 75th percentile cutoff.

    *p* is either an array of percentiles in [0..100] or a scalar which
    indicates how many quantiles of data you want ranked.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [53659 53660])
                    ("p" variable nil (reparse-symbol function_parameters) [53662 53663]))                  )
                nil [53642 54503])
            ("center_matrix" function
               (:documentation "
    Return the matrix *M* with each row having zero mean and unit std.

    If *dim* = 1 operate on columns instead of rows.  (*dim* is
    opposite to the numpy axis kwarg.)
    "
                :arguments 
                  ( ("M" variable nil (reparse-symbol function_parameters) [54523 54524])
                    ("dim" variable nil (reparse-symbol function_parameters) [54526 54529]))                  )
                nil [54505 54935])
            ("rk4" function
               (:documentation "
    Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta.
    This is a toy implementation which may be useful if you find
    yourself stranded on a system w/o scipy.  Otherwise use
    :func:`scipy.integrate`.

    Parameters
    ----------
    y0
        initial state vector

    t
        sample times

    derivs
        returns the derivative of the system and has the
        signature ``dy = derivs(yi, ti)``

    Examples
    --------

    A 2D system::

        def derivs6(x,t):
            d1 =  x[0] + 2*x[1]
            d2 =  -3*x[0] + 4*x[1]
            return (d1, d2)
        dt = 0.0005
        t = arange(0.0, 2.0, dt)
        y0 = (1,2)
        yout = rk4(derivs6, y0, t)

    A 1D system::

        alpha = 2
        def derivs(x,t):
            return -alpha*x + exp(-t)

        y0 = 1
        yout = rk4(derivs, y0, t)

    If you have access to scipy, you should probably be using the
    scipy.integrate tools rather than this function.
    "
                :arguments 
                  ( ("derivs" variable nil (reparse-symbol function_parameters) [54945 54951])
                    ("y0" variable nil (reparse-symbol function_parameters) [54953 54955])
                    ("t" variable nil (reparse-symbol function_parameters) [54957 54958]))                  )
                nil [54937 56546])
            ("bivariate_normal" function
               (:documentation "
    Bivariate Gaussian distribution for equal shape *X*, *Y*.

    See `bivariate normal
    <http://mathworld.wolfram.com/BivariateNormalDistribution.html>`_
    at mathworld.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [56569 56570])
                    ("Y" variable nil (reparse-symbol function_parameters) [56572 56573])
                    ("sigmax" variable nil (reparse-symbol function_parameters) [56575 56581])
                    ("sigmay" variable nil (reparse-symbol function_parameters) [56587 56593])
                    ("mux" variable nil (reparse-symbol function_parameters) [56620 56623])
                    ("muy" variable nil (reparse-symbol function_parameters) [56629 56632])
                    ("sigmaxy" variable nil (reparse-symbol function_parameters) [56638 56645]))                  )
                nil [56548 57085])
            ("get_xyz_where" function
               (:documentation "
    *Z* and *Cond* are *M* x *N* matrices.  *Z* are data and *Cond* is
    a boolean matrix where some condition is satisfied.  Return value
    is (*x*, *y*, *z*) where *x* and *y* are the indices into *Z* and
    *z* are the values of *Z* at those indices.  *x*, *y*, and *z* are
    1D arrays.
    "
                :arguments 
                  ( ("Z" variable nil (reparse-symbol function_parameters) [57105 57106])
                    ("Cond" variable nil (reparse-symbol function_parameters) [57108 57112]))                  )
                nil [57087 57496])
            ("get_sparse_matrix" function
               (:documentation "
    Return a *M* x *N* sparse matrix with *frac* elements randomly
    filled.
    "
                :arguments 
                  ( ("M" variable nil (reparse-symbol function_parameters) [57520 57521])
                    ("N" variable nil (reparse-symbol function_parameters) [57523 57524])
                    ("frac" variable nil (reparse-symbol function_parameters) [57526 57530]))                  )
                nil [57498 57828])
            ("dist" function
               (:documentation "
    Return the distance between two points.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [57839 57840])
                    ("y" variable nil (reparse-symbol function_parameters) [57842 57843]))                  )
                nil [57830 57951])
            ("dist_point_to_segment" function
               (:documentation "
    Get the distance of a point to a segment.

      *p*, *s0*, *s1* are *xy* sequences

    This algorithm from
    http://geomalgorithms.com/a02-_lines.html
    "
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [57979 57980])
                    ("s0" variable nil (reparse-symbol function_parameters) [57982 57984])
                    ("s1" variable nil (reparse-symbol function_parameters) [57986 57988]))                  )
                nil [57953 58493])
            ("segments_intersect" function
               (:documentation "
    Return *True* if *s1* and *s2* intersect.
    *s1* and *s2* are defined as::

      s1: (x1, y1), (x2, y2)
      s2: (x3, y3), (x4, y4)
    "
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [58518 58520])
                    ("s2" variable nil (reparse-symbol function_parameters) [58522 58524]))                  )
                nil [58495 59036])
            ("fftsurr" function
               (:documentation "
    Compute an FFT phase randomized surrogate of *x*.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [59050 59051])
                    ("detrend" variable nil (reparse-symbol function_parameters) [59053 59060])
                    ("window" variable nil (reparse-symbol function_parameters) [59075 59081]))                  )
                nil [59038 59404])
            ("movavg" function
               (:documentation "
    Compute the len(*n*) moving average of *x*.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [59417 59418])
                    ("n" variable nil (reparse-symbol function_parameters) [59420 59421]))                  )
                nil [59406 59588])
            ("\"\"\"
A set of convenient utilities for numerical work.

Most of this module requires numpy or is meant to be used with it.

Copyright (c) 2001-2004, Fernando Perez. <Fernando.Perez@colorado.edu>
All rights reserved.

This license was generated from the BSD license template as found in:
http://www.opensource.org/licenses/bsd-license.php

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the IPython project nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

\"\"\"" code nil nil [59737 61544])
            ("exp_safe_MIN" variable nil nil [61739 61787])
            ("exp_safe_MAX" variable nil nil [61788 61826])
            ("exp_safe" function
               (:documentation "
    Compute exponentials which safely underflow to zero.

    Slow, but convenient to use. Note that numpy provides proper
    floating point exception handling with access to the underlying
    hardware.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [61842 61843]))                  )
                nil [61829 62197])
            ("amap" function
               (:documentation "
    amap(function, sequence[, sequence, ...]) -> array.

    Works like :func:`map`, but it returns an array.  This is just a
    convenient shorthand for ``numpy.array(map(...))``.
    "
                :arguments 
                  ( ("fn" variable nil (reparse-symbol function_parameters) [62208 62210])
                    ("args" variable nil (reparse-symbol function_parameters) [62212 62217]))                  )
                nil [62199 62460])
            ("rms_flat" function
               (:documentation "
    Return the root mean square of all the elements of *a*, flattened out.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [62475 62476]))                  )
                nil [62462 62617])
            ("l1norm" function
               (:documentation "
    Return the *l1* norm of *a*, flattened out.

    Implemented as a separate function (not a call to :func:`norm` for speed).
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [62630 62631]))                  )
                nil [62619 62812])
            ("l2norm" function
               (:documentation "
    Return the *l2* norm of *a*, flattened out.

    Implemented as a separate function (not a call to :func:`norm` for speed).
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [62825 62826]))                  )
                nil [62814 63019])
            ("norm_flat" function
               (:documentation "
    norm(a,p=2) -> l-p norm of a.flat

    Return the l-p norm of *a*, considered as a flat array.  This is NOT a true
    matrix norm, since arrays of arbitrary rank are always flattened.

    *p* can be a number or the string 'Infinity' to get the L-infinity norm.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [63035 63036])
                    ("p" variable nil (reparse-symbol function_parameters) [63038 63039]))                  )
                nil [63021 63571])
            ("frange" function
               (:documentation "
    frange([start,] stop[, step, keywords]) -> array of floats

    Return a numpy ndarray containing a progression of floats. Similar to
    :func:`numpy.arange`, but defaults to a closed interval.

    ``frange(x0, x1)`` returns ``[x0, x0+1, x0+2, ..., x1]``; *start*
    defaults to 0, and the endpoint *is included*. This behavior is
    different from that of :func:`range` and
    :func:`numpy.arange`. This is deliberate, since :func:`frange`
    will probably be more useful for generating lists of points for
    function evaluation, and endpoints are often desired in this
    use. The usual behavior of :func:`range` can be obtained by
    setting the keyword *closed* = 0, in this case, :func:`frange`
    basically becomes :func:numpy.arange`.

    When *step* is given, it specifies the increment (or
    decrement). All arguments can be floating point numbers.

    ``frange(x0,x1,d)`` returns ``[x0,x0+d,x0+2d,...,xfin]`` where
    *xfin* <= *x1*.

    :func:`frange` can also be called with the keyword *npts*. This
    sets the number of points the list should contain (and overrides
    the value *step* might have been given). :func:`numpy.arange`
    doesn't offer this option.

    Examples::

      >>> frange(3)
      array([ 0.,  1.,  2.,  3.])
      >>> frange(3,closed=0)
      array([ 0.,  1.,  2.])
      >>> frange(1,6,2)
      array([1, 3, 5])   or 1,3,5,7, depending on floating point vagueries
      >>> frange(1,6.5,npts=5)
      array([ 1.   ,  2.375,  3.75 ,  5.125,  6.5  ])
    "
                :arguments 
                  ( ("xini" variable nil (reparse-symbol function_parameters) [63584 63588])
                    ("xfin" variable nil (reparse-symbol function_parameters) [63590 63594])
                    ("delta" variable nil (reparse-symbol function_parameters) [63601 63606])
                    ("kw" variable nil (reparse-symbol function_parameters) [63613 63617]))                  )
                nil [63573 65925])
            ("identity" function
               (:documentation "
    Returns the identity matrix of shape (*n*, *n*, ..., *n*) (rank *r*).

    For ranks higher than 2, this object is simply a multi-index Kronecker
    delta::

                            /  1  if i0=i1=...=iR,
        id[i0,i1,...,iR] = -|
                            \\  0  otherwise.

    Optionally a *dtype* (or typecode) may be given (it defaults to 'l').

    Since rank defaults to 2, this function behaves in the default case (when
    only *n* is given) like ``numpy.identity(n)`` -- but surprisingly, it is
    much faster.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [65955 65956])
                    ("rank" variable nil (reparse-symbol function_parameters) [65958 65962])
                    ("dtype" variable nil (reparse-symbol function_parameters) [65966 65971])
                    ("typecode" variable nil (reparse-symbol function_parameters) [65977 65985]))                  )
                nil [65942 66723])
            ("base_repr" function
               (:documentation "
    Return the representation of a *number* in any given *base*.
    "
                :arguments 
                  ( ("number" variable nil (reparse-symbol function_parameters) [66739 66745])
                    ("base" variable nil (reparse-symbol function_parameters) [66747 66751])
                    ("padding" variable nil (reparse-symbol function_parameters) [66755 66762]))                  )
                nil [66725 67268])
            ("binary_repr" function
               (:documentation "
    Return the binary representation of the input *number* as a
    string.

    This is more efficient than using :func:`base_repr` with base 2.

    Increase the value of max_length for very large numbers. Note that
    on 32-bit machines, 2**1023 is the largest integer power of 2
    which can be converted to a Python float.
    "
                :arguments 
                  ( ("number" variable nil (reparse-symbol function_parameters) [67286 67292])
                    ("max_length" variable nil (reparse-symbol function_parameters) [67294 67304]))                  )
                nil [67270 68009])
            ("log2" function
               (:documentation "
    Return the log(*x*) in base 2.

    This is a _slow_ function but which is guaranteed to return the correct
    integer value if the input is an integer exact power of 2.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [68020 68021])
                    ("ln2" variable nil (reparse-symbol function_parameters) [68023 68026]))                  )
                nil [68011 68463])
            ("ispower2" function
               (:documentation "
    Returns the log base 2 of *n* if *n* is a power of 2, zero otherwise.

    Note the potential ambiguity if *n* == 1: 2**0 == 1, interpret accordingly.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [68478 68479]))                  )
                nil [68465 68759])
            ("isvector" function
               (:documentation "
    Like the MATLAB function with the same name, returns *True*
    if the supplied numpy array or matrix *X* looks like a vector,
    meaning it has a one non-singleton axis (i.e., it can have
    multiple axes, but all must have length 1, except for one of
    them).

    If you just want to see if the array has 1 axis, use X.ndim == 1.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [68774 68775]))                  )
                nil [68761 69182])
            ("safe_isnan" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [69304 69305]))              ) nil [69289 69563])
            ("safe_isinf" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [69580 69581]))              ) nil [69565 69839])
            ("rec_append_fields" function
               (:documentation "
    Return a new record array with field names populated with data
    from arrays in *arrs*.  If appending a single field, then *names*,
    *arrs* and *dtypes* do not have to be lists. They can just be the
    values themselves.
    "
                :arguments 
                  ( ("rec" variable nil (reparse-symbol function_parameters) [69863 69866])
                    ("names" variable nil (reparse-symbol function_parameters) [69868 69873])
                    ("arrs" variable nil (reparse-symbol function_parameters) [69875 69879])
                    ("dtypes" variable nil (reparse-symbol function_parameters) [69881 69887]))                  )
                nil [69841 71232])
            ("rec_drop_fields" function
               (:documentation "
    Return a new numpy record array with fields in *names* dropped.
    "
                :arguments 
                  ( ("rec" variable nil (reparse-symbol function_parameters) [71254 71257])
                    ("names" variable nil (reparse-symbol function_parameters) [71259 71264]))                  )
                nil [71234 71641])
            ("rec_keep_fields" function
               (:documentation "
    Return a new numpy record array with only fields listed in names
    "
                :arguments 
                  ( ("rec" variable nil (reparse-symbol function_parameters) [71663 71666])
                    ("names" variable nil (reparse-symbol function_parameters) [71668 71673]))                  )
                nil [71643 71955])
            ("rec_groupby" function
               (:documentation "
    *r* is a numpy record array

    *groupby* is a sequence of record array attribute names that
    together form the grouping key.  e.g., ('date', 'productcode')

    *stats* is a sequence of (*attr*, *func*, *outname*) tuples which
    will call ``x = func(attr)`` and assign *x* to the record array
    output with attribute *outname*.  For example::

      stats = ( ('sales', len, 'numsales'), ('sales', np.mean, 'avgsale') )

    Return record array has *dtype* names for each attribute name in
    the *groupby* argument, with the associated group values, and
    for each outname name in the *stats* argument, with the associated
    stat summary output.
    "
                :arguments 
                  ( ("r" variable nil (reparse-symbol function_parameters) [71973 71974])
                    ("groupby" variable nil (reparse-symbol function_parameters) [71976 71983])
                    ("stats" variable nil (reparse-symbol function_parameters) [71985 71990]))                  )
                nil [71957 73532])
            ("rec_summarize" function
               (:documentation "
    *r* is a numpy record array

    *summaryfuncs* is a list of (*attr*, *func*, *outname*) tuples
    which will apply *func* to the array *r*[attr] and assign the
    output to a new attribute name *outname*.  The returned record
    array is identical to *r*, with extra arrays for each element in
    *summaryfuncs*.

    "
                :arguments 
                  ( ("r" variable nil (reparse-symbol function_parameters) [73552 73553])
                    ("summaryfuncs" variable nil (reparse-symbol function_parameters) [73555 73567]))                  )
                nil [73534 74159])
            ("rec_join" function
               (:documentation "
    Join record arrays *r1* and *r2* on *key*; *key* is a tuple of
    field names -- if *key* is a string it is assumed to be a single
    attribute name. If *r1* and *r2* have equal values on all the keys
    in the *key* tuple, then their fields will be merged into a new
    record array containing the intersection of the fields of *r1* and
    *r2*.

    *r1* (also *r2*) must not have any duplicate keys.

    The *jointype* keyword can be 'inner', 'outer', 'leftouter'.  To
    do a rightouter join just reverse *r1* and *r2*.

    The *defaults* keyword is a dictionary filled with
    ``{column_name:default_value}`` pairs.

    The keywords *r1postfix* and *r2postfix* are postfixed to column names
    (other than keys) that are both in *r1* and *r2*.
    "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [74174 74177])
                    ("r1" variable nil (reparse-symbol function_parameters) [74179 74181])
                    ("r2" variable nil (reparse-symbol function_parameters) [74183 74185])
                    ("jointype" variable nil (reparse-symbol function_parameters) [74187 74195])
                    ("defaults" variable nil (reparse-symbol function_parameters) [74205 74213])
                    ("r1postfix" variable nil (reparse-symbol function_parameters) [74220 74229])
                    ("r2postfix" variable nil (reparse-symbol function_parameters) [74248 74257]))                  )
                nil [74161 79128])
            ("recs_join" function
               (:documentation "
    Join a sequence of record arrays on single column key.

    This function only joins a single column of the multiple record arrays

    *key*
      is the column name that acts as a key

    *name*
      is the name of the column that we want to join

    *recs*
      is a list of record arrays to join

    *jointype*
      is a string 'inner' or 'outer'

    *missing*
      is what any missing field is replaced by

    *postfixes*
      if not None, a len recs sequence of postfixes

    returns a record array with columns [rowkey, name0, name1, ... namen-1].
    or if postfixes [PF0, PF1, ..., PFN-1] are supplied,
    [rowkey, namePF0, namePF1, ... namePFN-1].

    Example::

      r = recs_join(\"date\", \"close\", recs=[r0, r1], missing=0.)

    "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [79144 79147])
                    ("name" variable nil (reparse-symbol function_parameters) [79149 79153])
                    ("recs" variable nil (reparse-symbol function_parameters) [79155 79159])
                    ("jointype" variable nil (reparse-symbol function_parameters) [79161 79169])
                    ("missing" variable nil (reparse-symbol function_parameters) [79179 79186])
                    ("postfixes" variable nil (reparse-symbol function_parameters) [79191 79200]))                  )
                nil [79130 80819])
            ("csv2rec" function
               (:documentation "
    Load data from comma/space/tab delimited file in *fname* into a
    numpy record array and return the record array.

    If *names* is *None*, a header row is required to automatically
    assign the recarray names.  The headers will be lower cased,
    spaces will be converted to underscores, and illegal attribute
    name characters removed.  If *names* is not *None*, it is a
    sequence of names to use for the column names.  In this case, it
    is assumed there is no header row.


    - *fname*: can be a filename or a file handle.  Support for gzipped
      files is automatic, if the filename ends in '.gz'

    - *comments*: the character used to indicate the start of a comment
      in the file, or *None* to switch off the removal of comments

    - *skiprows*: is the number of rows from the top to skip

    - *checkrows*: is the number of rows to check to validate the column
      data type.  When set to zero all rows are validated.

    - *converterd*: if not *None*, is a dictionary mapping column number or
      munged column name to a converter function.

    - *names*: if not None, is a list of header names.  In this case, no
      header will be read from the file

    - *missingd* is a dictionary mapping munged column names to field values
      which signify that the field does not contain actual data and should
      be masked, e.g., '0000-00-00' or 'unused'

    - *missing*: a string whose value signals a missing field regardless of
      the column it appears in

    - *use_mrecords*: if True, return an mrecords.fromrecords record array if
      any of the data are missing

    - *dayfirst*: default is False so that MM-DD-YY has precedence over
      DD-MM-YY.  See
      http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47
      for further information.

    - *yearfirst*: default is False so that MM-DD-YY has precedence over
      YY-MM-DD. See
      http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47
      for further information.

      If no rows are found, *None* is returned -- see
      :file:`examples/loadrec.py`
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [80833 80838])
                    ("comments" variable nil (reparse-symbol function_parameters) [80840 80848])
                    ("skiprows" variable nil (reparse-symbol function_parameters) [80854 80862])
                    ("checkrows" variable nil (reparse-symbol function_parameters) [80866 80875])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [80879 80888])
                    ("converterd" variable nil (reparse-symbol function_parameters) [80906 80916])
                    ("names" variable nil (reparse-symbol function_parameters) [80923 80928])
                    ("missing" variable nil (reparse-symbol function_parameters) [80935 80942])
                    ("missingd" variable nil (reparse-symbol function_parameters) [80947 80955])
                    ("use_mrecords" variable nil (reparse-symbol function_parameters) [80974 80986])
                    ("dayfirst" variable nil (reparse-symbol function_parameters) [80994 81002])
                    ("yearfirst" variable nil (reparse-symbol function_parameters) [81010 81019]))                  )
                nil [80821 90339])
            ("FormatObj" type
               (:superclasses ("object")
                :members 
                  ( ("tostr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90460 90464])
                            ("x" variable nil (reparse-symbol function_parameters) [90466 90467]))                          )
                        (reparse-symbol indented_block_body) [90450 90499])
                    ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90514 90518])
                            ("x" variable nil (reparse-symbol function_parameters) [90520 90521]))                          )
                        (reparse-symbol indented_block_body) [90504 90546])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90563 90567])
                            ("s" variable nil (reparse-symbol function_parameters) [90569 90570]))                          )
                        (reparse-symbol indented_block_body) [90551 90590])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90608 90612]))                          
                        :documentation "
        override the hash function of any of the formatters, so that we don't
        create duplicate excel format styles
        ")
                        (reparse-symbol indented_block_body) [90595 90798]))                  
                :type "class")
                nil [90421 90798])
            ("FormatString" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("tostr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90845 90849])
                            ("x" variable nil (reparse-symbol function_parameters) [90851 90852]))                          )
                        (reparse-symbol indented_block_body) [90835 90902]))                  
                :type "class")
                nil [90800 90902])
            ("FormatFormatStr" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [90975 90989]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90955 90959])
                            ("fmt" variable nil (reparse-symbol function_parameters) [90961 90964]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [90942 90990])
                    ("tostr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91005 91009])
                            ("x" variable nil (reparse-symbol function_parameters) [91011 91012]))                          )
                        (reparse-symbol indented_block_body) [90995 91103]))                  
                :type "class")
                nil [90904 91103])
            ("FormatFloat" type
               (:superclasses ("FormatFormatStr")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatFormatStr" code nil (reparse-symbol indented_block_body) [91196 91249])
                            ("self" variable nil (reparse-symbol indented_block_body) [91258 91284])
                            ("self" variable nil (reparse-symbol indented_block_body) [91293 91311]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91158 91162])
                            ("precision" variable nil (reparse-symbol function_parameters) [91164 91173])
                            ("scale" variable nil (reparse-symbol function_parameters) [91177 91182]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91145 91312])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91330 91334]))                          )
                        (reparse-symbol indented_block_body) [91317 91403])
                    ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91418 91422])
                            ("x" variable nil (reparse-symbol function_parameters) [91424 91425]))                          )
                        (reparse-symbol indented_block_body) [91408 91502])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91519 91523])
                            ("s" variable nil (reparse-symbol function_parameters) [91525 91526]))                          )
                        (reparse-symbol indented_block_body) [91507 91564]))                  
                :type "class")
                nil [91105 91564])
            ("FormatInt" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("tostr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91609 91613])
                            ("x" variable nil (reparse-symbol function_parameters) [91615 91616]))                          )
                        (reparse-symbol indented_block_body) [91599 91648])
                    ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91663 91667])
                            ("x" variable nil (reparse-symbol function_parameters) [91669 91670]))                          )
                        (reparse-symbol indented_block_body) [91653 91695])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91712 91716])
                            ("s" variable nil (reparse-symbol function_parameters) [91718 91719]))                          )
                        (reparse-symbol indented_block_body) [91700 91744]))                  
                :type "class")
                nil [91566 91744])
            ("FormatBool" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91789 91793])
                            ("x" variable nil (reparse-symbol function_parameters) [91795 91796]))                          )
                        (reparse-symbol indented_block_body) [91779 91821])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91838 91842])
                            ("s" variable nil (reparse-symbol function_parameters) [91844 91845]))                          )
                        (reparse-symbol indented_block_body) [91826 91871]))                  
                :type "class")
                nil [91746 91871])
            ("FormatPercent" type
               (:superclasses ("FormatFloat")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatFloat" code nil (reparse-symbol indented_block_body) [91952 92001]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91924 91928])
                            ("precision" variable nil (reparse-symbol function_parameters) [91930 91939]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [91911 92002]))                  
                :type "class")
                nil [91873 92002])
            ("FormatThousands" type
               (:superclasses ("FormatFloat")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatFloat" code nil (reparse-symbol indented_block_body) [92085 92134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92057 92061])
                            ("precision" variable nil (reparse-symbol function_parameters) [92063 92072]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92044 92135]))                  
                :type "class")
                nil [92004 92135])
            ("FormatMillions" type
               (:superclasses ("FormatFloat")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatFloat" code nil (reparse-symbol indented_block_body) [92217 92266]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92189 92193])
                            ("precision" variable nil (reparse-symbol function_parameters) [92195 92204]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92176 92267]))                  
                :type "class")
                nil [92137 92267])
            ("FormatDate" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [92335 92349]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92315 92319])
                            ("fmt" variable nil (reparse-symbol function_parameters) [92321 92324]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92302 92350])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92368 92372]))                          )
                        (reparse-symbol indented_block_body) [92355 92423])
                    ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92438 92442])
                            ("x" variable nil (reparse-symbol function_parameters) [92444 92445]))                          )
                        (reparse-symbol indented_block_body) [92428 92532])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92549 92553])
                            ("x" variable nil (reparse-symbol function_parameters) [92555 92556]))                          )
                        (reparse-symbol indented_block_body) [92537 92637]))                  
                :type "class")
                nil [92269 92637])
            ("FormatDatetime" type
               (:superclasses ("FormatDate")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatDate" code nil (reparse-symbol indented_block_body) [92730 92760]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92690 92694])
                            ("fmt" variable nil (reparse-symbol function_parameters) [92696 92699]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92677 92761])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92778 92782])
                            ("x" variable nil (reparse-symbol function_parameters) [92784 92785]))                          )
                        (reparse-symbol indented_block_body) [92766 92859]))                  
                :type "class")
                nil [92639 92859])
            ("defaultformatd" variable nil nil [92861 93125])
            ("get_formatd" function (:arguments 
              ( ("r" variable nil (reparse-symbol function_parameters) [93144 93145])
                ("formatd" variable nil (reparse-symbol function_parameters) [93147 93154]))              ) nil [93128 93526])
            ("csvformat_factory" function (:arguments 
              ( ("format" variable nil (reparse-symbol function_parameters) [93550 93556]))              ) nil [93528 93736])
            ("rec2txt" function
               (:documentation "
    Returns a textual representation of a record array.

    Parameters
    ----------
    r: numpy recarray

    header: list
        column headers

    padding:
        space between each column

    precision: number of decimal places to use for floats.
        Set to an integer to apply to all floats.  Set to a
        list of integers to apply precision individually.
        Precision for non-floats is simply ignored.

    fields : list
        If not None, a list of field names to print.  fields
        can be a list of strings like ['field1', 'field2'] or a single
        comma separated string like 'field1,field2'

    Examples
    --------

    For ``precision=[0,2,3]``, the output is ::

      ID    Price   Return
      ABC   12.54    0.234
      XYZ    6.32   -0.076
    "
                :arguments 
                  ( ("r" variable nil (reparse-symbol function_parameters) [93750 93751])
                    ("header" variable nil (reparse-symbol function_parameters) [93753 93759])
                    ("padding" variable nil (reparse-symbol function_parameters) [93766 93773])
                    ("precision" variable nil (reparse-symbol function_parameters) [93777 93786])
                    ("fields" variable nil (reparse-symbol function_parameters) [93790 93796]))                  )
                nil [93738 97611])
            ("rec2csv" function
               (:documentation "
    Save the data from numpy recarray *r* into a
    comma-/space-/tab-delimited file.  The record array dtype names
    will be used for column headers.

    *fname*: can be a filename or a file handle.  Support for gzipped
      files is automatic, if the filename ends in '.gz'

    *withheader*: if withheader is False, do not write the attribute
      names in the first row

    for formatd type FormatFloat, we override the precision to store
    full precision floats in the CSV file

    See Also
    --------
    :func:`csv2rec`
        For information about *missing* and *missingd*, which can be used to
        fill in masked values into your CSV file.
    "
                :arguments 
                  ( ("r" variable nil (reparse-symbol function_parameters) [97625 97626])
                    ("fname" variable nil (reparse-symbol function_parameters) [97628 97633])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [97635 97644])
                    ("formatd" variable nil (reparse-symbol function_parameters) [97650 97657])
                    ("missing" variable nil (reparse-symbol function_parameters) [97664 97671])
                    ("missingd" variable nil (reparse-symbol function_parameters) [97688 97696])
                    ("withheader" variable nil (reparse-symbol function_parameters) [97703 97713]))                  )
                nil [97613 99704])
            ("griddata" function
               (:documentation "Interpolates from a nonuniformly spaced grid to some other
    grid.

    Fits a surface of the form z = f(`x`, `y`) to the data in the
    (usually) nonuniformly spaced vectors (`x`, `y`, `z`), then
    interpolates this surface at the points specified by
    (`xi`, `yi`) to produce `zi`.

    Parameters
    ----------
    x, y, z : 1d array_like
        Coordinates of grid points to interpolate from.
    xi, yi : 1d or 2d array_like
        Coordinates of grid points to interpolate to.
    interp : string key from {'nn', 'linear'}
        Interpolation algorithm, either 'nn' for natural neighbor, or
        'linear' for linear interpolation.

    Returns
    -------
    2d float array
        Array of values interpolated at (`xi`, `yi`) points.  Array
        will be masked is any of (`xi`, `yi`) are outside the convex
        hull of (`x`, `y`).

    Notes
    -----
    If `interp` is 'nn' (the default), uses natural neighbor
    interpolation based on Delaunay triangulation.  This option is
    only available if the mpl_toolkits.natgrid module is installed.
    This can be downloaded from https://github.com/matplotlib/natgrid.
    The (`xi`, `yi`) grid must be regular and monotonically increasing
    in this case.

    If `interp` is 'linear', linear interpolation is used via
    matplotlib.tri.LinearTriInterpolator.

    Instead of using `griddata`, more flexible functionality and other
    interpolation options are available using a
    matplotlib.tri.Triangulation and a matplotlib.tri.TriInterpolator.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [99719 99720])
                    ("y" variable nil (reparse-symbol function_parameters) [99722 99723])
                    ("z" variable nil (reparse-symbol function_parameters) [99725 99726])
                    ("xi" variable nil (reparse-symbol function_parameters) [99728 99730])
                    ("yi" variable nil (reparse-symbol function_parameters) [99732 99734])
                    ("interp" variable nil (reparse-symbol function_parameters) [99736 99742]))                  )
                nil [99706 104583])
            ("less_simple_linear_interpolation" function
               (:documentation "
    This function provides simple (but somewhat less so than
    :func:`cbook.simple_linear_interpolation`) linear interpolation.
    :func:`simple_linear_interpolation` will give a list of point
    between a start and an end, while this does true linear
    interpolation at an arbitrary set of points.

    This is very inefficient linear interpolation meant to be used
    only for a small number of points in relatively non-intensive use
    cases.  For real linear interpolation, use scipy.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [104758 104759])
                    ("y" variable nil (reparse-symbol function_parameters) [104761 104762])
                    ("xi" variable nil (reparse-symbol function_parameters) [104764 104766])
                    ("extrap" variable nil (reparse-symbol function_parameters) [104768 104774]))                  )
                nil [104721 105944])
            ("slopes" function
               (:documentation "
    :func:`slopes` calculates the slope *y*'(*x*)

    The slope is estimated using the slope obtained from that of a
    parabola through any three consecutive points.

    This method should be superior to that described in the appendix
    of A CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russel
    W. Stineman (Creative Computing July 1980) in at least one aspect:

      Circles for interpolation demand a known aspect ratio between
      *x*- and *y*-values.  For many functions, however, the abscissa
      are given in different dimensions, so an aspect ratio is
      completely arbitrary.

    The parabola method gives very similar results to the circle
    method for most regular cases but behaves much better in special
    cases.

    Norbert Nemec, Institute of Theoretical Physics, University or
    Regensburg, April 2006 Norbert.Nemec at physik.uni-regensburg.de

    (inspired by a original implementation by Halldor Bjornsson,
    Icelandic Meteorological Office, March 2006 halldor at vedur.is)
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [105957 105958])
                    ("y" variable nil (reparse-symbol function_parameters) [105960 105961]))                  )
                nil [105946 107383])
            ("stineman_interp" function
               (:documentation "
    Given data vectors *x* and *y*, the slope vector *yp* and a new
    abscissa vector *xi*, the function :func:`stineman_interp` uses
    Stineman interpolation to calculate a vector *yi* corresponding to
    *xi*.

    Here's an example that generates a coarse sine curve, then
    interpolates over a finer abscissa::

      x = linspace(0,2*pi,20);  y = sin(x); yp = cos(x)
      xi = linspace(0,2*pi,40);
      yi = stineman_interp(xi,x,y,yp);
      plot(x,y,'o',xi,yi)

    The interpolation method is described in the article A
    CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russell
    W. Stineman. The article appeared in the July 1980 issue of
    Creative Computing with a note from the editor stating that while
    they were:

      not an academic journal but once in a while something serious
      and original comes in adding that this was
      \"apparently a real solution\" to a well known problem.

    For *yp* = *None*, the routine automatically determines the slopes
    using the :func:`slopes` routine.

    *x* is assumed to be sorted in increasing order.

    For values ``xi[j] < x[0]`` or ``xi[j] > x[-1]``, the routine
    tries an extrapolation.  The relevance of the data obtained from
    this, of course, is questionable...

    Original implementation by Halldor Bjornsson, Icelandic
    Meteorolocial Office, March 2006 halldor at vedur.is

    Completely reworked and optimized for Python by Norbert Nemec,
    Institute of Theoretical Physics, University or Regensburg, April
    2006 Norbert.Nemec at physik.uni-regensburg.de
    "
                :arguments 
                  ( ("xi" variable nil (reparse-symbol function_parameters) [107405 107407])
                    ("x" variable nil (reparse-symbol function_parameters) [107409 107410])
                    ("y" variable nil (reparse-symbol function_parameters) [107412 107413])
                    ("yp" variable nil (reparse-symbol function_parameters) [107415 107417]))                  )
                nil [107385 110774])
            ("GaussianKDE" type
               (:documentation "
    Representation of a kernel-density estimate using Gaussian kernels.

    Parameters
    ----------
    dataset : array_like
        Datapoints to estimate from. In case of univariate data this is a 1-D
        array, otherwise a 2-D array with shape (# of dims, # of data).

    bw_method : str, scalar or callable, optional
        The method used to calculate the estimator bandwidth.  This can be
        'scott', 'silverman', a scalar constant or a callable.  If a
        scalar, this will be used directly as `kde.factor`.  If a
        callable, it should take a `GaussianKDE` instance as only
        parameter and return a scalar. If None (default), 'scott' is used.

    Attributes
    ----------
    dataset : ndarray
        The dataset with which `gaussian_kde` was initialized.

    dim : int
        Number of dimensions.

    num_dp : int
        Number of datapoints.

    factor : float
        The bandwidth factor, obtained from `kde.covariance_factor`, with which
        the covariance matrix is multiplied.

    covariance : ndarray
        The covariance matrix of `dataset`, scaled by the calculated bandwidth
        (`kde.factor`).

    inv_cov : ndarray
        The inverse of `covariance`.

    Methods
    -------
    kde.evaluate(points) : ndarray
        Evaluate the estimated pdf on a provided set of points.

    kde(points) : ndarray
        Same as kde.evaluate(points)

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [112445 112482])
                            ("if" code nil (reparse-symbol indented_block_body) [112491 112610])
                            ("self, self" code nil (reparse-symbol indented_block_body) [112619 112671])
                            ("isString" variable nil (reparse-symbol indented_block_body) [112680 112730])
                            ("if" code nil (reparse-symbol indented_block_body) [112740 113462])
                            ("self" variable nil (reparse-symbol indented_block_body) [113575 113613])
                            ("if" code nil (reparse-symbol indented_block_body) [113684 113962])
                            ("self" code nil (reparse-symbol indented_block_body) [113971 114028])
                            ("self" code nil (reparse-symbol indented_block_body) [114037 114088])
                            ("self" code nil (reparse-symbol indented_block_body) [114097 114211]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112405 112409])
                            ("dataset" variable nil (reparse-symbol function_parameters) [112411 112418])
                            ("bw_method" variable nil (reparse-symbol function_parameters) [112420 112429]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [112392 114212])
                    ("scotts_factor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114235 114239]))                          )
                        (reparse-symbol indented_block_body) [114217 114301])
                    ("silverman_factor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114327 114331]))                          )
                        (reparse-symbol indented_block_body) [114306 114431])
                    ("covariance_factor" variable nil (reparse-symbol indented_block_body) [114513 114546])
                    ("evaluate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114565 114569])
                            ("points" variable nil (reparse-symbol function_parameters) [114571 114577]))                          
                        :documentation "Evaluate the estimated pdf on a set of points.

        Parameters
        ----------
        points : (# of dimensions, # of points)-array
            Alternatively, a (# of dimensions,) vector can be passed in and
            treated as a single point.

        Returns
        -------
        values : (# of points,)-array
            The values at each point.

        Raises
        ------
        ValueError : if the dimensionality of the input points is different
                     than the dimensionality of the KDE.

        ")
                        (reparse-symbol indented_block_body) [114552 116182])
                    ("__call__" variable nil (reparse-symbol indented_block_body) [116187 116206]))                  
                :type "class")
                nil [110776 116207])
            ("inside_poly" function
               (:documentation "
    *points* is a sequence of *x*, *y* points.
    *verts* is a sequence of *x*, *y* vertices of a polygon.

    Return value is a sequence of indices into points for the points
    that are inside the polygon.
    "
                :arguments 
                  ( ("points" variable nil (reparse-symbol function_parameters) [116375 116381])
                    ("verts" variable nil (reparse-symbol function_parameters) [116383 116388]))                  )
                nil [116359 116813])
            ("poly_below" function
               (:documentation "
    Given a sequence of *xs* and *ys*, return the vertices of a
    polygon that has a horizontal base at *xmin* and an upper bound at
    the *ys*.  *xmin* is a scalar.

    Intended for use with :meth:`matplotlib.axes.Axes.fill`, e.g.,::

      xv, yv = poly_below(0, x, y)
      ax.fill(xv, yv)
    "
                :arguments 
                  ( ("xmin" variable nil (reparse-symbol function_parameters) [116830 116834])
                    ("xs" variable nil (reparse-symbol function_parameters) [116836 116838])
                    ("ys" variable nil (reparse-symbol function_parameters) [116840 116842]))                  )
                nil [116815 117559])
            ("poly_between" function
               (:documentation "
    Given a sequence of *x*, *ylower* and *yupper*, return the polygon
    that fills the regions between them.  *ylower* or *yupper* can be
    scalar or iterable.  If they are iterable, they must be equal in
    length to *x*.

    Return value is *x*, *y* arrays for use with
    :meth:`matplotlib.axes.Axes.fill`.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [117578 117579])
                    ("ylower" variable nil (reparse-symbol function_parameters) [117581 117587])
                    ("yupper" variable nil (reparse-symbol function_parameters) [117589 117595]))                  )
                nil [117561 118351])
            ("is_closed_polygon" function
               (:documentation "
    Tests whether first and last object in a sequence are the same.  These are
    presumably coordinates on a polygonal curve, in which case this function
    tests if that curve is closed.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [118375 118376]))                  )
                nil [118353 118619])
            ("contiguous_regions" function
               (:documentation "
    return a list of (ind0, ind1) such that mask[ind0:ind1].all() is
    True and we cover all such regions
    "
                :arguments 
                  ( ("mask" variable nil (reparse-symbol function_parameters) [118644 118648]))                  )
                nil [118621 119236])
            ("cross_from_below" function
               (:documentation "
    return the indices into *x* where *x* crosses some threshold from
    below, e.g., the i's where::

      x[i-1]<threshold and x[i]>=threshold

    Example code::

        import matplotlib.pyplot as plt

        t = np.arange(0.0, 2.0, 0.1)
        s = np.sin(2*np.pi*t)

        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.plot(t, s, '-o')
        ax.axhline(0.5)
        ax.axhline(-0.5)

        ind = cross_from_below(s, 0.5)
        ax.vlines(t[ind], -1, 1)

        ind = cross_from_above(s, -0.5)
        ax.vlines(t[ind], -1, 1)

        plt.show()

    See Also
    --------
    :func:`cross_from_above` and :func:`contiguous_regions`

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [119259 119260])
                    ("threshold" variable nil (reparse-symbol function_parameters) [119262 119271]))                  )
                nil [119238 120144])
            ("cross_from_above" function
               (:documentation "
    return the indices into *x* where *x* crosses some threshold from
    below, e.g., the i's where::

      x[i-1]>threshold and x[i]<=threshold

    See Also
    --------
    :func:`cross_from_below` and :func:`contiguous_regions`

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [120167 120168])
                    ("threshold" variable nil (reparse-symbol function_parameters) [120170 120179]))                  )
                nil [120146 120591])
            ("vector_lengths" function
               (:documentation "
    Finds the length of a set of vectors in *n* dimensions.  This is
    like the :func:`numpy.norm` function for vectors, but has the ability to
    work over a particular axis of the supplied array or matrix.

    Computes ``(sum((x_i)^P))^(1/P)`` for each ``{x_i}`` being the
    elements of *X* along the given axis.  If *axis* is *None*,
    compute over all elements of *X*.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [120761 120762])
                    ("P" variable nil (reparse-symbol function_parameters) [120764 120765])
                    ("axis" variable nil (reparse-symbol function_parameters) [120770 120774]))                  )
                nil [120742 121248])
            ("distances_along_curve" function
               (:documentation "
    Computes the distance between a set of successive points in *N* dimensions.

    Where *X* is an *M* x *N* array or matrix.  The distances between
    successive rows is computed.  Distance is the standard Euclidean
    distance.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [121276 121277]))                  )
                nil [121250 121594])
            ("path_length" function
               (:documentation "
    Computes the distance travelled along a polygonal curve in *N* dimensions.

    Where *X* is an *M* x *N* array or matrix.  Returns an array of
    length *M* consisting of the distance along the curve at each point
    (i.e., the rows of *X*).
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [121612 121613]))                  )
                nil [121596 121969])
            ("quad2cubic" function
               (:documentation "
    Converts a quadratic Bezier curve to a cubic approximation.

    The inputs are the *x* and *y* coordinates of the three control
    points of a quadratic curve, and the output is a tuple of *x* and
    *y* coordinates of the four control points of the cubic curve.
    "
                :arguments 
                  ( ("q0x" variable nil (reparse-symbol function_parameters) [121986 121989])
                    ("q0y" variable nil (reparse-symbol function_parameters) [121991 121994])
                    ("q1x" variable nil (reparse-symbol function_parameters) [121996 121999])
                    ("q1y" variable nil (reparse-symbol function_parameters) [122001 122004])
                    ("q2x" variable nil (reparse-symbol function_parameters) [122006 122009])
                    ("q2y" variable nil (reparse-symbol function_parameters) [122011 122014]))                  )
                nil [121971 122609])
            ("offset_line" function
               (:documentation "
    Offsets an array *y* by +/- an error and returns a tuple
    (y - err, y + err).

    The error term can be:

    * A scalar. In this case, the returned tuple is obvious.
    * A vector of the same length as *y*. The quantities y +/- err are computed
      component-wise.
    * A tuple of length 2. In this case, yerr[0] is the error below *y* and
      yerr[1] is error above *y*. For example::

        from pylab import *
        x = linspace(0, 2*pi, num=100, endpoint=True)
        y = sin(x)
        y_minus, y_plus = mlab.offset_line(y, 0.1)
        plot(x, y)
        fill_between(x, ym, y2=yp)
        show()

    "
                :arguments 
                  ( ("y" variable nil (reparse-symbol function_parameters) [122627 122628])
                    ("yerr" variable nil (reparse-symbol function_parameters) [122630 122634]))                  )
                nil [122611 123603]))          
      :file "mlab.py"
      :pointmax 123603
      :fsize 123602
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 104400 . 104404) (PERIOD 104405 . 104406)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"
:mod:`~matplotlib.mathtext` is a module for parsing a subset of the
TeX math syntax and drawing them to a matplotlib backend.

For a tutorial of its usage see :ref:`mathtext-tutorial`.  This
document is primarily concerned with implementation details.

The module uses pyparsing_ to parse the TeX expression.

.. _pyparsing: http://pyparsing.wikispaces.com/

The Bakoma distribution of the TeX Computer Modern fonts, and STIX
fonts are supported.  There is experimental support for using
arbitrary fonts, but results may vary without proper tweaking and
metrics for those fonts.
\"\"\"" code nil nil [1 588])
            ("" code nil nil [612 697])
            ("six" include nil nil [699 709])
            ("sys" include nil nil [711 725])
            ("os" include nil nil [711 725])
            ("six" include nil nil [726 748])
            ("math" include nil nil [749 770])
            ("try" code nil nil [771 834])
            ("unicodedata" include nil nil [834 852])
            ("warnings" include nil nil [853 878])
            ("numpy" include nil nil [880 908])
            ("numpy" include nil nil [909 927])
            ("pyparsing" include nil nil [929 945])
            ("" code nil nil [968 1204])
            ("if" code nil nil [1231 1588])
            ("matplotlib.afm" include nil nil [1589 1619])
            ("" code nil nil [1649 1734])
            ("" code nil nil [1766 1863])
            ("matplotlib.font_manager" include nil nil [1864 1934])
            ("" code nil nil [1973 2131])
            ("matplotlib" include nil nil [2132 2178])
            ("matplotlib.colors" include nil nil [2180 2215])
            ("matplotlib._png" include nil nil [2216 2246])
            ("get_unicode_index" function
               (:documentation "get_unicode_index(symbol, [bool]) -> integer

Return the integer index (from the Unicode table) of symbol.  *symbol*
can be a single unicode character, a TeX command (i.e. r'\\pi'), or a
Type1 symbol name (i.e. 'phi').
If math is False, the current symbol should be treated as a non-math symbol.
"
                :arguments 
                  ( ("symbol" variable nil (reparse-symbol function_parameters) [2382 2388])
                    ("math" variable nil (reparse-symbol function_parameters) [2390 2394]))                  )
                nil [2360 122175]))          
      :file "mathtext.py"
      :pointmax 122175
      :fsize 122174
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((INDENT_BLOCK 94156 . 122175) (INDENT_BLOCK 93484 . 94156) (COLON 93455 . 93456) (DEDENT 93419 . 93423) (NAME 93423 . 93436) (LBRACE 93439 . 93440) (NEWLINE 92947 . 92948) (COLON 92946 . 92947) (RPAREN 92945 . 92946) (DEDENT 92909 . 92913) (DEF 92913 . 92916) (LPAREN 92928 . 92929) (NEWLINE 92566 . 92567) (COLON 92565 . 92566) (RPAREN 92564 . 92565) (DEDENT 92529 . 92533) (DEF 92533 . 92536) (LPAREN 92545 . 92546) (NEWLINE 92421 . 92422) (COLON 92420 . 92421) (RPAREN 92419 . 92420) (DEDENT 92388 . 92392) (DEF 92392 . 92395) (LPAREN 92400 . 92401) (NEWLINE 92277 . 92278) (COLON 92276 . 92277) (RPAREN 92275 . 92276) (DEDENT 92237 . 92241) (DEF 92241 . 92244) (LPAREN 92256 . 92257) (NEWLINE 92174 . 92175) (COLON 92173 . 92174) (RPAREN 92172 . 92173) (DEDENT 92141 . 92145) (DEF 92145 . 92148) (LPAREN 92153 . 92154) (NEWLINE 91957 . 91958) (COLON 91956 . 91957) (RPAREN 91955 . 91956) (DEDENT 91932 . 91936) (DEF 91936 . 91939) (LPAREN 91950 . 91951) (NEWLINE 91827 . 91828) (COLON 91826 . 91827) (RPAREN 91825 . 91826) (DEDENT 91803 . 91807) (DEF 91807 . 91810) (LPAREN 91820 . 91821) (NEWLINE 91686 . 91687) (COLON 91685 . 91686) (RPAREN 91684 . 91685) (DEDENT 91662 . 91666) (DEF 91666 . 91669) (LPAREN 91679 . 91680) (NEWLINE 90750 . 90751) (COLON 90749 . 90750) (RPAREN 90748 . 90749) (DEDENT 90726 . 90730) (CLASS 90730 . 90735) (LPAREN 90741 . 90742) (INDENT_BLOCK 90151 . 90354) (NEWLINE 90150 . 90151) (COLON 90149 . 90150) (TRY 90051 . 90054) (AS 90143 . 90145) (NEWLINE 89722 . 89723) (COLON 89721 . 89722) (RPAREN 89720 . 89721) (DEDENT 89670 . 89674) (DEF 89674 . 89677) (LPAREN 89683 . 89684) (INDENT_BLOCK 46674 . 47564) (NEWLINE 46673 . 46674) (DEDENT 46647 . 46647) (NAME 46647 . 46669) (LBRACE 46672 . 46673) (NEWLINE 46570 . 46571) (COLON 46569 . 46570) (RPAREN 46568 . 46569) (DEDENT 46521 . 46521) (CLASS 46521 . 46526) (LPAREN 46550 . 46551) (NEWLINE 46509 . 46510) (COLON 46508 . 46509) (RPAREN 46507 . 46508) (DEDENT 46459 . 46459) (CLASS 46459 . 46464) (LPAREN 46489 . 46490) (NEWLINE 46368 . 46369) (COLON 46367 . 46368) (RPAREN 46366 . 46367) (DEDENT 46321 . 46321) (CLASS 46321 . 46326) (LPAREN 46348 . 46349) (NEWLINE 46199 . 46200) (COLON 46198 . 46199) (RPAREN 46197 . 46198) (DEDENT 46156 . 46156) (CLASS 46156 . 46161) (LPAREN 46179 . 46180) (NEWLINE 45997 . 45998) (COLON 45996 . 45997) (RPAREN 45995 . 45996) (DEDENT 45944 . 45944) (CLASS 45944 . 45949) (LPAREN 45977 . 45978) (NEWLINE 44778 . 44779) (COLON 44777 . 44778) (RPAREN 44776 . 44777) (CLASS 44746 . 44751) (LPAREN 44769 . 44770) (NEWLINE 38309 . 38310) (COLON 38308 . 38309) (RPAREN 38307 . 38308) (DEDENT 38280 . 38280) (CLASS 38280 . 38285) (LPAREN 38301 . 38302) (NEWLINE 38150 . 38151) (COLON 38149 . 38150) (RPAREN 38148 . 38149) (DEDENT 38119 . 38119) (CLASS 38119 . 38124) (LPAREN 38138 . 38139) (NEWLINE 34207 . 34208) (COLON 34206 . 34207) (RPAREN 34205 . 34206) (DEDENT 34177 . 34177) (CLASS 34177 . 34182) (LPAREN 34192 . 34193) (NEWLINE 33717 . 33718) (COLON 33716 . 33717) (RPAREN 33715 . 33716) (DEDENT 33682 . 33682) (CLASS 33682 . 33687) (LPAREN 33703 . 33704) (NEWLINE 33215 . 33216) (COLON 33214 . 33215) (RPAREN 33213 . 33214) (DEDENT 33179 . 33179) (CLASS 33179 . 33184) (LPAREN 33201 . 33202) (NEWLINE 31417 . 31418) (COLON 31416 . 31417) (RPAREN 31415 . 31416) (DEDENT 31385 . 31385) (CLASS 31385 . 31390) (LPAREN 31402 . 31403) (NEWLINE 26859 . 26860) (COLON 26858 . 26859) (RPAREN 26857 . 26858) (DEDENT 26825 . 26825) (CLASS 26825 . 26830) (LPAREN 26843 . 26844) (NEWLINE 22006 . 22007) (COLON 22005 . 22006) (RPAREN 22004 . 22005) (DEDENT 21973 . 21973) (CLASS 21973 . 21978) (LPAREN 21990 . 21991) (NEWLINE 17861 . 17862) (COLON 17860 . 17861) (RPAREN 17859 . 17860) (DEDENT 17834 . 17834) (CLASS 17834 . 17839) (LPAREN 17853 . 17854) (NEWLINE 12658 . 12659) (COLON 12657 . 12658) (RPAREN 12656 . 12657) (DEDENT 12638 . 12638) (CLASS 12638 . 12643) (LPAREN 12649 . 12650) (NEWLINE 11895 . 11896) (COLON 11894 . 11895) (RPAREN 11893 . 11894) (DEDENT 11851 . 11851) (CLASS 11851 . 11856) (LPAREN 11877 . 11878) (NEWLINE 11116 . 11117) (COLON 11115 . 11116) (RPAREN 11114 . 11115) (DEDENT 11073 . 11073) (CLASS 11073 . 11078) (LPAREN 11098 . 11099) (NEWLINE 10215 . 10216) (COLON 10214 . 10215) (RPAREN 10213 . 10214) (DEDENT 10173 . 10173) (CLASS 10173 . 10178) (LPAREN 10197 . 10198) (NEWLINE 9387 . 9388) (COLON 9386 . 9387) (RPAREN 9385 . 9386) (DEDENT 9345 . 9345) (CLASS 9345 . 9350) (LPAREN 9369 . 9370) (NEWLINE 8170 . 8171) (COLON 8169 . 8170) (RPAREN 8168 . 8169) (DEDENT 8129 . 8129) (CLASS 8129 . 8134) (LPAREN 8152 . 8153) (NEWLINE 7919 . 7920) (COLON 7918 . 7919) (RPAREN 7917 . 7918) (DEDENT 7871 . 7871) (CLASS 7871 . 7876) (LPAREN 7898 . 7899) (NEWLINE 5337 . 5338) (COLON 5336 . 5337) (RPAREN 5335 . 5336) (DEDENT 5295 . 5295) (CLASS 5295 . 5300) (LPAREN 5319 . 5320) (NEWLINE 3854 . 3855) (COLON 3853 . 3854) (RPAREN 3852 . 3853) (DEDENT 3824 . 3824) (CLASS 3824 . 3829) (LPAREN 3845 . 3846) (NEWLINE 3551 . 3552) (COLON 3550 . 3551) (RPAREN 3549 . 3550) (DEDENT 3528 . 3528) (DEF 3528 . 3531) (LPAREN 3543 . 3544) (NEWLINE 3393 . 3394) (COLON 3392 . 3393) (DEDENT 3373 . 3377) (EXCEPT 3377 . 3383)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module supports embedded TeX expressions in matplotlib via dvipng
and dvips for the raster and postscript backends.  The tex and
dvipng/dvips information is cached in ~/.matplotlib/tex.cache for reuse between
sessions

Requirements:

* latex
* \\*Agg backends: dvipng
* PS backend: latex w/ psfrag, dvips, and Ghostscript 8.51
  (older versions do not work properly)

Backends:

* \\*Agg
* PS
* PDF

For raster output, you can get RGBA numpy arrays from TeX expressions
as follows::

  texmanager = TexManager()
  s = ('\\\\TeX\\\\ is Number '
       '$\\\\displaystyle\\\\sum_{n=1}^\\\\infty\\\\frac{-e^{i\\pi}}{2^n}$!')
  Z = self.texmanager.get_rgba(s, size=12, dpi=80, rgb=(1,0,0))

To enable tex rendering of all text in your matplotlib figure, set
text.usetex in your matplotlibrc file or include these two lines in
your script::

  from matplotlib import rc
  rc('text', usetex=True)

\"\"\"" code nil nil [1 890])
            ("" code nil nil [915 1000])
            ("six" include nil nil [1002 1012])
            ("copy" include nil nil [1014 1025])
            ("glob" include nil nil [1026 1037])
            ("os" include nil nil [1038 1047])
            ("shutil" include nil nil [1048 1061])
            ("sys" include nil nil [1062 1072])
            ("warnings" include nil nil [1073 1088])
            ("hashlib" include nil nil [1090 1113])
            ("distutils.version" include nil nil [1115 1139])
            ("numpy" include nil nil [1140 1158])
            ("matplotlib" include nil nil [1159 1183])
            ("matplotlib" include nil nil [1184 1215])
            ("matplotlib._png" include nil nil [1216 1252])
            ("matplotlib.cbook" include nil nil [1253 1296])
            ("matplotlib.compat.subprocess" include nil nil [1297 1357])
            ("matplotlib.dviread" include nil nil [1358 1394])
            ("re" include nil nil [1395 1404])
            ("DEBUG" variable nil nil [1406 1419])
            ("if" code nil nil [1421 1502])
            ("dvipng_hack_alpha" function nil nil [1504 2322])
            ("TexManager" type
               (:documentation "
    Convert strings to dvi files using TeX, caching the results to a
    working dir
    "
                :superclasses ("object")
                :members 
                  ( ("oldpath" variable nil (reparse-symbol indented_block_body) [2456 2480])
                    ("if" code nil (reparse-symbol indented_block_body) [2485 2543])
                    ("oldcache" variable nil (reparse-symbol indented_block_body) [2547 2593])
                    ("cachedir" variable nil (reparse-symbol indented_block_body) [2599 2628])
                    ("if" code nil (reparse-symbol indented_block_body) [2633 2904])
                    ("if" code nil (reparse-symbol indented_block_body) [2909 3479])
                    ("if" code nil (reparse-symbol indented_block_body) [3484 3534])
                    ("_dvipng_hack_alpha" variable nil (reparse-symbol indented_block_body) [3539 3564])
                    ("rgba_arrayd" variable nil (reparse-symbol indented_block_body) [3639 3655])
                    ("grey_arrayd" variable nil (reparse-symbol indented_block_body) [3660 3676])
                    ("postscriptd" variable nil (reparse-symbol indented_block_body) [3681 3697])
                    ("pscnt" variable nil (reparse-symbol indented_block_body) [3702 3711])
                    ("serif" variable nil (reparse-symbol indented_block_body) [3717 3736])
                    ("sans_serif" variable nil (reparse-symbol indented_block_body) [3741 3766])
                    ("monospace" variable nil (reparse-symbol indented_block_body) [3771 3795])
                    ("cursive" variable nil (reparse-symbol indented_block_body) [3800 3843])
                    ("font_family" variable nil (reparse-symbol indented_block_body) [3848 3869])
                    ("font_families" variable nil (reparse-symbol indented_block_body) [3874 3937])
                    ("font_info" variable nil (reparse-symbol indented_block_body) [3943 4954])
                    ("_rc_cache" variable nil (reparse-symbol indented_block_body) [4960 4976])
                    ("_rc_cache_keys" variable nil (reparse-symbol indented_block_body) [4981 5137])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5172 5338])
                            ("mkdirs" code nil (reparse-symbol indented_block_body) [5347 5368])
                            ("ff" variable nil (reparse-symbol indented_block_body) [5377 5405])
                            ("if" code nil (reparse-symbol indented_block_body) [5414 5932])
                            ("fontconfig" variable nil (reparse-symbol indented_block_body) [5941 5972])
                            ("for" code nil (reparse-symbol indented_block_body) [5981 7070])
                            ("preamble_bytes" variable nil (reparse-symbol indented_block_body) [7295 7369])
                            ("fontconfig" code nil (reparse-symbol indented_block_body) [7378 7428])
                            ("self" variable nil (reparse-symbol indented_block_body) [7437 7475])
                            ("cmd" variable nil (reparse-symbol indented_block_body) [7591 7651])
                            ("if" code nil (reparse-symbol indented_block_body) [7660 7734])
                            ("while" code nil (reparse-symbol indented_block_body) [7742 7828])
                            ("cmd" variable nil (reparse-symbol indented_block_body) [7836 7856])
                            ("self" variable nil (reparse-symbol indented_block_body) [7865 7995]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5156 5160]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5143 7996])
                    ("get_basefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8018 8022])
                            ("tex" variable nil (reparse-symbol function_parameters) [8024 8027])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [8029 8037])
                            ("dpi" variable nil (reparse-symbol function_parameters) [8039 8042]))                          
                        :documentation "
        returns a filename based on a hash of the string, fontsize, and dpi
        ")
                        (reparse-symbol indented_block_body) [8001 8479])
                    ("get_font_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8504 8508]))                          
                        :documentation "Reinitializes self if relevant rcParams on have changed.")
                        (reparse-symbol indented_block_body) [8484 9461])
                    ("get_font_preamble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9488 9492]))                          
                        :documentation "
        returns a string containing font configuration for the tex preamble
        ")
                        (reparse-symbol indented_block_body) [9466 9630])
                    ("get_custom_preamble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9659 9663]))                          
                        :documentation "returns a string containing user additions to the tex preamble")
                        (reparse-symbol indented_block_body) [9635 9801])
                    ("_get_shell_cmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9825 9829])
                            ("args" variable nil (reparse-symbol function_parameters) [9831 9836]))                          
                        :documentation "
        On windows, changing directories can be complicated by the presence of
        multiple drives. get_shell_cmd deals with this issue.
        ")
                        (reparse-symbol indented_block_body) [9806 10212])
                    ("make_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10230 10234])
                            ("tex" variable nil (reparse-symbol function_parameters) [10236 10239])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [10241 10249]))                          
                        :documentation "
        Generate a tex file to render the tex string at a specific font size

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [10217 11829])
                    ("_re_vbox" variable nil (reparse-symbol indented_block_body) [11834 11920])
                    ("make_tex_preview" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11947 11951])
                            ("tex" variable nil (reparse-symbol function_parameters) [11953 11956])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [11958 11966]))                          
                        :documentation "
        Generate a tex file to render the tex string at a specific
        font size.  It uses the preview.sty to determin the dimension
        (width, height, descent) of the output.

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [11926 14020])
                    ("make_dvi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14038 14042])
                            ("tex" variable nil (reparse-symbol function_parameters) [14044 14047])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [14049 14057]))                          
                        :documentation "
        generates a dvi file containing latex's layout of tex string

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [14025 15943])
                    ("make_dvi_preview" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15969 15973])
                            ("tex" variable nil (reparse-symbol function_parameters) [15975 15978])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [15980 15988]))                          
                        :documentation "
        generates a dvi file containing latex's layout of tex
        string. It calls make_tex_preview() method and store the size
        information (width, height, descent) in a separte file.

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [15948 18120])
                    ("make_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18138 18142])
                            ("tex" variable nil (reparse-symbol function_parameters) [18144 18147])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [18149 18157])
                            ("dpi" variable nil (reparse-symbol function_parameters) [18159 18162]))                          
                        :documentation "
        generates a png file containing latex's rendering of tex string

        returns the filename
        ")
                        (reparse-symbol indented_block_body) [18125 19590])
                    ("make_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19607 19611])
                            ("tex" variable nil (reparse-symbol function_parameters) [19613 19616])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [19618 19626]))                          
                        :documentation "
        generates a postscript file containing latex's rendering of tex string

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [19595 20779])
                    ("get_ps_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20800 20804])
                            ("tex" variable nil (reparse-symbol function_parameters) [20806 20809])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [20811 20819]))                          
                        :documentation "
        returns a list containing the postscript bounding box for latex's
        rendering of the tex string
        ")
                        (reparse-symbol indented_block_body) [20784 21240])
                    ("get_grey" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21258 21262])
                            ("tex" variable nil (reparse-symbol function_parameters) [21264 21267])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [21269 21277])
                            ("dpi" variable nil (reparse-symbol function_parameters) [21284 21287]))                          
                        :documentation "returns the alpha channel")
                        (reparse-symbol indented_block_body) [21245 23549])
                    ("get_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23567 23571])
                            ("tex" variable nil (reparse-symbol function_parameters) [23573 23576])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [23578 23586])
                            ("dpi" variable nil (reparse-symbol function_parameters) [23593 23596])
                            ("rgb" variable nil (reparse-symbol function_parameters) [23603 23606]))                          
                        :documentation "
        Returns latex's rendering of the tex string as an rgba array
        ")
                        (reparse-symbol indented_block_body) [23554 24292])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24331 24335])
                            ("tex" variable nil (reparse-symbol function_parameters) [24337 24340])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [24342 24350])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24352 24360]))                          
                        :documentation "
        return width, heigth and descent of the text.
        ")
                        (reparse-symbol indented_block_body) [24297 25575]))                  
                :type "class")
                nil [2324 25575]))          
      :file "texmanager.py"
      :pointmax 25575
      :fsize 25574
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((INDENT_BLOCK 13695 . 13996) (NEWLINE 13694 . 13695) (COLON 13693 . 13694) (TRY 13592 . 13595) (AS 13687 . 13689) (INDENT_BLOCK 11504 . 11805) (NEWLINE 11503 . 11504) (COLON 11502 . 11503) (TRY 11401 . 11404) (AS 11496 . 11498) (INDENT_BLOCK 3154 . 3319) (NEWLINE 3153 . 3154) (COLON 3152 . 3153) (ELSE 3148 . 3152) (INDENT_BLOCK 3069 . 3136) (NEWLINE 3068 . 3069) (COLON 3067 . 3068) (TRY 2983 . 2986) (AS 3063 . 3065)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
An experimental module for reading dvi files output by TeX. Several
limitations make this not (currently) useful as a general-purpose dvi
preprocessor, but it is currently used by the pdf backend for
processing usetex text.

Interface::

  dvi = Dvi(filename, 72)
  # iterate over pages (but only one page is supported for now):
  for page in dvi:
      w, h, d = page.width, page.height, page.descent
      for x,y,font,glyph,width in page.text:
          fontname = font.texname
          pointsize = font.size
          ...
      for x,y,height,width in page.boxes:
          ...

\"\"\"" code nil nil [1 592])
            ("" code nil nil [616 701])
            ("six" include nil nil [703 713])
            ("six.moves" include nil nil [714 742])
            ("errno" include nil nil [744 756])
            ("matplotlib" include nil nil [757 774])
            ("matplotlib.cbook" include nil nil [775 811])
            ("matplotlib.compat" include nil nil [812 852])
            ("matplotlib" include nil nil [853 884])
            ("numpy" include nil nil [885 903])
            ("struct" include nil nil [904 917])
            ("sys" include nil nil [918 928])
            ("os" include nil nil [929 938])
            ("if" code nil nil [940 985])
            ("_dvistate" variable nil nil [986 1062])
            ("Dvi" type
               (:documentation "
    A dvi (\"device-independent\") file, as produced by TeX.
    The current implementation only reads the first page and does not
    even attempt to verify the postamble.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the object. This takes the filename as input and
        opens the file; actually reading the file happens when
        iterating through the pages of the file.
        \"\"\"" code nil (reparse-symbol indented_block_body) [1318 1513])
                            ("matplotlib" code nil (reparse-symbol indented_block_body) [1522 1576])
                            ("self" variable nil (reparse-symbol indented_block_body) [1585 1617])
                            ("self" variable nil (reparse-symbol indented_block_body) [1626 1640])
                            ("self" variable nil (reparse-symbol indented_block_body) [1649 1664])
                            ("self" variable nil (reparse-symbol indented_block_body) [1673 1699])
                            ("self" variable nil (reparse-symbol indented_block_body) [1708 1752]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1288 1292])
                            ("filename" variable nil (reparse-symbol function_parameters) [1294 1302])
                            ("dpi" variable nil (reparse-symbol function_parameters) [1304 1307]))                          
                        :documentation "
        Initialize the object. This takes the filename as input and
        opens the file; actually reading the file happens when
        iterating through the pages of the file.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1275 1753])
                    ("_get_baseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1776 1780])
                            ("filename" variable nil (reparse-symbol function_parameters) [1782 1790]))                          )
                        (reparse-symbol indented_block_body) [1758 2185])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2203 2207]))                          
                        :documentation "
        Iterate through the pages of the file.

        Returns (text, boxes) pairs, where:
          text is a list of (x, y, fontnum, glyphnum, width) tuples
          boxes is a list of (x, y, height, width) tuples

        The coordinates are transformed into a standard Cartesian
        coordinate system at the dpi value given when initializing.
        The coordinates are floating point numbers, but otherwise
        precision is not lost and coordinate values are not clipped to
        integers.
        ")
                        (reparse-symbol indented_block_body) [2190 2902])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2917 2921]))                          
                        :documentation "
        Close the underlying file if it is open.
        ")
                        (reparse-symbol indented_block_body) [2907 3060])
                    ("_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3077 3081]))                          
                        :documentation "
        Output the text and boxes belonging to the most recent page.
        page = dvi._output()
        ")
                        (reparse-symbol indented_block_body) [3065 4695])
                    ("_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4710 4714]))                          
                        :documentation "
        Read one page from the file. Return True if successful,
        False if there were no more pages.
        ")
                        (reparse-symbol indented_block_body) [4700 5138])
                    ("_arg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5152 5156])
                            ("nbytes" variable nil (reparse-symbol function_parameters) [5158 5164])
                            ("signed" variable nil (reparse-symbol function_parameters) [5166 5172]))                          
                        :documentation "
        Read and return an integer argument *nbytes* long.
        Signedness is determined by the *signed* keyword.
        ")
                        (reparse-symbol indented_block_body) [5143 5560])
                    ("_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5579 5583])
                            ("byte" variable nil (reparse-symbol function_parameters) [5585 5589]))                          
                        :documentation "
        Based on the opcode *byte*, read the correct kinds of
        arguments from the dvi file and call the method implementing
        that opcode with those arguments.
        ")
                        (reparse-symbol indented_block_body) [5565 9272])
                    ("_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9286 9290])
                            ("i" variable nil (reparse-symbol function_parameters) [9292 9293])
                            ("num" variable nil (reparse-symbol function_parameters) [9295 9298])
                            ("den" variable nil (reparse-symbol function_parameters) [9300 9303])
                            ("mag" variable nil (reparse-symbol function_parameters) [9305 9308])
                            ("comment" variable nil (reparse-symbol function_parameters) [9310 9317]))                          )
                        (reparse-symbol indented_block_body) [9277 10163])
                    ("_set_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10182 10186])
                            ("char" variable nil (reparse-symbol function_parameters) [10188 10192]))                          )
                        (reparse-symbol indented_block_body) [10168 10383])
                    ("_set_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10402 10406])
                            ("a" variable nil (reparse-symbol function_parameters) [10408 10409])
                            ("b" variable nil (reparse-symbol function_parameters) [10411 10412]))                          )
                        (reparse-symbol indented_block_body) [10388 10570])
                    ("_put_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10589 10593])
                            ("char" variable nil (reparse-symbol function_parameters) [10595 10599]))                          )
                        (reparse-symbol indented_block_body) [10575 11573])
                    ("_put_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11592 11596])
                            ("a" variable nil (reparse-symbol function_parameters) [11598 11599])
                            ("b" variable nil (reparse-symbol function_parameters) [11601 11602]))                          )
                        (reparse-symbol indented_block_body) [11578 11793])
                    ("_nop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11807 11811]))                          )
                        (reparse-symbol indented_block_body) [11798 11827])
                    ("_bop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11841 11845])
                            ("c0" variable nil (reparse-symbol function_parameters) [11847 11849])
                            ("c1" variable nil (reparse-symbol function_parameters) [11851 11853])
                            ("c2" variable nil (reparse-symbol function_parameters) [11855 11857])
                            ("c3" variable nil (reparse-symbol function_parameters) [11859 11861])
                            ("c4" variable nil (reparse-symbol function_parameters) [11863 11865])
                            ("c5" variable nil (reparse-symbol function_parameters) [11867 11869])
                            ("c6" variable nil (reparse-symbol function_parameters) [11871 11873])
                            ("c7" variable nil (reparse-symbol function_parameters) [11875 11877])
                            ("c8" variable nil (reparse-symbol function_parameters) [11879 11881])
                            ("c9" variable nil (reparse-symbol function_parameters) [11883 11885])
                            ("p" variable nil (reparse-symbol function_parameters) [11887 11888]))                          )
                        (reparse-symbol indented_block_body) [11832 12277])
                    ("_eop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12291 12295]))                          )
                        (reparse-symbol indented_block_body) [12282 12507])
                    ("_push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12522 12526]))                          )
                        (reparse-symbol indented_block_body) [12512 12707])
                    ("_pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12721 12725]))                          )
                        (reparse-symbol indented_block_body) [12712 12903])
                    ("_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12919 12923])
                            ("b" variable nil (reparse-symbol function_parameters) [12925 12926]))                          )
                        (reparse-symbol indented_block_body) [12908 13052])
                    ("_right_w" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13070 13074])
                            ("new_w" variable nil (reparse-symbol function_parameters) [13076 13081]))                          )
                        (reparse-symbol indented_block_body) [13057 13265])
                    ("_right_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13283 13287])
                            ("new_x" variable nil (reparse-symbol function_parameters) [13289 13294]))                          )
                        (reparse-symbol indented_block_body) [13270 13478])
                    ("_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13493 13497])
                            ("a" variable nil (reparse-symbol function_parameters) [13499 13500]))                          )
                        (reparse-symbol indented_block_body) [13483 13625])
                    ("_down_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13642 13646])
                            ("new_y" variable nil (reparse-symbol function_parameters) [13648 13653]))                          )
                        (reparse-symbol indented_block_body) [13630 13837])
                    ("_down_z" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13854 13858])
                            ("new_z" variable nil (reparse-symbol function_parameters) [13860 13865]))                          )
                        (reparse-symbol indented_block_body) [13842 14049])
                    ("_fnt_num" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14067 14071])
                            ("k" variable nil (reparse-symbol function_parameters) [14073 14074]))                          )
                        (reparse-symbol indented_block_body) [14054 14201])
                    ("_xxx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14215 14219])
                            ("special" variable nil (reparse-symbol function_parameters) [14221 14228]))                          )
                        (reparse-symbol indented_block_body) [14206 14808])
                    ("_fnt_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14826 14830])
                            ("k" variable nil (reparse-symbol function_parameters) [14832 14833])
                            ("c" variable nil (reparse-symbol function_parameters) [14835 14836])
                            ("s" variable nil (reparse-symbol function_parameters) [14838 14839])
                            ("d" variable nil (reparse-symbol function_parameters) [14841 14842])
                            ("a" variable nil (reparse-symbol function_parameters) [14844 14845])
                            ("l" variable nil (reparse-symbol function_parameters) [14847 14848])
                            ("n" variable nil (reparse-symbol function_parameters) [14850 14851]))                          )
                        (reparse-symbol indented_block_body) [14813 15379])
                    ("_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15394 15398]))                          )
                        (reparse-symbol indented_block_body) [15384 15543])
                    ("_post_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15680 15684]))                          )
                        (reparse-symbol indented_block_body) [15665 15721]))                  
                :type "class")
                nil [1064 15721])
            ("DviFont" type
               (:documentation "
    Object that holds a font's texname and size, supports comparison,
    and knows the widths of glyphs in the same units as the AFM file.
    There are also internal attributes (for use by dviread.py) that
    are *not* used for comparison.

    The size is in Adobe points (converted from TeX points).

    .. attribute:: texname

       Name of the font as used internally by TeX and friends. This
       is usually very different from any external font names, and
       :class:`dviread.PsfontsMap` can be used to find the external
       name of the font.

    .. attribute:: size

       Size of the font in Adobe points, converted from the slightly
       smaller TeX points.

    .. attribute:: widths

       Widths of glyphs in glyph-space units, typically 1/1000ths of
       the point size.

    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [16570 16636])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [16695 16784])
                            ("self, self, self, self" code nil (reparse-symbol indented_block_body) [16792 16878])
                            ("self" code nil (reparse-symbol indented_block_body) [16887 16931])
                            ("try" code nil (reparse-symbol indented_block_body) [16940 17049])
                            ("self" variable nil (reparse-symbol indented_block_body) [17057 17161]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16655 16659])
                            ("scale" variable nil (reparse-symbol function_parameters) [16661 16666])
                            ("tfm" variable nil (reparse-symbol function_parameters) [16668 16671])
                            ("texname" variable nil (reparse-symbol function_parameters) [16673 16680])
                            ("vf" variable nil (reparse-symbol function_parameters) [16682 16684]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16642 17162])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17178 17182])
                            ("other" variable nil (reparse-symbol function_parameters) [17184 17189]))                          )
                        (reparse-symbol indented_block_body) [17167 17317])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17333 17337])
                            ("other" variable nil (reparse-symbol function_parameters) [17339 17344]))                          )
                        (reparse-symbol indented_block_body) [17322 17385])
                    ("_width_of" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17404 17408])
                            ("char" variable nil (reparse-symbol function_parameters) [17410 17414]))                          
                        :documentation "
        Width of char in dvi units. For internal use by dviread.py.
        ")
                        (reparse-symbol indented_block_body) [17390 17780])
                    ("_height_depth_of" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17806 17810])
                            ("char" variable nil (reparse-symbol function_parameters) [17812 17816]))                          
                        :documentation "
        Height and depth of char in dvi units. For internal use by dviread.py.
        ")
                        (reparse-symbol indented_block_body) [17785 18417]))                  
                :type "class")
                nil [15722 18417])
            ("Vf" type
               (:documentation "
    A virtual font (\\*.vf file) containing subroutines for dvi files.

    Usage::

      vf = Vf(filename)
      glyph = vf[code]
      glyph.text, glyph.boxes, glyph.width
    "
                :superclasses ("Dvi")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Dvi" code nil (reparse-symbol indented_block_body) [18666 18697])
                            ("try" code nil (reparse-symbol indented_block_body) [18706 18880]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18641 18645])
                            ("filename" variable nil (reparse-symbol function_parameters) [18647 18655]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18628 18880])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18901 18905])
                            ("code" variable nil (reparse-symbol function_parameters) [18907 18911]))                          )
                        (reparse-symbol indented_block_body) [18885 18947])
                    ("_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18966 18970])
                            ("byte" variable nil (reparse-symbol function_parameters) [18972 18976]))                          )
                        (reparse-symbol indented_block_body) [18952 20398])
                    ("_init_packet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20420 20424])
                            ("pl" variable nil (reparse-symbol function_parameters) [20426 20428])
                            ("cc" variable nil (reparse-symbol function_parameters) [20430 20432])
                            ("tfm" variable nil (reparse-symbol function_parameters) [20434 20437]))                          )
                        (reparse-symbol indented_block_body) [20403 20857])
                    ("_finalize_packet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20883 20887]))                          )
                        (reparse-symbol indented_block_body) [20862 21059])
                    ("_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21073 21077])
                            ("i" variable nil (reparse-symbol function_parameters) [21079 21080])
                            ("x" variable nil (reparse-symbol function_parameters) [21082 21083])
                            ("cs" variable nil (reparse-symbol function_parameters) [21085 21087])
                            ("ds" variable nil (reparse-symbol function_parameters) [21089 21091]))                          )
                        (reparse-symbol indented_block_body) [21064 21405])
                    ("_fnt_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21465 21469])
                            ("k" variable nil (reparse-symbol function_parameters) [21471 21472])
                            ("args" variable nil (reparse-symbol function_parameters) [21474 21479]))                          )
                        (reparse-symbol indented_block_body) [21452 21589]))                  
                :type "class")
                nil [18418 21589])
            ("_fix2comp" function
               (:documentation "
    Convert from two's complement to negative.
    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [21604 21607]))                  )
                nil [21590 21777])
            ("_mul2012" function
               (:documentation "
    Multiply two numbers in 20.12 fixed point format.
    "
                :arguments 
                  ( ("num1" variable nil (reparse-symbol function_parameters) [21791 21795])
                    ("num2" variable nil (reparse-symbol function_parameters) [21797 21801]))                  )
                nil [21778 21972])
            ("Tfm" type
               (:documentation "
    A TeX Font Metric file. This implementation covers only the bare
    minimum needed by the Dvi class.

    .. attribute:: checksum

       Used for verifying against the dvi file.

    .. attribute:: design_size

       Design size of the font (in what units?)

    .. attribute::  width

       Width of each character, needs to be scaled by the factor
       specified in the dvi file. This is a dict because indexing may
       not start from 0.

    .. attribute:: height

       Height of each character.

    .. attribute:: depth

       Depth of each character.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [22585 22652])
                    ("__init__" function
                       (:suite 
                          ( ("matplotlib" code nil (reparse-symbol indented_block_body) [22696 22762])
                            ("with" code nil (reparse-symbol indented_block_body) [22771 23448])
                            ("self, self, self" code nil (reparse-symbol indented_block_body) [23457 23505])
                            ("widths, heights, depths" code nil (reparse-symbol indented_block_body) [23514 23649])
                            ("for" code nil (reparse-symbol indented_block_body) [23658 23937]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22671 22675])
                            ("filename" variable nil (reparse-symbol function_parameters) [22677 22685]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22658 23937]))                  
                :type "class")
                nil [21973 23937])
            ("PsfontsMap" type
               (:documentation "
    A psfonts.map formatted file, mapping TeX fonts to PS fonts.
    Usage::

     >>> map = PsfontsMap(find_tex_file('pdftex.map'))
     >>> entry = map['ptmbo8r']
     >>> entry.texname
     'ptmbo8r'
     >>> entry.psname
     'Times-Bold'
     >>> entry.encoding
     '/usr/local/texlive/2008/texmf-dist/fonts/enc/dvips/base/8r.enc'
     >>> entry.effects
     {'slant': 0.16700000000000001}
     >>> entry.filename

    For historical reasons, TeX knows many Type-1 fonts by different
    names than the outside world. (For one thing, the names have to
    fit in eight characters.) Also, TeX's native fonts are not Type-1
    but Metafont, which is nontrivial to convert to PostScript except
    as a bitmap. While high-quality conversions to Type-1 format exist
    and are shipped with modern TeX distributions, we need to know
    which Type-1 fonts are the counterparts of which native fonts. For
    these reasons a mapping is needed from internal font names to font
    file names.

    A texmf tree typically includes mapping files called e.g.
    psfonts.map, pdftex.map, dvipdfm.map. psfonts.map is used by
    dvips, pdftex.map by pdfTeX, and dvipdfm.map by dvipdfm.
    psfonts.map might avoid embedding the 35 PostScript fonts (i.e.,
    have no filename for them, as in the Times-Bold example above),
    while the pdf-related files perhaps only avoid the \"Base 14\" pdf
    fonts. But the user may have configured these files differently.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [25442 25464])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25508 25523])
                            ("with" code nil (reparse-symbol indented_block_body) [25532 25597]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25483 25487])
                            ("filename" variable nil (reparse-symbol function_parameters) [25489 25497]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25470 25597])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25618 25622])
                            ("texname" variable nil (reparse-symbol function_parameters) [25624 25631]))                          )
                        (reparse-symbol indented_block_body) [25602 26062])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26078 26082])
                            ("file" variable nil (reparse-symbol function_parameters) [26084 26088]))                          
                        :documentation "Parse each line into words.")
                        (reparse-symbol indented_block_body) [26067 26901])
                    ("_register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26920 26924])
                            ("words" variable nil (reparse-symbol function_parameters) [26926 26931]))                          
                        :documentation "Register a font described by \"words\".

        The format is, AFAIK: texname fontname [effects and filenames]
        Effects are PostScript snippets like \".177 SlantFont\",
        filenames begin with one or two less-than signs. A filename
        ending in enc is an encoding file, other filenames are font
        files. This can be overridden with a left bracket: <[foobar
        indicates an encoding file named foobar.

        There is some difference between <foo.pfb and <<bar.pfb in
        subsetting, but I have no example of << in my TeX installation.
        ")
                        (reparse-symbol indented_block_body) [26906 29093]))                  
                :type "class")
                nil [23938 29093])
            ("Encoding" type
               (:documentation "
    Parses a \\*.enc file referenced from a psfonts.map style file.
    The format this class understands is a very limited subset of
    PostScript.

    Usage (subject to change)::

      for name in Encoding(filename):
          whatever(name)
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [29384 29409])
                    ("__init__" function
                       (:suite 
                          ( ("with" code nil (reparse-symbol indented_block_body) [29453 29716]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29428 29432])
                            ("filename" variable nil (reparse-symbol function_parameters) [29434 29442]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29415 29716])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29734 29738]))                          )
                        (reparse-symbol indented_block_body) [29721 29799])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29815 29819])
                            ("file" variable nil (reparse-symbol function_parameters) [29821 29825]))                          )
                        (reparse-symbol indented_block_body) [29804 30791]))                  
                :type "class")
                nil [29094 30791])
            ("find_tex_file" function
               (:documentation "
    Call :program:`kpsewhich` to find a file in the texmf tree. If
    *format* is not None, it is used as the value for the
    `--format` option.

    Apparently most existing TeX distributions on Unix-like systems
    use kpathsea. I hear MikTeX (a popular distribution on Windows)
    doesn't use kpathsea, so what do we do? (TODO)

    .. seealso::

      `Kpathsea documentation <http://www.tug.org/kpathsea/>`_
        The library that :program:`kpsewhich` is part of.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [30810 30818])
                    ("format" variable nil (reparse-symbol function_parameters) [30820 30826]))                  )
                nil [30792 32082])
            ("_tfmcache" variable nil nil [32279 32293])
            ("_vfcache" variable nil nil [32294 32307])
            ("_fontfile" function (:arguments 
              ( ("texname" variable nil (reparse-symbol function_parameters) [32323 32330])
                ("class_" variable nil (reparse-symbol function_parameters) [32332 32338])
                ("suffix" variable nil (reparse-symbol function_parameters) [32340 32346])
                ("cache" variable nil (reparse-symbol function_parameters) [32348 32353]))              ) nil [32309 32607])
            ("_tfmfile" function (:arguments 
              ( ("texname" variable nil (reparse-symbol function_parameters) [32621 32628]))              ) nil [32608 32685])
            ("_vffile" function (:arguments 
              ( ("texname" variable nil (reparse-symbol function_parameters) [32698 32705]))              ) nil [32686 32759])
            ("if" code nil nil [32762 33394]))          
      :file "dviread.py"
      :pointmax 33394
      :fsize 33393
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The OffsetBox is a simple container artist. The child artist are meant
to be drawn at a relative position to its parent.  The [VH]Packer,
DrawingArea and TextArea are derived from the OffsetBox.

The [VH]Packer automatically adjust the relative postisions of their
children, which should be instances of the OffsetBox. This is used to
align similar artists together, e.g., in legend.

The DrawingArea can contain any Artist as a child. The
DrawingArea has a fixed width and height. The position of children
relative to the parent is fixed.  The TextArea is contains a single
Text instance. The width and height of the TextArea instance is the
width and height of the its child text.
\"\"\"" code nil nil [1 691])
            ("" code nil nil [716 801])
            ("six" include nil nil [803 813])
            ("six.moves" include nil nil [814 847])
            ("warnings" include nil nil [849 864])
            ("matplotlib.transforms" include nil nil [865 908])
            ("matplotlib.artist" include nil nil [909 944])
            ("matplotlib.text" include nil nil [945 976])
            ("matplotlib.path" include nil nil [977 1008])
            ("numpy" include nil nil [1009 1027])
            ("matplotlib.transforms" include nil nil [1028 1093])
            ("matplotlib.font_manager" include nil nil [1095 1145])
            ("matplotlib.patches" include nil nil [1146 1208])
            ("matplotlib" include nil nil [1209 1240])
            ("matplotlib" include nil nil [1242 1274])
            ("matplotlib.image" include nil nil [1309 1347])
            ("matplotlib.patches" include nil nil [1349 1407])
            ("matplotlib.text" include nil nil [1408 1451])
            ("DEBUG" variable nil nil [1454 1467])
            ("bbox_artist" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [1505 1510])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1512 1520]))              ) nil [1489 1575])
            ("_get_packed_offsets" function
               (:documentation "
    Geiven a list of (width, xdescent) of each boxes, calculate the
    total width and the x-offset positions of each items according to
    *mode*. xdescent is analagous to the usual descent, but along the
    x-direction. xdescent values are currently ignored.

    *wd_list* : list of (width, xdescent) of boxes to be packed.
    *sep* : spacing between boxes
    *total* : Intended total length. None if not used.
    *mode* : packing mode. 'fixed', 'expand', or 'equal'.
    "
                :arguments 
                  ( ("wd_list" variable nil (reparse-symbol function_parameters) [1770 1777])
                    ("total" variable nil (reparse-symbol function_parameters) [1779 1784])
                    ("sep" variable nil (reparse-symbol function_parameters) [1786 1789])
                    ("mode" variable nil (reparse-symbol function_parameters) [1791 1795]))                  )
                nil [1746 3255])
            ("_get_aligned_offsets" function
               (:documentation "
    Given a list of (height, descent) of each boxes, align the boxes
    with *align* and calculate the y-offsets of each boxes.
    total width and the offset positions of each items according to
    *mode*. xdescent is analogous to the usual descent, but along the
    x-direction. xdescent values are currently ignored.

    *hd_list* : list of (width, xdescent) of boxes to be aligned.
    *sep* : spacing between boxes
    *height* : Intended total length. None if not used.
    *align* : align mode. 'baseline', 'top', 'bottom', or 'center'.
    "
                :arguments 
                  ( ("hd_list" variable nil (reparse-symbol function_parameters) [3282 3289])
                    ("height" variable nil (reparse-symbol function_parameters) [3291 3297])
                    ("align" variable nil (reparse-symbol function_parameters) [3299 3304]))                  )
                nil [3257 4605])
            ("OffsetBox" type
               (:documentation "
    The OffsetBox is a simple container artist. The child artist are meant
    to be drawn at a relative position to its parent.
    "
                :superclasses ("martist.Artist")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [4835 4883])
                            ("self" code nil (reparse-symbol indented_block_body) [5073 5096])
                            ("self" variable nil (reparse-symbol indented_block_body) [5106 5125])
                            ("self" variable nil (reparse-symbol indented_block_body) [5134 5155]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4802 4806])
                            ("args" variable nil (reparse-symbol function_parameters) [4808 4813])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4815 4823]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4789 5156])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5178 5182]))                          )
                        (reparse-symbol indented_block_body) [5161 5530])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5552 5556])
                            ("state" variable nil (reparse-symbol function_parameters) [5558 5563]))                          )
                        (reparse-symbol indented_block_body) [5535 5794])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5814 5818])
                            ("fig" variable nil (reparse-symbol function_parameters) [5820 5823]))                          
                        :documentation "
        Set the figure

        accepts a class:`~matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [5799 6048])
                    ("axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6094 6098])
                            ("ax" variable nil (reparse-symbol function_parameters) [6100 6102]))                          
                        :decorators 
                          ( ("martist.Artist.axes.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6053 6281])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6299 6303])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [6305 6315]))                          )
                        (reparse-symbol indented_block_body) [6286 6469])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6489 6493])
                            ("xy" variable nil (reparse-symbol function_parameters) [6495 6497]))                          
                        :documentation "
        Set the offset

        accepts x, y, tuple, or a callable object.
        ")
                        (reparse-symbol indented_block_body) [6474 6651])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6671 6675])
                            ("width" variable nil (reparse-symbol function_parameters) [6677 6682])
                            ("height" variable nil (reparse-symbol function_parameters) [6684 6690])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [6692 6700])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [6702 6710])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6712 6720]))                          
                        :documentation "
        Get the offset

        accepts extent of the box
        ")
                        (reparse-symbol indented_block_body) [6656 6967])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6986 6990])
                            ("width" variable nil (reparse-symbol function_parameters) [6992 6997]))                          
                        :documentation "
        Set the width

        accepts float
        ")
                        (reparse-symbol indented_block_body) [6972 7122])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7142 7146])
                            ("height" variable nil (reparse-symbol function_parameters) [7148 7154]))                          
                        :documentation "
        Set the height

        accepts float
        ")
                        (reparse-symbol indented_block_body) [7127 7282])
                    ("get_visible_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7312 7316]))                          
                        :documentation "
        Return a list of visible artists it contains.
        ")
                        (reparse-symbol indented_block_body) [7287 7459])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7481 7485]))                          
                        :documentation "
        Return a list of artists it contains.
        ")
                        (reparse-symbol indented_block_body) [7464 7588])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7616 7620])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7622 7630]))                          )
                        (reparse-symbol indented_block_body) [7593 7661])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7681 7685])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7687 7695]))                          
                        :documentation "
        Return with, height, xdescent, ydescent of box
        ")
                        (reparse-symbol indented_block_body) [7666 7871])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7898 7902])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7904 7912]))                          )
                        (reparse-symbol indented_block_body) [7876 8177])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8191 8195])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8197 8205]))                          
                        :documentation "
        Update the location of children if necessary and draw them
        to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [8182 8797]))                  
                :type "class")
                nil [4607 8797])
            ("PackerBase" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str, optional
            Alignment of boxes. Can be one of ``top``, ``bottom``,
            ``left``, ``right``, ``center`` and ``baseline``

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8977 9700])
                            ("super" code nil (reparse-symbol indented_block_body) [9709 9743])
                            ("self" variable nil (reparse-symbol indented_block_body) [9753 9773])
                            ("self" variable nil (reparse-symbol indented_block_body) [9782 9800])
                            ("self" variable nil (reparse-symbol indented_block_body) [9809 9823])
                            ("self" variable nil (reparse-symbol indented_block_body) [9832 9846])
                            ("self" variable nil (reparse-symbol indented_block_body) [9855 9871])
                            ("self" variable nil (reparse-symbol indented_block_body) [9880 9898])
                            ("self" variable nil (reparse-symbol indented_block_body) [9908 9933]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8845 8849])
                            ("pad" variable nil (reparse-symbol function_parameters) [8851 8854])
                            ("sep" variable nil (reparse-symbol function_parameters) [8861 8864])
                            ("width" variable nil (reparse-symbol function_parameters) [8871 8876])
                            ("height" variable nil (reparse-symbol function_parameters) [8883 8889])
                            ("align" variable nil (reparse-symbol function_parameters) [8913 8918])
                            ("mode" variable nil (reparse-symbol function_parameters) [8925 8929])
                            ("children" variable nil (reparse-symbol function_parameters) [8953 8961]))                          
                        :documentation "
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str, optional
            Alignment of boxes. Can be one of ``top``, ``bottom``,
            ``left``, ``right``, ``center`` and ``baseline``

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8832 9934]))                  
                :type "class")
                nil [8799 9934])
            ("VPacker" type
               (:documentation "
    The VPacker has its children packed vertically. It automatically
    adjust the relative positions of children in the drawing time.
    "
                :superclasses ("PackerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional

            width and height of the container box, calculated if
            `None`.

        align : str, optional
            Alignment of boxes.

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10273 10903])
                            ("super" code nil (reparse-symbol indented_block_body) [10912 11065]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10132 10136])
                            ("pad" variable nil (reparse-symbol function_parameters) [10138 10141])
                            ("sep" variable nil (reparse-symbol function_parameters) [10148 10151])
                            ("width" variable nil (reparse-symbol function_parameters) [10158 10163])
                            ("height" variable nil (reparse-symbol function_parameters) [10170 10176])
                            ("align" variable nil (reparse-symbol function_parameters) [10200 10205])
                            ("mode" variable nil (reparse-symbol function_parameters) [10218 10222])
                            ("children" variable nil (reparse-symbol function_parameters) [10249 10257]))                          
                        :documentation "
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional

            width and height of the container box, calculated if
            `None`.

        align : str, optional
            Alignment of boxes.

        mode : str, optional
            Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10119 11066])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11094 11098])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11100 11108]))                          
                        :documentation "
        update offset of childrens and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [11071 12515]))                  
                :type "class")
                nil [9936 12515])
            ("HPacker" type
               (:documentation "
    The HPacker has its children packed horizontally. It automatically
    adjusts the relative positions of children at draw time.
    "
                :superclasses ("PackerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str
           Alignment of boxes.

        mode : str
           Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [12850 13455])
                            ("super" code nil (reparse-symbol indented_block_body) [13464 13579]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12709 12713])
                            ("pad" variable nil (reparse-symbol function_parameters) [12715 12718])
                            ("sep" variable nil (reparse-symbol function_parameters) [12725 12728])
                            ("width" variable nil (reparse-symbol function_parameters) [12735 12740])
                            ("height" variable nil (reparse-symbol function_parameters) [12747 12753])
                            ("align" variable nil (reparse-symbol function_parameters) [12777 12782])
                            ("mode" variable nil (reparse-symbol function_parameters) [12795 12799])
                            ("children" variable nil (reparse-symbol function_parameters) [12826 12834]))                          
                        :documentation "
        Parameters
        ----------
        pad : float, optional
            Boundary pad.

        sep : float, optional
            Spacing between items.

        width : float, optional

        height : float, optional
           Width and height of the container box, calculated if
           `None`.

        align : str
           Alignment of boxes.

        mode : str
           Packing mode.

        Notes
        -----
        *pad* and *sep* need to given in points and will be scale with
        the renderer dpi, while *width* and *height* need to be in
        pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12696 13580])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13608 13612])
                            ("renderer" variable nil (reparse-symbol function_parameters) [13614 13622]))                          
                        :documentation "
        update offset of children and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [13585 15041]))                  
                :type "class")
                nil [12517 15041])
            ("PaddedBox" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *pad* : boundary pad

        .. note::
          *pad* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [15156 15369])
                            ("super" code nil (reparse-symbol indented_block_body) [15379 15412])
                            ("self" variable nil (reparse-symbol indented_block_body) [15422 15436])
                            ("self" variable nil (reparse-symbol indented_block_body) [15445 15469])
                            ("self" variable nil (reparse-symbol indented_block_body) [15479 15698])
                            ("self" code nil (reparse-symbol indented_block_body) [15708 15748])
                            ("if" code nil (reparse-symbol indented_block_body) [15758 15829])
                            ("self" variable nil (reparse-symbol indented_block_body) [15838 15866]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15088 15092])
                            ("child" variable nil (reparse-symbol function_parameters) [15094 15099])
                            ("pad" variable nil (reparse-symbol function_parameters) [15101 15104])
                            ("draw_frame" variable nil (reparse-symbol function_parameters) [15111 15121])
                            ("patch_attrs" variable nil (reparse-symbol function_parameters) [15129 15140]))                          
                        :documentation "
        *pad* : boundary pad

        .. note::
          *pad* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15075 15867])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15895 15899])
                            ("renderer" variable nil (reparse-symbol function_parameters) [15901 15909]))                          
                        :documentation "
        update offset of childrens and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [15872 16253])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16267 16271])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16273 16281]))                          
                        :documentation "
        Update the location of children if necessary and draw them
        to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [16258 16956])
                    ("update_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16978 16982])
                            ("bbox" variable nil (reparse-symbol function_parameters) [16984 16988])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [16990 16998]))                          )
                        (reparse-symbol indented_block_body) [16961 17209])
                    ("draw_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17229 17233])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17235 17243]))                          )
                        (reparse-symbol indented_block_body) [17214 17446]))                  
                :type "class")
                nil [15043 17446])
            ("DrawingArea" type
               (:documentation "
    The DrawingArea can contain any Artist as a child. The DrawingArea
    has a fixed width and height. The position of children relative to
    the parent is fixed. The children can be clipped at the
    boundaries of the parent.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *width*, *height* : width and height of the container box.
        *xdescent*, *ydescent* : descent of the box in x- and y-direction.
        *clip* : Whether to clip the children
        \"\"\"" code nil (reparse-symbol indented_block_body) [17829 18032])
                            ("super" code nil (reparse-symbol indented_block_body) [18042 18077])
                            ("self" variable nil (reparse-symbol indented_block_body) [18087 18105])
                            ("self" variable nil (reparse-symbol indented_block_body) [18114 18134])
                            ("self" variable nil (reparse-symbol indented_block_body) [18143 18167])
                            ("self" variable nil (reparse-symbol indented_block_body) [18176 18200])
                            ("self" variable nil (reparse-symbol indented_block_body) [18209 18235])
                            ("self" variable nil (reparse-symbol indented_block_body) [18245 18291])
                            ("self" code nil (reparse-symbol indented_block_body) [18300 18329])
                            ("self" code nil (reparse-symbol indented_block_body) [18338 18375])
                            ("self" variable nil (reparse-symbol indented_block_body) [18385 18428]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17744 17748])
                            ("width" variable nil (reparse-symbol function_parameters) [17750 17755])
                            ("height" variable nil (reparse-symbol function_parameters) [17757 17763])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [17765 17773])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [17795 17803])
                            ("clip" variable nil (reparse-symbol function_parameters) [17808 17812]))                          
                        :documentation "
        *width*, *height* : width and height of the container box.
        *xdescent*, *ydescent* : descent of the box in x- and y-direction.
        *clip* : Whether to clip the children
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17731 18429])
                    ("clip_children" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18466 18470]))                          
                        :documentation "
        If the children of this DrawingArea should be clipped
        by DrawingArea bounding box.
        ")
                        (reparse-symbol indented_block_body) [18434 18631])
                    ("clip_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18680 18684])
                            ("val" variable nil (reparse-symbol function_parameters) [18686 18689]))                          
                        :decorators 
                          ( ("clip_children.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18636 18758])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18781 18785]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the children
        ")
                        (reparse-symbol indented_block_body) [18763 18963])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18986 18990])
                            ("t" variable nil (reparse-symbol function_parameters) [18992 18993]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [18968 19067])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19087 19091])
                            ("xy" variable nil (reparse-symbol function_parameters) [19093 19095]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y cooridnate in disokay units.
        ")
                        (reparse-symbol indented_block_body) [19072 19364])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19384 19388]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [19369 19483])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19510 19514])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19516 19524]))                          )
                        (reparse-symbol indented_block_body) [19488 19768])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19788 19792])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19794 19802]))                          
                        :documentation "
        Return with, height, xdescent, ydescent of box
        ")
                        (reparse-symbol indented_block_body) [19773 20059])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20079 20083])
                            ("a" variable nil (reparse-symbol function_parameters) [20085 20086]))                          )
                        (reparse-symbol indented_block_body) [20064 20432])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20446 20450])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20452 20460]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [20437 21287]))                  
                :type "class")
                nil [17448 21287])
            ("TextArea" type
               (:documentation "
    The TextArea is contains a single Text instance. The text is
    placed at (0,0) with baseline+left alignment. The width and height
    of the TextArea instance is the width and height of the its child
    text.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        s : str
            a string to be displayed.

        textprops : `~matplotlib.font_manager.FontProperties`, optional

        multilinebaseline : bool, optional
            If `True`, baseline for multiline text is adjusted so that
            it is (approximatedly) center-aligned with singleline
            text.

        minimumdescent : bool, optional
            If `True`, the box has a minimum descent of \"p\".
        \"\"\"" code nil (reparse-symbol indented_block_body) [21714 22195])
                            ("if" code nil (reparse-symbol indented_block_body) [22204 22253])
                            ("if" code nil (reparse-symbol indented_block_body) [22262 22329])
                            ("self" variable nil (reparse-symbol indented_block_body) [22338 22383])
                            ("OffsetBox" code nil (reparse-symbol indented_block_body) [22393 22417])
                            ("self" variable nil (reparse-symbol indented_block_body) [22427 22456])
                            ("self" variable nil (reparse-symbol indented_block_body) [22466 22512])
                            ("self" code nil (reparse-symbol indented_block_body) [22521 22550])
                            ("self" code nil (reparse-symbol indented_block_body) [22559 22596])
                            ("self" variable nil (reparse-symbol indented_block_body) [22605 22654])
                            ("self" code nil (reparse-symbol indented_block_body) [22663 22770])
                            ("self" variable nil (reparse-symbol indented_block_body) [22780 22823])
                            ("self" variable nil (reparse-symbol indented_block_body) [22832 22869]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21565 21569])
                            ("s" variable nil (reparse-symbol function_parameters) [21571 21572])
                            ("textprops" variable nil (reparse-symbol function_parameters) [21591 21600])
                            ("multilinebaseline" variable nil (reparse-symbol function_parameters) [21624 21641])
                            ("minimumdescent" variable nil (reparse-symbol function_parameters) [21665 21679]))                          
                        :documentation "
        Parameters
        ----------
        s : str
            a string to be displayed.

        textprops : `~matplotlib.font_manager.FontProperties`, optional

        multilinebaseline : bool, optional
            If `True`, baseline for multiline text is adjusted so that
            it is (approximatedly) center-aligned with singleline
            text.

        minimumdescent : bool, optional
            If `True`, the box has a minimum descent of \"p\".
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21552 22870])
                    ("set_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22888 22892])
                            ("s" variable nil (reparse-symbol function_parameters) [22894 22895]))                          )
                        (reparse-symbol indented_block_body) [22875 23004])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23022 23026]))                          )
                        (reparse-symbol indented_block_body) [23009 23130])
                    ("set_multilinebaseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23161 23165])
                            ("t" variable nil (reparse-symbol function_parameters) [23167 23168]))                          
                        :documentation "
        Set multilinebaseline .

        If True, baseline for multiline text is
        adjusted so that it is (approximatedly) center-aligned with
        singleline text.
        ")
                        (reparse-symbol indented_block_body) [23135 23431])
                    ("get_multilinebaseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23462 23466]))                          
                        :documentation "
        get multilinebaseline .
        ")
                        (reparse-symbol indented_block_body) [23436 23564])
                    ("set_minimumdescent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23592 23596])
                            ("t" variable nil (reparse-symbol function_parameters) [23598 23599]))                          
                        :documentation "
        Set minimumdescent .

        If True, extent of the single line text is adjusted so that
        it has minimum descent of \"p\"
        ")
                        (reparse-symbol indented_block_body) [23569 23821])
                    ("get_minimumdescent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23849 23853]))                          
                        :documentation "
        get minimumdescent.
        ")
                        (reparse-symbol indented_block_body) [23826 23944])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23967 23971])
                            ("t" variable nil (reparse-symbol function_parameters) [23973 23974]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [23949 24048])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24068 24072])
                            ("xy" variable nil (reparse-symbol function_parameters) [24074 24076]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y coordinates in display units.
        ")
                        (reparse-symbol indented_block_body) [24053 24346])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24366 24370]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [24351 24465])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24492 24496])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24498 24506]))                          )
                        (reparse-symbol indented_block_body) [24470 24749])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24769 24773])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24775 24783]))                          )
                        (reparse-symbol indented_block_body) [24754 25683])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25697 25701])
                            ("renderer" variable nil (reparse-symbol function_parameters) [25703 25711]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [25688 25895]))                  
                :type "class")
                nil [21289 25895])
            ("AuxTransformBox" type
               (:documentation "
    Offset Box with the aux_transform . Its children will be
    transformed with the aux_transform first then will be
    offseted. The absolute coordinate of the aux_transform is meaning
    as it will be automatically adjust so that the left-lower corner
    of the bounding box of children will be set to (0,0) before the
    offset transform.

    It is similar to drawing area, except that the extent of the box
    is not predetermined but calculated from the window extent of its
    children. Furthermore, the extent of the children will be
    calculated in the transformed coordinate.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26590 26624])
                            ("OffsetBox" code nil (reparse-symbol indented_block_body) [26633 26657])
                            ("self" variable nil (reparse-symbol indented_block_body) [26667 26713])
                            ("self" code nil (reparse-symbol indented_block_body) [26722 26751])
                            ("self" code nil (reparse-symbol indented_block_body) [26760 26797])
                            ("self" variable nil (reparse-symbol indented_block_body) [26969 27019])
                            ("self" code nil (reparse-symbol indented_block_body) [27028 27061]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26560 26564])
                            ("aux_transform" variable nil (reparse-symbol function_parameters) [26566 26579]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26547 27062])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27082 27086])
                            ("a" variable nil (reparse-symbol function_parameters) [27088 27089]))                          )
                        (reparse-symbol indented_block_body) [27067 27271])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27294 27298]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the children
        ")
                        (reparse-symbol indented_block_body) [27276 27538])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27561 27565])
                            ("t" variable nil (reparse-symbol function_parameters) [27567 27568]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [27543 27642])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27662 27666])
                            ("xy" variable nil (reparse-symbol function_parameters) [27668 27670]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y coordinate in disokay units.
        ")
                        (reparse-symbol indented_block_body) [27647 27939])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27959 27963]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [27944 28058])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28085 28089])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28091 28099]))                          )
                        (reparse-symbol indented_block_body) [28063 28342])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28362 28366])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28368 28376]))                          )
                        (reparse-symbol indented_block_body) [28347 29005])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29019 29023])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29025 29033]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [29010 29245]))                  
                :type "class")
                nil [25897 29245])
            ("AnchoredOffsetbox" type
               (:documentation "
    An offset box placed according to the legend location
    loc. AnchoredOffsetbox has a single child. When multiple children
    is needed, use other OffsetBox class to enclose them.  By default,
    the offset box is anchored against its parent axes. You may
    explicitly specify the bbox_to_anchor.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [29609 29619])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        loc is a string or an integer specifying the legend location.
        The valid  location codes are::

        'upper right'  : 1,
        'upper left'   : 2,
        'lower left'   : 3,
        'lower right'  : 4,
        'right'        : 5,
        'center left'  : 6,
        'center right' : 7,
        'lower center' : 8,
        'upper center' : 9,
        'center'       : 10,

        pad : pad around the child for drawing a frame. given in
          fraction of fontsize.

        borderpad : pad between offsetbox frame and the bbox_to_anchor,

        child : OffsetBox instance that will be anchored.

        prop : font property. This is only used as a reference for paddings.

        frameon : draw a frame box if True.

        bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.

        bbox_transform : with which the bbox_to_anchor will be transformed.

        \"\"\"" code nil (reparse-symbol indented_block_body) [29880 30788])
                            ("super" code nil (reparse-symbol indented_block_body) [30797 30846])
                            ("self" code nil (reparse-symbol indented_block_body) [30856 30911])
                            ("self" code nil (reparse-symbol indented_block_body) [30920 30941])
                            ("self" variable nil (reparse-symbol indented_block_body) [30951 30965])
                            ("self" variable nil (reparse-symbol indented_block_body) [30974 31000])
                            ("self" variable nil (reparse-symbol indented_block_body) [31009 31023])
                            ("if" code nil (reparse-symbol indented_block_body) [31033 31349])
                            ("self" variable nil (reparse-symbol indented_block_body) [31358 31571])
                            ("self" code nil (reparse-symbol indented_block_body) [31580 31620])
                            ("self" variable nil (reparse-symbol indented_block_body) [31629 31654]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29662 29666])
                            ("loc" variable nil (reparse-symbol function_parameters) [29668 29671])
                            ("pad" variable nil (reparse-symbol function_parameters) [29690 29693])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [29699 29708])
                            ("child" variable nil (reparse-symbol function_parameters) [29731 29736])
                            ("prop" variable nil (reparse-symbol function_parameters) [29743 29747])
                            ("frameon" variable nil (reparse-symbol function_parameters) [29754 29761])
                            ("bbox_to_anchor" variable nil (reparse-symbol function_parameters) [29785 29799])
                            ("bbox_transform" variable nil (reparse-symbol function_parameters) [29823 29837])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29861 29869]))                          
                        :documentation "
        loc is a string or an integer specifying the legend location.
        The valid  location codes are::

        'upper right'  : 1,
        'upper left'   : 2,
        'lower left'   : 3,
        'lower right'  : 4,
        'right'        : 5,
        'center left'  : 6,
        'center right' : 7,
        'lower center' : 8,
        'upper center' : 9,
        'center'       : 10,

        pad : pad around the child for drawing a frame. given in
          fraction of fontsize.

        borderpad : pad between offsetbox frame and the bbox_to_anchor,

        child : OffsetBox instance that will be anchored.

        prop : font property. This is only used as a reference for paddings.

        frameon : draw a frame box if True.

        bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.

        bbox_transform : with which the bbox_to_anchor will be transformed.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29649 31655])
                    ("set_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31674 31678])
                            ("child" variable nil (reparse-symbol function_parameters) [31680 31685]))                          )
                        (reparse-symbol indented_block_body) [31660 31846])
                    ("get_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31865 31869]))                          )
                        (reparse-symbol indented_block_body) [31851 31926])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31948 31952]))                          )
                        (reparse-symbol indented_block_body) [31931 32022])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32042 32046])
                            ("renderer" variable nil (reparse-symbol function_parameters) [32048 32056]))                          
                        :documentation "
        return the extent of the artist. The extent of the child
        added with the pad is returned
        ")
                        (reparse-symbol indented_block_body) [32027 32420])
                    ("get_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32448 32452]))                          
                        :documentation "
        return the bbox that the legend will be anchored
        ")
                        (reparse-symbol indented_block_body) [32425 32887])
                    ("set_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32915 32919])
                            ("bbox" variable nil (reparse-symbol function_parameters) [32921 32925])
                            ("transform" variable nil (reparse-symbol function_parameters) [32927 32936]))                          
                        :documentation "
        set the bbox that the child will be anchored.

        *bbox* can be a Bbox instance, a list of [left, bottom, width,
        height], or a list of [left, bottom] where the width and
        height will be assumed to be zero. The bbox will be
        transformed to display coordinate by the given transform.
        ")
                        (reparse-symbol indented_block_body) [32892 33760])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33787 33791])
                            ("renderer" variable nil (reparse-symbol function_parameters) [33793 33801]))                          )
                        (reparse-symbol indented_block_body) [33765 34080])
                    ("_update_offset_func" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34109 34113])
                            ("renderer" variable nil (reparse-symbol function_parameters) [34115 34123])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [34125 34133]))                          
                        :documentation "
        Update the offset func which depends on the dpi of the
        renderer (because of the padding).
        ")
                        (reparse-symbol indented_block_body) [34085 34933])
                    ("update_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34955 34959])
                            ("bbox" variable nil (reparse-symbol function_parameters) [34961 34965])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [34967 34975]))                          )
                        (reparse-symbol indented_block_body) [34938 35160])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35174 35178])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35180 35188]))                          )
                        (reparse-symbol indented_block_body) [35165 35889])
                    ("_get_anchored_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35917 35921])
                            ("loc" variable nil (reparse-symbol function_parameters) [35923 35926])
                            ("bbox" variable nil (reparse-symbol function_parameters) [35928 35932])
                            ("parentbbox" variable nil (reparse-symbol function_parameters) [35934 35944])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [35946 35955]))                          
                        :documentation "
        return the position of the bbox anchored at the parentbbox
        with the loc code, with the borderpad.
        ")
                        (reparse-symbol indented_block_body) [35894 36752]))                  
                :type "class")
                nil [29247 36752])
            ("AnchoredText" type
               (:documentation "
    AnchoredOffsetbox with Text.
    "
                :superclasses ("AnchoredOffsetbox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        s : string
            Text.

        loc : str
            Location code.

        pad : float, optional
            Pad between the text and the frame as fraction of the font
            size.

        borderpad : float, optional
            Pad between the frame and the axes (or *bbox_to_anchor*).

        prop : `matplotlib.font_manager.FontProperties`
            Font properties.

        Notes
        -----
        Other keyword parameters of `AnchoredOffsetbox` are also
        allowed.
        \"\"\"" code nil (reparse-symbol indented_block_body) [36928 37488])
                            ("if" code nil (reparse-symbol indented_block_body) [37498 37537])
                            ("propkeys" variable nil (reparse-symbol indented_block_body) [37545 37580])
                            ("badkwargs" variable nil (reparse-symbol indented_block_body) [37589 37657])
                            ("if" code nil (reparse-symbol indented_block_body) [37666 37837])
                            ("self" variable nil (reparse-symbol indented_block_body) [37846 37934])
                            ("fp" variable nil (reparse-symbol indented_block_body) [37943 37983])
                            ("super" code nil (reparse-symbol indented_block_body) [37993 38226]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36860 36864])
                            ("s" variable nil (reparse-symbol function_parameters) [36866 36867])
                            ("loc" variable nil (reparse-symbol function_parameters) [36869 36872])
                            ("pad" variable nil (reparse-symbol function_parameters) [36874 36877])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [36883 36892])
                            ("prop" variable nil (reparse-symbol function_parameters) [36898 36902])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36909 36917]))                          
                        :documentation "
        Parameters
        ----------
        s : string
            Text.

        loc : str
            Location code.

        pad : float, optional
            Pad between the text and the frame as fraction of the font
            size.

        borderpad : float, optional
            Pad between the frame and the axes (or *bbox_to_anchor*).

        prop : `matplotlib.font_manager.FontProperties`
            Font properties.

        Notes
        -----
        Other keyword parameters of `AnchoredOffsetbox` are also
        allowed.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36847 38227]))                  
                :type "class")
                nil [36754 38227])
            ("OffsetImage" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("OffsetBox" code nil (reparse-symbol indented_block_body) [38617 38641])
                            ("self" variable nil (reparse-symbol indented_block_body) [38650 38673])
                            ("self" variable nil (reparse-symbol indented_block_body) [38683 39153])
                            ("self" variable nil (reparse-symbol indented_block_body) [39163 39192])
                            ("self" code nil (reparse-symbol indented_block_body) [39202 39221])
                            ("self" code nil (reparse-symbol indented_block_body) [39230 39248]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38276 38280])
                            ("arr" variable nil (reparse-symbol function_parameters) [38282 38285])
                            ("zoom" variable nil (reparse-symbol function_parameters) [38304 38308])
                            ("cmap" variable nil (reparse-symbol function_parameters) [38329 38333])
                            ("norm" variable nil (reparse-symbol function_parameters) [38357 38361])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [38385 38398])
                            ("origin" variable nil (reparse-symbol function_parameters) [38422 38428])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [38452 38462])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [38483 38492])
                            ("resample" variable nil (reparse-symbol function_parameters) [38515 38523])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [38548 38555])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38579 38587]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38263 39249])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39267 39271])
                            ("arr" variable nil (reparse-symbol function_parameters) [39273 39276]))                          )
                        (reparse-symbol indented_block_body) [39254 39382])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39400 39404]))                          )
                        (reparse-symbol indented_block_body) [39387 39433])
                    ("set_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39451 39455])
                            ("zoom" variable nil (reparse-symbol function_parameters) [39457 39461]))                          )
                        (reparse-symbol indented_block_body) [39438 39516])
                    ("get_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39534 39538]))                          )
                        (reparse-symbol indented_block_body) [39521 39567])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39989 39993]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [39974 40088])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40110 40114]))                          )
                        (reparse-symbol indented_block_body) [40093 40145])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40172 40176])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40178 40186]))                          )
                        (reparse-symbol indented_block_body) [40150 40412])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40432 40436])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40438 40446]))                          )
                        (reparse-symbol indented_block_body) [40417 40767])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40781 40785])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40787 40795]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [40772 40979]))                  
                :type "class")
                nil [38229 40979])
            ("AnnotationBbox" type
               (:documentation "
    Annotation-like class, but with offsetbox instead of Text.
    "
                :superclasses ("martist.Artist" "_AnnotationBase")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [41119 41129])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41147 41151]))                          )
                        (reparse-symbol indented_block_body) [41135 41220])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *offsetbox* : OffsetBox instance

        *xycoords* : same as Annotation but can be a tuple of two
           strings which are interpreted as x and y coordinates.

        *boxcoords* : similar to textcoords as Annotation but can be a
           tuple of two strings which are interpreted as x and y
           coordinates.

        *box_alignment* : a tuple of two floats for a vertical and
           horizontal alignment of the offset box w.r.t. the *boxcoords*.
           The lower-left corner is (0.0) and upper-right corner is (1.1).

        other parameters are identical to that of Annotation.
        \"\"\"" code nil (reparse-symbol indented_block_body) [41655 42284])
                            ("martist" code nil (reparse-symbol indented_block_body) [42294 42333])
                            ("_AnnotationBase" code nil (reparse-symbol indented_block_body) [42342 42527])
                            ("self" variable nil (reparse-symbol indented_block_body) [42537 42563])
                            ("self" variable nil (reparse-symbol indented_block_body) [42573 42601])
                            ("self" code nil (reparse-symbol indented_block_body) [42611 42638])
                            ("if" code nil (reparse-symbol indented_block_body) [42648 42739])
                            ("if" code nil (reparse-symbol indented_block_body) [42748 42861])
                            ("if" code nil (reparse-symbol indented_block_body) [42870 43189])
                            ("self" variable nil (reparse-symbol indented_block_body) [43251 43286])
                            ("self" variable nil (reparse-symbol indented_block_body) [43312 43525])
                            ("self" code nil (reparse-symbol indented_block_body) [43534 43576])
                            ("if" code nil (reparse-symbol indented_block_body) [43585 43639])
                            ("self" variable nil (reparse-symbol indented_block_body) [43647 43672]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41268 41272])
                            ("offsetbox" variable nil (reparse-symbol function_parameters) [41274 41283])
                            ("xy" variable nil (reparse-symbol function_parameters) [41285 41287])
                            ("xybox" variable nil (reparse-symbol function_parameters) [41306 41311])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [41335 41343])
                            ("boxcoords" variable nil (reparse-symbol function_parameters) [41369 41378])
                            ("frameon" variable nil (reparse-symbol function_parameters) [41402 41409])
                            ("pad" variable nil (reparse-symbol function_parameters) [41416 41419])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [41455 41470])
                            ("box_alignment" variable nil (reparse-symbol function_parameters) [41494 41507])
                            ("bboxprops" variable nil (reparse-symbol function_parameters) [41537 41546])
                            ("arrowprops" variable nil (reparse-symbol function_parameters) [41570 41580])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [41604 41612])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41636 41644]))                          
                        :documentation "
        *offsetbox* : OffsetBox instance

        *xycoords* : same as Annotation but can be a tuple of two
           strings which are interpreted as x and y coordinates.

        *boxcoords* : similar to textcoords as Annotation but can be a
           tuple of two strings which are interpreted as x and y
           coordinates.

        *box_alignment* : a tuple of two floats for a vertical and
           horizontal alignment of the offset box w.r.t. the *boxcoords*.
           The lower-left corner is (0.0) and upper-right corner is (1.1).

        other parameters are identical to that of Annotation.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41225 43673])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43702 43706]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43678 43735])
                    ("xyann" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43768 43772])
                            ("xyann" variable nil (reparse-symbol function_parameters) [43774 43779]))                          
                        :decorators 
                          ( ("xyann.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43740 43835])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43868 43872]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43840 43905])
                    ("anncoords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43946 43950])
                            ("coords" variable nil (reparse-symbol function_parameters) [43952 43958]))                          
                        :decorators 
                          ( ("anncoords.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [43910 44019])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44037 44041])
                            ("event" variable nil (reparse-symbol function_parameters) [44043 44048]))                          )
                        (reparse-symbol indented_block_body) [44024 44326])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44348 44352]))                          )
                        (reparse-symbol indented_block_body) [44331 44502])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44522 44526])
                            ("fig" variable nil (reparse-symbol function_parameters) [44528 44531]))                          )
                        (reparse-symbol indented_block_body) [44507 44705])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44727 44731])
                            ("s" variable nil (reparse-symbol function_parameters) [44733 44734]))                          
                        :documentation "
        set fontsize in points
        ")
                        (reparse-symbol indented_block_body) [44710 44933])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44955 44959])
                            ("s" variable nil (reparse-symbol function_parameters) [44961 44962]))                          
                        :documentation "
        return fontsize in points
        ")
                        (reparse-symbol indented_block_body) [44938 45074])
                    ("update_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45100 45104])
                            ("renderer" variable nil (reparse-symbol function_parameters) [45106 45114]))                          
                        :documentation "
        Update the pixel positions of the annotated point and the text.
        ")
                        (reparse-symbol indented_block_body) [45079 45541])
                    ("_update_position_xybox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45573 45577])
                            ("renderer" variable nil (reparse-symbol function_parameters) [45579 45587])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [45589 45597]))                          
                        :documentation "
        Update the pixel positions of the annotation text and the arrow
        patch.
        ")
                        (reparse-symbol indented_block_body) [45546 47684])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47698 47702])
                            ("renderer" variable nil (reparse-symbol function_parameters) [47704 47712]))                          
                        :documentation "
        Draw the :class:`Annotation` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [47689 48447]))                  
                :type "class")
                nil [40981 48447])
            ("DraggableBase" type
               (:documentation "
    helper code for a draggable artist (legend, offsetbox)
    The derived class must override following two method.

      def saveoffset(self):
          pass

      def update_offset(self, dx, dy):
          pass

    *saveoffset* is called when the object is picked for dragging and it is
    meant to save reference position of the artist.

    *update_offset* is called during the dragging. dx and dy is the pixel
     offset from the point where the mouse drag started.

    Optionally you may override following two methods.

      def artist_picker(self, artist, evt):
          return self.ref_artist.contains(evt)

      def finalize_offset(self):
          pass

    *artist_picker* is a picker method that will be
     used. *finalize_offset* is called when the mouse is released. In
     current implementaion of DraggableLegend and DraggableAnnotation,
     *update_offset* places the artists simply in display
     coordinates. And *finalize_offset* recalculate their position in
     the normalized axes coordinate and set a relavant attribute.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [49617 49645])
                            ("self" variable nil (reparse-symbol indented_block_body) [49654 49677])
                            ("self" variable nil (reparse-symbol indented_block_body) [49687 49730])
                            ("self" code nil (reparse-symbol indented_block_body) [49739 49794])
                            ("c2" variable nil (reparse-symbol indented_block_body) [49804 49860])
                            ("c3" variable nil (reparse-symbol indented_block_body) [49869 49938])
                            ("ref_artist" code nil (reparse-symbol indented_block_body) [49948 49989])
                            ("self" variable nil (reparse-symbol indented_block_body) [49998 50018]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49574 49578])
                            ("ref_artist" variable nil (reparse-symbol function_parameters) [49580 49590])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [49592 49600]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49561 50019])
                    ("on_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50038 50042])
                            ("evt" variable nil (reparse-symbol function_parameters) [50044 50047]))                          )
                        (reparse-symbol indented_block_body) [50024 50224])
                    ("on_motion_blit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50248 50252])
                            ("evt" variable nil (reparse-symbol function_parameters) [50254 50257]))                          )
                        (reparse-symbol indented_block_body) [50229 50590])
                    ("on_pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50607 50611])
                            ("evt" variable nil (reparse-symbol function_parameters) [50613 50616]))                          )
                        (reparse-symbol indented_block_body) [50595 51505])
                    ("on_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51525 51529])
                            ("event" variable nil (reparse-symbol function_parameters) [51531 51536]))                          )
                        (reparse-symbol indented_block_body) [51510 51771])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51791 51795]))                          
                        :documentation "disconnect the callbacks")
                        (reparse-symbol indented_block_body) [51776 52055])
                    ("artist_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52078 52082])
                            ("artist" variable nil (reparse-symbol function_parameters) [52084 52090])
                            ("evt" variable nil (reparse-symbol function_parameters) [52092 52095]))                          )
                        (reparse-symbol indented_block_body) [52060 52143])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52164 52168]))                          )
                        (reparse-symbol indented_block_body) [52148 52184])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52207 52211])
                            ("dx" variable nil (reparse-symbol function_parameters) [52213 52215])
                            ("dy" variable nil (reparse-symbol function_parameters) [52217 52219]))                          )
                        (reparse-symbol indented_block_body) [52189 52235])
                    ("finalize_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52260 52264]))                          )
                        (reparse-symbol indented_block_body) [52240 52280]))                  
                :type "class")
                nil [48449 52280])
            ("DraggableOffsetBox" type
               (:superclasses ("DraggableBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("DraggableBase" code nil (reparse-symbol indented_block_body) [52394 52453])
                            ("self" variable nil (reparse-symbol indented_block_body) [52462 52488]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52340 52344])
                            ("ref_artist" variable nil (reparse-symbol function_parameters) [52346 52356])
                            ("offsetbox" variable nil (reparse-symbol function_parameters) [52358 52367])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [52369 52377]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52327 52489])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52510 52514]))                          )
                        (reparse-symbol indented_block_body) [52494 52814])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52837 52841])
                            ("dx" variable nil (reparse-symbol function_parameters) [52843 52845])
                            ("dy" variable nil (reparse-symbol function_parameters) [52847 52849]))                          )
                        (reparse-symbol indented_block_body) [52819 52970])
                    ("get_loc_in_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52997 53001]))                          )
                        (reparse-symbol indented_block_body) [52975 53254]))                  
                :type "class")
                nil [52282 53254])
            ("DraggableAnnotation" type
               (:superclasses ("DraggableBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("DraggableBase" code nil (reparse-symbol indented_block_body) [53358 53417])
                            ("self" variable nil (reparse-symbol indented_block_body) [53426 53454]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53315 53319])
                            ("annotation" variable nil (reparse-symbol function_parameters) [53321 53331])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [53333 53341]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53302 53455])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53476 53480]))                          )
                        (reparse-symbol indented_block_body) [53460 53581])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53604 53608])
                            ("dx" variable nil (reparse-symbol function_parameters) [53610 53612])
                            ("dy" variable nil (reparse-symbol function_parameters) [53614 53616]))                          )
                        (reparse-symbol indented_block_body) [53586 53753]))                  
                :type "class")
                nil [53256 53753])
            ("if" code nil nil [53755 54985]))          
      :file "offsetbox.py"
      :pointmax 54985
      :fsize 54984
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((FROM 5604 . 5608) (PERIOD 5609 . 5610) (FROM 5310 . 5314) (PERIOD 5315 . 5316)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("six" include nil nil [111 121])
            ("matplotlib.cbook" include nil nil [123 155])
            ("matplotlib.artist" include nil nil [156 191])
            ("Container" type
               (:documentation "
    Base class for containers.
    "
                :superclasses ("tuple")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [283 287]))                          )
                        (reparse-symbol indented_block_body) [270 354])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [371 374])
                        ("kl" variable nil (reparse-symbol function_parameters) [376 379])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [381 389]))                      ) (reparse-symbol indented_block_body) [359 433])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [483 504])
                            ("self" variable nil (reparse-symbol indented_block_body) [545 558])
                            ("self" variable nil (reparse-symbol indented_block_body) [585 609])
                            ("self" variable nil (reparse-symbol indented_block_body) [648 674])
                            ("self" code nil (reparse-symbol indented_block_body) [684 705]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [451 455])
                            ("kl" variable nil (reparse-symbol function_parameters) [457 459])
                            ("label" variable nil (reparse-symbol function_parameters) [461 466]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [438 706])
                    ("set_remove_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [733 737])
                            ("f" variable nil (reparse-symbol function_parameters) [739 740]))                          )
                        (reparse-symbol indented_block_body) [711 775])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [791 795]))                          )
                        (reparse-symbol indented_block_body) [780 1070])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1092 1096]))                          )
                        (reparse-symbol indented_block_body) [1075 1319])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1338 1342]))                          
                        :documentation "
        Get the label used for this artist in the legend.
        ")
                        (reparse-symbol indented_block_body) [1324 1454])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1473 1477])
                            ("s" variable nil (reparse-symbol function_parameters) [1479 1480]))                          
                        :documentation "
        Set the label to *s* for auto legend.

        ACCEPTS: string or anything printable with '%s' conversion.
        ")
                        (reparse-symbol indented_block_body) [1459 1756])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1778 1782])
                            ("func" variable nil (reparse-symbol function_parameters) [1784 1788]))                          
                        :documentation "
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        ")
                        (reparse-symbol indented_block_body) [1761 2150])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2175 2179])
                            ("oid" variable nil (reparse-symbol function_parameters) [2181 2184]))                          
                        :documentation "
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        ")
                        (reparse-symbol indented_block_body) [2155 2445])
                    ("pchanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2463 2467]))                          
                        :documentation "
        Fire an event when property changed, calling all of the
        registered callbacks.
        ")
                        (reparse-symbol indented_block_body) [2450 2678])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2700 2704]))                          )
                        (reparse-symbol indented_block_body) [2683 2748]))                  
                :type "class")
                nil [194 2748])
            ("BarContainer" type
               (:superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2848 2870])
                            ("self" variable nil (reparse-symbol indented_block_body) [2879 2903])
                            ("Container" code nil (reparse-symbol indented_block_body) [2912 2955]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2799 2803])
                            ("patches" variable nil (reparse-symbol function_parameters) [2805 2812])
                            ("errorbar" variable nil (reparse-symbol function_parameters) [2814 2822])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2829 2837]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2786 2956]))                  
                :type "class")
                nil [2750 2956])
            ("ErrorbarContainer" type
               (:superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3076 3094])
                            ("self" variable nil (reparse-symbol indented_block_body) [3103 3127])
                            ("self" variable nil (reparse-symbol indented_block_body) [3136 3160])
                            ("Container" code nil (reparse-symbol indented_block_body) [3169 3210]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3012 3016])
                            ("lines" variable nil (reparse-symbol function_parameters) [3018 3023])
                            ("has_xerr" variable nil (reparse-symbol function_parameters) [3025 3033])
                            ("has_yerr" variable nil (reparse-symbol function_parameters) [3041 3049])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3057 3065]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2999 3211]))                  
                :type "class")
                nil [2958 3211])
            ("StemContainer" type
               (:superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("markerline, stemlines, baseline" code nil (reparse-symbol indented_block_body) [3319 3382])
                            ("self" variable nil (reparse-symbol indented_block_body) [3391 3419])
                            ("self" variable nil (reparse-symbol indented_block_body) [3428 3454])
                            ("self" variable nil (reparse-symbol indented_block_body) [3463 3487])
                            ("Container" code nil (reparse-symbol indented_block_body) [3496 3561]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3263 3267])
                            ("markerline_stemlines_baseline" variable nil (reparse-symbol function_parameters) [3269 3298])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3300 3308]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3250 3562]))                  
                :type "class")
                nil [3213 3562]))          
      :file "container.py"
      :pointmax 3562
      :fsize 3561
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module defines default legend handlers.

It is strongly encouraged to have read the :ref:`legend guide
<plotting-guide-legend>` before this documentation.

Legend handlers are expected to be a callable object with a following
signature. ::

    legend_handler(legend, orig_handle, fontsize, handlebox)

Where *legend* is the legend itself, *orig_handle* is the original
plot, *fontsize* is the fontsize in pixles, and *handlebox* is a
OffsetBox instance. Within the call, you should create relevant
artists (using relevant properties from the *legend* and/or
*orig_handle*) and add them into the handlebox. The artists needs to
be scaled according to the fontsize (note that the size is in pixel,
i.e., this is dpi-scaled value).

This module includes definition of several legend handler classes
derived from the base class (HandlerBase) with the following method.

    def legend_artist(self, legend, orig_handle, fontsize, handlebox):


\"\"\"" code nil nil [1 953])
            ("" code nil nil [977 1062])
            ("six" include nil nil [1064 1074])
            ("six.moves" include nil nil [1075 1100])
            ("numpy" include nil nil [1102 1120])
            ("matplotlib.lines" include nil nil [1122 1157])
            ("matplotlib.patches" include nil nil [1158 1198])
            ("matplotlib.collections" include nil nil [1199 1237])
            ("matplotlib.colors" include nil nil [1238 1273])
            ("update_from_first_child" function (:arguments 
              ( ("tgt" variable nil (reparse-symbol function_parameters) [1304 1307])
                ("src" variable nil (reparse-symbol function_parameters) [1309 1312]))              ) nil [1276 1358])
            ("HandlerBase" type
               (:documentation "
    A Base class for default legend handlers.

    The derived classes are meant to override *create_artists* method, which
    has a following signature.::

      def create_artists(self, legend, orig_handle,
                         xdescent, ydescent, width, height, fontsize,
                         trans):

    The overridden method needs to create artists of the given
    transform that fits in the given dimension (xdescent, ydescent,
    width, height) that are scaled by fontsize if necessary.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self, self" code nil (reparse-symbol indented_block_body) [1978 2013])
                            ("self" variable nil (reparse-symbol indented_block_body) [2022 2058]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1927 1931])
                            ("xpad" variable nil (reparse-symbol function_parameters) [1933 1937])
                            ("ypad" variable nil (reparse-symbol function_parameters) [1942 1946])
                            ("update_func" variable nil (reparse-symbol function_parameters) [1951 1962]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1914 2059])
                    ("_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2081 2085])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2087 2100])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2102 2113]))                          )
                        (reparse-symbol indented_block_body) [2064 2302])
                    ("_default_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2332 2336])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2338 2351])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2353 2364]))                          )
                        (reparse-symbol indented_block_body) [2307 2414])
                    ("update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2435 2439])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2441 2454])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2456 2467])
                            ("legend" variable nil (reparse-symbol function_parameters) [2469 2475]))                          )
                        (reparse-symbol indented_block_body) [2419 2665])
                    ("adjust_drawing_area" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2694 2698])
                            ("legend" variable nil (reparse-symbol function_parameters) [2700 2706])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2708 2719])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [2749 2757])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [2759 2767])
                            ("width" variable nil (reparse-symbol function_parameters) [2769 2774])
                            ("height" variable nil (reparse-symbol function_parameters) [2776 2782])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [2784 2792]))                          )
                        (reparse-symbol indented_block_body) [2670 3072])
                    ("legend_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3095 3099])
                            ("legend" variable nil (reparse-symbol function_parameters) [3101 3107])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [3109 3120])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [3145 3153])
                            ("handlebox" variable nil (reparse-symbol function_parameters) [3155 3164]))                          
                        :documentation "
        Return the artist that this HandlerBase generates for the given
        original artist/handle.

        Parameters
        ----------
        legend : :class:`matplotlib.legend.Legend` instance
            The legend for which these legend artists are being created.
        orig_handle : :class:`matplotlib.artist.Artist` or similar
            The object for which these legend artists are being created.
        fontsize : float or int
            The fontsize in pixels. The artists being created should
            be scaled according to the given fontsize.
        handlebox : :class:`matplotlib.offsetbox.OffsetBox` instance
            The box which has been created to hold this legend entry's
            artists. Artists created in the `legend_artist` method must
            be added to this handlebox inside this method.

        ")
                        (reparse-symbol indented_block_body) [3077 4674])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4698 4702])
                            ("legend" variable nil (reparse-symbol function_parameters) [4704 4710])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [4712 4723])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [4748 4756])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [4758 4766])
                            ("width" variable nil (reparse-symbol function_parameters) [4768 4773])
                            ("height" variable nil (reparse-symbol function_parameters) [4775 4781])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [4783 4791])
                            ("trans" variable nil (reparse-symbol function_parameters) [4816 4821]))                          )
                        (reparse-symbol indented_block_body) [4679 4883]))                  
                :type "class")
                nil [1360 4883])
            ("HandlerNpoints" type
               (:superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerBase" code nil (reparse-symbol indented_block_body) [4990 5022])
                            ("self" variable nil (reparse-symbol indented_block_body) [5032 5059])
                            ("self" variable nil (reparse-symbol indented_block_body) [5068 5097]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4937 4941])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [4943 4953])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [4959 4968])
                            ("kw" variable nil (reparse-symbol function_parameters) [4975 4979]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4924 5098])
                    ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5121 5125])
                            ("legend" variable nil (reparse-symbol function_parameters) [5127 5133]))                          )
                        (reparse-symbol indented_block_body) [5103 5257])
                    ("get_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5276 5280])
                            ("legend" variable nil (reparse-symbol function_parameters) [5282 5288])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [5290 5298])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [5300 5308])
                            ("width" variable nil (reparse-symbol function_parameters) [5310 5315])
                            ("height" variable nil (reparse-symbol function_parameters) [5317 5323])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [5325 5333]))                          )
                        (reparse-symbol indented_block_body) [5262 5890]))                  
                :type "class")
                nil [4885 5890])
            ("HandlerNpointsYoffsets" type
               (:superclasses ("HandlerNpoints")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpoints" code nil (reparse-symbol indented_block_body) [6007 6063])
                            ("self" variable nil (reparse-symbol indented_block_body) [6072 6097]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5955 5959])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [5961 5970])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [5977 5985])
                            ("kw" variable nil (reparse-symbol function_parameters) [5992 5996]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5942 6098])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6117 6121])
                            ("legend" variable nil (reparse-symbol function_parameters) [6123 6129])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [6131 6139])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [6141 6149])
                            ("width" variable nil (reparse-symbol function_parameters) [6151 6156])
                            ("height" variable nil (reparse-symbol function_parameters) [6158 6164])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [6166 6174]))                          )
                        (reparse-symbol indented_block_body) [6103 6357]))                  
                :type "class")
                nil [5892 6357])
            ("HandlerLine2D" type
               (:documentation "
    Handler for Line2D instances.
    "
                :superclasses ("HandlerNpoints")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpoints" code nil (reparse-symbol indented_block_body) [6516 6595]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6463 6467])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [6469 6479])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [6485 6494])
                            ("kw" variable nil (reparse-symbol function_parameters) [6501 6505]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6450 6596])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6620 6624])
                            ("legend" variable nil (reparse-symbol function_parameters) [6626 6632])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [6634 6645])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [6670 6678])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [6680 6688])
                            ("width" variable nil (reparse-symbol function_parameters) [6690 6695])
                            ("height" variable nil (reparse-symbol function_parameters) [6697 6703])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [6705 6713])
                            ("trans" variable nil (reparse-symbol function_parameters) [6738 6743]))                          )
                        (reparse-symbol indented_block_body) [6601 7791]))                  
                :type "class")
                nil [6359 7791])
            ("HandlerPatch" type
               (:documentation "
    Handler for Patch instances.
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The HandlerPatch class optionally takes a function ``patch_func``
        who's responsibility is to create the legend key artist. The
        ``patch_func`` should have the signature::

            def patch_func(legend=legend, orig_handle=orig_handle,
                           xdescent=xdescent, ydescent=ydescent,
                           width=width, height=height, fontsize=fontsize)

        Subsequently the created artist will have its ``update_prop`` method
        called and the appropriate transform will be applied.

        \"\"\"" code nil (reparse-symbol indented_block_body) [7930 8487])
                            ("HandlerBase" code nil (reparse-symbol indented_block_body) [8496 8528])
                            ("self" variable nil (reparse-symbol indented_block_body) [8537 8566]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7892 7896])
                            ("patch_func" variable nil (reparse-symbol function_parameters) [7898 7908])
                            ("kw" variable nil (reparse-symbol function_parameters) [7915 7919]))                          
                        :documentation "
        The HandlerPatch class optionally takes a function ``patch_func``
        who's responsibility is to create the legend key artist. The
        ``patch_func`` should have the signature::

            def patch_func(legend=legend, orig_handle=orig_handle,
                           xdescent=xdescent, ydescent=ydescent,
                           width=width, height=height, fontsize=fontsize)

        Subsequently the created artist will have its ``update_prop`` method
        called and the appropriate transform will be applied.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7879 8567])
                    ("_create_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8590 8594])
                            ("legend" variable nil (reparse-symbol function_parameters) [8596 8602])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [8604 8615])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [8639 8647])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [8649 8657])
                            ("width" variable nil (reparse-symbol function_parameters) [8659 8664])
                            ("height" variable nil (reparse-symbol function_parameters) [8666 8672])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [8674 8682]))                          )
                        (reparse-symbol indented_block_body) [8572 9084])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9108 9112])
                            ("legend" variable nil (reparse-symbol function_parameters) [9114 9120])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [9122 9133])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [9158 9166])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [9168 9176])
                            ("width" variable nil (reparse-symbol function_parameters) [9178 9183])
                            ("height" variable nil (reparse-symbol function_parameters) [9185 9191])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [9193 9201])
                            ("trans" variable nil (reparse-symbol function_parameters) [9203 9208]))                          )
                        (reparse-symbol indented_block_body) [9089 9438]))                  
                :type "class")
                nil [7793 9438])
            ("HandlerLineCollection" type
               (:documentation "
    Handler for LineCollection instances.
    "
                :superclasses ("HandlerLine2D")
                :members 
                  ( ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9564 9568])
                            ("legend" variable nil (reparse-symbol function_parameters) [9570 9576]))                          )
                        (reparse-symbol indented_block_body) [9546 9704])
                    ("_default_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9734 9738])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [9740 9753])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [9755 9766]))                          )
                        (reparse-symbol indented_block_body) [9709 10028])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10052 10056])
                            ("legend" variable nil (reparse-symbol function_parameters) [10058 10064])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [10066 10077])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [10102 10110])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [10112 10120])
                            ("width" variable nil (reparse-symbol function_parameters) [10122 10127])
                            ("height" variable nil (reparse-symbol function_parameters) [10129 10135])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [10137 10145])
                            ("trans" variable nil (reparse-symbol function_parameters) [10147 10152]))                          )
                        (reparse-symbol indented_block_body) [10033 10530]))                  
                :type "class")
                nil [9440 10530])
            ("HandlerRegularPolyCollection" type
               (:documentation "
    Handler for RegularPolyCollections.
    "
                :superclasses ("HandlerNpointsYoffsets")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpointsYoffsets" code nil (reparse-symbol indented_block_body) [10713 10775])
                            ("self" variable nil (reparse-symbol indented_block_body) [10785 10804]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10665 10669])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [10671 10679])
                            ("sizes" variable nil (reparse-symbol function_parameters) [10686 10691])
                            ("kw" variable nil (reparse-symbol function_parameters) [10698 10702]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10652 10805])
                    ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10828 10832])
                            ("legend" variable nil (reparse-symbol function_parameters) [10834 10840]))                          )
                        (reparse-symbol indented_block_body) [10810 10968])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10987 10991])
                            ("legend" variable nil (reparse-symbol function_parameters) [10993 10999])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [11001 11012])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [11031 11039])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [11041 11049])
                            ("width" variable nil (reparse-symbol function_parameters) [11051 11056])
                            ("height" variable nil (reparse-symbol function_parameters) [11058 11064])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [11066 11074]))                          )
                        (reparse-symbol indented_block_body) [10973 11759])
                    ("update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11780 11784])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [11786 11799])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [11801 11812])
                            ("legend" variable nil (reparse-symbol function_parameters) [11814 11820]))                          )
                        (reparse-symbol indented_block_body) [11764 12059])
                    ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12086 12090])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [12092 12103])
                            ("sizes" variable nil (reparse-symbol function_parameters) [12105 12110])
                            ("offsets" variable nil (reparse-symbol function_parameters) [12112 12119])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [12121 12132]))                          )
                        (reparse-symbol indented_block_body) [12064 12454])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12478 12482])
                            ("legend" variable nil (reparse-symbol function_parameters) [12484 12490])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [12492 12503])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [12528 12536])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [12538 12546])
                            ("width" variable nil (reparse-symbol function_parameters) [12548 12553])
                            ("height" variable nil (reparse-symbol function_parameters) [12555 12561])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [12563 12571])
                            ("trans" variable nil (reparse-symbol function_parameters) [12596 12601]))                          )
                        (reparse-symbol indented_block_body) [12459 13277]))                  
                :type "class")
                nil [10532 13277])
            ("HandlerPathCollection" type
               (:documentation "
    Handler for PathCollections, which are used by scatter
    "
                :superclasses ("HandlerRegularPolyCollection")
                :members 
                  ( ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13439 13443])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [13445 13456])
                            ("sizes" variable nil (reparse-symbol function_parameters) [13458 13463])
                            ("offsets" variable nil (reparse-symbol function_parameters) [13465 13472])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [13474 13485]))                          )
                        (reparse-symbol indented_block_body) [13417 13742]))                  
                :type "class")
                nil [13279 13742])
            ("HandlerCircleCollection" type
               (:documentation "
    Handler for CircleCollections
    "
                :superclasses ("HandlerRegularPolyCollection")
                :members 
                  ( ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13881 13885])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [13887 13898])
                            ("sizes" variable nil (reparse-symbol function_parameters) [13900 13905])
                            ("offsets" variable nil (reparse-symbol function_parameters) [13907 13914])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [13916 13927]))                          )
                        (reparse-symbol indented_block_body) [13859 14118]))                  
                :type "class")
                nil [13744 14118])
            ("HandlerErrorbar" type
               (:documentation "
    Handler for Errorbars
    "
                :superclasses ("HandlerLine2D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [14319 14346])
                            ("self" variable nil (reparse-symbol indented_block_body) [14355 14382])
                            ("HandlerLine2D" code nil (reparse-symbol indented_block_body) [14392 14501]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14217 14221])
                            ("xerr_size" variable nil (reparse-symbol function_parameters) [14223 14232])
                            ("yerr_size" variable nil (reparse-symbol function_parameters) [14238 14247])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [14271 14281])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [14287 14296])
                            ("kw" variable nil (reparse-symbol function_parameters) [14303 14307]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14204 14502])
                    ("get_err_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14524 14528])
                            ("legend" variable nil (reparse-symbol function_parameters) [14530 14536])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [14538 14546])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [14548 14556])
                            ("width" variable nil (reparse-symbol function_parameters) [14558 14563])
                            ("height" variable nil (reparse-symbol function_parameters) [14565 14571])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [14573 14581]))                          )
                        (reparse-symbol indented_block_body) [14507 14804])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14828 14832])
                            ("legend" variable nil (reparse-symbol function_parameters) [14834 14840])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [14842 14853])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [14878 14886])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [14888 14896])
                            ("width" variable nil (reparse-symbol function_parameters) [14898 14903])
                            ("height" variable nil (reparse-symbol function_parameters) [14905 14911])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [14913 14921])
                            ("trans" variable nil (reparse-symbol function_parameters) [14946 14951]))                          )
                        (reparse-symbol indented_block_body) [14809 18252]))                  
                :type "class")
                nil [14120 18252])
            ("HandlerStem" type
               (:documentation "
    Handler for Errorbars
    "
                :superclasses ("HandlerNpointsYoffsets")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpointsYoffsets" code nil (reparse-symbol indented_block_body) [18454 18680])
                            ("self" variable nil (reparse-symbol indented_block_body) [18689 18710]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18355 18359])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [18361 18371])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [18377 18386])
                            ("bottom" variable nil (reparse-symbol function_parameters) [18410 18416])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [18423 18431])
                            ("kw" variable nil (reparse-symbol function_parameters) [18438 18442]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18342 18711])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18730 18734])
                            ("legend" variable nil (reparse-symbol function_parameters) [18736 18742])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [18744 18752])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [18754 18762])
                            ("width" variable nil (reparse-symbol function_parameters) [18764 18769])
                            ("height" variable nil (reparse-symbol function_parameters) [18771 18777])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [18779 18787]))                          )
                        (reparse-symbol indented_block_body) [18716 18984])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19008 19012])
                            ("legend" variable nil (reparse-symbol function_parameters) [19014 19020])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [19022 19033])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [19058 19066])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [19068 19076])
                            ("width" variable nil (reparse-symbol function_parameters) [19078 19083])
                            ("height" variable nil (reparse-symbol function_parameters) [19085 19091])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [19093 19101])
                            ("trans" variable nil (reparse-symbol function_parameters) [19126 19131]))                          )
                        (reparse-symbol indented_block_body) [18989 20339]))                  
                :type "class")
                nil [18253 20339])
            ("HandlerTuple" type
               (:documentation "
    Handler for Tuple
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerBase" code nil (reparse-symbol indented_block_body) [20454 20490]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20429 20433])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20435 20443]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20416 20491])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20515 20519])
                            ("legend" variable nil (reparse-symbol function_parameters) [20521 20527])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [20529 20540])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [20565 20573])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [20575 20583])
                            ("width" variable nil (reparse-symbol function_parameters) [20585 20590])
                            ("height" variable nil (reparse-symbol function_parameters) [20592 20598])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [20600 20608])
                            ("trans" variable nil (reparse-symbol function_parameters) [20633 20638]))                          )
                        (reparse-symbol indented_block_body) [20496 21129]))                  
                :type "class")
                nil [20341 21129])
            ("HandlerPolyCollection" type
               (:documentation "
    Handler for PolyCollection used in fill_between and stackplot.
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21277 21281])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [21283 21296])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [21298 21309]))                          )
                        (reparse-symbol indented_block_body) [21260 22535])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22559 22563])
                            ("legend" variable nil (reparse-symbol function_parameters) [22565 22571])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [22573 22584])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [22609 22617])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [22619 22627])
                            ("width" variable nil (reparse-symbol function_parameters) [22629 22634])
                            ("height" variable nil (reparse-symbol function_parameters) [22636 22642])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [22644 22652])
                            ("trans" variable nil (reparse-symbol function_parameters) [22654 22659]))                          )
                        (reparse-symbol indented_block_body) [22540 22860]))                  
                :type "class")
                nil [21131 22860]))          
      :file "legend_handler.py"
      :pointmax 22860
      :fsize 22859
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This is a python interface to Adobe Font Metrics Files.  Although a
number of other python implementations exist, and may be more complete
than this, it was decided not to go with them because they were
either:

  1) copyrighted or used a non-BSD compatible license

  2) had too many dependencies and a free standing lib was needed

  3) Did more than needed and it was easier to write afresh rather than
     figure out how to get just what was needed.

It is pretty easy to use, and requires only built-in python libs:

    >>> from matplotlib import rcParams
    >>> import os.path
    >>> afm_fname = os.path.join(rcParams['datapath'],
    ...                         'fonts', 'afm', 'ptmr8a.afm')
    >>>
    >>> from matplotlib.afm import AFM
    >>> with open(afm_fname) as fh:
    ...     afm = AFM(fh)
    >>> afm.string_width_height('What the heck?')
    (6220.0, 694)
    >>> afm.get_fontname()
    'Times-Roman'
    >>> afm.get_kern_dist('A', 'f')
    0
    >>> afm.get_kern_dist('A', 'y')
    -92.0
    >>> afm.get_bbox_char('!')
    [130, -9, 238, 676]

\"\"\"" code nil nil [1 1077])
            ("" code nil nil [1102 1187])
            ("six" include nil nil [1189 1199])
            ("six.moves" include nil nil [1200 1225])
            ("sys" include nil nil [1227 1237])
            ("os" include nil nil [1238 1247])
            ("re" include nil nil [1248 1257])
            ("uni2type1" include nil nil [1279 1295])
            ("_to_int" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1650 1651]))              ) nil [1638 1679])
            ("_to_float" variable nil nil [1681 1698])
            ("_to_str" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1713 1714]))              ) nil [1701 1745])
            ("_to_list_of_ints" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1768 1769]))              ) nil [1747 1849])
            ("_to_list_of_floats" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1874 1875]))              ) nil [1851 1927])
            ("_to_bool" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1942 1943]))              ) nil [1929 2050])
            ("_sanity_check" function
               (:documentation "
    Check if the file at least looks like AFM.
    If not, raise :exc:`RuntimeError`.
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [2070 2072]))                  )
                nil [2052 2716])
            ("_parse_header" function
               (:documentation "
    Reads the font metrics header (up to the char metrics) and returns
    a dictionary mapping *key* to *val*.  *val* will be converted to the
    appropriate python type as necessary; e.g.:

        * 'False'->False
        * '0'->0
        * '-168 -218 1000 898'-> [-168, -218, 1000, 898]

    Dictionary keys are

      StartFontMetrics, FontName, FullName, FamilyName, Weight,
      ItalicAngle, IsFixedPitch, FontBBox, UnderlinePosition,
      UnderlineThickness, Version, Notice, EncodingScheme, CapHeight,
      XHeight, Ascender, Descender, StartCharMetrics

    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [2736 2738]))                  )
                nil [2718 5000])
            ("_parse_char_metrics" function
               (:documentation "
    Return a character metric dictionary.  Keys are the ASCII num of
    the character, values are a (*wx*, *name*, *bbox*) tuple, where
    *wx* is the character width, *name* is the postscript language
    name, and *bbox* is a (*llx*, *lly*, *urx*, *ury*) tuple.

    This function is incomplete per the standard, but thus far parses
    all the sample afm files tried.
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [5026 5028]))                  )
                nil [5002 6640])
            ("_parse_kern_pairs" function
               (:documentation "
    Return a kern pairs dictionary; keys are (*char1*, *char2*) tuples and
    values are the kern pair value.  For example, a kern pairs line like
    ``KPX A y -50``

    will be represented as::

      d[ ('A', 'y') ] = -50

    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [6664 6666]))                  )
                nil [6642 7624])
            ("_parse_composites" function
               (:documentation "
    Return a composites dictionary.  Keys are the names of the
    composites.  Values are a num parts list of composite information,
    with each element being a (*name*, *dx*, *dy*) tuple.  Thus a
    composites line reading:

      CC Aacute 2 ; PCC A 0 0 ; PCC acute 160 170 ;

    will be represented as::

      d['Aacute'] = [ ('A', 0, 0), ('acute', 160, 170) ]

    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [7648 7650]))                  )
                nil [7626 8654])
            ("_parse_optional" function
               (:documentation "
    Parse the optional fields for kern pair data and composites

    return value is a (*kernDict*, *compositeDict*) which are the
    return values from :func:`_parse_kern_pairs`, and
    :func:`_parse_composites` if the data exists, or empty dicts
    otherwise
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [8676 8678]))                  )
                nil [8656 9460])
            ("parse_afm" function
               (:documentation "
    Parse the Adobe Font Metics file in file handle *fh*. Return value
    is a (*dhead*, *dcmetrics*, *dkernpairs*, *dcomposite*) tuple where
    *dhead* is a :func:`_parse_header` dict, *dcmetrics* is a
    :func:`_parse_composites` dict, *dkernpairs* is a
    :func:`_parse_kern_pairs` dict (possibly {}), and *dcomposite* is a
    :func:`_parse_composites` dict (possibly {})
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [9476 9478]))                  )
                nil [9462 10105])
            ("AFM" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parse the AFM file in file object *fh*
        \"\"\"" code nil (reparse-symbol indented_block_body) [10163 10225])
                            ("" code nil (reparse-symbol indented_block_body) [10234 10328])
                            ("self" variable nil (reparse-symbol indented_block_body) [10337 10357])
                            ("self" variable nil (reparse-symbol indented_block_body) [10366 10389])
                            ("self" variable nil (reparse-symbol indented_block_body) [10398 10429])
                            ("self" variable nil (reparse-symbol indented_block_body) [10438 10476])
                            ("self" variable nil (reparse-symbol indented_block_body) [10485 10513]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10144 10148])
                            ("fh" variable nil (reparse-symbol function_parameters) [10150 10152]))                          
                        :documentation "
        Parse the AFM file in file object *fh*
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10131 10514])
                    ("get_bbox_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10537 10541])
                            ("c" variable nil (reparse-symbol function_parameters) [10543 10544])
                            ("isord" variable nil (reparse-symbol function_parameters) [10546 10551]))                          )
                        (reparse-symbol indented_block_body) [10519 10667])
                    ("string_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10696 10700])
                            ("s" variable nil (reparse-symbol function_parameters) [10702 10703]))                          
                        :documentation "
        Return the string width (including kerning) and string height
        as a (*w*, *h*) tuple.
        ")
                        (reparse-symbol indented_block_body) [10672 11601])
                    ("get_str_bbox_and_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11635 11639])
                            ("s" variable nil (reparse-symbol function_parameters) [11641 11642]))                          
                        :documentation "
        Return the string bounding box
        ")
                        (reparse-symbol indented_block_body) [11606 12840])
                    ("get_str_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12862 12866])
                            ("s" variable nil (reparse-symbol function_parameters) [12868 12869]))                          
                        :documentation "
        Return the string bounding box
        ")
                        (reparse-symbol indented_block_body) [12845 12987])
                    ("get_name_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13010 13014])
                            ("c" variable nil (reparse-symbol function_parameters) [13016 13017])
                            ("isord" variable nil (reparse-symbol function_parameters) [13019 13024]))                          
                        :documentation "
        Get the name of the character, i.e., ';' is 'semicolon'
        ")
                        (reparse-symbol indented_block_body) [12992 13228])
                    ("get_width_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13252 13256])
                            ("c" variable nil (reparse-symbol function_parameters) [13258 13259])
                            ("isord" variable nil (reparse-symbol function_parameters) [13261 13266]))                          
                        :documentation "
        Get the width of the character from the character metric WX
        field
        ")
                        (reparse-symbol indented_block_body) [13233 13486])
                    ("get_width_from_char_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13520 13524])
                            ("name" variable nil (reparse-symbol function_parameters) [13526 13530]))                          
                        :documentation "
        Get the width of the character from a type1 character name
        ")
                        (reparse-symbol indented_block_body) [13491 13689])
                    ("get_height_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13714 13718])
                            ("c" variable nil (reparse-symbol function_parameters) [13720 13721])
                            ("isord" variable nil (reparse-symbol function_parameters) [13723 13728]))                          
                        :documentation "
        Get the height of character *c* from the bounding box.  This
        is the ink height (space is 0)
        ")
                        (reparse-symbol indented_block_body) [13694 13980])
                    ("get_kern_dist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14003 14007])
                            ("c1" variable nil (reparse-symbol function_parameters) [14009 14011])
                            ("c2" variable nil (reparse-symbol function_parameters) [14013 14015]))                          
                        :documentation "
        Return the kerning pair distance (possibly 0) for chars *c1*
        and *c2*
        ")
                        (reparse-symbol indented_block_body) [13985 14256])
                    ("get_kern_dist_from_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14289 14293])
                            ("name1" variable nil (reparse-symbol function_parameters) [14295 14300])
                            ("name2" variable nil (reparse-symbol function_parameters) [14302 14307]))                          
                        :documentation "
        Return the kerning pair distance (possibly 0) for chars
        *name1* and *name2*
        ")
                        (reparse-symbol indented_block_body) [14261 14522])
                    ("get_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14544 14548]))                          )
                        (reparse-symbol indented_block_body) [14527 14644])
                    ("get_fullname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14666 14670]))                          )
                        (reparse-symbol indented_block_body) [14649 14897])
                    ("get_familyname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14921 14925]))                          )
                        (reparse-symbol indented_block_body) [14902 15350])
                    ("family_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15385 15389]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15355 15429])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15449 15453]))                          )
                        (reparse-symbol indented_block_body) [15434 15553])
                    ("get_angle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15572 15576]))                          )
                        (reparse-symbol indented_block_body) [15558 15663])
                    ("get_capheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15686 15690]))                          )
                        (reparse-symbol indented_block_body) [15668 15776])
                    ("get_xheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15797 15801]))                          )
                        (reparse-symbol indented_block_body) [15781 15882])
                    ("get_underline_thickness" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15915 15919]))                          )
                        (reparse-symbol indented_block_body) [15887 16023])
                    ("get_horizontal_stem_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16058 16062]))                          
                        :documentation "
        Return the standard horizontal stem width as float, or *None* if
        not specified in AFM file.
        ")
                        (reparse-symbol indented_block_body) [16028 16245])
                    ("get_vertical_stem_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16278 16282]))                          
                        :documentation "
        Return the standard vertical stem width as float, or *None* if
        not specified in AFM file.
        ")
                        (reparse-symbol indented_block_body) [16250 16463]))                  
                :type "class")
                nil [10107 16463]))          
      :file "afm.py"
      :pointmax 16463
      :fsize 16462
      :lastmodtime '(22802 33538 0 0)
      :unmatched-syntax '((INDENT_BLOCK 7409 . 7474) (NEWLINE 7408 . 7409) (IF 7369 . 7371) (STRING_LITERAL 7402 . 7407) (COLON 7407 . 7408) (INDENT_BLOCK 4943 . 4964) (NEWLINE 4942 . 4943) (IF 4912 . 4914) (STRING_LITERAL 4923 . 4941) (COLON 4941 . 4942) (FROM 1258 . 1262) (PERIOD 1263 . 1264))))
  :file "!drive_c!ProgramData!Anaconda3!Lib!site-packages!matplotlib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
